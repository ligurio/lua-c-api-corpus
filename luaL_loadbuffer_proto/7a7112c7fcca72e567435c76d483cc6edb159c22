chunk {
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
      clauses {
        condition {
          binary {
            leftexp {
              number: 8.09477154146298e-320
            }
            binop {
            }
            rightexp {
              binary {
                leftexp {
                  number: 8.09477154146298e-320
                }
                binop {
                }
                rightexp {
                }
              }
            }
          }
        }
        block {
          chunk {
            stat {
            }
            stat {
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
            }
            stat {
              localfunc {
                name {
                  name: ""
                  num: 0
                }
                funcbody {
                  block {
                    chunk {
                      stat {
                      }
                    }
                  }
                }
              }
              semicolon: false
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              localfunc {
                name {
                  name: ""
                  num: 0
                }
                funcbody {
                  block {
                    chunk {
                      stat {
                      }
                    }
                  }
                }
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                  }
                  args {
                    str: ""
                  }
                }
              }
            }
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                expressions {
                  explast {
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              semicolon: true
            }
            stat {
            }
            stat {
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
              semicolon: true
            }
            stat {
            }
            stat {
              ifstat {
                condition {
                  str: "\271\377\377\377\377\377\377\377"
                }
                first {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
      clauses {
        condition {
        }
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                  ellipsis: "\331"
                }
              }
              semicolon: true
            }
            laststat {
              semicolon: true
            }
          }
        }
      }
      last {
        chunk {
        }
      }
    }
  }
  laststat {
    semicolon: true
  }
}
