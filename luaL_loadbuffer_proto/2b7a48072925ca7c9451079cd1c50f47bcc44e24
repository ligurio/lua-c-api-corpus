chunk {
  stat {
    call {
    }
  }
  stat {
    whilecycle {
      condition {
        unary {
          unop {
            negate: 1049344
          }
          exp {
            prefixexp {
              functioncall {
                prefArgs {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          var {
                            name {
                              name: "__le"
                              num: 0
                            }
                          }
                        }
                        args {
                          explist {
                            explist {
                              expressions {
                                str: "f\000\000\000\'%os.remove\'"
                              }
                              expressions {
                                prefixexp {
                                }
                              }
                              explast {
                                str: "f\000\000\000\'%os.remove\'"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  args {
                    explist {
                      explist {
                        expressions {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  functioncall {
                                    prefArgs {
                                      prefixexp {
                                        functioncall {
                                        }
                                      }
                                      args {
                                        explist {
                                          explist {
                                            expressions {
                                              str: "f\000\000\000\'%os.remove\'"
                                            }
                                            expressions {
                                              prefixexp {
                                              }
                                            }
                                            explast {
                                              str: "f\000\000\000\'%os.remove\'"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                args {
                                  explist {
                                    explist {
                                      expressions {
                                        str: "f\000\000\000\'%os.remove\'"
                                      }
                                      expressions {
                                        prefixexp {
                                        }
                                      }
                                      explast {
                                        str: "f\000\000\000\'%os.remove\'"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          str: "f\000\000\000\'%os.remove\'"
                        }
                        explast {
                          str: "\000\000\000\000\000\000\000\000"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    call {
      namedArgs {
        prefixexp {
        }
        name {
          name: ""
          num: 0
        }
        args {
          str: "\001\000\000\000\000\000\000\001"
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
          exp {
            str: "LUA_INIT"
          }
        }
        args {
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    whilecycle {
      condition {
        unary {
          unop {
            negate: 1049344
          }
          exp {
            prefixexp {
              functioncall {
                prefArgs {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          var {
                            name {
                              name: "__le"
                              num: 0
                            }
                          }
                        }
                        args {
                          explist {
                            explist {
                              expressions {
                                str: "f\000\000\000\'%os.remove\'"
                              }
                              expressions {
                                prefixexp {
                                }
                              }
                              explast {
                                str: "f\000\000\000\'%os.remove\'"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  args {
                    explist {
                      explist {
                        expressions {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  functioncall {
                                    prefArgs {
                                      prefixexp {
                                        functioncall {
                                        }
                                      }
                                      args {
                                        explist {
                                          explist {
                                            expressions {
                                              str: "f\000\000\000\'%os.remove\'"
                                            }
                                            expressions {
                                              prefixexp {
                                              }
                                            }
                                            explast {
                                              str: "f\000\000\000\'%os.remove\'"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                args {
                                  explist {
                                    explist {
                                      expressions {
                                        str: "f\000\000\000\'%os.remove\'"
                                      }
                                      expressions {
                                        prefixexp {
                                        }
                                      }
                                      explast {
                                        str: "f\000\000\000\'%os.remove\'"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          str: "f\000\000\000\'%os.remove\'"
                        }
                        explast {
                          str: "\000\000\000\000\000\000\000\000"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    whilecycle {
      condition {
        unary {
          unop {
            negate: 1049344
          }
          exp {
            prefixexp {
              functioncall {
                prefArgs {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          var {
                            name {
                              name: "__le"
                              num: 0
                            }
                          }
                        }
                        args {
                          explist {
                            explist {
                              expressions {
                                str: "f\000\000\000\'%os.remove\'"
                              }
                              expressions {
                                prefixexp {
                                }
                              }
                              explast {
                                str: "f\000\000\000\'%os.remove\'"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  args {
                    explist {
                      explist {
                        expressions {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  functioncall {
                                    prefArgs {
                                      prefixexp {
                                        functioncall {
                                        }
                                      }
                                      args {
                                        explist {
                                          explist {
                                            expressions {
                                              str: "f\000\000\000\'%os.remove\'"
                                            }
                                            expressions {
                                              prefixexp {
                                              }
                                            }
                                            explast {
                                              str: "f\000\000\000\'%os.remove\'"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                args {
                                  explist {
                                  }
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          str: "f\000\000\000\'%os.remove\'"
                        }
                        explast {
                          str: "\000\000\000\000\000\000\000\000"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    call {
      namedArgs {
        prefixexp {
        }
        name {
          name: ""
          num: 0
        }
        args {
          str: "\001\000\000\000\000\000\000\001"
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
          functioncall {
            prefArgs {
              prefixexp {
              }
              args {
                tableconstructor {
                  fieldlist {
                    firstField {
                    }
                    lastSep {
                      comma: 1
                    }
                  }
                }
              }
            }
          }
        }
        name {
          name: ""
          num: 0
        }
        args {
          str: "\001\000\000\000\000\000\000\001"
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
}
