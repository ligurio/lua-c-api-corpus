chunk {
  stat {
    localnames {
      namelist {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
      }
    }
    semicolon: true
  }
  stat {
    list {
      varlist {
        var {
          indexname {
            prefixexp {
            }
            Name: "\000\000\000\000"
          }
        }
        vars {
        }
        vars {
        }
        vars {
          indexexpr {
            prefixexp {
              functioncall {
                namedArgs {
                  prefixexp {
                    exp {
                      prefixexp {
                        exp {
                          binary {
                            leftexp {
                            }
                            binop {
                              or: 0
                            }
                            rightexp {
                              prefixexp {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  name {
                    name: ""
                    num: 0
                  }
                  args {
                  }
                }
              }
            }
            exp {
            }
          }
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
          name {
            name: "`"
            num: 0
          }
        }
        vars {
          indexexpr {
            prefixexp {
              functioncall {
                namedArgs {
                  prefixexp {
                  }
                  name {
                    name: "\377\377\376\342"
                    num: 0
                  }
                  args {
                  }
                }
              }
            }
            exp {
            }
          }
        }
        vars {
        }
        vars {
        }
        vars {
          indexname {
            prefixexp {
            }
            Name: "\000\000\000\000"
          }
        }
        vars {
        }
        vars {
        }
        vars {
          indexname {
            prefixexp {
            }
            Name: "\000\000\000\000"
          }
        }
        vars {
          indexexpr {
            prefixexp {
              functioncall {
                namedArgs {
                  prefixexp {
                  }
                  name {
                    name: ""
                    num: 0
                  }
                  args {
                  }
                }
              }
            }
            exp {
            }
          }
        }
        vars {
        }
        vars {
        }
        vars {
          indexname {
            prefixexp {
            }
            Name: "\377"
          }
        }
        vars {
          indexexpr {
            prefixexp {
              functioncall {
                namedArgs {
                  prefixexp {
                  }
                  name {
                    name: "\377\377\376\342"
                    num: 0
                  }
                  args {
                    tableconstructor {
                    }
                  }
                }
              }
            }
            exp {
            }
          }
        }
        vars {
          indexexpr {
            prefixexp {
              functioncall {
                namedArgs {
                  prefixexp {
                    exp {
                      prefixexp {
                        exp {
                          binary {
                            leftexp {
                            }
                            binop {
                              and: 12713984
                            }
                            rightexp {
                              prefixexp {
                                exp {
                                  binary {
                                    leftexp {
                                    }
                                    binop {
                                      or: 0
                                    }
                                    rightexp {
                                      prefixexp {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  name {
                    name: ""
                    num: 0
                  }
                  args {
                  }
                }
              }
            }
            exp {
            }
          }
        }
        vars {
        }
        vars {
          indexexpr {
            prefixexp {
              functioncall {
                prefArgs {
                  prefixexp {
                    exp {
                      nil: 4177526784
                    }
                  }
                  args {
                  }
                }
              }
            }
            exp {
            }
          }
        }
        vars {
        }
      }
      explist {
        expressions {
          unary {
            unop {
            }
            exp {
            }
          }
        }
        explast {
          function {
            body {
              block {
                chunk {
                  stat {
                    semicolon: true
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
