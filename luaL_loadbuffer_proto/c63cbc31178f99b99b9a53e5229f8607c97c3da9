chunk {
  stat {
    call {
      prefArgs {
        prefixexp {
          var {
            name {
              name: "load"
              num: 67108864
            }
          }
        }
        args {
          explist {
            explist {
              explast {
                function {
                  body {
                    parlist {
                    }
                    block {
                      chunk {
                        laststat {
                          explist {
                            explist {
                              explast {
                                prefixexp {
                                  functioncall {
                                    namedArgs {
                                      prefixexp {
                                      }
                                      name {
                                        name: ""
                                        num: 0
                                      }
                                      args {
                                        explist {
                                          explist {
                                            expressions {
                                              binary {
                                                leftexp {
                                                  ellipsis: ""
                                                }
                                                binop {
                                                  lessEqual: 4261412863
                                                }
                                                rightexp {
                                                  binary {
                                                    leftexp {
                                                    }
                                                    binop {
                                                      concat: 2752512
                                                    }
                                                    rightexp {
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            expressions {
                                              binary {
                                                leftexp {
                                                  ellipsis: ""
                                                }
                                                binop {
                                                  concat: 1
                                                }
                                                rightexp {
                                                  binary {
                                                    leftexp {
                                                      str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                                                    }
                                                    binop {
                                                    }
                                                    rightexp {
                                                      nil: 0
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            explast {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          semicolon: true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 537558272
      }
      startexp {
      }
      stopexp {
        binary {
          leftexp {
            binary {
              leftexp {
                str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
              }
              binop {
              }
              rightexp {
                nil: 0
              }
            }
          }
          binop {
            add: 0
          }
          rightexp {
          }
        }
      }
      stepexp {
        unary {
          unop {
          }
          exp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              call {
                prefArgs {
                  prefixexp {
                    var {
                      name {
                        name: "load"
                        num: 67108864
                      }
                    }
                  }
                  args {
                    explist {
                      explist {
                        explast {
                          function {
                            body {
                              parlist {
                              }
                              block {
                                chunk {
                                  laststat {
                                    explist {
                                      explist {
                                        explast {
                                          prefixexp {
                                            functioncall {
                                              namedArgs {
                                                prefixexp {
                                                }
                                                name {
                                                  name: ""
                                                  num: 0
                                                }
                                                args {
                                                  explist {
                                                    explist {
                                                      expressions {
                                                        binary {
                                                          leftexp {
                                                            ellipsis: ""
                                                          }
                                                          binop {
                                                            lessEqual: 4261412863
                                                          }
                                                          rightexp {
                                                            binary {
                                                              leftexp {
                                                              }
                                                              binop {
                                                                concat: 2752512
                                                              }
                                                              rightexp {
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      expressions {
                                                        binary {
                                                          leftexp {
                                                            ellipsis: ""
                                                          }
                                                          binop {
                                                            concat: 1
                                                          }
                                                          rightexp {
                                                            binary {
                                                              leftexp {
                                                                str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                                                              }
                                                              binop {
                                                              }
                                                              rightexp {
                                                                nil: 0
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      explast {
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    semicolon: true
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                    var {
                      indexexpr {
                        prefixexp {
                        }
                        exp {
                          number: 0
                        }
                      }
                    }
                  }
                  args {
                    explist {
                      explist {
                        explast {
                          function {
                            body {
                              parlist {
                              }
                              block {
                                chunk {
                                  laststat {
                                    break: 0
                                    semicolon: true
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  laststat {
    explist {
    }
    semicolon: true
  }
}
