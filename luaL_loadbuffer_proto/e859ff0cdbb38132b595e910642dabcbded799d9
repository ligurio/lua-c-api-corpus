chunk {
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<<7<\'<9"
                  }
                  expressions {
                  }
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  expressions {
                  }
                  expressions {
                    prefixexp {
                      var {
                        indexexpr {
                          prefixexp {
                          }
                          exp {
                            function {
                              body {
                                block {
                                  chunk {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  explast {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
            binary {
              leftexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
              binop {
                concat: 0
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            forcyclename {
              name {
                name: ""
                num: 134217729
              }
              startexp {
                binary {
                  leftexp {
                  }
                  binop {
                  }
                  rightexp {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                          }
                          binop {
                            add: 0
                          }
                          rightexp {
                            str: "\'-8<table.pack\'\'/8<\'<8<8"
                          }
                        }
                      }
                      binop {
                        concat: 0
                      }
                      rightexp {
                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                      }
                    }
                  }
                }
              }
              stopexp {
              }
              stepexp {
                binary {
                  leftexp {
                    binary {
                      leftexp {
                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                      }
                      binop {
                        lessEqual: 167772160
                      }
                      rightexp {
                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                      }
                    }
                  }
                  binop {
                    div: 0
                  }
                  rightexp {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                          }
                          binop {
                          }
                          rightexp {
                            binary {
                              leftexp {
                                str: "\'-8<table.pack\'\'/8<\'<8<8"
                              }
                              binop {
                                concat: 118
                              }
                              rightexp {
                                str: "\'-8<table.pack\'\'/8<\'<8<8"
                              }
                            }
                          }
                        }
                      }
                      binop {
                        div: 0
                      }
                      rightexp {
                        binary {
                          leftexp {
                            str: "\'-8<table.pack\'\'/8<\'<8<8"
                          }
                          binop {
                            add: 0
                          }
                          rightexp {
                            str: "\'-8<table.pack\'\'/8<\'<8<8"
                          }
                        }
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
              }
              binop {
              }
              rightexp {
                binary {
                  leftexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                  binop {
                    concat: 0
                  }
                  rightexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                }
              }
            }
          }
          binop {
            div: 0
          }
          rightexp {
            binary {
              leftexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
              binop {
                add: 0
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 134217729
      }
      startexp {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                  binop {
                    add: 0
                  }
                  rightexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                }
              }
              binop {
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
        }
      }
      stopexp {
      }
      stepexp {
        binary {
          leftexp {
            binary {
              leftexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
              binop {
                lessEqual: 167772160
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
          binop {
            div: 0
          }
          rightexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                  }
                  binop {
                  }
                  rightexp {
                    binary {
                      leftexp {
                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                      }
                      binop {
                        concat: 118
                      }
                      rightexp {
                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                      }
                    }
                  }
                }
              }
              binop {
                div: 0
              }
              rightexp {
                binary {
                  leftexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                  binop {
                    add: 0
                  }
                  rightexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 134217729
      }
      startexp {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                  binop {
                    add: 0
                  }
                  rightexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                }
              }
              binop {
                concat: 0
              }
              rightexp {
                ellipsis: "\377\377"
              }
            }
          }
        }
      }
      stopexp {
      }
      stepexp {
        binary {
          leftexp {
            binary {
              leftexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
              binop {
                lessEqual: 167772160
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
          binop {
            div: 0
          }
          rightexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                  }
                  binop {
                  }
                  rightexp {
                    binary {
                      leftexp {
                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                      }
                      binop {
                        concat: 118
                      }
                      rightexp {
                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                      }
                    }
                  }
                }
              }
              binop {
                div: 0
              }
              rightexp {
                binary {
                  leftexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                  binop {
                    add: 0
                  }
                  rightexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            laststat {
              break: 0
            }
          }
        }
      }
    }
  }
}
