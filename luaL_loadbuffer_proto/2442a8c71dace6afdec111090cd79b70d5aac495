chunk {
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 2752512
        }
        lastname {
          name: ""
          num: 0
        }
      }
      body {
        parlist {
        }
        block {
          chunk {
            stat {
              func {
                name {
                  firstname {
                    name: ""
                    num: 0
                  }
                  lastname {
                    name: ""
                    num: 0
                  }
                }
                body {
                  block {
                    chunk {
                      laststat {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        nil: 5
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          binary {
            leftexp {
              ellipsis: ""
            }
            binop {
              concat: 2752512
            }
            rightexp {
              binary {
                leftexp {
                  str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                }
                binop {
                  concat: 2752512
                }
                rightexp {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                        }
                        binop {
                          concat: 2752512
                        }
                        rightexp {
                          ellipsis: "\000\'>io.openGGGGG\'\000\000&&\'>\'\000\000&\'>\'"
                        }
                      }
                    }
                    binop {
                      less: 1073742080
                    }
                    rightexp {
                      unary {
                        unop {
                          negate: 0
                        }
                        exp {
                          unary {
                            unop {
                            }
                            exp {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        expressions {
          binary {
            leftexp {
              unary {
                unop {
                  negate: 0
                }
                exp {
                }
              }
            }
            binop {
              concat: 2752512
            }
            rightexp {
              binary {
                leftexp {
                  str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                }
                binop {
                  concat: 2752512
                }
                rightexp {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                          ellipsis: "\000\'>io.openGGGGG\'\000\000&&\'>\'\000\000&\'>\'"
                        }
                      }
                    }
                    binop {
                      less: 1073742080
                    }
                    rightexp {
                      unary {
                        unop {
                          negate: 0
                        }
                        exp {
                          unary {
                            unop {
                            }
                            exp {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        explast {
          tableconstructor {
          }
        }
      }
    }
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: "c\tunter_+"
          num: 0
        }
        names {
          name: "counter_8"
          num: 0
        }
      }
      explist {
        expressions {
        }
        explast {
          number: -709.375
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
        num: 0
      }
      funcbody {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        exprassign {
                          key {
                            function {
                              body {
                                block {
                                  chunk {
                                    laststat {
                                      explist {
                                      }
                                      semicolon: true
                                    }
                                  }
                                }
                              }
                            }
                          }
                          value {
                            true: 0
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        semicolon: true
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        tableconstructor {
          fieldlist {
            firstField {
            }
          }
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        lastname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
            laststat {
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            list {
              varlist {
                var {
                  indexname {
                    prefixexp {
                    }
                    Name: ""
                  }
                }
                vars {
                  name {
                    name: "c\tunter_+"
                    num: 24944
                  }
                }
                vars {
                  indexexpr {
                    prefixexp {
                    }
                    exp {
                      unary {
                        unop {
                          negate: 0
                        }
                        exp {
                        }
                      }
                    }
                  }
                }
                vars {
                }
              }
              explist {
                expressions {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        exprassign {
                          key {
                            function {
                              body {
                                block {
                                  chunk {
                                    laststat {
                                      semicolon: true
                                    }
                                  }
                                }
                              }
                            }
                          }
                          value {
                            true: 0
                          }
                        }
                      }
                    }
                  }
                }
                expressions {
                }
                explast {
                  unary {
                    unop {
                      negate: 0
                    }
                    exp {
                      prefixexp {
                        functioncall {
                          namedArgs {
                            prefixexp {
                            }
                            name {
                              name: ""
                              num: 0
                            }
                            args {
                              explist {
                                explist {
                                  expressions {
                                    binary {
                                      leftexp {
                                        ellipsis: ""
                                      }
                                      binop {
                                        concat: 2752512
                                      }
                                      rightexp {
                                        binary {
                                          leftexp {
                                            str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                                          }
                                          binop {
                                            concat: 2752512
                                          }
                                          rightexp {
                                            binary {
                                              leftexp {
                                                binary {
                                                  leftexp {
                                                    str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                                                  }
                                                  binop {
                                                    concat: 2752512
                                                  }
                                                  rightexp {
                                                    ellipsis: "\000\'>io.openGGGGG\'\000\000&&\'>\'\000\000&\'>\'"
                                                  }
                                                }
                                              }
                                              binop {
                                                less: 1073742080
                                              }
                                              rightexp {
                                                unary {
                                                  unop {
                                                    negate: 0
                                                  }
                                                  exp {
                                                    unary {
                                                      unop {
                                                      }
                                                      exp {
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  expressions {
                                    binary {
                                      leftexp {
                                        unary {
                                          unop {
                                            negate: 0
                                          }
                                          exp {
                                          }
                                        }
                                      }
                                      binop {
                                        concat: 2752512
                                      }
                                      rightexp {
                                        binary {
                                          leftexp {
                                            str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                                          }
                                          binop {
                                            concat: 2752512
                                          }
                                          rightexp {
                                            binary {
                                              leftexp {
                                                binary {
                                                  leftexp {
                                                    str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                                                  }
                                                  binop {
                                                    concat: 0
                                                  }
                                                  rightexp {
                                                    ellipsis: "\000\'>io.openGGGGG\'\000\000&&\'>\'\000\000&\'>\'"
                                                  }
                                                }
                                              }
                                              binop {
                                                less: 1073742080
                                              }
                                              rightexp {
                                                unary {
                                                  unop {
                                                    negate: 0
                                                  }
                                                  exp {
                                                    unary {
                                                      unop {
                                                      }
                                                      exp {
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  explast {
                                    tableconstructor {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            list {
              varlist {
                var {
                }
                vars {
                }
                vars {
                  indexname {
                    prefixexp {
                      exp {
                        binary {
                          leftexp {
                            str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                          }
                          binop {
                            concat: 2752512
                          }
                          rightexp {
                            ellipsis: "\000\'>io.openGGGGG\'\000\000\246&&\'>\'\000\000&\'>\'"
                          }
                        }
                      }
                    }
                    Name: ""
                  }
                }
              }
              explist {
                expressions {
                  tableconstructor {
                  }
                }
                explast {
                }
              }
            }
          }
          laststat {
          }
        }
      }
      condition {
        nil: 65536
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            ifstat {
              condition {
                true: 67125248
              }
              first {
                chunk {
                }
              }
            }
          }
          stat {
            call {
            }
          }
        }
      }
      condition {
      }
    }
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
    call {
      namedArgs {
        prefixexp {
        }
        name {
          name: ""
          num: 0
        }
        args {
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: true
          }
          laststat {
          }
        }
      }
      condition {
        nil: 251
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: "getmetatable"
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
          stat {
            forcyclename {
              name {
                name: "_ENV"
                num: 0
              }
              startexp {
              }
              stopexp {
                number: 767
              }
              doblock {
                block {
                  chunk {
                    stat {
                      func {
                        name {
                          firstname {
                            name: ""
                            num: 0
                          }
                          names {
                            name: ""
                            num: 0
                          }
                        }
                        body {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                      semicolon: true
                    }
                  }
                }
              }
            }
            semicolon: false
          }
          stat {
            list {
              varlist {
                var {
                  name {
                    name: ""
                    num: 0
                  }
                }
              }
              explist {
                expressions {
                  str: ""
                }
                explast {
                  unary {
                    unop {
                    }
                    exp {
                    }
                  }
                }
              }
            }
            semicolon: true
          }
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
        }
      }
      explist {
        expressions {
          str: "\'<printmathn<7<<7<\'<9"
        }
        expressions {
          nil: 6841088
        }
        expressions {
          false: 570425344
        }
        expressions {
          str: "\'<maethn<7<<7<\'<9"
        }
        explast {
          str: "\'<mathn<7<<7.<\'<9"
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    block {
      block {
        chunk {
          stat {
            list {
              varlist {
                var {
                  indexname {
                    prefixexp {
                    }
                    Name: ""
                  }
                }
                vars {
                  indexname {
                    prefixexp {
                    }
                    Name: "\000\000\000\000"
                  }
                }
                vars {
                  indexexpr {
                    prefixexp {
                    }
                    exp {
                      unary {
                        unop {
                          negate: 0
                        }
                        exp {
                        }
                      }
                    }
                  }
                }
                vars {
                }
              }
              explist {
                expressions {
                  binary {
                    leftexp {
                      ellipsis: ""
                    }
                    binop {
                      concat: 2752512
                    }
                    rightexp {
                      binary {
                        leftexp {
                          str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                        }
                        binop {
                          concat: 2752512
                        }
                        rightexp {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                  str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                                }
                                binop {
                                  concat: 2752512
                                }
                                rightexp {
                                  ellipsis: "\000\'>io.openGGGGG\'\000\000&&\'>\'\000\000&\'>\'"
                                }
                              }
                            }
                            binop {
                              less: 1073742080
                            }
                            rightexp {
                              unary {
                                unop {
                                  negate: 0
                                }
                                exp {
                                  unary {
                                    unop {
                                    }
                                    exp {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                expressions {
                  binary {
                    leftexp {
                      unary {
                        unop {
                          negate: 0
                        }
                        exp {
                        }
                      }
                    }
                    binop {
                      concat: 2752512
                    }
                    rightexp {
                      binary {
                        leftexp {
                          str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                        }
                        binop {
                          concat: 2752512
                        }
                        rightexp {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                  str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                                }
                                binop {
                                  concat: 0
                                }
                                rightexp {
                                  ellipsis: "\000\'>io.openGGGGG\'\000\000&&\'>\'\000\000&\'>\'"
                                }
                              }
                            }
                            binop {
                              less: 1073742080
                            }
                            rightexp {
                              unary {
                                unop {
                                  negate: 0
                                }
                                exp {
                                  unary {
                                    unop {
                                    }
                                    exp {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                explast {
                  tableconstructor {
                  }
                }
              }
            }
          }
          stat {
            func {
              name {
                firstname {
                  name: "\202"
                  num: 2752512
                }
                lastname {
                  name: "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
                  num: 0
                }
              }
              body {
                parlist {
                }
                block {
                  chunk {
                    stat {
                      forcyclelist {
                        names {
                          firstname {
                            name: ""
                            num: 0
                          }
                        }
                        expressions {
                          expressions {
                            unary {
                              unop {
                              }
                              exp {
                              }
                            }
                          }
                          expressions {
                          }
                          explast {
                          }
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
