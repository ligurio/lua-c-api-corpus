chunk {
  stat {
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        parlist {
          namelist {
            namelist {
              firstname {
                name: "require"
                num: 0
              }
              names {
                name: ""
                num: 0
              }
            }
          }
        }
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                  }
                  explast {
                  }
                }
              }
            }
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    ellipsis: "table.pack"
                  }
                  expressions {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                          }
                          args {
                            str: "\'"
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    unary {
                      unop {
                        negate: 0
                      }
                      exp {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                prefixexp {
                                }
                              }
                              binop {
                              }
                              rightexp {
                                str: "debug.traceback"
                              }
                            }
                          }
                          binop {
                            concat: 704643072
                          }
                          rightexp {
                            prefixexp {
                              var {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  expressions {
                  }
                  expressions {
                    ellipsis: "LUA_PATH_5_2"
                  }
                  expressions {
                    number: 6.35588800043035e-310
                  }
                  expressions {
                    prefixexp {
                    }
                  }
                  expressions {
                  }
                  expressions {
                    tableconstructor {
                    }
                  }
                  expressions {
                    unary {
                      unop {
                        negate: 0
                      }
                      exp {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                prefixexp {
                                }
                              }
                              binop {
                                concat: 704643072
                              }
                              rightexp {
                                str: "debug.traceback"
                              }
                            }
                          }
                          binop {
                            concat: 704643072
                          }
                          rightexp {
                            prefixexp {
                              var {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  explast {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                          }
                          args {
                            str: "\'"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          explist {
            explist {
              expressions {
                number: nan
              }
              explast {
              }
            }
          }
        }
      }
    }
  }
  laststat {
    semicolon: true
  }
}
