chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                        binary {
                          leftexp {
                            prefixexp {
                              functioncall {
                                prefArgs {
                                  prefixexp {
                                    functioncall {
                                    }
                                  }
                                  args {
                                    str: "}\001\'//\'  pni  pnil"
                                  }
                                }
                              }
                            }
                          }
                          binop {
                            exp: 0
                          }
                          rightexp {
                            prefixexp {
                              exp {
                                number: 0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                    exp: 0
                  }
                  rightexp {
                    function {
                      body {
                        parlist {
                          ellipsis: "\001\000\000\000\000\000\000\200"
                        }
                        block {
                          chunk {
                            stat {
                              semicolon: true
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        binary {
          leftexp {
            prefixexp {
              functioncall {
                namedArgs {
                  prefixexp {
                  }
                  name {
                    name: ""
                    num: 0
                  }
                  args {
                    str: "\\001\\000\\000\\000\\000\\000\\000\\003"
                  }
                }
              }
            }
          }
          binop {
          }
          rightexp {
            binary {
              leftexp {
                number: 5.32620943405803e-312
              }
              binop {
              }
              rightexp {
              }
            }
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
            ellipsis: "\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233\233"
          }
        }
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    block {
      block {
        chunk {
          stat {
            func {
              name {
                firstname {
                  name: "tonumber"
                  num: 2048
                }
              }
              body {
                parlist {
                  namelist {
                    namelist {
                      firstname {
                        name: "4444444"
                        num: 0
                      }
                    }
                  }
                }
                block {
                  chunk {
                    stat {
                      forcyclelist {
                        names {
                          firstname {
                            name: ""
                            num: 0
                          }
                        }
                        expressions {
                          explast {
                          }
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                    stat {
                      list {
                        varlist {
                          var {
                            name {
                              name: ""
                              num: 4278190080
                            }
                          }
                          vars {
                          }
                        }
                        explist {
                          expressions {
                            number: 6.63123684676648e-316
                          }
                          expressions {
                            prefixexp {
                              functioncall {
                                prefArgs {
                                  prefixexp {
                                  }
                                  args {
                                    str: "\'"
                                  }
                                }
                              }
                            }
                          }
                          expressions {
                            binary {
                              leftexp {
                                ellipsis: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
                              }
                              binop {
                                greater: 3080192
                              }
                              rightexp {
                                true: 8224
                              }
                            }
                          }
                          expressions {
                            unary {
                              unop {
                              }
                              exp {
                                nil: 4
                              }
                            }
                          }
                          expressions {
                            tableconstructor {
                            }
                          }
                          expressions {
                          }
                          expressions {
                          }
                          expressions {
                            binary {
                              leftexp {
                              }
                              binop {
                              }
                              rightexp {
                                nil: 0
                              }
                            }
                          }
                          expressions {
                            tableconstructor {
                            }
                          }
                          expressions {
                            unary {
                              unop {
                              }
                              exp {
                                str: "math.randomseed"
                              }
                            }
                          }
                          explast {
                            prefixexp {
                              functioncall {
                                prefArgs {
                                  prefixexp {
                                  }
                                  args {
                                    str: "\'"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          laststat {
            break: 0
            semicolon: true
          }
        }
      }
    }
    semicolon: true
  }
}
