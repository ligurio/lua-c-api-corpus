chunk {
  stat {
    forcyclename {
      name {
        name: "\000\000\000\000\000\000\0001"
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      stepexp {
        binary {
          leftexp {
            number: 1.1026827945250703e+161
          }
          binop {
            mult: 0
          }
          rightexp {
            binary {
              leftexp {
                number: 1.1026827945250703e+161
              }
              binop {
                mult: 8
              }
              rightexp {
                binary {
                  leftexp {
                    number: 1.1026827945250703e+161
                  }
                  binop {
                    sub: 8
                  }
                  rightexp {
                    binary {
                      leftexp {
                        number: 1.1026827945250703e+161
                      }
                      binop {
                        mult: 8
                      }
                      rightexp {
                        binary {
                          leftexp {
                            number: 960
                          }
                          binop {
                            mult: 8
                          }
                          rightexp {
                            number: 1.750005382780623e+190
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              func {
                name {
                  firstname {
                    name: "tonumber"
                    num: 167772160
                  }
                }
                body {
                  block {
                    chunk {
                      stat {
                        block {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                      stat {
                        semicolon: true
                      }
                      stat {
                        list {
                          varlist {
                            var {
                            }
                            vars {
                            }
                          }
                          explist {
                            expressions {
                              unary {
                                unop {
                                }
                                exp {
                                  false: 256
                                }
                              }
                            }
                            expressions {
                              str: "\'<mathn<7<<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            explast {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                          }
                        }
                      }
                      stat {
                        list {
                          varlist {
                            var {
                            }
                            vars {
                              indexexpr {
                                prefixexp {
                                  exp {
                                    binary {
                                      leftexp {
                                        unary {
                                          unop {
                                          }
                                          exp {
                                            binary {
                                              leftexp {
                                              }
                                              binop {
                                                concat: 0
                                              }
                                              rightexp {
                                              }
                                            }
                                          }
                                        }
                                      }
                                      binop {
                                      }
                                      rightexp {
                                      }
                                    }
                                  }
                                }
                                exp {
                                }
                              }
                            }
                          }
                          explist {
                            expressions {
                              ellipsis: "\'<mathn<7<pack<7<\'<9"
                            }
                            expressions {
                            }
                            expressions {
                            }
                            expressions {
                              str: "\'<mathn<7<<7<\'<9"
                            }
                            expressions {
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            explast {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                          }
                        }
                      }
                      stat {
                        list {
                          varlist {
                            var {
                              indexexpr {
                                prefixexp {
                                }
                                exp {
                                  binary {
                                    leftexp {
                                      prefixexp {
                                      }
                                    }
                                    binop {
                                      add: 2
                                    }
                                    rightexp {
                                    }
                                  }
                                }
                              }
                            }
                          }
                          explist {
                            expressions {
                              ellipsis: ""
                            }
                            expressions {
                              str: "\'<mathn<7<<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            explast {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  laststat {
  }
}
