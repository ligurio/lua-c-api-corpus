chunk {
  stat {
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        nil: 20
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        number: nan
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        false: 0
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: false
          }
        }
      }
      condition {
        false: 20
      }
    }
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
          stat {
            whilecycle {
              condition {
                prefixexp {
                  exp {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                            number: -19
                          }
                          binop {
                            mod: 0
                          }
                          rightexp {
                            unary {
                              unop {
                                length: 0
                              }
                              exp {
                                str: "tackage.path"
                              }
                            }
                          }
                        }
                      }
                      binop {
                        mod: 0
                      }
                      rightexp {
                        number: -19
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                    stat {
                      localnames {
                        namelist {
                          firstname {
                            name: ""
                            num: 0
                          }
                        }
                        explist {
                          expressions {
                            binary {
                              leftexp {
                                binary {
                                  leftexp {
                                    number: -19
                                  }
                                  binop {
                                    mod: 0
                                  }
                                  rightexp {
                                    unary {
                                      unop {
                                        length: 4
                                      }
                                      exp {
                                        str: "tackage.path"
                                      }
                                    }
                                  }
                                }
                              }
                              binop {
                                mod: 0
                              }
                              rightexp {
                                number: -19
                              }
                            }
                          }
                          explast {
                            prefixexp {
                              var {
                                name {
                                  name: "ppppppppppppppppppppppppppppppppppppppppppppppp"
                                  num: 0
                                }
                              }
                            }
                          }
                        }
                      }
                      semicolon: true
                    }
                    stat {
                      whilecycle {
                        condition {
                          prefixexp {
                            exp {
                              binary {
                                leftexp {
                                  binary {
                                    leftexp {
                                      number: -19
                                    }
                                    binop {
                                      mod: 0
                                    }
                                    rightexp {
                                      prefixexp {
                                        exp {
                                          binary {
                                            leftexp {
                                              binary {
                                                leftexp {
                                                  number: -19
                                                }
                                                binop {
                                                  mod: 0
                                                }
                                                rightexp {
                                                  unary {
                                                    unop {
                                                      length: 0
                                                    }
                                                    exp {
                                                      str: "tackage.path"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            binop {
                                              mod: 0
                                            }
                                            rightexp {
                                              number: -19
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                binop {
                                  mod: 0
                                }
                                rightexp {
                                  number: -19
                                }
                              }
                            }
                          }
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                    laststat {
                    }
                  }
                }
              }
            }
            semicolon: true
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        number: nan
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        number: nan
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        number: nan
      }
    }
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                nil: 536870932
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                number: nan
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                false: 0
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                false: 20
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                number: nan
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                number: nan
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  laststat {
                    semicolon: true
                  }
                }
              }
              condition {
                number: nan
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                number: nan
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  laststat {
                    break: 0
                  }
                }
              }
              condition {
                false: 0
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                false: 0
              }
            }
          }
          laststat {
            explist {
            }
          }
        }
      }
      condition {
        false: 0
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        false: 0
      }
    }
  }
  laststat {
    explist {
      explist {
        explast {
          number: 1.7451380326808e-310
        }
      }
    }
  }
}
