chunk {
  stat {
    list {
      varlist {
        var {
          indexname {
            prefixexp {
            }
            Name: "char"
          }
        }
        vars {
          indexname {
            prefixexp {
              functioncall {
                namedArgs {
                  prefixexp {
                    var {
                      name {
                        name: "\001\000\000\027"
                        num: 0
                      }
                    }
                  }
                  name {
                    name: ""
                    num: 0
                  }
                  args {
                  }
                }
              }
            }
            Name: "\366"
          }
        }
        vars {
          name {
            name: ""
            num: 8192
          }
        }
      }
      explist {
        expressions {
          prefixexp {
            exp {
              prefixexp {
                var {
                  name {
                    name: "\001\000\000\027"
                    num: 0
                  }
                }
              }
            }
          }
        }
        explast {
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: "_ENV"
        num: 0
      }
      startexp {
        number: 7.3528075193188562e+223
      }
      stopexp {
        prefixexp {
          var {
            name {
              name: "\013\314\314\314\314\314\314\313"
              num: 0
            }
          }
        }
      }
      stepexp {
        unary {
          unop {
            negate: 0
          }
          exp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    ellipsis: "__add"
                  }
                  explast {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                          }
                          binop {
                            or: 0
                          }
                          rightexp {
                            prefixexp {
                              exp {
                                number: 0
                              }
                            }
                          }
                        }
                      }
                      binop {
                        greater: 0
                      }
                      rightexp {
                        binary {
                          leftexp {
                            true: 946238581
                          }
                          binop {
                            greater: 2097152
                          }
                          rightexp {
                            binary {
                              leftexp {
                                tableconstructor {
                                  fieldlist {
                                    firstField {
                                      exprassign {
                                        key {
                                          nil: 6
                                        }
                                        value {
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              binop {
                                greaterEqual: 503316479
                              }
                              rightexp {
                                binary {
                                  leftexp {
                                    tableconstructor {
                                      fieldlist {
                                        firstField {
                                          exprassign {
                                            key {
                                              nil: 6
                                            }
                                            value {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  binop {
                                    greaterEqual: 503316479
                                  }
                                  rightexp {
                                    binary {
                                      leftexp {
                                      }
                                      binop {
                                        sub: 2105344
                                      }
                                      rightexp {
                                        prefixexp {
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                      forcyclename {
                        name {
                          name: ""
                          num: 0
                        }
                        startexp {
                          prefixexp {
                            var {
                              indexname {
                                prefixexp {
                                }
                                Name: "\033"
                              }
                            }
                          }
                        }
                        stopexp {
                        }
                        stepexp {
                          unary {
                            unop {
                            }
                            exp {
                              ellipsis
                            }
                          }
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                  }
                }
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                      lastSep {
                        semicolon: 0
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  laststat {
    explist {
      explist {
        expressions {
          ellipsis: "\001\000\000\003"
        }
        explast {
          true: 0
        }
      }
    }
  }
}
