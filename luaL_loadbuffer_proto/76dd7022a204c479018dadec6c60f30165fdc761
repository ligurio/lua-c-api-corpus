chunk {
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: "LUA_INIT"
          num: 4
        }
        names {
          name: "["
          num: 8
        }
        names {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 37
        }
        names {
          name: "L\325A_INIT"
          num: 0
        }
        names {
          name: "LUA_INIT"
          num: 37
        }
        names {
          name: ""
          num: 37
        }
      }
      expressions {
        expressions {
          function {
            body {
              parlist {
                ellipsis: "\005\000\000\000"
              }
              block {
                chunk {
                  stat {
                    whilecycle {
                      condition {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                        ellipsis: "G"
                                      }
                                      binop {
                                      }
                                      rightexp {
                                        binary {
                                          leftexp {
                                            binary {
                                              leftexp {
                                                false: 4259840
                                              }
                                              binop {
                                                notEqual: 0
                                              }
                                              rightexp {
                                              }
                                            }
                                          }
                                          binop {
                                            less: 4259840
                                          }
                                          rightexp {
                                            str: "G"
                                          }
                                        }
                                      }
                                    }
                                  }
                                  binop {
                                    notEqual: 0
                                  }
                                  rightexp {
                                  }
                                }
                              }
                              binop {
                              }
                              rightexp {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                        false: 4259840
                                      }
                                      binop {
                                        notEqual: 0
                                      }
                                      rightexp {
                                      }
                                    }
                                  }
                                  binop {
                                    notEqual: 0
                                  }
                                  rightexp {
                                    str: "G"
                                  }
                                }
                              }
                            }
                          }
                          binop {
                            notEqual: 0
                          }
                          rightexp {
                          }
                        }
                      }
                      doblock {
                        block {
                          chunk {
                            laststat {
                              break: 128
                            }
                          }
                        }
                      }
                    }
                    semicolon: true
                  }
                }
              }
            }
          }
        }
        explast {
          str: "\000\000\000\000\000\000\000\000"
        }
      }
      doblock {
        block {
          chunk {
            laststat {
              break: 128
            }
          }
        }
      }
    }
  }
}
