chunk {
  stat {
    block {
      block {
        chunk {
          stat {
            call {
            }
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            stat {
              localfunc {
                name {
                  name: ""
                  num: 905969664
                }
                funcbody {
                  parlist {
                    namelist {
                      namelist {
                        firstname {
                          name: ""
                          num: 0
                        }
                      }
                    }
                  }
                  block {
                    chunk {
                      laststat {
                        break: 7296
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: "\030\000\000\000"
        num: 0
      }
      funcbody {
        block {
          chunk {
            stat {
              ifstat {
                condition {
                }
                first {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
          prefixexp {
            exp {
              tableconstructor {
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 1073741824
        }
      }
      body {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localnames {
              namelist {
                firstname {
                  name: "pcall"
                  num: 6513008
                }
                names {
                  name: "counter_8"
                  num: 0
                }
                names {
                  name: "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq"
                  num: 4177526784
                }
              }
              explist {
                expressions {
                  ellipsis: "counter_8"
                }
                explast {
                  number: -709.375
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    localfunc {
                      name {
                        name: "\030\000\000\000"
                        num: 0
                      }
                      funcbody {
                        block {
                          chunk {
                            laststat {
                              semicolon: true
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                          stat {
                            list {
                              varlist {
                                var {
                                  indexexpr {
                                    prefixexp {
                                    }
                                    exp {
                                      prefixexp {
                                        var {
                                          name {
                                            name: "load"
                                            num: 0
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                vars {
                                  indexexpr {
                                    prefixexp {
                                      exp {
                                        prefixexp {
                                          functioncall {
                                          }
                                        }
                                      }
                                    }
                                    exp {
                                      prefixexp {
                                        var {
                                          indexexpr {
                                            prefixexp {
                                              exp {
                                                binary {
                                                  leftexp {
                                                    str: "__gc"
                                                  }
                                                  binop {
                                                  }
                                                  rightexp {
                                                    binary {
                                                      leftexp {
                                                        str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                                                      }
                                                      binop {
                                                        mod: 0
                                                      }
                                                      rightexp {
                                                        number: -424
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            exp {
                                              binary {
                                                leftexp {
                                                }
                                                binop {
                                                }
                                                rightexp {
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                vars {
                                  indexexpr {
                                    prefixexp {
                                    }
                                    exp {
                                    }
                                  }
                                }
                              }
                              explist {
                                expressions {
                                  prefixexp {
                                  }
                                }
                                expressions {
                                  prefixexp {
                                  }
                                }
                                expressions {
                                  prefixexp {
                                  }
                                }
                                expressions {
                                  function {
                                    body {
                                      parlist {
                                        ellipsis: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                                      }
                                      block {
                                        chunk {
                                          stat {
                                            semicolon: true
                                          }
                                          laststat {
                                            explist {
                                              explist {
                                                expressions {
                                                  str: "\'<mathn<7<<7<\'<9"
                                                }
                                                expressions {
                                                  str: "\'<mathn<7<<7<\'<9"
                                                }
                                                expressions {
                                                  number: -424
                                                }
                                                expressions {
                                                }
                                                explast {
                                                  binary {
                                                    leftexp {
                                                      binary {
                                                        leftexp {
                                                        }
                                                        binop {
                                                          mod: 25344
                                                        }
                                                        rightexp {
                                                          binary {
                                                            leftexp {
                                                            }
                                                            binop {
                                                            }
                                                            rightexp {
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                    binop {
                                                    }
                                                    rightexp {
                                                      binary {
                                                        leftexp {
                                                          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                                                        }
                                                        binop {
                                                          mod: 0
                                                        }
                                                        rightexp {
                                                          number: -424
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            semicolon: true
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                explast {
                                }
                              }
                            }
                          }
                        }
                      }
                      condition {
                        nil: 5
                      }
                    }
                  }
                }
              }
              condition {
                prefixexp {
                  var {
                    name {
                      name: "pcall"
                      num: 16777216
                    }
                  }
                }
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        str: "end"
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            break: 7296
          }
        }
      }
      condition {
      }
    }
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
        }
      }
      condition {
        tableconstructor {
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            list {
              varlist {
                var {
                }
                vars {
                  name {
                    name: "load"
                    num: 0
                  }
                }
              }
              explist {
                explast {
                  ellipsis: ";"
                }
              }
            }
          }
        }
      }
      condition {
        nil: 5
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
          name {
            name: "load"
            num: 0
          }
        }
      }
      explist {
        expressions {
          binary {
            leftexp {
            }
            binop {
              lessEqual: 0
            }
            rightexp {
            }
          }
        }
        explast {
          ellipsis: ";"
        }
      }
    }
  }
  laststat {
    break: 0
  }
}
