chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            break: 0
          }
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
            concat: 0
          }
          rightexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    number: nan
                  }
                  binop {
                    concat: 0
                  }
                  rightexp {
                    nil: 0
                  }
                }
              }
              binop {
                concat: 0
              }
              rightexp {
                nil: 0
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          number: 196608
        }
        expressions {
          number: nan
        }
        expressions {
          binary {
            leftexp {
            }
            binop {
              equal: 2
            }
            rightexp {
            }
          }
        }
        expressions {
          binary {
            leftexp {
            }
            binop {
              equal: 2
            }
            rightexp {
            }
          }
        }
        expressions {
          number: 4.9999999829451554
        }
        expressions {
          number: -3.05175781254146e-05
        }
        expressions {
        }
        expressions {
          str: ""
        }
        expressions {
          str: ""
        }
        expressions {
          binary {
            leftexp {
            }
            binop {
            }
            rightexp {
              number: 5.64968365542192e-310
            }
          }
        }
        expressions {
          number: 8.4999999749707058
        }
        expressions {
        }
        expressions {
          number: -2.46006546056159e+260
        }
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
                exprassign {
                  key {
                    tableconstructor {
                    }
                  }
                  value {
                  }
                }
              }
              fields {
                field {
                  expression {
                    nil: 2
                  }
                }
                sep {
                }
              }
              fields {
                field {
                  expression {
                    unary {
                      unop {
                      }
                      exp {
                        prefixexp {
                          exp {
                            nil: 0
                          }
                        }
                      }
                    }
                  }
                }
                sep {
                }
              }
              fields {
                field {
                  expression {
                    number: nan
                  }
                }
                sep {
                }
              }
              fields {
                field {
                  expression {
                    number: nan
                  }
                }
                sep {
                }
              }
              fields {
                field {
                  expression {
                    nil: 2
                  }
                }
                sep {
                }
              }
              fields {
                field {
                  expression {
                    number: -0
                  }
                }
                sep {
                }
              }
              fields {
                field {
                  namedassign {
                    name {
                      name: ""
                      num: 0
                    }
                    value {
                    }
                  }
                }
                sep {
                }
              }
              fields {
                field {
                  expression {
                    number: nan
                  }
                }
                sep {
                }
              }
              fields {
                field {
                  expression {
                    number: nan
                  }
                }
                sep {
                }
              }
              fields {
                field {
                  expression {
                    tableconstructor {
                    }
                  }
                }
                sep {
                }
              }
              fields {
                field {
                  exprassign {
                    key {
                      tableconstructor {
                      }
                    }
                    value {
                    }
                  }
                }
                sep {
                }
              }
              fields {
                field {
                  expression {
                  }
                }
                sep {
                }
              }
            }
          }
        }
        expressions {
          number: 4.0000000000001013
        }
        explast {
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    list {
      varlist {
        var {
          name {
            name: ""
            num: 0
          }
        }
        vars {
          name {
            name: ""
            num: 65024
          }
        }
      }
      explist {
        explast {
          tableconstructor {
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: "="
        num: 0
      }
      startexp {
        number: -0
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            laststat {
              explist {
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
        }
      }
    }
  }
}
