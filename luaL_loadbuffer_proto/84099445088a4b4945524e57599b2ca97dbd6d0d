chunk {
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    number: 0
                  }
                  binop {
                    mod: 0
                  }
                  rightexp {
                    number: 0
                  }
                }
              }
              binop {
                mod: 0
              }
              rightexp {
                binary {
                  leftexp {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                            number: 0
                          }
                          binop {
                            mod: 0
                          }
                          rightexp {
                            number: 0
                          }
                        }
                      }
                      binop {
                        mod: 0
                      }
                      rightexp {
                        binary {
                          leftexp {
                            number: 0
                          }
                          binop {
                            mod: 0
                          }
                          rightexp {
                            number: 0
                          }
                        }
                      }
                    }
                  }
                  binop {
                    mod: 0
                  }
                  rightexp {
                    number: 0
                  }
                }
              }
            }
          }
          binop {
            mod: 0
          }
          rightexp {
            number: 4.4501477170144028e-308
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
            }
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
}
