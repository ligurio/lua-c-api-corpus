chunk {
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
          }
          binop {
            less: 0
          }
          rightexp {
            ellipsis: "z"
          }
        }
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        nil: 0
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
        unary {
          unop {
          }
          exp {
          }
        }
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
          }
          binop {
            less: 0
          }
          rightexp {
          }
        }
      }
      first {
        chunk {
          stat {
            ifstat {
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                    lessEqual: 4
                  }
                  rightexp {
                    binary {
                      leftexp {
                      }
                      binop {
                        less: 0
                      }
                      rightexp {
                        ellipsis: ""
                      }
                    }
                  }
                }
              }
              first {
                chunk {
                }
              }
            }
          }
          stat {
            ifstat {
              condition {
                binary {
                  leftexp {
                    binary {
                      leftexp {
                      }
                      binop {
                        less: 0
                      }
                      rightexp {
                        prefixexp {
                          exp {
                            ellipsis: "os.rename"
                          }
                        }
                      }
                    }
                  }
                  binop {
                    less: 0
                  }
                  rightexp {
                    true: 4
                  }
                }
              }
              first {
                chunk {
                }
              }
            }
          }
          stat {
            ifstat {
              condition {
                binary {
                  leftexp {
                    binary {
                      leftexp {
                      }
                      binop {
                        less: 0
                      }
                      rightexp {
                      }
                    }
                  }
                  binop {
                    lessEqual: 4
                  }
                  rightexp {
                    tableconstructor {
                    }
                  }
                }
              }
              first {
                chunk {
                }
              }
            }
          }
          stat {
            ifstat {
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                    less: 0
                  }
                  rightexp {
                  }
                }
              }
              first {
                chunk {
                }
              }
            }
            semicolon: true
          }
          stat {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
  }
}
