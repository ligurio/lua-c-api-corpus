chunk {
  stat {
    forcyclelist {
      names {
        firstname {
          name: "\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375"
          num: 24576
        }
      }
      expressions {
        expressions {
          str: "nil"
        }
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                expressions {
                  expressions {
                    false: 1792
                  }
                  explast {
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            laststat {
              semicolon: false
            }
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                expressions {
                  expressions {
                    false: 1792
                  }
                  explast {
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 6029312
        }
        names {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                expressions {
                  expressions {
                    prefixexp {
                    }
                  }
                  explast {
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
              semicolon: false
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "000\\\377\377\377c47\\000\\\377\377\377c4"
          num: 0
        }
        names {
          name: ""
          num: 524288
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            laststat {
            }
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: false
  }
  stat {
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        expressions {
          number: 0
        }
        explast {
        }
      }
      doblock {
        block {
          chunk {
            laststat {
              break: 3145728
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "utf8.offset"
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                expressions {
                  expressions {
                    prefixexp {
                    }
                  }
                  explast {
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
              semicolon: false
            }
          }
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 1701080931
        }
        names {
          name: ""
          num: 7077888
        }
      }
      expressions {
        expressions {
          true: 0
        }
        explast {
        }
      }
      doblock {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 1718379891
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        lastname {
          name: "\242"
          num: 7499520
        }
      }
      body {
        block {
          chunk {
            stat {
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
          unary {
            unop {
            }
            exp {
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                    laststat {
                      break: 1634038371
                    }
                  }
                }
                condition {
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            laststat {
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
          number: -35651584.000001557
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
  }
  stat {
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "collectgarbage"
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
      }
      expressions {
        expressions {
          prefixexp {
          }
        }
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                expressions {
                  expressions {
                    prefixexp {
                    }
                  }
                  explast {
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
              semicolon: false
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: "collectgarbage"
          num: 5
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                expressions {
                  expressions {
                    false: 1792
                  }
                  explast {
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    semicolon: false
  }
  stat {
  }
  stat {
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            laststat {
              explist {
                explist {
                  explast {
                    number: 0
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: false
  }
  stat {
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375"
          num: 0
        }
        names {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        str: "math.type"
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
            laststat {
              explist {
                explist {
                  explast {
                    number: 0
                  }
                }
              }
              semicolon: false
            }
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 687865856
        }
      }
      expressions {
        expressions {
          binary {
            leftexp {
            }
            binop {
            }
            rightexp {
              binary {
                leftexp {
                }
                binop {
                  exp: 0
                }
                rightexp {
                }
              }
            }
          }
        }
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
      }
      body {
        parlist {
          ellipsis: "/"
        }
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: "utf8.offset"
          num: 0
        }
      }
    }
    semicolon: false
  }
  stat {
  }
  stat {
    block {
      block {
        chunk {
          stat {
            semicolon: true
          }
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: "utf8"
        num: 0
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 1
        }
      }
      body {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
              }
              fields {
                field {
                }
                sep {
                  semicolon: 2560
                }
              }
            }
          }
        }
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
    semicolon: true
  }
  stat {
    whilecycle {
      condition {
        tableconstructor {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                binary {
                                  leftexp {
                                    tableconstructor {
                                      fieldlist {
                                        firstField {
                                        }
                                        lastSep {
                                          semicolon: 8224
                                        }
                                      }
                                    }
                                  }
                                  binop {
                                    sub: 2105354
                                  }
                                  rightexp {
                                    prefixexp {
                                      exp {
                                        binary {
                                          leftexp {
                                          }
                                          binop {
                                            or: 2
                                          }
                                          rightexp {
                                            binary {
                                              leftexp {
                                                binary {
                                                  leftexp {
                                                  }
                                                  binop {
                                                    or: 0
                                                  }
                                                  rightexp {
                                                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                                                  }
                                                }
                                              }
                                              binop {
                                                div: 0
                                              }
                                              rightexp {
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              binop {
                              }
                              rightexp {
                                str: "\'-8<table.pack\'\'/8<\'<8<8"
                              }
                            }
                          }
                          binop {
                            sub: 3607101440
                          }
                          rightexp {
                            tableconstructor {
                              fieldlist {
                                firstField {
                                  namedassign {
                                    name {
                                      name: "error"
                                      num: 0
                                    }
                                    value {
                                    }
                                  }
                                }
                                lastSep {
                                  semicolon: 8224
                                }
                              }
                            }
                          }
                        }
                      }
                      binop {
                        and: 2
                      }
                      rightexp {
                        prefixexp {
                          exp {
                            binary {
                              leftexp {
                              }
                              binop {
                                or: 2
                              }
                              rightexp {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                      }
                                      binop {
                                        add: 3607101440
                                      }
                                      rightexp {
                                      }
                                    }
                                  }
                                  binop {
                                    greater: 16385
                                  }
                                  rightexp {
                                    prefixexp {
                                      exp {
                                        binary {
                                          leftexp {
                                          }
                                          binop {
                                            or: 25344
                                          }
                                          rightexp {
                                            tableconstructor {
                                              fieldlist {
                                                firstField {
                                                  exprassign {
                                                    key {
                                                    }
                                                    value {
                                                      tableconstructor {
                                                        fieldlist {
                                                          firstField {
                                                            exprassign {
                                                              key {
                                                              }
                                                              value {
                                                                tableconstructor {
                                                                  fieldlist {
                                                                    firstField {
                                                                      exprassign {
                                                                        key {
                                                                        }
                                                                        value {
                                                                          ellipsis: "\353"
                                                                        }
                                                                      }
                                                                    }
                                                                    lastSep {
                                                                      comma: 0
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                          lastSep {
                                                            semicolon: 6488064
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                lastSep {
                                                  comma: 0
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  explast {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                            unary {
                              unop {
                                length: 2
                              }
                              exp {
                                prefixexp {
                                }
                              }
                            }
                          }
                          binop {
                            mult: 0
                          }
                          rightexp {
                            prefixexp {
                            }
                          }
                        }
                      }
                      binop {
                        add: 2
                      }
                      rightexp {
                        prefixexp {
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              forcyclename {
                name {
                  name: "____________"
                  num: 0
                }
                startexp {
                  prefixexp {
                  }
                }
                stopexp {
                  unary {
                    unop {
                      length: 2
                    }
                    exp {
                      prefixexp {
                      }
                    }
                  }
                }
                stepexp {
                  binary {
                    leftexp {
                      unary {
                        unop {
                          negate: 538976288
                        }
                        exp {
                        }
                      }
                    }
                    binop {
                      mult: 0
                    }
                    rightexp {
                      prefixexp {
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        ifstat {
                          condition {
                          }
                          first {
                            chunk {
                            }
                          }
                          clauses {
                            condition {
                            }
                            block {
                              chunk {
                                laststat {
                                  semicolon: true
                                }
                              }
                            }
                          }
                        }
                      }
                      stat {
                        forcyclename {
                          name {
                            name: "____________"
                            num: 0
                          }
                          startexp {
                            prefixexp {
                            }
                          }
                          stopexp {
                            binary {
                              leftexp {
                                prefixexp {
                                }
                              }
                              binop {
                                mod: 0
                              }
                              rightexp {
                                number: 0
                              }
                            }
                          }
                          stepexp {
                            binary {
                              leftexp {
                                unary {
                                  unop {
                                    negate: 538976288
                                  }
                                  exp {
                                    prefixexp {
                                    }
                                  }
                                }
                              }
                              binop {
                                mult: 0
                              }
                              rightexp {
                                prefixexp {
                                }
                              }
                            }
                          }
                          doblock {
                            block {
                              chunk {
                                laststat {
                                  semicolon: false
                                }
                              }
                            }
                          }
                        }
                        semicolon: false
                      }
                      stat {
                        list {
                          varlist {
                            var {
                            }
                          }
                          explist {
                            explast {
                              binary {
                                leftexp {
                                  binary {
                                    leftexp {
                                      number: 0
                                    }
                                    binop {
                                      mult: 0
                                    }
                                    rightexp {
                                      prefixexp {
                                      }
                                    }
                                  }
                                }
                                binop {
                                  add: 2
                                }
                                rightexp {
                                  prefixexp {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: false
            }
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  explast {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                            unary {
                              unop {
                                length: 2
                              }
                              exp {
                                prefixexp {
                                  exp {
                                    binary {
                                      leftexp {
                                      }
                                      binop {
                                        or: 25344
                                      }
                                      rightexp {
                                        tableconstructor {
                                          fieldlist {
                                            firstField {
                                              exprassign {
                                                key {
                                                }
                                                value {
                                                  tableconstructor {
                                                    fieldlist {
                                                      firstField {
                                                        exprassign {
                                                          key {
                                                          }
                                                          value {
                                                            tableconstructor {
                                                              fieldlist {
                                                                firstField {
                                                                  exprassign {
                                                                    key {
                                                                    }
                                                                    value {
                                                                      ellipsis: "\353"
                                                                    }
                                                                  }
                                                                }
                                                                lastSep {
                                                                  comma: 0
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      lastSep {
                                                        semicolon: 6488064
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            lastSep {
                                              comma: 0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          binop {
                            mult: 0
                          }
                          rightexp {
                            prefixexp {
                            }
                          }
                        }
                      }
                      binop {
                        mod: 2
                      }
                      rightexp {
                        prefixexp {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: "bbbbbbb"
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "utf8.offset"
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    localfunc {
      name {
        name: "\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375"
        num: 0
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
      clauses {
        condition {
          unary {
            unop {
              not: 0
            }
            exp {
            }
          }
        }
        block {
          chunk {
          }
        }
      }
      clauses {
        condition {
          number: -35651584.000001557
        }
        block {
          chunk {
            stat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "counter_+"
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: true
  }
}
