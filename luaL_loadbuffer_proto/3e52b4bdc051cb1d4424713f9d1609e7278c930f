chunk {
  stat {
    list {
      varlist {
        var {
          indexexpr {
            prefixexp {
              exp {
                false: 1073741824
              }
            }
            exp {
              str: "\'<mathn<7<<7<\'<9"
            }
          }
        }
        vars {
          indexexpr {
            prefixexp {
            }
            exp {
              tableconstructor {
                fieldlist {
                  firstField {
                    namedassign {
                      name {
                        name: ""
                        num: 0
                      }
                      value {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      explist {
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
        }
        expressions {
          number: 9.09217399556432e-307
        }
        expressions {
          unary {
            unop {
              not: 1073741824
            }
            exp {
              number: 9.09217399556432e-307
            }
          }
        }
        expressions {
          function {
            body {
              parlist {
                ellipsis: "rand"
              }
              block {
                chunk {
                }
              }
            }
          }
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        explast {
          binary {
            leftexp {
              prefixexp {
              }
            }
            binop {
              and: 7274496
            }
            rightexp {
              binary {
                leftexp {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  functioncall {
                                    prefArgs {
                                      prefixexp {
                                      }
                                      args {
                                        explist {
                                        }
                                      }
                                    }
                                  }
                                }
                                args {
                                }
                              }
                            }
                          }
                        }
                        binop {
                          div: 67108864
                        }
                        rightexp {
                          binary {
                            leftexp {
                              nil: 0
                            }
                            binop {
                            }
                            rightexp {
                              unary {
                                unop {
                                  not: 218
                                }
                                exp {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                binop {
                }
                rightexp {
                  unary {
                    unop {
                      length: 0
                    }
                    exp {
                      str: "__________\376_"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: ""
        }
        explast {
          str: "\'<mathn<7<pack<7<\'<9"
        }
      }
    }
    semicolon: true
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
          indexexpr {
            prefixexp {
              var {
                indexname {
                  prefixexp {
                  }
                  Name: "\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227"
                }
              }
            }
            exp {
              binary {
                leftexp {
                  prefixexp {
                  }
                }
                binop {
                  concat: 2
                }
                rightexp {
                  prefixexp {
                    var {
                      indexname {
                        prefixexp {
                        }
                        Name: "\000\000\000$"
                      }
                    }
                  }
                }
              }
            }
          }
        }
        vars {
          indexexpr {
            prefixexp {
              var {
                indexname {
                  prefixexp {
                  }
                  Name: "\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227\227"
                }
              }
            }
            exp {
              binary {
                leftexp {
                  prefixexp {
                  }
                }
                binop {
                  less: 4294967295
                }
                rightexp {
                  prefixexp {
                    var {
                    }
                  }
                }
              }
            }
          }
        }
      }
      explist {
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          unary {
            unop {
              not: 1073741824
            }
            exp {
              number: 9.09217399556432e-307
            }
          }
        }
        expressions {
          function {
            body {
              parlist {
                ellipsis: "rand"
              }
              block {
                chunk {
                }
              }
            }
          }
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        explast {
          binary {
            leftexp {
              prefixexp {
              }
            }
            binop {
              and: 7274496
            }
            rightexp {
              binary {
                leftexp {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                }
                                args {
                                }
                              }
                            }
                          }
                        }
                        binop {
                          or: 2
                        }
                        rightexp {
                          binary {
                            leftexp {
                              nil: 0
                            }
                            binop {
                              and: 2
                            }
                            rightexp {
                              unary {
                                unop {
                                  not: 218
                                }
                                exp {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                binop {
                }
                rightexp {
                  unary {
                    unop {
                      length: 0
                    }
                    exp {
                      str: "__________\376_"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
  laststat {
    break: 1073741824
  }
}
