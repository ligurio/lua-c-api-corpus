chunk {
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
          }
          binop {
            sub: 0
          }
          rightexp {
            binary {
              leftexp {
                str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
              }
              binop {
                sub: 0
              }
              rightexp {
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                        }
                        binop {
                          sub: 0
                        }
                        rightexp {
                          binary {
                            leftexp {
                              str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                            }
                            binop {
                              sub: 0
                            }
                            rightexp {
                            }
                          }
                        }
                      }
                    }
                    binop {
                      sub: 0
                    }
                    rightexp {
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        block {
                          block {
                            chunk {
                            }
                          }
                        }
                        semicolon: false
                      }
                    }
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                        }
                        binop {
                          sub: 0
                        }
                        rightexp {
                          binary {
                            leftexp {
                              str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                            }
                            binop {
                              sub: 0
                            }
                            rightexp {
                            }
                          }
                        }
                      }
                    }
                    binop {
                      sub: 0
                    }
                    rightexp {
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        block {
                          block {
                            chunk {
                            }
                          }
                        }
                        semicolon: false
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: "_ENV"
        num: 0
      }
      startexp {
      }
      stopexp {
        number: -1.6122275479153505e+265
      }
      stepexp {
        unary {
          unop {
            negate: 0
          }
          exp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              call {
              }
            }
          }
        }
      }
    }
  }
}
