chunk {
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
              }
              binop {
                equal: 0
              }
              rightexp {
                binary {
                  leftexp {
                  }
                  binop {
                    equal: 0
                  }
                  rightexp {
                  }
                }
              }
            }
          }
          binop {
            equal: 0
          }
          rightexp {
            binary {
              leftexp {
              }
              binop {
                equal: 0
              }
              rightexp {
              }
            }
          }
        }
      }
      first {
        chunk {
          stat {
            whilecycle {
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                    less: 0
                  }
                  rightexp {
                    ellipsis: "\377\377\377\377\377\377\016\305"
                  }
                }
              }
              doblock {
                block {
                  chunk {
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                      semicolon: true
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                        prefArgs {
                          prefixexp {
                          }
                          args {
                          }
                        }
                      }
                    }
                    stat {
                      block {
                        block {
                          chunk {
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                              semicolon: true
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              whilecycle {
                                condition {
                                }
                                doblock {
                                  block {
                                    chunk {
                                    }
                                  }
                                }
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                            }
                            stat {
                            }
                            stat {
                              call {
                              }
                            }
                          }
                        }
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                      whilecycle {
                        condition {
                          binary {
                            leftexp {
                            }
                            binop {
                              less: 0
                            }
                            rightexp {
                              ellipsis: "\377\377\377\377\377\377\016\305"
                            }
                          }
                        }
                        doblock {
                          block {
                            chunk {
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                                semicolon: true
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                whilecycle {
                                  condition {
                                  }
                                  doblock {
                                    block {
                                      chunk {
                                      }
                                    }
                                  }
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                                call {
                                }
                              }
                              stat {
                              }
                              stat {
                              }
                              stat {
                                call {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
              }
              binop {
                equal: 0
              }
              rightexp {
                binary {
                  leftexp {
                  }
                  binop {
                    equal: 0
                  }
                  rightexp {
                  }
                }
              }
            }
          }
          binop {
            equal: 0
          }
          rightexp {
            binary {
              leftexp {
              }
              binop {
                equal: 0
              }
              rightexp {
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
              }
              binop {
                equal: 0
              }
              rightexp {
                binary {
                  leftexp {
                  }
                  binop {
                    equal: 0
                  }
                  rightexp {
                  }
                }
              }
            }
          }
          binop {
            equal: 0
          }
          rightexp {
            binary {
              leftexp {
              }
              binop {
                equal: 0
              }
              rightexp {
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
              }
              binop {
                equal: 0
              }
              rightexp {
                binary {
                  leftexp {
                  }
                  binop {
                    equal: 0
                  }
                  rightexp {
                  }
                }
              }
            }
          }
          binop {
            equal: 0
          }
          rightexp {
          }
        }
      }
      first {
        chunk {
          stat {
            whilecycle {
              condition {
                prefixexp {
                  exp {
                    binary {
                      leftexp {
                        true: 0
                      }
                      binop {
                      }
                      rightexp {
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
