chunk {
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            func {
              name {
                firstname {
                  name: ""
                  num: 0
                }
              }
              body {
                block {
                  chunk {
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                            laststat {
                              break: 9
                            }
                          }
                        }
                        condition {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          ellipsis: "________________________________________"
        }
        explast {
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: true
          }
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
        }
      }
      condition {
      }
    }
    semicolon: false
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
          laststat {
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    call {
                    }
                  }
                }
              }
              condition {
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
  }
}
