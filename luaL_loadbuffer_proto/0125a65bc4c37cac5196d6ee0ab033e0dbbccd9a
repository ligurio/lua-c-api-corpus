chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: true
          }
        }
      }
      condition {
      }
    }
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
          var {
            indexname {
              prefixexp {
              }
              Name: "dump"
            }
          }
        }
        args {
          explist {
            explist {
              expressions {
                function {
                  body {
                    block {
                      chunk {
                        stat {
                          whilecycle {
                            condition {
                              true: 768
                            }
                            doblock {
                              block {
                                chunk {
                                }
                              }
                            }
                          }
                          semicolon: true
                        }
                        laststat {
                          semicolon: true
                        }
                      }
                    }
                  }
                }
              }
              explast {
                binary {
                  leftexp {
                    binary {
                      leftexp {
                      }
                      binop {
                      }
                      rightexp {
                        number: -2.9740338169555661e+284
                      }
                    }
                  }
                  binop {
                    mult: 0
                  }
                  rightexp {
                    number: -2.9740338169555661e+284
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 0
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
          }
        }
      }
      condition {
        nil: 1
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            laststat {
            }
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        true: 1
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: false
          }
        }
      }
      condition {
        nil: 0
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 0
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        tableconstructor {
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 0
      }
    }
  }
}
