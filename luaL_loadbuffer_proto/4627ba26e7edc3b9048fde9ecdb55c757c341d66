chunk {
  stat {
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
            binary {
              leftexp {
                unary {
                  unop {
                    length: 0
                  }
                  exp {
                  }
                }
              }
              binop {
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
              }
              binop {
              }
              rightexp {
                binary {
                  leftexp {
                    str: "\'-8<table.p~ck\'\'/8<\'<8<8"
                  }
                  binop {
                    concat: 0
                  }
                  rightexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                }
              }
            }
          }
          binop {
            div: 0
          }
          rightexp {
            binary {
              leftexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
              binop {
                add: 0
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: "\311\311\311"
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      stepexp {
        binary {
          leftexp {
            binary {
              leftexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
              binop {
                concat: 0
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
          binop {
            div: 0
          }
          rightexp {
            binary {
              leftexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
              binop {
                concat: 0
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
}
