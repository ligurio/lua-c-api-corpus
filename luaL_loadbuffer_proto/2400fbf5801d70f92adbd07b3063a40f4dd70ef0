chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            list {
              varlist {
                var {
                }
              }
              explist {
                expressions {
                }
                expressions {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                        }
                        args {
                          str: "\'"
                        }
                      }
                    }
                  }
                }
                expressions {
                  unary {
                    unop {
                      not: 0
                    }
                    exp {
                    }
                  }
                }
                expressions {
                  ellipsis: "col"
                }
                expressions {
                  tableconstructor {
                  }
                }
                expressions {
                  tableconstructor {
                  }
                }
                expressions {
                }
                expressions {
                  number: 3.62645765057542e-317
                }
                expressions {
                  binary {
                    leftexp {
                      prefixexp {
                        var {
                          name {
                            name: "&"
                            num: 0
                          }
                        }
                      }
                    }
                    binop {
                      and: 4294901759
                    }
                    rightexp {
                      binary {
                        leftexp {
                          false: 0
                        }
                        binop {
                          div: 0
                        }
                        rightexp {
                          str: "os.clock"
                        }
                      }
                    }
                  }
                }
                explast {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          var {
                            name {
                              name: "\001\000\000{"
                              num: 0
                            }
                          }
                        }
                        args {
                          str: "\'"
                        }
                      }
                    }
                  }
                }
              }
            }
            semicolon: false
          }
          laststat {
            semicolon: true
          }
        }
      }
      condition {
      }
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            str: "\'<666663333~133~1<\'<8<\'<8"
          }
          binop {
            sub: 0
          }
          rightexp {
            str: "\'<666663333~133~1<\'<8<\'<8"
          }
        }
      }
      first {
        chunk {
          laststat {
            break: 0
          }
        }
      }
    }
  }
}
