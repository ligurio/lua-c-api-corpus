chunk {
  stat {
    whilecycle {
      condition {
        str: "counter_8"
      }
      doblock {
        block {
          chunk {
            stat {
              ifstat {
                condition {
                  ellipsis: "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
                }
                first {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            ifstat {
              condition {
                unary {
                  unop {
                  }
                  exp {
                    prefixexp {
                    }
                  }
                }
              }
              first {
                chunk {
                }
              }
            }
          }
        }
      }
      condition {
        str: "\'<mathn<7<<7<\'<9"
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            explist {
              explist {
                expressions {
                  number: 3.7857669957336791e-270
                }
                explast {
                }
              }
            }
            semicolon: false
          }
        }
      }
      condition {
        nil: 1
      }
    }
    semicolon: false
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
        }
      }
      explist {
        expressions {
          ellipsis: "rawlen"
        }
        expressions {
          number: -35651608.12500108
        }
        expressions {
          str: "\'<mathn<7<<7<\'<9"
        }
        expressions {
          number: -35651608.12500108
        }
        explast {
          str: "\'<mathn<7<<7<\'<9"
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: "LUA_CPATH_5_3"
          num: 0
        }
      }
      body {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localnames {
              namelist {
                firstname {
                  name: "`"
                  num: 0
                }
                names {
                  name: "counter_8"
                  num: 0
                }
              }
              explist {
                expressions {
                }
                explast {
                  number: -35651608.12500108
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: true
          }
          stat {
            localnames {
              namelist {
                firstname {
                  name: "`"
                  num: 0
                }
                names {
                  name: "counter_8"
                  num: 0
                }
              }
              explist {
                expressions {
                }
                explast {
                  number: -35651608.12500108
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    list {
                      varlist {
                        var {
                          indexname {
                            prefixexp {
                            }
                            Name: "\000\000"
                          }
                        }
                      }
                      explist {
                        expressions {
                          ellipsis: ""
                        }
                        expressions {
                          number: -35651608.12500108
                        }
                        expressions {
                          str: "\'<mathn<7<<7<\'<9"
                        }
                        expressions {
                        }
                        explast {
                          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                        }
                      }
                    }
                    semicolon: false
                  }
                  stat {
                    call {
                      prefArgs {
                        prefixexp {
                          var {
                            name {
                              name: "counter_+"
                              num: 0
                            }
                          }
                        }
                        args {
                          explist {
                            explist {
                              expressions {
                              }
                              explast {
                                unary {
                                  unop {
                                    length: 8388608
                                  }
                                  exp {
                                    nil: 8388608
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    semicolon: true
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                          stat {
                            ifstat {
                              condition {
                                ellipsis: "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
                              }
                              first {
                                chunk {
                                }
                              }
                            }
                          }
                        }
                      }
                      condition {
                        str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                      }
                    }
                  }
                }
              }
              condition {
                unary {
                  unop {
                  }
                  exp {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                            var {
                              name {
                                name: "xpcall"
                                num: 0
                              }
                            }
                          }
                          args {
                            explist {
                              explist {
                                expressions {
                                  prefixexp {
                                    var {
                                      name {
                                        name: "collectgarbage"
                                        num: 0
                                      }
                                    }
                                  }
                                }
                                expressions {
                                  prefixexp {
                                    var {
                                      name {
                                        name: "collectgarbage"
                                        num: 0
                                      }
                                    }
                                  }
                                }
                                explast {
                                  ellipsis: ""
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        true: 52
      }
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
        unary {
          unop {
          }
          exp {
            prefixexp {
            }
          }
        }
      }
      first {
        chunk {
          stat {
            localnames {
              namelist {
                firstname {
                  name: "`"
                  num: 0
                }
                names {
                  name: "counter_8"
                  num: 0
                }
              }
              explist {
                expressions {
                }
                explast {
                  number: -35651608.12500108
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: "`"
          num: 0
        }
        names {
          name: "counter_8"
          num: 0
        }
      }
      explist {
        expressions {
        }
        explast {
          number: -35651608.12500108
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
          indexname {
            prefixexp {
            }
            Name: "\000\000"
          }
        }
      }
      explist {
        explast {
          binary {
            leftexp {
              prefixexp {
              }
            }
            binop {
              mult: 538976260
            }
            rightexp {
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: "\001\000\000\000"
          num: 0
        }
        names {
          name: ""
          num: 0
        }
        lastname {
          name: "require"
          num: 5
        }
      }
      body {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    semicolon: false
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
    block {
      block {
        chunk {
          stat {
            call {
              namedArgs {
                prefixexp {
                }
                name {
                  name: "counter_8"
                  num: 0
                }
                args {
                }
              }
            }
            semicolon: false
          }
          stat {
            semicolon: true
          }
        }
      }
    }
  }
  stat {
  }
  laststat {
  }
}
