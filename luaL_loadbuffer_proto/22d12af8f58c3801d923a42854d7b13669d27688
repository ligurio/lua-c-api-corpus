chunk {
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 4
        }
      }
      body {
        block {
          chunk {
            stat {
              call {
              }
              semicolon: true
            }
            laststat {
              explist {
                explist {
                  expressions {
                    unary {
                      unop {
                      }
                      exp {
                        number: 0
                      }
                    }
                  }
                  explast {
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: "_ENV"
        num: 0
      }
      startexp {
        binary {
          leftexp {
            number: 9.14883095292653e-315
          }
          binop {
            or: 0
          }
          rightexp {
            binary {
              leftexp {
                prefixexp {
                  functioncall {
                    namedArgs {
                      prefixexp {
                        functioncall {
                          namedArgs {
                            prefixexp {
                            }
                            name {
                              name: ""
                              num: 0
                            }
                            args {
                              str: "\000"
                            }
                          }
                        }
                      }
                      name {
                        name: ""
                        num: 0
                      }
                      args {
                      }
                    }
                  }
                }
              }
              binop {
                or: 0
              }
              rightexp {
                false: 385875968
              }
            }
          }
        }
      }
      stopexp {
        number: 7.352807512383893e+223
      }
      stepexp {
        unary {
          unop {
            negate: 3
          }
          exp {
            str: "\'<6666%33332<\'<8"
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              localfunc {
                name {
                  name: ""
                  num: 0
                }
                funcbody {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
            }
            stat {
              call {
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
            tableconstructor {
              fieldlist {
                firstField {
                  exprassign {
                    key {
                      tableconstructor {
                      }
                    }
                    value {
                    }
                  }
                }
              }
            }
          }
          binop {
          }
          rightexp {
            function {
              body {
                parlist {
                  ellipsis: "&"
                }
                block {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  laststat {
  }
}
