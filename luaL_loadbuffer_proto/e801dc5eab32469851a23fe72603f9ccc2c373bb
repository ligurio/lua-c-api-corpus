chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        true: 0
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            stat {
              call {
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            break: 8126464
          }
        }
      }
      condition {
        true: 2048
      }
    }
  }
  stat {
    semicolon: false
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
        }
        expressions {
          prefixexp {
            functioncall {
              prefArgs {
                prefixexp {
                }
                args {
                  str: "\'"
                }
              }
            }
          }
        }
        expressions {
        }
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
                exprassign {
                  key {
                    str: "io.type"
                  }
                  value {
                    tableconstructor {
                      fieldlist {
                        firstField {
                        }
                        fields {
                          field {
                            namedassign {
                              name {
                                name: "?\000\000\000\000\000\000\000"
                                num: 0
                              }
                              value {
                                str: "string.lower"
                              }
                            }
                          }
                          sep {
                            semicolon: 1667719007
                          }
                        }
                        fields {
                          field {
                            namedassign {
                              name {
                                name: ""
                                num: 0
                              }
                              value {
                                str: "string.lower"
                              }
                            }
                          }
                          sep {
                          }
                        }
                      }
                    }
                  }
                }
              }
              fields {
                field {
                  exprassign {
                    key {
                      str: "io.type"
                    }
                    value {
                      tableconstructor {
                        fieldlist {
                          firstField {
                          }
                          fields {
                            field {
                              namedassign {
                                name {
                                  name: "?\000\000\000\000\000\000\000"
                                  num: 768
                                }
                                value {
                                  str: "string.lower"
                                }
                              }
                            }
                            sep {
                              semicolon: 1667719007
                            }
                          }
                          fields {
                            field {
                              namedassign {
                                name {
                                  name: ""
                                  num: 0
                                }
                                value {
                                  str: "string.lower"
                                }
                              }
                            }
                            sep {
                            }
                          }
                        }
                      }
                    }
                  }
                }
                sep {
                }
              }
            }
          }
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
                expression {
                  prefixexp {
                    var {
                      indexname {
                        prefixexp {
                        }
                        Name: "="
                      }
                    }
                  }
                }
              }
              fields {
                field {
                  exprassign {
                    key {
                      str: "io.type"
                    }
                    value {
                      tableconstructor {
                        fieldlist {
                          firstField {
                          }
                          fields {
                            field {
                              namedassign {
                                name {
                                  name: "?\000\000\000\000\000\000\000"
                                  num: 768
                                }
                                value {
                                  str: "string.lower"
                                }
                              }
                            }
                            sep {
                              semicolon: 1667719007
                            }
                          }
                          fields {
                            field {
                              namedassign {
                                name {
                                  name: ""
                                  num: 0
                                }
                                value {
                                  str: "string.lower"
                                }
                              }
                            }
                            sep {
                            }
                          }
                        }
                      }
                    }
                  }
                }
                sep {
                }
              }
              lastSep {
              }
            }
          }
        }
        expressions {
        }
        expressions {
          str: "tpio.output"
        }
        expressions {
          true: 9
        }
        explast {
          prefixexp {
            functioncall {
              prefArgs {
                prefixexp {
                }
                args {
                  str: "\'"
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
          exp {
            tableconstructor {
              fieldlist {
                firstField {
                }
                lastSep {
                  comma: 4653056
                }
              }
            }
          }
        }
        name {
          name: ""
          num: 0
        }
        args {
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
          exp {
            tableconstructor {
              fieldlist {
                firstField {
                }
                lastSep {
                  comma: 4653056
                }
              }
            }
          }
        }
        name {
          name: ""
          num: 0
        }
        args {
        }
      }
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            explist {
              explist {
                expressions {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        exprassign {
                          key {
                            str: "io.type"
                          }
                          value {
                            tableconstructor {
                              fieldlist {
                                firstField {
                                }
                                fields {
                                  field {
                                    namedassign {
                                      name {
                                        name: "?\000\000\000\000\000\000\000"
                                        num: 0
                                      }
                                      value {
                                        str: "string.lower"
                                      }
                                    }
                                  }
                                  sep {
                                    semicolon: 1667719007
                                  }
                                }
                                fields {
                                  field {
                                    namedassign {
                                      name {
                                        name: ""
                                        num: 0
                                      }
                                      value {
                                        str: "string.lower"
                                      }
                                    }
                                  }
                                  sep {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      fields {
                        field {
                          exprassign {
                            key {
                              str: "io.type"
                            }
                            value {
                              tableconstructor {
                                fieldlist {
                                  firstField {
                                  }
                                  fields {
                                    field {
                                      namedassign {
                                        name {
                                          name: "?\000\000\000\000\000\000\000"
                                          num: 768
                                        }
                                        value {
                                          str: "string.lower"
                                        }
                                      }
                                    }
                                    sep {
                                      semicolon: 1667719007
                                    }
                                  }
                                  fields {
                                    field {
                                      namedassign {
                                        name {
                                          name: ""
                                          num: 0
                                        }
                                        value {
                                          str: "string.lower"
                                        }
                                      }
                                    }
                                    sep {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        sep {
                        }
                      }
                    }
                  }
                }
                explast {
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 8192
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          tableconstructor {
            fieldlist {
              firstField {
              }
            }
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
            semicolon: true
          }
          stat {
            call {
              prefArgs {
                prefixexp {
                }
                args {
                  explist {
                    explist {
                      explast {
                        prefixexp {
                          exp {
                            unary {
                              unop {
                              }
                              exp {
                                str: "max"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            forcyclelist {
              names {
                firstname {
                  name: ""
                  num: 0
                }
                names {
                  name: ""
                  num: 0
                }
                names {
                  name: ""
                  num: 100
                }
              }
              expressions {
                explast {
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
              }
              stopexp {
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
            semicolon: true
          }
          stat {
            semicolon: true
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            semicolon: true
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  laststat {
                    break: 1
                    semicolon: true
                  }
                }
              }
              condition {
              }
            }
          }
        }
      }
      condition {
        nil: 1
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            forcyclelist {
              names {
                firstname {
                  name: ""
                  num: 0
                }
              }
              expressions {
                explast {
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
              }
              stopexp {
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
            semicolon: true
          }
          stat {
            semicolon: true
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            list {
              varlist {
                var {
                }
              }
              explist {
                explast {
                  ellipsis: "close"
                }
              }
            }
          }
          stat {
            call {
            }
            semicolon: true
          }
          stat {
            semicolon: true
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  laststat {
                    break: 1
                    semicolon: false
                  }
                }
              }
              condition {
              }
            }
          }
        }
      }
      condition {
        nil: 1
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
          var {
            name {
              name: "collectgarbage"
              num: 0
            }
          }
        }
        args {
          tableconstructor {
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
}
