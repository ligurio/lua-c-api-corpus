chunk {
  stat {
    block {
      block {
        chunk {
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            func {
              name {
                firstname {
                  name: "\000\000\001\203"
                  num: 0
                }
              }
              body {
                block {
                  chunk {
                    laststat {
                      explist {
                        explist {
                          expressions {
                            binary {
                              leftexp {
                              }
                              binop {
                                notEqual: 50
                              }
                              rightexp {
                              }
                            }
                          }
                          explast {
                          }
                        }
                      }
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
          laststat {
            explist {
              explist {
                expressions {
                  binary {
                    leftexp {
                    }
                    binop {
                    }
                    rightexp {
                      nil: 0
                    }
                  }
                }
                explast {
                }
              }
            }
          }
        }
      }
      condition {
        nil: 5
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                        true: 0
                      }
                    }
                  }
                }
              }
              condition {
              }
            }
          }
        }
      }
      condition {
        binary {
          leftexp {
            nil: 0
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localnames {
              namelist {
                firstname {
                  name: "counter_+"
                  num: 6513008
                }
                names {
                  name: "counter_8"
                  num: 0
                }
              }
              explist {
                expressions {
                  false: 5
                }
                explast {
                  number: -709.375
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    localnames {
                      namelist {
                        firstname {
                          name: "couner_+"
                          num: 6513008
                        }
                        names {
                          name: "counter_8"
                          num: 0
                        }
                      }
                      explist {
                        expressions {
                          false: 5
                        }
                        explast {
                          number: -709.375
                        }
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                          stat {
                            repeatcycle {
                              block {
                                chunk {
                                }
                              }
                              condition {
                                prefixexp {
                                  var {
                                    indexexpr {
                                      prefixexp {
                                        functioncall {
                                          prefArgs {
                                            prefixexp {
                                            }
                                            args {
                                              tableconstructor {
                                                fieldlist {
                                                  firstField {
                                                  }
                                                  lastSep {
                                                    comma: 0
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      exp {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      condition {
                        unary {
                          unop {
                          }
                          exp {
                            false: 1847599136
                          }
                        }
                      }
                    }
                    semicolon: false
                  }
                }
              }
              condition {
                binary {
                  leftexp {
                    str: "\000\'<io.open\'\000\000&&\'>\'\000\000&\'>\'"
                  }
                  binop {
                  }
                  rightexp {
                    prefixexp {
                    }
                  }
                }
              }
            }
            semicolon: false
          }
        }
      }
      condition {
        binary {
          leftexp {
            str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
          }
          binop {
          }
          rightexp {
            prefixexp {
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        nil: 1
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                          }
                        }
                        condition {
                        }
                      }
                    }
                  }
                }
                condition {
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                prefixexp {
                  exp {
                    str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                prefixexp {
                  functioncall {
                    prefArgs {
                      prefixexp {
                        var {
                          name {
                            name: "load"
                            num: 2752512
                          }
                        }
                      }
                      args {
                        explist {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            localfunc {
              name {
                name: ""
                num: 0
              }
              funcbody {
                parlist {
                  ellipsis: "\000\000\001\203"
                }
                block {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
      condition {
        nil: 0
      }
    }
  }
}
