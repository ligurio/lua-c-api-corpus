chunk {
  stat {
    semicolon: true
  }
  stat {
    whilecycle {
      condition {
        str: "atan"
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        str: "atan"
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            function {
              body {
                block {
                  chunk {
                    stat {
                    }
                    stat {
                    }
                    stat {
                    }
                    stat {
                    }
                    stat {
                    }
                  }
                }
              }
            }
          }
          binop {
            mult: 0
          }
          rightexp {
            function {
              body {
                block {
                  chunk {
                    stat {
                    }
                    stat {
                    }
                    stat {
                      semicolon: true
                    }
                    stat {
                      semicolon: true
                    }
                    stat {
                      semicolon: true
                    }
                    stat {
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
    }
    semicolon: true
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 25344
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
  }
  laststat {
    explist {
      explist {
        expressions {
          function {
            body {
              parlist {
                ellipsis: ""
              }
              block {
                chunk {
                  stat {
                  }
                  stat {
                    semicolon: false
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                }
              }
            }
          }
        }
        expressions {
          binary {
            leftexp {
              function {
                body {
                  block {
                    chunk {
                      stat {
                        semicolon: false
                      }
                      stat {
                      }
                      stat {
                      }
                      stat {
                      }
                      stat {
                      }
                      laststat {
                      }
                    }
                  }
                }
              }
            }
            binop {
            }
            rightexp {
              function {
                body {
                  block {
                    chunk {
                      stat {
                      }
                      stat {
                      }
                      stat {
                      }
                      stat {
                      }
                      stat {
                      }
                    }
                  }
                }
              }
            }
          }
        }
        explast {
          prefixexp {
          }
        }
      }
    }
    semicolon: true
  }
}
