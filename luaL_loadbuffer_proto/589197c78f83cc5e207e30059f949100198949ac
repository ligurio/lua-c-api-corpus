chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 7
      }
      startexp {
      }
      stopexp {
      }
      stepexp {
        number: -0
      }
      doblock {
        block {
          chunk {
            stat {
              ifstat {
                condition {
                }
                first {
                  chunk {
                  }
                }
              }
            }
            laststat {
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    list {
      varlist {
        var {
          name {
            name: ""
            num: 0
          }
        }
      }
      explist {
        expressions {
          tableconstructor {
          }
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
              }
              fields {
                field {
                }
                sep {
                  comma: 0
                }
              }
            }
          }
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
              }
            }
          }
        }
        expressions {
        }
        expressions {
          prefixexp {
          }
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
        }
        expressions {
          tableconstructor {
          }
        }
        explast {
          prefixexp {
            functioncall {
            }
          }
        }
      }
    }
  }
}
