chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            list {
              varlist {
                var {
                }
                vars {
                  indexname {
                    prefixexp {
                    }
                    Name: "\221z"
                  }
                }
              }
              explist {
                expressions {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              unary {
                                unop {
                                }
                                exp {
                                }
                              }
                            }
                            binop {
                              less: 0
                            }
                            rightexp {
                              unary {
                                unop {
                                  negate: 0
                                }
                                exp {
                                }
                              }
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                          str: "\'-table.unpack\'\'/8<\'<8<8"
                        }
                      }
                    }
                    binop {
                    }
                    rightexp {
                      str: "\'-table.unpack\'\'/8<\'<8<8"
                    }
                  }
                }
                explast {
                  str: "\377\377\005"
                }
              }
            }
          }
          stat {
            call {
              namedArgs {
                prefixexp {
                }
                name {
                  name: ""
                  num: 0
                }
                args {
                }
              }
            }
            semicolon: false
          }
        }
      }
      condition {
        nil: 1
      }
    }
  }
  stat {
    whilecycle {
      condition {
        str: "\000\'>string.format\'\000\000&&\'>\'\000\000&\'>\'"
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
  }
  stat {
  }
  stat {
  }
}
