chunk {
  stat {
    forcyclename {
      name {
        name: "\'<66.>633332<\'<8"
        num: 6387200
      }
      startexp {
      }
      stopexp {
        number: 4.9039346802478564e+252
      }
      doblock {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    tableconstructor {
                      fieldlist {
                        firstField {
                        }
                        fields {
                          field {
                            exprassign {
                              key {
                                tableconstructor {
                                  fieldlist {
                                    firstField {
                                    }
                                  }
                                }
                              }
                              value {
                                str: "utf8.len"
                              }
                            }
                          }
                          sep {
                            comma: 12255232
                          }
                        }
                        fields {
                          field {
                          }
                          sep {
                            comma: 4211015680
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                          }
                          args {
                            str: "\'"
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    tableconstructor {
                      fieldlist {
                        firstField {
                        }
                      }
                    }
                  }
                  expressions {
                    tableconstructor {
                      fieldlist {
                        firstField {
                        }
                        fields {
                          field {
                            exprassign {
                              key {
                                tableconstructor {
                                }
                              }
                              value {
                                str: "utf8.len"
                              }
                            }
                          }
                          sep {
                            comma: 12255232
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    tableconstructor {
                    }
                  }
                  expressions {
                    unary {
                      unop {
                      }
                      exp {
                        unary {
                          unop {
                          }
                          exp {
                            number: 2.0522684006491881e-289
                          }
                        }
                      }
                    }
                  }
                  expressions {
                  }
                  expressions {
                  }
                  expressions {
                    tableconstructor {
                    }
                  }
                  explast {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                          }
                          args {
                            str: "\'"
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: false
            }
          }
        }
      }
    }
    semicolon: true
  }
}
