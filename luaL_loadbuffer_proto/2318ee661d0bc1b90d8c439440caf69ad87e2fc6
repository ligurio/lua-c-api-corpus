chunk {
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<<7<\'<9"
                  }
                  expressions {
                    nil: 2105376
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn47<pack<7<\'<9"
                  }
                  explast {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                }
              }
            }
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    ellipsis: ""
                  }
                  expressions {
                    number: 2.34227342716484e-312
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<<7<\'<9"
                  }
                  expressions {
                    number: -709.375
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  explast {
                    str: "\'<mathn<7<<7<\'<9"
                  }
                }
              }
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                }
                doblock {
                  block {
                    chunk {
                      laststat {
                        semicolon: true
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              list {
                varlist {
                  var {
                    name {
                      name: ""
                      num: 0
                    }
                  }
                }
                explist {
                  expressions {
                    unary {
                      unop {
                      }
                      exp {
                        str: "\'<mathn<7<pack<7<\'<9"
                      }
                    }
                  }
                  expressions {
                    str: "\'<mathn<7<<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<<7<\'<9"
                  }
                  expressions {
                    str: ""
                  }
                  expressions {
                  }
                  expressions {
                    str: "\'<mathn47<pack<7<\'<9"
                  }
                  explast {
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              list {
                varlist {
                  var {
                    name {
                      name: ""
                      num: 603979776
                    }
                  }
                }
                explist {
                  expressions {
                    unary {
                      unop {
                      }
                      exp {
                        str: "\'<mathn<7<pack<7<\'<9"
                      }
                    }
                  }
                  expressions {
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    true: 604241922
                  }
                  expressions {
                    true: 0
                  }
                  expressions {
                    str: ""
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mapack<7<\'<9"
                  }
                  explast {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                            exp {
                              binary {
                                leftexp {
                                  prefixexp {
                                    exp {
                                      tableconstructor {
                                        fieldlist {
                                          firstField {
                                            exprassign {
                                              key {
                                                prefixexp {
                                                  exp {
                                                    binary {
                                                      leftexp {
                                                        tableconstructor {
                                                        }
                                                      }
                                                      binop {
                                                        or: 0
                                                      }
                                                      rightexp {
                                                        tableconstructor {
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                              value {
                                                str: "+"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                binop {
                                  div: 0
                                }
                                rightexp {
                                  prefixexp {
                                    functioncall {
                                      prefArgs {
                                        prefixexp {
                                          var {
                                            name {
                                              name: "load"
                                              num: 8224
                                            }
                                          }
                                        }
                                        args {
                                          explist {
                                            explist {
                                              explast {
                                                function {
                                                  body {
                                                    parlist {
                                                    }
                                                    block {
                                                      chunk {
                                                        stat {
                                                          repeatcycle {
                                                            block {
                                                              chunk {
                                                              }
                                                            }
                                                            condition {
                                                            }
                                                          }
                                                        }
                                                        laststat {
                                                          explist {
                                                            explist {
                                                              expressions {
                                                                binary {
                                                                  leftexp {
                                                                    str: "+"
                                                                  }
                                                                  binop {
                                                                    concat: 25344
                                                                  }
                                                                  rightexp {
                                                                    binary {
                                                                      leftexp {
                                                                        str: "\'<<\'<<8"
                                                                      }
                                                                      binop {
                                                                        div: 8388608
                                                                      }
                                                                      rightexp {
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              explast {
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          args {
                            explist {
                              explist {
                                explast {
                                  prefixexp {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          ellipsis: ""
        }
        expressions {
          str: "\'<mathn<(7<<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          number: -709.375
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        explast {
          str: "\'<mathn<7<<7<\'<9"
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
          indexname {
            prefixexp {
            }
            Name: "\000\000\000\000\000\000\000\031"
          }
        }
      }
      explist {
        expressions {
          unary {
            unop {
            }
            exp {
              str: "\'<mathn<7<pack<7<\'<9"
            }
          }
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pa\'\000\000\000\000\000\000\000ck<7<\'<9"
        }
        expressions {
        }
        expressions {
          str: ""
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        explast {
          str: "\'<mathn<7<pack<7<\'<9"
        }
      }
    }
    semicolon: true
  }
  laststat {
    semicolon: true
  }
}
