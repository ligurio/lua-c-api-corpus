chunk {
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
            stat {
              localfunc {
                name {
                  name: ""
                  num: 0
                }
                funcbody {
                  block {
                    chunk {
                      stat {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            prefixexp {
            }
          }
          binop {
            mod: 4
          }
          rightexp {
            number: 0
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              func {
                name {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                body {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                    var {
                      name {
                        name: "__le"
                        num: 0
                      }
                    }
                  }
                  args {
                    explist {
                      explist {
                        expressions {
                        }
                        explast {
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    block {
      block {
        chunk {
          stat {
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                    semicolon: true
                  }
                }
              }
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                    equal: 2
                  }
                  rightexp {
                    prefixexp {
                      exp {
                        binary {
                          leftexp {
                          }
                          binop {
                            or: 2
                          }
                          rightexp {
                            binary {
                              leftexp {
                                nil: 0
                              }
                              binop {
                                and: 2
                              }
                              rightexp {
                                prefixexp {
                                  exp {
                                    binary {
                                      leftexp {
                                        prefixexp {
                                          functioncall {
                                            prefArgs {
                                              prefixexp {
                                              }
                                              args {
                                                str: ""
                                              }
                                            }
                                          }
                                        }
                                      }
                                      binop {
                                        or: 2
                                      }
                                      rightexp {
                                        tableconstructor {
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            semicolon: true
          }
        }
      }
    }
  }
}
