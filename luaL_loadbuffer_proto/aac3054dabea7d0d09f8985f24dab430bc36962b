chunk {
  stat {
  }
  stat {
    list {
      varlist {
        var {
          indexname {
            prefixexp {
            }
            Name: ""
          }
        }
      }
      explist {
        expressions {
          ellipsis: "table.pack"
        }
        expressions {
          prefixexp {
            functioncall {
              prefArgs {
                prefixexp {
                  exp {
                  }
                }
                args {
                  str: "\'"
                }
              }
            }
          }
        }
        expressions {
          binary {
            leftexp {
              ellipsis: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
            }
            binop {
            }
            rightexp {
              true: 2097152
            }
          }
        }
        expressions {
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          prefixexp {
            functioncall {
              prefArgs {
                prefixexp {
                  var {
                    indexname {
                      prefixexp {
                      }
                      Name: ""
                    }
                  }
                }
                args {
                  explist {
                    explist {
                      explast {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                binary {
                                  leftexp {
                                    prefixexp {
                                      functioncall {
                                        prefArgs {
                                          prefixexp {
                                            var {
                                              indexname {
                                                prefixexp {
                                                  exp {
                                                    str: "debug.getregistry"
                                                  }
                                                }
                                                Name: ""
                                              }
                                            }
                                          }
                                          args {
                                            explist {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  binop {
                                    concat: 0
                                  }
                                  rightexp {
                                    true: 2
                                  }
                                }
                              }
                              binop {
                                mod: 2105344
                              }
                              rightexp {
                                unary {
                                  unop {
                                    negate: 0
                                  }
                                  exp {
                                    binary {
                                      leftexp {
                                        binary {
                                          leftexp {
                                            prefixexp {
                                            }
                                          }
                                          binop {
                                            concat: 704643072
                                          }
                                          rightexp {
                                            unary {
                                              unop {
                                              }
                                              exp {
                                                ellipsis: "\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315debug.debug\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315"
                                              }
                                            }
                                          }
                                        }
                                      }
                                      binop {
                                        concat: 0
                                      }
                                      rightexp {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          binop {
                            mod: 2105344
                          }
                          rightexp {
                            unary {
                              unop {
                                negate: 0
                              }
                              exp {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                        prefixexp {
                                        }
                                      }
                                      binop {
                                        concat: 704643072
                                      }
                                      rightexp {
                                        str: "debug.traceback"
                                      }
                                    }
                                  }
                                  binop {
                                    concat: 0
                                  }
                                  rightexp {
                                    prefixexp {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        expressions {
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          unary {
            unop {
              negate: 1644167168
            }
            exp {
              binary {
                leftexp {
                }
                binop {
                  concat: 0
                }
                rightexp {
                  ellipsis: "*"
                }
              }
            }
          }
        }
        explast {
          prefixexp {
            functioncall {
              prefArgs {
                prefixexp {
                }
                args {
                  str: "\'"
                }
              }
            }
          }
        }
      }
    }
  }
  laststat {
  }
}
