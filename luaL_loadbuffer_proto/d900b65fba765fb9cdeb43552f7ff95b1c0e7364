chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
              }
              stopexp {
                binary {
                  leftexp {
                  }
                  binop {
                    or: 0
                  }
                  rightexp {
                  }
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
              }
              binop {
                mult: 48
              }
              rightexp {
                binary {
                  leftexp {
                    number: -1418.75
                  }
                  binop {
                    exp: 0
                  }
                  rightexp {
                    unary {
                      unop {
                        negate: 2304
                      }
                      exp {
                        binary {
                          leftexp {
                            number: -424
                          }
                          binop {
                            mult: 48
                          }
                          rightexp {
                            binary {
                              leftexp {
                                binary {
                                  leftexp {
                                    tableconstructor {
                                      fieldlist {
                                        firstField {
                                          expression {
                                            nil: 32
                                          }
                                        }
                                        fields {
                                          field {
                                          }
                                          sep {
                                            semicolon: 0
                                          }
                                        }
                                      }
                                    }
                                  }
                                  binop {
                                    div: 21
                                  }
                                  rightexp {
                                    str: "\'&~33~33333333.+\'"
                                  }
                                }
                              }
                              binop {
                                add: 538976256
                              }
                              rightexp {
                                true: 255
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          binop {
            div: 6
          }
          rightexp {
            str: "\'-6>6&33332<\'<8<8"
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
          }
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
            div: 6
          }
          rightexp {
            str: "\'-6>6&33332<\'<8<8"
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
      last {
        chunk {
          stat {
            semicolon: true
          }
        }
      }
    }
  }
  stat {
    semicolon: true
  }
}
