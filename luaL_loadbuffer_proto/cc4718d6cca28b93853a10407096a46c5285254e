chunk {
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
    semicolon: false
  }
  stat {
    semicolon: false
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: false
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: false
  }
  stat {
    semicolon: true
  }
  laststat {
    explist {
      explist {
        expressions {
        }
        expressions {
          false: 0
        }
        explast {
          prefixexp {
            var {
              indexexpr {
                prefixexp {
                  exp {
                    tableconstructor {
                      fieldlist {
                        firstField {
                          expression {
                            prefixexp {
                            }
                          }
                        }
                      }
                    }
                  }
                }
                exp {
                  unary {
                    unop {
                      length: 4
                    }
                    exp {
                      tableconstructor {
                        fieldlist {
                          firstField {
                            expression {
                              prefixexp {
                                var {
                                  indexexpr {
                                    prefixexp {
                                      exp {
                                        tableconstructor {
                                          fieldlist {
                                            firstField {
                                              expression {
                                                tableconstructor {
                                                  fieldlist {
                                                    firstField {
                                                      exprassign {
                                                        key {
                                                          number: -0
                                                        }
                                                        value {
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            lastSep {
                                              semicolon: 15007744
                                            }
                                          }
                                        }
                                      }
                                    }
                                    exp {
                                      unary {
                                        unop {
                                          length: 15007744
                                        }
                                        exp {
                                          tableconstructor {
                                            fieldlist {
                                              firstField {
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
