chunk {
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn47<pack<7<\'<9"
        }
        explast {
          str: "\'<mathn<7<pack<7<\'<9"
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          false: 6841088
        }
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
                namedassign {
                  name {
                    name: "~"
                    num: 0
                  }
                  value {
                  }
                }
              }
              fields {
                field {
                }
                sep {
                }
              }
            }
          }
        }
        expressions {
          false: 0
        }
        expressions {
          str: "\'<mathn<7<<7<\'<9"
        }
        expressions {
          number: -709.375
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        explast {
          false: 536870912
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    list {
      varlist {
        var {
          name {
            name: ""
            num: 0
          }
        }
      }
      explist {
        expressions {
          nil: 134217728
        }
        expressions {
          str: "\'<mathn<7<<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn>7<<7<\'<9"
        }
        expressions {
          str: ""
        }
        expressions {
        }
        expressions {
          str: "\'<mathn47<pack<7<\'<9"
        }
        explast {
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                      stat {
                      }
                      stat {
                        list {
                          varlist {
                            var {
                            }
                          }
                          explist {
                            expressions {
                              ellipsis: ""
                            }
                            expressions {
                              number: 2.34227342716484e-312
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<<7<\'<9"
                            }
                            expressions {
                              number: -709.375
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            explast {
                              str: "\'<mathn<7<<7<\'<9"
                            }
                          }
                        }
                      }
                      stat {
                        ifstat {
                          condition {
                          }
                          first {
                            chunk {
                            }
                          }
                          clauses {
                            condition {
                            }
                            block {
                              chunk {
                                stat {
                                  semicolon: true
                                }
                              }
                            }
                          }
                        }
                        semicolon: true
                      }
                      stat {
                        list {
                          varlist {
                            var {
                              name {
                                name: ""
                                num: 0
                              }
                            }
                          }
                          explist {
                            expressions {
                              unary {
                                unop {
                                }
                                exp {
                                  str: "\'<mathn<7<pack<7<\'<9"
                                }
                              }
                            }
                            expressions {
                              str: "\'<mathn<7<<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<<7<\'<9"
                            }
                            expressions {
                              str: ""
                            }
                            expressions {
                            }
                            expressions {
                              str: "\'<mathn47<pack<7<\'<9"
                            }
                            explast {
                            }
                          }
                        }
                      }
                      stat {
                        whilecycle {
                          condition {
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                        semicolon: true
                      }
                      stat {
                        list {
                          varlist {
                            var {
                              name {
                                name: ""
                                num: 603979776
                              }
                            }
                          }
                          explist {
                            expressions {
                              unary {
                                unop {
                                }
                                exp {
                                  str: "\'<mathn<7<pack<7<\'<9"
                                }
                              }
                            }
                            expressions {
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            expressions {
                              true: 604241922
                            }
                            expressions {
                              true: 0
                            }
                            expressions {
                              str: ""
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            expressions {
                              str: "\'<mathn<7<pack<7<\'<9"
                            }
                            expressions {
                              str: "\'<mapack<7<\'<9"
                            }
                            explast {
                              prefixexp {
                                functioncall {
                                  prefArgs {
                                    prefixexp {
                                      exp {
                                        binary {
                                          leftexp {
                                            prefixexp {
                                              exp {
                                                tableconstructor {
                                                  fieldlist {
                                                    firstField {
                                                      exprassign {
                                                        key {
                                                          str: "\'<mat<hn7chunk {\n  stat {\n    repeatcycle {\n      block {\n        chunk {\n          stat {\n            call {\n            }\n            semicolon: true\n          }\n          stat {\n            localnames {\n              namelist {\n                firstname {\n                  name: \"\\\'<mathn<7<pack<7<\\\'<9\"\n                  num: 6094848\n                }\n              }\n              explist {\n                expressions {\n                  binary {\n                    leftexp {\n                      prefixexp {\n                        functioncall {\n                          prefArgs {\n                            prefixexp {\n                              var {\n                                name {\n                                  name: \"getmetatable\"\n                                  num: 0\n                                }\n                              }\n                            }\n                            args {\n                              explist {\n                                explist {\n                                  explast {\n                                    binary {\n                                      leftexp {\n                                        prefixexp {\n                                          exp {\n                                            unary {\n                                              unop {\n                                              }\n                                              exp {\n                                                prefixexp {\n                                                  exp {\n                                                    binary {\n                                                      leftexp {\n                                                      }\n                                                      binop {\n                                                        or: 38\n                                                      }\n                                                      rightexp {\n                                                        prefixexp {\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                      binop {\n                                        or: 327680\n                                      }\n                                      rightexp {\n                                        binary {\n                                          leftexp {\n                                            function {\n                                              body {\n                                                parlist {\n                                                  ellipsis: \"\"\n                                                }\n                                                block {\n                                                  chunk {\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                          binop {\n                                          }\n                                          rightexp {\n                                            prefixexp {\n                                              exp {\n                                                unary {\n                                                  unop {\n                                                    length: 4\n                                                  }\n                                                  exp {\n                                                    prefixexp {\n                                                      exp {\n                                                        binary {\n                                                          leftexp {\n                                                          }\n                                                          binop {\n                                                            or: 38\n                                                          }\n                                                          rightexp {\n                                                            nil: 2\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                    binop {\n                      equal: 1952645120\n                    }\n                    rightexp {\n                    }\n                  }\n                }\n                explast {\n                  tableconstructor {\n                    fieldlist {\n                      firstField {\n                        exprassign {\n                          key {\n                          }\n                          value {\n                            binary {\n                              leftexp {\n                                binary {\n                                  leftexp {\n                                    number: -709.375\n                                  }\n                                  binop {\n                                    mult: 8\n                                  }\n                                  rightexp {\n                                    number: 960\n                                  }\n                                }\n                              }\n                              binop {\n                              }\n                              rightexp {\n                                false: 0\n               <pack<7               }\n                            }\n                          }\n                        }\n                      }\n                      lastSep {\n                        semicolon: 327680\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          laststat {\n            semicolon: true\n          }\n        }\n      }\n      condition {\n        unary {\n          unop {\n            not: 0\n          }\n          exp {\n            true: 2147483648\n          }\n        }\n      }\n    }\n  }\n  stat {\n    block {\n      block {\n        chunk {\n          stat {\n            list {\n              varlist {\n                var {\n                  indexexpr {\n                    prefixexp {\n                    }\n<\'                    exp {\n                      true: 67108864\n                    }\n                  }\n                }\n                vars {\n                }\n                vars {\n                  indexexpr {\n                    prefixexp {\n                    }\n                    exp {\n                    }\n       <9           }\n                }\n                vars {\n                }\n                vars {\n                }\n                vars {\n                }\n                vars {\n                }\n                vars {\n                }\n                vars {\n "
                                                        }
                                                        value {
                                                          str: "\'<maRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRthn<7<pack<7<\'<9"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          binop {
                                            div: 0
                                          }
                                          rightexp {
                                            prefixexp {
                                              functioncall {
                                                prefArgs {
                                                  prefixexp {
                                                    var {
                                                      name {
                                                        name: "\224\220\236\233"
                                                        num: 8224
                                                      }
                                                    }
                                                  }
                                                  args {
                                                    explist {
                                                      explist {
                                                        explast {
                                                          function {
                                                            body {
                                                              parlist {
                                                              }
                                                              block {
                                                                chunk {
                                                                  stat {
                                                                    repeatcycle {
                                                                      block {
                                                                        chunk {
                                                                        }
                                                                      }
                                                                      condition {
                                                                      }
                                                                    }
                                                                  }
                                                                  laststat {
                                                                    explist {
                                                                      explist {
                                                                        expressions {
                                                                          binary {
                                                                            leftexp {
                                                                              str: "+"
                                                                            }
                                                                            binop {
                                                                              concat: 25344
                                                                            }
                                                                            rightexp {
                                                                              binary {
                                                                                leftexp {
                                                                                  str: "\'<<\'<<8"
                                                                                }
                                                                                binop {
                                                                                  div: 0
                                                                                }
                                                                                rightexp {
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        explast {
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    args {
                                      explist {
                                        explist {
                                          explast {
                                            prefixexp {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        semicolon: true
                      }
                      laststat {
                        semicolon: true
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    ellipsis: ""
                  }
                  expressions {
                    str: "\'<mathn<7<<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    number: -709.375
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  explast {
                    str: "\'<mathn<7<<7<\'<9"
                  }
                }
              }
            }
            stat {
              semicolon: true
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                }
                doblock {
                  block {
                    chunk {
                      laststat {
                        semicolon: true
                      }
                    }
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              list {
                varlist {
                  var {
                    indexname {
                      prefixexp {
                      }
                      Name: ""
                    }
                  }
                }
                explist {
                  expressions {
                    unary {
                      unop {
                      }
                      exp {
                        str: "\'<mathn<7<pack<7<\'<9"
                      }
                    }
                  }
                  expressions {
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<pa\'\000\000\000\000\000\000\000ck<7<\'<9"
                  }
                  expressions {
                  }
                  expressions {
                    str: ""
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  expressions {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                  explast {
                    str: "\'<mathn<7<pack<7<\'<9"
                  }
                }
              }
              semicolon: true
            }
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
          name {
            name: ""
            num: 0
          }
        }
      }
      explist {
        expressions {
          str: "\'<maRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRthn<7<pack<7<\'<9"
        }
        expressions {
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pa\'\000\000\000\000\000\000\000ck<7<\'<9"
        }
        expressions {
        }
        expressions {
          binary {
            leftexp {
              str: "\'<coroutane.yiel>>\'<coroutane.yiel>>>>>>>>>>>>>>>>>>>>d"
            }
            binop {
              sub: 0
            }
            rightexp {
              binary {
                leftexp {
                  prefixexp {
                  }
                }
                binop {
                }
                rightexp {
                  unary {
                    unop {
                    }
                    exp {
                    }
                  }
                }
              }
            }
          }
        }
        expressions {
          binary {
            leftexp {
              str: "__in"
            }
            binop {
            }
            rightexp {
            }
          }
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        expressions {
          str: "\'<mathn<7<pack<7<\'<9"
        }
        explast {
          str: "\'<mathn<7<pack<7<\'<9"
        }
      }
    }
    semicolon: true
  }
  laststat {
    semicolon: true
  }
}
