chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        number: -0
      }
      stopexp {
        number: 31
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                  prefixexp {
                  }
                }
                stopexp {
                  prefixexp {
                  }
                }
                stepexp {
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                  number: -0
                }
                stopexp {
                  number: 4
                }
                stepexp {
                  prefixexp {
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        localfunc {
                          name {
                            name: ""
                            num: 0
                          }
                          funcbody {
                            parlist {
                              namelist {
                                namelist {
                                  firstname {
                                    name: ""
                                    num: 0
                                  }
                                }
                                ellipsis: "notequal"
                              }
                            }
                            block {
                              chunk {
                                stat {
                                }
                              }
                            }
                          }
                        }
                        semicolon: true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
