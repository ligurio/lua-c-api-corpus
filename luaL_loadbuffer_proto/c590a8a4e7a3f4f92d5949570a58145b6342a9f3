chunk {
  stat {
    forcyclename {
      name {
        name: "\000\000\000\000\000\000\000\000"
        num: 2
      }
      startexp {
        tableconstructor {
        }
      }
      stopexp {
        binary {
          leftexp {
            prefixexp {
            }
          }
          binop {
            add: 3
          }
          rightexp {
            number: -1.2773377981022205e+294
          }
        }
      }
      stepexp {
        binary {
          leftexp {
          }
          binop {
            add: 3
          }
          rightexp {
            number: -1.2773377981022205e+294
          }
        }
      }
      doblock {
        block {
          chunk {
            laststat {
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
          stat {
            list {
              varlist {
                var {
                }
              }
              explist {
                expressions {
                  ellipsis: "\000\000\000\000\000\000\000\031"
                }
                expressions {
                  str: "\'<mathn<7<pack<7<\'<9"
                }
                expressions {
                  str: "\'<mathn<7<<7<\'<9"
                }
                expressions {
                  str: "\'<mathn<7<pack<7<\'<9"
                }
                expressions {
                  str: "\'<mathn<7<pack<7<\'<9"
                }
                expressions {
                  str: "\'<mathn<7<<7<\'<9"
                }
                expressions {
                  str: "\'<mathn<7<pack<7<\'<9"
                }
                expressions {
                  str: "\'<mathn47<pack<7!<\'<9"
                }
                explast {
                  str: "\'<mathn<7<pack<7<\'<9"
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  laststat {
  }
}
