chunk {
  stat {
    forcyclename {
      name {
        name: "_ENV"
        num: 738198532
      }
      startexp {
        number: 7.3528075193188562e+223
      }
      stopexp {
        binary {
          leftexp {
            true: 1073741824
          }
          binop {
          }
          rightexp {
            binary {
              leftexp {
                str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
              }
              binop {
                sub: 65280
              }
              rightexp {
                binary {
                  leftexp {
                    str: "\000\'>io.mpen\'\000\000&&\'>\'\000\000&\'>\'"
                  }
                  binop {
                  }
                  rightexp {
                    binary {
                      leftexp {
                        str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                      }
                      binop {
                      }
                      rightexp {
                        number: -424
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      stepexp {
        unary {
          unop {
            negate: 738198532
          }
          exp {
            tableconstructor {
              fieldlist {
                firstField {
                  expression {
                    tableconstructor {
                      fieldlist {
                        firstField {
                          expression {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    binary {
                      leftexp {
                        tableconstructor {
                          fieldlist {
                            firstField {
                              expression {
                                tableconstructor {
                                  fieldlist {
                                    firstField {
                                      expression {
                                        tableconstructor {
                                          fieldlist {
                                            firstField {
                                              expression {
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      binop {
                        less: 6488064
                      }
                      rightexp {
                        unary {
                          unop {
                          }
                          exp {
                            tableconstructor {
                            }
                          }
                        }
                      }
                    }
                  }
                  explast {
                    tableconstructor {
                    }
                  }
                }
              }
              semicolon: false
            }
            stat {
              semicolon: false
            }
            stat {
            }
            stat {
              ifstat {
                condition {
                  str: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
                }
                first {
                  chunk {
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclename {
      name {
        name: "_ENV"
        num: 738198532
      }
      startexp {
        number: 7.3528075193188562e+223
      }
      stopexp {
        binary {
          leftexp {
            true: 1073741824
          }
          binop {
          }
          rightexp {
            binary {
              leftexp {
                str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
              }
              binop {
                sub: 65280
              }
              rightexp {
                binary {
                  leftexp {
                    str: "\000\'>io.mpen\'\000\000&&\'>\'\000\000&\'>\'"
                  }
                  binop {
                  }
                  rightexp {
                    binary {
                      leftexp {
                        str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                      }
                      binop {
                      }
                      rightexp {
                        number: -424
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      stepexp {
        unary {
          unop {
            negate: 738198532
          }
          exp {
            tableconstructor {
              fieldlist {
                firstField {
                  expression {
                    tableconstructor {
                      fieldlist {
                        firstField {
                          expression {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    binary {
                      leftexp {
                        tableconstructor {
                          fieldlist {
                            firstField {
                              expression {
                                tableconstructor {
                                  fieldlist {
                                    firstField {
                                      expression {
                                        tableconstructor {
                                          fieldlist {
                                            firstField {
                                              expression {
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      binop {
                        less: 6488064
                      }
                      rightexp {
                        unary {
                          unop {
                          }
                          exp {
                            tableconstructor {
                            }
                          }
                        }
                      }
                    }
                  }
                  explast {
                    tableconstructor {
                    }
                  }
                }
              }
              semicolon: false
            }
            stat {
              semicolon: false
            }
            stat {
            }
            stat {
              ifstat {
                condition {
                  str: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
                }
                first {
                  chunk {
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    semicolon: false
  }
  laststat {
    explist {
    }
    semicolon: false
  }
}
