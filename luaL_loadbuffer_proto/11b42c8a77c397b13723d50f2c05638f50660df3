chunk {
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            str: ""
          }
          binop {
            sub: 0
          }
          rightexp {
            binary {
              leftexp {
                str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
              }
              binop {
                sub: 41
              }
              rightexp {
                str: "jit.opt.s"
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  binary {
                    leftexp {
                      str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                    }
                    binop {
                      sub: 0
                    }
                    rightexp {
                      binary {
                        leftexp {
                          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                        }
                        binop {
                          lessEqual: 0
                        }
                        rightexp {
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
          }
          binop {
            sub: 0
          }
          rightexp {
            binary {
              leftexp {
                str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
              }
              binop {
                lessEqual: 0
              }
              rightexp {
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
            }
          }
        }
      }
    }
    semicolon: true
  }
  laststat {
  }
}
