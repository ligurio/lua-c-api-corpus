chunk {
  stat {
    forcyclelist {
      names {
        firstname {
          name: "VE_N"
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              semicolon: true
            }
            laststat {
              explist {
              }
            }
          }
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
          exp {
            function {
              body {
                parlist {
                }
                block {
                  chunk {
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                          }
                        }
                        condition {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                }
                                binop {
                                  and: 262144
                                }
                                rightexp {
                                }
                              }
                            }
                            binop {
                              notEqual: 4
                            }
                            rightexp {
                              str: "\'<debug.traceback\'<9"
                            }
                          }
                        }
                      }
                      semicolon: true
                    }
                    stat {
                      forcyclename {
                        name {
                          name: ""
                          num: 0
                        }
                        startexp {
                        }
                        stopexp {
                        }
                        doblock {
                          block {
                            chunk {
                              stat {
                                repeatcycle {
                                  block {
                                    chunk {
                                    }
                                  }
                                  condition {
                                    binary {
                                      leftexp {
                                        binary {
                                          leftexp {
                                          }
                                          binop {
                                            and: 262144
                                          }
                                          rightexp {
                                          }
                                        }
                                      }
                                      binop {
                                        notEqual: 4
                                      }
                                      rightexp {
                                        str: "\'<debug.traceback\'<9"
                                      }
                                    }
                                  }
                                }
                                semicolon: true
                              }
                              stat {
                                forcyclename {
                                  name {
                                    name: ""
                                    num: 0
                                  }
                                  startexp {
                                  }
                                  stopexp {
                                  }
                                  doblock {
                                    block {
                                      chunk {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        args {
          tableconstructor {
          }
        }
      }
    }
    semicolon: true
  }
}
