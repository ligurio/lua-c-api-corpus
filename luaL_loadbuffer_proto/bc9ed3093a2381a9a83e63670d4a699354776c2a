chunk {
  stat {
    forcyclename {
      name {
        name: "\'>=32.<\'<8"
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      stepexp {
        prefixexp {
          exp {
            str: "i"
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              block {
                block {
                  chunk {
                    stat {
                      func {
                        name {
                          firstname {
                            name: "tonumber"
                            num: 2048
                          }
                        }
                        body {
                          parlist {
                            namelist {
                              namelist {
                                firstname {
                                  name: "4444444"
                                  num: 0
                                }
                              }
                            }
                          }
                          block {
                            chunk {
                              stat {
                                forcyclelist {
                                  names {
                                    firstname {
                                      name: "\021"
                                      num: 127
                                    }
                                    names {
                                      name: "collectgarbage"
                                      num: 101
                                    }
                                    names {
                                      name: ""
                                      num: 127
                                    }
                                  }
                                  expressions {
                                    expressions {
                                      prefixexp {
                                        var {
                                          name {
                                            name: "pcall"
                                            num: 127
                                          }
                                        }
                                      }
                                    }
                                    explast {
                                      function {
                                        body {
                                          parlist {
                                            namelist {
                                              namelist {
                                                firstname {
                                                  name: ""
                                                  num: 0
                                                }
                                              }
                                            }
                                          }
                                          block {
                                            chunk {
                                              stat {
                                                repeatcycle {
                                                  block {
                                                    chunk {
                                                      stat {
                                                        repeatcycle {
                                                          block {
                                                            chunk {
                                                              stat {
                                                                repeatcycle {
                                                                  block {
                                                                    chunk {
                                                                      stat {
                                                                      }
                                                                      laststat {
                                                                        break: 2054845798
                                                                      }
                                                                    }
                                                                  }
                                                                  condition {
                                                                    prefixexp {
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                          condition {
                                                            tableconstructor {
                                                              fieldlist {
                                                                firstField {
                                                                  expression {
                                                                    number: 3.7857669957336791e-270
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      stat {
                                                        whilecycle {
                                                          condition {
                                                            binary {
                                                              leftexp {
                                                                str: "\031\000\000\000\000\000\000\000"
                                                              }
                                                              binop {
                                                                concat: 0
                                                              }
                                                              rightexp {
                                                                binary {
                                                                  leftexp {
                                                                    str: "\031\000\000\000\000\000\000\000"
                                                                  }
                                                                  binop {
                                                                    concat: 0
                                                                  }
                                                                  rightexp {
                                                                    binary {
                                                                      leftexp {
                                                                        ellipsis: ""
                                                                      }
                                                                      binop {
                                                                      }
                                                                      rightexp {
                                                                        str: "\'-6>6&33332<\'<8<2"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                          doblock {
                                                            block {
                                                              chunk {
                                                                laststat {
                                                                  explist {
                                                                    explist {
                                                                      expressions {
                                                                        unary {
                                                                          unop {
                                                                          }
                                                                          exp {
                                                                            prefixexp {
                                                                              functioncall {
                                                                                prefArgs {
                                                                                  prefixexp {
                                                                                    exp {
                                                                                      nil: 73
                                                                                    }
                                                                                  }
                                                                                  args {
                                                                                    explist {
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      explast {
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                        semicolon: false
                                                      }
                                                    }
                                                  }
                                                  condition {
                                                    unary {
                                                      unop {
                                                        length: 4096
                                                      }
                                                      exp {
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  doblock {
                                    block {
                                      chunk {
                                        stat {
                                          func {
                                            name {
                                              firstname {
                                                name: "tonumber"
                                                num: 2048
                                              }
                                            }
                                            body {
                                              parlist {
                                                namelist {
                                                  namelist {
                                                    firstname {
                                                      name: ""
                                                      num: 0
                                                    }
                                                  }
                                                }
                                              }
                                              block {
                                                chunk {
                                                  stat {
                                                    forcyclelist {
                                                      names {
                                                        firstname {
                                                          name: ""
                                                          num: 127
                                                        }
                                                      }
                                                      expressions {
                                                        explast {
                                                        }
                                                      }
                                                      doblock {
                                                        block {
                                                          chunk {
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                  stat {
                                                    whilecycle {
                                                      condition {
                                                        unary {
                                                          unop {
                                                          }
                                                          exp {
                                                            function {
                                                              body {
                                                                block {
                                                                  chunk {
                                                                    laststat {
                                                                      semicolon: true
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      doblock {
                                                        block {
                                                          chunk {
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        laststat {
                                          break: 0
                                          semicolon: true
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              stat {
                                list {
                                  varlist {
                                    var {
                                      name {
                                        name: ""
                                        num: 4278190080
                                      }
                                    }
                                    vars {
                                    }
                                  }
                                  explist {
                                    expressions {
                                      number: 6.63123684676648e-316
                                    }
                                    expressions {
                                      prefixexp {
                                        functioncall {
                                          prefArgs {
                                            prefixexp {
                                            }
                                            args {
                                              str: "\'"
                                            }
                                          }
                                        }
                                      }
                                    }
                                    expressions {
                                      str: "debug.traceback"
                                    }
                                    expressions {
                                      unary {
                                        unop {
                                        }
                                        exp {
                                          nil: 4
                                        }
                                      }
                                    }
                                    expressions {
                                      tableconstructor {
                                      }
                                    }
                                    expressions {
                                    }
                                    expressions {
                                    }
                                    expressions {
                                      binary {
                                        leftexp {
                                        }
                                        binop {
                                        }
                                        rightexp {
                                          nil: 0
                                        }
                                      }
                                    }
                                    expressions {
                                      tableconstructor {
                                      }
                                    }
                                    expressions {
                                    }
                                    explast {
                                      prefixexp {
                                        functioncall {
                                          prefArgs {
                                            prefixexp {
                                            }
                                            args {
                                              str: "\'"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              whilecycle {
                condition {
                  binary {
                    leftexp {
                      number: 1.6749218753590084e+243
                    }
                    binop {
                    }
                    rightexp {
                      str: "\'>=32.<\'<8"
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        semicolon: false
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  laststat {
  }
}
