chunk {
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
          number: -1
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 0
      }
    }
  }
  stat {
    whilecycle {
      condition {
        tableconstructor {
          fieldlist {
            firstField {
              exprassign {
                key {
                  number: 0
                }
                value {
                  nil: 0
                }
              }
            }
            fields {
              field {
                exprassign {
                  key {
                  }
                  value {
                  }
                }
              }
              sep {
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        exprassign {
                          key {
                            number: 415.93749916926026
                          }
                          value {
                            ellipsis: ""
                          }
                        }
                      }
                      fields {
                        field {
                          exprassign {
                            key {
                              number: 415.93749916926026
                            }
                            value {
                              number: 415.93749916926026
                            }
                          }
                        }
                        sep {
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
