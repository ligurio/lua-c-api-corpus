chunk {
  stat {
    func {
      name {
        firstname {
          name: "z"
          num: 0
        }
      }
      body {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
        str: "\0060\\000\\0"
      }
      first {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    list {
                      varlist {
                        var {
                        }
                        vars {
                          indexexpr {
                            prefixexp {
                            }
                            exp {
                              binary {
                                leftexp {
                                  binary {
                                    leftexp {
                                      prefixexp {
                                      }
                                    }
                                    binop {
                                      sub: 3
                                    }
                                    rightexp {
                                      str: "\006\000\000\000\000\000\000\000"
                                    }
                                  }
                                }
                                binop {
                                  sub: 0
                                }
                                rightexp {
                                  binary {
                                    leftexp {
                                      prefixexp {
                                      }
                                    }
                                    binop {
                                      concat: 2
                                    }
                                    rightexp {
                                      prefixexp {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      explist {
                        expressions {
                          binary {
                            leftexp {
                              prefixexp {
                                exp {
                                  prefixexp {
                                    exp {
                                      binary {
                                        leftexp {
                                          prefixexp {
                                          }
                                        }
                                        binop {
                                          mult: 1885434487
                                        }
                                        rightexp {
                                          prefixexp {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            binop {
                              add: 0
                            }
                            rightexp {
                              prefixexp {
                                exp {
                                  binary {
                                    leftexp {
                                      prefixexp {
                                        var {
                                          indexexpr {
                                            prefixexp {
                                              exp {
                                                ellipsis: "\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277"
                                              }
                                            }
                                            exp {
                                            }
                                          }
                                        }
                                      }
                                    }
                                    binop {
                                      concat: 7237475
                                    }
                                    rightexp {
                                      prefixexp {
                                        exp {
                                          binary {
                                            leftexp {
                                              prefixexp {
                                              }
                                            }
                                            binop {
                                              mult: 1885434487
                                            }
                                            rightexp {
                                              prefixexp {
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        explast {
                          str: "\'-8<table.pack\'\'/8<\'<8<8"
                        }
                      }
                    }
                  }
                }
              }
              condition {
                false: 0
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
}
