chunk {
  stat {
    semicolon: false
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            ifstat {
              condition {
              }
              first {
                chunk {
                }
              }
            }
            semicolon: true
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: "-"
          num: 0
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        parlist {
          ellipsis: "\001\000\000\000"
        }
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                  vars {
                    name {
                      name: "select"
                      num: 32768
                    }
                  }
                  vars {
                    name {
                      name: "select"
                      num: 32768
                    }
                  }
                  vars {
                    name {
                      name: "select"
                      num: 32768
                    }
                  }
                }
                explist {
                  explast {
                    number: 0
                  }
                }
              }
            }
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    list {
      varlist {
        var {
          name {
            name: ""
            num: 536870912
          }
        }
        vars {
          indexname {
            prefixexp {
            }
            Name: ""
          }
        }
      }
      explist {
        expressions {
          binary {
            leftexp {
              unary {
                unop {
                }
                exp {
                  str: "\'&~00900700691.+\'"
                }
              }
            }
            binop {
              mod: 1701601119
            }
            rightexp {
              binary {
                leftexp {
                  binary {
                    leftexp {
                      str: "\'&~00900700691.+\'"
                    }
                    binop {
                      div: 0
                    }
                    rightexp {
                      binary {
                        leftexp {
                          unary {
                            unop {
                            }
                            exp {
                              str: "\'&~00900700691.+\'"
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                          binary {
                            leftexp {
                              true: 0
                            }
                            binop {
                              mod: 196608
                            }
                            rightexp {
                            }
                          }
                        }
                      }
                    }
                  }
                }
                binop {
                  mod: 3
                }
                rightexp {
                }
              }
            }
          }
        }
        explast {
          prefixexp {
            var {
              indexexpr {
                prefixexp {
                  var {
                    indexexpr {
                      prefixexp {
                        var {
                          name {
                            name: "select"
                            num: 32768
                          }
                        }
                      }
                      exp {
                        binary {
                          leftexp {
                            unary {
                              unop {
                                length: 0
                              }
                              exp {
                                str: "\'<66>.633332<\'<8"
                              }
                            }
                          }
                          binop {
                            and: 0
                          }
                          rightexp {
                            prefixexp {
                              var {
                                indexexpr {
                                  prefixexp {
                                    var {
                                      indexexpr {
                                        prefixexp {
                                          var {
                                            name {
                                              name: "select"
                                              num: 32768
                                            }
                                          }
                                        }
                                        exp {
                                          binary {
                                            leftexp {
                                              unary {
                                                unop {
                                                  length: 0
                                                }
                                                exp {
                                                  str: "\'<66>.633332<\'<8"
                                                }
                                              }
                                            }
                                            binop {
                                              and: 0
                                            }
                                            rightexp {
                                              prefixexp {
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  exp {
                                    binary {
                                      leftexp {
                                        prefixexp {
                                          var {
                                          }
                                        }
                                      }
                                      binop {
                                        and: 0
                                      }
                                      rightexp {
                                        prefixexp {
                                          var {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                exp {
                  binary {
                    leftexp {
                      prefixexp {
                        var {
                        }
                      }
                    }
                    binop {
                      and: 0
                    }
                    rightexp {
                      prefixexp {
                        var {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        parlist {
          ellipsis: "\001\000\000\000"
        }
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
}
