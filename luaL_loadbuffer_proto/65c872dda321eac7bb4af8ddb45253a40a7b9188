chunk {
  stat {
    list {
      varlist {
        var {
          indexname {
            prefixexp {
            }
            Name: "char"
          }
        }
        vars {
          indexname {
            prefixexp {
            }
            Name: "\366"
          }
        }
        vars {
          name {
            name: ""
            num: 8192
          }
        }
      }
      explist {
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
                namedassign {
                  name {
                    name: ""
                    num: 503316479
                  }
                  value {
                    ellipsis: "+"
                  }
                }
              }
              fields {
                field {
                  namedassign {
                    name {
                      name: ""
                      num: 503316479
                    }
                    value {
                      ellipsis: "+"
                    }
                  }
                }
                sep {
                }
              }
              fields {
                field {
                  expression {
                    ellipsis: "+"
                  }
                }
                sep {
                }
              }
              lastSep {
              }
            }
          }
        }
        explast {
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: "_ENV"
        num: 0
      }
      startexp {
        number: 7.3528075193188562e+223
      }
      stopexp {
        prefixexp {
          var {
            indexname {
              prefixexp {
              }
              Name: "char"
            }
          }
        }
      }
      stepexp {
        unary {
          unop {
            negate: 0
          }
          exp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: "\256"
                  num: 1
                }
                startexp {
                  binary {
                    leftexp {
                      function {
                        body {
                          parlist {
                            ellipsis: "\'<mathn<7<<7<\'<9"
                          }
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                    binop {
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              str: "\'-8<table.pack\'\'/8<\'<8<8"
                            }
                            binop {
                              add: 0
                            }
                            rightexp {
                              function {
                                body {
                                  parlist {
                                    ellipsis: "\'<mathn<7<<7<\'<9"
                                  }
                                  block {
                                    chunk {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                          str: "\'-8<table.pack\'\'/8<\'<8<8"
                        }
                      }
                    }
                  }
                }
                stopexp {
                }
                stepexp {
                  binary {
                    leftexp {
                    }
                    binop {
                      div: 0
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                            }
                            binop {
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  str: "\'-8<table.pack\'\'/8<\'<8<8"
                                }
                                binop {
                                  concat: 118
                                }
                                rightexp {
                                  unary {
                                    unop {
                                      negate: 0
                                    }
                                    exp {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        binop {
                          div: 0
                        }
                        rightexp {
                          binary {
                            leftexp {
                              str: "\'-8<table.pack\'\'/8<\'<8<8"
                            }
                            binop {
                              add: 0
                            }
                            rightexp {
                              str: "\'-8<table.pack\'\'/8<\'<8<8"
                            }
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  laststat {
    explist {
      explist {
        expressions {
          ellipsis: "\001\000\000\003"
        }
        explast {
        }
      }
    }
  }
}
