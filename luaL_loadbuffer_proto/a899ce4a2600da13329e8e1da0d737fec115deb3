chunk {
  stat {
    forcyclename {
      name {
        name: "\210"
        num: 6488064
      }
      startexp {
        unary {
          unop {
            negate: 6488064
          }
          exp {
          }
        }
      }
      stopexp {
        str: "}\000\000\000"
      }
      doblock {
        block {
          chunk {
            stat {
              call {
                prefArgs {
                  prefixexp {
                    var {
                      name {
                        name: "load"
                        num: 0
                      }
                    }
                  }
                  args {
                    explist {
                      explist {
                        explast {
                          function {
                            body {
                              block {
                                chunk {
                                  stat {
                                    forcyclename {
                                      name {
                                        name: "_  V"
                                        num: 0
                                      }
                                      startexp {
                                        tableconstructor {
                                        }
                                      }
                                      stopexp {
                                        binary {
                                          leftexp {
                                          }
                                          binop {
                                            greater: 1
                                          }
                                          rightexp {
                                            str: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                                          }
                                        }
                                      }
                                      doblock {
                                        block {
                                          chunk {
                                            stat {
                                              forcyclename {
                                                name {
                                                  name: "ENV"
                                                  num: 0
                                                }
                                                startexp {
                                                }
                                                stopexp {
                                                }
                                                stepexp {
                                                  unary {
                                                    unop {
                                                      negate: 64770
                                                    }
                                                    exp {
                                                      str: "\'<8<string.match\'<9"
                                                    }
                                                  }
                                                }
                                                doblock {
                                                  block {
                                                    chunk {
                                                      stat {
                                                        semicolon: true
                                                      }
                                                      stat {
                                                        semicolon: true
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
