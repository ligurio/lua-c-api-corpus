chunk {
  stat {
    whilecycle {
      condition {
        str: "counter_8"
      }
      doblock {
        block {
          chunk {
            stat {
              semicolon: true
            }
            stat {
              ifstat {
                condition {
                  unary {
                    unop {
                    }
                    exp {
                      prefixexp {
                      }
                    }
                  }
                }
                first {
                  chunk {
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                  str: "os.setlocale"
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            ifstat {
              condition {
                unary {
                  unop {
                  }
                  exp {
                    prefixexp {
                    }
                  }
                }
              }
              first {
                chunk {
                }
              }
            }
          }
        }
      }
      condition {
        str: "\'<mathn<7<<7<\'<9"
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            ifstat {
              condition {
                unary {
                  unop {
                  }
                  exp {
                    prefixexp {
                    }
                  }
                }
              }
              first {
                chunk {
                }
              }
            }
          }
        }
      }
      condition {
        str: "\'<mathn<7<<7<\'<9"
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
          num: 0
        }
        names {
          name: ""
          num: 0
        }
        names {
          name: "LUA_CPATH_5_3"
          num: 0
        }
      }
      body {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: true
          }
          stat {
            localnames {
              namelist {
                firstname {
                  name: ""
                  num: 0
                }
                names {
                  name: "counter_8"
                  num: 0
                }
              }
              explist {
                expressions {
                }
                explast {
                  number: -35651608.12500108
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    list {
                      varlist {
                        var {
                        }
                      }
                      explist {
                        expressions {
                          ellipsis: ""
                        }
                        expressions {
                        }
                        expressions {
                        }
                        expressions {
                        }
                        explast {
                          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                        }
                      }
                    }
                    semicolon: false
                  }
                  stat {
                    semicolon: true
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                        str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                        str: "D"
                      }
                    }
                  }
                }
              }
              condition {
                str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        true: 1684104562
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            break: 16384
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            block {
              block {
                chunk {
                }
              }
            }
            semicolon: true
          }
          stat {
            semicolon: false
          }
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        prefixexp {
        }
      }
    }
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        str: "\030"
      }
    }
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
    semicolon: false
  }
  stat {
    semicolon: false
  }
  stat {
    semicolon: true
  }
  stat {
    call {
      namedArgs {
        prefixexp {
        }
        name {
          name: ""
          num: 0
        }
        args {
        }
      }
    }
  }
  stat {
  }
  laststat {
  }
}
