chunk {
  stat {
    localnames {
      namelist {
        firstname {
          name: "\'"
          num: 0
        }
      }
      explist {
        expressions {
          true: 0
        }
        expressions {
          binary {
            leftexp {
              true: 100663297
            }
            binop {
              sub: 768
            }
            rightexp {
              binary {
                leftexp {
                  true: 100663297
                }
                binop {
                  div: 0
                }
                rightexp {
                  binary {
                    leftexp {
                      number: 8.65266319610061e-315
                    }
                    binop {
                      sub: 768
                    }
                    rightexp {
                      str: "\'>>string9~1~i\'9~"
                    }
                  }
                }
              }
            }
          }
        }
        explast {
          str: "*"
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            tableconstructor {
              fieldlist {
                firstField {
                }
                fields {
                  field {
                    expression {
                      ellipsis: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                    }
                  }
                  sep {
                  }
                }
              }
            }
          }
          binop {
            equal: 0
          }
          rightexp {
            prefixexp {
              var {
                name {
                  name: "_ENV"
                  num: 0
                }
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
      clauses {
        condition {
          binary {
            leftexp {
              binary {
                leftexp {
                  str: "\000\'>\'\000\000&&\'>\'\000\000&\'>\'"
                }
                binop {
                  greaterEqual: 6
                }
                rightexp {
                  str: "\000\'>\'\000\000&&\'>\'\000\000&\'>\'"
                }
              }
            }
            binop {
              equal: 0
            }
            rightexp {
              prefixexp {
                var {
                  name {
                    name: "_ENV"
                    num: 0
                  }
                }
              }
            }
          }
        }
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            tableconstructor {
              fieldlist {
                firstField {
                }
                fields {
                  field {
                    expression {
                      ellipsis
                    }
                  }
                  sep {
                  }
                }
              }
            }
          }
          binop {
            equal: 0
          }
          rightexp {
            prefixexp {
              var {
                name {
                  name: "_ENV"
                  num: 0
                }
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
      clauses {
        condition {
          binary {
            leftexp {
              tableconstructor {
              }
            }
            binop {
              equal: 0
            }
            rightexp {
              prefixexp {
                var {
                  name {
                    name: "_ENV"
                    num: 0
                  }
                }
              }
            }
          }
        }
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 67108864
                }
                startexp {
                  true: 655360
                }
                stopexp {
                  binary {
                    leftexp {
                      number: -468.75
                    }
                    binop {
                      add: 538976256
                    }
                    rightexp {
                      binary {
                        leftexp {
                          str: "\'~~9~9~\'9~"
                        }
                        binop {
                        }
                        rightexp {
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      laststat {
                        explist {
                          explist {
                            explast {
                              str: "\017"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
