chunk {
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        lastname {
          name: "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
          num: 0
        }
      }
      body {
        parlist {
        }
        block {
          chunk {
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
                    num: 0
                  }
                  names {
                    name: "counter_8"
                    num: 0
                  }
                }
                expressions {
                  expressions {
                    unary {
                      unop {
                      }
                      exp {
                      }
                    }
                  }
                  explast {
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            explist {
              explist {
                explast {
                  binary {
                    leftexp {
                    }
                    binop {
                      greater: 4
                    }
                    rightexp {
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
        nil: 5
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
          ellipsis: "-"
        }
      }
    }
    semicolon: true
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: "c\tunter_+"
          num: 24944
        }
        names {
          name: "counter_8"
          num: 0
        }
      }
      explist {
        expressions {
        }
        explast {
          number: -1.2773377981022205e+294
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
        num: 0
      }
      funcbody {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        exprassign {
                          key {
                            function {
                              body {
                                block {
                                  chunk {
                                  }
                                }
                              }
                            }
                          }
                          value {
                            true: 0
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        semicolon: true
                      }
                      laststat {
                        semicolon: true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        tableconstructor {
          fieldlist {
            firstField {
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        lastname {
          name: "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
          num: 0
        }
      }
      body {
        block {
          chunk {
            laststat {
              break: 2105376
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            ifstat {
              condition {
              }
              first {
                chunk {
                  stat {
                    localfunc {
                      name {
                        name: ""
                        num: 0
                      }
                      funcbody {
                        block {
                          chunk {
                            stat {
                              localfunc {
                                name {
                                  name: ""
                                  num: 0
                                }
                                funcbody {
                                  block {
                                    chunk {
                                      stat {
                                        localfunc {
                                          name {
                                            name: ""
                                            num: 0
                                          }
                                          funcbody {
                                            block {
                                              chunk {
                                                stat {
                                                  ifstat {
                                                    condition {
                                                    }
                                                    first {
                                                      chunk {
                                                        stat {
                                                          localfunc {
                                                            name {
                                                              name: ""
                                                              num: 0
                                                            }
                                                            funcbody {
                                                              block {
                                                                chunk {
                                                                  stat {
                                                                    ifstat {
                                                                      condition {
                                                                      }
                                                                      first {
                                                                        chunk {
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                          semicolon: true
                                                        }
                                                        stat {
                                                        }
                                                        stat {
                                                          list {
                                                            varlist {
                                                              var {
                                                                indexexpr {
                                                                  prefixexp {
                                                                    exp {
                                                                      tableconstructor {
                                                                      }
                                                                    }
                                                                  }
                                                                  exp {
                                                                    prefixexp {
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              vars {
                                                                name {
                                                                  name: ""
                                                                  num: 0
                                                                }
                                                              }
                                                            }
                                                            explist {
                                                              expressions {
                                                                binary {
                                                                  leftexp {
                                                                  }
                                                                  binop {
                                                                  }
                                                                  rightexp {
                                                                  }
                                                                }
                                                              }
                                                              explast {
                                                                str: "\'-8<\'\'-8<\'<8<8"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        semicolon: true
                                      }
                                      stat {
                                      }
                                      stat {
                                        list {
                                          varlist {
                                            var {
                                              indexexpr {
                                                prefixexp {
                                                  exp {
                                                    tableconstructor {
                                                    }
                                                  }
                                                }
                                                exp {
                                                  prefixexp {
                                                    var {
                                                      name {
                                                        name: ""
                                                        num: 0
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            vars {
                                              indexexpr {
                                                prefixexp {
                                                }
                                                exp {
                                                  prefixexp {
                                                    functioncall {
                                                      namedArgs {
                                                        prefixexp {
                                                          var {
                                                            name {
                                                              name: "load"
                                                              num: 16776448
                                                            }
                                                          }
                                                        }
                                                        name {
                                                          name: ""
                                                          num: 0
                                                        }
                                                        args {
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          explist {
                                            expressions {
                                              prefixexp {
                                                var {
                                                  name {
                                                    name: "math"
                                                    num: 0
                                                  }
                                                }
                                              }
                                            }
                                            expressions {
                                              tableconstructor {
                                              }
                                            }
                                            explast {
                                              str: "\'-8<\'\'-8<\'<8<8"
                                            }
                                          }
                                        }
                                      }
                                      laststat {
                                        semicolon: true
                                      }
                                    }
                                  }
                                }
                              }
                              semicolon: true
                            }
                            stat {
                            }
                            stat {
                              list {
                                varlist {
                                  var {
                                    indexexpr {
                                      prefixexp {
                                      }
                                      exp {
                                        ellipsis: "@\000\000\000\000\000\000\000"
                                      }
                                    }
                                  }
                                  vars {
                                    name {
                                      name: ""
                                      num: 0
                                    }
                                  }
                                  vars {
                                    indexexpr {
                                      prefixexp {
                                      }
                                      exp {
                                        prefixexp {
                                          exp {
                                            str: "\000\000\000\000\000\000\000\000\000\000\000\000\000"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                explist {
                                  expressions {
                                    tableconstructor {
                                      fieldlist {
                                        firstField {
                                        }
                                        fields {
                                          field {
                                          }
                                          sep {
                                          }
                                        }
                                        fields {
                                          field {
                                          }
                                          sep {
                                            comma: 2
                                          }
                                        }
                                        lastSep {
                                          comma: 0
                                        }
                                      }
                                    }
                                  }
                                  explast {
                                    str: "\'-8<\'\'-8<\'<8<8"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    semicolon: true
                  }
                  stat {
                  }
                  stat {
                    list {
                      varlist {
                        var {
                          indexexpr {
                            prefixexp {
                              exp {
                                tableconstructor {
                                }
                              }
                            }
                            exp {
                              prefixexp {
                                functioncall {
                                  namedArgs {
                                    prefixexp {
                                      var {
                                        name {
                                          name: "load"
                                          num: 16776448
                                        }
                                      }
                                    }
                                    name {
                                      name: ""
                                      num: 0
                                    }
                                    args {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        vars {
                          name {
                            name: ""
                            num: 11776
                          }
                        }
                      }
                      explist {
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                              }
                              fields {
                                field {
                                  expression {
                                    number: 2.39048722083829e-319
                                  }
                                }
                                sep {
                                  semicolon: 704643072
                                }
                              }
                              fields {
                                field {
                                  namedassign {
                                    name {
                                      name: "local "
                                      num: 0
                                    }
                                    value {
                                    }
                                  }
                                }
                                sep {
                                  comma: 2
                                }
                              }
                            }
                          }
                        }
                        explast {
                          str: "\'-8<\'\'-8<\'<8<8"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
        nil: 65536
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
    ifstat {
      condition {
        true: 67125248
      }
      first {
        chunk {
        }
      }
      clauses {
        condition {
          number: -1.2773377981022205e+294
        }
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: "counter_8"
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
          stat {
            list {
              varlist {
                var {
                }
                vars {
                }
                vars {
                }
              }
              explist {
                explast {
                  ellipsis: "gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg"
                }
              }
            }
          }
        }
      }
      clauses {
        condition {
        }
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
  }
  laststat {
    semicolon: true
  }
}
