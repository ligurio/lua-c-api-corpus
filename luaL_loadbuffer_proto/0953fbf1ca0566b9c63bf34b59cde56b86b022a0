chunk {
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            ellipsis: ""
          }
          binop {
            and: 1073742080
          }
          rightexp {
            str: "\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211\211"
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              semicolon: true
            }
            stat {
              semicolon: true
            }
            laststat {
            }
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            ellipsis: ""
          }
          binop {
            equal: 0
          }
          rightexp {
            binary {
              leftexp {
                str: "\000\'>io.open\'.\000&&\'>\'\000\000&\'>\'"
              }
              binop {
              }
              rightexp {
                binary {
                  leftexp {
                    binary {
                      leftexp {
                        str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                      }
                      binop {
                        greater: 0
                      }
                      rightexp {
                        ellipsis: "\\027\\000\\000\\000\\000\\000\\000\\000"
                      }
                    }
                  }
                  binop {
                    less: 1073742080
                  }
                  rightexp {
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              call {
                prefArgs {
                  prefixexp {
                    var {
                      name {
                        name: "xpcall"
                        num: 0
                      }
                    }
                  }
                  args {
                    explist {
                      explist {
                        expressions {
                          prefixexp {
                            var {
                              name {
                                name: "require"
                                num: 0
                              }
                            }
                          }
                        }
                        expressions {
                          prefixexp {
                            var {
                              name {
                                name: "xpcall"
                                num: 538976288
                              }
                            }
                          }
                        }
                        explast {
                          binary {
                            leftexp {
                              function {
                                body {
                                  block {
                                    chunk {
                                    }
                                  }
                                }
                              }
                            }
                            binop {
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  false: 8224
                                }
                                binop {
                                  and: 4
                                }
                                rightexp {
                                  tableconstructor {
                                    fieldlist {
                                      firstField {
                                      }
                                      fields {
                                        field {
                                          namedassign {
                                            name {
                                              name: ",,,,,,,,,,,,,,,,,,,,,,,,,,"
                                              num: 0
                                            }
                                            value {
                                            }
                                          }
                                        }
                                        sep {
                                        }
                                      }
                                      lastSep {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  laststat {
  }
}
