chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
        nil: 1
      }
      stepexp {
        prefixexp {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                  nil: 1
                }
                stepexp {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        exprassign {
                          key {
                            prefixexp {
                            }
                          }
                          value {
                            prefixexp {
                            }
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        ifstat {
                          condition {
                            tableconstructor {
                              fieldlist {
                                firstField {
                                  exprassign {
                                    key {
                                      prefixexp {
                                      }
                                    }
                                    value {
                                      prefixexp {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          first {
                            chunk {
                            }
                          }
                        }
                        semicolon: true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
        ellipsis: "\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320"
      }
      stepexp {
        number: 0
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                  nil: 1
                }
                stepexp {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        exprassign {
                          key {
                            prefixexp {
                            }
                          }
                          value {
                            prefixexp {
                            }
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        ifstat {
                          condition {
                            tableconstructor {
                              fieldlist {
                                firstField {
                                  exprassign {
                                    key {
                                      prefixexp {
                                      }
                                    }
                                    value {
                                      prefixexp {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          first {
                            chunk {
                            }
                          }
                        }
                        semicolon: true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  laststat {
    explist {
      explist {
        expressions {
          number: 0
        }
        explast {
        }
      }
    }
  }
}
