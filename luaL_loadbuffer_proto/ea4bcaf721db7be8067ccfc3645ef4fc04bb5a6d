chunk {
  stat {
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        unary {
          unop {
          }
          exp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                }
              }
            }
            stat {
              block {
                block {
                  chunk {
                  }
                }
              }
            }
            stat {
              localnames {
                namelist {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                explist {
                  expressions {
                    nil: 0
                  }
                  explast {
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            list {
              varlist {
                var {
                  name {
                    name: ""
                    num: 96
                  }
                }
              }
              explist {
                explast {
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    whilecycle {
                      condition {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                        number: -2.9740338169555661e+284
                                      }
                                      binop {
                                        greater: 32768
                                      }
                                      rightexp {
                                        binary {
                                          leftexp {
                                            binary {
                                              leftexp {
                                                number: -2.9740338169555661e+284
                                              }
                                              binop {
                                                add: 0
                                              }
                                              rightexp {
                                                number: -2.9740338169555661e+284
                                              }
                                            }
                                          }
                                          binop {
                                            mult: 0
                                          }
                                          rightexp {
                                            number: -2.9740338169555661e+284
                                          }
                                        }
                                      }
                                    }
                                  }
                                  binop {
                                    div: 0
                                  }
                                  rightexp {
                                    number: -4.9591064453125e-05
                                  }
                                }
                              }
                              binop {
                              }
                              rightexp {
                                number: -4.9591064453125e-05
                              }
                            }
                          }
                          binop {
                          }
                          rightexp {
                            nil: 2
                          }
                        }
                      }
                      doblock {
                        block {
                          chunk {
                            stat {
                            }
                            stat {
                              repeatcycle {
                                block {
                                  chunk {
                                    stat {
                                      ifstat {
                                        condition {
                                        }
                                        first {
                                          chunk {
                                            laststat {
                                              semicolon: true
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                condition {
                                }
                              }
                            }
                            stat {
                              repeatcycle {
                                block {
                                  chunk {
                                  }
                                }
                                condition {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              condition {
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
}
