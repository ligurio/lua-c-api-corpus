chunk {
  stat {
    list {
      varlist {
        var {
          indexname {
            prefixexp {
            }
            Name: "\377\377\377\377"
          }
        }
      }
      explist {
        explast {
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          ellipsis: "33333333333333333333333333333333333333333333333333333333333333333333333333"
        }
        explast {
        }
      }
    }
  }
  stat {
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            number: -8.3711609936427134e+298
          }
          binop {
            div: 3159040
          }
          rightexp {
            binary {
              leftexp {
              }
              binop {
                mod: 0
              }
              rightexp {
                unary {
                  unop {
                    negate: 538968064
                  }
                  exp {
                    false: 16
                  }
                }
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 4211081216
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            laststat {
              explist {
                explist {
                  explast {
                    ellipsis: "select"
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            number: -2.4600631163242529e+260
          }
          binop {
            div: 3159040
          }
          rightexp {
            binary {
              leftexp {
              }
              binop {
                mod: 0
              }
              rightexp {
                unary {
                  unop {
                    negate: 0
                  }
                  exp {
                  }
                }
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "\275"
          num: 33554432
        }
        names {
          name: "\275"
          num: 0
        }
        names {
          name: "math.acos"
          num: 0
        }
      }
      expressions {
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
              }
              fields {
                field {
                }
                sep {
                  semicolon: 257
                }
              }
            }
          }
        }
        explast {
          tableconstructor {
            fieldlist {
              firstField {
              }
              fields {
                field {
                }
                sep {
                  semicolon: 257
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 4211081216
        }
      }
      expressions {
        explast {
          ellipsis: "select"
        }
      }
      doblock {
        block {
          chunk {
            stat {
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                    }
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                          }
                        }
                        condition {
                        }
                      }
                      semicolon: true
                    }
                  }
                }
                condition {
                  binary {
                    leftexp {
                    }
                    binop {
                      equal: 2
                    }
                    rightexp {
                      prefixexp {
                        exp {
                          binary {
                            leftexp {
                            }
                            binop {
                              or: 2
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  nil: 0
                                }
                                binop {
                                  and: 2
                                }
                                rightexp {
                                  prefixexp {
                                    exp {
                                      binary {
                                        leftexp {
                                          prefixexp {
                                            functioncall {
                                              prefArgs {
                                                prefixexp {
                                                }
                                                args {
                                                  str: ""
                                                }
                                              }
                                            }
                                          }
                                        }
                                        binop {
                                          or: 2
                                        }
                                        rightexp {
                                          tableconstructor {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    whilecycle {
      condition {
        function {
          body {
            parlist {
              ellipsis: "\\001\\000"
            }
            block {
              chunk {
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 41216
      }
      funcbody {
        block {
          chunk {
            laststat {
              explist {
                explist {
                  explast {
                    unary {
                      unop {
                      }
                      exp {
                        function {
                          body {
                            parlist {
                              ellipsis: ""
                            }
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
  }
}
