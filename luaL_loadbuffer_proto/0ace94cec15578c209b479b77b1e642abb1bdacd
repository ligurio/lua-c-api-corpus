chunk {
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          function {
            body {
              block {
                chunk {
                  stat {
                    forcyclename {
                      name {
                        name: ""
                        num: 0
                      }
                      startexp {
                      }
                      stopexp {
                      }
                      stepexp {
                      }
                      doblock {
                        block {
                          chunk {
                            stat {
                              forcyclename {
                                name {
                                  name: "~"
                                  num: 0
                                }
                                startexp {
                                }
                                stopexp {
                                }
                                doblock {
                                  block {
                                    chunk {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        explast {
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      stepexp {
        nil: 0
      }
      doblock {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
                condition {
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
        nil: 0
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 13
                }
                startexp {
                  binary {
                    leftexp {
                    }
                    binop {
                    }
                    rightexp {
                      false: 23
                    }
                  }
                }
                stopexp {
                }
                stepexp {
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                }
                doblock {
                  block {
                    chunk {
                      laststat {
                      }
                    }
                  }
                }
              }
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                  ellipsis: "?"
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
                condition {
                }
              }
            }
          }
        }
      }
    }
  }
}
