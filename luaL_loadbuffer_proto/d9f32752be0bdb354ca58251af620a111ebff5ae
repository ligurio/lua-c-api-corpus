chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        binary {
          leftexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    binary {
                      leftexp {
                        number: -0.0044998617287015374
                      }
                      binop {
                        div: 0
                      }
                      rightexp {
                        number: -0.0044998617287015374
                      }
                    }
                  }
                  binop {
                    exp: 0
                  }
                  rightexp {
                    number: -11.617645263671875
                  }
                }
              }
              binop {
                concat: 4
              }
              rightexp {
                binary {
                  leftexp {
                    number: -0.0044998617287015374
                  }
                  binop {
                    div: 0
                  }
                  rightexp {
                    number: -0.0044998617287015374
                  }
                }
              }
            }
          }
          binop {
            concat: 4
          }
          rightexp {
            binary {
              leftexp {
                number: -0.0044998617287015374
              }
              binop {
                div: 0
              }
              rightexp {
                number: -0.0044998617287015374
              }
            }
          }
        }
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                  function {
                    body {
                      block {
                        chunk {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
}
