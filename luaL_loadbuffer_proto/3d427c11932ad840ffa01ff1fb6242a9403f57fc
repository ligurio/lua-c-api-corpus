chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        binary {
          leftexp {
          }
          binop {
            or: 1
          }
          rightexp {
            prefixexp {
              exp {
                binary {
                  leftexp {
                  }
                  binop {
                    or: 1
                  }
                  rightexp {
                    number: -0.00023651123046875
                  }
                }
              }
            }
          }
        }
      }
      stopexp {
        binary {
          leftexp {
          }
          binop {
            or: 1
          }
          rightexp {
            prefixexp {
              exp {
                binary {
                  leftexp {
                  }
                  binop {
                    or: 1
                  }
                  rightexp {
                    number: -0.00023651123046875
                  }
                }
              }
            }
          }
        }
      }
      stepexp {
        prefixexp {
          exp {
            binary {
              leftexp {
              }
              binop {
                or: 1
              }
              rightexp {
                prefixexp {
                  exp {
                    binary {
                      leftexp {
                      }
                      binop {
                        or: 1
                      }
                      rightexp {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              semicolon: true
            }
            stat {
            }
            laststat {
              explist {
                explist {
                  expressions {
                    ellipsis: "\377\017"
                  }
                  explast {
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
      }
    }
  }
  laststat {
    explist {
      explist {
        explast {
          prefixexp {
            functioncall {
              prefArgs {
                prefixexp {
                  functioncall {
                    namedArgs {
                      prefixexp {
                      }
                      name {
                        name: ""
                        num: 0
                      }
                      args {
                      }
                    }
                  }
                }
                args {
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
}
