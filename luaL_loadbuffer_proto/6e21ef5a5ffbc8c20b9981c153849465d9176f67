chunk {
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                  binary {
                    leftexp {
                      str: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                    }
                    binop {
                      or: 1684104562
                    }
                    rightexp {
                      str: "\'<A>AAAA{A^A<\'<<8"
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                  binary {
                    leftexp {
                      str: "\'<A>AAAAAA^A<\'<<8"
                    }
                    binop {
                      or: 1684104562
                    }
                    rightexp {
                      str: "\'<A>AAAAAA^A<\'<<8"
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                          }
                        }
                        condition {
                          binary {
                            leftexp {
                              true: 1684104562
                            }
                            binop {
                              exp: 2
                            }
                            rightexp {
                              false: 0
                            }
                          }
                        }
                      }
                      semicolon: true
                    }
                  }
                }
                condition {
                  prefixexp {
                    exp {
                      prefixexp {
                        functioncall {
                          namedArgs {
                            prefixexp {
                            }
                            name {
                              name: ""
                              num: 0
                            }
                            args {
                              tableconstructor {
                                fieldlist {
                                  firstField {
                                    expression {
                                      nil: 0
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
            laststat {
              break: 262144
            }
          }
        }
      }
    }
  }
}
