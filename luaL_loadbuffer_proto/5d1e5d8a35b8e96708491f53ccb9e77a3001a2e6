chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 512
      }
      startexp {
        nil: 8388608
      }
      stopexp {
      }
      stepexp {
        binary {
          leftexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    binary {
                      leftexp {
                        prefixexp {
                        }
                      }
                      binop {
                        mult: 16385
                      }
                      rightexp {
                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                      }
                    }
                  }
                  binop {
                  }
                  rightexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                }
              }
              binop {
                equal: 0
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
          binop {
            greater: 1970102111
          }
          rightexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    str: "HHHHHHHHHHHHHHHHHHHHHHHHHHHHH"
                  }
                  binop {
                    equal: 0
                  }
                  rightexp {
                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                  }
                }
              }
              binop {
                div: 0
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                binary {
                                  leftexp {
                                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                                  }
                                  binop {
                                  }
                                  rightexp {
                                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                                  }
                                }
                              }
                              binop {
                                mult: 16385
                              }
                              rightexp {
                                str: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                              }
                            }
                          }
                          binop {
                            lessEqual: 16426
                          }
                          rightexp {
                            function {
                              body {
                                block {
                                  chunk {
                                    stat {
                                      semicolon: true
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      binop {
                        notEqual: 3080192
                      }
                      rightexp {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                str: "\'-8<table.pack\'\'/8<\'<8<8"
                              }
                              binop {
                              }
                              rightexp {
                                str: "\'-8<table.pack\'\'/8<\'<8<8"
                              }
                            }
                          }
                          binop {
                            div: 0
                          }
                          rightexp {
                            str: "\'-8<table.pack\'\'/8<\'<8<8"
                          }
                        }
                      }
                    }
                  }
                  binop {
                    mult: 16385
                  }
                  rightexp {
                    str: "HHHHHHHHHHHHHHHHHHHHHHHHHHHHH"
                  }
                }
              }
              binop {
                lessEqual: 16385
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
          binop {
            div: 21
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                        binary {
                                          leftexp {
                                            prefixexp {
                                            }
                                          }
                                          binop {
                                            mult: 16385
                                          }
                                          rightexp {
                                            str: "\'-8<table.pack\'\'/8<\'<8<8"
                                          }
                                        }
                                      }
                                      binop {
                                      }
                                      rightexp {
                                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                                      }
                                    }
                                  }
                                  binop {
                                    equal: 0
                                  }
                                  rightexp {
                                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                                  }
                                }
                              }
                              binop {
                                greater: 1970102111
                              }
                              rightexp {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                        str: "HHHHHHHHHHHHHHHHHHHHHHHHHHHHH"
                                      }
                                      binop {
                                        equal: 0
                                      }
                                      rightexp {
                                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                                      }
                                    }
                                  }
                                  binop {
                                    div: 0
                                  }
                                  rightexp {
                                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                                  }
                                }
                              }
                            }
                          }
                          binop {
                            mult: 16385
                          }
                          rightexp {
                            str: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                          }
                        }
                      }
                      binop {
                        lessEqual: 16426
                      }
                      rightexp {
                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                      }
                    }
                  }
                  binop {
                    notEqual: 3080192
                  }
                  rightexp {
                    prefixexp {
                      var {
                        indexname {
                          prefixexp {
                          }
                          Name: "debug.gethook"
                        }
                      }
                    }
                  }
                }
              }
              binop {
                mult: 16385
              }
              rightexp {
                str: "HHHHHHHHHHHHHHHHHHHHHHHHHHHHH"
              }
            }
          }
          binop {
            lessEqual: 16385
          }
          rightexp {
            str: "\'-8<table.pack\'\'/8<\'<8<8"
          }
        }
      }
    }
  }
  stat {
  }
  laststat {
  }
}
