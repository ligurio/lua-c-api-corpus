chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    forcyclename {
                      name {
                        name: ""
                        num: 0
                      }
                      startexp {
                      }
                      stopexp {
                        prefixexp {
                          functioncall {
                            prefArgs {
                              prefixexp {
                                var {
                                }
                              }
                              args {
                              }
                            }
                          }
                        }
                      }
                      doblock {
                        block {
                          chunk {
                            stat {
                              func {
                                name {
                                  firstname {
                                    name: "tonumber"
                                    num: 2048
                                  }
                                }
                                body {
                                  parlist {
                                    namelist {
                                      namelist {
                                        firstname {
                                          name: ""
                                          num: 0
                                        }
                                      }
                                    }
                                  }
                                  block {
                                    chunk {
                                      stat {
                                        forcyclelist {
                                          names {
                                            firstname {
                                              name: "\021"
                                              num: 127
                                            }
                                            names {
                                              name: "\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244"
                                              num: 0
                                            }
                                            names {
                                              name: ""
                                              num: 127
                                            }
                                          }
                                          expressions {
                                            expressions {
                                              prefixexp {
                                                var {
                                                  name {
                                                    name: "pcall"
                                                    num: 127
                                                  }
                                                }
                                              }
                                            }
                                            explast {
                                              function {
                                                body {
                                                  parlist {
                                                    namelist {
                                                      namelist {
                                                        firstname {
                                                          name: ""
                                                          num: 2048
                                                        }
                                                      }
                                                    }
                                                  }
                                                  block {
                                                    chunk {
                                                      stat {
                                                        repeatcycle {
                                                          block {
                                                            chunk {
                                                              stat {
                                                                repeatcycle {
                                                                  block {
                                                                    chunk {
                                                                      stat {
                                                                        func {
                                                                          name {
                                                                            firstname {
                                                                              name: ""
                                                                              num: 0
                                                                            }
                                                                          }
                                                                          body {
                                                                            block {
                                                                              chunk {
                                                                                laststat {
                                                                                  explist {
                                                                                  }
                                                                                  semicolon: true
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      stat {
                                                                        repeatcycle {
                                                                          block {
                                                                            chunk {
                                                                              stat {
                                                                              }
                                                                            }
                                                                          }
                                                                          condition {
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                  condition {
                                                                    tableconstructor {
                                                                      fieldlist {
                                                                        firstField {
                                                                          expression {
                                                                            unary {
                                                                              unop {
                                                                                negate: 2293760
                                                                              }
                                                                              exp {
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                          condition {
                                                            unary {
                                                              unop {
                                                                length: 4096
                                                              }
                                                              exp {
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          doblock {
                                            block {
                                              chunk {
                                                stat {
                                                }
                                                laststat {
                                                  break: 0
                                                  semicolon: true
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      stat {
                                        list {
                                          varlist {
                                            var {
                                              name {
                                                name: ""
                                                num: 127
                                              }
                                            }
                                            vars {
                                            }
                                          }
                                          explist {
                                            expressions {
                                              number: 6.63123684676648e-316
                                            }
                                            expressions {
                                              prefixexp {
                                                functioncall {
                                                  prefArgs {
                                                    prefixexp {
                                                    }
                                                    args {
                                                      str: "\'"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            expressions {
                                              str: "debug.traceback"
                                            }
                                            expressions {
                                              unary {
                                                unop {
                                                }
                                                exp {
                                                  nil: 4
                                                }
                                              }
                                            }
                                            expressions {
                                              tableconstructor {
                                              }
                                            }
                                            expressions {
                                            }
                                            expressions {
                                            }
                                            expressions {
                                              binary {
                                                leftexp {
                                                }
                                                binop {
                                                }
                                                rightexp {
                                                  nil: 0
                                                }
                                              }
                                            }
                                            expressions {
                                              tableconstructor {
                                              }
                                            }
                                            expressions {
                                              str: "debug.traceback"
                                            }
                                            explast {
                                              prefixexp {
                                                functioncall {
                                                  prefArgs {
                                                    prefixexp {
                                                    }
                                                    args {
                                                      str: "\'"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            laststat {
                              break: 0
                              semicolon: true
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              condition {
              }
            }
          }
        }
      }
      condition {
        false: 0
      }
    }
    semicolon: true
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
}
