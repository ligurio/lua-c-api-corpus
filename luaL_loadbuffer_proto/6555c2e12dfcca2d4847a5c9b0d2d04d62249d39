chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
              prefArgs {
                prefixexp {
                  exp {
                    unary {
                      unop {
                        negate: 4743936
                      }
                      exp {
                      }
                    }
                  }
                }
                args {
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
              prefArgs {
                prefixexp {
                  exp {
                    ellipsis: "\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375"
                  }
                }
                args {
                }
              }
            }
          }
          stat {
            call {
              prefArgs {
                prefixexp {
                  exp {
                    ellipsis: "r"
                  }
                }
                args {
                }
              }
            }
          }
          stat {
            ifstat {
              condition {
              }
              first {
                chunk {
                }
              }
            }
            semicolon: true
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    call {
                      prefArgs {
                        prefixexp {
                          exp {
                            unary {
                              unop {
                                negate: 4743936
                              }
                              exp {
                              }
                            }
                          }
                        }
                        args {
                        }
                      }
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                      prefArgs {
                        prefixexp {
                          exp {
                            ellipsis: "\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375"
                          }
                        }
                        args {
                        }
                      }
                    }
                  }
                  stat {
                    call {
                      prefArgs {
                        prefixexp {
                          exp {
                            ellipsis: "r"
                          }
                        }
                        args {
                        }
                      }
                    }
                  }
                  stat {
                    ifstat {
                      condition {
                      }
                      first {
                        chunk {
                        }
                      }
                    }
                    semicolon: true
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                      prefArgs {
                        prefixexp {
                          exp {
                            ellipsis: "\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375"
                          }
                        }
                        args {
                        }
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                          stat {
                            call {
                              prefArgs {
                                prefixexp {
                                  exp {
                                  }
                                }
                                args {
                                }
                              }
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                              prefArgs {
                                prefixexp {
                                  exp {
                                    ellipsis: "\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375\375"
                                  }
                                }
                                args {
                                }
                              }
                            }
                          }
                          stat {
                            call {
                              prefArgs {
                                prefixexp {
                                  exp {
                                    ellipsis: "r"
                                  }
                                }
                                args {
                                }
                              }
                            }
                          }
                          stat {
                            ifstat {
                              condition {
                              }
                              first {
                                chunk {
                                }
                              }
                            }
                            semicolon: true
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            repeatcycle {
                              block {
                                chunk {
                                }
                              }
                              condition {
                              }
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                            call {
                            }
                          }
                          stat {
                          }
                          stat {
                          }
                          stat {
                          }
                          stat {
                            semicolon: true
                          }
                          stat {
                          }
                          stat {
                            forcyclename {
                              name {
                                name: ""
                                num: 0
                              }
                              startexp {
                              }
                              stopexp {
                                nil: 4743936
                              }
                              stepexp {
                              }
                              doblock {
                                block {
                                  chunk {
                                    stat {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      condition {
                        nil: 0
                      }
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                    call {
                    }
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                    semicolon: true
                  }
                  stat {
                  }
                  stat {
                    forcyclename {
                      name {
                        name: ""
                        num: 0
                      }
                      startexp {
                      }
                      stopexp {
                        number: 45
                      }
                      stepexp {
                      }
                      doblock {
                        block {
                          chunk {
                            stat {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              condition {
                nil: 0
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
          }
          stat {
          }
          stat {
            semicolon: true
          }
          stat {
          }
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
              }
              stopexp {
                number: 45
              }
              stepexp {
              }
              doblock {
                block {
                  chunk {
                    stat {
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
        nil: 0
      }
    }
  }
}
