chunk {
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 127
        }
        names {
          name: ""
          num: 127
        }
      }
      expressions {
        expressions {
          prefixexp {
            var {
              name {
                name: "pcall"
                num: 0
              }
            }
          }
        }
        explast {
          prefixexp {
            var {
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: ""
                    num: 127
                  }
                  names {
                    name: ""
                    num: 0
                  }
                }
                expressions {
                  expressions {
                    prefixexp {
                    }
                  }
                  explast {
                    prefixexp {
                      var {
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  binary {
                    leftexp {
                      unary {
                        unop {
                          length: 0
                        }
                        exp {
                          str: "__________\376_"
                        }
                      }
                    }
                    binop {
                      mult: 0
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              ellipsis: "\'%8<<\'<9"
                            }
                            binop {
                              mod: 0
                            }
                            rightexp {
                              str: "\'%8<<debug.getlocal\'<9"
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                          str: "\'&~packqge.ioeload\'"
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        block {
                          block {
                            chunk {
                              laststat {
                              }
                            }
                          }
                        }
                      }
                      stat {
                        block {
                          block {
                            chunk {
                              laststat {
                                break: 134219008
                              }
                            }
                          }
                        }
                      }
                      stat {
                      }
                      stat {
                        localfunc {
                          name {
                            name: ""
                            num: 0
                          }
                          funcbody {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  laststat {
    semicolon: true
  }
}
