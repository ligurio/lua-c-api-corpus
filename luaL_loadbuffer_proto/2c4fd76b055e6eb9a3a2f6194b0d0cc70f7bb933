chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            list {
              varlist {
                var {
                }
                vars {
                }
              }
              explist {
                expressions {
                  prefixexp {
                    functioncall {
                    }
                  }
                }
                explast {
                  binary {
                    leftexp {
                      prefixexp {
                        var {
                          name {
                            name: "xpcall"
                            num: 0
                          }
                        }
                      }
                    }
                    binop {
                      concat: 706748416
                    }
                    rightexp {
                    }
                  }
                }
              }
            }
          }
          laststat {
          }
        }
      }
      condition {
        prefixexp {
        }
      }
    }
    semicolon: true
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            function {
              body {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          binop {
            concat: 6513008
          }
          rightexp {
            prefixexp {
              functioncall {
                namedArgs {
                  prefixexp {
                  }
                  name {
                    name: ""
                    num: 0
                  }
                  args {
                    explist {
                      explist {
                        expressions {
                          binary {
                            leftexp {
                              ellipsis: ""
                            }
                            binop {
                              concat: 2752512
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                                }
                                binop {
                                  concat: 2752512
                                }
                                rightexp {
                                  binary {
                                    leftexp {
                                      binary {
                                        leftexp {
                                          str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                                        }
                                        binop {
                                          concat: 2752512
                                        }
                                        rightexp {
                                          ellipsis: "\000\'>io.openGGGGG\'\000\000&&\'>\'\000\000&\'>\'"
                                        }
                                      }
                                    }
                                    binop {
                                      less: 1073742080
                                    }
                                    rightexp {
                                      unary {
                                        unop {
                                          negate: 0
                                        }
                                        exp {
                                          unary {
                                            unop {
                                            }
                                            exp {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          binary {
                            leftexp {
                              ellipsis: ""
                            }
                            binop {
                              concat: 2752512
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                                }
                                binop {
                                  concat: 2752512
                                }
                                rightexp {
                                  binary {
                                    leftexp {
                                      binary {
                                        leftexp {
                                          str: "\000\'>io.open\'.\000&&\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\363\'>\'\000\000&\'>\'"
                                        }
                                        binop {
                                          concat: 2752512
                                        }
                                        rightexp {
                                          ellipsis: "\000\'>io.openGGGGG\'\000\000&&\'>\'\000\000&\'>\'"
                                        }
                                      }
                                    }
                                    binop {
                                      less: 1073742080
                                    }
                                    rightexp {
                                      unary {
                                        unop {
                                          negate: 0
                                        }
                                        exp {
                                          unary {
                                            unop {
                                            }
                                            exp {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        explast {
                          tableconstructor {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: "\\001\\010"
          num: 0
        }
      }
    }
  }
  laststat {
  }
}
