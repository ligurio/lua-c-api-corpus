chunk {
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            list {
              varlist {
                var {
                }
              }
              explist {
                expressions {
                  function {
                    body {
                      block {
                        chunk {
                        }
                      }
                    }
                  }
                }
                expressions {
                  function {
                    body {
                      block {
                        chunk {
                        }
                      }
                    }
                  }
                }
                expressions {
                  function {
                    body {
                      parlist {
                      }
                      block {
                        chunk {
                        }
                      }
                    }
                  }
                }
                expressions {
                  function {
                    body {
                      block {
                        chunk {
                        }
                      }
                    }
                  }
                }
                expressions {
                  function {
                    body {
                      block {
                        chunk {
                        }
                      }
                    }
                  }
                }
                explast {
                  nil: 0
                }
              }
            }
          }
        }
      }
      condition {
        tableconstructor {
          fieldlist {
            firstField {
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    semicolon: false
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                  unary {
                    unop {
                      not: 16711680
                    }
                    exp {
                      unary {
                        unop {
                          not: 687865856
                        }
                        exp {
                          ellipsis: "\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
  }
  laststat {
    explist {
      explist {
        explast {
          prefixexp {
            functioncall {
              prefArgs {
                prefixexp {
                  var {
                  }
                }
                args {
                }
              }
            }
          }
        }
      }
    }
  }
}
