chunk {
  stat {
    forcyclename {
      name {
        name: "\\001\\000"
        num: 7424
      }
      startexp {
        tableconstructor {
          fieldlist {
            firstField {
            }
            fields {
              field {
                exprassign {
                  key {
                  }
                  value {
                    binary {
                      leftexp {
                        unary {
                          unop {
                            negate: 150994945
                          }
                          exp {
                            str: "\'<6636;3>=32.<\'<8"
                          }
                        }
                      }
                      binop {
                        mod: 536870912
                      }
                      rightexp {
                        str: "\'<6636;3>=32.<\'<8"
                      }
                    }
                  }
                }
              }
              sep {
                comma: 0
              }
            }
            fields {
              field {
              }
              sep {
                comma: 2048
              }
            }
            fields {
              field {
                exprassign {
                  key {
                  }
                  value {
                    binary {
                      leftexp {
                        unary {
                          unop {
                          }
                          exp {
                            str: "\'<6636;3~=32.<\'<8"
                          }
                        }
                      }
                      binop {
                        mod: 536870912
                      }
                      rightexp {
                        number: 6.81701509155167e-313
                      }
                    }
                  }
                }
              }
              sep {
              }
            }
            fields {
              field {
                exprassign {
                  key {
                  }
                  value {
                    binary {
                      leftexp {
                        unary {
                          unop {
                          }
                          exp {
                            str: "\'<6636;3~=32.<\'<8"
                          }
                        }
                      }
                      binop {
                        mod: 536870912
                      }
                      rightexp {
                        str: "\'<6636;3>=32.<\'<8"
                      }
                    }
                  }
                }
              }
              sep {
              }
            }
          }
        }
      }
      stopexp {
        tableconstructor {
          fieldlist {
            firstField {
            }
            fields {
              field {
                exprassign {
                  key {
                  }
                  value {
                    binary {
                      leftexp {
                        number: 6.81701509155167e-313
                      }
                      binop {
                        mod: 536870912
                      }
                      rightexp {
                        str: "\'<6636;3>=32.<\'<8"
                      }
                    }
                  }
                }
              }
              sep {
                semicolon: 1
              }
            }
            fields {
              field {
              }
              sep {
                comma: 2048
              }
            }
            fields {
              field {
              }
              sep {
                comma: 2048
              }
            }
            fields {
              field {
                exprassign {
                  key {
                  }
                  value {
                  }
                }
              }
              sep {
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
}
