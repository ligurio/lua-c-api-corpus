chunk {
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        number: 3.6842187509576013e+180
      }
      stopexp {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
            binary {
              leftexp {
              }
              binop {
                mod: 16384
              }
              rightexp {
                number: 6.07700744384733e-322
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
          var {
            name {
              name: "load"
              num: 16776448
            }
          }
        }
        args {
          explist {
            explist {
              expressions {
              }
              expressions {
                nil: 0
              }
              expressions {
                nil: 0
              }
              expressions {
                true: 0
              }
              expressions {
                binary {
                  leftexp {
                    number: 6.07700744384733e-322
                  }
                  binop {
                    mult: 117440512
                  }
                  rightexp {
                    false: 704645120
                  }
                }
              }
              expressions {
                number: 3.6842187509576013e+180
              }
              expressions {
                false: 2555904
              }
              explast {
              }
            }
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
          var {
            name {
              name: "~pcall"
              num: 0
            }
          }
        }
        args {
          str: "select"
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
          functioncall {
            prefArgs {
              prefixexp {
                var {
                  name {
                    name: "load"
                    num: 0
                  }
                }
              }
              args {
                explist {
                  explist {
                    explast {
                      function {
                        body {
                          block {
                            chunk {
                              stat {
                                func {
                                  name {
                                    firstname {
                                      name: ""
                                      num: 0
                                    }
                                  }
                                  body {
                                    block {
                                      chunk {
                                      }
                                    }
                                  }
                                }
                              }
                              stat {
                                call {
                                }
                                semicolon: true
                              }
                              stat {
                                list {
                                  varlist {
                                    var {
                                    }
                                  }
                                  explist {
                                    expressions {
                                    }
                                    expressions {
                                      prefixexp {
                                        functioncall {
                                          prefArgs {
                                            prefixexp {
                                            }
                                            args {
                                              str: "\'"
                                            }
                                          }
                                        }
                                      }
                                    }
                                    expressions {
                                    }
                                    expressions {
                                      tableconstructor {
                                        fieldlist {
                                          firstField {
                                            exprassign {
                                              key {
                                                str: "io.type"
                                              }
                                              value {
                                                tableconstructor {
                                                  fieldlist {
                                                    firstField {
                                                    }
                                                    fields {
                                                      field {
                                                        namedassign {
                                                          name {
                                                            name: "?\000\000\000\000\000\000\000"
                                                            num: 0
                                                          }
                                                          value {
                                                            str: "string.lower"
                                                          }
                                                        }
                                                      }
                                                      sep {
                                                        semicolon: 1667719007
                                                      }
                                                    }
                                                    fields {
                                                      field {
                                                        namedassign {
                                                          name {
                                                            name: ""
                                                            num: 0
                                                          }
                                                          value {
                                                            str: "string.lower"
                                                          }
                                                        }
                                                      }
                                                      sep {
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          fields {
                                            field {
                                              exprassign {
                                                key {
                                                  tableconstructor {
                                                    fieldlist {
                                                      firstField {
                                                      }
                                                      fields {
                                                        field {
                                                        }
                                                        sep {
                                                        }
                                                      }
                                                      lastSep {
                                                      }
                                                    }
                                                  }
                                                }
                                                value {
                                                  str: "package.searchpath"
                                                }
                                              }
                                            }
                                            sep {
                                            }
                                          }
                                        }
                                      }
                                    }
                                    expressions {
                                      tableconstructor {
                                      }
                                    }
                                    expressions {
                                      tableconstructor {
                                        fieldlist {
                                          firstField {
                                            expression {
                                              prefixexp {
                                                var {
                                                  indexname {
                                                    prefixexp {
                                                    }
                                                    Name: "="
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          fields {
                                            field {
                                              expression {
                                                str: "io.output"
                                              }
                                            }
                                            sep {
                                            }
                                          }
                                          lastSep {
                                          }
                                        }
                                      }
                                    }
                                    expressions {
                                    }
                                    expressions {
                                      str: "tpio.output"
                                    }
                                    expressions {
                                      tableconstructor {
                                      }
                                    }
                                    explast {
                                      prefixexp {
                                        functioncall {
                                          prefArgs {
                                            prefixexp {
                                              exp {
                                                unary {
                                                  unop {
                                                    not: 0
                                                  }
                                                  exp {
                                                  }
                                                }
                                              }
                                            }
                                            args {
                                              str: "\'"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              stat {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        name {
          name: ""
          num: 0
        }
        args {
        }
      }
    }
  }
  stat {
    call {
    }
    semicolon: false
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          explist {
            explist {
              explast {
                ellipsis: "@"
              }
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
}
