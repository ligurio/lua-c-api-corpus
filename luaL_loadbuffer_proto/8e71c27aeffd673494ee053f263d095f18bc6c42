chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        number: 2.00006103515625
      }
      stopexp {
        number: 16.000000000029104
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: "?\000\000\000"
                  num: 0
                }
                startexp {
                  prefixexp {
                  }
                }
                stopexp {
                  prefixexp {
                    var {
                      name {
                        name: "local"
                        num: 0
                      }
                    }
                  }
                }
                stepexp {
                  number: -0.28124987985938776
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        forcyclename {
                          name {
                            name: ""
                            num: 0
                          }
                          startexp {
                          }
                          stopexp {
                            number: 4
                          }
                          stepexp {
                            prefixexp {
                              functioncall {
                                namedArgs {
                                  prefixexp {
                                  }
                                  name {
                                    name: ""
                                    num: 0
                                  }
                                  args {
                                  }
                                }
                              }
                            }
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
}
