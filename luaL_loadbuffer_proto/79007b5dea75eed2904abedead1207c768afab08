chunk {
  stat {
    whilecycle {
      condition {
        unary {
          unop {
            negate: 2105376
          }
          exp {
            binary {
              leftexp {
                prefixexp {
                  exp {
                    binary {
                      leftexp {
                      }
                      binop {
                        or: 0
                      }
                      rightexp {
                      }
                    }
                  }
                }
              }
              binop {
                sub: 1684957530
              }
              rightexp {
                binary {
                  leftexp {
                  }
                  binop {
                    or: 537526272
                  }
                  rightexp {
                    unary {
                      unop {
                        length: 0
                      }
                      exp {
                        binary {
                          leftexp {
                          }
                          binop {
                            concat: 8
                          }
                          rightexp {
                            binary {
                              leftexp {
                                binary {
                                  leftexp {
                                  }
                                  binop {
                                    concat: 8
                                  }
                                  rightexp {
                                  }
                                }
                              }
                              binop {
                                concat: 0
                              }
                              rightexp {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                      fields {
                        field {
                        }
                        sep {
                          semicolon: 687865856
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
            str: "math.min"
          }
          binop {
            add: 8192
          }
          rightexp {
            binary {
              leftexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
              binop {
                lessEqual: 8224
              }
              rightexp {
                str: "\'-8<table.pack\'\'/8<\'<8<8"
              }
            }
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: "\311\311\311"
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      stepexp {
        tableconstructor {
          fieldlist {
            firstField {
            }
            fields {
              field {
                namedassign {
                  name {
                    name: ""
                    num: 0
                  }
                  value {
                  }
                }
              }
              sep {
                semicolon: 687865856
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
}
