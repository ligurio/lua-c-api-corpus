chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            stat {
              call {
                prefArgs {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          exp {
                            number: 2.13031636536344e-312
                          }
                        }
                        args {
                          str: "\'\r\nutf8.codes \'"
                        }
                      }
                    }
                  }
                  args {
                    str: "\'\r\nutf8.codes \'"
                  }
                }
              }
              semicolon: false
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          functioncall {
                            prefArgs {
                              prefixexp {
                              }
                              args {
                                str: "\'\r\nutf8.codes \'"
                              }
                            }
                          }
                        }
                        args {
                          str: ""
                        }
                      }
                    }
                  }
                  args {
                    str: "\'\r\nutf8.codes \'"
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    whilecycle {
      condition {
        true: 0
      }
      doblock {
        block {
          chunk {
            stat {
              localnames {
                namelist {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                explist {
                  expressions {
                    ellipsis: "\000\000\000\007"
                  }
                  explast {
                  }
                }
              }
              semicolon: false
            }
            stat {
              block {
                block {
                  chunk {
                    stat {
                      call {
                        prefArgs {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  exp {
                                    number: 2.13031636536344e-312
                                  }
                                }
                                args {
                                  str: "\'\r\nutf8.codes \'"
                                }
                              }
                            }
                          }
                          args {
                            str: "\'\r\nutf8.codes \'"
                          }
                        }
                      }
                      semicolon: false
                    }
                    stat {
                      call {
                        prefArgs {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  functioncall {
                                    prefArgs {
                                      prefixexp {
                                      }
                                      args {
                                        str: "\'\r\nutf8.codes \'"
                                      }
                                    }
                                  }
                                }
                                args {
                                  str: ""
                                }
                              }
                            }
                          }
                          args {
                            str: "\'\r\nutf8.codes \'"
                          }
                        }
                      }
                      semicolon: true
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        unary {
          unop {
            length: 186
          }
          exp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              call {
                prefArgs {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          exp {
                            number: 2.13031636536344e-312
                          }
                        }
                        args {
                          str: "\'\r\nutf8.codes \'"
                        }
                      }
                    }
                  }
                  args {
                    str: "\'\r\nutf8.codes \'"
                  }
                }
              }
              semicolon: false
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          functioncall {
                            prefArgs {
                              prefixexp {
                              }
                              args {
                                str: "\'\r\nutf8.codes \'"
                              }
                            }
                          }
                        }
                        args {
                          str: ""
                        }
                      }
                    }
                  }
                  args {
                    str: "\'\r\nutf8.codes \'"
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: false
  }
}
