chunk {
  stat {
    whilecycle {
      condition {
        str: "counter_8"
      }
      doblock {
        block {
          chunk {
            stat {
              semicolon: true
            }
            stat {
              ifstat {
                condition {
                  unary {
                    unop {
                    }
                    exp {
                      prefixexp {
                      }
                    }
                  }
                }
                first {
                  chunk {
                  }
                }
              }
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                      list {
                        varlist {
                          var {
                          }
                        }
                        explist {
                          expressions {
                            number: 0
                          }
                          explast {
                          }
                        }
                      }
                      semicolon: true
                    }
                    stat {
                      call {
                      }
                    }
                  }
                }
                condition {
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            ifstat {
              condition {
                unary {
                  unop {
                  }
                  exp {
                    prefixexp {
                    }
                  }
                }
              }
              first {
                chunk {
                }
              }
            }
          }
        }
      }
      condition {
        str: "\'<mathn<7<<7<\'<9"
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            explist {
              explist {
                expressions {
                  number: 3.7857669957336791e-270
                }
                explast {
                }
              }
            }
            semicolon: false
          }
        }
      }
      condition {
        nil: 1
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
        }
      }
      explist {
        expressions {
          ellipsis: "rawlen"
        }
        expressions {
          number: -35651608.12500108
        }
        expressions {
          str: "\'<mathn<7<<7<\'<9"
        }
        expressions {
          number: -35651608.12500108
        }
        explast {
          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: "LUA_CPATH_5_3"
          num: 0
        }
      }
      body {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            list {
              varlist {
                var {
                }
                vars {
                }
              }
              explist {
                expressions {
                  ellipsis: "rawlen"
                }
                expressions {
                  number: -35651608.12500108
                }
                expressions {
                  str: "\'<mathn<7<<7<\'<9"
                }
                expressions {
                  number: -35651608.12500108
                }
                explast {
                  str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                }
              }
            }
          }
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        prefixexp {
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: true
          }
          stat {
            localnames {
              namelist {
                firstname {
                  name: ""
                  num: 0
                }
                names {
                  name: "counter_8"
                  num: 0
                }
              }
              explist {
                expressions {
                }
                explast {
                  number: -35651608.12500108
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    list {
                      varlist {
                        var {
                          indexname {
                            prefixexp {
                            }
                            Name: "\000\000"
                          }
                        }
                      }
                      explist {
                        expressions {
                          ellipsis: ""
                        }
                        expressions {
                          number: -35651608.12500108
                        }
                        expressions {
                          str: "\'<mathn<7<<7<\'<9"
                        }
                        expressions {
                        }
                        explast {
                          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                        }
                      }
                    }
                    semicolon: false
                  }
                  stat {
                    call {
                      prefArgs {
                        prefixexp {
                          var {
                            name {
                              name: ""
                              num: 0
                            }
                          }
                        }
                        args {
                          explist {
                            explist {
                              expressions {
                              }
                              explast {
                                function {
                                  body {
                                    parlist {
                                    }
                                    block {
                                      chunk {
                                        stat {
                                          semicolon: true
                                        }
                                        stat {
                                          semicolon: true
                                        }
                                        stat {
                                          localfunc {
                                            name {
                                              name: ""
                                              num: 0
                                            }
                                            funcbody {
                                              block {
                                                chunk {
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    semicolon: true
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                        str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                      }
                    }
                  }
                }
              }
              condition {
                unary {
                  unop {
                  }
                  exp {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                            var {
                              indexexpr {
                                prefixexp {
                                }
                                exp {
                                  nil: 536870912
                                }
                              }
                            }
                          }
                          args {
                            explist {
                              explist {
                                expressions {
                                  prefixexp {
                                    var {
                                    }
                                  }
                                }
                                expressions {
                                  prefixexp {
                                    var {
                                      name {
                                        name: "collectgarbage"
                                        num: 0
                                      }
                                    }
                                  }
                                }
                                explast {
                                  ellipsis: ""
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        true: 52
      }
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
        unary {
          unop {
          }
          exp {
            prefixexp {
            }
          }
        }
      }
      first {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    list {
                      varlist {
                        var {
                        }
                        vars {
                          name {
                            name: "collectgarbage"
                            num: 0
                          }
                        }
                        vars {
                        }
                      }
                      explist {
                        expressions {
                          ellipsis: "rawlen"
                        }
                        expressions {
                          number: -35651608.12500108
                        }
                        expressions {
                          str: "\'<mathn<7<<7<\'<9"
                        }
                        expressions {
                          number: -35651608.12500108
                        }
                        explast {
                          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                        }
                      }
                    }
                  }
                  laststat {
                    semicolon: true
                  }
                }
              }
              condition {
                prefixexp {
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                true: 52
              }
            }
            semicolon: true
          }
          stat {
            semicolon: false
          }
          laststat {
            semicolon: false
          }
        }
      }
      condition {
        prefixexp {
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
          indexname {
            prefixexp {
            }
            Name: "\000\000"
          }
        }
      }
      explist {
        explast {
          binary {
            leftexp {
              prefixexp {
              }
            }
            binop {
              mult: 538976260
            }
            rightexp {
              binary {
                leftexp {
                  binary {
                    leftexp {
                      prefixexp {
                        var {
                          indexexpr {
                            prefixexp {
                            }
                            exp {
                              true: 4
                            }
                          }
                        }
                      }
                    }
                    binop {
                      mult: 2105376
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              prefixexp {
                              }
                            }
                            binop {
                              exp: 16777216
                            }
                            rightexp {
                            }
                          }
                        }
                        binop {
                          add: 2
                        }
                        rightexp {
                          binary {
                            leftexp {
                              prefixexp {
                                functioncall {
                                  prefArgs {
                                    prefixexp {
                                      var {
                                        name {
                                          name: "xpcall"
                                          num: 0
                                        }
                                      }
                                    }
                                    args {
                                      explist {
                                        explist {
                                          expressions {
                                            prefixexp {
                                              var {
                                                name {
                                                  name: "collectgarbage"
                                                  num: 0
                                                }
                                              }
                                            }
                                          }
                                          expressions {
                                            prefixexp {
                                              var {
                                                name {
                                                  name: "collectgarbage"
                                                  num: 0
                                                }
                                              }
                                            }
                                          }
                                          explast {
                                            ellipsis: ""
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            binop {
                              greater: 8192
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  str: "\302"
                                }
                                binop {
                                  mult: 538976260
                                }
                                rightexp {
                                  nil: 0
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                binop {
                  mod: 2
                }
                rightexp {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        expression {
                        }
                      }
                      fields {
                        field {
                          expression {
                            prefixexp {
                              functioncall {
                                prefArgs {
                                  prefixexp {
                                    var {
                                      name {
                                        name: "xp)all"
                                        num: 0
                                      }
                                    }
                                  }
                                  args {
                                    explist {
                                      explist {
                                        expressions {
                                          prefixexp {
                                            var {
                                              name {
                                                name: "collectgarbage"
                                                num: 0
                                              }
                                            }
                                          }
                                        }
                                        expressions {
                                          tableconstructor {
                                            fieldlist {
                                              firstField {
                                                expression {
                                                  tableconstructor {
                                                    fieldlist {
                                                      firstField {
                                                        expression {
                                                          tableconstructor {
                                                            fieldlist {
                                                              firstField {
                                                                exprassign {
                                                                  key {
                                                                    binary {
                                                                      leftexp {
                                                                        binary {
                                                                          leftexp {
                                                                            number: -207.999999996275
                                                                          }
                                                                          binop {
                                                                            add: 4
                                                                          }
                                                                          rightexp {
                                                                            binary {
                                                                              leftexp {
                                                                                binary {
                                                                                  leftexp {
                                                                                    function {
                                                                                      body {
                                                                                        block {
                                                                                          chunk {
                                                                                            laststat {
                                                                                              break: 4
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                  binop {
                                                                                    greater: 1886679808
                                                                                  }
                                                                                  rightexp {
                                                                                  }
                                                                                }
                                                                              }
                                                                              binop {
                                                                              }
                                                                              rightexp {
                                                                                binary {
                                                                                  leftexp {
                                                                                    str: "\'<coroutane.yiel>>\'<coroutane.yiel>>>>>>>>>>>>>>>>>>>>d"
                                                                                  }
                                                                                  binop {
                                                                                    exp: 1886679808
                                                                                  }
                                                                                  rightexp {
                                                                                    number: 0
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      binop {
                                                                        notEqual: 62464
                                                                      }
                                                                      rightexp {
                                                                      }
                                                                    }
                                                                  }
                                                                  value {
                                                                  }
                                                                }
                                                              }
                                                              fields {
                                                                field {
                                                                  expression {
                                                                    prefixexp {
                                                                      functioncall {
                                                                        prefArgs {
                                                                          prefixexp {
                                                                            var {
                                                                              indexexpr {
                                                                                prefixexp {
                                                                                }
                                                                                exp {
                                                                                  number: 1.29516344663408e-318
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                          args {
                                                                            explist {
                                                                              explist {
                                                                                expressions {
                                                                                }
                                                                                explast {
                                                                                  true: 5
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                                sep {
                                                                }
                                                              }
                                                              fields {
                                                                field {
                                                                  exprassign {
                                                                    key {
                                                                      binary {
                                                                        leftexp {
                                                                          binary {
                                                                            leftexp {
                                                                              number: -207.99993705377011
                                                                            }
                                                                            binop {
                                                                              add: 4
                                                                            }
                                                                            rightexp {
                                                                              binary {
                                                                                leftexp {
                                                                                  binary {
                                                                                    leftexp {
                                                                                      function {
                                                                                        body {
                                                                                          block {
                                                                                            chunk {
                                                                                              laststat {
                                                                                                break: 4
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    binop {
                                                                                      greater: 1886679808
                                                                                    }
                                                                                    rightexp {
                                                                                    }
                                                                                  }
                                                                                }
                                                                                binop {
                                                                                }
                                                                                rightexp {
                                                                                  binary {
                                                                                    leftexp {
                                                                                      str: "\'<coroutane.yiel>>\'<coroutane.yiel>>>>>>>>>>>>>>>>>>>>d"
                                                                                    }
                                                                                    binop {
                                                                                      exp: 1886679808
                                                                                    }
                                                                                    rightexp {
                                                                                      number: 0
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        binop {
                                                                          notEqual: 62464
                                                                        }
                                                                        rightexp {
                                                                        }
                                                                      }
                                                                    }
                                                                    value {
                                                                    }
                                                                  }
                                                                }
                                                                sep {
                                                                  semicolon: 69
                                                                }
                                                              }
                                                              lastSep {
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      fields {
                                                        field {
                                                          expression {
                                                          }
                                                        }
                                                        sep {
                                                        }
                                                      }
                                                      lastSep {
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                              fields {
                                                field {
                                                  expression {
                                                  }
                                                }
                                                sep {
                                                }
                                              }
                                              lastSep {
                                              }
                                            }
                                          }
                                        }
                                        explast {
                                          ellipsis: ""
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        sep {
                        }
                      }
                      fields {
                        field {
                        }
                        sep {
                          semicolon: 69
                        }
                      }
                      lastSep {
                        semicolon: 0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
        lastname {
          name: "require"
          num: 5
        }
      }
      body {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    semicolon: false
  }
  stat {
    semicolon: false
  }
  stat {
    semicolon: true
  }
  stat {
    call {
      prefArgs {
        prefixexp {
          var {
            name {
              name: "xpcall"
              num: 0
            }
          }
        }
        args {
          explist {
            explist {
              expressions {
                prefixexp {
                  var {
                    name {
                      name: "collectgarbage"
                      num: 0
                    }
                  }
                }
              }
              expressions {
                prefixexp {
                  var {
                    name {
                      name: "collectgarbage"
                      num: 0
                    }
                  }
                }
              }
              explast {
                ellipsis: ""
              }
            }
          }
        }
      }
    }
  }
  stat {
  }
  laststat {
  }
}
