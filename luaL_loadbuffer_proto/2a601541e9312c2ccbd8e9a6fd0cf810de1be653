chunk {
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
        }
        name {
          name: "\000\000"
          num: 0
        }
        args {
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
          indexexpr {
            prefixexp {
              var {
                indexexpr {
                  prefixexp {
                    var {
                      indexexpr {
                        prefixexp {
                          var {
                            indexexpr {
                              prefixexp {
                              }
                              exp {
                                str: "\'>utf8~9~1~i\'9~"
                              }
                            }
                          }
                        }
                        exp {
                          str: "\'>utf8~9~1~i\'9~"
                        }
                      }
                    }
                  }
                  exp {
                    str: "\'>utf8~9~1~i\'9~"
                  }
                }
              }
            }
            exp {
              str: "\'>utf8~9~1~i\'9~"
            }
          }
        }
        vars {
          indexexpr {
            prefixexp {
            }
            exp {
              nil: 0
            }
          }
        }
        vars {
        }
        vars {
          name {
            name: "]"
            num: 0
          }
        }
      }
      explist {
        expressions {
          nil: 24
        }
        expressions {
          prefixexp {
            var {
              indexexpr {
                prefixexp {
                  var {
                    indexexpr {
                      prefixexp {
                        var {
                          indexexpr {
                            prefixexp {
                            }
                            exp {
                              str: "\'>utf8~9~1~i\'9~"
                            }
                          }
                        }
                      }
                      exp {
                        str: "\'>utf8~9~1~i\'9~"
                      }
                    }
                  }
                }
                exp {
                  str: "\'>utf8~9~1~i\'9~"
                }
              }
            }
          }
        }
        expressions {
          str: "\'>utf8~9~1~i\'9~"
        }
        explast {
          str: "\'>utf8~9~1~i\'9~"
        }
      }
    }
    semicolon: true
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
          indexexpr {
            prefixexp {
              var {
                indexexpr {
                  prefixexp {
                    var {
                      indexexpr {
                        prefixexp {
                          var {
                            indexexpr {
                              prefixexp {
                              }
                              exp {
                                str: "\'>utf8~9~1~i\'9~"
                              }
                            }
                          }
                        }
                        exp {
                          str: "\'>utf8~9~1~i\'9~"
                        }
                      }
                    }
                  }
                  exp {
                    str: "\'>utf8~9~1~i\'9~"
                  }
                }
              }
            }
            exp {
              str: "\'>utf8~9~1~i\'9~"
            }
          }
        }
        vars {
          indexexpr {
            prefixexp {
            }
            exp {
              nil: 0
            }
          }
        }
        vars {
        }
        vars {
          name {
            name: "]"
            num: 0
          }
        }
      }
      explist {
        expressions {
          nil: 24
        }
        expressions {
          prefixexp {
            exp {
              str: "\'>utf8~9~1~i\'9~"
            }
          }
        }
        expressions {
          str: "\'>utf8~9~1~i\'9~"
        }
        explast {
          str: "\'>utf8~9~1~i\'9~"
        }
      }
    }
  }
  laststat {
    break: 32
    semicolon: false
  }
}
