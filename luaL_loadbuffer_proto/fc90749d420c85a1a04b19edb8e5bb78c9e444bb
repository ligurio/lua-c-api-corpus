chunk {
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: false
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            explist {
              explist {
                expressions {
                  binary {
                    leftexp {
                      prefixexp {
                        var {
                        }
                      }
                    }
                    binop {
                      sub: 2097152000
                    }
                    rightexp {
                      prefixexp {
                        functioncall {
                          namedArgs {
                            prefixexp {
                            }
                            name {
                              name: ""
                              num: 0
                            }
                            args {
                              explist {
                                explist {
                                  expressions {
                                    binary {
                                      leftexp {
                                        prefixexp {
                                          exp {
                                            binary {
                                              leftexp {
                                                number: -567485438885888
                                              }
                                              binop {
                                              }
                                              rightexp {
                                                ellipsis: "\377\377\377\377\377\377\377\377\377\377\377\377"
                                              }
                                            }
                                          }
                                        }
                                      }
                                      binop {
                                        mod: 0
                                      }
                                      rightexp {
                                        prefixexp {
                                          functioncall {
                                            namedArgs {
                                              prefixexp {
                                              }
                                              name {
                                                name: "\001\000\000V"
                                                num: 0
                                              }
                                              args {
                                                explist {
                                                  explist {
                                                    expressions {
                                                      binary {
                                                        leftexp {
                                                          prefixexp {
                                                          }
                                                        }
                                                        binop {
                                                          mod: 0
                                                        }
                                                        rightexp {
                                                          prefixexp {
                                                            functioncall {
                                                              namedArgs {
                                                                prefixexp {
                                                                }
                                                                name {
                                                                  name: "\001\000\000V"
                                                                  num: 0
                                                                }
                                                                args {
                                                                  explist {
                                                                    explist {
                                                                      explast {
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                    explast {
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  explast {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                explast {
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
    semicolon: false
  }
  laststat {
    explist {
      explist {
        explast {
          ellipsis: "\377\377\377\377\377\377\377\377\377\377\377\377"
        }
      }
    }
  }
}
