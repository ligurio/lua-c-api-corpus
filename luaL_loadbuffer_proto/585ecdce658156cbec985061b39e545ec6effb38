chunk {
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
        names {
          name: "math.atan"
          num: 52224
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 6841088
                }
                startexp {
                }
                stopexp {
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 6841088
                }
                startexp {
                }
                stopexp {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                      fields {
                        field {
                          exprassign {
                            key {
                            }
                            value {
                              binary {
                                leftexp {
                                  unary {
                                    unop {
                                      length: 1
                                    }
                                    exp {
                                      str: "\'<6636;3~=32.<\'<8"
                                    }
                                  }
                                }
                                binop {
                                  exp: 2097152
                                }
                                rightexp {
                                  str: "\'<6632.<\'<8"
                                }
                              }
                            }
                          }
                        }
                        sep {
                          semicolon: 1
                        }
                      }
                      fields {
                        field {
                        }
                        sep {
                          comma: 2048
                        }
                      }
                      fields {
                        field {
                          exprassign {
                            key {
                            }
                            value {
                              binary {
                                leftexp {
                                  unary {
                                    unop {
                                      negate: 150994945
                                    }
                                    exp {
                                      str: "\'<6636;3>=32.<\'<8"
                                    }
                                  }
                                }
                                binop {
                                  exp: 2097152
                                }
                                rightexp {
                                  str: "\'<6636;3>=32.<\'<8"
                                }
                              }
                            }
                          }
                        }
                        sep {
                        }
                      }
                      fields {
                        field {
                          exprassign {
                            key {
                            }
                            value {
                              binary {
                                leftexp {
                                }
                                binop {
                                }
                                rightexp {
                                  str: "\'<6636;3>=32.<\'<8"
                                }
                              }
                            }
                          }
                        }
                        sep {
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        list {
                          varlist {
                            var {
                            }
                          }
                          explist {
                            explast {
                            }
                          }
                        }
                      }
                      stat {
                        ifstat {
                          condition {
                          }
                          first {
                            chunk {
                              laststat {
                                break: 0
                              }
                            }
                          }
                          clauses {
                            condition {
                            }
                            block {
                              chunk {
                              }
                            }
                          }
                          clauses {
                            condition {
                            }
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                      stat {
                        forcyclename {
                          name {
                            name: ""
                            num: 6841088
                          }
                          startexp {
                          }
                          stopexp {
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                        semicolon: true
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
}
