chunk {
  stat {
    func {
      name {
        firstname {
          name: "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp\236ppp"
          num: 0
        }
        lastname {
          name: "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
          num: 0
        }
      }
      body {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    semicolon: false
  }
  stat {
    list {
      varlist {
        var {
          indexexpr {
            prefixexp {
            }
            exp {
            }
          }
        }
      }
      explist {
        explast {
          binary {
            leftexp {
              false: 1310720
            }
            binop {
            }
            rightexp {
            }
          }
        }
      }
    }
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
          num: 6513008
        }
        names {
          name: "counter_8"
          num: 1310720
        }
      }
      explist {
        expressions {
          function {
            body {
              block {
                chunk {
                }
              }
            }
          }
        }
        explast {
          number: -709.375
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
          binary {
            leftexp {
              false: 1310720
            }
            binop {
            }
            rightexp {
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    binary {
                      leftexp {
                        unary {
                          unop {
                            negate: 200
                          }
                          exp {
                            str: "\'<coroutane.yiel>>\'<corouuane.yiel>>>>>>>>>LUA_INIT_5_4"
                          }
                        }
                      }
                      binop {
                        add: 536870954
                      }
                      rightexp {
                        unary {
                          unop {
                          }
                          exp {
                            nil: 2919235584
                          }
                        }
                      }
                    }
                  }
                  binop {
                  }
                  rightexp {
                  }
                }
              }
              binop {
                div: 536870954
              }
              rightexp {
                str: "\'<coroutane.yiel>>\'<corouuane.yiel>>>>>>>>>LUA_INIT_5_4"
              }
            }
          }
          binop {
            mult: 0
          }
          rightexp {
            number: -336
          }
        }
      }
    }
  }
  stat {
    semicolon: false
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    semicolon: false
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            break: 16389
            semicolon: false
          }
        }
      }
      condition {
        prefixexp {
          functioncall {
            prefArgs {
              prefixexp {
                var {
                  name {
                    name: "loadjjjjjjjjjjj"
                    num: 0
                  }
                }
              }
              args {
                explist {
                  explist {
                    explast {
                      binary {
                        leftexp {
                          number: -709.375
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                          unary {
                            unop {
                            }
                            exp {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
          stat {
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
            semicolon: false
          }
        }
      }
      last {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 3158016
        }
        names {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              call {
                prefArgs {
                  prefixexp {
                    var {
                      name {
                        name: "load"
                        num: 0
                      }
                    }
                  }
                  args {
                    explist {
                      explist {
                        expressions {
                          unary {
                            unop {
                              length: 0
                            }
                            exp {
                            }
                          }
                        }
                        explast {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                }
                                binop {
                                  concat: 0
                                }
                                rightexp {
                                  true: 0
                                }
                              }
                            }
                            binop {
                              concat: 0
                            }
                            rightexp {
                              unary {
                                unop {
                                }
                                exp {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: false
            }
            stat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  laststat {
  }
}
