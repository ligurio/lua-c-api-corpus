chunk {
  stat {
    call {
    }
  }
  stat {
    semicolon: false
  }
  stat {
    call {
    }
  }
  stat {
    forcyclename {
      name {
        name: "\377\377"
        num: 25348
      }
      startexp {
        true: 1610612736
      }
      stopexp {
        str: ""
      }
      stepexp {
        unary {
          unop {
            length: 25348
          }
          exp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              func {
                name {
                  firstname {
                    name: ""
                    num: 2105376
                  }
                }
                body {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    number: 196608
                  }
                  expressions {
                    number: -0
                  }
                  expressions {
                  }
                  expressions {
                    number: -2.75
                  }
                  expressions {
                    number: 4.75
                  }
                  expressions {
                    number: -3.05175781254146e-05
                  }
                  expressions {
                    number: 2.0004558488724342
                  }
                  expressions {
                    number: -0.011718750000106137
                  }
                  expressions {
                    number: -2.5
                  }
                  expressions {
                    number: -2
                  }
                  expressions {
                    number: 8.4999999749707058
                  }
                  expressions {
                    ellipsis: ""
                  }
                  expressions {
                  }
                  expressions {
                    tableconstructor {
                      fieldlist {
                        firstField {
                        }
                        lastSep {
                          comma: 0
                        }
                      }
                    }
                  }
                  expressions {
                    number: -2.46006546056159e+260
                  }
                  expressions {
                    number: 2.0001220703125
                  }
                  expressions {
                    number: 4
                  }
                  expressions {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                            unary {
                              unop {
                              }
                              exp {
                              }
                            }
                          }
                          binop {
                            div: 0
                          }
                          rightexp {
                            number: 0
                          }
                        }
                      }
                      binop {
                      }
                      rightexp {
                        binary {
                          leftexp {
                            prefixexp {
                              functioncall {
                              }
                            }
                          }
                          binop {
                          }
                          rightexp {
                          }
                        }
                      }
                    }
                  }
                  explast {
                    prefixexp {
                      exp {
                        tableconstructor {
                          fieldlist {
                            firstField {
                            }
                            lastSep {
                              comma: 0
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
}
