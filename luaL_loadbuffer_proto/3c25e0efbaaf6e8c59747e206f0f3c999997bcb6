chunk {
  stat {
    forcyclename {
      name {
        name: "e\036\000\000\000\000\000\000"
        num: 0
      }
      startexp {
        false: 538999552
      }
      stopexp {
        number: 0
      }
      stepexp {
        prefixexp {
          exp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    number: -48.00000000000005
                  }
                  binop {
                    add: 0
                  }
                  rightexp {
                    binary {
                      leftexp {
                        number: 4.4501497084827615e-308
                      }
                      binop {
                        lessEqual: 4294967027
                      }
                      rightexp {
                        unary {
                          unop {
                            not: 0
                          }
                          exp {
                            number: 0
                          }
                        }
                      }
                    }
                  }
                }
              }
              binop {
                concat: 0
              }
              rightexp {
                number: 0
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                  number: 0
                }
                stopexp {
                }
                stepexp {
                  prefixexp {
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        whilecycle {
                          condition {
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                      stat {
                        whilecycle {
                          condition {
                          }
                          doblock {
                            block {
                              chunk {
                                laststat {
                                }
                              }
                            }
                          }
                        }
                      }
                      stat {
                        whilecycle {
                          condition {
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                        semicolon: true
                      }
                      stat {
                        whilecycle {
                          condition {
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                      stat {
                        whilecycle {
                          condition {
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
