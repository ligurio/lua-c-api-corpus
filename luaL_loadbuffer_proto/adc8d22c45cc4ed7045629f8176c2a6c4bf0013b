chunk {
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            stat {
              ifstat {
                condition {
                  ellipsis: "\033"
                }
                first {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    semicolon: false
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
          indexname {
            prefixexp {
            }
            Name: ""
          }
        }
        vars {
        }
      }
      explist {
        expressions {
        }
        expressions {
          ellipsis: "package.preload"
        }
        expressions {
          number: -0.005721518571671691
        }
        expressions {
          function {
            body {
              block {
                chunk {
                  laststat {
                    explist {
                      explist {
                        expressions {
                          number: 163.44938772799651
                        }
                        expressions {
                          number: 163.44938772799651
                        }
                        expressions {
                        }
                        expressions {
                          number: 163.44938772799651
                        }
                        expressions {
                        }
                        expressions {
                          number: -0.0038368449486786416
                        }
                        expressions {
                        }
                        expressions {
                          number: 163.44938772799651
                        }
                        explast {
                          prefixexp {
                            exp {
                              binary {
                                leftexp {
                                  number: 0
                                }
                                binop {
                                  equal: 0
                                }
                                rightexp {
                                  binary {
                                    leftexp {
                                      prefixexp {
                                        exp {
                                          binary {
                                            leftexp {
                                              false: 4
                                            }
                                            binop {
                                              and: 0
                                            }
                                            rightexp {
                                              prefixexp {
                                                functioncall {
                                                  prefArgs {
                                                    prefixexp {
                                                      functioncall {
                                                      }
                                                    }
                                                    args {
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    binop {
                                    }
                                    rightexp {
                                      false: 1
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        expressions {
          str: "@"
        }
        expressions {
          number: -0.0057216195508889012
        }
        expressions {
        }
        expressions {
        }
        expressions {
          nil: 249
        }
        expressions {
        }
        expressions {
          number: -0.005721518571671691
        }
        explast {
          function {
            body {
              block {
                chunk {
                  laststat {
                    explist {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
        }
        vars {
        }
      }
      explist {
        expressions {
        }
        expressions {
        }
        expressions {
          number: 163.44938772799651
        }
        expressions {
          number: 14.196055482999782
        }
        expressions {
        }
        expressions {
          number: -0.005721518571671691
        }
        expressions {
        }
        expressions {
          false: 2048
        }
        expressions {
        }
        expressions {
          number: -8.635755542818279e-08
        }
        expressions {
          number: -0.0057216195508889012
        }
        explast {
          prefixexp {
            exp {
              unary {
                unop {
                }
                exp {
                  nil: 117440512
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  laststat {
    explist {
      explist {
        expressions {
        }
        expressions {
          number: 163.44938772799651
        }
        expressions {
        }
        expressions {
          number: 6.753686970367653e-67
        }
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
              }
              lastSep {
                comma: 4294967292
              }
            }
          }
        }
        expressions {
        }
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
              }
              lastSep {
                comma: 4294967292
              }
            }
          }
        }
        expressions {
          nil: 2
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          prefixexp {
            exp {
              unary {
                unop {
                }
                exp {
                  nil: 117440512
                }
              }
            }
          }
        }
        explast {
        }
      }
    }
  }
}
