chunk {
  stat {
    forcyclename {
      name {
        name: "__le"
        num: 0
      }
      startexp {
        number: -1418.75
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            stat {
              call {
                prefArgs {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                        }
                        args {
                          explist {
                            explist {
                              expressions {
                                function {
                                  body {
                                    parlist {
                                      namelist {
                                        namelist {
                                          firstname {
                                            name: ""
                                            num: 0
                                          }
                                        }
                                        ellipsis: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                                      }
                                    }
                                    block {
                                      chunk {
                                      }
                                    }
                                  }
                                }
                              }
                              explast {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  args {
                    tableconstructor {
                      fieldlist {
                        firstField {
                          exprassign {
                            key {
                              number: 14.152835291482178
                            }
                            value {
                            }
                          }
                        }
                        fields {
                          field {
                            exprassign {
                              key {
                                number: 14.152835291482178
                              }
                              value {
                              }
                            }
                          }
                          sep {
                            semicolon: 1969775360
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              whilecycle {
                condition {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                }
                                binop {
                                  add: 546709536
                                }
                                rightexp {
                                  str: "\'<<66<66*\'<"
                                }
                              }
                            }
                            binop {
                              div: 8
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  binary {
                                    leftexp {
                                    }
                                    binop {
                                      add: 0
                                    }
                                    rightexp {
                                      str: "\'<<66<66*\'<"
                                    }
                                  }
                                }
                                binop {
                                  add: 0
                                }
                                rightexp {
                                  str: "\'<<66<66*\'<"
                                }
                              }
                            }
                          }
                        }
                        binop {
                          div: 8
                        }
                        rightexp {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                }
                                binop {
                                  add: 0
                                }
                                rightexp {
                                  str: "\'<<66<66*\'<"
                                }
                              }
                            }
                            binop {
                              add: 0
                            }
                            rightexp {
                              str: "\'<<66<66*\'<"
                            }
                          }
                        }
                      }
                    }
                    binop {
                      div: 8
                    }
                    rightexp {
                      binary {
                        leftexp {
                        }
                        binop {
                          add: 0
                        }
                        rightexp {
                          str: "\'<<66<66*\'<"
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                  }
                  args {
                    tableconstructor {
                      fieldlist {
                        firstField {
                          exprassign {
                            key {
                              number: 14.152835291482178
                            }
                            value {
                            }
                          }
                        }
                        fields {
                          field {
                            exprassign {
                              key {
                                ellipsis: ""
                              }
                              value {
                              }
                            }
                          }
                          sep {
                            semicolon: 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
    semicolon: true
  }
  stat {
    semicolon: false
  }
}
