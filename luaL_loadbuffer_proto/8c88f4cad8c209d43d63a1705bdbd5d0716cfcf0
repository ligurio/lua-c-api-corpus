chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
        number: 76
      }
      stepexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: ""
          num: 0
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 4
      }
      startexp {
      }
      stopexp {
        number: 3.125
      }
      stepexp {
        number: -0
      }
      doblock {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                            laststat {
                              explist {
                                explist {
                                  explast {
                                    ellipsis: "\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    str: "((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
                  }
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                            stat {
                              semicolon: true
                            }
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    prefixexp {
                    }
                  }
                  explast {
                    function {
                      body {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
