chunk {
  stat {
    semicolon: true
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          explist {
            explist {
              expressions {
                binary {
                  leftexp {
                    ellipsis: "]"
                  }
                  binop {
                    or: 0
                  }
                  rightexp {
                  }
                }
              }
              expressions {
                ellipsis: "]"
              }
              expressions {
                binary {
                  leftexp {
                    ellipsis: "]"
                  }
                  binop {
                    or: 0
                  }
                  rightexp {
                  }
                }
              }
              explast {
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          explist {
          }
        }
      }
    }
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
        tableconstructor {
          fieldlist {
            firstField {
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          explist {
            explist {
              expressions {
                binary {
                  leftexp {
                  }
                  binop {
                    or: 0
                  }
                  rightexp {
                  }
                }
              }
              expressions {
                ellipsis: "]"
              }
              expressions {
                binary {
                  leftexp {
                    ellipsis: "]"
                  }
                  binop {
                    or: 46
                  }
                  rightexp {
                  }
                }
              }
              explast {
              }
            }
          }
        }
      }
    }
  }
  stat {
    semicolon: false
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          explist {
            explist {
              expressions {
                binary {
                  leftexp {
                  }
                  binop {
                    or: 0
                  }
                  rightexp {
                  }
                }
              }
              expressions {
                ellipsis: "]"
              }
              expressions {
                binary {
                  leftexp {
                    ellipsis: "]"
                  }
                  binop {
                    or: 46
                  }
                  rightexp {
                  }
                }
              }
              explast {
              }
            }
          }
        }
      }
    }
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
        }
        name {
          name: ""
          num: 0
        }
        args {
        }
      }
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
    semicolon: false
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "\\377\\377\\377\\377\\377\\377\\377\\006"
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
}
