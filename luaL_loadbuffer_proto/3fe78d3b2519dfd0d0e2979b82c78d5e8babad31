chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 1900544
      }
      startexp {
        function {
          body {
            block {
              chunk {
                stat {
                  whilecycle {
                    condition {
                    }
                    doblock {
                      block {
                        chunk {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      stopexp {
        binary {
          leftexp {
            number: 1.35807730621777e-312
          }
          binop {
            mult: 0
          }
          rightexp {
            true: 0
          }
        }
      }
      stepexp {
        unary {
          unop {
            negate: 36
          }
          exp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 1900544
                }
                startexp {
                  binary {
                    leftexp {
                      tableconstructor {
                      }
                    }
                    binop {
                      div: 6386292
                    }
                    rightexp {
                      number: 2.07226151461452e-317
                    }
                  }
                }
                stopexp {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                            }
                            binop {
                            }
                            rightexp {
                              str: "\'-8<table.pack\'\'/8<\'<8<8"
                            }
                          }
                        }
                        binop {
                          div: 16
                        }
                        rightexp {
                          str: "\'-8<table.pack\'\'/8<\'<8<8"
                        }
                      }
                    }
                    binop {
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                            }
                            binop {
                            }
                            rightexp {
                              str: "\'-8<table.pack\'\'/8<\'<8<8"
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                        }
                      }
                    }
                  }
                }
                stepexp {
                  unary {
                    unop {
                      negate: 36
                    }
                    exp {
                      str: "\343\'*8,__<\'"
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        list {
                          varlist {
                            var {
                            }
                          }
                          explist {
                            expressions {
                              ellipsis: ""
                            }
                            expressions {
                              false: 8192
                            }
                            expressions {
                              unary {
                                unop {
                                  negate: 36
                                }
                                exp {
                                  str: "\'*8,__<\'"
                                }
                              }
                            }
                            expressions {
                              prefixexp {
                              }
                            }
                            explast {
                            }
                          }
                        }
                        semicolon: true
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              semicolon: true
            }
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    semicolon: false
  }
  laststat {
  }
}
