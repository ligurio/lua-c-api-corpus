chunk {
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        parlist {
          ellipsis: "."
        }
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                          }
                        }
                        condition {
                          ellipsis: ""
                        }
                      }
                      semicolon: true
                    }
                    stat {
                      call {
                      }
                      semicolon: true
                    }
                  }
                }
                condition {
                  binary {
                    leftexp {
                      prefixexp {
                        exp {
                          number: 118.78498777467757
                        }
                      }
                    }
                    binop {
                      mod: 0
                    }
                    rightexp {
                      binary {
                        leftexp {
                        }
                        binop {
                        }
                        rightexp {
                          number: 0
                        }
                      }
                    }
                  }
                }
              }
            }
            laststat {
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
          false: 0
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
}
