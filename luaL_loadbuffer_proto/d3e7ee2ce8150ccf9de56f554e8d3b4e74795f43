chunk {
  stat {
    localfunc {
      name {
        name: "/"
        num: 0
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            prefixexp {
              functioncall {
              }
            }
          }
          binop {
          }
          rightexp {
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            prefixexp {
              functioncall {
                prefArgs {
                  prefixexp {
                  }
                  args {
                  }
                }
              }
            }
          }
          binop {
          }
          rightexp {
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 2162688
        }
      }
      body {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 7
      }
      startexp {
      }
      stopexp {
      }
      stepexp {
        number: -0
      }
      doblock {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                  vars {
                    indexname {
                      prefixexp {
                      }
                      Name: "\320"
                    }
                  }
                }
                explist {
                  explast {
                    str: "\000"
                  }
                }
              }
            }
            laststat {
              explist {
                explist {
                  explast {
                    str: "\000"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
