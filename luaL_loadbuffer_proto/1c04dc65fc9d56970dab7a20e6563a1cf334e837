chunk {
  stat {
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: ""
          num: 0
        }
      }
      explist {
        explast {
          binary {
            leftexp {
            }
            binop {
              mult: 538968064
            }
            rightexp {
            }
          }
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: "\030\000\000\000"
        num: 0
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        parlist {
          ellipsis: "\001\000"
        }
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
              prefArgs {
                prefixexp {
                  var {
                    name {
                      name: "load"
                      num: 0
                    }
                  }
                }
                args {
                  explist {
                    explist {
                      explast {
                        prefixexp {
                          var {
                            name {
                              name: "rawlen"
                              num: 0
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 8388608
        }
      }
      body {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
                condition {
                }
              }
              semicolon: true
            }
            stat {
              localfunc {
                name {
                  name: ""
                  num: 0
                }
                funcbody {
                  parlist {
                  }
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localnames {
              namelist {
                firstname {
                  name: "\030\000\000\000"
                  num: 0
                }
                names {
                  name: "counter_8"
                  num: 0
                }
                names {
                  name: "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq"
                  num: 4177526784
                }
              }
              explist {
                expressions {
                  binary {
                    leftexp {
                    }
                    binop {
                      sub: 5
                    }
                    rightexp {
                    }
                  }
                }
                explast {
                  number: -243.67054748535156
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    forcyclelist {
                      names {
                        firstname {
                          name: "\377\377\000:"
                          num: 0
                        }
                      }
                      expressions {
                        expressions {
                          prefixexp {
                            functioncall {
                              namedArgs {
                                prefixexp {
                                }
                                name {
                                  name: ""
                                  num: 16776960
                                }
                                args {
                                }
                              }
                            }
                          }
                        }
                        explast {
                        }
                      }
                      doblock {
                        block {
                          chunk {
                            stat {
                              forcyclelist {
                                names {
                                  firstname {
                                    name: "\377\377\000:"
                                    num: 0
                                  }
                                  names {
                                    name: ""
                                    num: 0
                                  }
                                }
                                expressions {
                                  explast {
                                  }
                                }
                                doblock {
                                  block {
                                    chunk {
                                      stat {
                                        forcyclelist {
                                          names {
                                            firstname {
                                              name: "\377\377\000:"
                                              num: 0
                                            }
                                            names {
                                              name: ""
                                              num: 0
                                            }
                                          }
                                          expressions {
                                            explast {
                                            }
                                          }
                                          doblock {
                                            block {
                                              chunk {
                                              }
                                            }
                                          }
                                        }
                                        semicolon: true
                                      }
                                      stat {
                                        whilecycle {
                                          condition {
                                            binary {
                                              leftexp {
                                                str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                                              }
                                              binop {
                                              }
                                              rightexp {
                                                binary {
                                                  leftexp {
                                                    prefixexp {
                                                      functioncall {
                                                        prefArgs {
                                                          prefixexp {
                                                            var {
                                                              name {
                                                                name: "xpcall"
                                                                num: 0
                                                              }
                                                            }
                                                          }
                                                          args {
                                                            explist {
                                                              explist {
                                                                expressions {
                                                                  prefixexp {
                                                                    var {
                                                                      name {
                                                                        name: "require"
                                                                        num: 0
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                                expressions {
                                                                  prefixexp {
                                                                    var {
                                                                      name {
                                                                        name: "xpcall"
                                                                        num: 538976288
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                                explast {
                                                                  str: "math.cos"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                  binop {
                                                    notEqual: 16
                                                  }
                                                  rightexp {
                                                    prefixexp {
                                                      functioncall {
                                                        namedArgs {
                                                          prefixexp {
                                                            exp {
                                                              str: "string.lower"
                                                            }
                                                          }
                                                          name {
                                                            name: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\006\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
                                                            num: 0
                                                          }
                                                          args {
                                                            tableconstructor {
                                                              fieldlist {
                                                                firstField {
                                                                }
                                                                lastSep {
                                                                  comma: 0
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          doblock {
                                            block {
                                              chunk {
                                                stat {
                                                  list {
                                                    varlist {
                                                      var {
                                                      }
                                                    }
                                                    explist {
                                                      explast {
                                                        str: "\377\377\377\377\377\377\377\377"
                                                      }
                                                    }
                                                  }
                                                  semicolon: false
                                                }
                                                laststat {
                                                  break: 6488064
                                                }
                                              }
                                            }
                                          }
                                        }
                                        semicolon: false
                                      }
                                      laststat {
                                        semicolon: true
                                      }
                                    }
                                  }
                                }
                              }
                              semicolon: true
                            }
                            stat {
                              whilecycle {
                                condition {
                                  binary {
                                    leftexp {
                                      str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                                    }
                                    binop {
                                    }
                                    rightexp {
                                      binary {
                                        leftexp {
                                          prefixexp {
                                            functioncall {
                                              prefArgs {
                                                prefixexp {
                                                  var {
                                                    name {
                                                      name: "xpcall"
                                                      num: 0
                                                    }
                                                  }
                                                }
                                                args {
                                                  explist {
                                                    explist {
                                                      expressions {
                                                        prefixexp {
                                                          var {
                                                            name {
                                                              name: "require"
                                                              num: 0
                                                            }
                                                          }
                                                        }
                                                      }
                                                      expressions {
                                                        prefixexp {
                                                          var {
                                                            name {
                                                              name: "xpcall"
                                                              num: 538976288
                                                            }
                                                          }
                                                        }
                                                      }
                                                      explast {
                                                        str: "math.cos"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        binop {
                                          notEqual: 16
                                        }
                                        rightexp {
                                          prefixexp {
                                            functioncall {
                                              namedArgs {
                                                prefixexp {
                                                  exp {
                                                    str: "string.lower"
                                                  }
                                                }
                                                name {
                                                  name: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\006\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
                                                  num: 0
                                                }
                                                args {
                                                  tableconstructor {
                                                    fieldlist {
                                                      firstField {
                                                      }
                                                      lastSep {
                                                        comma: 0
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                doblock {
                                  block {
                                    chunk {
                                      stat {
                                        list {
                                          varlist {
                                            var {
                                            }
                                          }
                                          explist {
                                            explast {
                                              str: "\377\377\377\377\377\377\377\377"
                                            }
                                          }
                                        }
                                        semicolon: false
                                      }
                                      laststat {
                                        break: 6488064
                                      }
                                    }
                                  }
                                }
                              }
                              semicolon: false
                            }
                            laststat {
                              semicolon: true
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                    localnames {
                      namelist {
                        firstname {
                          name: ""
                          num: 36
                        }
                      }
                      explist {
                        expressions {
                          str: "8"
                        }
                        explast {
                        }
                      }
                    }
                    semicolon: false
                  }
                  laststat {
                  }
                }
              }
              condition {
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        number: -709.375
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            break: 0
          }
        }
      }
      condition {
        nil: 1
      }
    }
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: true
          }
          laststat {
            semicolon: true
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 5
      }
    }
  }
  stat {
    localfunc {
      name {
        name: "\030\000\000\000"
        num: 0
      }
      funcbody {
        parlist {
          ellipsis: "\n\000\000\000"
        }
        block {
          chunk {
            stat {
              localnames {
                namelist {
                  firstname {
                    name: ""
                    num: 0
                  }
                  names {
                    name: "TTTTT"
                    num: 0
                  }
                }
              }
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
          name {
            name: "load"
            num: 0
          }
        }
      }
      explist {
        expressions {
          binary {
            leftexp {
            }
            binop {
              sub: 5
            }
            rightexp {
            }
          }
        }
        explast {
          ellipsis: ";"
        }
      }
    }
  }
  laststat {
    break: 128
  }
}
