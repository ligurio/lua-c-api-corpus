chunk {
  stat {
    ifstat {
      condition {
        tableconstructor {
          fieldlist {
            firstField {
              expression {
                binary {
                  leftexp {
                  }
                  binop {
                    or: 0
                  }
                  rightexp {
                    binary {
                      leftexp {
                      }
                      binop {
                        or: 0
                      }
                      rightexp {
                      }
                    }
                  }
                }
              }
            }
            fields {
              field {
                expression {
                  binary {
                    leftexp {
                    }
                    binop {
                      or: 0
                    }
                    rightexp {
                    }
                  }
                }
              }
              sep {
              }
            }
            fields {
              field {
                expression {
                  binary {
                    leftexp {
                      ellipsis: "\\377\\377\\377\\020"
                    }
                    binop {
                      or: 0
                    }
                    rightexp {
                    }
                  }
                }
              }
              sep {
              }
            }
            fields {
              field {
              }
              sep {
              }
            }
            fields {
              field {
              }
              sep {
              }
            }
          }
        }
      }
      first {
        chunk {
          stat {
            ifstat {
              condition {
                unary {
                  unop {
                    length: 0
                  }
                  exp {
                  }
                }
              }
              first {
                chunk {
                  stat {
                    forcyclelist {
                      names {
                        firstname {
                          name: ""
                          num: 0
                        }
                      }
                      expressions {
                        explast {
                        }
                      }
                      doblock {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  stat {
                    forcyclelist {
                      names {
                        firstname {
                          name: ""
                          num: 0
                        }
                      }
                      expressions {
                        explast {
                        }
                      }
                      doblock {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  stat {
                    semicolon: true
                  }
                  stat {
                    forcyclename {
                      name {
                        name: ""
                        num: 0
                      }
                      startexp {
                        unary {
                          unop {
                            not: 0
                          }
                          exp {
                          }
                        }
                      }
                      stopexp {
                        nil: 0
                      }
                      doblock {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
