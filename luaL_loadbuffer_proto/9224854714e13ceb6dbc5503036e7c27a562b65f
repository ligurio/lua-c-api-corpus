chunk {
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        parlist {
          namelist {
            namelist {
              firstname {
                name: "\213"
                num: 0
              }
              names {
                name: "\213"
                num: 0
              }
            }
            ellipsis: "\001\000\000\000"
          }
        }
        block {
          chunk {
            laststat {
              explist {
                explist {
                  explast {
                    false: 4
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    whilecycle {
      condition {
        tableconstructor {
          fieldlist {
            firstField {
              expression {
                binary {
                  leftexp {
                  }
                  binop {
                    sub: 2
                  }
                  rightexp {
                    number: 3.3156184727898e-316
                  }
                }
              }
            }
            fields {
              field {
              }
              sep {
                semicolon: 0
              }
            }
            fields {
              field {
                exprassign {
                  key {
                    binary {
                      leftexp {
                        prefixexp {
                          exp {
                            binary {
                              leftexp {
                                unary {
                                  unop {
                                    length: 0
                                  }
                                  exp {
                                    number: 3.3156184727898e-316
                                  }
                                }
                              }
                              binop {
                                concat: 0
                              }
                              rightexp {
                              }
                            }
                          }
                        }
                      }
                      binop {
                        exp: 1024
                      }
                      rightexp {
                        binary {
                          leftexp {
                            unary {
                              unop {
                                length: 0
                              }
                              exp {
                              }
                            }
                          }
                          binop {
                            concat: 0
                          }
                          rightexp {
                            function {
                              body {
                                parlist {
                                  ellipsis: "\001\000\000\000"
                                }
                                block {
                                  chunk {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  value {
                  }
                }
              }
              sep {
                comma: 1024
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                      fields {
                        field {
                        }
                        sep {
                          semicolon: 0
                        }
                      }
                      fields {
                        field {
                          exprassign {
                            key {
                              binary {
                                leftexp {
                                  prefixexp {
                                    exp {
                                      binary {
                                        leftexp {
                                          unary {
                                            unop {
                                              length: 0
                                            }
                                            exp {
                                              number: 3.3156184727898e-316
                                            }
                                          }
                                        }
                                        binop {
                                          concat: 0
                                        }
                                        rightexp {
                                        }
                                      }
                                    }
                                  }
                                }
                                binop {
                                  exp: 1024
                                }
                                rightexp {
                                  binary {
                                    leftexp {
                                      unary {
                                        unop {
                                          length: 0
                                        }
                                        exp {
                                        }
                                      }
                                    }
                                    binop {
                                      concat: 0
                                    }
                                    rightexp {
                                      function {
                                        body {
                                          parlist {
                                            ellipsis: "\001\000\000\000"
                                          }
                                          block {
                                            chunk {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            value {
                            }
                          }
                        }
                        sep {
                          comma: 1024
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        whilecycle {
                          condition {
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                      stat {
                        semicolon: true
                      }
                      stat {
                        list {
                          varlist {
                            var {
                            }
                          }
                          explist {
                            explast {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              semicolon: true
            }
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  explast {
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
}
