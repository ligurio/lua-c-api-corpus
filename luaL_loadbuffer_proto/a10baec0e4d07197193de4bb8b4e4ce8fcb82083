chunk {
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
            stat {
              localfunc {
                name {
                  name: ""
                  num: 0
                }
                funcbody {
                  block {
                    chunk {
                      stat {
                        repeatcycle {
                          block {
                            chunk {
                              laststat {
                                break: 58624
                              }
                            }
                          }
                          condition {
                            false: 30976
                          }
                        }
                      }
                      stat {
                        semicolon: true
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              semicolon: true
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                    exp {
                      tableconstructor {
                        fieldlist {
                          firstField {
                          }
                        }
                      }
                    }
                  }
                  args {
                  }
                }
              }
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        call {
                          prefArgs {
                            prefixexp {
                            }
                            args {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        whilecycle {
                          condition {
                            false: 0
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              semicolon: false
            }
            stat {
              localnames {
                namelist {
                  firstname {
                    name: ""
                    num: 0
                  }
                  names {
                    name: ""
                    num: 0
                  }
                }
              }
              semicolon: true
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              block {
                block {
                  chunk {
                    stat {
                      semicolon: true
                    }
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              semicolon: true
            }
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                  }
                  expressions {
                  }
                  explast {
                    binary {
                      leftexp {
                        prefixexp {
                          exp {
                            binary {
                              leftexp {
                                nil: 6513008
                              }
                              binop {
                                or: 0
                              }
                              rightexp {
                                number: 0
                              }
                            }
                          }
                        }
                      }
                      binop {
                      }
                      rightexp {
                        binary {
                          leftexp {
                            number: 1.1498705927420482e+69
                          }
                          binop {
                            add: 0
                          }
                          rightexp {
                            prefixexp {
                              exp {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                        unary {
                                          unop {
                                            negate: 0
                                          }
                                          exp {
                                          }
                                        }
                                      }
                                      binop {
                                        or: 0
                                      }
                                      rightexp {
                                        prefixexp {
                                        }
                                      }
                                    }
                                  }
                                  binop {
                                    and: 40
                                  }
                                  rightexp {
                                    prefixexp {
                                      exp {
                                        binary {
                                          leftexp {
                                            number: 1.6869608407943928e+69
                                          }
                                          binop {
                                            or: 0
                                          }
                                          rightexp {
                                            prefixexp {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
                namedArgs {
                  prefixexp {
                  }
                  name {
                    name: "move"
                    num: 0
                  }
                  args {
                  }
                }
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                  }
                  args {
                  }
                }
              }
            }
            stat {
              call {
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  false: 0
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      stepexp {
        number: -0
      }
      doblock {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                            laststat {
                              break: 58624
                            }
                          }
                        }
                        condition {
                          false: 30976
                        }
                      }
                    }
                    laststat {
                      break: 58624
                    }
                  }
                }
                condition {
                  ellipsis: "move"
                }
              }
              semicolon: true
            }
            laststat {
              break: 0
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        number: 0
      }
      doblock {
        block {
          chunk {
            laststat {
              break: 0
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: ""
          num: 0
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
        }
        expressions {
        }
        explast {
          binary {
            leftexp {
              prefixexp {
                exp {
                  binary {
                    leftexp {
                      unary {
                        unop {
                        }
                        exp {
                          binary {
                            leftexp {
                              prefixexp {
                                var {
                                }
                              }
                            }
                            binop {
                            }
                            rightexp {
                            }
                          }
                        }
                      }
                    }
                    binop {
                      or: 0
                    }
                    rightexp {
                      number: 1.06420345663326e-314
                    }
                  }
                }
              }
            }
            binop {
              notEqual: 0
            }
            rightexp {
              binary {
                leftexp {
                  number: 1.1498705927420482e+69
                }
                binop {
                  add: 0
                }
                rightexp {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              unary {
                                unop {
                                  negate: 0
                                }
                                exp {
                                }
                              }
                            }
                            binop {
                              or: 0
                            }
                            rightexp {
                              prefixexp {
                              }
                            }
                          }
                        }
                        binop {
                          and: 40
                        }
                        rightexp {
                          prefixexp {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
          exp {
            binary {
              leftexp {
                number: 1.6869608407943928e+69
              }
              binop {
                or: 0
              }
              rightexp {
                prefixexp {
                }
              }
            }
          }
        }
        name {
          name: "move"
          num: 0
        }
        args {
        }
      }
    }
  }
  stat {
  }
  stat {
    call {
    }
    semicolon: false
  }
  stat {
    call {
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
        }
      }
    }
  }
  stat {
    call {
    }
  }
}
