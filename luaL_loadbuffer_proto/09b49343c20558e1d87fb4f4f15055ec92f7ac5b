chunk {
  stat {
    whilecycle {
      condition {
        str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'.>\'"
      }
      doblock {
        block {
          chunk {
            stat {
              localnames {
                namelist {
                  firstname {
                    name: "_\022\000____\376________\376_"
                    num: 0
                  }
                }
              }
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                      list {
                        varlist {
                          var {
                          }
                        }
                        explist {
                          expressions {
                            unary {
                              unop {
                              }
                              exp {
                                str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                              }
                            }
                          }
                          explast {
                          }
                        }
                      }
                      semicolon: true
                    }
                    stat {
                      call {
                      }
                    }
                  }
                }
                condition {
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        unary {
          unop {
          }
          exp {
            str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
          }
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: "math.min"
        num: 0
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        nil: 1
      }
    }
    semicolon: true
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
          name {
            name: "debug.traceback"
            num: 0
          }
        }
      }
      explist {
        expressions {
          ellipsis: "rawlen"
        }
        expressions {
          str: "file:close"
        }
        expressions {
          str: "\'<mathn<7<<7<\'<9"
        }
        expressions {
          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
        }
        explast {
          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'.>\'"
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 12800
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: true
          }
          stat {
            localnames {
              namelist {
                firstname {
                  name: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                  num: 0
                }
                names {
                  name: "counter_8"
                  num: 0
                }
              }
              explist {
                expressions {
                  true: 2147483648
                }
                explast {
                  number: -35651608.12500108
                }
              }
            }
            semicolon: false
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    list {
                      varlist {
                        var {
                        }
                      }
                      explist {
                        expressions {
                          ellipsis: ""
                        }
                        expressions {
                          number: -35651608.12500108
                        }
                        expressions {
                          str: "\'<mathn<7<<7<\'<9"
                        }
                        expressions {
                        }
                        explast {
                          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                        }
                      }
                    }
                    semicolon: false
                  }
                  stat {
                    call {
                      namedArgs {
                        prefixexp {
                          functioncall {
                            prefArgs {
                              prefixexp {
                              }
                              args {
                              }
                            }
                          }
                        }
                        name {
                          name: ""
                          num: 0
                        }
                        args {
                        }
                      }
                    }
                    semicolon: true
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                          stat {
                            semicolon: true
                          }
                        }
                      }
                      condition {
                        str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                      }
                    }
                  }
                }
              }
              condition {
                false: 0
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        true: 52
      }
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
        unary {
          unop {
            length: 16515072
          }
          exp {
            prefixexp {
            }
          }
        }
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          explist {
            explist {
              expressions {
                ellipsis: "move"
              }
              explast {
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        true: 1
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    semicolon: false
  }
  stat {
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
    block {
      block {
        chunk {
          stat {
            call {
              namedArgs {
                prefixexp {
                }
                name {
                  name: "counter_8"
                  num: 0
                }
                args {
                }
              }
            }
            semicolon: true
          }
          stat {
            semicolon: true
          }
        }
      }
    }
  }
  stat {
    semicolon: false
  }
  laststat {
  }
}
