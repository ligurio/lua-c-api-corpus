chunk {
  stat {
    call {
      prefArgs {
        prefixexp {
          var {
            name {
              name: "load"
              num: 0
            }
          }
        }
        args {
          explist {
            explist {
              explast {
                function {
                  body {
                    parlist {
                    }
                    block {
                      chunk {
                        laststat {
                          explist {
                            explist {
                              expressions {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                        binary {
                                          leftexp {
                                          }
                                          binop {
                                            div: 0
                                          }
                                          rightexp {
                                            str: "\'<coroutane.yiel>>\'<coroutane.yiel>>>>>>>>>>>>>>>>>>>>d"
                                          }
                                        }
                                      }
                                      binop {
                                        div: 0
                                      }
                                      rightexp {
                                        number: -131
                                      }
                                    }
                                  }
                                  binop {
                                    lessEqual: 64
                                  }
                                  rightexp {
                                  }
                                }
                              }
                              explast {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
}
