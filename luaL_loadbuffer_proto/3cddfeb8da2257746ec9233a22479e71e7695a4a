chunk {
  stat {
    forcyclename {
      name {
        name: "\036\000\000\000\000\000\000\000"
        num: 7424
      }
      startexp {
        binary {
          leftexp {
            nil: 0
          }
          binop {
            or: 67108865
          }
          rightexp {
            unary {
              unop {
                negate: 32
              }
              exp {
              }
            }
          }
        }
      }
      stopexp {
        binary {
          leftexp {
            str: "ceil"
          }
          binop {
            exp: 0
          }
          rightexp {
            str: "load"
          }
        }
      }
      stepexp {
        str: "?\000\000\000\000\000\000\000"
      }
      doblock {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                      call {
                      }
                      semicolon: true
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                      call {
                        namedArgs {
                          prefixexp {
                          }
                          name {
                            name: ""
                            num: 268435456
                          }
                          args {
                            str: "counter_+"
                          }
                        }
                      }
                      semicolon: true
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                      semicolon: true
                    }
                    stat {
                      func {
                        name {
                          firstname {
                            name: ""
                            num: 0
                          }
                        }
                        body {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                    stat {
                      call {
                        prefArgs {
                          prefixexp {
                            exp {
                              str: "                                                                   "
                            }
                          }
                          args {
                          }
                        }
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                  }
                }
                condition {
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              list {
                varlist {
                  var {
                  }
                  vars {
                    indexexpr {
                      prefixexp {
                        functioncall {
                          namedArgs {
                            prefixexp {
                            }
                            name {
                              name: ""
                              num: 0
                            }
                            args {
                              explist {
                                explist {
                                  expressions {
                                    nil: 1024
                                  }
                                  explast {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      exp {
                      }
                    }
                  }
                }
                explist {
                  expressions {
                    nil: 4
                  }
                  explast {
                  }
                }
              }
            }
            stat {
              semicolon: true
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              whilecycle {
                condition {
                  prefixexp {
                    var {
                      name {
                        name: "math.mininteger"
                        num: 0
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              block {
                block {
                  chunk {
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                    var {
                    }
                  }
                  args {
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
              semicolon: true
            }
            stat {
              call {
              }
              semicolon: true
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
              semicolon: true
            }
            stat {
              block {
                block {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        list {
                          varlist {
                            var {
                              indexname {
                                prefixexp {
                                }
                                Name: "\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223"
                              }
                            }
                          }
                          explist {
                            explast {
                              binary {
                                leftexp {
                                  binary {
                                    leftexp {
                                      str: "a\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377bs"
                                    }
                                    binop {
                                      concat: 1969775360
                                    }
                                    rightexp {
                                      binary {
                                        leftexp {
                                          true: 4194304
                                        }
                                        binop {
                                          exp: 9984
                                        }
                                        rightexp {
                                          prefixexp {
                                            exp {
                                              nil: 11520
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                binop {
                                  and: 1969775360
                                }
                                rightexp {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                    exp {
                      str: "                                                                                "
                    }
                  }
                  args {
                  }
                }
              }
              semicolon: false
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
              semicolon: true
            }
            stat {
              call {
              }
            }
            stat {
              localnames {
                namelist {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
              }
            }
            stat {
              func {
                name {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                body {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                  }
                  args {
                  }
                }
              }
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                      call {
                      }
                      semicolon: true
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                          }
                        }
                        condition {
                          binary {
                            leftexp {
                              nil: 4
                            }
                            binop {
                              or: 67108865
                            }
                            rightexp {
                            }
                          }
                        }
                      }
                      semicolon: false
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                      call {
                        namedArgs {
                          prefixexp {
                          }
                          name {
                            name: ""
                            num: 268435456
                          }
                          args {
                            str: "counter_+"
                          }
                        }
                      }
                      semicolon: true
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                      semicolon: true
                    }
                    stat {
                      func {
                        name {
                          firstname {
                            name: ""
                            num: 0
                          }
                        }
                        body {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                    stat {
                      call {
                        prefArgs {
                          prefixexp {
                            exp {
                              str: "                                                                   "
                            }
                          }
                          args {
                          }
                        }
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                  }
                }
                condition {
                }
              }
            }
            stat {
              whilecycle {
                condition {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              unary {
                                unop {
                                  negate: 32
                                }
                                exp {
                                }
                              }
                            }
                            binop {
                              add: 0
                            }
                            rightexp {
                              str: "\'<<66*io.flush\'<"
                            }
                          }
                        }
                        binop {
                          add: 1
                        }
                        rightexp {
                          str: "\'<<66*io.flush\'<"
                        }
                      }
                    }
                    binop {
                      lessEqual: 1
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                            }
                            binop {
                              add: 0
                            }
                            rightexp {
                              str: "\'<<66*io.flush\'<"
                            }
                          }
                        }
                        binop {
                          exp: 0
                        }
                        rightexp {
                          str: "\'<<66*io.flush\'<"
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              localfunc {
                name {
                  name: ""
                  num: 0
                }
                funcbody {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                    exp {
                      str: "                                                                                "
                    }
                  }
                  args {
                  }
                }
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
            nil: 4
          }
          binop {
            or: 67108865
          }
          rightexp {
          }
        }
      }
    }
  }
}
