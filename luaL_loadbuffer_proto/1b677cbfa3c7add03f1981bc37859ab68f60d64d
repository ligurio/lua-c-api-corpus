chunk {
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
              prefArgs {
                prefixexp {
                  var {
                    name {
                      name: "load"
                      num: 0
                    }
                  }
                }
                args {
                  str: "counter_+"
                }
              }
            }
          }
        }
      }
      condition {
        nil: 1024
      }
    }
    semicolon: false
  }
  stat {
    localfunc {
      name {
        name: "\030\000\000\000"
        num: 6490687
      }
      funcbody {
        block {
          chunk {
            stat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
            laststat {
              break: 0
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        function {
          body {
            block {
              chunk {
                stat {
                  ifstat {
                    condition {
                    }
                    first {
                      chunk {
                        stat {
                          func {
                            name {
                              firstname {
                                name: ""
                                num: 0
                              }
                            }
                            body {
                              block {
                                chunk {
                                  laststat {
                                    break: 0
                                  }
                                }
                              }
                            }
                          }
                          semicolon: true
                        }
                      }
                    }
                  }
                }
                laststat {
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    func {
      name {
        firstname {
          name: "\030\000\000\000"
          num: 6490687
        }
      }
      body {
        parlist {
        }
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localnames {
              namelist {
                firstname {
                  name: "counte__bnotr_+"
                  num: 0
                }
                names {
                  name: "counter+8"
                  num: 0
                }
                names {
                  name: "\222\222\222\222"
                  num: 0
                }
                names {
                  name: "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq"
                  num: 4177526784
                }
              }
              explist {
                expressions {
                }
                explast {
                  number: -709.375
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    whilecycle {
                      condition {
                      }
                      doblock {
                        block {
                          chunk {
                            stat {
                              call {
                                prefArgs {
                                  prefixexp {
                                    var {
                                      name {
                                        name: "load"
                                        num: 0
                                      }
                                    }
                                  }
                                  args {
                                    str: "\222\222\222\222"
                                  }
                                }
                              }
                              semicolon: true
                            }
                            laststat {
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                  }
                }
              }
              condition {
                prefixexp {
                  functioncall {
                    prefArgs {
                      prefixexp {
                        var {
                          name {
                            name: "load"
                            num: 0
                          }
                        }
                      }
                      args {
                        str: "\222\222\222\222"
                      }
                    }
                  }
                }
              }
            }
          }
          laststat {
            break: 1048576
            semicolon: true
          }
        }
      }
      condition {
        str: "\'<8<<\'<9"
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: "\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244"
        num: 2
      }
      startexp {
        prefixexp {
          exp {
            binary {
              leftexp {
              }
              binop {
                add: 2
              }
              rightexp {
                binary {
                  leftexp {
                    prefixexp {
                    }
                  }
                  binop {
                    or: 1024
                  }
                  rightexp {
                    prefixexp {
                    }
                  }
                }
              }
            }
          }
        }
      }
      stopexp {
        binary {
          leftexp {
            nil: 0
          }
          binop {
          }
          rightexp {
            prefixexp {
              functioncall {
                namedArgs {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          var {
                            name {
                              name: "__lt"
                              num: 0
                            }
                          }
                        }
                        args {
                          explist {
                            explist {
                              expressions {
                                prefixexp {
                                  exp {
                                    binary {
                                      leftexp {
                                        binary {
                                          leftexp {
                                          }
                                          binop {
                                            add: 2
                                          }
                                          rightexp {
                                            number: 0
                                          }
                                        }
                                      }
                                      binop {
                                        concat: 2097152
                                      }
                                      rightexp {
                                        binary {
                                          leftexp {
                                            prefixexp {
                                            }
                                          }
                                          binop {
                                            mult: 0
                                          }
                                          rightexp {
                                            prefixexp {
                                              exp {
                                                binary {
                                                  leftexp {
                                                    prefixexp {
                                                    }
                                                  }
                                                  binop {
                                                    mult: 536870912
                                                  }
                                                  rightexp {
                                                    binary {
                                                      leftexp {
                                                        true: 17
                                                      }
                                                      binop {
                                                        mult: 1751381504
                                                      }
                                                      rightexp {
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              expressions {
                                unary {
                                  unop {
                                    negate: 538976288
                                  }
                                  exp {
                                    prefixexp {
                                    }
                                  }
                                }
                              }
                              explast {
                                ellipsis: "\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\377\377\377\377\377\377\377\307z\177\177\177\000\000\000\000\000\000\000\000\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  name {
                    name: ""
                    num: 0
                  }
                  args {
                    str: "pack"
                  }
                }
              }
            }
          }
        }
      }
      stepexp {
      }
      doblock {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  explast {
                    binary {
                      leftexp {
                      }
                      binop {
                        greaterEqual: 0
                      }
                      rightexp {
                      }
                    }
                  }
                }
              }
            }
            stat {
              forcyclename {
                name {
                  name: "\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244"
                  num: 2
                }
                startexp {
                  prefixexp {
                    exp {
                    }
                  }
                }
                stopexp {
                  binary {
                    leftexp {
                      prefixexp {
                        functioncall {
                        }
                      }
                    }
                    binop {
                      greater: 1024
                    }
                    rightexp {
                      prefixexp {
                      }
                    }
                  }
                }
                stepexp {
                  true: 1
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 1
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
              prefArgs {
                prefixexp {
                  var {
                    name {
                      name: ""
                      num: 0
                    }
                  }
                }
                args {
                  str: ""
                }
              }
            }
          }
        }
      }
      condition {
        nil: 1024
      }
    }
    semicolon: false
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 5
      }
    }
  }
  stat {
    localfunc {
      name {
        name: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
        num: 0
      }
      funcbody {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        call {
                          prefArgs {
                            prefixexp {
                              var {
                                name {
                                  name: "load"
                                  num: 0
                                }
                              }
                            }
                            args {
                              str: "\222\222\222\222"
                            }
                          }
                        }
                        semicolon: true
                      }
                      laststat {
                      }
                    }
                  }
                }
              }
            }
            stat {
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
}
