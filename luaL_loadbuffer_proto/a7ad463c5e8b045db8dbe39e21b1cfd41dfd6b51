chunk {
  stat {
    localfunc {
      name {
        name: "\'>6662&6%332<<\'8"
        num: 0
      }
      funcbody {
        parlist {
          ellipsis: "\000\000\000\000"
        }
        block {
          chunk {
            stat {
              localfunc {
                name {
                  name: "\'>6662&6%332<<\'8"
                  num: 67108864
                }
                funcbody {
                  block {
                    chunk {
                      stat {
                        localnames {
                          namelist {
                            firstname {
                              name: ""
                              num: 0
                            }
                          }
                          explist {
                            expressions {
                              prefixexp {
                                var {
                                  indexname {
                                    prefixexp {
                                    }
                                    Name: "dump"
                                  }
                                }
                              }
                            }
                            expressions {
                              false: 0
                            }
                            expressions {
                            }
                            expressions {
                              binary {
                                leftexp {
                                  str: "\'-666333623<\'<8<8"
                                }
                                binop {
                                  div: 0
                                }
                                rightexp {
                                  str: "\'-666333623<\'<8<8"
                                }
                              }
                            }
                            explast {
                              str: "\'>>6662&6%332<<\'6662&6%332<<\'8"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: false
            }
            laststat {
              explist {
                explist {
                  expressions {
                    true: 0
                  }
                  expressions {
                    false: 0
                  }
                  expressions {
                  }
                  expressions {
                    binary {
                      leftexp {
                        str: "\'-666633332<\'<8<8"
                      }
                      binop {
                        div: 0
                      }
                      rightexp {
                        str: "\'-666333623<\'<8<8"
                      }
                    }
                  }
                  explast {
                    str: "\'>6662&6%332<<\'8"
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    localfunc {
      name {
        name: "\'>6662&6%332<<\'8"
        num: 0
      }
      funcbody {
        parlist {
          ellipsis: "\000\000\000\000"
        }
        block {
          chunk {
            stat {
              localfunc {
                name {
                  name: "\'>6662&6%332<<\'8"
                  num: 67108864
                }
                funcbody {
                  block {
                    chunk {
                      stat {
                        localnames {
                          namelist {
                            firstname {
                              name: ""
                              num: 0
                            }
                          }
                          explist {
                            expressions {
                              prefixexp {
                                var {
                                  indexname {
                                    prefixexp {
                                    }
                                    Name: "dump"
                                  }
                                }
                              }
                            }
                            expressions {
                              false: 0
                            }
                            expressions {
                            }
                            expressions {
                              binary {
                                leftexp {
                                  str: "\'-666333623<\'<8<8"
                                }
                                binop {
                                  div: 0
                                }
                                rightexp {
                                  str: "\'-666333623<\'<8<8"
                                }
                              }
                            }
                            explast {
                              binary {
                                leftexp {
                                  str: "\'-666333623<\'<8<8"
                                }
                                binop {
                                  div: 0
                                }
                                rightexp {
                                  str: "\'-666333623<\'<8<8"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: false
            }
            laststat {
              explist {
                explist {
                  expressions {
                    true: 0
                  }
                  expressions {
                    false: 0
                  }
                  expressions {
                  }
                  expressions {
                    binary {
                      leftexp {
                        str: "\'-666633332<\'<8<8"
                      }
                      binop {
                        div: 0
                      }
                      rightexp {
                        str: "\'-666333623<\'<8<8"
                      }
                    }
                  }
                  explast {
                    str: "\'>6662&6%332<<\'8"
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    localfunc {
      name {
        name: "\'>6662&6%332<<\'8"
        num: 0
      }
      funcbody {
        parlist {
          ellipsis: "\000\000\000\000"
        }
        block {
          chunk {
            stat {
              localfunc {
                name {
                  name: "\'>6662&6%332<<\'8"
                  num: 0
                }
                funcbody {
                  parlist {
                    ellipsis: "\000\000\000\000"
                  }
                  block {
                    chunk {
                      stat {
                        localfunc {
                          name {
                            name: "\'>6662&6%332<<\'8"
                            num: 0
                          }
                          funcbody {
                            block {
                              chunk {
                                stat {
                                }
                                laststat {
                                  explist {
                                    explist {
                                      expressions {
                                        true: 0
                                      }
                                      expressions {
                                        false: 0
                                      }
                                      expressions {
                                      }
                                      expressions {
                                        binary {
                                          leftexp {
                                            str: "\'-666333623<\'<8<8"
                                          }
                                          binop {
                                            div: 0
                                          }
                                          rightexp {
                                            str: "\'-666333623<\'<8<8"
                                          }
                                        }
                                      }
                                      explast {
                                        str: "\'>6662&6%332<<\'8"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      laststat {
                        explist {
                          explist {
                            expressions {
                              prefixexp {
                                var {
                                  name {
                                    name: "collectgarbage"
                                    num: 0
                                  }
                                }
                              }
                            }
                            expressions {
                              ellipsis: "\'-666333623<\'<8<8"
                            }
                            expressions {
                            }
                            expressions {
                              binary {
                                leftexp {
                                  str: "\'-666633332<\'<8<8"
                                }
                                binop {
                                  div: 0
                                }
                                rightexp {
                                  str: "\'-666333623<\'<8<8"
                                }
                              }
                            }
                            explast {
                              str: "\'>6662&6%332<<\'8"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: false
            }
            laststat {
              explist {
                explist {
                  expressions {
                    prefixexp {
                      var {
                        indexname {
                          prefixexp {
                          }
                          Name: "dump"
                        }
                      }
                    }
                  }
                  expressions {
                    false: 0
                  }
                  expressions {
                  }
                  expressions {
                    binary {
                      leftexp {
                        str: "\'-666633332<\'<8<8"
                      }
                      binop {
                        div: 0
                      }
                      rightexp {
                        str: "\'-666333623<\'<8<8"
                      }
                    }
                  }
                  explast {
                    str: "\'>6662&6%332<<\'8"
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
}
