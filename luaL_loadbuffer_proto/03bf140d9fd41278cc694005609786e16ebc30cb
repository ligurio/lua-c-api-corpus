chunk {
  stat {
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            func {
              name {
                firstname {
                  name: "type"
                  num: 0
                }
              }
              body {
                block {
                  chunk {
                    stat {
                    }
                    stat {
                      semicolon: true
                    }
                    stat {
                      localfunc {
                        name {
                          name: ""
                          num: 0
                        }
                        funcbody {
                          parlist {
                            namelist {
                              namelist {
                                firstname {
                                  name: ""
                                  num: 0
                                }
                              }
                            }
                          }
                          block {
                            chunk {
                              stat {
                                repeatcycle {
                                  block {
                                    chunk {
                                      stat {
                                      }
                                      stat {
                                        list {
                                          varlist {
                                            var {
                                            }
                                          }
                                          explist {
                                            expressions {
                                              ellipsis: "table.pack"
                                            }
                                            expressions {
                                              prefixexp {
                                                functioncall {
                                                  prefArgs {
                                                    prefixexp {
                                                      exp {
                                                      }
                                                    }
                                                    args {
                                                      str: "\'"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            expressions {
                                              binary {
                                                leftexp {
                                                  ellipsis: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
                                                }
                                                binop {
                                                  greaterEqual: 285212671
                                                }
                                                rightexp {
                                                  true: 2097152
                                                }
                                              }
                                            }
                                            expressions {
                                            }
                                            expressions {
                                            }
                                            expressions {
                                              prefixexp {
                                                functioncall {
                                                  prefArgs {
                                                    prefixexp {
                                                      var {
                                                        name {
                                                          name: "load"
                                                          num: 16776448
                                                        }
                                                      }
                                                    }
                                                    args {
                                                      explist {
                                                        explist {
                                                          explast {
                                                            binary {
                                                              leftexp {
                                                                binary {
                                                                  leftexp {
                                                                    prefixexp {
                                                                      functioncall {
                                                                        namedArgs {
                                                                          prefixexp {
                                                                          }
                                                                          name {
                                                                            name: ""
                                                                            num: 0
                                                                          }
                                                                          args {
                                                                            explist {
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                  binop {
                                                                    concat: 0
                                                                  }
                                                                  rightexp {
                                                                    true: 2
                                                                  }
                                                                }
                                                              }
                                                              binop {
                                                                mod: 2105344
                                                              }
                                                              rightexp {
                                                                unary {
                                                                  unop {
                                                                    negate: 0
                                                                  }
                                                                  exp {
                                                                    binary {
                                                                      leftexp {
                                                                        binary {
                                                                          leftexp {
                                                                            prefixexp {
                                                                            }
                                                                          }
                                                                          binop {
                                                                            concat: 704643072
                                                                          }
                                                                          rightexp {
                                                                            str: "debug.traceback"
                                                                          }
                                                                        }
                                                                      }
                                                                      binop {
                                                                        concat: 0
                                                                      }
                                                                      rightexp {
                                                                        prefixexp {
                                                                          exp {
                                                                            number: 8.81442566340249e-280
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            expressions {
                                            }
                                            expressions {
                                              tableconstructor {
                                              }
                                            }
                                            expressions {
                                              unary {
                                                unop {
                                                  negate: 1644167168
                                                }
                                                exp {
                                                  binary {
                                                    leftexp {
                                                    }
                                                    binop {
                                                      concat: 0
                                                    }
                                                    rightexp {
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            explast {
                                              prefixexp {
                                                functioncall {
                                                  prefArgs {
                                                    prefixexp {
                                                    }
                                                    args {
                                                      str: "\'"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      laststat {
                                      }
                                    }
                                  }
                                  condition {
                                    prefixexp {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      semicolon: true
                    }
                    stat {
                      call {
                        prefArgs {
                          prefixexp {
                            var {
                            }
                          }
                          args {
                            str: ":"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            semicolon: true
          }
          laststat {
          }
        }
      }
      condition {
        nil: 5
      }
    }
    semicolon: false
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                    name {
                      name: "tonumber"
                      num: 0
                    }
                  }
                  vars {
                    name {
                      name: "tonumber"
                      num: 0
                    }
                  }
                }
                explist {
                  expressions {
                    tableconstructor {
                      fieldlist {
                        firstField {
                        }
                        fields {
                          field {
                            exprassign {
                              key {
                              }
                              value {
                                false: 946238581
                              }
                            }
                          }
                          sep {
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    tableconstructor {
                      fieldlist {
                        firstField {
                          expression {
                            binary {
                              leftexp {
                                function {
                                  body {
                                    parlist {
                                    }
                                    block {
                                      chunk {
                                      }
                                    }
                                  }
                                }
                              }
                              binop {
                              }
                              rightexp {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  explast {
                    false: 4136992
                  }
                }
              }
              semicolon: true
            }
            stat {
              list {
                varlist {
                  var {
                    indexname {
                      prefixexp {
                        var {
                          indexexpr {
                            prefixexp {
                            }
                            exp {
                              unary {
                                unop {
                                  length: 30464
                                }
                                exp {
                                }
                              }
                            }
                          }
                        }
                      }
                      Name: "\263"
                    }
                  }
                  vars {
                    indexname {
                      prefixexp {
                        functioncall {
                        }
                      }
                      Name: "\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244\244"
                    }
                  }
                  vars {
                    indexname {
                      prefixexp {
                        var {
                          indexexpr {
                            prefixexp {
                            }
                            exp {
                              unary {
                                unop {
                                  length: 30464
                                }
                                exp {
                                }
                              }
                            }
                          }
                        }
                      }
                      Name: "\263"
                    }
                  }
                  vars {
                  }
                }
                explist {
                  expressions {
                    ellipsis: "\377"
                  }
                  expressions {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                }
                                args {
                                  explist {
                                  }
                                }
                              }
                            }
                          }
                          args {
                          }
                        }
                      }
                    }
                  }
                  explast {
                    false: 0
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localnames {
              namelist {
                firstname {
                  name: "counter_+"
                  num: 6513008
                }
                names {
                  name: "counter_8"
                  num: 0
                }
              }
              explist {
                explast {
                  binary {
                    leftexp {
                    }
                    binop {
                      add: 2
                    }
                    rightexp {
                      binary {
                        leftexp {
                        }
                        binop {
                          add: 2
                        }
                        rightexp {
                          binary {
                            leftexp {
                              prefixexp {
                              }
                            }
                            binop {
                              mult: 0
                            }
                            rightexp {
                              prefixexp {
                                functioncall {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                        prefixexp {
                          functioncall {
                            prefArgs {
                              prefixexp {
                                var {
                                  name {
                                    name: "load"
                                    num: 0
                                  }
                                }
                              }
                              args {
                                str: "\001\006"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  laststat {
                    explist {
                      explist {
                        expressions {
                          binary {
                            leftexp {
                            }
                            binop {
                            }
                            rightexp {
                              nil: 254
                            }
                          }
                        }
                        explast {
                        }
                      }
                    }
                  }
                }
              }
              condition {
                unary {
                  unop {
                  }
                  exp {
                    false: 1847599136
                  }
                }
              }
            }
            semicolon: false
          }
        }
      }
      condition {
        binary {
          leftexp {
            str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
          }
          binop {
            exp: 1073742080
          }
          rightexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                  }
                  binop {
                  }
                  rightexp {
                    binary {
                      leftexp {
                        str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                      }
                      binop {
                        exp: 1073742080
                      }
                      rightexp {
                        binary {
                          leftexp {
                          }
                          binop {
                          }
                          rightexp {
                            prefixexp {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              binop {
                less: 1073742080
              }
              rightexp {
                binary {
                  leftexp {
                    prefixexp {
                      functioncall {
                      }
                    }
                  }
                  binop {
                    exp: 0
                  }
                  rightexp {
                    binary {
                      leftexp {
                        number: -424
                      }
                      binop {
                        mod: 0
                      }
                      rightexp {
                        binary {
                          leftexp {
                            number: -131
                          }
                          binop {
                            mult: 0
                          }
                          rightexp {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        nil: 1
      }
    }
  }
  stat {
    whilecycle {
      condition {
        prefixexp {
          exp {
            prefixexp {
              functioncall {
                namedArgs {
                  prefixexp {
                  }
                  name {
                    name: ""
                    num: 0
                  }
                  args {
                    str: "\276"
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 538968064
        }
      }
      expressions {
        expressions {
          str: ":"
        }
        expressions {
          prefixexp {
          }
        }
        expressions {
          number: -424
        }
        explast {
          number: 7.06327445644526e-304
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
          binary {
            leftexp {
            }
            binop {
              concat: 7
            }
            rightexp {
              prefixexp {
              }
            }
          }
        }
      }
    }
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    func {
                      name {
                        firstname {
                          name: ""
                          num: 0
                        }
                      }
                      body {
                        parlist {
                          ellipsis: "\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025"
                        }
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                }
              }
              condition {
                prefixexp {
                  functioncall {
                    prefArgs {
                      prefixexp {
                        var {
                          name {
                            name: "load"
                            num: 0
                          }
                        }
                      }
                      args {
                        str: "\000\006"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
        nil: 0
      }
    }
  }
}
