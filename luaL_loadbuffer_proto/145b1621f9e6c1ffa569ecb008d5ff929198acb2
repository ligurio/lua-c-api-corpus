chunk {
  stat {
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            func {
              name {
                firstname {
                  name: ""
                  num: 0
                }
              }
              body {
                block {
                  chunk {
                    laststat {
                      explist {
                        explist {
                          expressions {
                            binary {
                              leftexp {
                              }
                              binop {
                                notEqual: 50
                              }
                              rightexp {
                              }
                            }
                          }
                          explast {
                          }
                        }
                      }
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
        nil: 5
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            forcyclename {
              name {
                name: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                num: 0
              }
              startexp {
              }
              stopexp {
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
      condition {
        nil: 32
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        unary {
          unop {
          }
          exp {
            false: 1847599136
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localnames {
              namelist {
                firstname {
                  name: "counter_+"
                  num: 6513008
                }
                names {
                  name: "counter_8"
                  num: 0
                }
              }
              explist {
                expressions {
                }
                explast {
                  number: -709.375
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                        unary {
                          unop {
                            negate: 0
                          }
                          exp {
                          }
                        }
                      }
                    }
                  }
                }
              }
              condition {
                unary {
                  unop {
                  }
                  exp {
                    false: 8224
                  }
                }
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        ellipsis
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        nil: 1
      }
    }
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            laststat {
              explist {
                explist {
                  expressions {
                    nil: 0
                  }
                  explast {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        expressions {
          prefixexp {
            var {
              name {
                name: "pcall"
                num: 127
              }
            }
          }
        }
        explast {
          function {
            body {
              parlist {
                ellipsis: "__index"
              }
              block {
                chunk {
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                          stat {
                            repeatcycle {
                              block {
                                chunk {
                                  stat {
                                    list {
                                      varlist {
                                        var {
                                          name {
                                            name: ""
                                            num: 4278190080
                                          }
                                        }
                                        vars {
                                        }
                                      }
                                      explist {
                                        expressions {
                                          ellipsis: "\'"
                                        }
                                        expressions {
                                          prefixexp {
                                            functioncall {
                                              prefArgs {
                                                prefixexp {
                                                  functioncall {
                                                    prefArgs {
                                                      prefixexp {
                                                        var {
                                                          name {
                                                            name: "load"
                                                            num: 0
                                                          }
                                                        }
                                                      }
                                                      args {
                                                        explist {
                                                          explist {
                                                            explast {
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                args {
                                                  str: "\'"
                                                }
                                              }
                                            }
                                          }
                                        }
                                        expressions {
                                          binary {
                                            leftexp {
                                              false: 3080192
                                            }
                                            binop {
                                              greater: 3080192
                                            }
                                            rightexp {
                                              true: 8224
                                            }
                                          }
                                        }
                                        expressions {
                                          unary {
                                            unop {
                                            }
                                            exp {
                                              nil: 4
                                            }
                                          }
                                        }
                                        expressions {
                                          tableconstructor {
                                          }
                                        }
                                        expressions {
                                        }
                                        expressions {
                                        }
                                        expressions {
                                          tableconstructor {
                                          }
                                        }
                                        expressions {
                                          str: "debug.traceback"
                                        }
                                        explast {
                                          prefixexp {
                                            functioncall {
                                              prefArgs {
                                                prefixexp {
                                                }
                                                args {
                                                  str: "io.read\'"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              condition {
                                prefixexp {
                                  functioncall {
                                    prefArgs {
                                      prefixexp {
                                        var {
                                          name {
                                            name: "load"
                                            num: 0
                                          }
                                        }
                                      }
                                      args {
                                        explist {
                                          explist {
                                            explast {
                                              function {
                                                body {
                                                  parlist {
                                                  }
                                                  block {
                                                    chunk {
                                                      laststat {
                                                        explist {
                                                          explist {
                                                            explast {
                                                              function {
                                                                body {
                                                                  parlist {
                                                                    ellipsis: "\373"
                                                                  }
                                                                  block {
                                                                    chunk {
                                                                      stat {
                                                                        whilecycle {
                                                                          condition {
                                                                          }
                                                                          doblock {
                                                                            block {
                                                                              chunk {
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      laststat {
                                                                        explist {
                                                                          explist {
                                                                            explast {
                                                                              ellipsis: ""
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      condition {
                        unary {
                          unop {
                            length: 4096
                          }
                          exp {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                prefixexp {
                  functioncall {
                    prefArgs {
                      prefixexp {
                      }
                      args {
                        str: "\001\006"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 5
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
      clauses {
        condition {
        }
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
          }
        }
      }
      condition {
        nil: 0
      }
    }
  }
}
