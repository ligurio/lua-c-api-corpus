chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
                number: 2.25
              }
              stopexp {
                number: 0
              }
              stepexp {
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
      condition {
        nil: 0
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    list {
                      varlist {
                        var {
                        }
                        vars {
                        }
                      }
                      explist {
                        explast {
                          binary {
                            leftexp {
                              prefixexp {
                              }
                            }
                            binop {
                              mult: 538976260
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  prefixexp {
                                  }
                                }
                                binop {
                                  add: 2
                                }
                                rightexp {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              condition {
                prefixexp {
                  exp {
                    binary {
                      leftexp {
                        prefixexp {
                        }
                      }
                      binop {
                        add: 2
                      }
                      rightexp {
                        binary {
                          leftexp {
                            prefixexp {
                              functioncall {
                                prefArgs {
                                  prefixexp {
                                    exp {
                                      ellipsis: "\000\212"
                                    }
                                  }
                                  args {
                                    str: "\'-8<table.pack\'\'/8<\'<8<8"
                                  }
                                }
                              }
                            }
                          }
                          binop {
                            add: 2
                          }
                          rightexp {
                            unary {
                              unop {
                                not: 91
                              }
                              exp {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                                      }
                                      binop {
                                        div: 0
                                      }
                                      rightexp {
                                        str: "\'-8<table.pack\'\'/8<\'<8<8"
                                      }
                                    }
                                  }
                                  binop {
                                    div: 0
                                  }
                                  rightexp {
                                    binary {
                                      leftexp {
                                      }
                                      binop {
                                      }
                                      rightexp {
                                        binary {
                                          leftexp {
                                          }
                                          binop {
                                            equal: 0
                                          }
                                          rightexp {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            semicolon: true
          }
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
                number: 2.25
              }
              stopexp {
                number: 0
              }
              stepexp {
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
      condition {
        false: 0
      }
    }
  }
}
