chunk {
  stat {
    call {
      prefArgs {
        prefixexp {
          var {
            name {
              name: "load"
              num: 0
            }
          }
        }
        args {
          explist {
            explist {
              expressions {
                function {
                  body {
                    parlist {
                      ellipsis: "_G"
                    }
                    block {
                      chunk {
                        stat {
                          semicolon: true
                        }
                        laststat {
                          explist {
                            explist {
                              expressions {
                                binary {
                                  leftexp {
                                  }
                                  binop {
                                    concat: 537557861
                                  }
                                  rightexp {
                                    number: 1.390671161567e-309
                                  }
                                }
                              }
                              expressions {
                              }
                              expressions {
                                number: 1.390671161567e-309
                              }
                              explast {
                              }
                            }
                          }
                          semicolon: false
                        }
                      }
                    }
                  }
                }
              }
              explast {
                str: "\001\000\000\000\000\000\000\021"
              }
            }
          }
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
      clauses {
        condition {
        }
        block {
          chunk {
            stat {
            }
          }
        }
      }
    }
    semicolon: true
  }
}
