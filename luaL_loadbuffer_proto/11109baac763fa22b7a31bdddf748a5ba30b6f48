chunk {
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        function {
          body {
            block {
              chunk {
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
          }
        }
      }
      condition {
        ellipsis: "\005"
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            explist {
              explist {
                explast {
                  ellipsis: "111111111111111111111111111111111111111111111111111111111111111111111111"
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: true
          }
        }
      }
      condition {
        ellipsis: "\303"
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        function {
          body {
            block {
              chunk {
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
        function {
          body {
            block {
              chunk {
                laststat {
                  explist {
                    explist {
                      expressions {
                        function {
                          body {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                      expressions {
                        function {
                          body {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                      expressions {
                        function {
                          body {
                            parlist {
                            }
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                      expressions {
                      }
                      expressions {
                        function {
                          body {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                      expressions {
                        function {
                          body {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                      explast {
                        binary {
                          leftexp {
                          }
                          binop {
                          }
                          rightexp {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
}
