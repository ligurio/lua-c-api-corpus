chunk {
  stat {
    func {
      name {
        firstname {
          name: "package.searchpath\271"
          num: 11776
        }
      }
      body {
        block {
          chunk {
            laststat {
            }
          }
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 11776
      }
      funcbody {
        block {
          chunk {
            stat {
              func {
                name {
                  firstname {
                    name: "\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177"
                    num: 0
                  }
                  lastname {
                    name: "package.searchpath\271"
                    num: 11776
                  }
                }
                body {
                  parlist {
                    ellipsis: "package.config"
                  }
                  block {
                    chunk {
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              semicolon: true
            }
            stat {
              semicolon: true
            }
            stat {
            }
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    block {
      block {
        chunk {
          stat {
            call {
              prefArgs {
                prefixexp {
                  var {
                    name {
                      name: "load"
                      num: 6029312
                    }
                  }
                }
                args {
                  str: "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
                }
              }
            }
            semicolon: true
          }
        }
      }
    }
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: "counter_+"
          num: 6513008
        }
        names {
          name: "counter_3"
          num: 0
        }
      }
      explist {
        expressions {
        }
        explast {
          number: -728.06551170535386
        }
      }
    }
    semicolon: true
  }
  stat {
    block {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    ifstat {
                      condition {
                      }
                      first {
                        chunk {
                          laststat {
                          }
                        }
                      }
                      clauses {
                        condition {
                        }
                        block {
                          chunk {
                            laststat {
                              explist {
                                explist {
                                  explast {
                                    prefixexp {
                                      functioncall {
                                        prefArgs {
                                          prefixexp {
                                            exp {
                                              str: "\007\000\000\000"
                                            }
                                          }
                                          args {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      clauses {
                        condition {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                }
                                args {
                                  explist {
                                  }
                                }
                              }
                            }
                          }
                        }
                        block {
                          chunk {
                          }
                        }
                      }
                      last {
                        chunk {
                          laststat {
                            semicolon: true
                          }
                        }
                      }
                    }
                  }
                  stat {
                  }
                  stat {
                    semicolon: true
                  }
                }
              }
              condition {
                binary {
                  leftexp {
                    str: "\000\212"
                  }
                  binop {
                    mult: 0
                  }
                  rightexp {
                    binary {
                      leftexp {
                        str: "string.gmatch"
                      }
                      binop {
                      }
                      rightexp {
                        unary {
                          unop {
                            negate: 301989888
                          }
                          exp {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          laststat {
            semicolon: true
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            ifstat {
              condition {
              }
              first {
                chunk {
                  laststat {
                  }
                }
              }
              clauses {
                condition {
                }
                block {
                  chunk {
                    laststat {
                      explist {
                        explist {
                          explast {
                            prefixexp {
                              functioncall {
                                prefArgs {
                                  prefixexp {
                                    exp {
                                      str: "\007\000\000\000"
                                    }
                                  }
                                  args {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              clauses {
                condition {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                        }
                        args {
                          explist {
                          }
                        }
                      }
                    }
                  }
                }
                block {
                  chunk {
                  }
                }
              }
              last {
                chunk {
                  laststat {
                    semicolon: true
                  }
                }
              }
            }
          }
          stat {
          }
          stat {
            semicolon: true
          }
        }
      }
      condition {
        binary {
          leftexp {
            str: "\000\212"
          }
          binop {
            mult: 0
          }
          rightexp {
            binary {
              leftexp {
                number: 0
              }
              binop {
              }
              rightexp {
                prefixexp {
                  functioncall {
                    prefArgs {
                      prefixexp {
                        var {
                          name {
                            name: "collectgarbage"
                            num: 0
                          }
                        }
                      }
                      args {
                        explist {
                          explist {
                            expressions {
                              str: "stop"
                            }
                            expressions {
                            }
                            expressions {
                              ellipsis: "%\000\000\000\000\000\000\000"
                            }
                            explast {
                              binary {
                                leftexp {
                                  tableconstructor {
                                    fieldlist {
                                      firstField {
                                      }
                                      lastSep {
                                        comma: 219
                                      }
                                    }
                                  }
                                }
                                binop {
                                }
                                rightexp {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: "tonumber"
          num: 0
        }
        lastname {
          name: ""
          num: 6513008
        }
      }
      body {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    localfunc {
      name {
        name: "collectgarbage"
        num: 0
      }
      funcbody {
        block {
          chunk {
            laststat {
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
      first {
        chunk {
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
          num: 6029312
        }
        names {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
          tableconstructor {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              call {
                prefArgs {
                  prefixexp {
                    var {
                      name {
                        name: "load"
                        num: 6029312
                      }
                    }
                  }
                  args {
                    str: "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  laststat {
    semicolon: true
  }
}
