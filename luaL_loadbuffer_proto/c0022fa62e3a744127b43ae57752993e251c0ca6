chunk {
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          binary {
            leftexp {
              number: -5.391989333430128e+67
            }
            binop {
            }
            rightexp {
              number: -5.391989333430128e+67
            }
          }
        }
        expressions {
        }
        expressions {
        }
        explast {
          binary {
            leftexp {
              number: 0
            }
            binop {
            }
            rightexp {
              number: -5.391989333430128e+67
            }
          }
        }
      }
    }
  }
  laststat {
    explist {
      explist {
        expressions {
        }
        explast {
          binary {
            leftexp {
              unary {
                unop {
                  negate: 124
                }
                exp {
                  unary {
                    unop {
                      length: 124
                    }
                    exp {
                    }
                  }
                }
              }
            }
            binop {
            }
            rightexp {
              binary {
                leftexp {
                  unary {
                    unop {
                      negate: 124
                    }
                    exp {
                      unary {
                        unop {
                          length: 162
                        }
                        exp {
                          tableconstructor {
                            fieldlist {
                              firstField {
                              }
                              lastSep {
                                comma: 124
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                binop {
                  or: 0
                }
                rightexp {
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
}
