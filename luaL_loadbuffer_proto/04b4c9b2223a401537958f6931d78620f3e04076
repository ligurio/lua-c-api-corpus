chunk {
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
        tableconstructor {
          fieldlist {
            firstField {
              expression {
                str: "callunroll"
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
      namedArgs {
        prefixexp {
        }
        name {
          name: ""
          num: 0
        }
        args {
          tableconstructor {
            fieldlist {
              firstField {
                namedassign {
                  name {
                    name: "maxsnap"
                    num: 0
                  }
                  value {
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
        number: 4.4501477170144028e-308
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    semicolon: true
                  }
                }
              }
              condition {
              }
            }
          }
          stat {
            semicolon: true
          }
        }
      }
    }
  }
}
