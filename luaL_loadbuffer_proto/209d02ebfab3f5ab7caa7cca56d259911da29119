chunk {
  stat {
    forcyclename {
      name {
        name: "~"
        num: 0
      }
      startexp {
        unary {
          unop {
          }
          exp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    str: "\'<66>.633332<\'<8"
                  }
                  binop {
                  }
                  rightexp {
                    str: "\'<66>.633332<\'<8"
                  }
                }
              }
              binop {
                sub: 0
              }
              rightexp {
                str: "\'<66>.633332<\'<8"
              }
            }
          }
        }
      }
      stopexp {
        unary {
          unop {
            negate: 7995392
          }
          exp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    str: "\'<66>.633332<\'<8"
                  }
                  binop {
                    or: 167772160
                  }
                  rightexp {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                            function {
                              body {
                                block {
                                  chunk {
                                    stat {
                                      call {
                                        prefArgs {
                                          prefixexp {
                                            var {
                                              indexname {
                                                prefixexp {
                                                  functioncall {
                                                    namedArgs {
                                                      prefixexp {
                                                      }
                                                      name {
                                                        name: ""
                                                        num: 0
                                                      }
                                                      args {
                                                        str: "\036\000\000\000\000\000\000\000"
                                                      }
                                                    }
                                                  }
                                                }
                                                Name: ""
                                              }
                                            }
                                          }
                                          args {
                                          }
                                        }
                                      }
                                    }
                                    laststat {
                                      semicolon: true
                                    }
                                  }
                                }
                              }
                            }
                          }
                          binop {
                          }
                          rightexp {
                            str: "\'<66>.633332<\'<8"
                          }
                        }
                      }
                      binop {
                        equal: 1280
                      }
                      rightexp {
                        str: "\'<66>.633332<\'<8"
                      }
                    }
                  }
                }
              }
              binop {
              }
              rightexp {
                str: "\'<66>.633332<\'<8"
              }
            }
          }
        }
      }
      stepexp {
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                      stat {
                      }
                    }
                  }
                }
              }
              semicolon: false
            }
          }
        }
      }
    }
    semicolon: false
  }
}
