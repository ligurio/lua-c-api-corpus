chunk {
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: "&"
        num: 0
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
          var {
            name {
              name: "collectgarbage"
              num: 0
            }
          }
        }
        args {
          explist {
            explist {
              expressions {
                str: "step"
              }
              expressions {
                unary {
                  unop {
                    negate: 0
                  }
                  exp {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                            number: 960
                          }
                          binop {
                            mult: 1751351296
                          }
                          rightexp {
                            unary {
                              unop {
                                negate: 2304
                              }
                              exp {
                              }
                            }
                          }
                        }
                      }
                      binop {
                        mult: 0
                      }
                      rightexp {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                number: 960
                              }
                              binop {
                                mult: 1751351296
                              }
                              rightexp {
                                unary {
                                  unop {
                                    negate: 2304
                                  }
                                  exp {
                                  }
                                }
                              }
                            }
                          }
                          binop {
                            mult: 0
                          }
                          rightexp {
                            binary {
                              leftexp {
                                nil: 0
                              }
                              binop {
                                sub: 0
                              }
                              rightexp {
                                binary {
                                  leftexp {
                                    false: 2560
                                  }
                                  binop {
                                    mult: 32768
                                  }
                                  rightexp {
                                    binary {
                                      leftexp {
                                        number: 420
                                      }
                                      binop {
                                        mult: 0
                                      }
                                      rightexp {
                                        number: 420
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              explast {
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: "d"
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: ""
        }
      }
    }
  }
}
