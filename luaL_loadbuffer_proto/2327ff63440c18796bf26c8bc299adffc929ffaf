chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        prefixexp {
          functioncall {
            prefArgs {
              prefixexp {
                var {
                  name {
                    name: "xpcall"
                    num: 0
                  }
                }
              }
              args {
                explist {
                  explist {
                    expressions {
                      prefixexp {
                        var {
                          name {
                            name: "collectgarbage"
                            num: 0
                          }
                        }
                      }
                    }
                    expressions {
                      prefixexp {
                        var {
                          name {
                            name: "collectgarbage"
                            num: 0
                          }
                        }
                      }
                    }
                    explast {
                      true: 5
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    str: "    \027                                 "
                  }
                  binop {
                    concat: 0
                  }
                  rightexp {
                  }
                }
              }
              binop {
                concat: 227
              }
              rightexp {
                str: "    \027                                 "
              }
            }
          }
          binop {
            mult: 8
          }
          rightexp {
            str: "<6\'*6<\'<"
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  laststat {
    break: 0
  }
}
