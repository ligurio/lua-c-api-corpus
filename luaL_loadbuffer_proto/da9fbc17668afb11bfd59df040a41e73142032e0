chunk {
  stat {
    whilecycle {
      condition {
        str: "counter_8"
      }
      doblock {
        block {
          chunk {
            stat {
              localnames {
                namelist {
                  firstname {
                    name: "_\022\000____\376________\376_"
                    num: 0
                  }
                  names {
                    name: "counr_8"
                    num: 0
                  }
                }
              }
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                      list {
                        varlist {
                          var {
                          }
                        }
                        explist {
                          expressions {
                            number: 0
                          }
                          explast {
                          }
                        }
                      }
                      semicolon: true
                    }
                    stat {
                      call {
                      }
                    }
                  }
                }
                condition {
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        unary {
          unop {
          }
          exp {
            str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        tableconstructor {
          fieldlist {
            firstField {
            }
            fields {
              field {
              }
              sep {
                semicolon: 6
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 12800
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: true
          }
          stat {
            localnames {
              namelist {
                firstname {
                  name: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                  num: 0
                }
                names {
                  name: "counter_8"
                  num: 0
                }
              }
              explist {
                expressions {
                }
                explast {
                  number: -35651608.12500108
                }
              }
            }
            semicolon: false
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    list {
                      varlist {
                        var {
                        }
                      }
                      explist {
                        expressions {
                          ellipsis: ""
                        }
                        expressions {
                          number: -35651608.12500108
                        }
                        expressions {
                          str: "\'<mathn<7<<7<\'<9"
                        }
                        expressions {
                        }
                        explast {
                          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                        }
                      }
                    }
                    semicolon: false
                  }
                  stat {
                    call {
                      namedArgs {
                        prefixexp {
                          functioncall {
                            prefArgs {
                              prefixexp {
                                functioncall {
                                  prefArgs {
                                    prefixexp {
                                      var {
                                        name {
                                          name: "collectgarbage"
                                          num: 0
                                        }
                                      }
                                    }
                                    args {
                                      explist {
                                        explist {
                                          expressions {
                                            ellipsis: "move"
                                          }
                                          expressions {
                                            prefixexp {
                                              exp {
                                                str: "xpcall"
                                              }
                                            }
                                          }
                                          explast {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              args {
                                tableconstructor {
                                  fieldlist {
                                    firstField {
                                    }
                                    fields {
                                      field {
                                      }
                                      sep {
                                        semicolon: 6
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        name {
                          name: ""
                          num: 0
                        }
                        args {
                        }
                      }
                    }
                    semicolon: true
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                          stat {
                            repeatcycle {
                              block {
                                chunk {
                                  stat {
                                    list {
                                      varlist {
                                        var {
                                        }
                                      }
                                      explist {
                                        expressions {
                                          number: 0
                                        }
                                        explast {
                                        }
                                      }
                                    }
                                    semicolon: true
                                  }
                                  stat {
                                    call {
                                    }
                                  }
                                }
                              }
                              condition {
                              }
                            }
                            semicolon: true
                          }
                        }
                      }
                      condition {
                        str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'.>\'"
                      }
                    }
                  }
                }
              }
              condition {
                false: 0
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        true: 52
      }
    }
    semicolon: true
  }
  stat {
    block {
      block {
        chunk {
          laststat {
            explist {
              explist {
                expressions {
                  number: 0
                }
                explast {
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    block {
      block {
        chunk {
          stat {
            forcyclelist {
              names {
                firstname {
                  name: ""
                  num: 0
                }
              }
              expressions {
                explast {
                }
              }
              doblock {
                block {
                  chunk {
                    laststat {
                      explist {
                        explist {
                          explast {
                            number: 2.12199579096527e-314
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          explist {
            explist {
              expressions {
                ellipsis: "move"
              }
              expressions {
                prefixexp {
                  exp {
                    str: "xpcall"
                  }
                }
              }
              explast {
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        true: 1
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    semicolon: false
  }
  stat {
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
    block {
      block {
        chunk {
          stat {
            localfunc {
              name {
                name: "math.min"
                num: 0
              }
              funcbody {
                block {
                  chunk {
                  }
                }
              }
            }
            semicolon: true
          }
          stat {
            semicolon: true
          }
          stat {
            semicolon: true
          }
        }
      }
    }
  }
  stat {
    semicolon: false
  }
  laststat {
  }
}
