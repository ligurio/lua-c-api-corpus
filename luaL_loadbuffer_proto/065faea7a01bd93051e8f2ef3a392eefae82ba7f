chunk {
  stat {
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "load"
          num: 806354944
        }
      }
      expressions {
        expressions {
          binary {
            leftexp {
              number: -424
            }
            binop {
              mult: 0
            }
            rightexp {
              binary {
                leftexp {
                }
                binop {
                  mult: 8388608
                }
                rightexp {
                  binary {
                    leftexp {
                      number: -424
                    }
                    binop {
                      mult: 0
                    }
                    rightexp {
                      binary {
                        leftexp {
                          unary {
                            unop {
                              not: 0
                            }
                            exp {
                            }
                          }
                        }
                        binop {
                          mult: 0
                        }
                        rightexp {
                          binary {
                            leftexp {
                              number: -352
                            }
                            binop {
                              mult: 0
                            }
                            rightexp {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                  number: 2.59032689326815e-318
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        call {
                        }
                      }
                    }
                  }
                }
              }
              semicolon: false
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    call {
      prefArgs {
        prefixexp {
          var {
          }
        }
        args {
          explist {
            explist {
              expressions {
                binary {
                  leftexp {
                    number: -424
                  }
                  binop {
                    mult: 8388608
                  }
                  rightexp {
                    binary {
                      leftexp {
                        binary {
                          leftexp {
                            str: "\'<<\'<<8"
                          }
                          binop {
                            div: 3472883712
                          }
                          rightexp {
                            number: -4.9591064453125e-05
                          }
                        }
                      }
                      binop {
                        mult: 8388608
                      }
                      rightexp {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                false: 8388608
                              }
                              binop {
                                div: 9
                              }
                              rightexp {
                                binary {
                                  leftexp {
                                    number: -4.9591064453125e-05
                                  }
                                  binop {
                                    mult: 0
                                  }
                                  rightexp {
                                    binary {
                                      leftexp {
                                        number: -488
                                      }
                                      binop {
                                        mult: 0
                                      }
                                      rightexp {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          binop {
                            mult: 2048
                          }
                          rightexp {
                            binary {
                              leftexp {
                                number: -424
                              }
                              binop {
                                mult: 0
                              }
                              rightexp {
                                binary {
                                  leftexp {
                                    number: -352
                                  }
                                  binop {
                                    mult: 0
                                  }
                                  rightexp {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              expressions {
              }
              expressions {
                str: ""
              }
              expressions {
                number: -128.25205995336
              }
              explast {
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
}
