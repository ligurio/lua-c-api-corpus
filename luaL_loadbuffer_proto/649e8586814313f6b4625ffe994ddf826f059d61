chunk {
  stat {
    call {
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
          number: 0
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            unary {
              unop {
                length: 4
              }
              exp {
                prefixexp {
                  var {
                  }
                }
              }
            }
          }
          binop {
            and: 0
          }
          rightexp {
            str: ""
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        whilecycle {
                          condition {
                            tableconstructor {
                              fieldlist {
                                firstField {
                                  expression {
                                    binary {
                                      leftexp {
                                        binary {
                                          leftexp {
                                            number: -416
                                          }
                                          binop {
                                            exp: 0
                                          }
                                          rightexp {
                                            number: 116.95316997449845
                                          }
                                        }
                                      }
                                      binop {
                                        mod: 65536
                                      }
                                      rightexp {
                                        binary {
                                          leftexp {
                                            binary {
                                              leftexp {
                                                number: 0
                                              }
                                              binop {
                                                sub: 2
                                              }
                                              rightexp {
                                                unary {
                                                  unop {
                                                    length: 0
                                                  }
                                                  exp {
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          binop {
                                            sub: 2
                                          }
                                          rightexp {
                                            number: 0
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                fields {
                                  field {
                                    exprassign {
                                      key {
                                      }
                                      value {
                                        number: 116.95316997449845
                                      }
                                    }
                                  }
                                  sep {
                                  }
                                }
                              }
                            }
                          }
                          doblock {
                            block {
                              chunk {
                                stat {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                  tableconstructor {
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              semicolon: true
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              localnames {
                namelist {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                explist {
                  expressions {
                    number: nan
                  }
                  explast {
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            laststat {
              explist {
                explist {
                  explast {
                    false: 369098753
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
}
