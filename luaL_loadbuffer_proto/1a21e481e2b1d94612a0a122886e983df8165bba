chunk {
  stat {
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 4
      }
      startexp {
      }
      stopexp {
        number: 0
      }
      stepexp {
        number: 3.45845952088873e-323
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 4
                }
                startexp {
                }
                stopexp {
                }
                stepexp {
                  number: -0
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        localnames {
                          namelist {
                            firstname {
                              name: ""
                              num: 0
                            }
                          }
                        }
                      }
                      stat {
                        forcyclename {
                          name {
                            name: ""
                            num: 0
                          }
                          startexp {
                            false: 1
                          }
                          stopexp {
                            binary {
                              leftexp {
                              }
                              binop {
                                mult: 1
                              }
                              rightexp {
                                prefixexp {
                                }
                              }
                            }
                          }
                          doblock {
                            block {
                              chunk {
                                stat {
                                  forcyclename {
                                    name {
                                      name: ""
                                      num: 0
                                    }
                                    startexp {
                                      false: 1
                                    }
                                    stopexp {
                                      binary {
                                        leftexp {
                                        }
                                        binop {
                                          lessEqual: 1
                                        }
                                        rightexp {
                                          prefixexp {
                                            exp {
                                              binary {
                                                leftexp {
                                                  prefixexp {
                                                  }
                                                }
                                                binop {
                                                  or: 1
                                                }
                                                rightexp {
                                                  prefixexp {
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    stepexp {
                                    }
                                    doblock {
                                      block {
                                        chunk {
                                          stat {
                                            ifstat {
                                              condition {
                                                prefixexp {
                                                }
                                              }
                                              first {
                                                chunk {
                                                  stat {
                                                    forcyclename {
                                                      name {
                                                        name: ""
                                                        num: 0
                                                      }
                                                      startexp {
                                                        false: 1
                                                      }
                                                      stopexp {
                                                        binary {
                                                          leftexp {
                                                          }
                                                          binop {
                                                            lessEqual: 1
                                                          }
                                                          rightexp {
                                                            prefixexp {
                                                              exp {
                                                                binary {
                                                                  leftexp {
                                                                    prefixexp {
                                                                    }
                                                                  }
                                                                  binop {
                                                                    or: 1
                                                                  }
                                                                  rightexp {
                                                                    prefixexp {
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      stepexp {
                                                      }
                                                      doblock {
                                                        block {
                                                          chunk {
                                                            stat {
                                                              ifstat {
                                                                condition {
                                                                  prefixexp {
                                                                  }
                                                                }
                                                                first {
                                                                  chunk {
                                                                  }
                                                                }
                                                              }
                                                              semicolon: true
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            semicolon: true
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
