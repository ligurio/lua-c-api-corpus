chunk {
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 1024
      }
      startexp {
      }
      stopexp {
        number: 1.35882332036304e-312
      }
      stepexp {
      }
      doblock {
        block {
          chunk {
            stat {
              call {
                prefArgs {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                        }
                        args {
                          str: "$"
                        }
                      }
                    }
                  }
                  args {
                  }
                }
              }
            }
            stat {
              semicolon: true
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              semicolon: true
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              ifstat {
                condition {
                }
                first {
                  chunk {
                  }
                }
                last {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              semicolon: true
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              call {
                namedArgs {
                  prefixexp {
                    var {
                    }
                  }
                  name {
                    name: ""
                    num: 0
                  }
                  args {
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                    }
                    stat {
                    }
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                        prefArgs {
                          prefixexp {
                          }
                          args {
                            explist {
                              explist {
                                expressions {
                                  binary {
                                    leftexp {
                                    }
                                    binop {
                                      equal: 0
                                    }
                                    rightexp {
                                    }
                                  }
                                }
                                explast {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      forcyclename {
                        name {
                          name: ""
                          num: 0
                        }
                        startexp {
                        }
                        stopexp {
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                      call {
                      }
                    }
                    stat {
                    }
                    stat {
                      call {
                      }
                    }
                  }
                }
                condition {
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: "$"
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    list {
      varlist {
        var {
          indexexpr {
            prefixexp {
              functioncall {
              }
            }
            exp {
              false: 4
            }
          }
        }
        vars {
          indexexpr {
            prefixexp {
            }
            exp {
              prefixexp {
                functioncall {
                }
              }
            }
          }
        }
      }
      explist {
        expressions {
          tableconstructor {
          }
        }
        explast {
        }
      }
    }
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
    semicolon: false
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 1024
      }
      startexp {
      }
      stopexp {
        number: 1.2516040454103166e-308
      }
      stepexp {
      }
      doblock {
        block {
          chunk {
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              call {
              }
              semicolon: false
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
              semicolon: true
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              ifstat {
                condition {
                  binary {
                    leftexp {
                    }
                    binop {
                      exp: 0
                    }
                    rightexp {
                    }
                  }
                }
                first {
                  chunk {
                  }
                }
                clauses {
                  condition {
                  }
                  block {
                    chunk {
                      stat {
                        call {
                          namedArgs {
                            prefixexp {
                            }
                            name {
                              name: ""
                              num: 0
                            }
                            args {
                              str: "."
                            }
                          }
                        }
                      }
                    }
                  }
                }
                last {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              semicolon: true
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              semicolon: true
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 4
                }
                startexp {
                }
                stopexp {
                  number: 1.5
                }
                stepexp {
                  number: -0
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        call {
                        }
                      }
                      stat {
                        call {
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                      stat {
                      }
                      laststat {
                        explist {
                          explist {
                            explast {
                              str: "\377\377\377\004"
                            }
                          }
                        }
                        semicolon: false
                      }
                    }
                  }
                }
              }
            }
            stat {
              call {
                namedArgs {
                  prefixexp {
                    var {
                      indexname {
                        prefixexp {
                          var {
                            indexname {
                              prefixexp {
                              }
                              Name: "\\001\\006"
                            }
                          }
                        }
                        Name: ""
                      }
                    }
                  }
                  name {
                    name: ""
                    num: 0
                  }
                  args {
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
              semicolon: true
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
            stat {
              call {
              }
            }
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
          functioncall {
            prefArgs {
              prefixexp {
                functioncall {
                  namedArgs {
                    prefixexp {
                    }
                    name {
                      name: "%"
                      num: 0
                    }
                    args {
                    }
                  }
                }
              }
              args {
              }
            }
          }
        }
        name {
          name: "\274"
          num: 0
        }
        args {
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    call {
    }
    semicolon: false
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
}
