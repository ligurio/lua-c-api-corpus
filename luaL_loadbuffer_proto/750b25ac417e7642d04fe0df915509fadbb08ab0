chunk {
  stat {
    semicolon: false
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            whilecycle {
              condition {
                tableconstructor {
                  fieldlist {
                    firstField {
                      expression {
                        prefixexp {
                          functioncall {
                            prefArgs {
                              prefixexp {
                                var {
                                  name {
                                    name: "xpcall"
                                    num: 0
                                  }
                                }
                              }
                              args {
                                explist {
                                  explist {
                                    expressions {
                                      prefixexp {
                                        var {
                                          name {
                                            name: "collectgarbage"
                                            num: 2097152
                                          }
                                        }
                                      }
                                    }
                                    expressions {
                                      prefixexp {
                                        var {
                                          name {
                                            name: "collectgarbage"
                                            num: 2097152
                                          }
                                        }
                                      }
                                    }
                                    expressions {
                                      number: 7.29112189732944e-304
                                    }
                                    expressions {
                                      prefixexp {
                                        functioncall {
                                          namedArgs {
                                            prefixexp {
                                            }
                                            name {
                                              name: "2"
                                              num: 0
                                            }
                                            args {
                                            }
                                          }
                                        }
                                      }
                                    }
                                    explast {
                                      true: 25393
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                    stat {
                      semicolon: true
                    }
                  }
                }
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
                str: "\000\000\000\000\000\000\000\031"
              }
              binop {
                sub: 0
              }
              rightexp {
                str: "\'-6/6&33332<\'<8<8"
              }
            }
          }
          binop {
            div: 2048
          }
          rightexp {
            binary {
              leftexp {
                true: 1684104562
              }
              binop {
              }
              rightexp {
                false: 0
              }
            }
          }
        }
      }
    }
  }
}
