chunk {
  stat {
    forcyclename {
      name {
        name: "_ENV"
        num: 0
      }
      startexp {
        str: "\000\000\000\000\000\000\000\000"
      }
      stopexp {
        number: -1.6122275479153505e+265
      }
      stepexp {
        binary {
          leftexp {
            unary {
              unop {
                negate: 538968064
              }
              exp {
              }
            }
          }
          binop {
            sub: 33554432
          }
          rightexp {
            binary {
              leftexp {
              }
              binop {
                less: 2264924160
              }
              rightexp {
                prefixexp {
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  explast {
                    tableconstructor {
                      fieldlist {
                        firstField {
                        }
                        fields {
                          field {
                            expression {
                              tableconstructor {
                                fieldlist {
                                  firstField {
                                    exprassign {
                                      key {
                                        number: 0
                                      }
                                      value {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          sep {
                          }
                        }
                        lastSep {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
}
