chunk {
  stat {
    call {
      namedArgs {
        prefixexp {
        }
        name {
          name: "0"
          num: 0
        }
        args {
        }
      }
    }
    semicolon: false
  }
  stat {
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            stat {
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          functioncall {
                            prefArgs {
                              prefixexp {
                                functioncall {
                                  prefArgs {
                                    prefixexp {
                                    }
                                    args {
                                      str: "\'\r\nutf8.codes \'"
                                    }
                                  }
                                }
                              }
                              args {
                                str: "\'\r\nutf8.codes \'"
                              }
                            }
                          }
                        }
                        args {
                          str: "\'\r\nutf8.codes \'"
                        }
                      }
                    }
                  }
                  args {
                    explist {
                      explist {
                        expressions {
                          binary {
                            leftexp {
                            }
                            binop {
                            }
                            rightexp {
                            }
                          }
                        }
                        explast {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
}
