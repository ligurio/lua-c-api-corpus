chunk {
  stat {
    func {
      name {
        firstname {
          name: "tonumber"
          num: 2048
        }
      }
      body {
        parlist {
          namelist {
            namelist {
              firstname {
                name: ""
                num: 0
              }
            }
          }
        }
        block {
          chunk {
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                expressions {
                  expressions {
                    tableconstructor {
                      fieldlist {
                        firstField {
                          expression {
                            function {
                              body {
                                block {
                                  chunk {
                                    stat {
                                      block {
                                        block {
                                          chunk {
                                            laststat {
                                              semicolon: true
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  explast {
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              list {
                varlist {
                  var {
                  }
                  vars {
                    indexexpr {
                      prefixexp {
                        functioncall {
                          prefArgs {
                            prefixexp {
                            }
                            args {
                              str: "s"
                            }
                          }
                        }
                      }
                      exp {
                      }
                    }
                  }
                }
                explist {
                  expressions {
                    number: 6.63123684676648e-316
                  }
                  expressions {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                            exp {
                              ellipsis: "\\375\\377\\377\\377"
                            }
                          }
                          args {
                            str: "\'"
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    binary {
                      leftexp {
                        ellipsis: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
                      }
                      binop {
                        greater: 3080192
                      }
                      rightexp {
                        true: 8224
                      }
                    }
                  }
                  expressions {
                    unary {
                      unop {
                      }
                      exp {
                        nil: 4
                      }
                    }
                  }
                  expressions {
                    str: "debug.traceback"
                  }
                  expressions {
                    tableconstructor {
                      fieldlist {
                        firstField {
                        }
                        lastSep {
                          semicolon: 0
                        }
                      }
                    }
                  }
                  expressions {
                  }
                  expressions {
                  }
                  expressions {
                    binary {
                      leftexp {
                      }
                      binop {
                      }
                      rightexp {
                        nil: 0
                      }
                    }
                  }
                  expressions {
                    tableconstructor {
                    }
                  }
                  expressions {
                    str: "debug.traceback"
                  }
                  explast {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                          }
                          args {
                            str: "\'"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            forcyclelist {
              names {
                firstname {
                  name: "collectgarbage"
                  num: 101
                }
                names {
                  name: "collectgarbage"
                  num: 101
                }
                names {
                  name: ""
                  num: 127
                }
              }
              expressions {
                expressions {
                  prefixexp {
                    var {
                      name {
                        name: "collectgarbage"
                        num: 101
                      }
                    }
                  }
                }
                expressions {
                  nil: 0
                }
                explast {
                  function {
                    body {
                      parlist {
                        namelist {
                          namelist {
                            firstname {
                              name: "pcall"
                              num: 0
                            }
                          }
                        }
                      }
                      block {
                        chunk {
                          stat {
                            repeatcycle {
                              block {
                                chunk {
                                  stat {
                                    call {
                                      prefArgs {
                                        prefixexp {
                                        }
                                        args {
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              condition {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                    stat {
                      semicolon: true
                    }
                    laststat {
                      break: 0
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                  }
                  binop {
                  }
                  rightexp {
                    str: "\'<mathn<7<pack<7<\'<      }\n                          binop {\n                          }\n           9"
                  }
                }
              }
              binop {
              }
              rightexp {
                binary {
                  leftexp {
                  }
                  binop {
                  }
                  rightexp {
                    str: "\'<mathn<7<pack<7<\'<      }\n                          binop {\n                          }\n           9"
                  }
                }
              }
            }
          }
          binop {
          }
          rightexp {
            str: "\'<mathn<7<pack<7<\'<      }\n                          binop {\n                          }\n           9"
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        tableconstructor {
        }
      }
      doblock {
        block {
          chunk {
            laststat {
              explist {
                explist {
                  explast {
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
}
