chunk {
  stat {
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
          }
          binop {
            concat: 100728983
          }
          rightexp {
            binary {
              leftexp {
              }
              binop {
                lessEqual: 0
              }
              rightexp {
                binary {
                  leftexp {
                    str: "counter_+"
                  }
                  binop {
                    lessEqual: 0
                  }
                  rightexp {
                    binary {
                      leftexp {
                        str: "counter_+"
                      }
                      binop {
                      }
                      rightexp {
                        prefixexp {
                          exp {
                            prefixexp {
                              functioncall {
                                prefArgs {
                                  prefixexp {
                                    var {
                                      name {
                                        name: "xpcall"
                                        num: 262144
                                      }
                                    }
                                  }
                                  args {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              semicolon: true
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                  binary {
                    leftexp {
                    }
                    binop {
                    }
                    rightexp {
                      nil: 0
                    }
                  }
                }
              }
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                        }
                        binop {
                        }
                        rightexp {
                          binary {
                            leftexp {
                              str: "\'-8<table.pack\'\'/8<\'<8<8"
                            }
                            binop {
                              concat: 0
                            }
                            rightexp {
                              str: "\'-8<table.pack\'\'/8<\'<8<8"
                            }
                          }
                        }
                      }
                    }
                    binop {
                      div: 0
                    }
                    rightexp {
                      binary {
                        leftexp {
                          str: "\'-8<table.pack\'\'/8<\'<8<8"
                        }
                        binop {
                          add: 0
                        }
                        rightexp {
                          str: "\'-8<table.pack\'\'/8<\'<8<8"
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              forcyclename {
                name {
                  name: "\311\311\311"
                  num: 0
                }
                startexp {
                  binary {
                    leftexp {
                    }
                    binop {
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              str: "\'-8<table.pack\'\'/8<\'<8<8"
                            }
                            binop {
                              add: 0
                            }
                            rightexp {
                              str: "\'-8<table.pack\'\'/8<\'<8<8"
                            }
                          }
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                          str: "\'-8<table.pack\'\'/8<\'<8<8"
                        }
                      }
                    }
                  }
                }
                stopexp {
                }
                stepexp {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          str: "\'-8<table.pack\'\'/8<\'<8<8"
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                          str: "\'-8<table.pack\'\'/8<\'<8<8"
                        }
                      }
                    }
                    binop {
                      div: 0
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                            }
                            binop {
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  str: "\'-8<table.pack\'\'/8<\'<8<8"
                                }
                                binop {
                                  concat: 0
                                }
                                rightexp {
                                  str: "\'-8<table.pack\'\'/8<\'<8<8"
                                }
                              }
                            }
                          }
                        }
                        binop {
                          div: 0
                        }
                        rightexp {
                          binary {
                            leftexp {
                              str: "\'-8<table.pack\'\'/8<\'<8<8"
                            }
                            binop {
                              add: 0
                            }
                            rightexp {
                              str: "\'-8<table.pack\'\'/8<\'<8<8"
                            }
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
