chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
          stat {
            semicolon: true
          }
        }
      }
      condition {
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
          indexname {
            prefixexp {
              var {
                indexexpr {
                  prefixexp {
                  }
                  exp {
                    tableconstructor {
                      fieldlist {
                        firstField {
                        }
                        lastSep {
                          semicolon: 0
                        }
                      }
                    }
                  }
                }
              }
            }
            Name: ""
          }
        }
      }
      explist {
        explast {
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        lastname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: ""
          num: 0
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    whilecycle {
      condition {
        str: "package.loaded"
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    forcyclename {
      name {
        name: "\377\377\377\377\377\377\377\377\377"
        num: 0
      }
      startexp {
      }
      stopexp {
        ellipsis: "true"
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: ""
          num: 0
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
        nil: 127
      }
      doblock {
        block {
          chunk {
            laststat {
              explist {
                explist {
                  explast {
                    prefixexp {
                      functioncall {
                        namedArgs {
                          prefixexp {
                            var {
                              name {
                                name: ""
                                num: 0
                              }
                            }
                          }
                          name {
                            name: ""
                            num: 0
                          }
                          args {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    forcyclename {
      name {
        name: "\377\377\377\377\377\377\377\377\377"
        num: 0
      }
      startexp {
      }
      stopexp {
        ellipsis: "true"
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: false
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: false
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    func {
      name {
        firstname {
          name: "tonumber"
          num: 2048
        }
      }
      body {
        parlist {
          namelist {
            namelist {
              firstname {
                name: "4444444"
                num: 0
              }
            }
          }
        }
        block {
          chunk {
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: "\021"
                    num: 127
                  }
                  names {
                    name: "collectgarbage"
                    num: 101
                  }
                  names {
                    name: ""
                    num: 127
                  }
                }
                expressions {
                  expressions {
                    prefixexp {
                      var {
                        name {
                          name: "pcall"
                          num: 127
                        }
                      }
                    }
                  }
                  explast {
                    function {
                      body {
                        parlist {
                          namelist {
                            namelist {
                              firstname {
                                name: ""
                                num: 0
                              }
                            }
                          }
                        }
                        block {
                          chunk {
                            stat {
                              repeatcycle {
                                block {
                                  chunk {
                                    stat {
                                      whilecycle {
                                        condition {
                                          binary {
                                            leftexp {
                                              prefixexp {
                                              }
                                            }
                                            binop {
                                              concat: 0
                                            }
                                            rightexp {
                                              binary {
                                                leftexp {
                                                  prefixexp {
                                                  }
                                                }
                                                binop {
                                                  concat: 0
                                                }
                                                rightexp {
                                                  prefixexp {
                                                    functioncall {
                                                      prefArgs {
                                                        prefixexp {
                                                          var {
                                                            name {
                                                              name: "xpcall"
                                                              num: 0
                                                            }
                                                          }
                                                        }
                                                        args {
                                                          explist {
                                                            explist {
                                                              expressions {
                                                                function {
                                                                  body {
                                                                    block {
                                                                      chunk {
                                                                        stat {
                                                                          list {
                                                                            varlist {
                                                                              var {
                                                                                name {
                                                                                  name: ""
                                                                                  num: 4278190080
                                                                                }
                                                                              }
                                                                              vars {
                                                                              }
                                                                            }
                                                                            explist {
                                                                              expressions {
                                                                                number: 6.63123684676648e-316
                                                                              }
                                                                              expressions {
                                                                                prefixexp {
                                                                                  functioncall {
                                                                                    prefArgs {
                                                                                      prefixexp {
                                                                                      }
                                                                                      args {
                                                                                        str: "\'"
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                              expressions {
                                                                                binary {
                                                                                  leftexp {
                                                                                    ellipsis: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
                                                                                  }
                                                                                  binop {
                                                                                    greater: 3080192
                                                                                  }
                                                                                  rightexp {
                                                                                    true: 8224
                                                                                  }
                                                                                }
                                                                              }
                                                                              expressions {
                                                                                unary {
                                                                                  unop {
                                                                                  }
                                                                                  exp {
                                                                                    nil: 4
                                                                                  }
                                                                                }
                                                                              }
                                                                              expressions {
                                                                                tableconstructor {
                                                                                }
                                                                              }
                                                                              expressions {
                                                                              }
                                                                              expressions {
                                                                              }
                                                                              expressions {
                                                                                binary {
                                                                                  leftexp {
                                                                                  }
                                                                                  binop {
                                                                                  }
                                                                                  rightexp {
                                                                                    nil: 0
                                                                                  }
                                                                                }
                                                                              }
                                                                              expressions {
                                                                                tableconstructor {
                                                                                }
                                                                              }
                                                                              expressions {
                                                                                str: "debug.traceback"
                                                                              }
                                                                              explast {
                                                                                prefixexp {
                                                                                  functioncall {
                                                                                    prefArgs {
                                                                                      prefixexp {
                                                                                      }
                                                                                      args {
                                                                                        str: "\'"
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                          semicolon: true
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              expressions {
                                                                prefixexp {
                                                                  functioncall {
                                                                    prefArgs {
                                                                      prefixexp {
                                                                        exp {
                                                                          prefixexp {
                                                                            functioncall {
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      args {
                                                                        str: "}\001\'//\'  pni  pnil"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              explast {
                                                                tableconstructor {
                                                                  fieldlist {
                                                                    firstField {
                                                                    }
                                                                    fields {
                                                                      field {
                                                                        exprassign {
                                                                          key {
                                                                          }
                                                                          value {
                                                                            prefixexp {
                                                                              functioncall {
                                                                                namedArgs {
                                                                                  prefixexp {
                                                                                  }
                                                                                  name {
                                                                                    name: ""
                                                                                    num: 4294967294
                                                                                  }
                                                                                  args {
                                                                                    str: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      sep {
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        doblock {
                                          block {
                                            chunk {
                                            }
                                          }
                                        }
                                      }
                                      semicolon: true
                                    }
                                  }
                                }
                                condition {
                                  unary {
                                    unop {
                                      length: 4096
                                    }
                                    exp {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        whilecycle {
                          condition {
                          }
                          doblock {
                            block {
                              chunk {
                                laststat {
                                  explist {
                                    explist {
                                      expressions {
                                        tableconstructor {
                                          fieldlist {
                                            firstField {
                                            }
                                            lastSep {
                                              semicolon: 538968064
                                            }
                                          }
                                        }
                                      }
                                      explast {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      laststat {
                        break: 0
                        semicolon: true
                      }
                    }
                  }
                }
              }
            }
            stat {
              list {
                varlist {
                  var {
                    name {
                      name: ""
                      num: 4278190080
                    }
                  }
                  vars {
                  }
                }
                explist {
                  expressions {
                    number: 6.63123684676648e-316
                  }
                  expressions {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                          }
                          args {
                            str: "\'"
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    str: "debug.traceback"
                  }
                  expressions {
                    unary {
                      unop {
                      }
                      exp {
                        nil: 4
                      }
                    }
                  }
                  expressions {
                    false: 127
                  }
                  expressions {
                  }
                  expressions {
                  }
                  expressions {
                    binary {
                      leftexp {
                      }
                      binop {
                      }
                      rightexp {
                        nil: 0
                      }
                    }
                  }
                  expressions {
                    tableconstructor {
                    }
                  }
                  expressions {
                    str: "debug.traceback"
                  }
                  explast {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                          }
                          args {
                            str: "\'"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    whilecycle {
      condition {
        str: "package.loaded"
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      stepexp {
        nil: 0
      }
      doblock {
        block {
          chunk {
            laststat {
              break: 2099712
            }
          }
        }
      }
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        lastname {
          name: "package.loaded"
          num: 0
        }
      }
      body {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            number: -51.99218738079071
          }
          binop {
            mod: 8192
          }
          rightexp {
            unary {
              unop {
                negate: 8192
              }
              exp {
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
          num: 0
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          nil: 3590324224
        }
        explast {
          function {
            body {
              block {
                chunk {
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
}
