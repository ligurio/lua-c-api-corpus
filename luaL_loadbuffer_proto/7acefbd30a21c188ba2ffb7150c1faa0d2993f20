chunk {
  stat {
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        expressions {
          prefixexp {
          }
        }
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
        true: 536870912
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            stat {
              block {
                block {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: ""
          num: 0
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
      }
      body {
        parlist {
          ellipsis: ""
        }
        block {
          chunk {
            stat {
            }
            stat {
            }
            stat {
            }
            stat {
            }
            stat {
              ifstat {
                condition {
                }
                first {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
    semicolon: true
  }
  laststat {
    explist {
      explist {
        expressions {
          binary {
            leftexp {
              function {
                body {
                  block {
                    chunk {
                      stat {
                      }
                      stat {
                      }
                      stat {
                        semicolon: false
                      }
                      stat {
                        semicolon: true
                      }
                      stat {
                      }
                      stat {
                      }
                    }
                  }
                }
              }
            }
            binop {
              and: 64
            }
            rightexp {
              function {
                body {
                  block {
                    chunk {
                      laststat {
                        explist {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        explast {
        }
      }
    }
  }
}
