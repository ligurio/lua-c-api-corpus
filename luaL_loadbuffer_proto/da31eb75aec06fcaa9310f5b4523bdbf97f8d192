chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        false: 2359296
      }
      stopexp {
        number: 0
      }
      stepexp {
        number: -0
      }
      doblock {
        block {
          chunk {
            stat {
              ifstat {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        expression {
                          binary {
                            leftexp {
                              prefixexp {
                                exp {
                                  binary {
                                    leftexp {
                                      binary {
                                        leftexp {
                                        }
                                        binop {
                                          add: 0
                                        }
                                        rightexp {
                                          binary {
                                            leftexp {
                                              binary {
                                                leftexp {
                                                  binary {
                                                    leftexp {
                                                      number: -2.9747485543917394e+284
                                                    }
                                                    binop {
                                                      add: 0
                                                    }
                                                    rightexp {
                                                    }
                                                  }
                                                }
                                                binop {
                                                  concat: 7631721
                                                }
                                                rightexp {
                                                  str: "0.3E2"
                                                }
                                              }
                                            }
                                            binop {
                                              and: 1162627398
                                            }
                                            rightexp {
                                              binary {
                                                leftexp {
                                                  nil: 0
                                                }
                                                binop {
                                                }
                                                rightexp {
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    binop {
                                      concat: 0
                                    }
                                    rightexp {
                                      str: "0.3E2"
                                    }
                                  }
                                }
                              }
                            }
                            binop {
                              sub: 2
                            }
                            rightexp {
                              number: 3.3156184727898e-316
                            }
                          }
                        }
                      }
                    }
                  }
                }
                first {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
