chunk {
  stat {
  }
  stat {
    list {
      varlist {
        var {
          indexexpr {
            prefixexp {
            }
            exp {
            }
          }
        }
        vars {
        }
        vars {
          indexexpr {
            prefixexp {
            }
            exp {
              unary {
                unop {
                }
                exp {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                          nil: 134217728
                        }
                        binop {
                          and: 4294901759
                        }
                        rightexp {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                  binary {
                                    leftexp {
                                      tableconstructor {
                                      }
                                    }
                                    binop {
                                      and: 4294901759
                                    }
                                    rightexp {
                                      str: "\000\000\000\000\000\000\000\000"
                                    }
                                  }
                                }
                                binop {
                                }
                                rightexp {
                                  binary {
                                    leftexp {
                                      nil: 134217728
                                    }
                                    binop {
                                      and: 4294901759
                                    }
                                    rightexp {
                                      prefixexp {
                                        functioncall {
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            binop {
                              equal: 1024
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  nil: 134217728
                                }
                                binop {
                                  div: 0
                                }
                                rightexp {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      explist {
        expressions {
          ellipsis: "\\0select"
        }
        explast {
          true: 2048
        }
      }
    }
    semicolon: false
  }
  stat {
    semicolon: true
  }
  stat {
    semicolon: false
  }
  stat {
  }
  stat {
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "\\0select"
          num: 0
        }
      }
      expressions {
        expressions {
          ellipsis: "\205"
        }
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              call {
                prefArgs {
                  prefixexp {
                  }
                  args {
                    tableconstructor {
                      fieldlist {
                        firstField {
                        }
                        fields {
                          field {
                          }
                          sep {
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
}
