chunk {
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        exprassign {
                          key {
                            binary {
                              leftexp {
                                number: -2.9740338169555661e+284
                              }
                              binop {
                                greater: 256
                              }
                              rightexp {
                                number: 0
                              }
                            }
                          }
                          value {
                            unary {
                              unop {
                              }
                              exp {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        block {
                          block {
                            chunk {
                              laststat {
                                break: 0
                                semicolon: true
                              }
                            }
                          }
                        }
                        semicolon: true
                      }
                    }
                  }
                }
              }
            }
            stat {
              localfunc {
                name {
                  name: ""
                  num: 0
                }
                funcbody {
                  block {
                    chunk {
                      stat {
                        semicolon: false
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
}
