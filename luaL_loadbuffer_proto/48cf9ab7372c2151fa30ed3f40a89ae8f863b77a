chunk {
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: false
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            whilecycle {
              condition {
              }
              doblock {
                block {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
            semicolon: true
          }
          stat {
          }
          stat {
            ifstat {
              condition {
              }
              first {
                chunk {
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                        str: "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
            semicolon: true
          }
          stat {
            block {
              block {
                chunk {
                  stat {
                    call {
                      namedArgs {
                        prefixexp {
                        }
                        name {
                          name: ""
                          num: 0
                        }
                        args {
                        }
                      }
                    }
                  }
                  stat {
                    whilecycle {
                      condition {
                        unary {
                          unop {
                            length: 263
                          }
                          exp {
                            false: 0
                          }
                        }
                      }
                      doblock {
                        block {
                          chunk {
                            stat {
                              call {
                                prefArgs {
                                  prefixexp {
                                  }
                                  args {
                                  }
                                }
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              forcyclelist {
                                names {
                                  firstname {
                                    name: ""
                                    num: 0
                                  }
                                }
                                expressions {
                                  explast {
                                    function {
                                      body {
                                        parlist {
                                          ellipsis: "\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335"
                                        }
                                        block {
                                          chunk {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                doblock {
                                  block {
                                    chunk {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                    call {
                      prefArgs {
                        prefixexp {
                          var {
                            name {
                              name: "load"
                              num: 0
                            }
                          }
                        }
                        args {
                          str: "xCcmathio.type\\fffffffff333c333c3333332"
                        }
                      }
                    }
                  }
                  stat {
                    call {
                      prefArgs {
                        prefixexp {
                          var {
                            name {
                              name: ""
                              num: 0
                            }
                          }
                        }
                        args {
                          str: "xCcmath.typef-\\fffffffff333c333c3333332"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    whilecycle {
                      condition {
                        true: 4211015680
                      }
                      doblock {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  stat {
                    call {
                      namedArgs {
                        prefixexp {
                        }
                        name {
                          name: ""
                          num: 0
                        }
                        args {
                        }
                      }
                    }
                    semicolon: false
                  }
                  stat {
                    list {
                      varlist {
                        var {
                        }
                      }
                      explist {
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                exprassign {
                                  key {
                                    prefixexp {
                                    }
                                  }
                                  value {
                                  }
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                }
                                args {
                                  str: "\'"
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                              }
                            }
                          }
                        }
                        expressions {
                          nil: 7
                        }
                        expressions {
                        }
                        expressions {
                          tableconstructor {
                          }
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                expression {
                                }
                              }
                              fields {
                                field {
                                  exprassign {
                                    key {
                                      tableconstructor {
                                      }
                                    }
                                    value {
                                    }
                                  }
                                }
                                sep {
                                }
                              }
                              lastSep {
                                semicolon: 0
                              }
                            }
                          }
                        }
                        expressions {
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                expression {
                                  ellipsis: "len"
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          str: "\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"
                        }
                        explast {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  exp {
                                    nil: 5
                                  }
                                }
                                args {
                                  str: "\'"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                  }
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            call {
              namedArgs {
                prefixexp {
                }
                name {
                  name: "os.rename"
                  num: 0
                }
                args {
                }
              }
            }
          }
          stat {
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    whilecycle {
                      condition {
                        true: 4211015680
                      }
                      doblock {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  stat {
                    call {
                      namedArgs {
                        prefixexp {
                        }
                        name {
                          name: ""
                          num: 0
                        }
                        args {
                        }
                      }
                    }
                    semicolon: false
                  }
                  stat {
                    list {
                      varlist {
                        var {
                        }
                      }
                      explist {
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                exprassign {
                                  key {
                                    prefixexp {
                                    }
                                  }
                                  value {
                                  }
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                }
                                args {
                                  str: "\'"
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                              }
                            }
                          }
                        }
                        expressions {
                          nil: 7
                        }
                        expressions {
                        }
                        expressions {
                          tableconstructor {
                          }
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                expression {
                                }
                              }
                              fields {
                                field {
                                  exprassign {
                                    key {
                                      tableconstructor {
                                      }
                                    }
                                    value {
                                    }
                                  }
                                }
                                sep {
                                }
                              }
                              lastSep {
                                comma: 536870912
                              }
                            }
                          }
                        }
                        expressions {
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                expression {
                                  ellipsis: "len"
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          str: "\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"
                        }
                        explast {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  exp {
                                    nil: 5
                                  }
                                }
                                args {
                                  str: "\'"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                  }
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                  }
                }
              }
              condition {
                number: 4.94065645841247e-324
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                prefixexp {
                  exp {
                    function {
                      body {
                        parlist {
                          ellipsis: "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"
                        }
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: true
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
        }
        name {
          name: "os.rename"
          num: 0
        }
        args {
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        number: 2.42830789495587e-312
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            whilecycle {
              condition {
              }
              doblock {
                block {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
            semicolon: true
          }
          stat {
          }
          stat {
            ifstat {
              condition {
              }
              first {
                chunk {
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                        str: "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
            semicolon: true
          }
          stat {
            block {
              block {
                chunk {
                  stat {
                    call {
                      namedArgs {
                        prefixexp {
                        }
                        name {
                          name: ""
                          num: 0
                        }
                        args {
                        }
                      }
                    }
                  }
                  stat {
                    whilecycle {
                      condition {
                        unary {
                          unop {
                            length: 263
                          }
                          exp {
                            false: 0
                          }
                        }
                      }
                      doblock {
                        block {
                          chunk {
                            stat {
                              call {
                                prefArgs {
                                  prefixexp {
                                  }
                                  args {
                                  }
                                }
                              }
                            }
                            stat {
                              call {
                              }
                            }
                            stat {
                              forcyclelist {
                                names {
                                  firstname {
                                    name: ""
                                    num: 0
                                  }
                                }
                                expressions {
                                  explast {
                                    function {
                                      body {
                                        parlist {
                                          ellipsis: "\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335"
                                        }
                                        block {
                                          chunk {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                doblock {
                                  block {
                                    chunk {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                    call {
                      prefArgs {
                        prefixexp {
                          var {
                            name {
                              name: "load"
                              num: 0
                            }
                          }
                        }
                        args {
                          str: "xCcmathio.type\\fffffffff333c333c3333332"
                        }
                      }
                    }
                  }
                  stat {
                    call {
                      prefArgs {
                        prefixexp {
                          var {
                            name {
                              name: ""
                              num: 0
                            }
                          }
                        }
                        args {
                          str: "xCcmath.typef-\\fffffffff333c333c3333332"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    whilecycle {
                      condition {
                        true: 4211015680
                      }
                      doblock {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  stat {
                    call {
                      namedArgs {
                        prefixexp {
                        }
                        name {
                          name: ""
                          num: 0
                        }
                        args {
                        }
                      }
                    }
                    semicolon: false
                  }
                  stat {
                    list {
                      varlist {
                        var {
                        }
                      }
                      explist {
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                exprassign {
                                  key {
                                    prefixexp {
                                    }
                                  }
                                  value {
                                    str: "\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"
                                  }
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                }
                                args {
                                  str: "\'"
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                              }
                            }
                          }
                        }
                        expressions {
                          nil: 7
                        }
                        expressions {
                        }
                        expressions {
                          tableconstructor {
                          }
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                expression {
                                }
                              }
                              fields {
                                field {
                                  exprassign {
                                    key {
                                      tableconstructor {
                                      }
                                    }
                                    value {
                                    }
                                  }
                                }
                                sep {
                                }
                              }
                              lastSep {
                                semicolon: 0
                              }
                            }
                          }
                        }
                        expressions {
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                expression {
                                  ellipsis: "len"
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          str: "\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"
                        }
                        explast {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  exp {
                                    nil: 5
                                  }
                                }
                                args {
                                  str: "\'"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                  }
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            call {
              namedArgs {
                prefixexp {
                }
                name {
                  name: "os.rename"
                  num: 0
                }
                args {
                }
              }
            }
          }
          stat {
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    whilecycle {
                      condition {
                        true: 4211015680
                      }
                      doblock {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  stat {
                    call {
                      namedArgs {
                        prefixexp {
                        }
                        name {
                          name: ""
                          num: 0
                        }
                        args {
                        }
                      }
                    }
                    semicolon: false
                  }
                  stat {
                    list {
                      varlist {
                        var {
                        }
                      }
                      explist {
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                exprassign {
                                  key {
                                    prefixexp {
                                    }
                                  }
                                  value {
                                  }
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                }
                                args {
                                  str: "\'"
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                              }
                            }
                          }
                        }
                        expressions {
                          nil: 7
                        }
                        expressions {
                        }
                        expressions {
                          tableconstructor {
                          }
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                expression {
                                }
                              }
                              fields {
                                field {
                                  exprassign {
                                    key {
                                      tableconstructor {
                                      }
                                    }
                                    value {
                                    }
                                  }
                                }
                                sep {
                                }
                              }
                              lastSep {
                                comma: 536870912
                              }
                            }
                          }
                        }
                        expressions {
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                expression {
                                  ellipsis: "len"
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          str: "\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"
                        }
                        explast {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  exp {
                                    nil: 5
                                  }
                                }
                                args {
                                  str: "\'"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                  }
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    whilecycle {
                      condition {
                      }
                      doblock {
                        block {
                          chunk {
                            laststat {
                              semicolon: true
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                    semicolon: true
                  }
                  stat {
                  }
                  stat {
                    ifstat {
                      condition {
                      }
                      first {
                        chunk {
                          stat {
                            repeatcycle {
                              block {
                                chunk {
                                }
                              }
                              condition {
                                str: "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                    semicolon: true
                  }
                  stat {
                    block {
                      block {
                        chunk {
                          stat {
                            call {
                              namedArgs {
                                prefixexp {
                                }
                                name {
                                  name: ""
                                  num: 0
                                }
                                args {
                                }
                              }
                            }
                          }
                          stat {
                            whilecycle {
                              condition {
                                unary {
                                  unop {
                                    length: 263
                                  }
                                  exp {
                                    false: 0
                                  }
                                }
                              }
                              doblock {
                                block {
                                  chunk {
                                    stat {
                                      call {
                                        prefArgs {
                                          prefixexp {
                                          }
                                          args {
                                          }
                                        }
                                      }
                                    }
                                    stat {
                                      call {
                                      }
                                    }
                                    stat {
                                      forcyclelist {
                                        names {
                                          firstname {
                                            name: ""
                                            num: 0
                                          }
                                        }
                                        expressions {
                                          explast {
                                            function {
                                              body {
                                                parlist {
                                                  ellipsis: "\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335"
                                                }
                                                block {
                                                  chunk {
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        doblock {
                                          block {
                                            chunk {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          stat {
                            call {
                              prefArgs {
                                prefixexp {
                                  var {
                                    name {
                                      name: "load"
                                      num: 0
                                    }
                                  }
                                }
                                args {
                                  str: "xCcmathio.type\\fffffffff333c333c3333332"
                                }
                              }
                            }
                          }
                          stat {
                            call {
                              prefArgs {
                                prefixexp {
                                  var {
                                    name {
                                      name: ""
                                      num: 0
                                    }
                                  }
                                }
                                args {
                                  str: "xCcmath.typef-\\fffffffff333c333c3333332"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                  }
                  stat {
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                          stat {
                            whilecycle {
                              condition {
                                true: 4211015680
                              }
                              doblock {
                                block {
                                  chunk {
                                  }
                                }
                              }
                            }
                          }
                          stat {
                            call {
                              namedArgs {
                                prefixexp {
                                }
                                name {
                                  name: ""
                                  num: 0
                                }
                                args {
                                }
                              }
                            }
                            semicolon: false
                          }
                          stat {
                            list {
                              varlist {
                                var {
                                }
                              }
                              explist {
                                expressions {
                                  tableconstructor {
                                    fieldlist {
                                      firstField {
                                        exprassign {
                                          key {
                                            prefixexp {
                                            }
                                          }
                                          value {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                expressions {
                                  prefixexp {
                                    functioncall {
                                      prefArgs {
                                        prefixexp {
                                        }
                                        args {
                                          str: "\'"
                                        }
                                      }
                                    }
                                  }
                                }
                                expressions {
                                  tableconstructor {
                                    fieldlist {
                                      firstField {
                                      }
                                    }
                                  }
                                }
                                expressions {
                                  nil: 7
                                }
                                expressions {
                                }
                                expressions {
                                  tableconstructor {
                                  }
                                }
                                expressions {
                                  tableconstructor {
                                    fieldlist {
                                      firstField {
                                        expression {
                                        }
                                      }
                                      fields {
                                        field {
                                          exprassign {
                                            key {
                                              tableconstructor {
                                              }
                                            }
                                            value {
                                            }
                                          }
                                        }
                                        sep {
                                        }
                                      }
                                      lastSep {
                                        semicolon: 0
                                      }
                                    }
                                  }
                                }
                                expressions {
                                }
                                expressions {
                                  tableconstructor {
                                    fieldlist {
                                      firstField {
                                        expression {
                                          ellipsis: "len"
                                        }
                                      }
                                    }
                                  }
                                }
                                expressions {
                                  str: "\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"
                                }
                                explast {
                                  prefixexp {
                                    functioncall {
                                      prefArgs {
                                        prefixexp {
                                          exp {
                                            nil: 5
                                          }
                                        }
                                        args {
                                          str: "\'"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          stat {
                          }
                        }
                      }
                      condition {
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                  }
                  stat {
                    call {
                      namedArgs {
                        prefixexp {
                        }
                        name {
                          name: "os.rename"
                          num: 0
                        }
                        args {
                        }
                      }
                    }
                  }
                  stat {
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                          stat {
                            whilecycle {
                              condition {
                                true: 4211015680
                              }
                              doblock {
                                block {
                                  chunk {
                                  }
                                }
                              }
                            }
                          }
                          stat {
                            call {
                              namedArgs {
                                prefixexp {
                                }
                                name {
                                  name: ""
                                  num: 0
                                }
                                args {
                                }
                              }
                            }
                            semicolon: false
                          }
                          stat {
                            list {
                              varlist {
                                var {
                                }
                              }
                              explist {
                                expressions {
                                  tableconstructor {
                                    fieldlist {
                                      firstField {
                                        exprassign {
                                          key {
                                            prefixexp {
                                            }
                                          }
                                          value {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                expressions {
                                  prefixexp {
                                    functioncall {
                                      prefArgs {
                                        prefixexp {
                                        }
                                        args {
                                          str: "\'"
                                        }
                                      }
                                    }
                                  }
                                }
                                expressions {
                                  tableconstructor {
                                    fieldlist {
                                      firstField {
                                      }
                                    }
                                  }
                                }
                                expressions {
                                  nil: 7
                                }
                                expressions {
                                }
                                expressions {
                                  tableconstructor {
                                  }
                                }
                                expressions {
                                  tableconstructor {
                                    fieldlist {
                                      firstField {
                                        expression {
                                        }
                                      }
                                      fields {
                                        field {
                                          exprassign {
                                            key {
                                              tableconstructor {
                                              }
                                            }
                                            value {
                                            }
                                          }
                                        }
                                        sep {
                                        }
                                      }
                                      lastSep {
                                        comma: 536870912
                                      }
                                    }
                                  }
                                }
                                expressions {
                                }
                                expressions {
                                  tableconstructor {
                                    fieldlist {
                                      firstField {
                                        expression {
                                          ellipsis: "len"
                                        }
                                      }
                                    }
                                  }
                                }
                                expressions {
                                  str: "\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"
                                }
                                explast {
                                  prefixexp {
                                    functioncall {
                                      prefArgs {
                                        prefixexp {
                                          exp {
                                            nil: 5
                                          }
                                        }
                                        args {
                                          str: "\'"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          stat {
                          }
                        }
                      }
                      condition {
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                          stat {
                          }
                        }
                      }
                      condition {
                        number: 4.94065645841247e-324
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                        prefixexp {
                          exp {
                            function {
                              body {
                                parlist {
                                  ellipsis: "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"
                                }
                                block {
                                  chunk {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                  }
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                      }
                    }
                  }
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                prefixexp {
                  exp {
                    function {
                      body {
                        parlist {
                          ellipsis: "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"
                        }
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
            ellipsis: "utf8.len"
          }
          binop {
          }
          rightexp {
            number: -2.974056507032905e+284
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 0
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 16777216
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
}
