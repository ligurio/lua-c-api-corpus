chunk {
  stat {
    block {
      block {
        chunk {
          stat {
            ifstat {
              condition {
                tableconstructor {
                  fieldlist {
                    firstField {
                      expression {
                        ellipsis: "\000\000\000\000\000\000\000\000"
                      }
                    }
                  }
                }
              }
              first {
                chunk {
                  stat {
                    ifstat {
                      condition {
                        tableconstructor {
                          fieldlist {
                            firstField {
                              expression {
                                ellipsis: "\000\000\000\000\000\000\000\000"
                              }
                            }
                          }
                        }
                      }
                      first {
                        chunk {
                          laststat {
                            break: 536870912
                          }
                        }
                      }
                    }
                  }
                  stat {
                    list {
                      varlist {
                        var {
                          name {
                            name: "rawlen"
                            num: 36
                          }
                        }
                      }
                      explist {
                        expressions {
                          ellipsis: "table.pack"
                        }
                        expressions {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                }
                                args {
                                  str: "\'"
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          prefixexp {
                            var {
                              indexname {
                                prefixexp {
                                }
                                Name: ""
                              }
                            }
                          }
                        }
                        expressions {
                        }
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                exprassign {
                                  key {
                                    binary {
                                      leftexp {
                                        false: 16384
                                      }
                                      binop {
                                        concat: 0
                                      }
                                      rightexp {
                                        tableconstructor {
                                          fieldlist {
                                            firstField {
                                            }
                                            lastSep {
                                              semicolon: 256
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  value {
                                    tableconstructor {
                                      fieldlist {
                                        firstField {
                                          exprassign {
                                            key {
                                              str: "os.execute"
                                            }
                                            value {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              fields {
                                field {
                                }
                                sep {
                                  comma: 0
                                }
                              }
                              fields {
                                field {
                                  exprassign {
                                    key {
                                      unary {
                                        unop {
                                        }
                                        exp {
                                          false: 0
                                        }
                                      }
                                    }
                                    value {
                                    }
                                  }
                                }
                                sep {
                                }
                              }
                              lastSep {
                              }
                            }
                          }
                        }
                        expressions {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  functioncall {
                                    prefArgs {
                                      prefixexp {
                                        var {
                                          indexname {
                                            prefixexp {
                                            }
                                            Name: ""
                                          }
                                        }
                                      }
                                      args {
                                        explist {
                                          explist {
                                            expressions {
                                            }
                                            expressions {
                                              str: "debug.getregistry"
                                            }
                                            explast {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                args {
                                  explist {
                                    explist {
                                      expressions {
                                        str: "package.loadlib"
                                      }
                                      expressions {
                                        ellipsis: "xpcall"
                                      }
                                      explast {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        expressions {
                        }
                        expressions {
                          tableconstructor {
                          }
                        }
                        expressions {
                          unary {
                            unop {
                              negate: 983040
                            }
                            exp {
                              binary {
                                leftexp {
                                  ellipsis: "G"
                                }
                                binop {
                                  concat: 704643072
                                }
                                rightexp {
                                }
                              }
                            }
                          }
                        }
                        explast {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  var {
                                    indexname {
                                      prefixexp {
                                      }
                                      Name: "\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243"
                                    }
                                  }
                                }
                                args {
                                  str: "\'"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  laststat {
                    explist {
                    }
                  }
                }
              }
            }
          }
          stat {
            list {
              varlist {
                var {
                  name {
                    name: "xpcall"
                    num: 0
                  }
                }
              }
              explist {
                expressions {
                  ellipsis: "table.pack"
                }
                expressions {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                        }
                        args {
                          str: "\'"
                        }
                      }
                    }
                  }
                }
                expressions {
                  prefixexp {
                    var {
                      indexname {
                        prefixexp {
                        }
                        Name: ""
                      }
                    }
                  }
                }
                expressions {
                }
                expressions {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        exprassign {
                          key {
                            binary {
                              leftexp {
                                false: 16384
                              }
                              binop {
                                concat: 0
                              }
                              rightexp {
                                tableconstructor {
                                  fieldlist {
                                    firstField {
                                    }
                                    lastSep {
                                      semicolon: 256
                                    }
                                  }
                                }
                              }
                            }
                          }
                          value {
                            tableconstructor {
                              fieldlist {
                                firstField {
                                  exprassign {
                                    key {
                                      str: "os.execute"
                                    }
                                    value {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      fields {
                        field {
                        }
                        sep {
                          comma: 0
                        }
                      }
                      fields {
                        field {
                          exprassign {
                            key {
                              unary {
                                unop {
                                }
                                exp {
                                  false: 0
                                }
                              }
                            }
                            value {
                            }
                          }
                        }
                        sep {
                        }
                      }
                      lastSep {
                      }
                    }
                  }
                }
                expressions {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          var {
                          }
                        }
                        args {
                          explist {
                            explist {
                              expressions {
                                str: "package.loadlib"
                              }
                              expressions {
                                ellipsis: "xpcall"
                              }
                              explast {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                expressions {
                }
                expressions {
                  tableconstructor {
                  }
                }
                expressions {
                  unary {
                    unop {
                      negate: 983040
                    }
                    exp {
                      binary {
                        leftexp {
                          ellipsis: "G"
                        }
                        binop {
                          concat: 704643072
                        }
                        rightexp {
                        }
                      }
                    }
                  }
                }
                explast {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          var {
                            indexname {
                              prefixexp {
                              }
                              Name: "\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243"
                            }
                          }
                        }
                        args {
                          str: "\'"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          laststat {
            explist {
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    call {
      prefArgs {
        prefixexp {
          var {
            indexname {
              prefixexp {
              }
              Name: ""
            }
          }
        }
        args {
          explist {
          }
        }
      }
    }
  }
  stat {
    semicolon: true
  }
}
