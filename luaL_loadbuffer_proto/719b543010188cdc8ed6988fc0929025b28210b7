chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
        prefixexp {
        }
      }
      stepexp {
        binary {
          leftexp {
            ellipsis: "LUA_PATH_5_4"
          }
          binop {
            less: 6
          }
          rightexp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              semicolon: true
            }
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: ""
                    num: 0
                  }
                  names {
                    name: ""
                    num: 2097152251
                  }
                }
                expressions {
                  explast {
                    function {
                      body {
                        block {
                          chunk {
                            laststat {
                            }
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        forcyclelist {
                          names {
                            firstname {
                              name: ""
                              num: 0
                            }
                          }
                          expressions {
                            explast {
                              str: "w\207\001\000\000\000\000\000"
                            }
                          }
                          doblock {
                            block {
                              chunk {
                                stat {
                                  forcyclelist {
                                    names {
                                      firstname {
                                        name: ""
                                        num: 0
                                      }
                                      names {
                                        name: "\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301"
                                        num: 0
                                      }
                                      names {
                                        name: ""
                                        num: 251
                                      }
                                    }
                                    expressions {
                                      explast {
                                        function {
                                          body {
                                            parlist {
                                              ellipsis: "I"
                                            }
                                            block {
                                              chunk {
                                                stat {
                                                }
                                                laststat {
                                                  break: 0
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    doblock {
                                      block {
                                        chunk {
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
}
