chunk {
  stat {
    forcyclename {
      name {
        name: "n"
        num: 1
      }
      startexp {
        prefixexp {
          exp {
            prefixexp {
              functioncall {
                prefArgs {
                  prefixexp {
                    var {
                      name {
                        name: "load"
                        num: 0
                      }
                    }
                  }
                  args {
                    str: "r."
                  }
                }
              }
            }
          }
        }
      }
      stopexp {
        prefixexp {
          exp {
            prefixexp {
            }
          }
        }
      }
      stepexp {
        prefixexp {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 1
      }
      startexp {
        prefixexp {
          exp {
          }
        }
      }
      stopexp {
        prefixexp {
          exp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: "n"
                  num: 1
                }
                startexp {
                  prefixexp {
                    exp {
                      prefixexp {
                        functioncall {
                          prefArgs {
                            prefixexp {
                              var {
                                name {
                                  name: "load"
                                  num: 0
                                }
                              }
                            }
                            args {
                              str: "r."
                            }
                          }
                        }
                      }
                    }
                  }
                }
                stopexp {
                  prefixexp {
                    exp {
                      prefixexp {
                      }
                    }
                  }
                }
                stepexp {
                  prefixexp {
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  expressions {
                  }
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    nil: 4143972352
                  }
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                            var {
                              name {
                                name: "load"
                                num: 0
                              }
                            }
                          }
                          args {
                            str: "r."
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    function {
                      body {
                        block {
                          chunk {
                            laststat {
                              explist {
                                explist {
                                  expressions {
                                    binary {
                                      leftexp {
                                        prefixexp {
                                          exp {
                                          }
                                        }
                                      }
                                      binop {
                                        mod: 0
                                      }
                                      rightexp {
                                        str: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                                      }
                                    }
                                  }
                                  explast {
                                    str: "\252"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  explast {
                    number: 0
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
