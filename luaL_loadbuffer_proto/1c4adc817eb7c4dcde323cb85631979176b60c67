chunk {
  stat {
    whilecycle {
      condition {
        str: "counter_8"
      }
      doblock {
        block {
          chunk {
            stat {
            }
            stat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        number: 1.23040527430237e-317
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: "\020"
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            explist {
            }
            semicolon: false
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    whilecycle {
      condition {
        str: ",\\000\\000\\z                                                                          000"
      }
      doblock {
        block {
          chunk {
            stat {
              ifstat {
                condition {
                }
                first {
                  chunk {
                    stat {
                      semicolon: true
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              list {
                varlist {
                  var {
                    indexname {
                      prefixexp {
                      }
                      Name: "``````````````````````````````````````````"
                    }
                  }
                }
                explist {
                  explast {
                    false: 0
                  }
                }
              }
            }
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 237
        }
      }
      body {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: false
          }
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        prefixexp {
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            semicolon: true
          }
          stat {
            localnames {
              namelist {
                firstname {
                  name: "_\022\000____\376________\376_"
                  num: 0
                }
                names {
                  name: "counter_8"
                  num: 0
                }
              }
              explist {
                expressions {
                }
                explast {
                  number: -35651608.12500108
                }
              }
            }
            semicolon: true
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    list {
                      varlist {
                        var {
                        }
                      }
                      explist {
                        expressions {
                          ellipsis: ""
                        }
                        expressions {
                          false: 8192
                        }
                        expressions {
                          str: ""
                        }
                        expressions {
                          prefixexp {
                          }
                        }
                        explast {
                          str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
                        }
                      }
                    }
                  }
                  stat {
                    semicolon: true
                  }
                  stat {
                    block {
                      block {
                        chunk {
                          stat {
                            semicolon: false
                          }
                        }
                      }
                    }
                  }
                  stat {
                  }
                }
              }
              condition {
                unary {
                  unop {
                  }
                  exp {
                    str: "require"
                  }
                }
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        str: "\000\'>io.open\'\000\000&&\'>\'\000\000&\'>\'"
      }
    }
  }
  stat {
    ifstat {
      condition {
        unary {
          unop {
          }
          exp {
            prefixexp {
              var {
                name {
                  name: "``````````````````````````````````````````"
                  num: 0
                }
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 8192
        }
        names {
          name: ""
          num: 0
        }
        lastname {
          name: "require"
          num: 0
        }
      }
      body {
        block {
          chunk {
            stat {
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    semicolon: false
  }
  stat {
    semicolon: false
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  laststat {
  }
}
