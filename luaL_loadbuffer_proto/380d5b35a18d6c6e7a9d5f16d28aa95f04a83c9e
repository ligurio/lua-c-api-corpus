chunk {
  stat {
    func {
      name {
        firstname {
          name: "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp\236ppp"
          num: 536870912
        }
        lastname {
          name: "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
          num: 0
        }
      }
      body {
        parlist {
          ellipsis: "tmpname"
        }
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: ""
          num: 0
        }
      }
      explist {
        expressions {
          prefixexp {
            functioncall {
              prefArgs {
                prefixexp {
                }
                args {
                  tableconstructor {
                  }
                }
              }
            }
          }
        }
        explast {
        }
      }
    }
  }
  stat {
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: "counter_+"
          num: 6513008
        }
        names {
          name: "counter_8"
          num: 0
        }
      }
      explist {
        expressions {
        }
        explast {
          number: -709.375
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
          binary {
            leftexp {
              false: 1310720
            }
            binop {
            }
            rightexp {
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
            prefixexp {
              functioncall {
              }
            }
          }
          binop {
            add: 2
          }
          rightexp {
            binary {
              leftexp {
                prefixexp {
                }
              }
              binop {
                concat: 2
              }
              rightexp {
                prefixexp {
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    func {
      name {
        firstname {
          name: "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp\236ppp"
          num: 0
        }
        lastname {
          name: "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
          num: 0
        }
      }
      body {
        block {
          chunk {
            laststat {
              break: 9728
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        nil: 65536
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            break: 2097157
            semicolon: false
          }
        }
      }
      condition {
        nil: 5
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
          stat {
          }
          stat {
            semicolon: true
          }
        }
      }
      last {
        chunk {
          stat {
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 538968064
        }
        names {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              call {
                prefArgs {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                          functioncall {
                            prefArgs {
                              prefixexp {
                              }
                              args {
                                tableconstructor {
                                  fieldlist {
                                    firstField {
                                      exprassign {
                                        key {
                                        }
                                        value {
                                          nil: 0
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        args {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                exprassign {
                                  key {
                                  }
                                  value {
                                    nil: 0
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  args {
                    explist {
                      explist {
                        expressions {
                          false: 17
                        }
                        expressions {
                          unary {
                            unop {
                              negate: 2
                            }
                            exp {
                              prefixexp {
                                functioncall {
                                  prefArgs {
                                    prefixexp {
                                      var {
                                        name {
                                          name: "xpcall"
                                          num: 0
                                        }
                                      }
                                    }
                                    args {
                                      explist {
                                        explist {
                                          expressions {
                                            prefixexp {
                                              functioncall {
                                                prefArgs {
                                                  prefixexp {
                                                    var {
                                                      name {
                                                        name: "ipairs"
                                                        num: 0
                                                      }
                                                    }
                                                  }
                                                  args {
                                                    explist {
                                                      explist {
                                                        expressions {
                                                          str: "\'<mathn<7<pack<7<\'<9"
                                                        }
                                                        expressions {
                                                          str: "\'<mathn<pack<7<\'<9"
                                                        }
                                                        expressions {
                                                          str: "\'<mathn<7<pack<7<\'<9"
                                                        }
                                                        expressions {
                                                          str: "\'<t<ha<n7m<7<\'<9"
                                                        }
                                                        expressions {
                                                          str: "\'<mathn<7<pack<7<\'<9"
                                                        }
                                                        expressions {
                                                        }
                                                        explast {
                                                          str: "\'<mathn<7<<7<\'<9"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          expressions {
                                            function {
                                              body {
                                                parlist {
                                                }
                                                block {
                                                  chunk {
                                                    stat {
                                                      semicolon: true
                                                    }
                                                    laststat {
                                                      explist {
                                                        explist {
                                                          expressions {
                                                            binary {
                                                              leftexp {
                                                                binary {
                                                                  leftexp {
                                                                    binary {
                                                                      leftexp {
                                                                      }
                                                                      binop {
                                                                        div: 0
                                                                      }
                                                                      rightexp {
                                                                      }
                                                                    }
                                                                  }
                                                                  binop {
                                                                    div: 0
                                                                  }
                                                                  rightexp {
                                                                    number: 2.65249473870659e-315
                                                                  }
                                                                }
                                                              }
                                                              binop {
                                                              }
                                                              rightexp {
                                                                str: "\'&~33~33333333.+\'"
                                                              }
                                                            }
                                                          }
                                                          explast {
                                                            str: "\252"
                                                          }
                                                        }
                                                      }
                                                      semicolon: true
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          explast {
                                            unary {
                                              unop {
                                              }
                                              exp {
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  var {
                                    name {
                                      name: "ipairs"
                                      num: 0
                                    }
                                  }
                                }
                                args {
                                  explist {
                                    explist {
                                      expressions {
                                        ellipsis: "xpcall"
                                      }
                                      explast {
                                        true: 536870912
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          false: 2634022912
                        }
                        explast {
                          true: 3080192
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  laststat {
  }
}
