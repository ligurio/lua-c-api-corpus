chunk {
  stat {
    ifstat {
      condition {
        unary {
          unop {
          }
          exp {
            prefixexp {
              functioncall {
                prefArgs {
                  prefixexp {
                  }
                  args {
                    str: "\\000\\000\\000\\006"
                  }
                }
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
      last {
        chunk {
          stat {
            semicolon: true
          }
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
          stat {
          }
          stat {
          }
          stat {
            semicolon: true
          }
          stat {
            block {
              block {
                chunk {
                }
              }
            }
            semicolon: true
          }
          stat {
            semicolon: true
          }
          stat {
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  laststat {
                  }
                }
              }
              condition {
                true: 16711424
              }
            }
          }
          stat {
            block {
              block {
                chunk {
                }
              }
            }
            semicolon: true
          }
          stat {
            list {
              varlist {
                var {
                }
                vars {
                  indexname {
                    prefixexp {
                      exp {
                        binary {
                          leftexp {
                          }
                          binop {
                            equal: 107
                          }
                          rightexp {
                          }
                        }
                      }
                    }
                    Name: ""
                  }
                }
                vars {
                }
                vars {
                }
              }
              explist {
                expressions {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                    }
                  }
                }
                expressions {
                  binary {
                    leftexp {
                      unary {
                        unop {
                        }
                        exp {
                        }
                      }
                    }
                    binop {
                    }
                    rightexp {
                    }
                  }
                }
                expressions {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                      lastSep {
                        comma: 0
                      }
                    }
                  }
                }
                expressions {
                }
                expressions {
                  tableconstructor {
                  }
                }
                expressions {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                    }
                  }
                }
                expressions {
                }
                expressions {
                  prefixexp {
                    var {
                      indexname {
                        prefixexp {
                          var {
                            indexexpr {
                              prefixexp {
                              }
                              exp {
                                unary {
                                  unop {
                                  }
                                  exp {
                                    true: 67108864
                                  }
                                }
                              }
                            }
                          }
                        }
                        Name: ""
                      }
                    }
                  }
                }
                expressions {
                  binary {
                    leftexp {
                      unary {
                        unop {
                        }
                        exp {
                        }
                      }
                    }
                    binop {
                    }
                    rightexp {
                    }
                  }
                }
                explast {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                    }
                  }
                }
              }
            }
            semicolon: true
          }
          stat {
            forcyclelist {
              names {
                firstname {
                  name: ""
                  num: 0
                }
              }
              expressions {
                explast {
                  true: 0
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
            semicolon: true
          }
          stat {
            list {
              varlist {
                var {
                  name {
                    name: "\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361\361"
                    num: 0
                  }
                }
                vars {
                  name {
                    name: "counter_+"
                    num: 65533
                  }
                }
                vars {
                  name {
                    name: "counter_+"
                    num: 65533
                  }
                }
                vars {
                }
                vars {
                }
              }
              explist {
                expressions {
                  tableconstructor {
                  }
                }
                expressions {
                  tableconstructor {
                  }
                }
                expressions {
                }
                expressions {
                  tableconstructor {
                  }
                }
                expressions {
                }
                expressions {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                      fields {
                        field {
                          expression {
                            str: ","
                          }
                        }
                        sep {
                          comma: 0
                        }
                      }
                    }
                  }
                }
                explast {
                  function {
                    body {
                      block {
                        chunk {
                        }
                      }
                    }
                  }
                }
              }
            }
            semicolon: false
          }
          stat {
            semicolon: true
          }
          laststat {
          }
        }
      }
      clauses {
        condition {
        }
        block {
          chunk {
            stat {
              ifstat {
                condition {
                  unary {
                    unop {
                    }
                    exp {
                      prefixexp {
                        functioncall {
                          prefArgs {
                            prefixexp {
                            }
                            args {
                              str: "\\000\\000\\000\\006"
                            }
                          }
                        }
                      }
                    }
                  }
                }
                first {
                  chunk {
                  }
                }
              }
            }
            stat {
              semicolon: true
            }
          }
        }
      }
      last {
        chunk {
          stat {
            semicolon: true
          }
        }
      }
    }
  }
}
