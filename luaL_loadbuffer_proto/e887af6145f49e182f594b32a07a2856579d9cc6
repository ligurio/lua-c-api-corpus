chunk {
  stat {
    forcyclelist {
      names {
        firstname {
          name: "\021"
          num: 127
        }
        names {
          name: "collectgarbage"
          num: 101
        }
        names {
          name: ""
          num: 127
        }
      }
      expressions {
        expressions {
          prefixexp {
            var {
              name {
                name: "pcall"
                num: 127
              }
            }
          }
        }
        explast {
          function {
            body {
              parlist {
                namelist {
                  namelist {
                    firstname {
                      name: "collectgarbage"
                      num: 0
                    }
                  }
                }
              }
              block {
                chunk {
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                          stat {
                            repeatcycle {
                              block {
                                chunk {
                                }
                              }
                              condition {
                                prefixexp {
                                  functioncall {
                                    prefArgs {
                                      prefixexp {
                                        functioncall {
                                          prefArgs {
                                            prefixexp {
                                              functioncall {
                                              }
                                            }
                                            args {
                                              str: "\'math.modf"
                                            }
                                          }
                                        }
                                      }
                                      args {
                                        str: "\'"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      condition {
                        prefixexp {
                          functioncall {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclelist {
                names {
                  firstname {
                    name: "\021"
                    num: 127
                  }
                  names {
                    name: "collectgarbage"
                    num: 101
                  }
                  names {
                    name: ""
                    num: 127
                  }
                }
                expressions {
                  expressions {
                    nil: 0
                  }
                  explast {
                    function {
                      body {
                        parlist {
                          namelist {
                            namelist {
                              firstname {
                                name: "collectgarbage"
                                num: 0
                              }
                            }
                          }
                        }
                        block {
                          chunk {
                            stat {
                              repeatcycle {
                                block {
                                  chunk {
                                    stat {
                                      repeatcycle {
                                        block {
                                          chunk {
                                          }
                                        }
                                        condition {
                                          prefixexp {
                                            functioncall {
                                              prefArgs {
                                                prefixexp {
                                                  functioncall {
                                                    prefArgs {
                                                      prefixexp {
                                                        functioncall {
                                                        }
                                                      }
                                                      args {
                                                        str: "\'math.modf"
                                                      }
                                                    }
                                                  }
                                                }
                                                args {
                                                  str: "\'"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                condition {
                                  prefixexp {
                                    functioncall {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        block {
                          block {
                            chunk {
                              stat {
                                block {
                                  block {
                                    chunk {
                                    }
                                  }
                                }
                                semicolon: true
                              }
                              stat {
                                call {
                                  prefArgs {
                                    prefixexp {
                                      functioncall {
                                        prefArgs {
                                          prefixexp {
                                            functioncall {
                                            }
                                          }
                                          args {
                                            str: "\'math.modf"
                                          }
                                        }
                                      }
                                    }
                                    args {
                                      str: "\'"
                                    }
                                  }
                                }
                                semicolon: true
                              }
                              laststat {
                                break: 0
                                semicolon: false
                              }
                            }
                          }
                        }
                        semicolon: true
                      }
                      laststat {
                        break: 0
                        semicolon: true
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              list {
                varlist {
                  var {
                  }
                  vars {
                  }
                  vars {
                    indexexpr {
                      prefixexp {
                        exp {
                          true: 141
                        }
                      }
                      exp {
                      }
                    }
                  }
                }
                explist {
                  expressions {
                    unary {
                      unop {
                      }
                      exp {
                        nil: 4
                      }
                    }
                  }
                  expressions {
                    prefixexp {
                      functioncall {
                        prefArgs {
                          prefixexp {
                          }
                          args {
                          }
                        }
                      }
                    }
                  }
                  expressions {
                  }
                  expressions {
                    unary {
                      unop {
                      }
                      exp {
                        nil: 4
                      }
                    }
                  }
                  expressions {
                    tableconstructor {
                    }
                  }
                  expressions {
                  }
                  expressions {
                  }
                  expressions {
                    unary {
                      unop {
                      }
                      exp {
                        nil: 4
                      }
                    }
                  }
                  expressions {
                    binary {
                      leftexp {
                        tableconstructor {
                        }
                      }
                      binop {
                      }
                      rightexp {
                        nil: 536884224
                      }
                    }
                  }
                  expressions {
                    tableconstructor {
                    }
                  }
                  expressions {
                    str: "debug.traceback"
                  }
                  explast {
                    prefixexp {
                      var {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  laststat {
    semicolon: true
  }
}
