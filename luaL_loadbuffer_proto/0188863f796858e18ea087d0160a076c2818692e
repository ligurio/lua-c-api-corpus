chunk {
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localfunc {
              name {
                name: ""
                num: 0
              }
              funcbody {
                block {
                  chunk {
                    stat {
                    }
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                          }
                        }
                        condition {
                          str: "\000\000\002\000\000\000\000\000\000\000"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                          stat {
                            localfunc {
                              name {
                                name: ""
                                num: 0
                              }
                              funcbody {
                                block {
                                  chunk {
                                    stat {
                                    }
                                    stat {
                                      repeatcycle {
                                        block {
                                          chunk {
                                            stat {
                                              localfunc {
                                                name {
                                                  name: ""
                                                  num: 0
                                                }
                                                funcbody {
                                                  block {
                                                    chunk {
                                                      stat {
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            stat {
                                              repeatcycle {
                                                block {
                                                  chunk {
                                                    stat {
                                                      repeatcycle {
                                                        block {
                                                          chunk {
                                                          }
                                                        }
                                                        condition {
                                                          binary {
                                                            leftexp {
                                                            }
                                                            binop {
                                                              notEqual: 2147483648
                                                            }
                                                            rightexp {
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                    stat {
                                                      forcyclename {
                                                        name {
                                                          name: ""
                                                          num: 0
                                                        }
                                                        startexp {
                                                          false: 1
                                                        }
                                                        stopexp {
                                                          binary {
                                                            leftexp {
                                                            }
                                                            binop {
                                                              lessEqual: 1
                                                            }
                                                            rightexp {
                                                              prefixexp {
                                                                exp {
                                                                  binary {
                                                                    leftexp {
                                                                      prefixexp {
                                                                      }
                                                                    }
                                                                    binop {
                                                                      or: 1
                                                                    }
                                                                    rightexp {
                                                                      prefixexp {
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                        stepexp {
                                                          binary {
                                                            leftexp {
                                                            }
                                                            binop {
                                                              lessEqual: 1
                                                            }
                                                            rightexp {
                                                              prefixexp {
                                                                exp {
                                                                  binary {
                                                                    leftexp {
                                                                      prefixexp {
                                                                      }
                                                                    }
                                                                    binop {
                                                                      or: 1
                                                                    }
                                                                    rightexp {
                                                                      prefixexp {
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                        doblock {
                                                          block {
                                                            chunk {
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                condition {
                                                }
                                              }
                                              semicolon: false
                                            }
                                            laststat {
                                              break: 0
                                            }
                                          }
                                        }
                                        condition {
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          stat {
                            repeatcycle {
                              block {
                                chunk {
                                  stat {
                                    repeatcycle {
                                      block {
                                        chunk {
                                        }
                                      }
                                      condition {
                                        binary {
                                          leftexp {
                                          }
                                          binop {
                                            notEqual: 2147483648
                                          }
                                          rightexp {
                                          }
                                        }
                                      }
                                    }
                                  }
                                  stat {
                                    forcyclename {
                                      name {
                                        name: ""
                                        num: 0
                                      }
                                      startexp {
                                        false: 1
                                      }
                                      stopexp {
                                        binary {
                                          leftexp {
                                          }
                                          binop {
                                            lessEqual: 1
                                          }
                                          rightexp {
                                            prefixexp {
                                              exp {
                                                binary {
                                                  leftexp {
                                                  }
                                                  binop {
                                                    or: 1
                                                  }
                                                  rightexp {
                                                    prefixexp {
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      stepexp {
                                      }
                                      doblock {
                                        block {
                                          chunk {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              condition {
                                binary {
                                  leftexp {
                                    number: 1.6189543082926e-319
                                  }
                                  binop {
                                  }
                                  rightexp {
                                  }
                                }
                              }
                            }
                          }
                          laststat {
                            break: 4
                          }
                        }
                      }
                      condition {
                        binary {
                          leftexp {
                          }
                          binop {
                          }
                          rightexp {
                          }
                        }
                      }
                    }
                  }
                  stat {
                    forcyclename {
                      name {
                        name: ""
                        num: 4
                      }
                      startexp {
                        false: 1
                      }
                      stopexp {
                        binary {
                          leftexp {
                          }
                          binop {
                            lessEqual: 1
                          }
                          rightexp {
                            prefixexp {
                              exp {
                                binary {
                                  leftexp {
                                    prefixexp {
                                    }
                                  }
                                  binop {
                                    or: 1
                                  }
                                  rightexp {
                                    prefixexp {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      stepexp {
                      }
                      doblock {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                }
              }
              condition {
                binary {
                  leftexp {
                    number: 1.6189543082926e-319
                  }
                  binop {
                  }
                  rightexp {
                  }
                }
              }
            }
          }
          laststat {
            break: 538968064
          }
        }
      }
      condition {
        function {
          body {
            block {
              chunk {
              }
            }
          }
        }
      }
    }
  }
}
