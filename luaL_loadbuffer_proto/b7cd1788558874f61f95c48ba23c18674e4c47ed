chunk {
  stat {
    block {
      block {
        chunk {
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            func {
              name {
                firstname {
                  name: ""
                  num: 0
                }
              }
              body {
                block {
                  chunk {
                    stat {
                      semicolon: false
                    }
                    stat {
                      block {
                        block {
                          chunk {
                          }
                        }
                      }
                      semicolon: true
                    }
                    stat {
                      call {
                        prefArgs {
                          prefixexp {
                            var {
                              indexexpr {
                                prefixexp {
                                  var {
                                    name {
                                      name: "sort"
                                      num: 0
                                    }
                                  }
                                }
                                exp {
                                }
                              }
                            }
                          }
                          args {
                          }
                        }
                      }
                    }
                    stat {
                      call {
                      }
                      semicolon: true
                    }
                    stat {
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
          laststat {
            explist {
              explist {
                expressions {
                  binary {
                    leftexp {
                    }
                    binop {
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              ellipsis: "}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}"
                            }
                            binop {
                              mod: 4
                            }
                            rightexp {
                            }
                          }
                        }
                        binop {
                          mod: 2197815296
                        }
                        rightexp {
                          ellipsis: "}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}"
                        }
                      }
                    }
                  }
                }
                explast {
                }
              }
            }
          }
        }
      }
      condition {
        nil: 5
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
        }
      }
      condition {
        nil: 32
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localnames {
              namelist {
                firstname {
                  name: "counter_+"
                  num: 6513008
                }
                names {
                  name: "counter_8"
                  num: 0
                }
              }
              explist {
                expressions {
                }
                explast {
                  number: -709.375
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    repeatcycle {
                      block {
                        chunk {
                        }
                      }
                      condition {
                        prefixexp {
                          functioncall {
                            prefArgs {
                              prefixexp {
                                var {
                                  name {
                                    name: "load"
                                    num: 0
                                  }
                                }
                              }
                              args {
                                str
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              condition {
                unary {
                  unop {
                  }
                  exp {
                    false: 1847599136
                  }
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
      condition {
        nil: 1
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        expressions {
          str: "counter_8"
        }
        expressions {
          prefixexp {
          }
        }
        expressions {
          number: -424
        }
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    block {
      block {
        chunk {
          stat {
            semicolon: true
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                prefixexp {
                  functioncall {
                    prefArgs {
                      prefixexp {
                        functioncall {
                          prefArgs {
                            prefixexp {
                              var {
                                name {
                                  name: "load"
                                  num: 0
                                }
                              }
                            }
                            args {
                              str: "\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261"
                            }
                          }
                        }
                      }
                      args {
                        str
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                prefixexp {
                  functioncall {
                    prefArgs {
                      prefixexp {
                        var {
                          name {
                            name: "\000\000\000\'"
                            num: 0
                          }
                        }
                      }
                      args {
                        explist {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            localfunc {
              name {
                name: ""
                num: 127
              }
              funcbody {
                parlist {
                  ellipsis: "\000\000\001\203"
                }
                block {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
      condition {
        nil: 0
      }
    }
  }
}
