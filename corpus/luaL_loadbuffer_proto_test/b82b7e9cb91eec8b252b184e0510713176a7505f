chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        number: 4
      }
      stopexp {
        number: -0
      }
      stepexp {
        number: -0
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                  prefixexp {
                  }
                }
                stopexp {
                  number: 4
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        forcyclename {
                          name {
                            name: "\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225\225"
                            num: 0
                          }
                          startexp {
                            prefixexp {
                            }
                          }
                          stopexp {
                            number: 4
                          }
                          doblock {
                            block {
                              chunk {
                                stat {
                                  localfunc {
                                    name {
                                      name: ""
                                      num: 0
                                    }
                                    funcbody {
                                      block {
                                        chunk {
                                          stat {
                                            call {
                                              prefArgs {
                                                prefixexp {
                                                }
                                                args {
                                                  str: "s"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                stat {
                                  call {
                                    prefArgs {
                                      prefixexp {
                                      }
                                      args {
                                      }
                                    }
                                  }
                                  semicolon: true
                                }
                                stat {
                                  whilecycle {
                                    condition {
                                      tableconstructor {
                                        fieldlist {
                                          firstField {
                                            expression {
                                              prefixexp {
                                                functioncall {
                                                  prefArgs {
                                                    prefixexp {
                                                    }
                                                    args {
                                                      explist {
                                                        explist {
                                                          expressions {
                                                            nil: 15
                                                          }
                                                          expressions {
                                                            nil: 4294967024
                                                          }
                                                          explast {
                                                            prefixexp {
                                                              functioncall {
                                                                prefArgs {
                                                                  prefixexp {
                                                                  }
                                                                  args {
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    doblock {
                                      block {
                                        chunk {
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
