chunk {
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        str: "\\rec\\000"
      }
      stopexp {
        str: "\\reccal0"
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
        str: "]"
      }
      first {
        chunk {
          stat {
            forcyclelist {
              names {
                firstname {
                  name: ""
                  num: 0
                }
              }
              expressions {
                explast {
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          stat {
            semicolon: true
          }
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
                str: "\\rec\\000"
              }
              stopexp {
                str: "\\reccal0"
              }
              stepexp {
                binary {
                  leftexp {
                    binary {
                      leftexp {
                        unary {
                          unop {
                            negate: 2
                          }
                          exp {
                          }
                        }
                      }
                      binop {
                        sub: 2
                      }
                      rightexp {
                        binary {
                          leftexp {
                            unary {
                              unop {
                                negate: 2
                              }
                              exp {
                              }
                            }
                          }
                          binop {
                            sub: 2
                          }
                          rightexp {
                            unary {
                              unop {
                                length: 0
                              }
                              exp {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  binop {
                    add: 65580
                  }
                  rightexp {
                    binary {
                      leftexp {
                        unary {
                          unop {
                            negate: 2
                          }
                          exp {
                          }
                        }
                      }
                      binop {
                        sub: 2
                      }
                      rightexp {
                        number: -2.0000009089708328
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
            semicolon: true
          }
          stat {
            ifstat {
              condition {
                str: "]"
              }
              first {
                chunk {
                  stat {
                    forcyclelist {
                      names {
                        firstname {
                          name: ""
                          num: 0
                        }
                      }
                      expressions {
                        explast {
                        }
                      }
                      doblock {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  stat {
                    semicolon: true
                  }
                  stat {
                    forcyclename {
                      name {
                        name: ""
                        num: 0
                      }
                      startexp {
                        str: "\\rec\\000"
                      }
                      stopexp {
                        str: "\\reccal0"
                      }
                      stepexp {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                unary {
                                  unop {
                                    negate: 2
                                  }
                                  exp {
                                  }
                                }
                              }
                              binop {
                                add: 65580
                              }
                              rightexp {
                                binary {
                                  leftexp {
                                    unary {
                                      unop {
                                        negate: 2
                                      }
                                      exp {
                                      }
                                    }
                                  }
                                  binop {
                                    sub: 2
                                  }
                                  rightexp {
                                    unary {
                                      unop {
                                        length: 0
                                      }
                                      exp {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          binop {
                            add: 65580
                          }
                          rightexp {
                            binary {
                              leftexp {
                                unary {
                                  unop {
                                    negate: 2
                                  }
                                  exp {
                                  }
                                }
                              }
                              binop {
                                sub: 2
                              }
                              rightexp {
                                number: -2.0000009089708328
                              }
                            }
                          }
                        }
                      }
                      doblock {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                    semicolon: true
                  }
                  stat {
                    ifstat {
                      condition {
                        str: "]"
                      }
                      first {
                        chunk {
                        }
                      }
                      clauses {
                        condition {
                        }
                        block {
                          chunk {
                            stat {
                              semicolon: false
                            }
                          }
                        }
                      }
                      clauses {
                        condition {
                        }
                        block {
                          chunk {
                            stat {
                              semicolon: true
                            }
                          }
                        }
                      }
                      last {
                        chunk {
                        }
                      }
                    }
                    semicolon: true
                  }
                  laststat {
                  }
                }
              }
              clauses {
                condition {
                }
                block {
                  chunk {
                    stat {
                      semicolon: false
                    }
                  }
                }
              }
              clauses {
                condition {
                }
                block {
                  chunk {
                    stat {
                      semicolon: true
                    }
                  }
                }
              }
            }
            semicolon: true
          }
          laststat {
          }
        }
      }
      clauses {
        condition {
        }
        block {
          chunk {
            stat {
              semicolon: false
            }
          }
        }
      }
      clauses {
        condition {
        }
        block {
          chunk {
            stat {
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: false
  }
  laststat {
    semicolon: true
  }
}
