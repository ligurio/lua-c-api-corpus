chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        binary {
          leftexp {
          }
          binop {
            greaterEqual: 4
          }
          rightexp {
            prefixexp {
              functioncall {
              }
            }
          }
        }
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                  true: 0
                }
                stopexp {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                          ellipsis: ""
                        }
                        binop {
                          greaterEqual: 4
                        }
                        rightexp {
                          prefixexp {
                            exp {
                              binary {
                                leftexp {
                                }
                                binop {
                                  or: 4
                                }
                                rightexp {
                                  prefixexp {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        forcyclename {
                          name {
                            name: "C"
                            num: 0
                          }
                          startexp {
                          }
                          stopexp {
                          }
                          stepexp {
                            binary {
                              leftexp {
                              }
                              binop {
                                greaterEqual: 4
                              }
                              rightexp {
                                binary {
                                  leftexp {
                                    prefixexp {
                                    }
                                  }
                                  binop {
                                  }
                                  rightexp {
                                  }
                                }
                              }
                            }
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                      stat {
                        forcyclename {
                          name {
                            name: ""
                            num: 0
                          }
                          startexp {
                          }
                          stopexp {
                            binary {
                              leftexp {
                              }
                              binop {
                                greaterEqual: 4
                              }
                              rightexp {
                                prefixexp {
                                  exp {
                                    binary {
                                      leftexp {
                                      }
                                      binop {
                                        or: 4
                                      }
                                      rightexp {
                                        prefixexp {
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          stepexp {
                            binary {
                              leftexp {
                              }
                              binop {
                                greaterEqual: 4
                              }
                              rightexp {
                                prefixexp {
                                  exp {
                                    binary {
                                      leftexp {
                                      }
                                      binop {
                                        or: 4
                                      }
                                      rightexp {
                                        prefixexp {
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              true: 4
                            }
                            binop {
                              greaterEqual: 4
                            }
                            rightexp {
                              prefixexp {
                              }
                            }
                          }
                        }
                        binop {
                          greaterEqual: 0
                        }
                        rightexp {
                          prefixexp {
                            exp {
                              binary {
                                leftexp {
                                }
                                binop {
                                }
                                rightexp {
                                  binary {
                                    leftexp {
                                    }
                                    binop {
                                      or: 4
                                    }
                                    rightexp {
                                      prefixexp {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                stepexp {
                  binary {
                    leftexp {
                      nil: 0
                    }
                    binop {
                      greaterEqual: 4
                    }
                    rightexp {
                      prefixexp {
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
