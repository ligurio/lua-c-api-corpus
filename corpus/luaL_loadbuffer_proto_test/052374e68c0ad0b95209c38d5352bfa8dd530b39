chunk {
  stat {
    semicolon: true
  }
  stat {
    block {
      block {
        chunk {
          stat {
            localfunc {
              name {
                name: ""
                num: 0
              }
              funcbody {
                block {
                  chunk {
                    stat {
                    }
                    stat {
                      block {
                        block {
                          chunk {
                            laststat {
                              explist {
                                explist {
                                  expressions {
                                    unary {
                                      unop {
                                      }
                                      exp {
                                        str: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                                      }
                                    }
                                  }
                                  explast {
                                    prefixexp {
                                      functioncall {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    stat {
                      block {
                        block {
                          chunk {
                            stat {
                              repeatcycle {
                                block {
                                  chunk {
                                  }
                                }
                                condition {
                                  unary {
                                    unop {
                                    }
                                    exp {
                                      str: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                                    }
                                  }
                                }
                              }
                            }
                            laststat {
                              break: 537534501
                              semicolon: true
                            }
                          }
                        }
                      }
                    }
                    stat {
                      block {
                        block {
                          chunk {
                            laststat {
                              explist {
                                explist {
                                  explast {
                                    prefixexp {
                                      functioncall {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    stat {
                      localfunc {
                        name {
                          name: ""
                          num: 0
                        }
                        funcbody {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          laststat {
            explist {
              explist {
                expressions {
                  number: 0
                }
                explast {
                }
              }
            }
            semicolon: true
          }
        }
      }
    }
  }
}
