chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            forcyclename {
              name {
                name: ""
                num: 4
              }
              startexp {
                number: 163.44938772799651
              }
              stopexp {
                number: -0
              }
              stepexp {
                number: -0
              }
              doblock {
                block {
                  chunk {
                    stat {
                    }
                    stat {
                      localnames {
                        namelist {
                          firstname {
                            name: ""
                            num: 0
                          }
                        }
                        explist {
                          expressions {
                          }
                          explast {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            func {
              name {
                firstname {
                  name: ""
                  num: 0
                }
              }
              body {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          stat {
            whilecycle {
              condition {
              }
              doblock {
                block {
                  chunk {
                    stat {
                    }
                    stat {
                      forcyclename {
                        name {
                          name: ""
                          num: 25968
                        }
                        startexp {
                          number: 163.44938772799651
                        }
                        stopexp {
                          number: 163.44938772799651
                        }
                        stepexp {
                          number: -0
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
        nil: 0
      }
    }
  }
  stat {
  }
  stat {
    block {
      block {
        chunk {
          stat {
          }
          stat {
            forcyclename {
              name {
                name: ""
                num: 25968
              }
              startexp {
                number: 163.44938772799651
              }
              stopexp {
                number: -0
              }
              stepexp {
                number: -0
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
              }
            }
          }
          stat {
            localfunc {
              name {
                name: "z"
                num: 0
              }
              funcbody {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          stat {
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        number: 0
      }
      stopexp {
        number: -0
      }
      stepexp {
        number: -0
      }
      doblock {
        block {
          chunk {
            stat {
              semicolon: true
            }
          }
        }
      }
    }
  }
}
