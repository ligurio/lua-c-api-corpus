chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            func {
              name {
                firstname {
                  name: ""
                  num: 0
                }
              }
              body {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          stat {
            whilecycle {
              condition {
                tableconstructor {
                  fieldlist {
                    firstField {
                      exprassign {
                        key {
                          str: "hotexit=\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310"
                        }
                        value {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                }
                                args {
                                  explist {
                                    explist {
                                      expressions {
                                      }
                                      expressions {
                                      }
                                      expressions {
                                      }
                                      explast {
                                        prefixexp {
                                          functioncall {
                                            prefArgs {
                                              prefixexp {
                                              }
                                              args {
                                                explist {
                                                  explist {
                                                    expressions {
                                                      binary {
                                                        leftexp {
                                                          prefixexp {
                                                            functioncall {
                                                              prefArgs {
                                                                prefixexp {
                                                                }
                                                                args {
                                                                  explist {
                                                                    explist {
                                                                      expressions {
                                                                        binary {
                                                                          leftexp {
                                                                          }
                                                                          binop {
                                                                          }
                                                                          rightexp {
                                                                            nil: 0
                                                                          }
                                                                        }
                                                                      }
                                                                      expressions {
                                                                      }
                                                                      explast {
                                                                        ellipsis: "\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                        binop {
                                                        }
                                                        rightexp {
                                                          nil: 0
                                                        }
                                                      }
                                                    }
                                                    expressions {
                                                    }
                                                    explast {
                                                      ellipsis: "\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                          }
                        }
                        condition {
                          ellipsis: ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
            tableconstructor {
            }
          }
        }
      }
    }
  }
  laststat {
    semicolon: true
  }
}
