chunk {
  stat {
    call {
    }
  }
  stat {
    block {
      block {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localnames {
              namelist {
                firstname {
                  name: ""
                  num: 0
                }
              }
              explist {
                explast {
                  unary {
                    unop {
                      negate: 0
                    }
                    exp {
                    }
                  }
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
              prefArgs {
                prefixexp {
                }
                args {
                  str: "z"
                }
              }
            }
          }
          stat {
            semicolon: true
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            list {
              varlist {
                var {
                }
                vars {
                  indexexpr {
                    prefixexp {
                      var {
                        indexexpr {
                          prefixexp {
                            functioncall {
                            }
                          }
                          exp {
                          }
                        }
                      }
                    }
                    exp {
                      str: "\267"
                    }
                  }
                }
                vars {
                  indexexpr {
                    prefixexp {
                      functioncall {
                      }
                    }
                    exp {
                      binary {
                        leftexp {
                          unary {
                            unop {
                            }
                            exp {
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                }
                                binop {
                                }
                                rightexp {
                                  binary {
                                    leftexp {
                                      prefixexp {
                                        exp {
                                          binary {
                                            leftexp {
                                              prefixexp {
                                                exp {
                                                  binary {
                                                    leftexp {
                                                      prefixexp {
                                                        exp {
                                                          binary {
                                                            leftexp {
                                                              number: 0
                                                            }
                                                            binop {
                                                              or: 0
                                                            }
                                                            rightexp {
                                                              false: 0
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                    binop {
                                                    }
                                                    rightexp {
                                                      binary {
                                                        leftexp {
                                                          prefixexp {
                                                            exp {
                                                              binary {
                                                                leftexp {
                                                                  number: 1.79266204420746e-310
                                                                }
                                                                binop {
                                                                  or: 3276801
                                                                }
                                                                rightexp {
                                                                  ellipsis: "////////////////////////////////////////////////////////////////////////////////////////////////"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                        binop {
                                                        }
                                                        rightexp {
                                                          str: ":"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            binop {
                                            }
                                            rightexp {
                                              prefixexp {
                                                exp {
                                                  binary {
                                                    leftexp {
                                                      unary {
                                                        unop {
                                                        }
                                                        exp {
                                                        }
                                                      }
                                                    }
                                                    binop {
                                                    }
                                                    rightexp {
                                                      false: 0
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    binop {
                                      greater: 538968064
                                    }
                                    rightexp {
                                      tableconstructor {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            binop {
                            }
                            rightexp {
                              tableconstructor {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              explist {
                expressions {
                  binary {
                    leftexp {
                    }
                    binop {
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                            }
                            binop {
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  prefixexp {
                                    exp {
                                      binary {
                                        leftexp {
                                          number: 1.79266204420746e-310
                                        }
                                        binop {
                                          or: 3276801
                                        }
                                        rightexp {
                                          false: 0
                                        }
                                      }
                                    }
                                  }
                                }
                                binop {
                                }
                                rightexp {
                                  binary {
                                    leftexp {
                                    }
                                    binop {
                                    }
                                    rightexp {
                                      false: 538968064
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                        }
                      }
                    }
                  }
                }
                expressions {
                  binary {
                    leftexp {
                    }
                    binop {
                    }
                    rightexp {
                      true: 538968064
                    }
                  }
                }
                explast {
                  function {
                    body {
                      parlist {
                        ellipsis: "////////////////////////////////////////////////////////////////////////////////////////////////"
                      }
                      block {
                        chunk {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            whilecycle {
              condition {
              }
              doblock {
                block {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
          stat {
            whilecycle {
              condition {
              }
              doblock {
                block {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: "z"
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: "z"
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
}
