chunk {
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          binary {
            leftexp {
              prefixexp {
                var {
                  indexname {
                    prefixexp {
                      exp {
                        tableconstructor {
                          fieldlist {
                            firstField {
                              exprassign {
                                key {
                                }
                                value {
                                  number: 0
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    Name: ""
                  }
                }
              }
            }
            binop {
            }
            rightexp {
            }
          }
        }
        explast {
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
          }
          stat {
            whilecycle {
              condition {
                binary {
                  leftexp {
                    number: 8.02690444543668
                  }
                  binop {
                    div: 0
                  }
                  rightexp {
                    binary {
                      leftexp {
                        prefixexp {
                          exp {
                            prefixexp {
                              exp {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                        number: -48.00000000000005
                                      }
                                      binop {
                                        concat: 0
                                      }
                                      rightexp {
                                        binary {
                                          leftexp {
                                            number: 1.072840466380051e+253
                                          }
                                          binop {
                                            exp: 0
                                          }
                                          rightexp {
                                            number: 4
                                          }
                                        }
                                      }
                                    }
                                  }
                                  binop {
                                    concat: 0
                                  }
                                  rightexp {
                                    binary {
                                      leftexp {
                                        number: 1.072840466380051e+253
                                      }
                                      binop {
                                        concat: 0
                                      }
                                      rightexp {
                                        number: 4
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      binop {
                        div: 0
                      }
                      rightexp {
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
      condition {
        ellipsis: ""
      }
    }
  }
}
