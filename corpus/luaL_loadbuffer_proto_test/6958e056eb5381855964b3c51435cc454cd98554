chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 6
      }
      startexp {
        number: -0
      }
      stopexp {
      }
      stepexp {
        number: -5
      }
      doblock {
        block {
          chunk {
            stat {
              semicolon: false
            }
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        prefixexp {
          exp {
            binary {
              leftexp {
                number: -5
              }
              binop {
                concat: 0
              }
              rightexp {
                str: "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
              }
            }
          }
        }
      }
      stopexp {
        number: 0
      }
      stepexp {
        unary {
          unop {
            length: 0
          }
          exp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 6
                }
                startexp {
                }
                stopexp {
                }
                stepexp {
                  number: 0
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        semicolon: true
                      }
                    }
                  }
                }
              }
            }
            stat {
              call {
              }
            }
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                          number: -5
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                          str: "e3333"
                        }
                      }
                    }
                  }
                }
                stopexp {
                  number: 0
                }
                stepexp {
                  number: -0
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        whilecycle {
                          condition {
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                        semicolon: true
                      }
                      stat {
                        list {
                          varlist {
                            var {
                            }
                          }
                          explist {
                            explast {
                            }
                          }
                        }
                      }
                      stat {
                        forcyclename {
                          name {
                            name: ""
                            num: 6
                          }
                          startexp {
                            number: 44.0625
                          }
                          stopexp {
                            true: 0
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
