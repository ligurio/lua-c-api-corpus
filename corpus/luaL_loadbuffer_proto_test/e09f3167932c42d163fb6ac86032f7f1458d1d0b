chunk {
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  str: ""
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        forcyclelist {
                          names {
                            firstname {
                              name: ""
                              num: 0
                            }
                          }
                          expressions {
                            explast {
                              function {
                                body {
                                  block {
                                    chunk {
                                      laststat {
                                        explist {
                                          explist {
                                            expressions {
                                              number: -2.6310196177774444e+49
                                            }
                                            explast {
                                              prefixexp {
                                                functioncall {
                                                  prefArgs {
                                                    prefixexp {
                                                    }
                                                    args {
                                                      explist {
                                                        explist {
                                                          explast {
                                                            prefixexp {
                                                              functioncall {
                                                                prefArgs {
                                                                  prefixexp {
                                                                  }
                                                                  args {
                                                                    str: ""
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        forcyclelist {
                          names {
                            firstname {
                              name: ""
                              num: 0
                            }
                          }
                          expressions {
                            explast {
                              function {
                                body {
                                  block {
                                    chunk {
                                      laststat {
                                        explist {
                                          explist {
                                            expressions {
                                            }
                                            explast {
                                              prefixexp {
                                                functioncall {
                                                  prefArgs {
                                                    prefixexp {
                                                    }
                                                    args {
                                                      str: "\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        semicolon: true
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        localnames {
                          namelist {
                            firstname {
                              name: ""
                              num: 0
                            }
                          }
                        }
                        semicolon: true
                      }
                      stat {
                      }
                      stat {
                        whilecycle {
                          condition {
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            laststat {
              explist {
                explist {
                  expressions {
                    ellipsis: "\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014"
                  }
                  explast {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
  }
}
