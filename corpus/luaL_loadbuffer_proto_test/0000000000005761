chunk {
  stat {
    call {
    }
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        parlist {
          ellipsis: "\000\000\000\000"
        }
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
        prefixexp {
          var {
            indexexpr {
              prefixexp {
              }
              exp {
                unary {
                  unop {
                  }
                  exp {
                    true: 23808
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            break: 0
          }
        }
      }
      condition {
      }
    }
    semicolon: false
  }
  stat {
    semicolon: false
  }
  stat {
    call {
    }
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
          functioncall {
            namedArgs {
              prefixexp {
              }
              name {
                name: ""
                num: 0
              }
              args {
              }
            }
          }
        }
        name {
          name: ""
          num: 0
        }
        args {
        }
      }
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: ""
          num: 0
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    list {
      varlist {
        var {
          indexexpr {
            prefixexp {
              exp {
                tableconstructor {
                  fieldlist {
                    firstField {
                    }
                  }
                }
              }
            }
            exp {
            }
          }
        }
        vars {
        }
        vars {
          name {
            name: "ffi.a   namedArgs {\n        prefixexp {\n          functioncall {\n            namedArgs {\n              prefixexp {\n              }\n              name {\n                name: \"\"\n                num: 0\n              }\n              args {\n              }\n            }\n          }\n        }\n        name {\n          name: \"\"\n          num: 0\n        }\n        args {\n        }\n      }\n    }\n  }\n  stat {\n  }\n  stat {\n    list {\n      varlist {\n        var {\n        }\n      }\n      explist {\n        explast {\n        }\n      }\n    }\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n    forcyclelist {\n      names {\n        firstname {\n          name: \"\"\n          num: 0\n        }\n      }\n      expressions {\n        explast {\n          nil: 0\n        }\n      }\n      doblock {\n        block {\n          chunk {\n          }\n        }\n      }\n    }\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    localnames {\n      namelist {\n        firstname {\n          name: \"\"\n          num: 1\n        }\n        names {\n          name: \"\"\n          num: 1\n        }\n        names {\n          name: \"\"\n          num: 0\n        }\n        names {\n          name: \"\"\n          num: 1\n        }\n        names {\n          name: \"\\000\\000\\000\\000\"\n          num: 0\n        }\n        names {\n          name: \"\"\n          num: 1\n        }\n        names {\n          name: \"\"\n          num: 0\n        }\n        names {\n          name: \"\"\n          num: 0\n        }\n        names {\n          name: \"\"\n          num: 1\n        }\n        names {\n          name: \"\"\n          num: 0\n        }\n        names {\n          name: \"\"\n          num: 0\n        }\n        names {\n          name: \"\"\n          num: 0\n        }\n        names {\n          name: \"\"\n          num: 0\n        }\n        names {\n          name: \"\"\n          num: 0\n        }\n        names {\n          name: \"\"\n          num: 0\n        }\n        names {\n          name: \"\\320\\320\\320\\320\"\n          num: 0\n        }\n        names {\n          name: \"\"\n          num: 0\n        }\n      }\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n  }\n  stat {\n    call {\n      prefArgs {\n        prefixexp {\n          exp {\n            binary {\n              leftexp {\n              }\n              binop {\n                sub: 0\n              }\n              rightexp {\n              }\n            }\n          }\n        }\n        args {\n        }\n      }\n    }\n    semicolon: true\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    func {\n      name {\n        firstname {\n          name: \"\"\n          num: 0\n        }\n        lastname {\n          name: \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n          num: 0\n        }\n      }\n      body {\n        block {\n          chunk {\n            laststat {\n              explist {\n                explist {\n                  explast {\n                    binary {\n                      leftexp {\n                        ellipsis: \"\\232\"\n                      }\n                      binop {\n                      }\n                      rightexp {\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  stat {\n    call {\n      prefArgs {\n        prefixexp {\n        }\n        args {\n        }\n      }\n    }\n    semicolon: false\n  }\n  stat {\n    semicolon: true\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    call {\n    }\n    semicolon: true\n  }\n  stat {\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    localfunc {\n      name {\n        name: \"\"\n        num: 0\n      }\n      funcbody {\n        block {\n          chunk {\n            stat {\n              block {\n                block {\n                  chunk {\n                    stat {\n                      list {\n                        varlist {\n                          var {\n                          }\n                        }\n                        explist {\n                          explast {\n                            function {\n                              body {\n                                parlist {\n                                  ellipsis: \"\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\"\n                                }\n                                block {\n                                  chunk {\n                                  }\n                                }\n     lignof"
            num: 0
          }
        }
        vars {
          indexexpr {
            prefixexp {
              var {
                indexname {
                  prefixexp {
                    exp {
                      str: "\220\376\377\377"
                    }
                  }
                  Name: ""
                }
              }
            }
            exp {
            }
          }
        }
        vars {
          indexexpr {
            prefixexp {
              exp {
                tableconstructor {
                  fieldlist {
                    firstField {
                      expression {
                        tableconstructor {
                        }
                      }
                    }
                  }
                }
              }
            }
            exp {
              prefixexp {
                exp {
                  binary {
                    leftexp {
                    }
                    binop {
                      or: 0
                    }
                    rightexp {
                      number: 2
                    }
                  }
                }
              }
            }
          }
        }
        vars {
          name {
            name: ""
            num: 9
          }
        }
        vars {
        }
      }
      explist {
        explast {
          binary {
            leftexp {
            }
            binop {
              and: 0
            }
            rightexp {
              prefixexp {
                var {
                  indexexpr {
                    prefixexp {
                    }
                    exp {
                      unary {
                        unop {
                        }
                        exp {
                          nil: 6488064
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
      clauses {
        condition {
        }
        block {
          chunk {
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
  }
}
