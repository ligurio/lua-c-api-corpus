chunk {
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "z"
          num: 0
        }
        names {
          name: "\215"
          num: 0
        }
      }
      expressions {
        explast {
          tableconstructor {
            fieldlist {
              firstField {
                exprassign {
                  key {
                    binary {
                      leftexp {
                      }
                      binop {
                        concat: 0
                      }
                      rightexp {
                        binary {
                          leftexp {
                            binary {
                              leftexp {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                        binary {
                                          leftexp {
                                            number: -4.9591064453125e-05
                                          }
                                          binop {
                                            div: 0
                                          }
                                          rightexp {
                                            number: -4.9591064453125e-05
                                          }
                                        }
                                      }
                                      binop {
                                        div: 0
                                      }
                                      rightexp {
                                        number: -4.9591064453125e-05
                                      }
                                    }
                                  }
                                  binop {
                                    div: 0
                                  }
                                  rightexp {
                                    binary {
                                      leftexp {
                                        binary {
                                          leftexp {
                                            binary {
                                              leftexp {
                                                false: 9728
                                              }
                                              binop {
                                                div: 1902468959
                                              }
                                              rightexp {
                                                number: -4.9591064453125e-05
                                              }
                                            }
                                          }
                                          binop {
                                            less: 9728
                                          }
                                          rightexp {
                                            binary {
                                              leftexp {
                                                false: 64
                                              }
                                              binop {
                                                div: 0
                                              }
                                              rightexp {
                                                number: -4.9591064453125e-05
                                              }
                                            }
                                          }
                                        }
                                      }
                                      binop {
                                        div: 0
                                      }
                                      rightexp {
                                        str: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                                      }
                                    }
                                  }
                                }
                              }
                              binop {
                                exp: 9728
                              }
                              rightexp {
                                binary {
                                  leftexp {
                                    false: 9728
                                  }
                                  binop {
                                    div: 0
                                  }
                                  rightexp {
                                    false: 9728
                                  }
                                }
                              }
                            }
                          }
                          binop {
                            concat: 1902468959
                          }
                          rightexp {
                          }
                        }
                      }
                    }
                  }
                  value {
                    number: 2.8258304499440005e-135
                  }
                }
              }
              fields {
                field {
                }
                sep {
                  comma: 2048
                }
              }
              fields {
                field {
                  exprassign {
                    key {
                    }
                    value {
                    }
                  }
                }
                sep {
                }
              }
              lastSep {
                comma: 0
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              semicolon: true
            }
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  explast {
                    tableconstructor {
                      fieldlist {
                        firstField {
                        }
                        fields {
                          field {
                            exprassign {
                              key {
                              }
                              value {
                              }
                            }
                          }
                          sep {
                          }
                        }
                        lastSep {
                          comma: 0
                        }
                      }
                    }
                  }
                }
              }
            }
            laststat {
            }
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            forcyclelist {
              names {
                firstname {
                  name: ""
                  num: 0
                }
                names {
                  name: ""
                  num: 0
                }
              }
              expressions {
                explast {
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
              namedArgs {
                prefixexp {
                }
                name {
                  name: ""
                  num: 0
                }
                args {
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            ifstat {
              condition {
              }
              first {
                chunk {
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
              namedArgs {
                prefixexp {
                }
                name {
                  name: ""
                  num: 0
                }
                args {
                }
              }
            }
          }
          stat {
            call {
              namedArgs {
                prefixexp {
                }
                name {
                  name: ""
                  num: 0
                }
                args {
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            localnames {
              namelist {
                firstname {
                  name: ""
                  num: 0
                }
                names {
                  name
                  num: 0
                }
              }
            }
          }
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
              }
              stopexp {
              }
              stepexp {
                tableconstructor {
                  fieldlist {
                    firstField {
                    }
                    fields {
                      field {
                        expression {
                          nil: 4294967291
                        }
                      }
                      sep {
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          stat {
            localnames {
              namelist {
                firstname {
                  name: ""
                  num: 0
                }
                names {
                  name
                  num: 0
                }
              }
            }
          }
          stat {
          }
          stat {
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        expressions {
          nil: 6488064
        }
        explast {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
        }
        name {
          name: ""
          num: 0
        }
        args {
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            break: 0
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
              namedArgs {
                prefixexp {
                }
                name {
                  name: ""
                  num: 0
                }
                args {
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            ifstat {
              condition {
              }
              first {
                chunk {
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            list {
              varlist {
                var {
                }
              }
              explist {
                expressions {
                  binary {
                    leftexp {
                      str: "!"
                    }
                    binop {
                    }
                    rightexp {
                    }
                  }
                }
                explast {
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
              prefArgs {
                prefixexp {
                }
                args {
                  explist {
                    explist {
                      expressions {
                        tableconstructor {
                          fieldlist {
                            firstField {
                            }
                            fields {
                              field {
                                exprassign {
                                  key {
                                    function {
                                      body {
                                        block {
                                          chunk {
                                            stat {
                                              repeatcycle {
                                                block {
                                                  chunk {
                                                  }
                                                }
                                                condition {
                                                  ellipsis: "2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  value {
                                  }
                                }
                              }
                              sep {
                              }
                            }
                          }
                        }
                      }
                      explast {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
        }
        name {
          name: ""
          num: 0
        }
        args {
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
}
