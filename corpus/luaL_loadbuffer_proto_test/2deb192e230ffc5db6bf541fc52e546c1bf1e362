chunk {
  stat {
    semicolon: true
  }
  stat {
    ifstat {
      condition {
        str: ""
      }
      first {
        chunk {
          stat {
          }
          stat {
          }
          stat {
            block {
              block {
                chunk {
                }
              }
            }
            semicolon: true
          }
          stat {
            ifstat {
              condition {
                str: "\000\000\000\000hunk {\n  stat {\n    forcyclename {\n      name {\n        name: \"\"\n        num: 0\n      }\n      startexp {\n      }\n      stopexp {\n        number: 0\n      }\n      stepexp {\n        number: -0\n      }\n      doblock {\n        block {\n          chunk {\n            stat {\n              forcyclename {\n                name {\n                  name: \"\"\n                  num: 0\n                }\n                startexp {\n                }\n                stopexp {\n                  str: \"\\377\\377\\377\\377\"\n                }\n                stepexp {\n                  number: 5.41117215608311e-312\n                }\n                doblock {\n                  block {\n                    chunk {\n                      stat {\n                        forcyclename {\n                          name {\n                            name: \"\\024\"\n                            num: 0\n                          }\n                          startexp {\n                            prefixexp {\n                            }\n                          }\n                          stopexp {\n                            number: 0\n                          }\n                          stepexp {\n                            number: -400\n                          }\n                          doblock {\n                            block {\n                              chunk {\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }"
              }
              first {
                chunk {
                  stat {
                    semicolon: true
                  }
                  stat {
                  }
                }
              }
              clauses {
                condition {
                  binary {
                    leftexp {
                      number: -416
                    }
                    binop {
                    }
                    rightexp {
                    }
                  }
                }
                block {
                  chunk {
                  }
                }
              }
              clauses {
                condition {
                  binary {
                    leftexp {
                      ellipsis: "\000\000\000\000"
                    }
                    binop {
                      and: 256
                    }
                    rightexp {
                    }
                  }
                }
                block {
                  chunk {
                  }
                }
              }
              last {
                chunk {
                  laststat {
                    break: 0
                    semicolon: false
                  }
                }
              }
            }
          }
        }
      }
      clauses {
        condition {
          binary {
            leftexp {
            }
            binop {
              add: 0
            }
            rightexp {
              number: -400
            }
          }
        }
        block {
          chunk {
          }
        }
      }
      clauses {
        condition {
          str: "\377\377\377\377"
        }
        block {
          chunk {
          }
        }
      }
    }
  }
  laststat {
  }
}
