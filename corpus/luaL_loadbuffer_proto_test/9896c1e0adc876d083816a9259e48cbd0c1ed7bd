chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 117442305
      }
      startexp {
        number: 0
      }
      stopexp {
        number: 0
      }
      stepexp {
        number: -0
      }
      doblock {
        block {
          chunk {
            stat {
              ifstat {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                      fields {
                        field {
                          expression {
                            unary {
                              unop {
                                length: 0
                              }
                              exp {
                                binary {
                                  leftexp {
                                    binary {
                                      leftexp {
                                      }
                                      binop {
                                        concat: 4
                                      }
                                      rightexp {
                                        unary {
                                          unop {
                                            length: 0
                                          }
                                          exp {
                                            tableconstructor {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  binop {
                                    mod: 117442305
                                  }
                                  rightexp {
                                    binary {
                                      leftexp {
                                        number: 0
                                      }
                                      binop {
                                        exp: 0
                                      }
                                      rightexp {
                                        binary {
                                          leftexp {
                                            binary {
                                              leftexp {
                                                number: 0
                                              }
                                              binop {
                                                exp: 0
                                              }
                                              rightexp {
                                                unary {
                                                  unop {
                                                    length: 0
                                                  }
                                                  exp {
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          binop {
                                            less: 0
                                          }
                                          rightexp {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        sep {
                        }
                      }
                    }
                  }
                }
                first {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
