chunk {
  stat {
    whilecycle {
      condition {
        tableconstructor {
          fieldlist {
            firstField {
              exprassign {
                key {
                  number: -0
                }
                value {
                  number: 1.9453125
                }
              }
            }
            fields {
              field {
                expression {
                }
              }
              sep {
              }
            }
            fields {
              field {
                exprassign {
                  key {
                  }
                  value {
                  }
                }
              }
              sep {
                comma: 1526726656
              }
            }
            fields {
              field {
                expression {
                  prefixexp {
                    functioncall {
                    }
                  }
                }
              }
              sep {
              }
            }
            fields {
              field {
                expression {
                  number: -0
                }
              }
              sep {
              }
            }
            fields {
              field {
                exprassign {
                  key {
                    binary {
                      leftexp {
                      }
                      binop {
                      }
                      rightexp {
                      }
                    }
                  }
                  value {
                  }
                }
              }
              sep {
              }
            }
            lastSep {
              comma: 50
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              localfunc {
                name {
                  name: ""
                  num: 0
                }
                funcbody {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
}
