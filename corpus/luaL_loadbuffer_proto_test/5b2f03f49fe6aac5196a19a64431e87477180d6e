chunk {
  stat {
    localfunc {
      name {
        name: "\346"
        num: 0
      }
      funcbody {
        block {
          chunk {
            stat {
              call {
                prefArgs {
                  prefixexp {
                  }
                  args {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            whilecycle {
              condition {
                tableconstructor {
                  fieldlist {
                    firstField {
                      expression {
                        tableconstructor {
                          fieldlist {
                            firstField {
                              expression {
                                ellipsis: "\346"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                    stat {
                      forcyclename {
                        name {
                          name: ""
                          num: 9
                        }
                        startexp {
                          number: -0
                        }
                        stopexp {
                          binary {
                            leftexp {
                              number: 3.95252516672997e-323
                            }
                            binop {
                              or: 0
                            }
                            rightexp {
                              tableconstructor {
                                fieldlist {
                                  firstField {
                                  }
                                  fields {
                                    field {
                                      expression {
                                        ellipsis: ""
                                      }
                                    }
                                    sep {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        stepexp {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                  prefixexp {
                                  }
                                }
                                binop {
                                  or: 0
                                }
                                rightexp {
                                }
                              }
                            }
                            binop {
                            }
                            rightexp {
                            }
                          }
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  laststat {
    semicolon: true
  }
}
