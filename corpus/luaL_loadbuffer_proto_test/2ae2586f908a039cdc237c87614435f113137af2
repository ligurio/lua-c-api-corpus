chunk {
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        parlist {
        }
        block {
          chunk {
            laststat {
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localfunc {
              name {
                name: ""
                num: 0
              }
              funcbody {
                parlist {
                  ellipsis: "\001\000\000\000\000\000\000\000"
                }
                block {
                  chunk {
                    stat {
                      localfunc {
                        name {
                          name: ""
                          num: 0
                        }
                        funcbody {
                          parlist {
                          }
                          block {
                            chunk {
                              laststat {
                                explist {
                                  explist {
                                    explast {
                                      binary {
                                        leftexp {
                                        }
                                        binop {
                                          or: 0
                                        }
                                        rightexp {
                                          prefixexp {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    laststat {
                      break: 0
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
    semicolon: true
  }
}
