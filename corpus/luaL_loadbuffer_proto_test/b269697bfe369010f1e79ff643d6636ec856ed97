chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
              prefArgs {
                prefixexp {
                  functioncall {
                    prefArgs {
                      prefixexp {
                      }
                      args {
                      }
                    }
                  }
                }
                args {
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
              namedArgs {
                prefixexp {
                  exp {
                    unary {
                      unop {
                      }
                      exp {
                        number: 1.4916681462400413e-154
                      }
                    }
                  }
                }
                name {
                  name: ""
                  num: 0
                }
                args {
                }
              }
            }
          }
          stat {
          }
          stat {
          }
          stat {
          }
          stat {
            call {
              namedArgs {
                prefixexp {
                }
                name {
                  name: ""
                  num: 3003121664
                }
                args {
                }
              }
            }
          }
          stat {
            call {
              namedArgs {
                prefixexp {
                  functioncall {
                    namedArgs {
                      prefixexp {
                      }
                      name {
                        name: ""
                        num: 3003121664
                      }
                      args {
                      }
                    }
                  }
                }
                name {
                  name: ""
                  num: 0
                }
                args {
                }
              }
            }
          }
          stat {
            call {
            }
          }
          stat {
            whilecycle {
              condition {
                function {
                  body {
                    parlist {
                      ellipsis: "\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247\247"
                    }
                    block {
                      chunk {
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
            semicolon: true
          }
          stat {
            call {
            }
            semicolon: true
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
        }
      }
      condition {
        unary {
          unop {
            not: 0
          }
          exp {
            unary {
              unop {
              }
              exp {
                function {
                  body {
                    block {
                      chunk {
                        laststat {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
      namedArgs {
        prefixexp {
          exp {
            unary {
              unop {
              }
              exp {
                function {
                  body {
                    block {
                      chunk {
                        laststat {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        name {
          name: "write"
          num: 0
        }
        args {
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: "write"
        num: 0
      }
      startexp {
        number: -0
      }
      stopexp {
        nil: 0
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    call {
    }
  }
}
