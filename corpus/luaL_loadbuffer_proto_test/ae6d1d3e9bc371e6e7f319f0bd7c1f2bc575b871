chunk {
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          unary {
            unop {
              negate: 1
            }
            exp {
              binary {
                leftexp {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                        }
                        binop {
                          or: 0
                        }
                        rightexp {
                          ellipsis: "/"
                        }
                      }
                    }
                  }
                }
                binop {
                }
                rightexp {
                }
              }
            }
          }
        }
        expressions {
          unary {
            unop {
              negate: 2
            }
            exp {
              binary {
                leftexp {
                  unary {
                    unop {
                      negate: 2
                    }
                    exp {
                      binary {
                        leftexp {
                          unary {
                            unop {
                            }
                            exp {
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                        }
                      }
                    }
                  }
                }
                binop {
                }
                rightexp {
                }
              }
            }
          }
        }
        expressions {
          unary {
            unop {
              negate: 2
            }
            exp {
              binary {
                leftexp {
                }
                binop {
                }
                rightexp {
                }
              }
            }
          }
        }
        expressions {
          prefixexp {
            exp {
              binary {
                leftexp {
                  unary {
                    unop {
                      negate: 2
                    }
                    exp {
                      binary {
                        leftexp {
                          prefixexp {
                            exp {
                              binary {
                                leftexp {
                                }
                                binop {
                                  or: 0
                                }
                                rightexp {
                                }
                              }
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                        }
                      }
                    }
                  }
                }
                binop {
                }
                rightexp {
                }
              }
            }
          }
        }
        explast {
        }
      }
    }
  }
}
