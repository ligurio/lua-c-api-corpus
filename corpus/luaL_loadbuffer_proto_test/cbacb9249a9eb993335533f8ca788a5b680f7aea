chunk {
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
          number: -1
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
          }
          stat {
            list {
              varlist {
                var {
                }
              }
              explist {
                expressions {
                  ellipsis: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                }
                explast {
                  unary {
                    unop {
                      negate: 0
                    }
                    exp {
                      prefixexp {
                        exp {
                          binary {
                            leftexp {
                              number: -5
                            }
                            binop {
                              concat: 0
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  number: 1.79266204420746e-310
                                }
                                binop {
                                  or: 3276801
                                }
                                rightexp {
                                  false: 0
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        tableconstructor {
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
            nil: 0
          }
        }
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  laststat {
    break: 0
    semicolon: true
  }
}
