chunk {
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          nil: 0
        }
        explast {
          tableconstructor {
            fieldlist {
              firstField {
                expression {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        expression {
                          binary {
                            leftexp {
                              unary {
                                unop {
                                  length: 0
                                }
                                exp {
                                  tableconstructor {
                                    fieldlist {
                                      firstField {
                                        expression {
                                          binary {
                                            leftexp {
                                              number: 0
                                            }
                                            binop {
                                              concat: 0
                                            }
                                            rightexp {
                                            }
                                          }
                                        }
                                      }
                                      fields {
                                        field {
                                          expression {
                                          }
                                        }
                                        sep {
                                        }
                                      }
                                      fields {
                                        field {
                                          expression {
                                            prefixexp {
                                            }
                                          }
                                        }
                                        sep {
                                          comma: 1886679808
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            binop {
                              lessEqual: 0
                            }
                            rightexp {
                            }
                          }
                        }
                      }
                      fields {
                        field {
                          expression {
                            binary {
                              leftexp {
                              }
                              binop {
                                concat: 0
                              }
                              rightexp {
                                binary {
                                  leftexp {
                                    unary {
                                      unop {
                                      }
                                      exp {
                                        tableconstructor {
                                          fieldlist {
                                            firstField {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  binop {
                                    lessEqual: 0
                                  }
                                  rightexp {
                                    number: -1.5
                                  }
                                }
                              }
                            }
                          }
                        }
                        sep {
                          semicolon: 4
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      stepexp {
        number: 1.6642436981201172
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                }
                stopexp {
                }
                doblock {
                  block {
                    chunk {
                      laststat {
                        break: 268435456
                      }
                    }
                  }
                }
              }
            }
            laststat {
              explist {
                explist {
                  explast {
                    binary {
                      leftexp {
                        number: 0
                      }
                      binop {
                        concat: 0
                      }
                      rightexp {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: "\343\376\377\377"
        num: 0
      }
      startexp {
      }
      stopexp {
        prefixexp {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: "\376\377d"
        num: 0
      }
      startexp {
        number: -1.5
      }
      stopexp {
        prefixexp {
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
}
