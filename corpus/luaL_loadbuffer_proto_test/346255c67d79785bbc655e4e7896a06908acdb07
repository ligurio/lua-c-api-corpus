chunk {
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            nil: 0
          }
          binop {
            or: 0
          }
          rightexp {
            binary {
              leftexp {
                nil: 0
              }
              binop {
                or: 0
              }
              rightexp {
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
      last {
        chunk {
          laststat {
            break: 11008
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            nil: 0
          }
          binop {
            or: 0
          }
          rightexp {
          }
        }
      }
      first {
        chunk {
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
                unary {
                  unop {
                    length: 2
                  }
                  exp {
                    unary {
                      unop {
                        length: 2
                      }
                      exp {
                        unary {
                          unop {
                          }
                          exp {
                          }
                        }
                      }
                    }
                  }
                }
              }
              stopexp {
                number: 4
              }
              doblock {
                block {
                  chunk {
                    stat {
                      forcyclename {
                        name {
                          name: ""
                          num: 0
                        }
                        startexp {
                          number: 4
                        }
                        stopexp {
                          prefixexp {
                          }
                        }
                        stepexp {
                          number: 0
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                    stat {
                      forcyclename {
                        name {
                          name: ""
                          num: 2
                        }
                        startexp {
                          number: 4
                        }
                        stopexp {
                          prefixexp {
                          }
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                    stat {
                      forcyclename {
                        name {
                          name: ""
                          num: 0
                        }
                        startexp {
                          number: 4
                        }
                        stopexp {
                          prefixexp {
                          }
                        }
                        stepexp {
                          number: 0
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                          }
                        }
                        condition {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
