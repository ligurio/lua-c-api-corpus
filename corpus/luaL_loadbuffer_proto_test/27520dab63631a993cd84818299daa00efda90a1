chunk {
  stat {
    list {
      varlist {
        var {
        }
        vars {
          indexexpr {
            prefixexp {
              var {
                indexexpr {
                  prefixexp {
                    functioncall {
                    }
                  }
                  exp {
                    unary {
                      unop {
                      }
                      exp {
                        binary {
                          leftexp {
                            prefixexp {
                              exp {
                                nil: 0
                              }
                            }
                          }
                          binop {
                          }
                          rightexp {
                            ellipsis: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            exp {
              str: "\267"
            }
          }
        }
        vars {
          indexexpr {
            prefixexp {
              functioncall {
              }
            }
            exp {
              ellipsis: "coroutine.yield"
            }
          }
        }
      }
      explist {
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
                exprassign {
                  key {
                    nil: 32
                  }
                  value {
                    ellipsis: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                  }
                }
              }
            }
          }
        }
        expressions {
          binary {
            leftexp {
            }
            binop {
            }
            rightexp {
              binary {
                leftexp {
                  binary {
                    leftexp {
                    }
                    binop {
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                            }
                            binop {
                              greater: 538968064
                            }
                            rightexp {
                              binary {
                                leftexp {
                                }
                                binop {
                                  notEqual: 0
                                }
                                rightexp {
                                }
                              }
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                          binary {
                            leftexp {
                            }
                            binop {
                            }
                            rightexp {
                              function {
                                body {
                                  block {
                                    chunk {
                                      stat {
                                      }
                                      laststat {
                                        semicolon: true
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                binop {
                }
                rightexp {
                }
              }
            }
          }
        }
        expressions {
          binary {
            leftexp {
            }
            binop {
            }
            rightexp {
              binary {
                leftexp {
                }
                binop {
                }
                rightexp {
                }
              }
            }
          }
        }
        explast {
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
          indexexpr {
            prefixexp {
              exp {
                binary {
                  leftexp {
                  }
                  binop {
                  }
                  rightexp {
                    false: 3674210304
                  }
                }
              }
            }
            exp {
            }
          }
        }
        vars {
          indexexpr {
            prefixexp {
              exp {
                binary {
                  leftexp {
                    unary {
                      unop {
                        length: 0
                      }
                      exp {
                      }
                    }
                  }
                  binop {
                  }
                  rightexp {
                    nil: 536871135
                  }
                }
              }
            }
            exp {
              unary {
                unop {
                  length: 0
                }
                exp {
                }
              }
            }
          }
        }
        vars {
          name {
            name: "\\001?"
            num: 0
          }
        }
        vars {
          indexexpr {
            prefixexp {
              functioncall {
              }
            }
            exp {
              binary {
                leftexp {
                  str: "\000"
                }
                binop {
                }
                rightexp {
                  binary {
                    leftexp {
                      unary {
                        unop {
                          negate: 0
                        }
                        exp {
                        }
                      }
                    }
                    binop {
                    }
                    rightexp {
                      binary {
                        leftexp {
                        }
                        binop {
                          notEqual: 0
                        }
                        rightexp {
                          ellipsis: "\267"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      explist {
        expressions {
        }
        expressions {
          unary {
            unop {
            }
            exp {
              binary {
                leftexp {
                  prefixexp {
                    exp {
                      nil: 154
                    }
                  }
                }
                binop {
                }
                rightexp {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                        }
                        binop {
                        }
                        rightexp {
                          str: "\000\000\000\000\000\000\000\000"
                        }
                      }
                    }
                    binop {
                    }
                    rightexp {
                      binary {
                        leftexp {
                          nil: 4294901759
                        }
                        binop {
                          and: 4294901759
                        }
                        rightexp {
                          function {
                            body {
                              block {
                                chunk {
                                  stat {
                                    semicolon: true
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        expressions {
          prefixexp {
            var {
              indexexpr {
                prefixexp {
                  exp {
                    ellipsis: "\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017"
                  }
                }
                exp {
                }
              }
            }
          }
        }
        expressions {
          unary {
            unop {
              not: 771751936
            }
            exp {
            }
          }
        }
        expressions {
          prefixexp {
            functioncall {
              prefArgs {
                prefixexp {
                  exp {
                    unary {
                      unop {
                        not: 771751936
                      }
                      exp {
                      }
                    }
                  }
                }
                args {
                }
              }
            }
          }
        }
        explast {
          function {
            body {
              parlist {
                ellipsis: "while"
              }
              block {
                chunk {
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
  }
  laststat {
    semicolon: true
  }
}
