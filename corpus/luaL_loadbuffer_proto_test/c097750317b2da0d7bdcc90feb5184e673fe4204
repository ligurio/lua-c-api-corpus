chunk {
  stat {
  }
  stat {
    localfunc {
      name {
        name: "."
        num: 0
      }
      funcbody {
        parlist {
          ellipsis: "os.difftime"
        }
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                      fields {
                        field {
                          expression {
                            prefixexp {
                              functioncall {
                                prefArgs {
                                  prefixexp {
                                  }
                                  args {
                                  }
                                }
                              }
                            }
                          }
                        }
                        sep {
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        exprassign {
                          key {
                            tableconstructor {
                              fieldlist {
                                firstField {
                                }
                                fields {
                                  field {
                                    exprassign {
                                      key {
                                        binary {
                                          leftexp {
                                            tableconstructor {
                                            }
                                          }
                                          binop {
                                          }
                                          rightexp {
                                            ellipsis: ""
                                          }
                                        }
                                      }
                                      value {
                                        binary {
                                          leftexp {
                                            tableconstructor {
                                              fieldlist {
                                                firstField {
                                                }
                                                fields {
                                                  field {
                                                    exprassign {
                                                      key {
                                                        unary {
                                                          unop {
                                                            length: 0
                                                          }
                                                          exp {
                                                          }
                                                        }
                                                      }
                                                      value {
                                                      }
                                                    }
                                                  }
                                                  sep {
                                                  }
                                                }
                                                fields {
                                                  field {
                                                  }
                                                  sep {
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          binop {
                                          }
                                          rightexp {
                                          }
                                        }
                                      }
                                    }
                                  }
                                  sep {
                                  }
                                }
                                fields {
                                  field {
                                  }
                                  sep {
                                    semicolon: 2
                                  }
                                }
                              }
                            }
                          }
                          value {
                            binary {
                              leftexp {
                                unary {
                                  unop {
                                    length: 0
                                  }
                                  exp {
                                  }
                                }
                              }
                              binop {
                              }
                              rightexp {
                                unary {
                                  unop {
                                    length: 0
                                  }
                                  exp {
                                    ellipsis: "L"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      fields {
                        field {
                          exprassign {
                            key {
                              unary {
                                unop {
                                  not: 0
                                }
                                exp {
                                }
                              }
                            }
                            value {
                            }
                          }
                        }
                        sep {
                        }
                      }
                      fields {
                        field {
                        }
                        sep {
                        }
                      }
                      fields {
                        field {
                          expression {
                          }
                        }
                        sep {
                          semicolon: 4096
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                ellipsis: ""
              }
            }
          }
          stat {
            whilecycle {
              condition {
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          stat {
            whilecycle {
              condition {
                prefixexp {
                  functioncall {
                    prefArgs {
                      prefixexp {
                      }
                      args {
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                    stat {
                      whilecycle {
                        condition {
                        }
                        doblock {
                          block {
                            chunk {
                              stat {
                                call {
                                  prefArgs {
                                    prefixexp {
                                    }
                                    args {
                                      str: ";"
                                    }
                                  }
                                }
                              }
                              stat {
                                whilecycle {
                                  condition {
                                  }
                                  doblock {
                                    block {
                                      chunk {
                                        stat {
                                          whilecycle {
                                            condition {
                                            }
                                            doblock {
                                              block {
                                                chunk {
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    stat {
                      whilecycle {
                        condition {
                        }
                        doblock {
                          block {
                            chunk {
                              stat {
                                whilecycle {
                                  condition {
                                    unary {
                                      unop {
                                        length: 0
                                      }
                                      exp {
                                        tableconstructor {
                                          fieldlist {
                                            firstField {
                                              exprassign {
                                                key {
                                                }
                                                value {
                                                }
                                              }
                                            }
                                            fields {
                                              field {
                                                exprassign {
                                                  key {
                                                  }
                                                  value {
                                                    prefixexp {
                                                      functioncall {
                                                        prefArgs {
                                                          prefixexp {
                                                          }
                                                          args {
                                                            explist {
                                                              explist {
                                                                expressions {
                                                                }
                                                                expressions {
                                                                }
                                                                expressions {
                                                                }
                                                                explast {
                                                                  prefixexp {
                                                                    functioncall {
                                                                      prefArgs {
                                                                        prefixexp {
                                                                        }
                                                                        args {
                                                                          explist {
                                                                            explist {
                                                                              explast {
                                                                                prefixexp {
                                                                                  functioncall {
                                                                                    prefArgs {
                                                                                      prefixexp {
                                                                                      }
                                                                                      args {
                                                                                        explist {
                                                                                          explist {
                                                                                            expressions {
                                                                                            }
                                                                                            expressions {
                                                                                            }
                                                                                            explast {
                                                                                              prefixexp {
                                                                                                functioncall {
                                                                                                  prefArgs {
                                                                                                    prefixexp {
                                                                                                    }
                                                                                                    args {
                                                                                                      explist {
                                                                                                        explist {
                                                                                                          expressions {
                                                                                                          }
                                                                                                          explast {
                                                                                                            prefixexp {
                                                                                                              functioncall {
                                                                                                                prefArgs {
                                                                                                                  prefixexp {
                                                                                                                  }
                                                                                                                  args {
                                                                                                                    explist {
                                                                                                                      explist {
                                                                                                                        explast {
                                                                                                                          prefixexp {
                                                                                                                            functioncall {
                                                                                                                              prefArgs {
                                                                                                                                prefixexp {
                                                                                                                                }
                                                                                                                                args {
                                                                                                                                  explist {
                                                                                                                                    explist {
                                                                                                                                      expressions {
                                                                                                                                      }
                                                                                                                                      expressions {
                                                                                                                                      }
                                                                                                                                      explast {
                                                                                                                                        prefixexp {
                                                                                                                                          functioncall {
                                                                                                                                            prefArgs {
                                                                                                                                              prefixexp {
                                                                                                                                              }
                                                                                                                                              args {
                                                                                                                                                explist {
                                                                                                                                                  explist {
                                                                                                                                                    expressions {
                                                                                                                                                    }
                                                                                                                                                    explast {
                                                                                                                                                      prefixexp {
                                                                                                                                                        functioncall {
                                                                                                                                                          prefArgs {
                                                                                                                                                            prefixexp {
                                                                                                                                                            }
                                                                                                                                                            args {
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                              sep {
                                                comma: 0
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  doblock {
                                    block {
                                      chunk {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
  }
}
