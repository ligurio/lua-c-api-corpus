chunk {
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
          unary {
            unop {
              length: 5
            }
            exp {
              unary {
                unop {
                }
                exp {
                  unary {
                    unop {
                    }
                    exp {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
      }
      expressions {
        explast {
        }
      }
      doblock {
        block {
          chunk {
            stat {
              localfunc {
                name {
                  name: "2"
                  num: 0
                }
                funcbody {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        tableconstructor {
          fieldlist {
            firstField {
              exprassign {
                key {
                  prefixexp {
                  }
                }
                value {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        expression {
                          prefixexp {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            fields {
              field {
                expression {
                  number: -0
                }
              }
              sep {
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              semicolon: true
            }
          }
        }
      }
    }
  }
}
