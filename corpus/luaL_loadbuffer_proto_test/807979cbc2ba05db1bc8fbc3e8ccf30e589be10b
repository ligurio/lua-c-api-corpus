chunk {
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
            binary {
              leftexp {
              }
              binop {
                greater: 0
              }
              rightexp {
              }
            }
          }
          binop {
            greater: 0
          }
          rightexp {
            binary {
              leftexp {
              }
              binop {
                greater: 0
              }
              rightexp {
                nil: 1668612096
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
    }
    semicolon: true
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
          stat {
            localnames {
              namelist {
                firstname {
                  name: ""
                  num: 4096
                }
              }
              explist {
                expressions {
                  binary {
                    leftexp {
                    }
                    binop {
                      add: 0
                    }
                    rightexp {
                      binary {
                        leftexp {
                        }
                        binop {
                          add: 0
                        }
                        rightexp {
                          nil: 1
                        }
                      }
                    }
                  }
                }
                explast {
                  str: "pairs"
                }
              }
            }
            semicolon: true
          }
          stat {
            ifstat {
              condition {
                unary {
                  unop {
                    negate: 0
                  }
                  exp {
                  }
                }
              }
              first {
                chunk {
                  stat {
                    localnames {
                      namelist {
                        firstname {
                          name: ""
                          num: 4096
                        }
                      }
                      explist {
                        expressions {
                          false: 4096
                        }
                        expressions {
                          nil: 0
                        }
                        explast {
                          unary {
                            unop {
                            }
                            exp {
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                    forcyclelist {
                      names {
                        firstname {
                          name: "C"
                          num: 4
                        }
                      }
                      expressions {
                        expressions {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                exprassign {
                                  key {
                                  }
                                  value {
                                    true: 0
                                  }
                                }
                              }
                              fields {
                                field {
                                  exprassign {
                                    key {
                                    }
                                    value {
                                      function {
                                        body {
                                          block {
                                            chunk {
                                              stat {
                                                semicolon: true
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                sep {
                                  comma: 16515072
                                }
                              }
                              fields {
                                field {
                                  expression {
                                    true: 0
                                  }
                                }
                                sep {
                                }
                              }
                              fields {
                                field {
                                }
                                sep {
                                  semicolon: 0
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                  var {
                                    name {
                                      name: ""
                                      num: 0
                                    }
                                  }
                                }
                                args {
                                }
                              }
                            }
                          }
                        }
                        expressions {
                          binary {
                            leftexp {
                            }
                            binop {
                              add: 0
                            }
                            rightexp {
                              nil: 1
                            }
                          }
                        }
                        explast {
                        }
                      }
                      doblock {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                }
              }
              clauses {
                condition {
                  binary {
                    leftexp {
                    }
                    binop {
                      add: 0
                    }
                    rightexp {
                      nil: 1
                    }
                  }
                }
                block {
                  chunk {
                  }
                }
              }
              clauses {
                condition {
                }
                block {
                  chunk {
                    stat {
                      localnames {
                        namelist {
                          firstname {
                            name: ""
                            num: 4096
                          }
                        }
                        explist {
                          expressions {
                            binary {
                              leftexp {
                              }
                              binop {
                                add: 0
                              }
                              rightexp {
                                binary {
                                  leftexp {
                                  }
                                  binop {
                                    add: 0
                                  }
                                  rightexp {
                                    nil: 1
                                  }
                                }
                              }
                            }
                          }
                          explast {
                            str: "pairs"
                          }
                        }
                      }
                      semicolon: true
                    }
                    stat {
                      forcyclelist {
                        names {
                          firstname {
                            name: ""
                            num: 4
                          }
                        }
                        expressions {
                          expressions {
                            prefixexp {
                              functioncall {
                              }
                            }
                          }
                          expressions {
                            binary {
                              leftexp {
                              }
                              binop {
                                add: 0
                              }
                              rightexp {
                                nil: 1
                              }
                            }
                          }
                          explast {
                            ellipsis: "\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370\370"
                          }
                        }
                        doblock {
                          block {
                            chunk {
                              laststat {
                                break: 3154051071
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              last {
                chunk {
                  laststat {
                    break: 0
                    semicolon: false
                  }
                }
              }
            }
          }
        }
      }
      last {
        chunk {
          stat {
            semicolon: true
          }
        }
      }
    }
    semicolon: true
  }
  laststat {
    break: 0
  }
}
