chunk {
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            list {
              varlist {
                var {
                }
                vars {
                }
                vars {
                  name {
                    name: "T"
                    num: 23
                  }
                }
                vars {
                }
                vars {
                  name {
                    name: ""
                    num: 64
                  }
                }
                vars {
                  name {
                    name: ""
                    num: 1
                  }
                }
                vars {
                }
                vars {
                  name {
                    name: "T"
                    num: 10
                  }
                }
                vars {
                }
                vars {
                  name {
                    name: "\326"
                    num: 263
                  }
                }
                vars {
                }
                vars {
                }
                vars {
                  name {
                    name: ""
                    num: 4
                  }
                }
                vars {
                  name {
                    name: "i"
                    num: 0
                  }
                }
                vars {
                }
                vars {
                }
              }
              explist {
                expressions {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                          prefixexp {
                          }
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                        }
                      }
                    }
                  }
                }
                explast {
                }
              }
            }
            semicolon: true
          }
        }
      }
      condition {
        ellipsis: "\000\000\000\000"
      }
    }
  }
  stat {
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 64
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            list {
              varlist {
                var {
                }
                vars {
                }
                vars {
                  name {
                    name: ""
                    num: 1
                  }
                }
                vars {
                }
                vars {
                }
                vars {
                }
                vars {
                }
                vars {
                }
                vars {
                }
                vars {
                }
                vars {
                  name {
                    name: "\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322\322"
                    num: 0
                  }
                }
                vars {
                }
                vars {
                  name {
                    name: ""
                    num: 517
                  }
                }
                vars {
                  name {
                    name: "ichunk {\n  stat {\n  }\n  stat {\n    repeatcycle {\n      block {\n        chunk {\n          stat {\n            list {\n              varlist {\n                var {\n                }\n              }\n              explist {\n                expressions {\n                  nil: 0\n                }\n                expressions {\n                }\n                expressions {\n                  false: 0\n                }\n                expressions {\n                  nil: 2\n                }\n                expressions {\n                }\n                expressions {\n                  binary {\n                    leftexp {\n                    }\n                    binop {\n                    }\n                    rightexp {\n                    }\n                  }\n                }\n                expressions {\n                }\n                expressions {\n                }\n                expressions {\n                }\n                explast {\n                  prefixexp {\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      condition {\n        nil: 0\n      }\n    }\n  }\n}\n"
                    num: 0
                  }
                }
                vars {
                }
                vars {
                }
              }
              explist {
                expressions {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                          prefixexp {
                          }
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                        }
                      }
                    }
                  }
                }
                expressions {
                  prefixexp {
                  }
                }
                explast {
                }
              }
            }
            semicolon: false
          }
        }
      }
      condition {
        ellipsis: ""
      }
    }
  }
  stat {
  }
}
