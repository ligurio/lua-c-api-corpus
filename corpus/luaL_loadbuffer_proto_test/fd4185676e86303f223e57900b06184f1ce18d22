chunk {
  stat {
    forcyclelist {
      names {
        firstname {
          name: ""
          num: 0
        }
        names {
          name: ""
          num: 0
        }
        names {
          name: "\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177"
          num: 0
        }
      }
      expressions {
        expressions {
          number: -4.9591064453125e-05
        }
        expressions {
        }
        expressions {
        }
        expressions {
        }
        expressions {
        }
        expressions {
        }
        expressions {
        }
        expressions {
        }
        expressions {
        }
        explast {
          binary {
            leftexp {
              number: -0
            }
            binop {
              sub: 0
            }
            rightexp {
              binary {
                leftexp {
                  number: -4.9591064453125e-05
                }
                binop {
                  concat: 4
                }
                rightexp {
                  str: "NameNameNameNamefunction: 0x7c19ba699810NameNamefalsetrueNameNam"
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        expression {
                          prefixexp {
                            exp {
                              binary {
                                leftexp {
                                  nil: 134217728
                                }
                                binop {
                                  add: 536871135
                                }
                                rightexp {
                                  prefixexp {
                                    exp {
                                      binary {
                                        leftexp {
                                          nil: 134217728
                                        }
                                        binop {
                                          div: 0
                                        }
                                        rightexp {
                                          binary {
                                            leftexp {
                                              binary {
                                                leftexp {
                                                  prefixexp {
                                                  }
                                                }
                                                binop {
                                                  and: 262144
                                                }
                                                rightexp {
                                                  ellipsis: ""
                                                }
                                              }
                                            }
                                            binop {
                                              and: 4294901759
                                            }
                                            rightexp {
                                              binary {
                                                leftexp {
                                                  nil: 134217728
                                                }
                                                binop {
                                                  greaterEqual: 0
                                                }
                                                rightexp {
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
              semicolon: true
            }
            laststat {
              break: 6488064
              semicolon: true
            }
          }
        }
      }
    }
  }
}
