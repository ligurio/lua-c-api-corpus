chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 128
      }
      startexp {
      }
      stopexp {
      }
      stepexp {
        number: -5.18065378653631e-318
      }
      doblock {
        block {
          chunk {
            stat {
            }
            stat {
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                    var {
                      name {
                        name: ""
                        num: 0
                      }
                    }
                  }
                  args {
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                  binary {
                    leftexp {
                      number: -2.5
                    }
                    binop {
                      div: 0
                    }
                    rightexp {
                      nil: 0
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          number: -2
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                          number: -2
                        }
                      }
                    }
                    binop {
                      div: 0
                    }
                    rightexp {
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
}
