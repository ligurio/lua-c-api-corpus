chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      stepexp {
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        forcyclename {
                          name {
                            name: ""
                            num: 0
                          }
                          startexp {
                            str: "googprotobuf.Any"
                          }
                          stopexp {
                            number: 0
                          }
                          doblock {
                            block {
                              chunk {
                                stat {
                                  block {
                                    block {
                                      chunk {
                                        stat {
                                          repeatcycle {
                                            block {
                                              chunk {
                                                stat {
                                                  forcyclename {
                                                    name {
                                                      name: ""
                                                      num: 0
                                                    }
                                                    startexp {
                                                    }
                                                    stopexp {
                                                    }
                                                    stepexp {
                                                    }
                                                    doblock {
                                                      block {
                                                        chunk {
                                                          stat {
                                                            semicolon: true
                                                          }
                                                          stat {
                                                            list {
                                                              varlist {
                                                                var {
                                                                  name {
                                                                    name: "\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337          name: \"\"\n           \337\337\337"
                                                                    num: 1
                                                                  }
                                                                }
                                                              }
                                                              explist {
                                                                explast {
                                                                  binary {
                                                                    leftexp {
                                                                      tableconstructor {
                                                                      }
                                                                    }
                                                                    binop {
                                                                      and: 251658239
                                                                    }
                                                                    rightexp {
                                                                      prefixexp {
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                            semicolon: true
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            condition {
                                            }
                                          }
                                        }
                                        stat {
                                          forcyclename {
                                            name {
                                              name: ""
                                              num: 0
                                            }
                                            startexp {
                                            }
                                            stopexp {
                                              number: 0
                                            }
                                            doblock {
                                              block {
                                                chunk {
                                                }
                                              }
                                            }
                                          }
                                        }
                                        laststat {
                                          break: 2105376
                                        }
                                      }
                                    }
                                  }
                                }
                                stat {
                                  list {
                                    varlist {
                                      var {
                                      }
                                    }
                                    explist {
                                      explast {
                                        binary {
                                          leftexp {
                                            nil: 1
                                          }
                                          binop {
                                            and: 4
                                          }
                                          rightexp {
                                            str: "\377\377\377\001"
                                          }
                                        }
                                      }
                                    }
                                  }
                                  semicolon: true
                                }
                              }
                            }
                          }
                        }
                      }
                      stat {
                        list {
                          varlist {
                            var {
                            }
                          }
                          explist {
                            explast {
                            }
                          }
                        }
                        semicolon: true
                      }
                      stat {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 268435456
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: "char"
        num: 0
      }
      startexp {
        number: 1.29516344663408e-318
      }
      stopexp {
        number: 0
      }
      stepexp {
        number: -0
      }
      doblock {
        block {
          chunk {
            stat {
              localfunc {
                name {
                  name: ""
                  num: 0
                }
                funcbody {
                  parlist {
                    ellipsis: "\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226\226"
                  }
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              semicolon: true
            }
            stat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: "\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337\337          name: \"\"\n           \337\337\337"
        num: 4
      }
      startexp {
        number: 0
      }
      stopexp {
        number: 0
      }
      doblock {
        block {
          chunk {
            stat {
              func {
                name {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                body {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
