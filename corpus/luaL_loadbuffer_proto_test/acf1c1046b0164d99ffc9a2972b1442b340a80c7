chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    list {
      varlist {
        var {
          indexname {
            prefixexp {
            }
            Name: ""
          }
        }
        vars {
          name {
            name: ""
            num: 0
          }
        }
        vars {
          name {
            name: "\377\377\376\233"
            num: 0
          }
        }
        vars {
          indexexpr {
            prefixexp {
              functioncall {
              }
            }
            exp {
              binary {
                leftexp {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                      lastSep {
                        semicolon: 50432
                      }
                    }
                  }
                }
                binop {
                }
                rightexp {
                  binary {
                    leftexp {
                      tableconstructor {
                        fieldlist {
                          firstField {
                          }
                          fields {
                            field {
                            }
                            sep {
                              semicolon: 0
                            }
                          }
                        }
                      }
                    }
                    binop {
                    }
                    rightexp {
                    }
                  }
                }
              }
            }
          }
        }
      }
      explist {
        expressions {
          nil: 0
        }
        expressions {
          unary {
            unop {
            }
            exp {
              binary {
                leftexp {
                  prefixexp {
                    exp {
                      prefixexp {
                        exp {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                }
                                binop {
                                  and: 0
                                }
                                rightexp {
                                  false: 538968064
                                }
                              }
                            }
                            binop {
                              add: 16187392
                            }
                            rightexp {
                              false: 0
                            }
                          }
                        }
                      }
                    }
                  }
                }
                binop {
                }
                rightexp {
                  binary {
                    leftexp {
                      prefixexp {
                        exp {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                expression {
                                  ellipsis: ""
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    binop {
                    }
                    rightexp {
                      prefixexp {
                        exp {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        expressions {
          unary {
            unop {
              negate: 262144
            }
            exp {
              binary {
                leftexp {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                          number: 1.79266204420746e-310
                        }
                        binop {
                          or: 3276801
                        }
                        rightexp {
                        }
                      }
                    }
                  }
                }
                binop {
                  concat: 134217728
                }
                rightexp {
                  binary {
                    leftexp {
                      unary {
                        unop {
                        }
                        exp {
                          str: "__sub"
                        }
                      }
                    }
                    binop {
                      lessEqual: 1048576
                    }
                    rightexp {
                      nil: 538968064
                    }
                  }
                }
              }
            }
          }
        }
        expressions {
          prefixexp {
            exp {
              binary {
                leftexp {
                  str: "while"
                }
                binop {
                  or: 3276801
                }
                rightexp {
                  false: 0
                }
              }
            }
          }
        }
        explast {
          function {
            body {
              parlist {
                ellipsis: "while"
              }
              block {
                chunk {
                  laststat {
                    explist {
                      explist {
                        expressions {
                          unary {
                            unop {
                            }
                            exp {
                              number: 8.8144256634024882e-280
                            }
                          }
                        }
                        explast {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        tableconstructor {
          fieldlist {
            firstField {
              expression {
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
}
