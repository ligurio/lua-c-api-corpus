chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        number: -468.75
      }
      stopexp {
        number: -468.75
      }
      stepexp {
        number: -468.75
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                  number: -468.75
                }
                stopexp {
                  number: -468.75
                }
                stepexp {
                  number: -468.75
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              ifstat {
                condition {
                  str: "utf8.charpattern"
                }
                first {
                  chunk {
                    stat {
                      semicolon: true
                    }
                    stat {
                      forcyclename {
                        name {
                          name: "utf8.charpattern"
                          num: 0
                        }
                        startexp {
                          ellipsis: "`"
                        }
                        stopexp {
                          number: 1.5
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                      semicolon: true
                    }
                  }
                }
              }
              semicolon: true
            }
            laststat {
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        unary {
          unop {
          }
          exp {
          }
        }
      }
      stopexp {
        unary {
          unop {
          }
          exp {
          }
        }
      }
      stepexp {
        binary {
          leftexp {
            unary {
              unop {
                negate: 0
              }
              exp {
              }
            }
          }
          binop {
            and: 0
          }
          rightexp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: "utf8.charpattern"
                  num: 0
                }
                startexp {
                }
                stopexp {
                  number: 1.5
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
              semicolon: true
            }
            laststat {
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: false
  }
  stat {
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
}
