chunk {
  stat {
    list {
      varlist {
        var {
        }
        vars {
          name {
            name: "t    block {\n        chunk {\n          stat {\n            block {\n              block {\n                chunk {\n                  stat {\n                    repeatcycle {\n                      block {\n                        chunk {\n                        }\n                      }\n                      condition {\n                        ellipsis: \"maxircons\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          stat {\n            forcyclename {\n              name {\n                name: \"\"\n                num: 0\n              }\n              startexp {\n                number: 4\n              }\n              stopexp {\n                number: -14.0625\n              }\n              stepexp {\n                number: -0\n              }\n              doblock {\n                block {\n                  chunk {\n                    stat {\n                      call {\n                        namedArgs {\n                          prefixexp {\n                          }\n                          name {\n                            name: \"\"\n                            num: 0\n                          }\n                          args {\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  stat {\n    call {\n    }\n  }\n  stat {\n    forcyclename {\n      name {\n        name: \"\"\n        num: 0\n      }\n      startexp {\n        number: 4\n      }\n      stopexp {\n        number: 4\n      }\n      stepexp {\n        number: -0\n      }\n      doblock {\n        block {\n          chunk {\n            stat {\n              localnames {\n                namelist {\n                  firstname {\n                    name: \"\"\n                    num: 0\n                  }\n                }\n                explist {\n                  explast {\n                    binary {\n                      leftexp {\n                      }\n                      binop {\n                        lessEqual: 4294966948\n                      }\n                      rightexp {\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            stat {\n              forcyclename {\n                name {\n                  name: \"\"\n                  num: 0\n                }\n                startexp {\n                  number: 4\n                }\n                stopexp {\n                }\n                stepexp {\n                  number: -0\n                }\n                doblock {\n                  block {\n                    chunk {\n                      stat {\n                        call {\n                          prefArgs {\n                            prefixexp {\n                            }\n                            args {\n                              str: \"coroutine\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  stat {\n    forcyclename {\n      name {\n        name: \"\"\n        num: 0\n      }\n      startexp {\n        number: 4\n      }\n      stopexp {\n        number: 4\n      }\n      stepexp {\n        number: -0\n      }\n      doblock {\n        block {\n          chunk {\n            stat {\n              call {\n                namedArgs {\n                  prefixexp {\n                  }\n                  name {\n                    name: \"\"\n                    num: 0\n                  }\n                  args {\n                  }\n                }\n              }\n            }\n            laststat {\n              semicolon: true\n            }\n          }\n        }\n      }\n    }\n  }\n}ype"
            num: 0
          }
        }
      }
      explist {
        explast {
          number: 0
        }
      }
    }
    semicolon: false
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localfunc {
              name {
                name: ""
                num: 4096
              }
              funcbody {
                block {
                  chunk {
                    laststat {
                      explist {
                        explist {
                          expressions {
                            prefixexp {
                              functioncall {
                              }
                            }
                          }
                          explast {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
          }
        }
      }
      condition {
        binary {
          leftexp {
            function {
              body {
                block {
                  chunk {
                    stat {
                      localfunc {
                        name {
                          name: ""
                          num: 4096
                        }
                        funcbody {
                          block {
                            chunk {
                              laststat {
                                break: 0
                              }
                            }
                          }
                        }
                      }
                    }
                    stat {
                    }
                  }
                }
              }
            }
          }
          binop {
            mod: 1701869940
          }
          rightexp {
            number: 0
          }
        }
      }
    }
  }
}
