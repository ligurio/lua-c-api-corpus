chunk {
  stat {
    call {
    }
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        parlist {
          ellipsis: "\000\000\000\000"
        }
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
        prefixexp {
          var {
            indexexpr {
              prefixexp {
              }
              exp {
                unary {
                  unop {
                  }
                  exp {
                    true: 23808
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            break: 0
          }
        }
      }
      condition {
      }
    }
    semicolon: false
  }
  stat {
    semicolon: false
  }
  stat {
    call {
    }
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: ""
          num: 0
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    list {
      varlist {
        var {
          indexexpr {
            prefixexp {
              exp {
                tableconstructor {
                  fieldlist {
                    firstField {
                    }
                  }
                }
              }
            }
            exp {
            }
          }
        }
        vars {
        }
        vars {
          name {
            name: "ffi.alignof"
            num: 0
          }
        }
        vars {
          indexexpr {
            prefixexp {
              exp {
                tableconstructor {
                  fieldlist {
                    firstField {
                      expression {
                        tableconstructor {
                        }
                      }
                    }
                  }
                }
              }
            }
            exp {
            }
          }
        }
        vars {
          indexexpr {
            prefixexp {
              exp {
                tableconstructor {
                  fieldlist {
                    firstField {
                      expression {
                        tableconstructor {
                        }
                      }
                    }
                  }
                }
              }
            }
            exp {
              prefixexp {
                exp {
                  binary {
                    leftexp {
                    }
                    binop {
                      or: 0
                    }
                    rightexp {
                      number: 2
                    }
                  }
                }
              }
            }
          }
        }
        vars {
          name {
            name: ""
            num: 9
          }
        }
        vars {
        }
      }
      explist {
        explast {
          binary {
            leftexp {
            }
            binop {
              and: 0
            }
            rightexp {
              function {
                body {
                  block {
                    chunk {
                      stat {
                        semicolon: true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: false
  }
  stat {
    call {
    }
    semicolon: true
  }
  stat {
  }
}
