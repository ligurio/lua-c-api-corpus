chunk {
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
          }
          binop {
            notEqual: 0
          }
          rightexp {
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        prefixexp {
          exp {
            binary {
              leftexp {
                number: 0
              }
              binop {
                concat: 0
              }
              rightexp {
                binary {
                  leftexp {
                    prefixexp {
                      exp {
                        binary {
                          leftexp {
                            number: 358.08969533209165
                          }
                          binop {
                            exp: 0
                          }
                          rightexp {
                            number: 118.78498777467757
                          }
                        }
                      }
                    }
                  }
                  binop {
                    mod: 1023
                  }
                  rightexp {
                    prefixexp {
                      exp {
                        binary {
                          leftexp {
                            number: -8.22752278660603e+62
                          }
                          binop {
                            concat: 4
                          }
                          rightexp {
                            binary {
                              leftexp {
                                number: 358.08969533209165
                              }
                              binop {
                                exp: 0
                              }
                              rightexp {
                                number: 118.78498777467757
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
