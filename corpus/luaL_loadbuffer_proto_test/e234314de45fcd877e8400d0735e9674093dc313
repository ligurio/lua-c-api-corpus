chunk {
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
            stat {
              semicolon: true
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                            stat {
                            }
                            stat {
                              localfunc {
                                name {
                                  name: ""
                                  num: 0
                                }
                                funcbody {
                                  parlist {
                                  }
                                  block {
                                    chunk {
                                      laststat {
                                        explist {
                                          explist {
                                            explast {
                                              unary {
                                                unop {
                                                  not: 0
                                                }
                                                exp {
                                                  binary {
                                                    leftexp {
                                                    }
                                                    binop {
                                                    }
                                                    rightexp {
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        semicolon: true
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            stat {
                            }
                            stat {
                            }
                          }
                        }
                        condition {
                        }
                      }
                    }
                    stat {
                      call {
                        prefArgs {
                          prefixexp {
                          }
                          args {
                            str: "\001\000\000\000\000\000\000\000"
                          }
                        }
                      }
                      semicolon: true
                    }
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                            stat {
                            }
                            stat {
                              localfunc {
                                name {
                                  name: ""
                                  num: 0
                                }
                                funcbody {
                                  block {
                                    chunk {
                                      laststat {
                                        explist {
                                          explist {
                                            explast {
                                              unary {
                                                unop {
                                                }
                                                exp {
                                                  binary {
                                                    leftexp {
                                                    }
                                                    binop {
                                                    }
                                                    rightexp {
                                                      unary {
                                                        unop {
                                                          not: 64256
                                                        }
                                                        exp {
                                                          binary {
                                                            leftexp {
                                                            }
                                                            binop {
                                                              or: 2048
                                                            }
                                                            rightexp {
                                                              prefixexp {
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            stat {
                              semicolon: true
                            }
                            stat {
                            }
                          }
                        }
                        condition {
                        }
                      }
                    }
                    stat {
                    }
                    laststat {
                      explist {
                        explist {
                          explast {
                            unary {
                              unop {
                                negate: 0
                              }
                              exp {
                                binary {
                                  leftexp {
                                  }
                                  binop {
                                  }
                                  rightexp {
                                    false: 2048
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      semicolon: true
                    }
                  }
                }
                condition {
                }
              }
            }
            laststat {
              explist {
                explist {
                  expressions {
                    ellipsis: "\001\000\000\000\000\000\000\000"
                  }
                  explast {
                    unary {
                      unop {
                        not: 2048
                      }
                      exp {
                        false: 0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
          }
          stat {
          }
          stat {
          }
        }
      }
      condition {
        str: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
