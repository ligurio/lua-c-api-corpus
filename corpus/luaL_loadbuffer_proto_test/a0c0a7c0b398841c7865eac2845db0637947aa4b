chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        binary {
          leftexp {
            binary {
              leftexp {
                number: -48.00000000000005
              }
              binop {
                concat: 0
              }
              rightexp {
                binary {
                  leftexp {
                    number: 1.0728402099575969e+253
                  }
                  binop {
                    exp: 0
                  }
                  rightexp {
                    number: -48.00000000000005
                  }
                }
              }
            }
          }
          binop {
            concat: 0
          }
          rightexp {
            number: 1.0728402099575969e+253
          }
        }
      }
      stopexp {
        number: -0
      }
      stepexp {
        number: -2
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                  number: -0
                }
                stopexp {
                  number: -0
                }
                stepexp {
                  prefixexp {
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        forcyclename {
                          name {
                            name: ""
                            num: 0
                          }
                          startexp {
                            number: -2
                          }
                          stopexp {
                          }
                          stepexp {
                            number: -2
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
}
