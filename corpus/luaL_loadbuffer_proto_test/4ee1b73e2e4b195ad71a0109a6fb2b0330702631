chunk {
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
    semicolon: true
  }
  stat {
    call {
      prefArgs {
        prefixexp {
          functioncall {
            prefArgs {
              prefixexp {
              }
              args {
                str: "\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'"
              }
            }
          }
        }
        args {
          tableconstructor {
            fieldlist {
              firstField {
                expression {
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
}
