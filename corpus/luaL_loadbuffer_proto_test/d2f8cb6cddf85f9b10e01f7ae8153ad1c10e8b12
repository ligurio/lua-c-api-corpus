chunk {
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        parlist {
        }
        block {
          chunk {
            stat {
            }
            stat {
            }
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  expressions {
                    str: ""
                  }
                  expressions {
                  }
                  expressions {
                    function {
                      body {
                        parlist {
                        }
                        block {
                          chunk {
                            stat {
                              list {
                                varlist {
                                  var {
                                  }
                                }
                                explist {
                                  expressions {
                                  }
                                  expressions {
                                  }
                                  expressions {
                                  }
                                  expressions {
                                  }
                                  expressions {
                                  }
                                  expressions {
                                  }
                                  explast {
                                    unary {
                                      unop {
                                      }
                                      exp {
                                        prefixexp {
                                          exp {
                                            binary {
                                              leftexp {
                                                tableconstructor {
                                                }
                                              }
                                              binop {
                                                or: 0
                                              }
                                              rightexp {
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  expressions {
                    tableconstructor {
                    }
                  }
                  expressions {
                  }
                  expressions {
                    number: 2.17292368994844e-311
                  }
                  expressions {
                  }
                  expressions {
                  }
                  expressions {
                    nil: 0
                  }
                  expressions {
                  }
                  expressions {
                  }
                  explast {
                    unary {
                      unop {
                      }
                      exp {
                        prefixexp {
                          exp {
                            binary {
                              leftexp {
                                tableconstructor {
                                }
                              }
                              binop {
                                or: 0
                              }
                              rightexp {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
}
