chunk {
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        tableconstructor {
          fieldlist {
            firstField {
              exprassign {
                key {
                  number: 10
                }
                value {
                  number: -0
                }
              }
            }
            fields {
              field {
              }
              sep {
              }
            }
            fields {
              field {
                exprassign {
                  key {
                    true: 0
                  }
                  value {
                    number: nan
                  }
                }
              }
              sep {
              }
            }
            fields {
              field {
                expression {
                  binary {
                    leftexp {
                      number: 0
                    }
                    binop {
                    }
                    rightexp {
                      binary {
                        leftexp {
                          unary {
                            unop {
                            }
                            exp {
                              tableconstructor {
                                fieldlist {
                                  firstField {
                                    expression {
                                      tableconstructor {
                                        fieldlist {
                                          firstField {
                                            expression {
                                              binary {
                                                leftexp {
                                                  number: 0
                                                }
                                                binop {
                                                  concat: 0
                                                }
                                                rightexp {
                                                  binary {
                                                    leftexp {
                                                      unary {
                                                        unop {
                                                          length: 0
                                                        }
                                                        exp {
                                                          prefixexp {
                                                          }
                                                        }
                                                      }
                                                    }
                                                    binop {
                                                      lessEqual: 0
                                                    }
                                                    rightexp {
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          fields {
                                            field {
                                              expression {
                                                binary {
                                                  leftexp {
                                                  }
                                                  binop {
                                                    concat: 0
                                                  }
                                                  rightexp {
                                                    binary {
                                                      leftexp {
                                                        number: 0
                                                      }
                                                      binop {
                                                        concat: 0
                                                      }
                                                      rightexp {
                                                        binary {
                                                          leftexp {
                                                            unary {
                                                              unop {
                                                                length: 0
                                                              }
                                                              exp {
                                                                prefixexp {
                                                                }
                                                              }
                                                            }
                                                          }
                                                          binop {
                                                            less: 4
                                                          }
                                                          rightexp {
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            sep {
                                              semicolon: 0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                        }
                      }
                    }
                  }
                }
              }
              sep {
                semicolon: 0
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        exprassign {
                          key {
                            number: 10
                          }
                          value {
                            number: -0
                          }
                        }
                      }
                      fields {
                        field {
                        }
                        sep {
                        }
                      }
                      fields {
                        field {
                          exprassign {
                            key {
                              true: 0
                            }
                            value {
                              number: nan
                            }
                          }
                        }
                        sep {
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
