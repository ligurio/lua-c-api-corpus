chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
                number: 0
              }
              stopexp {
                binary {
                  leftexp {
                    number: 0
                  }
                  binop {
                    or: 0
                  }
                  rightexp {
                    ellipsis: "\377\377"
                  }
                }
              }
              stepexp {
                binary {
                  leftexp {
                    number: 0
                  }
                  binop {
                    or: 0
                  }
                  rightexp {
                    ellipsis: "\377\377"
                  }
                }
              }
              doblock {
                block {
                  chunk {
                    stat {
                      localfunc {
                        name {
                          name: ""
                          num: 0
                        }
                        funcbody {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                    stat {
                    }
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                          }
                        }
                        condition {
                          nil: 0
                        }
                      }
                    }
                    stat {
                    }
                  }
                }
              }
            }
          }
          laststat {
            semicolon: false
          }
        }
      }
      condition {
        nil: 0
      }
    }
  }
  laststat {
  }
}
