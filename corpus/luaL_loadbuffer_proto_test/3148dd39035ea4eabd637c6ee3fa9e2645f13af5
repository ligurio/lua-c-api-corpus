chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        unary {
          unop {
            length: 4
          }
          exp {
            tableconstructor {
            }
          }
        }
      }
      stopexp {
        number: 0
      }
      stepexp {
        unary {
          unop {
            negate: 0
          }
          exp {
            tableconstructor {
              fieldlist {
                firstField {
                  exprassign {
                    key {
                      false: 0
                    }
                    value {
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              ifstat {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        exprassign {
                          key {
                            true: 0
                          }
                          value {
                            number: 2
                          }
                        }
                      }
                      fields {
                        field {
                          exprassign {
                            key {
                            }
                            value {
                            }
                          }
                        }
                        sep {
                          comma: 0
                        }
                      }
                      fields {
                        field {
                          expression {
                            prefixexp {
                            }
                          }
                        }
                        sep {
                        }
                      }
                    }
                  }
                }
                first {
                  chunk {
                    laststat {
                      explist {
                        explist {
                          explast {
                            prefixexp {
                              functioncall {
                                namedArgs {
                                  prefixexp {
                                    functioncall {
                                      namedArgs {
                                        prefixexp {
                                        }
                                        name {
                                          name: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
                                          num: 0
                                        }
                                        args {
                                        }
                                      }
                                    }
                                  }
                                  name {
                                    name: ""
                                    num: 0
                                  }
                                  args {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
