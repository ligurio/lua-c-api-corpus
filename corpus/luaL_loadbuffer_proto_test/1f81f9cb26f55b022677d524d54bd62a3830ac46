chunk {
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclelist {
      names {
        firstname {
          name: "\211o\000\000\000\000\000\000"
          num: 83
        }
      }
      expressions {
        expressions {
          prefixexp {
            functioncall {
              prefArgs {
                prefixexp {
                }
                args {
                  explist {
                    explist {
                      explast {
                        str: ")"
                      }
                    }
                  }
                }
              }
            }
          }
        }
        expressions {
          unary {
            unop {
            }
            exp {
              true: 1919903232
            }
          }
        }
        expressions {
        }
        expressions {
        }
        expressions {
          false: 0
        }
        expressions {
        }
        expressions {
        }
        expressions {
        }
        expressions {
        }
        explast {
          unary {
            unop {
            }
            exp {
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
              ifstat {
                condition {
                  str: "\211o\000\000\000\000\000\000"
                }
                first {
                  chunk {
                  }
                }
                clauses {
                  condition {
                    nil: 0
                  }
                  block {
                    chunk {
                    }
                  }
                }
                clauses {
                  condition {
                    nil: 0
                  }
                  block {
                    chunk {
                    }
                  }
                }
                clauses {
                  condition {
                    nil: 0
                  }
                  block {
                    chunk {
                    }
                  }
                }
                clauses {
                  condition {
                    tableconstructor {
                    }
                  }
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              semicolon: true
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
            or: 0
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
        }
      }
      condition {
        false: 538968064
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
        }
      }
      condition {
        binary {
          leftexp {
            prefixexp {
              functioncall {
                namedArgs {
                  prefixexp {
                    exp {
                      nil: 0
                    }
                  }
                  name {
                    name: ""
                    num: 0
                  }
                  args {
                  }
                }
              }
            }
          }
          binop {
            exp: 2560
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
          laststat {
            semicolon: true
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
          }
          laststat {
            explist {
              explist {
                explast {
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                  }
                  rightexp {
                  }
                }
              }
            }
            semicolon: true
          }
          stat {
            forcyclelist {
              names {
                firstname {
                  name: "\211o\000\000\000\000\000\000"
                  num: 0
                }
              }
              expressions {
                expressions {
                  prefixexp {
                    functioncall {
                      prefArgs {
                        prefixexp {
                        }
                        args {
                          explist {
                            explist {
                              explast {
                                str: ")"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                expressions {
                  unary {
                    unop {
                    }
                    exp {
                      true: 1919903232
                    }
                  }
                }
                expressions {
                }
                expressions {
                }
                expressions {
                  false: 0
                }
                expressions {
                }
                expressions {
                }
                expressions {
                }
                expressions {
                }
                explast {
                  unary {
                    unop {
                    }
                    exp {
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                    stat {
                      ifstat {
                        condition {
                          str: "\211o\000\000\000\000\000\000"
                        }
                        first {
                          chunk {
                          }
                        }
                        clauses {
                          condition {
                            nil: 0
                          }
                          block {
                            chunk {
                            }
                          }
                        }
                        clauses {
                          condition {
                            nil: 0
                          }
                          block {
                            chunk {
                            }
                          }
                        }
                        clauses {
                          condition {
                            nil: 0
                          }
                          block {
                            chunk {
                            }
                          }
                        }
                        clauses {
                          condition {
                            tableconstructor {
                            }
                          }
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                    stat {
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                    or: 0
                  }
                  rightexp {
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                  }
                  rightexp {
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    call {
                    }
                  }
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    call {
                    }
                  }
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    call {
                    }
                  }
                }
              }
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                    less: 83
                  }
                  rightexp {
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                  }
                  rightexp {
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    call {
                    }
                  }
                }
              }
              condition {
                binary {
                  leftexp {
                    prefixexp {
                      functioncall {
                        namedArgs {
                          prefixexp {
                            exp {
                              nil: 0
                            }
                          }
                          name {
                            name: ""
                            num: 0
                          }
                          args {
                          }
                        }
                      }
                    }
                  }
                  binop {
                    exp: 2560
                  }
                  rightexp {
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    call {
                    }
                  }
                  laststat {
                    semicolon: true
                  }
                }
              }
              condition {
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    call {
                    }
                  }
                }
              }
              condition {
              }
            }
          }
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
              }
              stopexp {
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                  }
                  rightexp {
                  }
                }
              }
            }
          }
          stat {
            repeatcycle {
              block {
                chunk {
                }
              }
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                  }
                  rightexp {
                    ellipsis: "sink"
                  }
                }
              }
            }
          }
          stat {
          }
          stat {
            repeatcycle {
              block {
                chunk {
                  stat {
                    func {
                      name {
                        firstname {
                          name: ""
                          num: 0
                        }
                      }
                      body {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                }
              }
              condition {
              }
            }
          }
          laststat {
            break: 0
          }
        }
      }
      condition {
      }
    }
  }
  laststat {
    break: 0
  }
}
