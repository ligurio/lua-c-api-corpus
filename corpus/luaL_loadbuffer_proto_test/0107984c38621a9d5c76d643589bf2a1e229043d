chunk {
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
          }
          binop {
            concat: 0
          }
          rightexp {
            false: 0
          }
        }
      }
      first {
        chunk {
        }
      }
      last {
        chunk {
          stat {
            whilecycle {
              condition {
                false: 6488064
              }
              doblock {
                block {
                  chunk {
                    stat {
                      whilecycle {
                        condition {
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                      semicolon: true
                    }
                    stat {
                    }
                    stat {
                      semicolon: true
                    }
                    stat {
                      repeatcycle {
                        block {
                          chunk {
                          }
                        }
                        condition {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                exprassign {
                                  key {
                                    tableconstructor {
                                    }
                                  }
                                  value {
                                  }
                                }
                              }
                              fields {
                                field {
                                  exprassign {
                                    key {
                                    }
                                    value {
                                      prefixexp {
                                      }
                                    }
                                  }
                                }
                                sep {
                                }
                              }
                              fields {
                                field {
                                }
                                sep {
                                  semicolon: 6488064
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    stat {
                    }
                    stat {
                    }
                  }
                }
              }
            }
            semicolon: true
          }
          stat {
          }
          stat {
            localnames {
              namelist {
                firstname {
                  name: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                  num: 0
                }
              }
              explist {
                explast {
                }
              }
            }
            semicolon: true
          }
          stat {
            list {
              varlist {
                var {
                }
              }
              explist {
                expressions {
                  str: "\r"
                }
                explast {
                }
              }
            }
          }
          stat {
          }
          stat {
          }
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
          }
          binop {
            concat: 0
          }
          rightexp {
            function {
              body {
                block {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
      first {
        chunk {
        }
      }
    }
  }
}
