chunk {
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        explast {
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            list {
              varlist {
                var {
                  indexexpr {
                    prefixexp {
                    }
                    exp {
                    }
                  }
                }
                vars {
                  indexexpr {
                    prefixexp {
                    }
                    exp {
                    }
                  }
                }
              }
              explist {
                expressions {
                  true: 0
                }
                expressions {
                }
                explast {
                }
              }
            }
          }
          stat {
            list {
              varlist {
                var {
                }
              }
              explist {
                expressions {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                          prefixexp {
                          }
                        }
                      }
                    }
                    binop {
                      concat: 0
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              false: 4
                            }
                            binop {
                            }
                            rightexp {
                              prefixexp {
                              }
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                          prefixexp {
                          }
                        }
                      }
                    }
                  }
                }
                explast {
                  true: 5
                }
              }
            }
          }
        }
      }
      condition {
        nil: 0
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    list {
      varlist {
        var {
        }
      }
      explist {
        expressions {
          binary {
            leftexp {
              prefixexp {
              }
            }
            binop {
              concat: 4
            }
            rightexp {
              prefixexp {
              }
            }
          }
        }
        explast {
          true: 5
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    call {
      prefArgs {
        prefixexp {
          var {
            indexexpr {
              prefixexp {
                functioncall {
                  namedArgs {
                    prefixexp {
                    }
                    name {
                      name: "\000\000\000\000"
                      num: 0
                    }
                    args {
                    }
                  }
                }
              }
              exp {
              }
            }
          }
        }
        args {
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        parlist {
          ellipsis: ""
        }
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    block {
      block {
        chunk {
          stat {
          }
          stat {
          }
          stat {
          }
          stat {
            semicolon: true
          }
          stat {
            whilecycle {
              condition {
                binary {
                  leftexp {
                  }
                  binop {
                    concat: 0
                  }
                  rightexp {
                    prefixexp {
                      exp {
                        binary {
                          leftexp {
                            false: 4
                          }
                          binop {
                            and: 0
                          }
                          rightexp {
                            prefixexp {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
            semicolon: true
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
          }
          binop {
            concat: 0
          }
          rightexp {
            prefixexp {
              exp {
                binary {
                  leftexp {
                    false: 4
                  }
                  binop {
                    and: 0
                  }
                  rightexp {
                    prefixexp {
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    block {
      block {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
          }
          binop {
            concat: 0
          }
          rightexp {
            prefixexp {
              exp {
                binary {
                  leftexp {
                    false: 4
                  }
                  binop {
                    and: 0
                  }
                  rightexp {
                    prefixexp {
                    }
                  }
                }
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
            stat {
              list {
                varlist {
                  var {
                  }
                }
                explist {
                  explast {
                    str: "\\377\\377\\376k"
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
  }
}
