chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            ifstat {
              condition {
                true: 0
              }
              first {
                chunk {
                }
              }
            }
            semicolon: true
          }
          stat {
            whilecycle {
              condition {
                binary {
                  leftexp {
                    prefixexp {
                      exp {
                        binary {
                          leftexp {
                          }
                          binop {
                            and: 4
                          }
                          rightexp {
                            unary {
                              unop {
                                length: 0
                              }
                              exp {
                                binary {
                                  leftexp {
                                  }
                                  binop {
                                    concat: 0
                                  }
                                  rightexp {
                                    binary {
                                      leftexp {
                                        number: 2.06689453125
                                      }
                                      binop {
                                        exp: 4
                                      }
                                      rightexp {
                                        number: -1.683088580318447e+212
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  binop {
                    div: 0
                  }
                  rightexp {
                    unary {
                      unop {
                        negate: 0
                      }
                      exp {
                        prefixexp {
                          exp {
                            binary {
                              leftexp {
                              }
                              binop {
                                and: 4
                              }
                              rightexp {
                                unary {
                                  unop {
                                    length: 0
                                  }
                                  exp {
                                    binary {
                                      leftexp {
                                      }
                                      binop {
                                        concat: 0
                                      }
                                      rightexp {
                                        binary {
                                          leftexp {
                                            number: 2.06689453125
                                          }
                                          binop {
                                            exp: 4
                                          }
                                          rightexp {
                                            number: -1.683088580318447e+212
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              doblock {
                block {
                  chunk {
                  }
                }
              }
            }
          }
        }
      }
      condition {
        nil: 0
      }
    }
  }
}
