chunk {
  stat {
  }
  stat {
  }
  stat {
    whilecycle {
      condition {
        binary {
          leftexp {
            number: 0
          }
          binop {
            and: 0
          }
          rightexp {
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        whilecycle {
                          condition {
                            tableconstructor {
                              fieldlist {
                                firstField {
                                  expression {
                                  }
                                }
                                fields {
                                  field {
                                    expression {
                                      binary {
                                        leftexp {
                                          binary {
                                            leftexp {
                                              unary {
                                                unop {
                                                  negate: 11776
                                                }
                                                exp {
                                                  number: 0
                                                }
                                              }
                                            }
                                            binop {
                                            }
                                            rightexp {
                                              number: 116.95316997449845
                                            }
                                          }
                                        }
                                        binop {
                                          mod: 0
                                        }
                                        rightexp {
                                          binary {
                                            leftexp {
                                              binary {
                                                leftexp {
                                                  unary {
                                                    unop {
                                                      length: 2
                                                    }
                                                    exp {
                                                      tableconstructor {
                                                      }
                                                    }
                                                  }
                                                }
                                                binop {
                                                }
                                                rightexp {
                                                  unary {
                                                    unop {
                                                      length: 2
                                                    }
                                                    exp {
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            binop {
                                              sub: 2
                                            }
                                            rightexp {
                                              number: 44
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  sep {
                                  }
                                }
                                fields {
                                  field {
                                  }
                                  sep {
                                  }
                                }
                              }
                            }
                          }
                          doblock {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              semicolon: true
            }
            stat {
              whilecycle {
                condition {
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        block {
          chunk {
            laststat {
              semicolon: true
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    whilecycle {
      condition {
        tableconstructor {
          fieldlist {
            firstField {
              expression {
              }
            }
            fields {
              field {
                expression {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          number: -416
                        }
                        binop {
                          exp: 0
                        }
                        rightexp {
                          number: 116.95316997449845
                        }
                      }
                    }
                    binop {
                      mod: 65536
                    }
                    rightexp {
                      binary {
                        leftexp {
                          unary {
                            unop {
                              length: 2
                            }
                            exp {
                              tableconstructor {
                              }
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                          unary {
                            unop {
                              length: 2
                            }
                            exp {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              sep {
              }
            }
            fields {
              field {
                expression {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          unary {
                            unop {
                              negate: 3019910656
                            }
                            exp {
                              number: 0
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                          binary {
                            leftexp {
                              unary {
                                unop {
                                  length: 2
                                }
                                exp {
                                  tableconstructor {
                                  }
                                }
                              }
                            }
                            binop {
                              sub: 2
                            }
                            rightexp {
                              number: -418.00784313725489
                            }
                          }
                        }
                      }
                    }
                    binop {
                      mod: 65536
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              unary {
                                unop {
                                  length: 2
                                }
                                exp {
                                  tableconstructor {
                                  }
                                }
                              }
                            }
                            binop {
                            }
                            rightexp {
                              number: -416
                            }
                          }
                        }
                        binop {
                        }
                        rightexp {
                          number: 0
                        }
                      }
                    }
                  }
                }
              }
              sep {
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
}
