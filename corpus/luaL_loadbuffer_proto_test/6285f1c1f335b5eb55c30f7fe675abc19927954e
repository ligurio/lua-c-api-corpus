chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 0
      }
      startexp {
        number: 3
      }
      stopexp {
        number: 3
      }
      stepexp {
        number: -0
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: ""
                  num: 0
                }
                startexp {
                  number: 3
                }
                stopexp {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          nil: 0
                        }
                        binop {
                          sub: 0
                        }
                        rightexp {
                          number: 3
                        }
                      }
                    }
                    binop {
                      sub: 6
                    }
                    rightexp {
                      binary {
                        leftexp {
                          number: 3
                        }
                        binop {
                          sub: 6
                        }
                        rightexp {
                          number: -422212465065984
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        func {
                          name {
                            firstname {
                              name: "<\000\000\000\000\000\000\000"
                              num: 0
                            }
                          }
                          body {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              semicolon: true
            }
          }
        }
      }
    }
  }
}
