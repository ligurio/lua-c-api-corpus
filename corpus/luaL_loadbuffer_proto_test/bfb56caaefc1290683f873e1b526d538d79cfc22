chunk {
  stat {
    forcyclename {
      name {
        name: ""
        num: 20
      }
      startexp {
      }
      stopexp {
        binary {
          leftexp {
            unary {
              unop {
                length: 4
              }
              exp {
                binary {
                  leftexp {
                    str: "\001\000\000\000\000\000\000\000"
                  }
                  binop {
                    less: 543694848
                  }
                  rightexp {
                    true: 3
                  }
                }
              }
            }
          }
          binop {
            mod: 16781312
          }
          rightexp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    ellipsis: "\000\000\000|"
                  }
                  binop {
                    concat: 543694848
                  }
                  rightexp {
                    true: 3
                  }
                }
              }
              binop {
                or: 16781312
              }
              rightexp {
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 538968064
      }
      startexp {
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            stat {
              forcyclename {
                name {
                  name: "\000\000\000|"
                  num: 0
                }
                startexp {
                  tableconstructor {
                  }
                }
                stopexp {
                  number: 7
                }
                stepexp {
                  prefixexp {
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: false
  }
}
