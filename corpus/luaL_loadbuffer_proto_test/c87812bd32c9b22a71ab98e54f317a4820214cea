chunk {
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
      clauses {
        condition {
          binary {
            leftexp {
            }
            binop {
              or: 0
            }
            rightexp {
            }
          }
        }
        block {
          chunk {
          }
        }
      }
      clauses {
        condition {
        }
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                          prefixexp {
                            exp {
                              binary {
                                leftexp {
                                  binary {
                                    leftexp {
                                      number: 1.072773087526538e+253
                                    }
                                    binop {
                                      exp: 0
                                    }
                                    rightexp {
                                      prefixexp {
                                        exp {
                                          binary {
                                            leftexp {
                                              number: 0
                                            }
                                            binop {
                                              mod: 4
                                            }
                                            rightexp {
                                              number: 0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                binop {
                                  sub: 4
                                }
                                rightexp {
                                  number: 0
                                }
                              }
                            }
                          }
                        }
                        binop {
                          exp: 0
                        }
                        rightexp {
                          number: 0
                        }
                      }
                    }
                    binop {
                    }
                    rightexp {
                      binary {
                        leftexp {
                          prefixexp {
                            exp {
                              binary {
                                leftexp {
                                  number: 0
                                }
                                binop {
                                  mod: 4
                                }
                                rightexp {
                                  number: 0
                                }
                              }
                            }
                          }
                        }
                        binop {
                          exp: 0
                        }
                        rightexp {
                          number: 5.6953095325918367e-304
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
      clauses {
        condition {
        }
        block {
          chunk {
          }
        }
      }
    }
    semicolon: true
  }
}
