chunk {
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
            stat {
              localfunc {
                name {
                  name: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                  num: 0
                }
                funcbody {
                  parlist {
                    ellipsis: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000chunk {\n  stat \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000{\n  }\n  stat {\n    semicolon: true\n  }\n  stat {\n    block {\n      block {\n        chunk {\n        }\n      }\n    }\n  }\n  stat {\n    repeatcycle {\n      block {\n        chunk {\n          stat {\n            list {\n              varlist {\n                var {\n                }\n                vars {\n                  name {\n                    name: \"jlogjjjjjjjjjjDjjjj\"\n                    num: 0\n                  }\n                }\n                vars {\n                }\n              }\n              explist {\n                expressions {\n                  binary {\n                    leftexp {\n                      binary {\n                        leftexp {\n                          prefixexp {\n                            exp {\n                              binary {\n                                leftexp {\n                                }\n                                binop {\n                                  concat: 8\n                                }\n                                rightexp {\n                                  prefixexp {\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                        binop {\n                          concat: 36\n                        }\n                        rightexp {\n                        }\n                      }\n                    }\n                    binop {\n                      concat: 8\n                    }\n                    rightexp {\n                      binary {\n                        leftexp {\n                          prefixexp {\n                            exp {\n                              binary {\n                                leftexp {\n                                  prefixexp {\n                                    exp {\n                                      binary {\n                                        leftexp {\n                                          prefixexp {\n                                          }\n                                        }\n                                        binop {\n                                          concat: 0\n                                        }\n                                        rightexp {\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                                binop {\n                                  concat: 4\n                                }\n                                rightexp {\n                                }\n                              }\n                            }\n                          }\n                        }\n                        binop {\n                          concat: 0\n                        }\n                        rightexp {\n                        }\n                      }\n                    }\n                  }\n                }\n                expressions {\n                  tableconstructor {\n                  }\n                }\n                explast {\n                }\n              }\n            }\n          }\n          stat {\n            list {\n              varlist {\n                var {\n                }\n              }\n              explist {\n                expressions {\n                  binary {\n                    leftexp {\n                      binary {\n                        leftexp {\n                          prefixexp {\n                            exp {\n                              binary {\n                                leftexp {\n                                  binary {\n                                    leftexp {\n                                      prefixexp {\n                                      }\n                                    }\n                                    binop {\n                                      concat: 4\n                                    }\n                                    rightexp {\n                                      str: \"\"\n                                    }\n                                  }\n                                }\n                                binop {\n                                  concat: 3840\n                                }\n                                rightexp {\n                                  prefixexp {\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                        binop {\n                          concat: 8192\n                        }\n                        rightexp {\n                        }\n                      }\n                    }\n                    binop {\n                      concat: 8\n                    }\n                    rightexp {\n                      prefixexp {\n                        exp {\n                          binary {\n                            leftexp {\n                              prefixexp {\n                                exp {\n                                  binary {\n                                    leftexp {\n                                      prefixexp {\n                                      }\n                                    }\n                                    binop {\n                                      concat: 0\n                                    }\n                                    rightexp {\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                            binop {\n                              concat: 4\n                            }\n                            rightexp {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                expressions {\n                  tableconstructor {\n                  }\n                }\n                explast {\n                }\n              }\n            }\n          }\n        }\n      }\n      condition {\n        nil: 4\n      }\n    }\n  }\n  stat {\n  }\n}\n"
                  }
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                }
              }
              semicolon: true
            }
            stat {
              whilecycle {
                condition {
                  tableconstructor {
                    fieldlist {
                      firstField {
                        expression {
                          prefixexp {
                            functioncall {
                              prefArgs {
                                prefixexp {
                                }
                                args {
                                  explist {
                                    explist {
                                      explast {
                                        ellipsis: ""
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                doblock {
                  block {
                    chunk {
                      stat {
                        localfunc {
                          name {
                            name: ""
                            num: 0
                          }
                          funcbody {
                            block {
                              chunk {
                              }
                            }
                          }
                        }
                      }
                      stat {
                        repeatcycle {
                          block {
                            chunk {
                            }
                          }
                          condition {
                          }
                        }
                      }
                      stat {
                        whilecycle {
                          condition {
                            tableconstructor {
                              fieldlist {
                                firstField {
                                  expression {
                                    prefixexp {
                                      functioncall {
                                        prefArgs {
                                          prefixexp {
                                          }
                                          args {
                                            explist {
                                              explist {
                                                explast {
                                                  ellipsis: ""
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          doblock {
                            block {
                              chunk {
                                stat {
                                  localfunc {
                                    name {
                                      name: ""
                                      num: 0
                                    }
                                    funcbody {
                                      block {
                                        chunk {
                                        }
                                      }
                                    }
                                  }
                                }
                                stat {
                                  repeatcycle {
                                    block {
                                      chunk {
                                      }
                                    }
                                    condition {
                                      nil: 0
                                    }
                                  }
                                }
                                stat {
                                  whilecycle {
                                    condition {
                                      tableconstructor {
                                        fieldlist {
                                          firstField {
                                            expression {
                                              prefixexp {
                                                functioncall {
                                                  prefArgs {
                                                    prefixexp {
                                                      functioncall {
                                                        prefArgs {
                                                          prefixexp {
                                                          }
                                                          args {
                                                          }
                                                        }
                                                      }
                                                    }
                                                    args {
                                                      explist {
                                                        explist {
                                                          explast {
                                                            ellipsis: ""
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    doblock {
                                      block {
                                        chunk {
                                          stat {
                                            localfunc {
                                              name {
                                                name: ""
                                                num: 0
                                              }
                                              funcbody {
                                                block {
                                                  chunk {
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          stat {
                                            repeatcycle {
                                              block {
                                                chunk {
                                                }
                                              }
                                              condition {
                                              }
                                            }
                                          }
                                          stat {
                                            whilecycle {
                                              condition {
                                                str: ""
                                              }
                                              doblock {
                                                block {
                                                  chunk {
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
