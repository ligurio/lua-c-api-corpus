chunk {
  stat {
    semicolon: false
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 1
      }
      startexp {
        tableconstructor {
          fieldlist {
            firstField {
              expression {
                str: "$"
              }
            }
            fields {
              field {
                expression {
                  binary {
                    leftexp {
                      number: -4.9591064453125e-05
                    }
                    binop {
                      mult: 4
                    }
                    rightexp {
                      binary {
                        leftexp {
                          number: -0
                        }
                        binop {
                          mult: 4
                        }
                        rightexp {
                        }
                      }
                    }
                  }
                }
              }
              sep {
              }
            }
            fields {
              field {
                expression {
                  tableconstructor {
                    fieldlist {
                      firstField {
                      }
                    }
                  }
                }
              }
              sep {
                comma: 32123
              }
            }
            lastSep {
              comma: 0
            }
          }
        }
      }
      stopexp {
      }
      doblock {
        block {
          chunk {
            laststat {
              break: 4
            }
          }
        }
      }
    }
    semicolon: false
  }
  stat {
    ifstat {
      condition {
        binary {
          leftexp {
          }
          binop {
          }
          rightexp {
            str: "\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'"
          }
        }
      }
      first {
        chunk {
        }
      }
      clauses {
        condition {
        }
        block {
          chunk {
          }
        }
      }
    }
  }
}
