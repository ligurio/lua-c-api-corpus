chunk {
  stat {
    whilecycle {
      condition {
        nil: 0
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    whilecycle {
      condition {
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        nil: 2
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        nil: 2
      }
      doblock {
        block {
          chunk {
            stat {
              whilecycle {
                condition {
                  nil: 0
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
            }
            stat {
            }
            stat {
              call {
                prefArgs {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                        }
                        binop {
                        }
                        rightexp {
                          true: 1048576
                        }
                      }
                    }
                  }
                  args {
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                  nil: 0
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
            }
            stat {
              whilecycle {
                condition {
                  nil: 0
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              localfunc {
                name {
                  name: ""
                  num: 0
                }
                funcbody {
                  parlist {
                    namelist {
                      namelist {
                        firstname {
                          name: ""
                          num: 0
                        }
                        names {
                          name: "{\000"
                          num: 0
                        }
                      }
                    }
                  }
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
            stat {
              whilecycle {
                condition {
                  nil: 0
                }
                doblock {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        nil: 2
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        nil: 0
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        nil: 0
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        nil: 2
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        nil: 0
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
    whilecycle {
      condition {
        nil: 0
      }
      doblock {
        block {
          chunk {
          }
        }
      }
    }
  }
  stat {
  }
}
