chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
          }
          laststat {
          }
        }
      }
      condition {
        binary {
          leftexp {
            prefixexp {
              exp {
                binary {
                  leftexp {
                    prefixexp {
                      exp {
                        binary {
                          leftexp {
                          }
                          binop {
                            concat: 0
                          }
                          rightexp {
                          }
                        }
                      }
                    }
                  }
                  binop {
                    and: 2
                  }
                  rightexp {
                    str: "UUUUUUUUUUUU"
                  }
                }
              }
            }
          }
          binop {
          }
          rightexp {
            prefixexp {
              var {
                indexexpr {
                  prefixexp {
                    var {
                    }
                  }
                  exp {
                    binary {
                      leftexp {
                        unary {
                          unop {
                            length: 0
                          }
                          exp {
                            tableconstructor {
                            }
                          }
                        }
                      }
                      binop {
                        div: 4
                      }
                      rightexp {
                        unary {
                          unop {
                            length: 0
                          }
                          exp {
                            str: "b"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    semicolon: true
  }
}
