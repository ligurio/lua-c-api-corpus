chunk {
  stat {
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 32
      }
      startexp {
        prefixexp {
          exp {
            binary {
              leftexp {
                binary {
                  leftexp {
                    number: 0
                  }
                  binop {
                    equal: 67108864
                  }
                  rightexp {
                    binary {
                      leftexp {
                        false: 524288
                      }
                      binop {
                        concat: 0
                      }
                      rightexp {
                        binary {
                          leftexp {
                            number: -2.77587890625
                          }
                          binop {
                          }
                          rightexp {
                          }
                        }
                      }
                    }
                  }
                }
              }
              binop {
                or: 2424832
              }
              rightexp {
                binary {
                  leftexp {
                    number: 0
                  }
                  binop {
                  }
                  rightexp {
                    function {
                      body {
                        parlist {
                          ellipsis: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
                        }
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      stopexp {
        prefixexp {
          var {
            indexexpr {
              prefixexp {
              }
              exp {
              }
            }
          }
        }
      }
      stepexp {
        str: ""
      }
      doblock {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                    laststat {
                      semicolon: true
                    }
                  }
                }
                condition {
                }
              }
            }
            laststat {
              break: 0
            }
          }
        }
      }
    }
    semicolon: true
  }
  stat {
    forcyclename {
      name {
        name: ""
        num: 1
      }
      startexp {
      }
      stopexp {
        number: 0
      }
      stepexp {
        str: ""
      }
      doblock {
        block {
          chunk {
            stat {
              semicolon: false
            }
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    block {
      block {
        chunk {
          stat {
            list {
              varlist {
                var {
                }
              }
              explist {
                explast {
                  binary {
                    leftexp {
                    }
                    binop {
                    }
                    rightexp {
                      str: "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
                    }
                  }
                }
              }
            }
          }
          laststat {
            explist {
              explist {
                explast {
                  nil: 0
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
  }
  stat {
    func {
      name {
        firstname {
          name: ""
          num: 0
        }
      }
      body {
        block {
          chunk {
            stat {
              repeatcycle {
                block {
                  chunk {
                  }
                }
                condition {
                }
              }
            }
          }
        }
      }
    }
  }
}
