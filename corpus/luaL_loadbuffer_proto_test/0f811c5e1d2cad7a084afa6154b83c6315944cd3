chunk {
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 0
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
            semicolon: true
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          laststat {
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 0
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        tableconstructor {
        }
      }
    }
    semicolon: true
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localnames {
              namelist {
                firstname {
                  name: ""
                  num: 0
                }
              }
              explist {
                expressions {
                  unary {
                    unop {
                      length: 0
                    }
                    exp {
                    }
                  }
                }
                explast {
                }
              }
            }
            semicolon: false
          }
          stat {
            list {
              varlist {
                var {
                }
              }
              explist {
                explast {
                }
              }
            }
          }
          stat {
            list {
              varlist {
                var {
                }
                vars {
                  indexname {
                    prefixexp {
                      exp {
                        nil: 0
                      }
                    }
                    Name: ""
                  }
                }
              }
              explist {
                explast {
                  binary {
                    leftexp {
                      binary {
                        leftexp {
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                  number: -4.9591064453125e-05
                                }
                                binop {
                                  div: 0
                                }
                                rightexp {
                                  number: -4.9591064453125e-05
                                }
                              }
                            }
                            binop {
                              div: 0
                            }
                            rightexp {
                              binary {
                                leftexp {
                                  prefixexp {
                                    functioncall {
                                      namedArgs {
                                        prefixexp {
                                        }
                                        name {
                                          name: ""
                                          num: 0
                                        }
                                        args {
                                          tableconstructor {
                                            fieldlist {
                                              firstField {
                                              }
                                              lastSep {
                                                comma: 67108864
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                binop {
                                  div: 0
                                }
                                rightexp {
                                  number: -4.9591064453125e-05
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    binop {
                      div: 0
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                  binary {
                                    leftexp {
                                      number: -4.9591064453125e-05
                                    }
                                    binop {
                                      div: 0
                                    }
                                    rightexp {
                                      number: -4.9591064453125e-05
                                    }
                                  }
                                }
                                binop {
                                  div: 0
                                }
                                rightexp {
                                  number: -4.9591064453125e-05
                                }
                              }
                            }
                            binop {
                              or: 13312
                            }
                            rightexp {
                            }
                          }
                        }
                        binop {
                          notEqual: 13312
                        }
                        rightexp {
                          binary {
                            leftexp {
                              binary {
                                leftexp {
                                  number: -3.4332275845372351e-05
                                }
                                binop {
                                  div: 0
                                }
                                rightexp {
                                  number: -4.9591064453125e-05
                                }
                              }
                            }
                            binop {
                              div: 0
                            }
                            rightexp {
                              number: -4.9591064453125e-05
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
    semicolon: true
  }
  stat {
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            forcyclelist {
              names {
                firstname {
                  name: ""
                  num: 0
                }
              }
              expressions {
                explast {
                }
              }
              doblock {
                block {
                  chunk {
                    stat {
                      forcyclename {
                        name {
                          name: ""
                          num: 0
                        }
                        startexp {
                        }
                        stopexp {
                          function {
                            body {
                              parlist {
                                namelist {
                                  namelist {
                                    firstname {
                                      name: ">="
                                      num: 0
                                    }
                                  }
                                }
                              }
                              block {
                                chunk {
                                }
                              }
                            }
                          }
                        }
                        doblock {
                          block {
                            chunk {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            semicolon: true
          }
        }
      }
      condition {
        nil: 1024
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
        }
      }
      condition {
        nil: 0
      }
    }
  }
}
