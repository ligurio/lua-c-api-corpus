chunk {
  stat {
    localfunc {
      name {
        name: ""
        num: 0
      }
      funcbody {
        parlist {
        }
        block {
          chunk {
            laststat {
              explist {
                explist {
                  explast {
                    unary {
                      unop {
                        not: 0
                      }
                      exp {
                        binary {
                          leftexp {
                            unary {
                              unop {
                                not: 0
                              }
                              exp {
                              }
                            }
                          }
                          binop {
                            add: 0
                          }
                          rightexp {
                            unary {
                              unop {
                                not: 2
                              }
                              exp {
                                binary {
                                  leftexp {
                                    true: 5
                                  }
                                  binop {
                                    or: 2048
                                  }
                                  rightexp {
                                    prefixexp {
                                      var {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            localfunc {
              name {
                name: ""
                num: 0
              }
              funcbody {
                parlist {
                }
                block {
                  chunk {
                    laststat {
                      explist {
                        explist {
                          explast {
                            unary {
                              unop {
                                not: 0
                              }
                              exp {
                                binary {
                                  leftexp {
                                    nil: 0
                                  }
                                  binop {
                                    add: 0
                                  }
                                  rightexp {
                                    unary {
                                      unop {
                                      }
                                      exp {
                                        binary {
                                          leftexp {
                                            number: 1.79266204420746e-310
                                          }
                                          binop {
                                            or: 2048
                                          }
                                          rightexp {
                                            prefixexp {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            semicolon: true
          }
          stat {
          }
        }
      }
      condition {
      }
    }
  }
}
