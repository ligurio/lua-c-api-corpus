chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
                nil: 0
              }
              stopexp {
                nil: 8192
              }
              doblock {
                block {
                  chunk {
                    stat {
                      list {
                        varlist {
                          var {
                            indexname {
                              prefixexp {
                              }
                              Name: ""
                            }
                          }
                        }
                        explist {
                          expressions {
                            tableconstructor {
                              fieldlist {
                                firstField {
                                  exprassign {
                                    key {
                                      str: "recunroll="
                                    }
                                    value {
                                      binary {
                                        leftexp {
                                          tableconstructor {
                                          }
                                        }
                                        binop {
                                          and: 1
                                        }
                                        rightexp {
                                          prefixexp {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          explast {
                          }
                        }
                      }
                      semicolon: true
                    }
                  }
                }
              }
            }
          }
        }
      }
      condition {
      }
    }
    semicolon: true
  }
}
