chunk {
  stat {
  }
  stat {
  }
  stat {
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
  }
  stat {
  }
  stat {
    semicolon: true
  }
  stat {
  }
  stat {
  }
  stat {
    ifstat {
      condition {
        true: 0
      }
      first {
        chunk {
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
                number: 1.7801813137633207e-307
              }
              stopexp {
                number: 8.4200792985502e-310
              }
              stepexp {
                number: -0
              }
              doblock {
                block {
                  chunk {
                    stat {
                      list {
                        varlist {
                          var {
                          }
                          vars {
                            name {
                              name: ""
                              num: 1
                            }
                          }
                        }
                        explist {
                          expressions {
                            tableconstructor {
                              fieldlist {
                                firstField {
                                  expression {
                                    tableconstructor {
                                    }
                                  }
                                }
                              }
                            }
                          }
                          explast {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            forcyclename {
              name {
                name: ""
                num: 0
              }
              startexp {
                number: 2.03515625
              }
              stopexp {
                number: 0
              }
              stepexp {
                number: -0
              }
              doblock {
                block {
                  chunk {
                    stat {
                      list {
                        varlist {
                          var {
                          }
                          vars {
                            name {
                              name: ""
                              num: 1
                            }
                          }
                        }
                        explist {
                          expressions {
                            tableconstructor {
                              fieldlist {
                                firstField {
                                  expression {
                                    tableconstructor {
                                    }
                                  }
                                }
                              }
                            }
                          }
                          explast {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stat {
            list {
              varlist {
                var {
                }
              }
              explist {
                expressions {
                  tableconstructor {
                  }
                }
                explast {
                }
              }
            }
          }
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
  }
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
    }
  }
}
