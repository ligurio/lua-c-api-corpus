chunk {
  stat {
    ifstat {
      condition {
      }
      first {
        chunk {
        }
      }
      last {
        chunk {
          laststat {
            break: 2099257376
          }
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
        }
      }
      explist {
        expressions {
          binary {
            leftexp {
              prefixexp {
                var {
                  name {
                    name: ""
                    num: 262160
                  }
                }
              }
            }
            binop {
              concat: 0
            }
            rightexp {
              binary {
                leftexp {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                          prefixexp {
                          }
                        }
                        binop {
                          notEqual: 16121856
                        }
                        rightexp {
                          prefixexp {
                          }
                        }
                      }
                    }
                  }
                }
                binop {
                  concat: 0
                }
                rightexp {
                  str: ""
                }
              }
            }
          }
        }
        expressions {
          binary {
            leftexp {
            }
            binop {
              and: 16121856
            }
            rightexp {
            }
          }
        }
        expressions {
        }
        explast {
          number: 0
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
          name {
            name: ""
            num: 262160
          }
        }
        vars {
        }
      }
      explist {
        expressions {
          binary {
            leftexp {
              prefixexp {
                exp {
                  binary {
                    leftexp {
                      prefixexp {
                        exp {
                          binary {
                            leftexp {
                              prefixexp {
                              }
                            }
                            binop {
                              concat: 0
                            }
                            rightexp {
                            }
                          }
                        }
                      }
                    }
                    binop {
                      concat: 0
                    }
                    rightexp {
                      binary {
                        leftexp {
                          binary {
                            leftexp {
                              prefixexp {
                              }
                            }
                            binop {
                              concat: 0
                            }
                            rightexp {
                              prefixexp {
                              }
                            }
                          }
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                          str: ""
                        }
                      }
                    }
                  }
                }
              }
            }
            binop {
              concat: 0
            }
            rightexp {
              binary {
                leftexp {
                  prefixexp {
                    exp {
                      binary {
                        leftexp {
                          prefixexp {
                          }
                        }
                        binop {
                          concat: 0
                        }
                        rightexp {
                          prefixexp {
                          }
                        }
                      }
                    }
                  }
                }
                binop {
                  concat: 0
                }
                rightexp {
                  str: ""
                }
              }
            }
          }
        }
        expressions {
          tableconstructor {
            fieldlist {
              firstField {
              }
              fields {
                field {
                }
                sep {
                }
              }
            }
          }
        }
        expressions {
        }
        expressions {
          tableconstructor {
          }
        }
        explast {
          ellipsis: ""
        }
      }
    }
  }
}
