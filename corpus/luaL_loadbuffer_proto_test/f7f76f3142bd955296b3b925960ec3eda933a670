chunk {
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
          }
        }
      }
      condition {
        nil: 4
      }
    }
  }
  stat {
    whilecycle {
      condition {
        tableconstructor {
          fieldlist {
            firstField {
            }
            fields {
              field {
              }
              sep {
              }
            }
            fields {
              field {
                expression {
                  binary {
                    leftexp {
                      prefixexp {
                        functioncall {
                          prefArgs {
                            prefixexp {
                              var {
                                indexname {
                                  prefixexp {
                                  }
                                  Name: "char"
                                }
                              }
                            }
                            args {
                              explist {
                              }
                            }
                          }
                        }
                      }
                    }
                    binop {
                      concat: 1
                    }
                    rightexp {
                      str: "char"
                    }
                  }
                }
              }
              sep {
              }
            }
            fields {
              field {
              }
              sep {
              }
            }
          }
        }
      }
      doblock {
        block {
          chunk {
            stat {
            }
            stat {
              func {
                name {
                  firstname {
                    name: ""
                    num: 0
                  }
                }
                body {
                  block {
                    chunk {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
