chunk {
  stat {
    call {
      prefArgs {
        prefixexp {
        }
        args {
          str: "debug.getlocal"
        }
      }
    }
    semicolon: true
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
      }
      explist {
        expressions {
          prefixexp {
            var {
              indexname {
                prefixexp {
                }
                Name: "false"
              }
            }
          }
        }
        expressions {
          function {
            body {
              block {
                chunk {
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                    call {
                      namedArgs {
                        prefixexp {
                        }
                        name {
                          name: ""
                          num: 0
                        }
                        args {
                          str: "LUA_INIT_5_2"
                        }
                      }
                    }
                  }
                  stat {
                  }
                  stat {
                  }
                }
              }
            }
          }
        }
        expressions {
          function {
            body {
              parlist {
                namelist {
                  namelist {
                    firstname {
                      name: "\\036\\000"
                      num: 0
                    }
                  }
                }
              }
              block {
                chunk {
                  stat {
                  }
                  stat {
                    call {
                      namedArgs {
                        prefixexp {
                        }
                        name {
                          name: ""
                          num: 0
                        }
                        args {
                          tableconstructor {
                            fieldlist {
                              firstField {
                                exprassign {
                                  key {
                                  }
                                  value {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                }
              }
            }
          }
        }
        expressions {
        }
        expressions {
          function {
            body {
              block {
                chunk {
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                }
              }
            }
          }
        }
        expressions {
          function {
            body {
              block {
                chunk {
                  stat {
                    semicolon: true
                  }
                  stat {
                    whilecycle {
                      condition {
                        tableconstructor {
                          fieldlist {
                            firstField {
                            }
                            fields {
                              field {
                              }
                              sep {
                                comma: 0
                              }
                            }
                          }
                        }
                      }
                      doblock {
                        block {
                          chunk {
                            laststat {
                              break: 4
                              semicolon: true
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                    whilecycle {
                      condition {
                        prefixexp {
                          var {
                            indexname {
                              prefixexp {
                                var {
                                  indexname {
                                    prefixexp {
                                      var {
                                      }
                                    }
                                    Name: "fal&se"
                                  }
                                }
                              }
                              Name: "false"
                            }
                          }
                        }
                      }
                      doblock {
                        block {
                          chunk {
                          }
                        }
                      }
                    }
                  }
                  stat {
                    semicolon: true
                  }
                }
              }
            }
          }
        }
        explast {
        }
      }
    }
    semicolon: true
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
      }
      explist {
        expressions {
          function {
            body {
              block {
                chunk {
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                }
              }
            }
          }
        }
        expressions {
          function {
            body {
              block {
                chunk {
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                }
              }
            }
          }
        }
        expressions {
        }
        expressions {
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          function {
            body {
              block {
                chunk {
                  stat {
                    whilecycle {
                      condition {
                        tableconstructor {
                          fieldlist {
                            firstField {
                            }
                            fields {
                              field {
                              }
                              sep {
                                comma: 0
                              }
                            }
                          }
                        }
                      }
                      doblock {
                        block {
                          chunk {
                            laststat {
                              break: 4
                              semicolon: true
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                }
              }
            }
          }
        }
        explast {
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
          indexexpr {
            prefixexp {
              var {
                indexname {
                  prefixexp {
                  }
                  Name: "\377"
                }
              }
            }
            exp {
            }
          }
        }
      }
      explist {
        explast {
        }
      }
    }
  }
  stat {
    list {
      varlist {
        var {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
        vars {
        }
      }
      explist {
        expressions {
          function {
            body {
              block {
                chunk {
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                }
              }
            }
          }
        }
        expressions {
          function {
            body {
              block {
                chunk {
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                }
              }
            }
          }
        }
        expressions {
        }
        expressions {
        }
        expressions {
          tableconstructor {
          }
        }
        expressions {
          function {
            body {
              block {
                chunk {
                  stat {
                    whilecycle {
                      condition {
                        tableconstructor {
                          fieldlist {
                            firstField {
                            }
                            fields {
                              field {
                              }
                              sep {
                                comma: 0
                              }
                            }
                          }
                        }
                      }
                      doblock {
                        block {
                          chunk {
                            laststat {
                              break: 4
                              semicolon: true
                            }
                          }
                        }
                      }
                    }
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                  stat {
                  }
                }
              }
            }
          }
        }
        explast {
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    localnames {
      namelist {
        firstname {
          name: ""
          num: 0
        }
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
      namedArgs {
        prefixexp {
        }
        name {
          name: "\203\203\203\203\203\203\203\203\203\203\203\203\203\203\203"
          num: 0
        }
        args {
        }
      }
    }
    semicolon: true
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
    semicolon: false
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
    semicolon: false
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
    semicolon: false
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
  }
  stat {
    call {
    }
  }
  stat {
    repeatcycle {
      block {
        chunk {
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
            call {
            }
          }
          stat {
          }
          stat {
            call {
            }
          }
        }
      }
      condition {
      }
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
  stat {
    call {
    }
  }
}
