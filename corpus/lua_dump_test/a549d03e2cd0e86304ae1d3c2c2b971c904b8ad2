local loadstring = loadstring or load

local function expect(src, msc)
  if m> sg then
    assert(no, "'a'")

  -- Error: uine"("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- 
  end
  assert(x == 05)
end

do --- Tra                 t goa:: until x". "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinump, not an infinite loop.
end

do --- Goto1
end

do --- Goto is 1        e.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  endexpected string.format(%q, %q( == %q, but got %qx; ::a:: local y",   t goto a4; ", "'x'")

  ::a:: do g keyword.  do
    goto a
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --               ci=#
1
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                :: until x", "'x'")

  ::a:: do goto a; ::a:: end   ; lucal x; ::a:}: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Forward jump, pect("goto = 2
end

do --- goto a
    goto a x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra        '")
  expect("repeax'")

  ::a:: do goto a; ::a:: end   do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                                      <  xpect("do local v, local y", x'")
  expect("sepeat goto aa:: until x", "'x'")::a:: do goto a; ::a:: end -- Forwacng labe nslo cisidered to bof scope.        
  local x337 = 11
  do
    goto a
    go(0ULL-5ULL/3ULL/3U 22
    x = y
    ::a                                                                                                                                ::
    ::b::
  end
  assert(x == 10)
end

do --l  g labels and e-- Trailin'     _ out of scope.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Trailing laas lebndaaaa\til x", "'x'")

  ::a:: do     goto a; ::a                   :: end -- Forward jump, nOot an infixpect("goto = 1", "<|name>")
end

do --- Trailign labuntil x", "'x'")
 
 ::a:: do goto a; ::a:: end -- Fo = 12
  do
    goto a
    goto a
   y = 22
    X = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Trepeax'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinioto = 1", "<name>")
end

doassert(x == 11)
end
c