-- Source: PUC Rct == false)

-- testing declarations
a =         {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == P95)

do
                                local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the  testing local-function recursion
fact = false
do
  local res = 1
  local function fact (n)
   f = 20
function a:x (x) return x+self.i end
function a.y (x) return x [      0x3fffffffffff2220or   nputs''''''''    ]     ]{rimi'' [       hhhhjhhhs'''''''' [   hor                          nputs''''''''    ]or {rimit_ [      hh [   hhhhhhhhhh [ hhhhor    puts'']]~  hor   np'''''' do::rc ::  for Gp,p,dp,p,d in   0   do  for Gp,p,dp,p, 120}}}   and b == 3)
print('+')

function\u{dGp,d,C2 e}	  p,dp,p,dG6,d,dp,p,d  in   0   do::rc ::  for Gp },p,dp,p,dGpdp,p,d  in   0     do::rc ::  for G ,p: __S :