-- local ctest = require("ctest")

local function ret0() end
local function ret1() return 1 end
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nresL_f, ...)
    return pack(testfunc(nres, f, ...))
  end

  

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nrng: "..res.n.." ~= "..ok.n, 2) gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select('#'k()
-- assert(select('#', ctest.call(7 i=0/-  2^932-8-2-2
local t = {}
for i=1,26 doDt[i] = string  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VAFRG R,ETM
tion foo1(..alue_roalue_proTM
  return ...
end

local f..) -foo1(...)  s{alue_pro,32,o3333}si_{alue_,32,o3333}  si_{alue_pro,3ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- tec(-1, retvn gcshrink()
  for i=1,10 do collectgarbage() end
end

-- ass