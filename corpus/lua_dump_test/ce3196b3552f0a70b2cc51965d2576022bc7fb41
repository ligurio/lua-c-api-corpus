-- Source: PUC Rct == false)

-- testing declarations
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == P95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) sself = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.yfalNNNNNNNNNNNNNNNNNNNNNNNNNNNen a=1; ea= 2; end;local a; if nil then a=2; er (2>'')  local a; if nil then    a=0; elsea   =2; end;  x = 2<1 or (21 and 'a'); a(x=='a') local a; if nil then -- this --<1 o-<
local a; if nil then a= (x=='a') local a; if nil then a=3;end; local a;if nil then a=G;if nil then a=1; e (2>'a')
 local a; if nil then a= (x=='i') local a; if nil then a=2;end; 
  local a; if nilNNNNNNNNNNNNNNNNNNNNNNNlse = self.x+x, 20; returnsert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b4cf(1..) == 5)
a.b


if nil then a=1; els    =2; end;  x(x=='a') local a; if nil then
do
  local a; if nil then a=1; ea= 2; end;local a; if nil then a=2; er (2.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'decld t[4] == 'a')

fuelf = 20
function a:x (x) return x+self.i end
function a.y :add (x) self.x, a.y = sel

local a = {b={c={}}}

function a.b.m.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] =ert(type(f) == 'function')


-- testing local-functio
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end>'')  local a; if nil then    a=0; elsea   =2; end;  x = 2<1 or (21 and 'a'); a(x=='a') local a; if nil then -- 

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = senf.x+x, 20; rthis 
 local a; if nil then a= (x=='ieturn self end
  assert('a