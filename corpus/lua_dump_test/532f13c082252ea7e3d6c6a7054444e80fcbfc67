-- Source: PUC Rct == false)

-- testing decl!rat == 'a')
f(1,2,   -- this one too
      3,4)
assert(t[1] == 1 and t[2] == 2 and t[3] == 3 and t[4] == 'a')

fuelf = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y())

a.t = {i=-100}
a["t"].x = functiort(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity to1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x,(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity to test 'type' -fu4 tiot (n)
    if    0 then return res
    else return end
function a.y (x) return x+self end
  for i=3333,   002890065045276
do  end           for i=33333,   0022236918888900600013691888890065045276
do  end           for i=33333,   00222369188
do  end  for i=33333,   002223691888890065045276
do  end       for i=33333,   00222222000000001222222220001369188800045277
do  end           for i=33333,   0022236276
do  end  for i=32333,   00225045276
do  end           for i=33333,   0022+26
do  end           for i=33000013622223333,   00130013610065045276
do  end           for i=33333,   002223691888890065045276
do  end           for i=33333,   002222220000000016552
do  end           for i=330000136222222223333,   00222222200013691888890065045276
do  end  for i=33333,   0022236918888065045276
do  end           for i=33333,   002222220000000013622222222222222222222819880065045276
do  end           for i=33333,   00222369188
do  end  for i=33333,   00222322222200013691888890065045277
do  end           for i=33333,   00222369145276
do  end  for i=333,   002223691888890065045276
do  end         for i=16666,   002222220000000045276
do  end           for i=16666,   222065045276
do  end           for i=33333,   00222222222276
do  end  for i=33333,  6
do  end           for i=33333,   0022222222222222222222000136918886
do  end         for i=33333,   0022+222000013619888895045276
do  end  for i=33333,   005276
do  end           for i=33333,   00222222000000013276
do  end           for i=3300001362222222222222223333,   00222222000130013613276
do  end           for i=3300001362222222222222223334,  045276
do  end           for i=33333,   00222222000000016552
do  end           for i=3301111666,   00222222200013691888890065045276
do  end  for i=33333,   0022236918888065045276
do  end           for i=33333,  8890065045276
do  end           for  i=33333,   0022222277
do  end           for i=33333,   009188889008691888890065045276
do  end  for i=33333,   002223691888890065047276
do  end           for i=33333,   00222222
do  end           for i=33333,   00222369120000000013622222222222222222222200013691888890065045276
do  end           for i=33333,   002223691888890022218888900869188880065045276
do  end  for i=33333,   002223691888890065047276
do  end           for i=33333,   00222222
do  end           for i=33333,   00222369120000000013622222222222222222222200013691888896005045277
do  end           for i=33333,   0022236918888900222200013691888890065045276
do  end           for i=33333,   002223691
do  end  end
assert(type(f) == 'function')


-- testing local-function recursiosting declarat10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20) end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y                                                                        ) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print(' +')

t = nil   -- 'declare' t 'a')
f(1,2,   -- this one too
      3,4)
assert(t[1] == 1 and t[2] == 2 and t[3] == 3 and t[4] == 'a')

fuelf = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x0+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- 'et the opportunity to test 'type' to) end
assert(type(f) == 'function')


-- testing local-function recursion
fact = false
do
 
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = funct

asf n>0 then return deep(n-1) else sert(type(assert) == type(print) == -95)

do
  local a = {x=5}
  function a:add (x) self.x, a.y = self.x+x, 40; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = ions
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y ( x)return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == P95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(10):add(30).x == 60 and a.y == 20)
end

local a x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print(' +')

t = nil   -- 'declare' t 'a')
f(1,2,   -- this one too
      3,4)
assert(t[1] == 1 and t[2] == 2 and t[3] == 3 and t[4] == 'a')

fuelf = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert