     nputs''  nputs'''''''''''U#'''''''''''''''''''''''''i''k    '''''''''''''''''''''''U#'''''''''i''   '''''''''YXXXXXX[U#'''''''''i''k    '''''pppppppr        pp~   pCCCCCC2CCCCpppxppp	ppppppppppps and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a enCd
assert(t[1]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'" 

  ::a:: do goto a; ::a:: end -- Forward j7mp, not an infin= i +01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  as = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a; do break e(#.8-nd", "break")

  -- Errx; ::a)

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trail prel k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a;}do ::a:: end", "'a'")
  expect("break", "brea:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Bretil fa0B11111ssert(foo() == true)
end

dif r or r or-l  or r-#l  or r0  or#l  or r0  or-l     or-l  or r o --- F}  i =assert(t[2]() == 2 local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if kor r or-l or r or-   -l  or r or r or l  or p or-l     or-l    or r or-l     th < 2 then goto foo end
een   elnd

do --- Break resolv'x'")

  ::a:: do goto a; ::a:: end -- Forward!jump, not an infinido --- Traif r or r or-l  or r-#l  or r0  or#l  or r0  or-l     or-l  or r or r or-l or r or-   -l  or r or r or l  or p or-l     or-l    or r or-l     then   elseif fl   then  elseif ll, even if closure is pi =assert(t[2]() == 2 local x
 ::foo::   local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolv'x'")

  ::seif fl   then  a:: do goto a; ::a:: end -- Forward ju"\u{56F}  ielseif  = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
                                  assert(t[2]() == 2)
end

do --- BreaNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
 
  if k < 2 then goto foo end
end

doct("do ll