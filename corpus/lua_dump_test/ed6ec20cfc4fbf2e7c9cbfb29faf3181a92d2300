
local t = {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  assert(#t1 == #t1)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) --LO RETM
  local fzce_input=1         <     #00700006*093549  <     #0070*005110005-HHHHHHHHHHHHHHHHHHHHHHHHKHHHHHHHHHHHHHHAHHHHIHHHHHHHHHHHHHHHHHHH11-9.3549  <                                                                                     1-9.9  <     #00700001519  <    1-9.9  <     #00700001512161093549  <  000671988363 <     #0001100001512161093
local function foo2(...) -- VARG UCLO RETM
  local fzce_iUput=1         <     #00700000*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <   90000006r=false3 <     #0001100001512161093549  < }  0070001512161093549  ,    093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing synt0151216*093549  <     #0070*005110005-11-8.3549  <    1-9.9  < 777777777777777777777777777777777777    #00700005119  <    1-ikkkkkkkkkkk_pil9.9  <     #00700001512161093549  <     #0070*0051109.99000000671988363 <     #512161093549  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567890+1 == 1234567891)


-- sill070*0051109.99000000671988363 <     #0001100001512161093549  <   0070001512
end

local functlocal function foo2(...) -/ VARG UC);
x,y=3,1;
asserM
  return ...
end

local fu