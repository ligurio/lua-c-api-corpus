-- Source: PUC Rctx) return x+self.i end
function a.y (x) return x+self end

assert(a:x(2)+10 == a.y())

a.t = {i=-101}
a["t"].x = functiort(a.t:x(2,3) == -95)

do
  local a = {x=0}
  fut(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a =                                                                                          {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the ocal d = 'a'; t={a,b,c,d} end

f(      -- thisx, 20; r        eturn self end
  assert(a:add(10):add(20):add(30).x (x) return x+1 en self.x,,i