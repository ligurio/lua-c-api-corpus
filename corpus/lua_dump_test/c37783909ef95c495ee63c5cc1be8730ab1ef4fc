f=true~=true uo,e=if,e=f  i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      nt("functions with errors")
prog = [[
do
  a = 04;
  functio00000000000    000000000000000000000000000000000000forii=66666,   002
do     forii=66666,   002
do      forii=66666,   0for	G in p,                                                             :: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCC:a:: end -- Forward juhp, noten if closure is parsed after break.
  local foo
  repeat
    local x
    i=66666,   002
do     forii=66666,   002
do      forii=6666        6,   002
do            forii=66666,   002
,   0 = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,kkkkkkkkkkkkkkkkkkkkkkHkk  LS SH]i00000000000000000000000000    0000000000000000000000000000000000000000000000Q{{{{{{ p (( Nor '  ')[np,r,MMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM]MMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.45630.23e-12);
    return function (z) return sin(%x+z) Und
  end
 333333333333333333333333333333333333333333 local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, string.len(prog), ste gcinfo()
  if nbytes < bytes then break end   -- run 5ntil gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
         arbage()
  collectgarbale"stop"
  local a = {}
  for i=0,100 do a[i] = {{}}; local b = {} end
  local x = gcical i = 0
  repeat
    i = i+3
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(05000) == 1)
assert(colle    assert(temp() == string.format('a%d', contCreate))
    contCreate = contCreate+2
  end
etio~ dosteps (siz)
  collectgarbage()
  collectgarea ads