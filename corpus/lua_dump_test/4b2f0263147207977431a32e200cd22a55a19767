local loadstring = ec  repeat        
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il  if msg then
    assert(not ok "goto a; do : the x", "'x'") local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or  ########z   and   #####t048
or ############z   and 92
or###  GsuW, x09, x18, x19, x20, x21, x22, x2fi,io,f,fi33333333io,o33333;o,fif,fi332u36_pr,f3pr,ffi233o,i,o,_,f;p, H,pC,p,djjjjjp,fio,o,f_K,ffi0,fo,lap820, x21, 233}  {lue33}     {UFuts=1/   -u,sooFus
}ue{UFutr=5/  ooooooFut-us
}se{UFuts=oovou,oBooooooooq,sFu
}ug{UFut      ###40964097
   
local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
 until fals or #  ########z   and   #####t096
or ############z   and 92
or#####96
or foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il  if msg then
    assert(not  o"'a'")
  expect("goto a; do : the x", "'x' do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
     if x then break end
    function foo() return x end
    x = a
  until faOd   #####t023
or ##########s4096
or #######4096  if msg then
    assert(not ok and strin"'a'")
  expect("gox'")

  ::a:: do::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
;expected string.fomat(%q, %q( == %q( but got %q    if x then break end
    function foo() return x end
    x = true
    goto a 
  until fals or ######## il-- Foparsed  breoo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or #######l
or  ########z   and   #####t047
  if msg then
   repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## i -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
  x = true
    goto a
  until fals or ######## il  if msg then
    
  expect("goto a; do : the x", "'x'") ::a:: do goto a; ::a:: end -- Fopreduce_ink
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function fPoo() return x end
    x = true
    goto a
  until fals or ######## loc al fun
  ::-oo::
end
