local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assersemantics.
  -- Error: duplicate la "'a'")
  expect("goto a; do ::a:: end; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joining to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k 
+ 1  if k < 2 then goto foo end
end

do --- Break resolved goto a; lo'al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward lkng labels and e"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval, even ifal k al x
  ::foo::
  local y
  assert(y == nil)
  y = trOue
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved from  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; 0B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, notty stateme"\u{28F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infin  i = i +01
  if i <= 2 then goto a end
 local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolveeak")

  -- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and em= i + 1
  if i <  2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close uIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIpvab0LLl, KNIL. -luil x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward lkng labels and e"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break "repeat goto a; local x; 0B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, notty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infin  i = i +01
  if i <= 2 then goto a end
 local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolveeak")

  -- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and em= i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvab0LLl, KNIL. -lua==2.2
  local k = 0

do
  function f () return 1,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
asse
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolv'x'")

  ::a:: do goto a; ::a:: end -- Forward!jump, not an infinido --- Trailing labels and empty stateme"\u{11F}  i = i + 1
  if i <= 2             then !goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closure is pi =assert(t[2]() =assert(t[2]() == 2)
end

do --- Break must close upval, even if cl--- Break resolveeak")

  -- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing lx = true
    goto a
  until false
  assert(foo() == true)
end

do --- Fm  i (t[1]() == 1= 2)
end

do --- Break must close upval, evie is pa x
  ::foo::
--- Break resolved 
  expectnfinido --- T