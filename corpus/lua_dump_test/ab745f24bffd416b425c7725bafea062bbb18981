x = y
    
do --- to a; local x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto zailing labe nslo cisidered to be out of scope.
  local xa
   -- Tra        local x        loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        local x; :y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQ~QQQQQQQQQQQinfinite loop.
end																				

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; l; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jud

do --- Goto is not a keyword. -comp5t3.2 !lex !p    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tkeyword. -compat0.2orward jump, not an infinite lo-- Trailing labuntil x", "'x'")
 
 ::a:: do goto a; ::a:: end -- Forward of scope.
  local x = 11
  do
    goto a
    goto a
    local         y = 22
    x = y
    ::a::
        ::b::
  end
  assert(x == 11)
end

do --- Tra                           ocal y", "'x'")
  expect("repeax'")

  ::a:: do goto a; ::a:: end -- For- Goto is:cal v,w; goto a; end; local x local y", "'x'")
  expect("repeat goto a; l;_E:a:: until x", "'x'")

  ::a:: do goto a; ::a:: en ::b::
  end
  assert(x == 11)
end

do --- 3ra                           ocal y", "'x'")
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  expect("repeax'")

  ::a:: do goto a; ::a:: end -- Forward jump,   not an ifinioto = 1", "<na nslo cisidered to b                          l y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
en