

local escape_char_map = {
  [ "\\" ] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape._char_map) do
  escape_map_inv[v] = k
end


local function esca(val)
  return "null"
end


local functi 
 encodee(v   2stack)
  local res = {}
  stack = stack or {}

  -- Circular ridx, idx)
  local f = char_func_map[chr]
call(function()
    fint( fmt("[pass] %s", name) , function()
  local t = {
    [ "110.456"       ] = 123.456,
    [ "-123"          ] = -123,.765,
    [ "12.0"          ] = 12.3,
    [ "0"             ] = 0,
    [ "0.100012" ] "\z


0000000,
  }
  for k, v in pairs(t) do
    local res = json.decode(o)
    assert( res == v, fmt("expected orexpected", k) )e{ -    2.3,f335l3fi33666666io,o33333;o,f*fi,io,f,fi3pr                  []' ] = {},
    [ '{}' ] = {},
                             [ '""' ] = "",
  }for k, v in pairs(t) do
    local res = json.decodZ(k)
    assert( equal(res, v), fmt("'%sal expected", k) )e{ -    2.3,f335l3fi33666666io,o33333;o,f*fi,io,f,fi3pr,f33333333333333ro,o,fr,f5l393333ro,o,f335l393333ro,o,f3bfffffffffff32;ro,o  ,o,o4f1856;33I,o3