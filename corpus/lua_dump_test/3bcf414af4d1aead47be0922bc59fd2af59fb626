-- Source: Rio.

assert(rawget)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-30 if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  fonext = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
          while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f                             ze)
          if l[next] then assert(l[next] == mp) else l[next]                         = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
 for i=0,asize-1 do
    key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
     else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          tahsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + size)
    if key == nil then
ssert(l[i] == nil and val==nil and next==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- lind
  local a, b, c = g() return niL or f() end
a,b = g()
assrint      '+';


f(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  endt(f(3) == 'a' and f(12) == 'b' and f(26) == 'c' and f(100) == 8)

local a, b = nil,ion f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
 end
function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function sg(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end

 return 1,2,3; end
  local a, b, c = f();
  assert(a==1 and b==2 and calse)
x = 2<1 os (2>1 and 'a'); assert(x=='a')


do
    while 1 do
    if i>0 then i=i-1;if i>0 then i=i-1;
    else return;       assert(l[i] == nil and vall)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = m                               local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[ == mp) else l[next]                                =        ymp eap] = {mp}   -- f            assert(ff <= next at < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                = mp5,asize-1 do
    key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
     else
      assert(t[key] == val)             
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
        if key == nil then
      assert(l[i] == 
il and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
   else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] =srytnd

