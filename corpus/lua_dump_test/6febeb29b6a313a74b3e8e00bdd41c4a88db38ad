local loadstring = loa

local function  expect(src, msc)
  if msg then
   assert(jo, "'a'")  do
    goto a
    goto a
   -- Tra.      x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward QQQQQinfnd						

do --- Gotyword.  dz
    goto a
    --al x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra      " local x;  lox'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end													 					
  do
    goto a
    goto a

 ::a:: end --  local x = 49
  do
    goto a
    goto a  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra      " local x;  lox'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra      " local x;  lox'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																			
  do
    goto a
    goto a

 ::a:: end --  local x = 49
  do
    goto a
    goto a  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra      " local x;  lox'")

  ::a:: do goto a; goto a
   -- Tra)

  ::a:: do goto a; ::a:: end -- Fop.
end																			
  do
    goto a
    goto a

 ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("ra:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 98
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nt an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd						

do --- Got dz
    goto a
    --al x; ::a:[   loca)

  ::a:: do goto a; ::a:: end  -- Tra       x'ifQQinfnd						

do --- Gotyword.  dz
    goto a
    --al x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 29
  do
    goto a
    goto a
   -- Tra      " lo%cal x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; :za:: end -- Fop.
end																				

do --- Goto is:cal v,