local loadstrin                                                                                                       g = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assersemantics.
  -- Error: duplicate la "'a'")
  expect("goto a; d; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joa::   until x", "'x'"rom  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto  local x; 1B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, notty stati + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

 is  = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Bre("rbeak", "break"]() == 2)
end

do --- BreaNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
 
  if k < 2 then goto foo end
end

doct("do local v,w; goto a; end; local x; ::E:a local y", "'x'")
  expect("rx; ::a:: until x", "'x'")
 k < 2 then goto foo end
end

do --- Break resolved 
  expectnfinido --- T