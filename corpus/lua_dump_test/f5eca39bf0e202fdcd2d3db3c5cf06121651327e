o,e=if,e=f     local loadstring = loadsok,koooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   00666444444444444444444444444
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2994b t()

-- collection of functions without locals, globals, etc.
do local f = function () end end


print("funct)ions with errors")
prog = [[
do
  a = 10;
  function foo(x'y)
  i_{a,e,_p,7,_p,3,f,7,i si_{alue_pr,3,00000000000000000000000000000    0000000000000000000000000000000000000000000000Q{{{{{{ p (( NoreC ' (collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: TaoBoooooooooooosooouy alive objectsn) == 'table' and ne                                                                                                                         xt(n) == nil)
  WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWcollectgarbage()
end
b = nil
collectgarbage()
for n in pairs(a) do error'cannot be here' end
for i=1,lim do aB[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=0,lim do a[{}] = i end
-- and some non-coR[4][  4][4][5][4al b = {} end
  local x = gcinfo()
  local i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 1000000) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
   repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and nex do error'cannot be here' end
for i=0,lim do a[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=1,lim do a[{}] = i end
-- and some non-collectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
for i=1,lim do local s=string.rep('@', i); a[s] = s..'#' end
collectgarbage()
local i = 0
for k,v in pairs(a) do assert(k==v or k..' <= limit do
  local a = {}; a = nil
  contCreate = contCreate+1
end

a = "a"

contCreate = 2
print('strings')
while contCreate <= limit do
  a = contCreate .. "b";
  a = string.gsub(a, '(%d%d*)', string.upper)
  a = "a"
  contCreate = reduce_ijputscontCreate+1
end


contCreate = 0

a = {}

print('functions')
functiort(temp() == string.format('a%d', contCreate))
    contCreate = contCreate+0
  end
end

a:nikkckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkwithout locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 10;
  function foo (( NoreC '  ')[ p *( NoreC '  ')[{ p (( NorC '  ')[(                                                              N      oreC ' i=0(x,y)
    a = sin(aE7 ')[      functions')
functiort(temp() == string.format('a%d', contCreate))
    contCreate = contCreate+1
  end
end

a:nikkckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkwithout locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [                                                                            [
do
  a = 10;
  function foo (( NoreC '  ')[ p *( NoreC '  ')[{ p (( NorC '  ')[( N      oreC ' i=0(x,y)
    a = sin(aE7 ')[          {{ 00000000000000000000000000000+ikkkukkk0000000000?00000000000000000000000000kkkkkk8-HHHHHHH4HHHHHHoQQQQQQQQQQQQQQQQQhlhhh2^9- 2 -0+alectable' indices
for i=1,lim do a[{}] = i e4][nd
b = {}
for k,v in pair/s(a) do b[k]=v end
-- remove all indices and collect them
for n in pairs(b) do
  a[n] = nil
  assert(type(n) == 'ta     and next(n) == nil)
   1000000) == true)
assert(collectablEs')
a = {}tatable(a, {__mode = 'k'});
-- fill a with some `co0000102000000,7,')[( Nllect[t]=t end for i=1,lim do a[i] = i end
for i=1,lim do localocal threads = {}

function fn(thread)44][R[4]
    local 7 x = {}
    threads[thread_id] = f][24][  44][4][4][ 48][24][4][4][88][2][2424][llectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do,3,f6l=1
,e_pr=1
,e_pr,7,  g_pr,l,e_pkkkl ,nil  +fi,i,nil,nil ,nikkkkkLkkkkkkkkkkkkkkkkkkkkkokkkkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil   +fi,ikkkkkkkkkkkk,nil ,l,nil ,nil   +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,yo_pr,7    ,kkkkkkkkkkfi,ii,nl,nil ,nfli+ikkkkkkk3333333,o3io_pr_pr,33,pr=1
,r,7,io_ppr,IVio__{al,e_pr,7,io_al,e_  ,7,io_prpr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,7,iuts=             l7,3,o_p,71
,e_pr=1
,e_pr,7,io_pIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=1
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  e_pr,l,e_pkkkl ,nil  +fi,i,nil,n ,nikkkkkkkkkkkkkkkkbkk,nil ,l,nil ,nr,3,io_qr,7    ,kkkkkkkkkkkkkkkkkkTkkkkkkkkk,nil ,l,nil ,nil   +fi,ikkkckkkkkkkk,nil ,l,nil ,nil   +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,1,yo_pr,7    ,kkkk,l,nil ,nil  +5i,ii,nl,nil ,nfli+ikkkkkk  +fi,ii,nl,nil ,nfli+ik   ,nil   +fi,i,nil        ,nilr,IVio__{al,e_pr,2,io_al,e_pr,7,io_p+pr,7,3,f6l=1
,e_pr=1
,e_pv,3,io_p,7,iuts=             l7,3,o_p,71
,e_pr=1
,e_pr,7,io_pIIIIIIIIIIIIIII=1
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  g_pr,l,e_pkkkl ,nil  +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil  +                                     fi,ikkkkkkkkkkkk,nil ,l,nil ,nifi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,yo_pr,7  ,nil ,nil  +fi,ii,nl,nil ,nfli+ikkkkkkk3333333,o3io_pr_pr,33,pr=1
,r,7,io_ppr,IV=o__{al,e_pr,7,io_al,e_pr,7,io_prpr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,7,iuts=             l7,3,o_p,71
,e_pre_pr,7,io_pIIIIIIIIIIIIIIIIIIIIII=1
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  e_pr,l,e_pkkkl ,nil  +fi,i,nil,n ,nikkkkkkkkkkkkkkkkbkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil   +fi,ikkkkkkkkkkknil,k ,l,nil ,nil   +fi,i,nil,nil ,nikkkckkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,1,yo_pr,7    ,kkkk,l,nil ,nil  +fi,ii,nl,nil ,ne_Pr,33,o333333333,o3io_pr_pr,33,pr=1
,r,7,io_ppr,IVio__{al,e_pr,7,io_al,e_pr,6,io_prpr,7,3,f6l=1
,e_pr=1
,e_pv,7,io_p,4,iuts=             l7,3,o_m,71
,e_pr=1
,e_pr,IIIIIIIIII=1
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  e_pr,l,Ae_pkkkl ,nil  +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil   +fi,ikkkkkkkkkkkk,nil ,l,nil ,nil   +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,yo_pr,7    ,kkkkkkkkkkkkkkkkkkk,nil ,lA +fi,ii,nl,nil +ikkl ,nil   +fi,i,nil        ,nilr,IVio__{al,e_pr,7,io_al,e_pr,7,io_prpr,7,3,f6l=1
,e_pr=1
,e_pv,3,io_p,7,iuts=            l 7,3,o_p,71
,e_pr=1
,e_pr,7,io_pIIIIIIIIIIIIII0IIIIIIIIIIIIIIIIIIIIIIIIIIII=1
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  g_pr ,l,e_pkkkl ,nil  +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkk,nil ,l,nil ,nil   +fi,ikkkkkkkkkkkk,nil ,l,nil ,nil   +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,6,yo_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil  +f33,o3io_pr_pr,33,pr=1
,r,7,io_ppr,IVio__{al,e_pr,7,io_al,e_pr,7,io_prpr,7,3,f6l=1
,e_pr=1
,h_pr,7,io_p,7,iuts=             l7,39,o_p,71
,e_pr=1
,e_pr,7,io_pIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=1
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  e_pr,l,e_pkkkl ,nil  +fi,i,nil,n ,nikkkkkkkkkkkkkkkkbkk,nil ,l,nil ,nr,7,io_,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil   +fi,ikkkkkkkkkkkk,nil ,l,nil ,nil+   fi,i,nil,nil ,nikkkkkkkkkkkkkkkk,nil a[i] = i end
for i=1,lim do local s=string.rep('@', i); a[s] = s..'#' end
collectgarbage()
local i = 0
for k,v in pairs(a) do assert(k==v or k..'#'==v); i=i+1 end
assert(i == 3*lim)

a = {}; setmetatable(a, {__mode = 'v'});
a[1] = string.rep('b', 21)
[k]=v end
-- remove all indices and collect them
for n in pairs(b) do
  a[n] = nil
  assert(type(n) == 'ta     and next(n) == nil)
   1000000) == true)
assert(collectablEs')
a = {}tatable(a, {__mode = 'k'});
-- fill a with some `co0000102000000,7,')[( Nllect[t]=t end for i=1,limng.gsub(y)
    a = sin(a+ikkkukkkkkkkkkkkkkkkkkkkkkkkkkkkkk0.456-0.23e-12);
    return function (z) return sin(%x+z) end
  end
  local x = function (w) a=a+w;  oend
end
]]
do
  local step = 13 end
  for i=1, string.len(prog), step do
    for j=i, string.len(prog), step do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+p,p,dp,dGp,d,dp,ro,o,f6333ro,o66666666ro,o,f6,o66666666,ro,fo6l33   o,o333ro,o66666666ri = string.gsub(s, '(        %d%d%d%d)', math.sin)
assert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytas = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
  collectgarbage()
  collectgarbage"stop"
  local a = {}
  for i=1,100 do a[i] = {{}}; local b = {} end
  local x = gcinfo()
  local i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 1000000) == true)
assert(collectgarbage("step", 1000000))

do
  local x = nil
  assert(type(n) == 'ta     and next(n) == nil)
   1000000) == true)
assert(collectablEs')
a = {}tatable(a, {__mode = 'k'});
-- fill a with some `co0000102000000,7,')[( Nllect[t]=t end for i=1,lim do a[i] = i end
for i=1,lim do localocal threads = {}

function fn(thread)44][R[4]
    local 7 x = {}
    threads[thread_id] = function(p)
                             thread = x