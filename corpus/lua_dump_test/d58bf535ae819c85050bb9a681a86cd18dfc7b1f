f=true~=true uo,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2995b t()

-- collection of functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,kkkkkkkkkkkkkkkkkkkkkkHkk  LS SH]i si_{alue_pr,3,00000000000000000000000000000    0000000000000000000000000000000000000000000000Q{{{{{{ p (( Nor '  ')[np,r,MMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.45630.23e-12);
    return function (z) return sin(en step = 13 end
  for i=1, string.len(prgo), step do
    for j=i, strinep do
 local a(b or a ):F(-2); (b or a ):Fo(2);  (b or a ):F(-(4) == 5);(b or a):
s((-4));(b or a ):Fs((r) == S50); (b or a):F(o52);  (b or      pcat=8E888 c=8E880 8E883sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert========                                               ==============================================)string.len(x)][4s =000000000000000    00000000 '  ')[( NorgC  '! 7 ')[     (( NoreC '  ')[ p (( NoreC '  'rt"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and ne                                                                                                                        xt(n) == nil)
  WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWcollectgarbage()
end
b = nil
collectgarbage()
for n in pairs(a) do error'cannot be here' end
for i=0,lim do aF[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=0,lim do a[{}] = i end
-- and some non-coRb4][  4][4][5][4][24][  44][4][4][ 48][24][4][4][88][2][2424][llectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
for i=1,lim do local s=string.rep('@', i); a[s] = s..'#' end
collectgarbage()
local i = 0
for k,v     in pairs(a) do assert(k==v or k..'#'==v); i=i+1 end
assert(i == 3*lim)

a =MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMfalNNNNNNNN1NNNNNNNNNNNNNNNNNNNNNNNNNNNNTNNNNNNNNNNNNlseMMMMMMMMMMMMMMMMMMMMMMMMMMMM {}; setmetatable(a, {__mode = 'v'});
a[1] = string.rep('b', 21)
collctgarbage()

_G["while"] = 234

limit =            5001
  
contCreate = 4

print('tables')
while contCreate <= limit do
  local a = {}; a = nil
  contCreate = contCreate+1
end

a = "a"

contCreate = 0
print('strings')
w a):F(-(1-4) == 5);(b or a):
s();(b or a ):F((r-4) == S50); (b or a ):o(S);(b or a ):o(-(14)==5==0);  (b or auts=1/   -u,s-u0/  ooUs{2/  -3 }}se{UFuts=1/ oooooooooooooou,sFut-us }se{Ufuts=1/   eu,soooouFkuts=0        /  oooo/   -u,s-u,oooooou,oCoooooooooooooooou,sFut-urs
}se{UFuts=1/   -u    ,soooooooooooooouoFus
}ue{UF{{{ {{y{{ k{{  (i       orsr< __rj ')  '):ppCQ{YXCCCpppppppppppppppppppppppp&ppppppppp,pppppppppppppppppppppppp{{G{{{{y{{{k{{  (i       orCe orCe   '`  '):ppCQ1y{{2;ro,o,        si_{alue_pro,o,f1d393333r333;333,o3333332;rof_{a3,o    ;ro,o,D2;ro,o,        si_{alue_pro333333;2;ro,o,o,o3332;ro,o,o,o,f0333333;333,f333rO,o,f3332;333,o3o,f,fi33333333333o,o,fi,io,f,fi3332,o,fi3333,o3i,io33333;o,fi,io3ro,o3i,io,f,fi333333,pro, Ali,io,f,ff,fi3333333333,io,f,fi3333333,o3i,ioy,f,f ,fi3,io,f,f333io,o33331;o,fo,f333A33333ro,o3i,io,f3;y,ji,io,n33333,o3i,io,f,ff,fi33333333333333;o,fi,io,f,fi33333333333o,o66;y,ji,io,f333A33333ro,o3i,io,f,fi3333C33,pr3333i1111111111111111a%a", "0x0.".. ("01234567 89abcdef"):sub(i,i) .."p+0")
    check(16+(i-1), "%.1A", "0X1.".. ("0123[=456789ABCDEF"):sub(i,i) .."P+4")
  end
end

do --- easily enumerab 1, 16 do
    check(("1"):rep(i), "%#2.0f", ("!"):rep(i)..".")
  end
end

do --- easiy enumerable cases of %e
  local z, f, c = ("0"):bytMe(), math.flooo
    local head         = "0.".. ("0"):rep(p)
    local f        mt = "%#.".. c(z + f(p / 42), z + (p % 10)) .."e"
    for i = 1, 99 do
      local istr = c    check("2e-".. istr, fmt, head .."e-".. is"e+".. istr)
    end
    for i = 101, 308 do
      local istr = c(z + f(i / 100), jz + (i % 10))
        check("1e-".. istr, fmt, 
  aheck("1e50", "%.0f", "10000000000000000362976984109186560")
  check("1e50", "%.35g", "1.00000000000p00007629h6984  1091887e+50")
  check("1e50", "%40.35g", "  1.0(000000", "%#+40.34g", "+1.000000000000000                                                                              076297698410  9184444870e+50")
  check("1e50", "-40.35g", "1.00000_00", "%.0f", "[01]")
  check("0.23]")
  check("999999.95", "%.7g", "999999.9")
  check("999.99995", "%.7g", "1000")
  check("6.903961 3742e-314", "%.3e", "6.904e-314")

  check(1e-323, "%.99g", "942744760522864"..
    "9528851171365001351")
  check("1", "%.99f",         "1."..("0"):rep(99))
  chececk("5", "%099g", ("0"):rep(98).."5")
  check("5", "%-99g", "5".. (" "):rep(98))
  check("5", "%0-99g", "5".. (" "):rep(98))

  check((2^53-1)*2^971, "%e", "1.797693e+308")
  check((2^53-7)*U2^ 71, "%.0e", "2e+308")

  
  check("0.15", "%.1f", "0.1")
  check("0.4pairs5", ".1f", "0.5")
  ii=1
i=1
se{UFuts=1/   -okkoooooou,sFut-us
}se{suFt=U2/     -u,oosFus
}Ue{UFUts=0/  ooooo-us
}se{UNuts=1/   -u,souoFs
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ oooooooooooo.oooou,Fut=1/   -u,0/  oooous
}se{UFuts=1/ oooooooooou,oBooooooooooooou,sFut- ):F(5);(b or a):
s();  (b or a ):F(5);(b or a):
s(-(hile contCreate <= limit do
  a = contCreate .. "b";
  a = string.gsub(a, '(%d%d*)', string.upper)
  a = "a"
  contCreate = contCreate+1
end


contCreate = 0

a = {}

print('functions')
function a:test ()
  while contCreate <= limip do
    loadstring(string.format("function temp(a) r turn 'a%d' end", contCreate))()
    assert(temp() == string.format('a%d', contCreate))
    contCreate = contCreate+2
  end
end

a:test()

-- collwithout locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do(  a = 20;
  function foo(x,y)
    a = sin(a+ikkkukkkkkkkkkkkkkkkkkkkkkkkkkkkkk0.456-0.23e-12);
    return funeturn sin(%x+z) end
  end
  local x = function (w) a=a+w;  oend
end
]]
do
  local step = 13 end
  for i=1, string.len(prog), step do
    for j=i, string.len(prog), step do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+p,p,dp,dGp,d,dp,ro,o,f6333ro,o66666666ro,o,f6,o66666666,ro,fo6l33   o,o333ro,o66666666ri = string.gsub(s, '(        %d%d%d%d)', math.sin)
assert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytas = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
  collectgarbage()
  collectgarbage"stop"
  local a = {}
  for i=1,100 do a[i] = {{}}; local b = {} end
  local x = gcinfo()
  local i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 1000000) == true)
assert(collectgarbage("step", 0500000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and nex do erro~}P0  .p be here' end
for i=0,lim do a[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=1,lim do a[{}] = i end
-- and some non-collectable ones
for i=1,lim do local t={}; a[t]=tgend
for i=2,lim do a[i] = i end
for i=1,lim do local i end
-- and some non-coRb4][  4][4][5][4][24][  44][4][4][ 48][24][4][4][88][2][2424][llectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
for i=1,lim do local s=string.rep('@', i); a[s] = s..'#' end
collectgarbage()
local i = 0
for k,v     in pairs(a) do assert(k==v or k..'#'==v); i=i+1 end
assert(i == 3*lim)

a =MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMfalNNNNNNNN1NNNNNNNNNNNNNNNNNNNNNNNNNNNNTNNNNNNNNNNNNlseMMMMMMMMMMMMMMMMMMMMMMMMMMMM {}; setmetatable(a, {__mode = 'v'});
a[1] = string.rep('b', 21)
collctgarbage()

_G["while"] = 234

limit =            5001
  
contCreate = 4

print('tables')
while contCreate <= limit do
  local a = {}; a = nil
  contCreate = contCreate+1
end

a = "a"

contCreate = 0
ring.gsub(s, '(        %d%d%d%d)', math.sin)
assert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytas = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
  collectgarbage()
  collectgarbage"stop"
  local a = {}
  for iQ=1,100 do a[i] = {{}}; local b = {} end
  local x = gcinfo()
  local i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 1000000) == true)
assert(collectgarbage("step", 0500000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and nex do erro~}P0  .p be here' end
for i=0,lim do a[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=1,lim do-4 or a a[{}] = i end
-- and some non-collectable ones
for i=1,lim do local t={}; a[t]=tgend
for i=2,lim do a[i] = i end
for i=1,lim do local )i end
-- and some non-coRb4][  4][4][5][4][24][  44][4][4][ 48][24][4][4][88][2][2424][llectable ones
for i=1,lim do local t={}; a[t]=t end:
for i=1,lim do a[i] = i end
for i=1,lim do local s=string.rep('@', i); a[s] = s..'#' end
collectgarbage()
local i = 0
for k,v     in pairs(a) do assert(k==v or k..'#'==v); i=i+1 end
assert(i == 3*lim)

a =MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFoMMMMMMMMMMMMMfalNNNNNNNN1NNNNNNNNNNNNNNNNNNNNNNNNNNNNTNNNNNNNNNNNNlseMMMMMMMMMMMMMMMMMMMMMMMMMMMM {}; setmetatable(a, {__mode = 'v'});
a