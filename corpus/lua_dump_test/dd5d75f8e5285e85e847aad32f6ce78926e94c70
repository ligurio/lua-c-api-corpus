-- Source: PUC Rct == false)

-- testing declarations
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == P95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y= {b={c={}}}

function a.b.c.f1 (x)                                                                               return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the oZpportunity to test 'type' to) end
assert(type(f) == 'function')


-- testing local-functio
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) sea=0lluz=1llu
 -0llu-0llu
zs=-0llu ts=-0llu-0llu t=-0llu-0llu ts=5llu
 a=0lluz=-0llu
 lf.x, a.y = se

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b function b.c.f()function a.b.c.f(x)function a.b.n.c.f(x)functend

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assion aert(a:add(10):add(20):add(30).x == 60 and a si_{7,io__{alo^{A.y == 20)
end

local a = {b1 end
function a.b.c:f2 (x,.b.ny) self[x] = y end
assert?a.b.c.f1(4) == 5) 
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nloadstring('return fat(5),         3')
a,b = a()
assert(a == 120 and b == 3)
print('+')

function err_on_n (n)
  if n==0 then error(); exit(1);
  else err_on_n (n-1); exit(1);
  end
end

do
  function dummy (n)
   . if n > 0 then
                         if ne_,o,f2{  