 i=0/-  2^992-8-2-2
local t = {}
for i=1,26 do t[i] = string  for i=P,#t1 do assmert(t1[i] == t2[i]) end
end

local functction foo0(...) function foo3(...) -- V foo
end

local function foo1(...)  s{alue_pro_pro,32,o3333_,79, 3333}  si_{alue_32,o3333}     i_{alue_rpo,32,D3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o333}  si_{2,o3333} s{alue_pro,32, 3333}si_{alue_,32,o3333}  si_{alue_pro,32,o3}  si_{alue_pro,322,D3333}i_{alue_pro,16,o3333}  si_{alue_pro,32,o333}  si_{o,32,o3333}i_{32,o3333}  { 
    S32,o3333}      i_{33}  si_{alue_33333ro,o2i,io,f,fi3333333;y,ji,ifi233333ro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333o,3333333333;o,fi,io,f,fi33333333333o,o,fi,io,f,fi6666,o3i,io33333;o,fi,io,f,fi33333334io,o33333;o,fifi,io,f,fi333u33_pr,f33333333fi233o,i,o,_,f,p, H,pC,p,d,oO,i,o,_,o,r,C,ro,jjjjjjjjjp,fio,o,f_K,ffi0,fo,lap,o,o,i,o,3333;o,fifi,ooo93333=ro,o,f3f=2;ro,o,o,o4f1856;33I,o334l393333ro,o,f3332;reduce_inptGsuW, x08, x58, x19, x20, x21, x22, x2fi,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u34_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi3333C33,pro, Alf_K,ffi233o,i,o,_,f,p, H,pC,p,d,oO,i,o,_,o,r,C,ro,jjjjjjjjjp,fio,o,f_K,ffi0,fo,lap,o,o,i,o,3333;o,fifi,oooe_inptGsuW, x08, x18, x19, x20, x21, x22, x23, x24, x30, x26, x2728,y29, x30, x31, x32, x33, x34, x35, x36, local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basnd label semantics.
  -- Error: duplicate la "'a'")
  expect("goto a; do ::a:: end; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joining to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("gotoa        ; do al x; ::a:: local y", "'x'")
  expect("repeat goto a; lo'al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward lkng labels and e"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval, even ifal k al x
  ::foo::
  local y
  assert(y == nil)
  y = truOe
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved from the right scc)
  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; 0B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, not an inf        inido --- Trailing labels anx'")
  expect("repeat goto a; lo'al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward lkng labels and e"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval, even ifal k al x
  ::foo::
  local y
  assert(y == nil)
  y = truOe
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved from the right scc)
  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; 0B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, not an inf        inido --- Trailing labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infin  i = i +01
  if i <= 2 then goto a end
 local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolveeak")

  -- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and em= i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvab0LLl, KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a; do ::a:: end", "'a'")
  expect("break", "break")
  expect("if x then break end", "break")

  -- Era; local x; ::a:: until x", "'x'b)

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and empty stateme"\u{27F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must closenc osure is  = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a; do ::a:: end", "'a'")
  eect("break", "break")
  expect("i'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and emptyrailing labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() ==C1)
  assert(t[1]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'" 

  ::a:: do goto a; ::a:: end -- Forward j7mp, not an infin= i +01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close up6al, even if c)
end

do --- Label prto KNIL.o{0b1LL,0b0LL -lua 0==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a; do break e(#.8-nd", "break")

  -- Errx; ::a)

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trail prel k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a;}do ::a:: end", "'a'")
  expect("break", "brea:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Bretil fa0B11111ssert(foo() == true)
end

do --- F}  i =assert(t[2]() == 2 local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolv'x'")

  ::a:: do goto a; ::a:: end -- Forward!jump, not an infinido --- Trailing labels and empty stateme"\u{12F}  i = i + 1
  if i <= 2             then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closure is pi =assert(t[2]() == 2 local x
  ::foo::   local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolv'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an          --- iTgrianl labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- BreaNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
 
  if k < 2 then goto foo end
end

doct("do local v,w; goto a; end; local x; ::a:E local y", "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nop an infinido --- Trailing labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
 --- Trailing labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closure +is parsed after break.
  local foo
  repeat
    local x
     ::a::
    if x then break end
    function foo() return xQ end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- F}  i (t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, evifel nc osure is parsed aocal k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --:a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fonts joining to KNIL. _{a,r,75,7  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break rl v,w; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::aj:: end -- Forward jump, not an infin1idi =01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --A Break must close upval, even if local x; ::a:: until x", "'xd empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infin  i = i +01
  if i <= 2 then goto a end
 local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolveeak")

  -- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and em= i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvab0LLl, KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a; do ::a:: end", "'a'")
  expect("break", "break")
  expect("if x then break end", "break")

  -- Era; local x; ::a:: until x", "'x'b)

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and empty stateme"\u{27F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must closenc osure is  = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a; do ::a:: end", "'a'")
  eect("break", "break")
  expect("i'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and emptyrailing labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() ==C1)
  assert(t[1]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'" 

  ::a:: do goto a; ::a:: end -- Forward j7mp, not an infin= i +01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close up6al, even if c)
end

do --- Label prto KNIL.o{0b1LL,0b0LL -lua 0==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a; do break e(#.8-nd", "break")

  -- Errx; ::a)

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trail prel k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a;}do ::a:: end", "'a'")
  expect("break", "brea:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Bretil fa0B11111ssert(foo() == true)
end

do --- F}  i =assert(t[2]() == 2 local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolv'x'")

  ::a:: do goto a; ::a:: end -- Forward!jump, not an infinido --- Trailing labels and empty stateme"\u{12F}  i = i + 1
  if i <= 2    `__V     then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closure is pi =assert(t[2]() == 2 local x
  ::foo::   local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolv'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an          --- iTgrianl labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- BreaNIL. -lua==4.2
  lock + 1
  if k < 2 then goto al k = 0
  local x
  ::foo:x37, x38, x39, x40, x41, x42, x44, x45, x46, x47, x458, x49, x50, x51, x52, x53, x542,o3333}si_{alue_,32,o3333}  si {alue_pro,32,o333M_,3*2,o3333}  si_{alue_pro,32,os333}                                                     i_t(#t1 == #t2)
  for:
 
  if k < 2 then goto foo end
end

doct("do local v,w; goto a; end; local x; ::a:E local y", "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nop an infinido --- Trailing labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
 --- Trailing labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closure +is parsed after break.
  local foo
  repeat
    local x
     ::a::
    if x then break end
    function foo() return xQ end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- F}  i (t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, evifel nc osure is parsed aocal k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --:a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fonts joining to KNIL. _{a,r,75,7  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break rl v,w; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::aj:: end -- Forward jump, not an infin1idi =01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --A Break must close upval, even if local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and empty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  asser i=1,#t1 do assert(t1[i] == z2[i]) end
end

local functi    on foo1(.d
st(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must clcal x
  ::foo::
  local y
  assert(y =trin= nil)
  y = true
      k = k + 1
  if k < 2 then goto foo end
end

do --- g.char(9Break resolved 
  expect("goto a; do ::a:: end", "6+i'a'")
  expect("break", "bre) end

l