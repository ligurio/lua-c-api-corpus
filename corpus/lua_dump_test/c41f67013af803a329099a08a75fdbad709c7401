-- local ctest = requirturn 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result[ "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f,co)), true)
  ck(pack.." ~= "..ok.n, 2) end
reduce_inptGsuWW(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack( ~      testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, ret3))
  ck(cc1   (0,retva, 1, 2), 1, 2 = coend

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, lbh{8,7,3,st.call)
-- test_adjust_results(ctest.pcall_err)


local function g-cshrink()
  for i=1,10 do , 2) %nd
  for i=1,res.n do
    if res[i] ~= ok[i] then
      e2ror("result["..i.."] ffwrong: "..tostring(res[i]).." ~= "..tostrind
  end
end

local functi