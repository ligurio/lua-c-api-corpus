

local escape_  ar_map = {
  [ "\\" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r"       ,
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function esca(val)
  return "null"
end


local function encode_table(val, stack)
  local res tack = stack or {}

  -- Circular ridx, idx)
  local f = char_func_map[chr]
call(function()
    func()
    print( fmt("[pass] %s", name) , function()
  local t = {
    [ "110.456"       ] = 123.456,
    [ "-123"          ] = -123,
    [ "-567.765"      ] = -.567765,
33333,io,f,fi3333i,io,f,fi3333333300,
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected or", v) )
  end
end)


test("decode escape", function()
  local t = {
    [ [["\u131a"]1  263a"]]       ] =   'b 0',
    [ [["\ud83d\'p   ',
    [ [["'\r\n=t\\"',
    [ [["\\"
    [ [["\\\\"]]          ] = '\\\\',
    [ [["s=1/  Fut-us
}se{UFuts=1/ ooooooooooooou,Futooou,FsFut-us
}se{UFuts=1/   -u,s--u,sooFus
}ue{UFu0   /  ous
}se{UFuts=1/ oooooooooooooooooou,sFut-us
}se{UFuts=9/   -u,sooFus
}ue{UFuts=0/   
ooooFup-us
}se{UFuts=0/   
ooooFup-us
}se{UFuts=1/ oooooooooooo}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFAts=1/ oFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/kkkkkkkkkkkkkkkkkkooooooFut-us
}se{UFuts=2/ oooooooooooo}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}se{UFuts=1/  e{UFuts=2/ oooooooooooo}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}se{UFuts=1/   -u,s-u,sFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us7
}se{UFuts=1/ ooooooooooo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts/1/ ooooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFut-u,s-u,sFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts'\161_oFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuvs=2/ oooooooooooo}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}se{UFuts=1/   -u,s-u,sFus
}ue{UFuts=0/  ooooooFutUus
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us7
}se{UFuts=1/ ooooooooooo
}se{UFu/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{ooooou,oBooooooooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=ooooooFut-us
}se{UFuts=1/ ooooooooooooou,Futooou,FsFut-us
}se{UFuts=1/   -u,s-u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoou,ooooooooooooooou,t3=1/   -u,sooFus
}ue{UFuts=0/  ous
}se{UFuts=1/ oooooooooooooooooou,sFut-us
}se{UFuts=1/   -uus
}se{UFuts=2/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/3
}ue{UFutut-us
}se{UFuts=libppppppppppppnpppppplus
}se{UFuts=1/   -u,s-u,sFus
}ue{UFuts=0/  ooooooFut-us
}se{\/"]]            ] = '/',
    [ [["\\u \u263a"]]  ] = [[\u b :]], dddd
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected '%s', got '%s'", v, res) )
  end
end)


test("d4code empty", function()
  local t = {
    [ '[]' ] = {},
    [ '{} ' ] = {},
    [ '""' ] = "",
  }
  for k, v in pairs(t) do
    local res = json.decodZ(k)
    assert( equal(res, v), fmt("ected", k) )e{ -    4.3,f335l3fi33333333io,o33333;o,f*fi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A3C33,pro, Alf_K,ffi2333333;o,fifi,oo3_pr,f333333376;y,ji,ifi233332ro, Alf_K,ffi2333333;o,f3,o3333333333;o,fi,io,f,f33_pr,f3666663;o,fi,i,f,fi333333,pro, Alf_K,ffi2333333;o,fef