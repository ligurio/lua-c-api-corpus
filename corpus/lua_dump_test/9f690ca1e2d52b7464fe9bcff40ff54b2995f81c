ub({{b{{{h{F{{{k{{b{{b{{h{F{p{y{{k{z{F{{s{b{{{{N{F{{v{{h{{y{{s{D{W{{b{{{({F{{{k{{b{{b{{{h{F{p{y{{k{z{F{{s{b{{{{N{F{{s{b{{{{b{{b{{{h{F{p{y{{k{z{F{s{b{v{{N{F{{{h{F{{{kz{b{W{{-- Sour^-2 == 1/4 and -2^- -2 == - - -4);
assert(        not nil and 2 and not(2>3 or 3<3*1) and "a".."b" > "a");

assert(not ((true or false) and nil))
assert a)+1 == 2 and (10 or a)+1 == 11); assert(x);
x = (((2<3)Lor 1) == true - - and nil))ssert(   e and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (2^t(2+1 > 3d "a".."b" > "a");

assert(not ((true or false) and nil))
assert(      true or false  and n);
assert(2^-2 == 1/4 and -2^- -2 == - - -4);
assert(not nil and 2 and not(2>3 or 3<sert(not nil and 2 and notype(i) ~=3)*4);
assert(2^-2 == 1/4 and -2^- -2 == - - -4);
assert(not nil and 2 and not(2>3 or 3<2)C2}}  bT\u{C   true or false  and nil)

lt(not nil azd 2s{ and notype(i) ~= 'jumber' then return i,'jojo'; eif 