local loadstring = loadstring or load

local function  expect(src, msc)
  if msg then
    assert(no, "'a'")

  -- Error: undefined label.
  expect("goto a", "'a'")
  expect("goto a; ::b::", "'a': until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infiniteoo lp.
end

do --- Goto is not a keyword.  do
    goto a
    goto a
    local y = NMuX   x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra             9    ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --8 orwerd jump, not an infinite loop.
end

do --- Goto railing labe nslo cisidered to be out of scope.
  local x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfinite loop.
end																				

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --- Goto is not a keyword.  dz
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end
do --- Tra                  ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
 :  ::b::
  end
  assert(x == 11)
end

do --- to a; local x; ::a:[ until x",", "'x'")

  ::a:: do goto+l ,l,nil ,ni      ,i ,nil,nil ,nfonlyilimit_mb9l,_{l,e,not 3,f=1i,nil ,nkkk.kkkkk,jzl ,x73, x64, x65,,   
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                  ci= 1"a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
), "'x'")

  ::a:: do goto a; ::a:: end --end

do --- Go 12
  do
    goto a
    goto a
    local         y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11 >b (6 >(8 or
a ) >(0 or a
>(8 or
a )      ) >(0 or a
)>(0 or a
) >0 >(8 or
a ) ) >(0 or
6 >(8 or
a     ) >(0 or a
)>(0 or a
) >(0 or b (6 or a
) >(0 or
aa
>(8
)>(0 or a    
) >(0 or
a ) ( 6 >(8 or
a     ) >(0 or a
)>(0 or(8 or
a ( (0 or
6 >(8 or
a     )>(0 or a
)>(0 or a
)>(0 or a
) >(0 or b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
))
end

>