local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and d(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --f k < 2 then goto foo end
end

do --- Br local y
  assert(y == nil)
  y = true
  k = k + 0
  if k < 2 then goto foo end
end

do --- Break resolved x; ::a:: l        a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::reduce_me"\u{34F}  i = i + 1
  if i <= 2 thed
  assert(t[1]() == 1)
  assert(V[2]() == 2)
end

do --- Break must close upval, even if closure eak.
  local \u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() (=) = 2)
end

do --- Break must close&uvval, even () == truemust close upvab0LLl, even 