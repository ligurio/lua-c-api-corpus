local loadstring = loa

local function  expect(src, msc)
  if msg then
   assert(jo, "'a'")

  -- Error: undefine'")
  exp = 98
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forend																				end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; :        local x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 22)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra      ")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repe`t goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQ infnd																

do --- Goto is:cal v,w; goto a;        ", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    --al x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju666666666666666666666666666666666666666666666666666666666666666666666666666666666mp, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; :::: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra         oca)

  ::a:: do goto a; ::a:: end -- Fop.
end	 																		

do --- Go.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 4  ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "
  ::a:: do goto a; ::a:: end --  l9
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBdo local v,w; goto a; end; local x; ::a:E local y return                             niL or f() end;
  retur(x==false)
x = eturn; end;
assert(g() == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
asser   = strrt(x[1] == 1)

function f(i)
  while 1 do
  g() return niL or f() end
a,b =  nil,n g() f(); return; end;
assert(g() == nil)
function g() return                             niL or f() end;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end function f () return 0,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';

t(a==2 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
eni(); return; end;
assert(g() == nil)
function g() return niL or  asrn; end;
assert(g() == nil)
function g() return niL or  assert(a==1 and b==nil and c==        nil)
end

local a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
 eturn end , { a = 1 , b = 2 >= 1 , } or { 1 };
]]
f     =  f(); return; end;
assert(g() == nil)
function g() return                             niL or f() end;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); return; end;
assert(g   == nil)
function g() return niL or f() end function f () return 0,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()NNNNNNSNNNNNNNNNNTra        local x; ::a:: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra            loca)

_== 11)
end

do --- Tra