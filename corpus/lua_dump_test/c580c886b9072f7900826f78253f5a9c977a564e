local      ng = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basnd label semantics.
  -- Error: duplicate la "'a'")
  expect("goto a; do ::a:: end; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 0
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joi ngnito KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved goto a; lo'al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward lkng labels and e"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval, even ifal k al x
  ::foo::
  local y
  assert(y == nil)
  y = truOe
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved from the right scc)
  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do local --- Trail prel k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a;}do ::a:: end", "'a'")
  expect("break", "brea:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju\u{55F}  i = i + 1
  if i <= 2 then go11111ssert(foo() == true)
end

do --- F}  i =assert(t[2]() == 2 local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolv'x'")

  ::a:: do goto a; ::a:: end -- Forward!jump, not an infinido --- Trailing labels and empty stateme"\u{12F}  i = i + 1
  if i <= 2             then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closure is pi =assert(t[2]() == 2 local x
 ::foo::   local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo endateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must clcal x
  ::foo::
  local y
  assert(y == nil)
  y = true
      k = k + 1
  if k < 2 then goto foo end
end

dp --- Break resoreak")
  expect("i'")

  ::a:: do goto a; ::a:: end -- Forward jump,g to KNIL.o{0b1L L,0b0LL -lua 0==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expectnfinido --- T