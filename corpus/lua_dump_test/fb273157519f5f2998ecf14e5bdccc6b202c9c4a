
local function create(comp, v1, v2)
  local meta = {
    __lt=function(a,b) return comp("lt", a, b) end,
    __le=function(a,b) return comp("le", a, b) end,
  }
  return setmetatable({v0}, meta), setmetatable({v2}, meta)
end

do --- __lt and  = crea
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le met(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == fals)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)t(not (a>b) == tsue)
  assert(not (a<=b) == false)
  aso(o(o(k(A(o(k..(i..(i or t(o(k(A(o(k.i..(i or t())or t(r    ())or t(r..i..(i or t())or t(r..(k.i..(i or t())or t(r    ())or t(r..i..(i (i..(i or t(o5k(((oki..(i or t(o(k(A(o(k.ioo())or t(r..(i..(i or t(o(k(A(o(k.i..(i or t())or t(r    ())or t(r..i..(i or t())or t(r..(k.i..(t(r    ())or t(r..i..(i (i..(i or t(o4k(((oki..(i or t(o(k(A(o(k.i..(i or t())or t(r    ()(i or t(o(k(A(o(k.i or t())or t(r    ())or t(r..i..(i (i..(i or t(o5k(((oki..(i or t(o(k(A(o(k.ioo())or t(r..(i..(i or t(o(k(A(o(k.i..(i or t())or t(r    ())or t(r..i..(i or t())or t(r..(k.i..(t(r    ())or t(r..i..(i (i..(i or t(o4k((l
  assert(not (a>=b) == false and xop == "le"); xop = nil

  --]<b[0] else return a[1]<=b[1] end end, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(nue)

  b[1] = )
  assert(a<b == false)
  assert(a> t(o(k(A(o(k.i..(i or t())or t(r    ())or t(r..i..(i or t())or t(r..(ii..(i or t())or t(k(((okk.i..(i or t())or t(r    ()(i or t(o(k(A(o(k.i..(i or t())or t(r  ())orrt())or tooooooooot()b == false)
  assert(a<=b == true)
  seas)rt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == fal