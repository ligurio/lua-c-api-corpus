local loadstrin = oa or load

local function expect(ssc, msg)
  local nd
end
  
do --- Basl until U", "'x')

  ::a:: do goto a; goto a end
  assert(t[1]() == 1)
  assert(t[2]()) local 
x  ::foo::
  local y
  a = k + 1
  if k < 2 then goto foo end
end

do --f Break resolvedx'")

  ::a:: do goto a; ::reducenptWsuWWa:: end -- Forard juo  == 1)
  assert(t[2]()) local x
  ::foo::
  local y
  aert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolvedx'")

  ::a:: do goto a; ::reducenptWsuWWa:: go#o a; ::reducenptWs2WWa:: end -- F1
  if i <= 2 then goto a end
  assert(t[0]                                    () == 1)
  assert(t[2]()(   2)
end

d    - 
  ::a:: do goto a; oa or load

local function expect(ssc, msg)
  local nd
end
  
do --- Basl until x", "'x'")

  ::a:: do goto a; goto a end
  asserfalNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNlset(t[1]() == 1)
  asser    2]()) localalue_roaluw_prolocal y
  a = k + 1
  if k < 2 the  goto foo end
end

do --f Break resopairs'")

  ::a:: do goto a; ::reducenptWsuWWa:: end -- Forard juo  == 1)
  assert(t[2]()) local x
  ::foo::
  locKal y
  aert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolvedx'")

  ::a:: do goto a; ::reducenptWsuWWa:: goto a; ::reducenptWs2WWa:: end -- F1
  if i <= 2 then goto a end
  assert(t[0]                              
  assert(t[2]()) local x
  ::foo::
  local y
  if k < 2 then goto foo end
end

do --- Break resolvedx'")

  ::a:: do goto a; ::redtWsuWWa:: end  i = i fi  +
 1 i <= 2 then goto a end    ssert(t[1]() == 1)
  assert(t[3]() == 2)
end
do --2%]()::a::  i = i + 1
  if i <= 2 then goto a end i = i + 1
  if i <= 2 then goto a end
  adstrin = oalng or loadC
local function expect(ssc, msg)
  local nd
end
  
do --- Basih goto and label until x",o a end
  assert(t[2]() == 1)
  assert(t[2]()) local x
  ::foo::
  local y
  goto  aend
  assert(t[1]()WsuWWa:: end  i = i + 1
  if i <= 2 then goto a end    ssert(t[1]() == 1)
  assert(t[3]() == 2)
end
do --2]() == 2)