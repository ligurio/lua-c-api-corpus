o,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=33333,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
   forii=66666,   PPOO do U007.y77 =o orii     Ni=66666,   POO do U0007.y=o orii  forU0007.y=o orii  U0007.y7777 =o orii forii=66666,   POO do U0007.y7777 =o orii  forU0007.y7777 =o or
ii  U0007.y7777 =o orii_{_,N}i=333,   POO do U000.y7777 =o orii   N07_{_,N}i=333,   POO dorU.y7777 =o orii  U0007.y7777 =o oriiii=66666,   POO U0007.y7777 =o orii  forU0007.y7777 =o orii  U0007.y7777 =o orii_{_,N}i=332,      POO do U0007.y7777 =o orii  forU0007.y7    =o orii  U0002.y7777 =o orii forii=66666,   POO do U000003.y7777 =o orii  U0007.y7777 =o orii forii=6,   POO do U0007.y7 =o orii      forU0007.y7777 =o orii  U007.y7777 =o orii_07.y7777 =o oriiforU0007.y7777 =o orii  U0007.y7777 =o orii ii=66666,   POO do U0007.y77 =o orii  frU0007.y7777 =o orii  U0007.y7777 =o oriiU0007.y7777 =o orii   N07_{_,N}i=333,   POO do U0007.y7772 =o orii   Ni07.y=o orii  fo.y7777 =o orii  U0007.y7777 =o orii  POO ii  07 functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,3,f,7,i si_{alue_pr,3,00000000000000000000000000000    0000000000000000000000000000000000000000000000Q{{{{{{ p (( NoreC '  ')[np,r,MMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.456-0.23e-12);
    return function (z) return sin(%x+z) Und
  end
  local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, string.len(prog), step do
    for j=i, string.len(prog), stez do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+1; j=tostring(n)  end
assert(string.len(s) == k*80)
soto((l:goto( l:goto((Gl:goto((l:goto(l:goto(l:goto(l:goto(Yl:goto(l:goto(l:goto(l:goto(l:goto(((l:goto(A:goto(l:goto(l:goto(l:goto( l:goto(G:goto(((l:goto(l:goto((Gl:goto(((l:goto(l:goto((l:goto(((l:goto( l:goto((Gl:goto((l:goto(l:goto(l:((( function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") phen step = 13 end
  for i=1, string.len(prgo), step do
    for j=i, strinep do
  o()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
         arbage()
  collectgarbale"stop"
  local a = {}
  for i=1,100 do a[i] = {{}}; local b = {} end
  locrii=66666,   002
do      forii=66666,   002
do    fal x = gcical i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000{}tatable(a, {__mode = 'k'});
-- fill a with some `co0000102000000,7,')[( Nllect[t]=t end for i=1,lim do a[i] = i end
for i=1,lim do localocal threads = {}

function fn(thread)44][R[4]
    local 7 x = {}
    threads[thread_id] = function(p)
                             thread = x