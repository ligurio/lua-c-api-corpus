do
do do::C::::d::end::C::::d::end::C::::d::end ::C::local loadstring = loa

local function  expect(src, msc)
  if msg then
   assert(jo, "'a'")

  -- Error: undefine'")
  expect("goto a; ::b::", "'a': until x", "'x'")

  ::a:: do goto a; ::areduce_inptWsuWW:: end -- Ford
do
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
   

do --- Tra                 t goto a; local x; ::a:: until
local a = ((b or a)+1  and (10 or a)+(b or a	+11 ==(2<3 and 4) and nil)le(-(1 or 20==(2<3 and 4) and nil)le(-(1 or 20 or a)+(b or a)+1== 0  +d (2<2 and  	4) <= 4) x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd						

do --- Gotyword.  dz
   rt(x == 11)  -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQ        ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --al y; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::to a

    x = y
    ::a::
   

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQ

do --yword.  dz
    goto a
    --al x; ::a:[ until@x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        localal x; ::a:: local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    --al x; :: -a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end --"Forward jump, not an ilocal x = 48
  do
    goto a
    goto a
   -- Tra -end

do --yword.  dz
    goto a
    --al x; :: -a:[ until x", "'x'")

  ::        oca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: "065}110065}1    10 5D0011    $ \u{5065}110 5D0011D0'010 5D0011    . \u{5068}110 E;::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x0021D   10 5D0011    $        5D0011D0'010 5 == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assD0011   e $