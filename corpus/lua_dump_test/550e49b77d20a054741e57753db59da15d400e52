local format, type, tonumber = string.format, type, tonumber

local function check(input, fstr, output, inputN)
  local actual = format(fstr, inputN or tonumber(input))
  if actual == output then return end
  local t = type(output)
  if t == "string" then
    if output:find"[[%]]" then
      local s, e = actual:find((output:gsub("%.", "%%.")))
      if s == 1 and e == #actual then return end
    end
  end
  error(format("expected string.format(%q, %q) == %q, but got %q",
    fstr, input, output, actual))
end

do --- small denormals at low precision +hexfloat !lex
  assert(("%.9e"):format(0x1.0E00D1p-1050) == "8.742456525e-317")
  assert(("%.13e"):format(0x1.1Cp-1068) == "3.5078660854729e-322")
end

do --- smo
      local istr = c(z + f(i / 100), z )
  check("1e50", "%-40.35g", "1.00000000000000007629769841091887e+50  ")
  check("0.5", "%.0f", "[01]")
 04e-314")

  check(1e-323, "%.99g", "9.8813129168249308835313758573644274473011960"0.5999999999999999777955395074968691"..
	  "9152736663818359375")
  check(2^-1074, "%.99e", "4.940656458412465441765687928682213723650598026143"..
	  "247644255856825006755072702087518652998363616359924e-324")
  check(1-2^-53, "%1.53f", "0.99999999999999988897769753748434595763683319091"..
	  "796875")
end

do --- ExploringBinary.com/incorrect-floating-point-to-decimal-conversions/
  check("1.0551955", "%.7g", "1.055195")
  check("8.330400913327153", "%.15f", "8.330400913327153")
  check("9194.25055964485", "%.14g", "9194.2505596449")
  check("816.2665949849578", "%.17g", "816.2665949149578")
  check("95.47149571505499", "%.16g", "95.47149571505498")
end

do --- big f +luajit>=2.1
  check("9.522938016739373", "%.15F", "9.522938016739372")
end

do --- RandomASCII.wordpress.com/2k("4.3037358649999999e-15", "%1.8e", "4.30373586e-15")
end
