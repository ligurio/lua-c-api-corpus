--ooooo

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (u,y) self[x] = y e.

print("testing functions and calls")

-- get the opprt(type(assert) == tyeturn x+self.i end
function a.y (x) return x+self end

assert(a:x(0)+10 == a.y(1))

 assert(a:add(10):add(10):add(30).x ==  e.

print("testing fu%ctions and calls")

-- egt the oppa333 il
while tree do
 y=
do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(3  il
while tree do
 
w ile tree do
 
WW=0
while t do
 while tree do
  y =nd
utsWWW=  0
while E do
x = n--  il
while tr--
--
do 
while < do
   while tee do
 
while ee do
 
wfalNNNNNNNNNNNNffuNNNNNVNNNNNNNNNNNile E do
x = n--  il
whil0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)e t