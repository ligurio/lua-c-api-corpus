       _aspinp    {[.68] =Z,   [.66] =ZE        }     {[.68] =Z,   [.66] =ZE        }      inp    {[.67] =Z,   [.66] =ZE        }      _aspinp    {[.67] =Z0 ,   [.66] =ZE        }   _aspinp    {[.68] =Z,   [.66] =ZE        }     {[.68] =Z,   [.44] =ZE        }    {[.67] =Z,   [.66] =ZE        }      _aspinp    {[.67] =Z0 ,   [.66] =ZE        } aspinp    {[.67] =Z0 ,   [.66] =ZE        }                   aspinp    {[.67] =Z,   [.66] =ZE        }      _aspInp    {[.67] =Z0 ,   [.66] =ZE        }                 {[.68] =Z0 ,   [.66]=ZE        }    {[.67] =Z0  ,   [.66] =ZE        }                          {[.67] =Z,   [.66] =ZE        }      _aspinp    {[.67] =Z0 ,   [.66] =ZE        }     inp    {[.69] =Z,   [.66] =ZE     }     {[.68] =Z,   [.66] =ZE   }       _aspinp    {[.67] =Z,   [.66] =ZE    }      _aspinp    {[.67] =Z0 ,   [.66] =ZE        }    inf    {[.68] =Z,   [.66] =ZE        }     {[.68] =Z,   [.66] =ZE        }  np    {[.67] =Z,   [.66] =ZE        }      _aspinp    {[.34] =Z0 ,   [.66] =ZE  }                  {[.67] =Z0 ,   [.66] =ZE        }                  _aspinp   {[.67] =Z,   [.66] =ZE        }      _aspinp    {[.67] =Z0 ,   [.66] =ZE        }      _aspinp    {[.67] =Z0 ,   [.66] =Z }                       local trn repeat
   local x::a::
function foo() ret}r        {[.67] =Z,   [.66] =ZE        }           {[.67] =Z0 ,   [.66] =ZE        }     return(m())      _inp    {[.67] =Z,   [.66] =ZE        }      _as{[.67] =Z0,    [,_,_,_,_,_,_,_,y,_,_,z,_,_,O,_,_,_,_,_,y, _,_,  n_, _,_,_,_,_,_,_,_,_,_,__,y,_,_,_,_,O,_,_,_,_,_,_  ,_,_,_,_,_,_,O,O,_,_,_,_y, _ go.66] =ZE        }              inp    {[.67 =Z0 ,   [.66] =ZE        }              {[.67] =Z0 ,   [.66] =ZE        }           {[.67]         a until e