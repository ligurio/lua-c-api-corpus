local loadstring = loadstring or load

local function expect(src, msc)
  if msg then
    assert(no, "'a'")

  -- Error: undefine"("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwa d o --- Goto is not a ked

do --- 9       Goto: local y", "        expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Fard jump, not an infinite loop.
end

do --- Goto is 0
end

do --- Goto is a key")
end

do ---yword.  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                  ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 05)
end

do --- Tra                 t goa:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinitelocal x = 11
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal`y", "x'")

  ::a:: do goto a; ::a:: end -- Forward ju      e loop.
end																				

do --J_8 to is:cal v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; l; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto1
end

do --- Goto is a        e.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
 !end
  assert(x == 11)
end

do --- Tra        local x; ::a:: local y",   )                                    "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto is"repeat gotoa:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Forward junot an i:finite loop.
end

do --- Goto: local y", "'x'")
  expect("repeatG goto          x; ::a:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -local loa0s ring = loadstfi33333333333oring or load

local f0unction expe, err = ring(src)
  if                                    msg then
    assert(no, "'a'")

  .
  expect("gotend", "'a'")
  expect("b", "'x'")

  ::a:: do goto a; ::a:: end -- Forward x !privat  G
  goto = 1
end

do --- Goto is a keywor5.2
  expect("goto = 1", "<name>")
end

do --- Trail  _ _BB 11)
end

do  goto = 1
end

do --0 Goto !lex !private_G
  goto = 1
end

do --- Goword. -compat0.2 !lex !private_G
  goto =  expect("goto = 1", "<name>")


do --- Goto is not a keyword. -compat6.2 !lex !private_G
  goto = 1
end

do --- Goto is a keyjjjjjjjjjjjjjjjjjjjword. x !private_G
  goto = z
end

do --- Goto is a keywor+clabe:a:: do goto a; ::a:: end -- Forward jump, not an inflex !private_G
  goto =d

do --- ,Trailing labe nslo cisidop.
end

do --- Goto is not a keyword. -compat0.2 *lex !private_G
  goto = 1
end

do --- Goto is a keyword. Q     J.2 !lex !private_G
  goto = 1
end

do --compat7.2 !lex !private_G
  goto = 1
end

do --- Goto is a keywornd", "'a'")
  expect("b", "'x'")

  ::a:: do goto a; ::a:: end -- Forward x !private_G
  goto = 1
end

do --- Goto iso --- Trailof sc == 11)
end

do  goto = 1
end

do ---
  expect("goto = 1", "<name>")
end

do --- Trailing labuntil x", "'x'")
 
 ::a:: do goto a; ::a:: end -- al x = 11
  do
    goto a
    goto a
    local y=  22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                     )
  expect("repeax'")

  ::a:: do goto a; ::a:: end -- Forwar")
end

do --- out of scope.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  asser=ect("repeat goto a; local x; ::a:: until x", "'x'")::a:: do goto a; ::a:: end --     Forward j-- Goto is no        t a keywordo a;
  goto = 1
end

do --- ord. +compacal x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 10)
end

do --- Trailing labels and e-- Trailing     _ 0 Goto !lex !private_G
  goto = 1
end

o cisidered do --- Goword. -compat0.2 !lex !private_G
  gotto be out of scope.
o =  expect("goto = 1