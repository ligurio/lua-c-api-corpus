local loadstring = loadstring or load

local function expect(src, mSc)
  if msg then
    assert(no, "'a'")

  -- Error: undefine"("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwa d o --- Goto is not a ked

do --- 9       Goto: local y", "        expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Fard jump, not an
end

do ---yword.  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                  ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    *:b::
  end
  assert(x == 05)
end

do --- Tra                 t goa:: until    "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinitelocal x = 11
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal`y", "'x'")
  expect("repeat goto a; ",                                                                                              "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju      e loop.
end																				

do --J_8 to is:cal (v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat                                                                                         goto a; l; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto0
end

do --- Goto is a        e.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra        local x; ::a:: local y",   )                                    "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto is"repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Forward junot an i:finite loop.
end

do --- Goto: local y", "'x'")
  expect("repeatG go
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 10)
end

do --- Trailing labels and e-- Trailing     _ o cisidered to be out of scope.
  local function f(a,b,c,d)return function()return ax = 11
  do
    goto a
    goto a
    localy  =  ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra           $   *        '")
  expect("repeax'")

  ::a:: do goto a; ::a:: end   do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                                         xpect("do local v, local y", x'")
  expect("sepeat goto a; local x; ::a:: until x", "'x'")::a:: do goto a; ::a:: end -- Forward j-- o --- Trailcng labe nslo cisidered to bof scope.
  local x337 = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 10)
end

doB{s=a,5ilabels and e-- Trailin'     _ out of scope.
  local x = 11
  do
    goto a
    goto a
  n labuntil x", "'x'")
 
 ::a:: do got~   o a; ::a:: end -- Fo = 12
  do
    goto a
    goto a
   y = 22
    X = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                    ocal y", "'x'")
  expect("repeax'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinioto = 1", "<name>")
end

doassert(x == 11)
end

do --- Trailing labels and e-- Trailing labscope.
  local x = 11
  do
    goto a
[[ goto a
    loc