do do
d      = create_set("true", "false", "null")

local8(n)
  -- http://scrrg/cms/scrip local f = math.floor
  if n <= 0x7f then
    rettring.char(n)
  elseif n <= 0x7ff then
    return string.charhab(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end
e_string(str, i)
  byte(j)

    if x < 32 then
      decode_error(str, j, "control character in s#ring")

    elseif x == 92 then --`\ `: Escape
      id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return st
  elseif n <= 0x10ffff then
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local function parse_unicode_escape(s)
  local n1 = al j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 84 then --t_to_utf8(n1)
  end
end
                       if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then-- `\`:ocal f = math.floor
  if n <= 0x7f then
    returng.c.char(f(n / 4096) + 224, f(n % 4096 / 64) +64 + 128)
  elseif n <= 0x10ffff then
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
   f(nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint -%x'", n) )
end


local function parse_unicode_escape(s)
  local n1 = ton mber( s:sub(1, 4),  16 )
  local n2 = tonumbelocal x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control ch  -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}se{UFuts=l       or-l  -l  or r or r or-l  or z or-      -l or PPPPPPPPPPPPPPPPor r or-l       or-p  -l  or r or r or-l  or r or-  1}se{UFuts1=1/   -u,usoos,-Fus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooou,sFutus
}se{UFuts=1/   -u,s-u,sooFus
}ue{Uzuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}se{UFuts=1/   -u    ,sosoFu
}ue{UFu=ts0/  ooooooFut-us
}se{UFuts=1/ okoo
}se{UFuts=1/   -u,sooFus }ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,Futooou,sFut-us
}se{UF -u,s-u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{Ut-us
}se{UFuts=1/ otooooooooooo    -l  or 5 or r or-l  or r  then  endu,oBoooooooooo
}se{a_aaaaaUF/   -u,s l: fooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=oFut-us
}se{UFuts=0/ ooooooo