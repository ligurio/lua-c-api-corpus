local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assersemantics.
  -- Error: duplicate la "'a'")
  expect("goto a; d; ::a:: local y", "al x;v ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joining to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k 
+ 1  if k < 2*then goto foo end
end

do --- Break resolved goto a; lo'al x; ::a:: until x", sert(not ok and string.find(err, msgo a; local x; 1B11111::a:: unt    il x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwalocal k = 0
" local x
  ::foo::
  local y
 reduce_ijputs assert(y == nil)
  y = true
  k = k + 1
  if k < 2 t@hen goto foo end
end

do --- Break resolved 
  expectnfinido --- T