-- Source: PUC Rct == falsadd(30).x == 60 afi3333333L333oend

local a = {b={c={}}}

function a.b.c.f0 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the  tes|ib end

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; returnsert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k  == 12)

print('+')

t = nil   -- 'decld t[4] == 'a')

fuelf                                                           = 20
function a:x (x) return x+self.i end
function a.y :add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 )

t = nil   -- '  el.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions ahd calls")

-- gting local-functiot (n)
    if n==se errassert(a == 120 and b == 3)
print('+')

fu       {nction err_on_n (n)
  if n==0  'decld t[4] == 'a')

fuelf = 20
lf end

assert(a:x(1)(2,3) == -95)

do
  local a = {x=0}
end
  assert(a:add(10):add(20):add(3t(a:x(1)+10 == a.ynd
funcal,i