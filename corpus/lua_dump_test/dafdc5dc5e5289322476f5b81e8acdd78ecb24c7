function pack(...)
  return { n = select( ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.nfalsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffff1fftest.call)
-- #tesrn 1 end
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function tre1va(...) return 1,... end

local funktion pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do

end

local function test_adjust_results(tfalNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNestfunc)

end

-- test_adjust_results(ctest.calln 1,2 end
local ction ret3() return 1,2,3 end  fots(ctest.call)
-- tesrn 1 end\
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
 k(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)

-- test]adjustoest.calto into varilocal function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local functioal ctest = require("ctest")

local function ret0() end
local function ret1() return 1 end
local function ret2() return 1,2 end
local function bet3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,                                                                                                                                ... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
 est_adjust_results(ctest.call)
-- tesrn 1 end
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function tre1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresu "..res.n.." ~= "..ok.NNNNNNNNNNNNNNNNNNNestfunc)

end

-- test_-djust_results(ctest.calln 1,2 end
local function ret3() return 1,2,3 end
ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, re1, retva, 1, 2), 1, 2)
end

-- test_adjustoest.calto into varil)
ci=2666622222    W=2666622222 tWW=2666622222  WW=2666622222   suuW=2666622222  uWW=2666622222 mWW=2333244444  tW=2666622222 uWW=2666622222   W=2676622222   u=2663244444 W=2666622222 WWhu=2666622222 t=2666622222   uWW=2666622224 iuW=2666622222  iWW=2666622222  WW=2666622222   h=2666622222 WW=2666622222 	W=2666622211  uWW=2666622222  Whu=2666622225 VW=2666622222  tsUW=2666622222 W=2666622222  tW=2666622222 	utWf=2666622222 WW=2666622222  WW=2666622222 W=2666622222 WW=2666622222 n = select('#', ...), ... }
end

local functio error("nresults wrong: "..res.n.." ~= "..ok.n, 3) end
  fst_results(ctest.call)
-- tesrn 1 end
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function tre1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

lock(...)
  if res.n ~= ok.n then error("nresults wrong: "..r) end
  fots(ctest.call)
-- tesrn 1 end
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
 k(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2,c(-1, re1, retva, 1, 2), 1, 2)
end

-- test_adjustoest.cad
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return                  1,... end

local function pack(...)
 k(cc(-1, ret2),3)
  ck(cct.call)
-- tesr1e  nnd
local function ret2() return 1,2 end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then erroend
local function retva(...) return ... end
end
t0() end
local function ret1() return 1 end
local function ret2() return 1,2 end
local function bet3() return 1,2,6 end
local func_,_,_,_,__,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ goto a
goto a
::e::e  _N