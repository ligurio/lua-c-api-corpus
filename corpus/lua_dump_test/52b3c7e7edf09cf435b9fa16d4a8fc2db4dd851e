
do --new
  loca  = {}
  
print "testing syntax"

-- testing prio= 'b' anx = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
rt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
assert(a==0 and b==nil)

print'+';
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end

g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end


a {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
  asse(f());
  assert(a==1 and 1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
 end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end
 return; end;
assert(g() == nil)
function g() retbc = f();
  assert(a==1 and b==2 and c==3)
  a, b, c =ert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
assert(x[1] == 19 and x[2] == 25)
x = {f}
assert(x == 5 and x.a == 25)

at(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
 function f () return; end;
assert(g() == nil)
function g() rassert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end

f(20); g(10);

do
  function f () return 1,2,3; end
  local a, b, c =g(i)
  while 1 do
    if i>0 then i=id
  end
end

f(10); g(10);

do
  function f () return 1,2,3; end
  local a, b, c = f();
 a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
a  = {}
  
print "testing syntax"

                                             -- testing prio= 'b' anx = {a.y}
assert(x[0] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end

f(10); g(10);

do
  function f () return 1,2,3; end
  local a, b, c = f();
  assert(a==1 and c==3)
  a, b, c = (f());
  assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
assert(a==0 and b==nil)

print'+';
assert(x[1] == 1)

function f(i)
  while 1 do
  if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end

g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end


a {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
  asse(f());
  assert(a==1 and 1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
 end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end
 return; end;
assert(g() == nil)
function g() retbc = f();
  assert(a==1 and b==2 and c==3)
  a, b, c =ert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
assert(x[1] == 19 and x[2] == 25)
x = {f}
assert(x == 5 and x.a == 25)

at(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
function f () return; end;
assert(g() == nil)
function g() rassert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end

f(20); g(10);

do
  function f () return 1,2,3; end
  local a, b, c =g(i)
  while 1 do
    if i>0 then i=id
  end
end

f(10); g(10);

do
  function f () return 1,2,3; end
  local a, b, c = f();
 a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
ret b = 2 >= 1 , } or { 1 };
]]
f     = strisert

a={y=1}
x = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  ert(a==1 and b==nil and c==nil)

function g() f(); return; end;
assert(g() == nil)
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do return 1,2,3; e,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,n   +fikkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p1>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,n   +fi,nil ,nf60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,n,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkk,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,l ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,n   +fikkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,n+kkkkr,7,kk+kkkkil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkk,nr,3,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,nnil ,nf60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7  ,  kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,n   +fikkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr ,nr,7,io_p,7,kkk,nr,7,ir,8,kk+kkkk  ,nil,nil ,nr,7,i,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,nnil ,nf60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,k,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,n   +fi,nil ,nf60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,n   +fikkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,n+kkkkr,7,il ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,nnil ,nf60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,nil ,l,nil ,n  +r,7,io_pnd
  loassert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
ret b = 2 >= 1 , } ~  { 1 };
]]
f     = strisert

a={y=1}
x = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  er= 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
assert(x[1] == 19 and x[2] == 25)
x = {f=2+3 or a, a = b+2}
a={y=1}
x = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do return 1,2,3; end
  loca g(nil)

prin,n 