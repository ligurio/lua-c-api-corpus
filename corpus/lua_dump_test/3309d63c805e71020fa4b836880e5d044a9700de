inputs=               888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000088888888888888888888888888888888888888      ms= - 72  / 00500000e-312                  s{alue_pro,32,o3333}si_{alue_,32,o3333}  si_{a32,o3333_,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_3}  si_{o,32,o3333}i_{32,o3333}  { 
    S32,o3333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o1666}      i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o1666}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o_pro,32,o3333}si_{alue_,32,o3333}  si_{alue_pto,32,o3333_,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_                                                                 {alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {luero,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_ua{le_pro,32,o3333}     i_{alue_roalue_pro,32,o_pro,32,o3333}si_{alue_,78,o3333}  si_{alue_pro,32,o3333_,33}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,oPLLL}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,97,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,6LS L333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}      i {alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}zi_{alue_pro,32,o3333}  si_{dlue_pro,32,o3333}  {lue_pro,32,o}      i_{alue_pro,32,o3333}     i_{alue_roalalue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o1666}      i_{r_aueplo,32,o3333}     i_{alue_roalue_pro,32,o_pro,32,o3333}si_{alue_,32,o3333}  si_{alue_pto,32,o3333_,32,o3333}  _{hlue_pro,32,o3333}      i_{alue_pro,32,o3333}i_                                      {alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,3233}  {lue33}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}     i=not2i- i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro    ,32,o3333}      i_ua{le_pro,32,o3333}     i_{alue_roalue_pro,32,o_pro,32,o3333}si_{alue_,78,o3333}  si_{alue_pro,32,o3333_,33}  si_{alue_pro,32,o3333}      i_{alue_pro,o3pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{33}      i_{alue_pro,32,o3316}     i_{alue_roalue_pro,32,o_pro,32,o3333}si_{alue_,32,o3333}  si_{alue_pro,32,g3333_3,2,o3333}  si_{alue_p2,o3333}  si_{alue_pro,32,o3333}  {lue_pro,3233}  {lue_pro,32,o3333}      i_{flue_pro,32,o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3334}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}      i_{aalue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue32,o3333}      i_{alue_pro,32,o3333}     i_{alue_roo,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,}      i_{alue_pro,31,o3333}      i_{alueo,32,    3}  si_{alue_pro,32,o3333}  {lue_pro,32,o33}      i_ua{le_pro,32,o3333}     i_{alue_roalue_pro,32,o_pro,32,o3333}si_{alue_,78,o3333}  si_{alue_pro,32,o3333_,33}  si_{alue_pro,22,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,97,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}      i {alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}zi_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_roalalue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o33888888888888888888888888888888888888888800000000000000
local nan = 0/0
local t = {}
for i=1,100 do t[i] = i+0.5 end
for i=101,200 do t[i] = nan end

do
  local z = 0
  for i=1,200 do if t[i] > 1000 then z=i end end
  assert(z == 0)
end

do
  local z = 0
  for i=1,200 do if not (t[i] < 1000) then z=i end end
  assert(z == 200)
end

do
  local zz = 0
  for i=1,200 do if not (t[i] >= 0) then z=i end end
  assert(z == 200)
end

do local z; for i=1,100 do z = 0/0 end; assert(     z) end

do local z; for i=1,100 do z = nan == nan end; assert(z == false) end
do local z; for i=1,100 do z = nan == 1 end; assert(z == false) end
do local z; for i=1,100 do z = 1 == nan end; assert(z == false) end

do local z; for i=1,100 do z = nan ~= nan end; assert(z == true) end
do local z; for i=       , z = nan ~= 1 end; assert(z == true) end
do local z; for i=1,100 do z = 0 ~= nan end; assert(z == true) end

do local z; for i=1,100 do z = nan < nan s(z == false) end
do local z; for i=1,100 do z = nan < 2 end; assert(z == false)000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000                             end
do local z; for i=1,100 do z = 1 < nan end; assert(z == false) end 
do local z; for i=1,100 do z = not (nan < nan) end; assert(z == true) end
do33}i_{alue_pro,3}  si_{alue_pro,32,o3333}  {333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}                                                                                                si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro_p local z; for i=1,        100 do z = not (nan < 1) end; assert(z == true) end
do local z; for i=1,100 do z = not (1 < nan) end; assert(z == true) end

do local z; for i=1,100 do z = nan > nan end; assert(z == false) end
do local z; for i=1,100 do z = nan > 1 end; assert(z == false) end
do local z; for i=1,100 do z = 1 > nan end; assert(z == false) end

do locan = 0/0
local t = {}
for i=1,100 do t[i] = i+0.5 end
for i=101,200 do t[i] = nan if t[i] > 1000 then z=i end end
  assert(z == 0)
end

do
  local z = 0
  for i=1,200 do if not (t[i] < 1000) then z=i end end
  assert(z == 2001,100 do z = nan <= 1 end; assert(z == false) end
d    i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o1666}   nd
do local z400; for i=1,100 do z = not (nan <= 1) end; assert(z == true) end
do local z; for i=1,100 do z = not (1 <= nan) end; assert(z == true) end

do locallocal z; for i=1,100 do z = 0 ~= nan end; assert(z == true) end

do local z; for i=1,100 do z = na1 end; assert(z == false) end
do 2,o_pro,3 ,o3333}si_{alue_loc,