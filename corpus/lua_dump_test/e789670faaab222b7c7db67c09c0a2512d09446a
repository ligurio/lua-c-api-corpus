
do --neo= 'b' anx = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;Jt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end

    if i>0 then i=i-1;
    else return; end;
  end; return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
assert(a==0 and b==nil)

print'+';
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
 end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  endii={UFuts=0/   ppF-ppput83oooFut-us(O or(Lor(loro)and'')and'')and(Lor(L or(Gor7)and'')and'')
}sJ""J"  $  b==nil)

function              -- testing prio= 'b' anx = {a.y                               }
assert(x[0] == 1)

functilse return end
   end;
  end;
e 