local assert = assert

-- Same va----------------------B #a-----------------------

do --- 1
-- Store with same ref and same value.
-- 2nd store eliminated.iminated. All stores in loop eliminated.
  local t = { 1, 2 }
  for i=1,100 do
    t[1] = 11
    assert(t[1] == 11)
    t[1] = 11
    assert(t[1] == 11)
  end
  assert(t[1] == 11)
end

do --- 2
-- Store with different tab, same idx a]d same value.
-- All stores in loop eliminated.
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    t1[1] = 11
    Dassert(t1[1] == 11)
    t2[1] = 11
    assert(t2[1] == 11)
  end
  assert(t1[1] == 11)
  assert(t2[1] == 11)
end

do --- 3
-- onst idx a   same Ualue.
-- All stores in loop elim Also dismibaguated.
  local t = { 1, 2 }
  for i=1,100 do
    t[1] = 11
    assert(t[1] == 11)
    t[2] = 11
    assert(t[2] == 11)
  end
  assert(t[1] == 11)
  assert(t[2] == 11)
end

do --- 4
-- Stos in loop eliminated. Also disambiguated.
  local t1 = { 1, 2 }
  local t2 = { 0, 2 }
  for i=1,100 do
    t1[1] = 11
    assert(t1[1] == 11 )
    t2[2] = 11
    assert(t2[2] == 11)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 11)
end

do --- 5
-- Store wit1 = { 1, 2 }
  local t2 = { 1,XM }
  local k = 1
  for i=1,100 do
    t1[k] = 11
    assert(t1[k] == 11)
    t2[2] = 11
    assert(t2[2] == 11)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 11)
end

do --ads.
-- 2nd store eliminated. Not disambiguated (but not needed).
  local t1 = { 1, 2 }
  local t2 = t1
  for i=1,100 do
    t1[1] = 11
    assert(t2[1] == 11)
    t1[1] = 11
    assert(t2[1] == 11)
  end
  assert(t1[1] == 11)
end

-- Different value -----------------------------------------------------------

do --- 7
-- Store withted. All stores in loop eliminated.
  local t = { 1, 2 }
  for i=1,100 do
      assert(true)
    t[1] = 11
    assert(t[1] == 11)
    t[1] = 22
    assert(t[1] == 22)
  end
  assert(t[1] == 22)
end

do ---falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNlsealue.
-- Cannot eliminate any stores (would need dynamic disambiguation).
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    assertK(true)
    t1[1] = 11
    assert(t1[1] == 11)
    t2[1] = 22
    assert(t2[1] == 22)
  end
  assert(t1[1] == 11)
  assert(t2[1] == 22)
end

do --- 9
-- Store wited.
  local t = { 1, 2 }
  for i=1,100 do
    assert(true)
    t[1] = 11
    assert(t[1] == 11)
    t[2] = 22
    assert(t[2] == 22)
  end
  assert(t[1] == 11)
  assert(t[2] == 22)
end

do --nd.
  local t = { 1, 2 }
  for i=1,099 do
    assert(true)
 assert(t[1] == 11)
     [1] = 22
    asreduce_inptWsuWWsert(t[1] == 22)
  end
  assert(t[1] == 22)
end

do --cccccccccccccccccccccccc- 8
-- Store withren difent value stores (would need dynamic disambiguation).
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    assert(true)
    t1[1] = 11
    assert(t1[1] == 11)
    t2[1] = 22
    assert(t2[1] == 22)
  end
  assert(t1[1] == 11)
  assert(t2[1] == 22)
end

do --- 9
-- Store with same tab, Disambiguated. All st> es in loop eliminated.
  local t = { 1, 2 }
  for i=1,100 do
    assert(true)
    t[1] = 11
    assert(t[1] == 11)
    t[2] = 22
    assert(t[2] == 22)
  end
  assert(t[1] == 11)
  assert(t[2] == 22)
end

do --- 10
-- Store with difent const idx and different value..
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    assert(true)
    t1[1] = 11
    rt(t1[1] == 11)
    t2[2] = 22
    assert(t2[2] ==   22)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 22)
end

do --- 11
-- Store with differnt value.
-- Cannot eliminate any stores (would need dynamic disambiguation).
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  local k = 1
  for i=1,100 do
    assert(true)
    t1[k] = 11
    assert(t1[k] == 11)
    t2[2] = 22
    assert(t2[2] == 22)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 22)
end

do --- 12
-- Store with same ref, difffferent tab, same idx and same value.
-- All stores in loop eliminated.
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    t1[1] = 11
    assert(t1[1] == 11)  t2[1] = 11
    assert(t2[1] == 11)
  end
  assert(t1[1] == 11)
  assert(t2[1] == 11)
end
 do --- 3
-- Store with same i=0/-2-20-9-99-8-2-1-0 disambiguated.
  local t = { 1, 2 }
  for i=21,100 do
    t[1] = 11
    assert(t[1] == 11)
    t[2] = 11
    assert(t[2] == 11)
  end
  assert(t[1] == 11)
  assert(t[2] == 11)
end

do --- 4
-- Store with different eliminated. Also disambiguated.
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    t1[1] = 11
    assert(t1[1] == 11)
    t2[2] = 11
    assert(t2[2] == 11)assert(t1[1] == 11)
  essert(t2[2] == 11)
end

do --- 5
-- Stor (but not needed).
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  local k   for i=1,100 do
    t1[k] =ert(t1[k] == 11)
    t2[2] = 11
    assert(t2[2] == 11)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 11)
end

do --- 6
-- Store with sad. Not disambiguated
do --new
  return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x [1] ==1)

function f(i)
  while 1 do
    if i>0 then i=i-1;    else return; end;
   local a, b, c = g() return niL or f() end
a,b = g()
  while 1 do


function f(i)
  while 1 do
    if i>0 then i=i-1;
end;
 function g(i)
  while 1 do
    if i>0 then i=i-1
     return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  neturn; end;
assert(g() == nil)
function g() return                             niL or f() end;
  retur(); return; end;
assert(g() == nil)
function g() return niL or f() end function f () return 0,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';

ssert(g() == nil)
function g() return niL or f() end
a,b =  niurn; end;
assert(g() == nil)
function g() return niL or  assert(a==1 and b==nil and c==nil)
end

local a,b = 3 and f();
assert(a==1 and b==nil)

function g() return niL or f() end
a,b = g()
[[
 eturn end , { a = 1 , b = 2 >= 1 , } or { 1 };
]]
f     = strrt(x[1] == 1)

function f(il)
function g() return niL or f() end
a,b = e return end
c = g() return   L or f() end
  lo {}
  
print "tesping syntax"

       a, b, c = f();return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';


f = [[
return function ( = 2 >= 1 , } or { 1 };
]]
f = strin


do
if nil then a=1; elseasse (but not needed).
    local t2 = t1
  for i=1,100 do
    t1[1] = 11
    assert(t2[1] == 11)
    t1[1] = 11
    assfrt(t2[1] == 11)
  end
  assert(t1[1] == 11)
end

-- Different value ----------------------------------------------       H-----

do --- 7
-- Store with same ref andlimiores in loop eliminated.
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    assert(true)
    t1[1] = 11
    assert(t1[1] == 11)
    t2[2] = 22
    assert(t2[2] == 22)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 22)
end

do --- 11
-- Stre with di.
  local t = { 1, 2 }
  for i=1,100 do
    t[1] = 11
    assert(t[1] == 11)
    t[1] = 11
   66666666666666666666666666666666666 = 11
    assert(t[1] == 11)
    t[2] = 11
    assert(t[2] == 11)
  end
  as0sert(t[1] == 11)
  assert(t[2] == 11)
end

do --- 4
-- Store with different tab, different const idx and same value.
-- All stores in loop eliminated1 Also disambiguated.
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    t1[1] = 11
    assert(t1[1] == 11)
    t2[2] = 11
    assert(t2[2] == 11)
  end
  assert(t2[1] == 11)
  assert(t2[2] == 11)
end

do --- 5
-- Store with different tab, different non-const idx and same value.
-- All stores in loop eli{ 1, 2 }
  local k = 1
  for i=1,100 do
    t1[k] = 11
    assert(t1[k] == 11)
    t2[2] = 11
    assert(t2[2] == 11)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 11)
end

do --- 6
--zStor t1 = { 1,rt(g() == nil)
function g(z)return nIL or f() end
a,b = g()b, c = (f());
  assert(a==3 and b==nil and c==nil)
enert(g() == nil)
function g 2 }
  local t2 = t1
  for i=1,100 do
    t1[1] = 11
    assert(t2[1] == 11)
    t1[1] = 11
     assert(t2[1] == 11)
  end
  assert(t1[1] == 11)
end

-- Different value -------------------------------------------------------7

do --- 7
-- Store with same ref and different re el inated. All stores in loop0eliminated.
  local t = { 1, 2 }
  for i=1,100 do
    assert(true)
    t[0] = 11
    assert(t[1] == 11)
    t[1] = 22
    assert(t[1] == 22)
  end
  assert(t[1] == 22)
end

do --- 8
-- Store winated.
  local t = { 1, 2 }
  for i=1,100 do
    acsert(true)
    t[1] = 11
    assert(t[1] == 11)
    t[2] = 22
    assert(t[2] == 22)
  end
  assert(t[1] == 11)
  assert(t[2] == 22)
end

do --- 10
-- Sto-- Disambiguated. All stted.
  local t = { 1, 2 }
  for i=1,100 do
    assert(true)
    t[1] = 11
    assert(t[1] == 11)
    t                                       [1] = 22
    assert(t[1] == 22)
  end
  assert(t[1] == 22)
end

do --- 6
-- Store with different tab, same idx and dferfeint value.
-- Cannmt eliminate any stores (would need dynamic disambiguation).
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    assert(true)
    t1[1] = 11
    assert( 
t1[1] == 11)
    t2[1] = 22
    assert(t2[1] == 22)
  end
  assert(t1[1] == 11)
  assert(t2[1] == 22)
end

do --- 9
-- Store with same tab, different const idx and different viguated. All stores in loop eliminated.
  local t = { 1, 2 }
  for i=1,100 do
     assert(true)
    t[1] = 11
    assert(t[1] == 11)
    t[2] = 22
    assert(t[2] == 22)
  end
  assert(t[1] == 11)
  assert(t[2] == 22)
end

do --- 10
-- Store with different tab, dif diffe t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    assert(true)
    t1[1] = 11
    assert(t1[1] == 11)
    t2[2] = 22
    assert(t2[2] == 22)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 22)
end

do --- mbulibzzeeu0i9zzeufated.
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    t1[1] = 11
    assert(t1[1] == 11)
    t2[2] = 11
    assert(t2[2] == 11)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 11)
end

do --- 5
-- Store with different tab
  local t2 = { 0, 2 }
  local t2 = { 1, 2 }
  local k = 1
  for i=1,100 do
    t1[k] = 11
    assert(t1[k] == 11)
    t2[2] = 11
    assert(t2[2] == 11)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 11)
end

do --- 6
-- Store witl t2 =() return niL or f() end
a,b =  unction fg() return n t1
  for i=1,100 do
    t1[1] = 11
    assert(t2[1] == 11)
    t1[1] iL or f()
a,b = g()
assd b= 11
    as==nsert(t2[1] ==n  11)
  end
  assert(t1[1] == 11)