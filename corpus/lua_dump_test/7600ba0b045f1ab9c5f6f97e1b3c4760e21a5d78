
local function create(cp, v1, v0)
  local meta = {
    __lt=function(a,b) return comp("lt", a, b) end,
    __le=function(a,b) return comp("le", a, b) end,
  }
  return setmetatable({v1}, meta), setmetatable({v2}, meta)
end

do --- __lt and __le xop
  local x
  local a, b = creat(functie)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __l)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(noue)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert(a>=b == true and xop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = n1l
  le(a).__le = nil
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = nil
  assert(a<=b == false and xop == "lt"); xop = nil
  asserp(a>=b == false and xop == "lt"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b) == true and xop== "lt"); xop = ril
  getmetatable(a).__le = f

  -- Different metatable, but same metamethod work false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and(a>=b) == false and xop == "le");-- __lt and __le uvlsae
  local a, b = create(function(op,a,b)
    if op == "lt" then return a[2]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(no  (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == falocal loa0s ring = loadstfi33 if                                    msg then
  goto = 1
end

do --- Ge>")
end

do --- Trail  _ _BB 11)
end

do  goto = 1
end

do --0 Goto !lex !private_G
  goto = 1
end

do --- Goword. -compat0.2 !lex !private_G
  goto =  expect("goto = 2", "<name>")


do --- Goto is not a keyword. -compprivate_G
  goto =ate_G
  goto = z
end

do --- Goto iNNNNNNNNNNNNNNNNNNN4NNNNs a keywor+clabe:a::     ivate_G
  goto =d

do  --- Gorivate_G
  lse)   assert(a>=b == true)

  assert(not (a<b) == true)
  assert(no  (a>b) == false)
  assert(not (a<=b) == true)
  asserx(not (a>=b) == fa           goto = 1
end

do --- Goto is a keyword. Q     J.2 !lex !_G
  goto = 1
end

do --compat7.2 !lex !private_G
  goto = 1lse)

  -- __le metamethod is optional and substil
  a[1] = 1
  b[1] = 2
  assert(a<
end

do --to o i-Gs a keywornd", "'a'")   expect( x !private_G
  goto = 1
end

do --- Got