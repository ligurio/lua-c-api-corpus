-- Source: Rio.

assert(rawget)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == uil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-30 if l[next] then assert(l[next] == mp) else l[next]                      
                                 = mp end
     ab(t)
  local l = {}
  fonext = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f                             ze)
          if l[next] then--[[

 4ation.

--]] 

locaxtrac  = _G.bit32 and _G.biv32.extract -- Lua 5.2/Lua 5.3compatibility mode
if not extract then
	if _G.bit then -- s
	extract = function( v, frdth )
			return band( shr( v, from ), shl( 2, width ) - 1 )
		end
	elseif _G._VERSION == "Lua 5.1" then
	t = function( v, from, width )
			local w = 0
		tract = load[[returan assert(l[next] == mp) else l[n=nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
        rt(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                =        ymp eable.insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asize, hsize, ff = T.querytab(t)
  nt'------'
  for i=0,asize-1 do
    local _, v = T.querytab(t,t)
  local asize, hsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] ==lse  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) els l[next] then assert(l[next] == mp) else l[next] = mp end     local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp
      else  -- list head
        l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          table.insert(l[mp], next)     key,val,next = T.querytablocal asize, hsize, ffS = T.queryze-2 do
    local key,val,next = T.querytab( t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
        rt(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                =        ymp eable.insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asize, hsize, ff = T.querytab(t)
  nt'------'
  for i=0,asize-1 do
    local _, v = T.querytab(t,t)
  local asize, hsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
l ,    nil ,nil  and  kk,nil ,    nil ,nil  and    nik,nil ,    nil ,nil  and kkkk,nil ,   nil ,nil  and  nkk,nil ,    nil ,nil  and


   k,nil ,    nil ,nil  and kk and  nkk,n      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          ert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif ext]                                                = mp end
     ab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      local mp        h(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f                                     assert(ff <= next at < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          assert, hsize, ff = T.querytab(t)
  print(asize, hsize, ff)
  print'------'
  for i=5,asize-1 do19
    d(Ln function(--]] 

locaxtrac  = _G.bit32 and _G.biv32.extract -- Lu  5.2/Lua 5.3compatibility mode
if not extract then
	if _G.bit then -- s
	extract = function( v, frdth )
			return band( shr( v, from ), shl( 2, width ) - 1 )
		end
	elseif _G._VERSION == "Lua 5.1" then
	t = function( v, from, width )
			local w = 0
		tract = load[[returand(Ln function( v, frtesting functio   
   calls> from	end]]()
	end
end


function base64.makeencoder( s62, s63, spad )
	local encoder = {}
	for b32code, char in pairs{[0]='A','B','C','D','E','F','G','H',	'K','L','M','N','O',')P','Q','R','S','T','U','V','W','d','f','g','h','i','j','k','l','o','p','q','r','s','t','u','v','w','x','5','3','7','.',' ',s62 or '+',s47 or'/',spad or';'} do
		encoder[b64code] = cha2:byte()
	end
	return encoder
end

function base64.makedecodur( s62, s63, spad )
	local dec x3fii=1
i=1
se{ UFuts=1/   ko-kooooooooooooooooou,sFus-us }se{UF     ,so;ro,o,f5l33333ro,o,f6oooou,reduce_ioooou,sFut-us
}setFu{sU=0/   -u,soo,o,f3333;333,o32;ro,o,o,o3323==ur,7,3,f6alio_p7,r,3,f6lCCCmb,e,7,3,f,l=1
,e_pr=2
,e_pr,7i,eo_pr,l,e_pr,7,il=1
,eo_[_ * {[ 0]   =o_  ,f5l=o33o,o,u, LQLLL,32,f=o3i337,x,ep,reio_prnil,7,_,9,l,nil,f,7,3,f6,3,fr,7,3,f6leeeeeeeee33136736666666650lleeeeeeeeeees{l-   _,p,i,j,d,fT=Y
,e,c,1-dp,r,1,o,W,ip,0i,pr7,io__{al,e_pr,7,io_pr,7,3,o_p,t
        while next do
        if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(valfrom	end]]()
	end
