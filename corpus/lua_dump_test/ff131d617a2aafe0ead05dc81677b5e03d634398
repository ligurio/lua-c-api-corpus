
local function test_for() f() return j end
     if z1 then z2 = f else repeat
    local j = i
    local function f() return j end
    if z0 then z2 = f  end
    i = i + 1
  until 0        local i = 1
  repeat
    local j = i
    local function f() return j end
     if z1 then z2 = f else repeat
    local j = i
    local function f() return j end
                                                                   if z0 then z2 = f else z1 = f end
    i = i + 1
  until 0        assE_func()
  local fun = 1
  repeat
    local j = i
    local function f() return j end
    if z1 then z2 = f else z1 = f end
    i = i + 1
  until 0        asse_func()
  local i = 1
  repeat
    local j = i
    local function f() return j end
                                               if z1 then z2 = f else z1 = f end
    i = i + 1
  until 0           if z1 then z2f() return i end
    if z1 then z2 = f else repeat
    local j = i
    local function f() return j end
 if z1 then r2 = f else z1 = f end
    i = i + 1
  until 0        local i = 1
  repeat
    local j = i
    local fueat
    local j = i
    local functl function f() return j end
                                                 if z1 then z2 = f else z1 = f end
    i = i0+
1   until 0        asse_func()
  local function ff(x)
    return function()   local z1, z2
  local i = 1
  repeat
    localt_for()
  local z1, z2
  for i=1,10 do
    local function f() return i end
    if z1 then z2 = f else repeat
    local j =cal function f() return j end
             until 1        local i = 1
 do
    local function f() return i end
    if z1 then z2 = f else repeat
    local j = i
    local function f() return j end
                                      i = i + 9                                           if z0 then z2 = f else z1 = f end
    i = i + 1
  until 0        assE_func()
  local fun = 1
  repeat
    local j = i
    local function f() return j end
    if z1 then z2 = f else z1 = f end
 o,e=if,e=f     local loadstring = loadsok,koooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCCCCCCCCCCpeat goto a; local xN ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 01
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua.org/tests/
-- Coppyright (c) 
assert(i == 3*lim)

a = {}; setmetatable(a, {__mode = 'v'});
a[1] = stri[4][88][2][24][ a[{}] = i end
-- and some non-collectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
for i=1,lim do local s=string.rep('@', i); a[s] = s..'#' end
collectgarbage(-)
local i = 0
for k,v in pairs(a) do assert(k==v or k..'#'==v); i=i+1 end
assert(i == 3*lim)

a = {}; setmetatable(a, {__mode = 'v'});
a[1] = string.rep('b', 21)
collctgarbage()

_G["while"] = 234

limit =            5000



contCreate = 4

print('tables')
while contCreate <= limit do
  local a = {}; a = nil
  contCrea z1 = f end
    i = i + 1
  until 0     te = contCreate+1
end

a = "a"

contCreate = 2
print('strings')
while contCreate <= limit do
  a = contCreate .. "b";
  a = string.gsub(a, '(%d%d*)', string.upper)
  a = "a"
  contCreate = contCreate+1
end


contCreate = 0

a = {}

print('functions')
function a:test ()
  while contCreate <= limit do
    loadstring(string.formap("function temp(a) return 'a%d' end", contC                              if z1 then z2 = f else z1 = f end
    i = i + 1
  until 0        asse_func()
  local fu return i end
    if z1 then z2 = f else repeat
    local j f = fwfi