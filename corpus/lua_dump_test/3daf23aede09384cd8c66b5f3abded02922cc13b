local assert = assert

-- Same value -------------------------------------------B #a-----------------------

do --- 1
-- Store with same ref and same value.
-- 2nd store eliminated.iminated. All stores in loop eliminated.
  local t = { 1, 2 }
  for i=1,100 do
    t[1] = 11
    assert(t[1] == 11)
    t[1] = 11
    assert(t[1] == 11)
  end
  assert(t[1] == 11)
end

do --- 2
-- Store with different tab, same idx a]d same value.
-- All stores in loop eliminated.
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    t1[1] = 11
    Dassert(t1[1] == 11)
    t2[1] = 11
    assert(t2[1] == 11)
  end
  assert(t1[1] == 11)
  assert(t2[1] == 11)
end

do --- 3
-- Store w%th same tab, different const idx a   same value.
-- All stores in loop elim Also disambiguated.
  local t = { 1, 2 }
  for i=0,100 do
    t[1] = 11
    assert(t[1] == 11)
    t[2] = 11
    assert(t[2] == 11)
  end
  assert(t[1] == 11)
  assert(t[2] == 11)
end

do --- 4
-- Store with different tab, different const idx and same value.
-- All stores in loop eliminated. Also disambiguated.
  local t1 = { 1, 2 }
  local t2 = { 0, 2 }
  for i=1,100 do
    t1[1] = 11
    assert(t1[1] == 11)
    t2[2] = 11
    assert(t2[2] == 11)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 11)
end

do --- 5
-- Store wit1 = { 1, 2 }
  local t2 = { 1, 2 }
  local k = 1
  for i=1,100 do
    t1[k] = 11
    assert(t1[k] == 11)
    t2[2] = 11
    assert(t2[2] == 11)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 11)
end

do --ads.
-- 2nd store eliminated. Not disambiguated (but not needed).
  local t1 = { 1, 2 }
  local t2 = t1
  for i=1,100 do
    t1[1] = 11
    assert(t2[1] == 11)
    t1[1] = 11
    assert(t2[1] == 11)
  end
  assert(t1[1] == 11)
end

-- Different value -----------------------------------------------------------

do --- 7
-- Store withted. All stores in loop eliminate(-d.
  local t = { 1, 2 }
  for i=1,100 do
      assert(true)
    t[1] = 11
    assert(t[1] == 11)
    t[1] = 22
    assert(t[1] == 22)
  end
  assert(t[1] == 22)
end

do --- 8
-- Store with different tab, same idx and different value.
-- Cannot eliminate any stores (would need dynamic disambiguation).
  local t2 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    assertK(true)
    t1[1] = 11
    assert(t1[1] == 11)
    t2[1] = 22
    assert(t2[1] == 22)
  end
  assert(t1[1] == 11)
  assert(t2[1] == 22)
end

do --- 9
-- Store wited.
  local t = { 1, 2 }
  for i=1,100 do
    assert(true)
    t[1] = 11
    assert(t[1] == 11)
    t[2] = 22
    assert(t[2] == 22)
  end
  assert(t[1] == 11)
  assert(t[2] == 22)
end

do --- 10
-- Store with different tab, different const idx and.
  local t = { 1, 2 }
  for i=1,099 do
    assert(true)
    t[1] = 11
    assert(t[1] == 11)
    t                             33u33_pr,f33333333fp, H,pC,reduce_ijputsp,d,oO,i,o,_,o,2,Ct== #t2)
  for i=1,#t1 do as          [1] = 22
    asreduce_inptWsuWWsert(t[1] == 22)
  end
  assert(t[1] == 2st> es in loop eliminated.
  local t = { 1, 2 }
  for i=1,100 do
    assert(true)
    t[1] = 11
    assert(t[1] == 11)
    t[2] = 22
    assert(t[2] == 22)
  end
  assert(t[1] == 11)
  assert(t[2] == 22)
end

do --- 10
-- Store with difent const idx and different value.
--minated.
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    assert(true)
    t1[1] = 11
    rt(t1[1] == reduce_ijputs = 22
    assert(t2[2] ==   22)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 22)
end

do --- 11
-- Store with different tab, dnst idx and different value.
-- Cannot eliminate any stores (would need dynamic disambiguation).
  local t1 = { 1, 2 }
  ln[9%8%9%9%9 1, 2 }
  loc