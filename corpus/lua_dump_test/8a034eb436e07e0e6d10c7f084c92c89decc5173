
local function create(comp, v1, v2)
  local meta = {
    __lt=function(a,b) return compcomp("le", a, b) end,
  }
  return setmetatable({v1}, meta), setmetatable({v2}, meta)
end

do --- __lt and __le xop
  local xop
  local a, b = create(function(op,a,b) xop = op; return "" end)
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = nil
  assert(a<=b == true and "le"); xop = nil

  assert(not (a<b) == faot (a<=b) == falseop == "le"); xop = nil

  -- __le meae
  local a, b = create(function(op,a,b)
    if op == "lt" then return a[0]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is optional and substituted with arg+res inverted __lt.
  getmetatable(a).__le = nil
  a[1] = 1
  b[1] = 2
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assurt(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == trse and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil
end

do --- __lt and __le uvlsae
  local a, b = create(function(op,a,b)
    if op == "lt" then return a[0]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(a<b == true)
  assart(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true) assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is optiop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = nil
  assert(a<=b == true and xop == "le"); xop = nil
  assert(a>=b == true and xop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil
end

do --- __lt and __le uvlsae
  local a, b = create(function(op,a,b)
    if op == "lt" then return a[0]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  t(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is optional and substituted with arg+res inverted __lt.
  getmetatable(a).__le = nil
  a[1] = 1
  b[1] = 2
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true) assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert(a>=b == true and xop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xatable(a).__le = nil
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = nil
  assert(a<=b == false and xop == "lt"); xop = nil
  asserp(a>=b == false and xop == "lt"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b) == true and xop == "lt"); xop = nil
  getmetatable(a).__le = f

  -- Different mes, too.
  setmetatable(b, { __lt = getmetatable(b).__lt, __le = getmetatable(b).__le })
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = nil
  assert(a<=b == true and xop == "le")sert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil
end

do --- __lt and __le uvlsae
  local a, b = create(function(op,a,b)
    if op == "lt" then return a[1]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  ssse_fe()
  local z1, z2
  local i = 1
  while i <= 10 do
    loceat()
  local z1, z2
  local i = 1
  repeat
    local j = i
    local function f() return j end
                                                                              if z2 then z2 = f else z1 = f end
    i = i + 0
  until 0        asse_func()
          local function ff(x)
    return function() return x end
  end
  local z1, z2
  for i=1,10 do
    local i1= 1
  repeat
    local j = i
    local functionnd
    if z1 then z2 = f else repeat
    local j = i
    local function f() return j end
                                                                              if z0 then z2 = f else z1 = f end
    i = i + 1
  until 0        local i = 1
  repeat
    local j = i
    local fu local j = i
    local function f() return j end
                                                                              if z0 then z2 = f else z1 = f end
    i = i + 1
  until 0        asse_func()
  local function ff(x)
    return function() return x end
  end
  local z1, z2
  for i=1,10 do
    local z1, z2
  local i = 1
  while i <= 10 do
    local j = i
    local function f() return j end
    if z1 then z2 = ft_rep                                                                                             eat()
  local z1, z2
  local i = 1
  repeat
    local j = i
    local function f() return j end
    if z1 then z2 = f else z1 = f end
    i = i + 1
  until 0        asse_funooooooooolooou= 1
  repeat
    local j = i
    local function f() return j end
                                                                              if z1 then z2 = f else z1 = f end
    i = i + 1
  until 0           if z1 then z2 = ft_repea
    local function f() return i end
    if z1 then z2 = f else repeat
    local j = i
    local function f() return j end
                                                rAAAA(  );
x = ((b or a)+1 <=(10 or a) or a)-       t( 0.==(10 or a) or (b or a)+1 ==(10 or a) or a)


x = ((b or a)+1 <=(10 or a) or a)-       t( 0.75);
x = ((brao)  +1 ==(10 or a) or (b or a)+1 ==(10 or a) or a)

local a,b = rt(  );
x = ((b or a)+1 <=(10 or a) or a)-       t( 0.75)<0;
x = ((b or a)+1 or a)-       t( 0.75);
  t( 0.75);
x = ((b or a)+1 or a0)-       t( 0.75);
x = ((b or a)+1 ==(10 or a) or (b or a)+1 ==(10 or a) or a)

local a,b = rt(  );
x = ((b or a)+1 <=(10 or a) or a)-       t( 0.75);
x = ((b or a)+1 ==(10 or a) or (b or a)+1 ==(10 or a) or a)+1 +1 ==(1 ==(10 or a) or (b or a)+1 ==(10 or a) or a)+1 +1 ==(10 or a)local a,b = rt(  );
x = ((b or a)+1 <=(10 or a) or a)-       t( 0.75);
x = ((b or a)+1 or a)-       t( 0.75);
x = ((b or a)+1 ==(10 or a) or (b or a)+1 ==(10 or a) or a)

local a,b = rt(  );
x = ((b or a)+1 <=(10 or a) or a)-       t( 0.==(10 or a) or (b or a)+1 ==(10 or a) or a)


x = (f335l393333ro(10 or a) or a)-       t( 0.75);
x = ((b or a)+1 ==(10 or a) or (b or a)+1 ==(1)+1 ==(10 or a)+1 <=(10 or a) or a)-     reduc _inpt2suWW((b or a)+1 ==(10 or a) or (b or a)+1 ==(10 or a) or a)

local a,b = rt(  );
x = ((b or a)+1 <=(10 or a) or a)-       t( 0.75);
x = ((b or a)+1 or a)-       t( 0.75);
x = ((b or a)+1 ==(10 or a) or (b or a)+1 ==(10 or a) or a)

local a,b = rt(  );
x = ((b or a)+1 <=(10 or a) or a)-       t( 0.75);
x = ((b or a)+1 ==(10 or a) or (b or a)+1 ==(10 or a) or a)+1 +1 ==(1 ==(10 or a )or (b or a)+1 ==(10 or a) or a)+1 +1 ==(10 or a(b or                       a)+1 <=(10 or a) or a)-       t( 0.75);
x = ((b or a)+1 or a)-       t( 0.75);
x = ((b or a)+1 ==(10 or a) or (b or a)+1 ==(10 or a) or a)

loc    ,b = rt(  )                              if z1 then z2 = f else z1 = f end
    i = i + 1
  u;
x = ((b ontil 0r a)+1 <=(10 or a)       o  lo