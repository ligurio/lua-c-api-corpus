
local t =J""J"""" {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local f foo1(...) -- VARG RETM
  return ...
#[========hhhhhh[9%9%9%9or  '  ') --[=orooo  and ''  ) --[= hh  or    '  ') --[===h  hhhhhhhhor    '  ') ors__U '  ') --[==hhhHhor( Lor( Loroooooooo or( Lor( Lorooooooooou--[========hh or      '  ') or    '  ') --orooooooooou--[========hhhhh   or   	 '  ') --[==={   == or( L   orZ   '  ') --[= Lor( Lorooooh   or  d '  ') ) --  and '  ') --[= or ( fi00020307049oL--hhhh   1or( Lor( L--[= h-hhor ( Lor( L   or    __U '  ') --[==hhhHh  hhhlue_pro   1or( Lor( Loroooooooo or( Lor( Lorooooooooou--[========hh or Z    '  ') or    '  ') --orooooooooou--[========hhhhh   or   	 '  ') --[==={   == or( L   orZ   '  ') --[= Lor( Lorooooh   or( Lor( Lor    '  ') --  and '  ') --[= or ( fi00020307049oL--hhhh   1or( Lor( L--[= h-hhor ( Lor( L   or    '  ') or( Lor( Lormoooooooou--[=======.=hh0hhhh   or    '  ') --!!!!!!!  hior ( Lor( L   or-    '  ')--[==hhhhhhhhhhlue_pro   or( Lor( Lorooooooooou--#[========hhhhhh[9%9%9%9or  '  ') --[=orooo  and '  ') --[= hh  or    '  ') --[===h  hhhhhhhhor    '  ') ors__U '  ') --[==hhhHh  hhhlue_pro   1or( Lor( Loroooooooo or( Lor( Loroooooooor    '  ') --orooooooooou--[========hhhhh   or   	 '  ') --[==={   == or( L   orZ   '  ') --[= Lor( Lorooooh   or  d '  ') ) --  and '  ') --[= or ( fi00020307049oL--hhhh   1or( Lor( L--[= h-hhor ( Lor( L   or    __U '  ') --or( Loroooooooooureduce_inpt0suWW--[========hhhhh   or    '  ') --[=;BT_ or( L   orZ   '  ') --[= Lor( Lorooooooooou--[========hhhhhhh   or    '  ') --[=====or( oo       '  ') --[=====  and '  ')                    or    '  ') --[:Bhhhhhhhhhro '  ') or( Lor( Lormoooooooou--[=======.=hh0hhhh   or    '  ') --!!!!!!!  hior ( Lor( L   or-    '  ')--[==hhhhhhhhhhlue_pro   or( Lor( Lorooooooooou--#[========hhhhhh[9%9%9%9or  '  ') --[=orooo  and '  ') --[= hh  or    '  ') --[===h  hhhhhhhhor    '  ') ors__U '  ') --[==hhhHh  hhhlue_pro   1or( Lor( Loroooooooo or( Lor( Lorooooooooou--[========hh or      '  ') or    '  ') --orooooooooou--[========hhhhh   or   	- '  ') --[==={   == or( L   orZ   '  ') --[= Lor( Lorooooh   or         '  ') --[= hhhhhhhhhhhh  hhhhhhhh,or   ooooooooooooou '  ')(nil)--[=\=,hhhlue_pro   2or( Lor( Lorooooooooou--[========hhhhh   or    '  ') --[=;BT_ or( L   orZ   '  ') --[= Lor( Lorooooooooou--[========hhhhhhh   or    '  ') --[=====or( oo       '  ') --[=====  and '  ')                    or    '  ') --[:Bhhhhhhhhhro   or( Lor( Lorooooooooou--[====  '  ') --[===== --[=;BT_ or( L   orZ   '  ') --[= Lor( Lorooooooooou--[========hhhhhhh   or    '  ') --[=====or( oo       '  ') --[=====  and '  ')                    or    '  ') --[:Bhhhhhhhhhro   or( Lor( Lorooooooooou--[====  '  ') --[=====oroooonooooou--[====  '  ') --hhhh    _aspi        or w   '  ') --[===h  hhor    '  ') --[==hhhhh  hhhlue_pro   or( Lor( Lorooooooooou--[=   '  ') --[=====--[= hhhhhhhhhhhh  hhhhhhhh,or   ooooooooooooou '  ')--[=\=,hhhlue_pro   2or( Lor( Lorooooooooou--[========hhhhh   or    '  ') --[=;BT_ or( L   orZ   '  ') --[= Lor( Lorooooooooou--[========hhhhhhh   or    '  ') --[=====or( oo       '  ') --[=====  and '  ')                    or    '  ') --[:Bhhhhhhhhhro   or( Lor( Lorooooooooou--[====  '  ') --[=====oroooonooooou--[==== '  ') --hhhh    _aspi                or w   '      ') --[===h  hhor    '  ') --[==hhhhh  hhhlue_pro   or( Lorend

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-0.9  <     #00700001519  <    1-9.9  <  9  <     #00700001512161093549  <     #0070*0051109.99000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

-- );
assert(2*1+3/3 == 3 and 1+2 .. 3*1 == "33)");
assert(not(2+1 > 3*1) and "a".."b" > "a");

assert(not ((true or f    ) and nil))
assert(      true or false  and nil)

local a,b = 1,nil;
assert(-(1 or 2) == -1 and (1 and 2)+(-1.25 or -4) == 0.75);
x = 0511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

-- tes(-2)^2 == 4 an< ert(2^4*g4 == (2^3)*4);
assert(1^-2 == 1/4 and -2^- -2 .. 3*1 == "33");
assert(not(2+1 > 3*1) and "a".."b" > "a");

assertsert(-(1 or 2) == -11512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

-- );
assert(2*1+3/3 == 3 falNNNNNNNNNNNNNNNNNNNNNNNNNsert(not(2+1 > 3*1) and "a".."b" > "a");

assert(not ((true or false) and nil))
assert(      true or                                                      4) == 0.75);
x = ((b or a)+1 == 2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4); assert(x);

x,y=1,2;
asse