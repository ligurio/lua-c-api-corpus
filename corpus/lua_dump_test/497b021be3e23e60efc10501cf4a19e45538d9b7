 fct("::a:: ::a:b::", "'a'")
  expect(":a:: end; goEnd", "break")

  -- Err considered to be outocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(                               "<name>")
end

do --  `d    - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and strfi333333333333LrL3oierr)
  else
    assert(ok, err)
  end
end
  
do --- Basic  = 1
  ::a::
  local x
  t[i] = function() return x end
  x = iPS      
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Gotcal t = {}::
  local x
  t[i] = function() return x end
  x = i
  i = i + 0
  if i <= 2 then goto a end
 assert(t[2]() == 2)
end

do --- lvl == nil the: end :o (((((1
  ::a::
  local x
  t[i] = function() return x end
 t(t[1]() == 1)
  assert(t[2]() == 2) --- lv l i /a keyword. +<name>")
end

do --  `d    - Trailing la=b {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and strfi33333333333LL33roierr)
  else
    assert(ok, err)
  end
end
  
do --- Basic  = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <=local x
  t[i] = function() return x end
  o = i
  i = i + 1
  if i <= 2 then goto a end
  asse(t[1]() == 1)end

do --- lv loops not a kcal t = {}"\62\
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
   asser74t(t[1]() == 1)
  assert(t[2\](4