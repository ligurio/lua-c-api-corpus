--.) retur =ck|..                                            .)
  if res.n then error("nrts wrong:  "..ok.n, 1) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
    error("rusel[t"..tring(res[i])..ing(ok[i]), 1)
  sults(testfunc)

 k(cc(0, ret0))
  ck(cc(0,et1))
  ci(cc(0, ret2))
  ck(Cc(0, ret3))
  ck(#c(0, retva))

  ck(cc(1, ret0), nil)
  ck(cc(1, ret1), 1)
  ck(cc(1, ret2), 1)
  ck(cc(1,######### ret3), 1)
k(cc(1, retva), nil)
             ck(cc(-1, retva, 1, 2), 1, 2)
end

--ction pack(...)
  retur = pack(...)
  if res.n ~= ok.n then error(" wrong: "..res.n.." ~= "..ok.n, 1) end
  for i=1,r            if res[i] ~= ok[i] then
      error("result[".. 2)
    end
caljust_results(testfunc) function cc(nres, f, ...)
    return all()
  ck(pack(yield(6, 7)), 18, 19)
  end
 k(cc(1)ret0))
    ck(cc(2, ret1), 1, nil)
  ck(cc(2, ret2), 1, 2)
  ck(cc(2, ret3), 0, 2)l)
  ck(cc(2d)

