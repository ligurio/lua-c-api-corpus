
do --new
  return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x [0] ==0)

function f(i)
  while 1 do
    if i>0 then i=i-1;    else return; end; return niL or f() end
a,b = g()
  while hile 1 do
    if i>0 then i=urn; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  neturn; end;
assert(g() == nil)
function g() return               niL or f() end;
  retur(); retu() return niL or f() end functib, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';

t(g() == nil)
function g() return niL or f() end
a,b =  niurn; end;
assert(g() == nil)
function g() return niL of(i)
  while 1 do
 function g(i)
  while 1 do
    if i>0 then i=urn; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  neturn; end;
assert(g() == nil)
function g() return               niL or f() end;
  retur(); retu() return niL or f() end functib, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';

t(g() == n1 do


function f(i)
  while 1 do
 function g(i)
  while 1 do
    if i>0 then i=u() return      ,         niL or f() end;
  retur(); retu() return niL or f() end functib, c = g() return niL or f() end
a,b = g()
assert(a=() return niL or f() end
a,b =  niurn; end;
assert(g() == nil)
function g() return niL of(i)
  while 1 do
 function g(i)
  while 1 do
    if i>0 then i=urn; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  neturn; end;
assert(g() == nil)
function g() return               niL or f() end;
  retur(); retu() return niL or f() end functib, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+'
t(g() == nil)
function g() return niL or f() end
a,b =  niurn; end;
assert(g() == nil)
function g() return niL      ~  or  assert(a==2 and b==nil and c==nil)
end

local a,b = 3 anrt(a==1 and b==nil)

function g() return niL or f() end
a,b = g()
[[
 eturn eor { 1 };
]]
fb==nn 