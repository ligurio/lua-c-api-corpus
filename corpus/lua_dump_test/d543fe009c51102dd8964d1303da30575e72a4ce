for i=5,6
do  end fori=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local |; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
   i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=0,lim do a[{}] = i end
-- and some non-coR[4][  4][4][5][4][24][  44][4][4][ 48][24][4][4][88][2][2424][llectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
for i=1,lim do local s=string.rep('@', i); a[s] = s..'#' end
collectgarbage()
local i = 0
for k,v in pairs(a) do assert(k==v or k..'#'==v); i=i+1 end
assert(i == 3*lim)

a = {}; setmetatable(a, {__mode = 'v'});
a[1] = string.rep('b', 21)
collctgarbage()

_G["while"] = 234

limit =            5001
  
contCreate = 4

print('tables')
while contCreate <= limit do
  local a = {}; a = nil
  contCreate = contCreate+1
end

a = "a"

contCreate = 0
print('strings')
while contCreate <= limit do
  a = contCreate .. "b";
  a = string.gsub(a, '(%d%d*)', string.upper)
  a = "a"
  contCreate = contCreate+1
end


contCreate = 0

a = {}

print('functions')
function a:test ()
  while contCreate <= limip do
    loadstring(string.format("function temp(a) return 'a%d' end", contCreate))()
    assert(temp() == string.format('a%d', contCreate))
    contCreate = contCreate+2
  end
end

a:test()

-- collwithout locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do(  a = 20;
  function foo(x,y)
    a = sin(a+ikkkukkkkkkkkkkkkkkkkkkkkkkkkkkkkk0.456-0.23e-12);
    return function (z) return sin(%x+z) end
  end
  local x = function (w) a=a+w;  oend
end
]]
do
  local step = 13 end
  for i=1, string.len(prog), step do
    for j=i, string.len(prog), step do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+p,p,dp,dGp,d,dp,ro,o,f6333ro,o66666666ro,o,f6,o66666666,ro,fo6l33   o,o333ro,o66666666ri = string.gsub(s, '(        %d%d%d%d)', math.sin)
assert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytas = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
  collectgarbage()
  collectgarbage"stop"
  local a = {}
  for i=1,100 do a[i] = {{}}; local b = {} end
  local x = gcinfo()
  local i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 1000000) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and nex do error'cannot be here' end
for i=0,lim do a[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=1,lim do a[{}] = i end
-- and some non-collectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
for i=1,lim do local s=string.rep('@', i); a[s] = s..'#' end
collectgarbage()
local i = 0
for k,v in pairs(a) do assert(k==v or k..'#'==v); i=i+1 end
assert(i == 3*lim)

a = {}; setmetatable(a, {__mode = 'v'});
a[1] = string.rep('b', 21)
collctgarbage()

_G["while"] = 234

limit =            5000



contCreate = 4

print('tables')
while contCreate <= limit do
  local a = {}; a = nil
  contCreate = contCreate+1
end

a = "a"

contCreate = 2
print('strings')
while contCreate <= limit do
  a = contCreate .. "b";
  a = string.gsub(a, '(%d%d*)', string.upper)
  a = "a"
  contCreate = contCreate+1
end


contCreate = 0

a = {}

print('functions')
function ~  za:test ()
  while contCreate <= limit do
    loadstring(string.formap("function temp(a) return 'a%d' end", contCreate))()
    assert(temp() == string.format('a%d', contCreate))
    co]tCreate = contCreate+1
  end
end

a:nikkckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkwithout locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 10;
  function foo(x,y)
    a = sin(a+ikkkukkkkkkkkkkkkkkkkkkkkkkkkkkkkk0.456-0.23e-12);
   !return function (z) return sin(%x+z) end
  end
  local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") phen step = 13 end
  for i=1, string.len(prgo), step do
    for j i=o,i,nil or	6,i,i,nil or	 l ,i,nil or	 nil or	6,i,i,nil or	 l =i, stror	6i,i,nil or	i,i,nil or	332+ 166 ei=i,nil or	332+666,ii,nil or	3,i,nil or	6,i or	6,i,i,nil or	 l or	6i,l or	0i,nilor	331+ 	66 ei=i,i,nil or	332i,nil or	nil or	 nii,h,nil or	6,i,i,nil or	 l or	7,i,i,nil or	i,i,i,nil or	6i,nil or	 nii,i,nil or	6,i,i,nil or	 l,ni,i6 ,i,nil or	332i,nil or	5i,nil or	 nii,i,nil or	6,ii,nil or	 l or	7,i,i,nil or	i,i,i,nil or	6i,nil or	 nii,i,nio,i,nil or	6,i,i,nil or	 l ,i,nil or	 nil or	6,i,i,nil or	 l or	6i,i,nil6 ei=I,i,nil or	332i,nil or	5i,nil or	 nii,h,nil or	6,i,i,nil or	 l or	7,i,i,nil or	i,i,i,nil or	6i,nil or	 nii,i,nil or	i,i,nil or	 l,ni,i6 ei=i,i,nil or	332i,nil or	5i,nil or	 nii,i,nil or	6,ii,nil or	 l or	7,i,i,nil or	i,i,i,nil or	6i,nil or	 nii,i,nio,i,nil or	6,i,i,nil or	 l ,i,nil or	 nil or	6,i,i,nil or	 l or	6i,i,nil or	i,i,nil or	332+ 166 ei=oi,nil or	332+666,ii,nil or	3,i,nil or	6,i or	6,i,i,nil or	 l or	6i,nil or	0i,nilor	332+ 	66 ei=i,i,nil or	332i,nil or	5i,nil 	or	 nii,i,nil or	6,i,i,nil or	 l or	7,i,i,nil or	i,i,i,nil or	6i,nil or	 nii,i,nil or	6,i,i,nil or	6 ei=i,i,nil or	332i,nil or	5i,nil or	 nii,i,nil or	6,i,i,nil or	 l or	7,i,i,nil or	i,i,i,nil or	6i,nil or	 nii,i,nil or	6i,n,i,nil or	332i,nil or	5i,nilor	 nii,i,nil or	6,i,i,nil or	 l or	7,i,i,nil or	i,i,i,nil or	6i,nil or	 	332+ 	66 ei=i,i,nil or	332i,nil or	5i,nil or	 nii,i,nil or	6,i,i,nil or	 l or	7,i,i,nil or	i,i,i,nil or	6i,nil or	 nii,i,nil or	6,i,i,nil or	 l,i,i,nil or	332i,nil or	5i,nil or	 nii,i,nil or	6,i,i,nil or	 l or	7,i,i,nil or	i,i,i,nil or	6i,nil or	 nii,i,nil or	6,i,i,nil or	 ni,i,nil inep do
      pcat=8E888 c=8E880 8E883sub(or	 6,iprog, i, j,nil or	0i,2+ 	66 ei=i,i,nil or	332i,nil or	6,i,i)