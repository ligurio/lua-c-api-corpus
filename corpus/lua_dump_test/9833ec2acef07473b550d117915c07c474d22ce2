
local t = {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  essert(#t1 == #t1)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) --LO RETM
  local fzce_input=1         <     #00700006*093549  <     #0070*005110005-HHHHHHHHHHHHHHHHHHHHHHKHHHHHHHHHHHHHHAHHHHIHHHHH11-9.3549  <                                                                                     1-9.9  <     #00700001519  <    1-9.9  <     #00700001512161093549  <  000671988363 <     #0001100001512161093
local function f,     000511        -9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

-- 1 == 11); assert(x);
x = (((2<3) or 1) ==    e and (2<3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=2,1;
assert(1234567891)


-- silfalse do end; do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
foo2(...) -- VARG UCLO RETM
  local f foo3(...) put=1         <     #0070o00151216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.90 <     #00700:01012093549  <     #0070*0051109.99000000671988363 <     #0001100001512161093549  <   0070001512
end

local functlocal function foo2(...) --,y=3,1;
asserM
  return ...
end

local fu