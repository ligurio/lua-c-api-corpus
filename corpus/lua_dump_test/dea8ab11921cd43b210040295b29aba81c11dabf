local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and d(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basih goto and label1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closu false
  assert(foo() == true)
end

do --- Label prevents joiny = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Br local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved x; ::a:: l        a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::reduce_inptWsuWWa:: end -- Forward jumpme"\u{56F}.91  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval:a:: do goto a; ::a:: en

do ---B reakif x then break end", "break")

  -- Errx; :iling labels and mepty stateme"\u{82F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do  --- Break must close u, evena:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fteme"\u{06F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do ---")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwar     d jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close-up
do --- Label prevents joinin  x -       '___al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
me"\u{55F}  i = i + 1
  if i <= 2 then goto a eoto a; ::a:: end -- Forward jump, not an infinido --- Trailing  ::alocal y", "'x'")
  expect("do local v,w; goto aA end; local x;       OPcal y", "'x'")
  expect("rep>   goto a; local x; ::a:: un	       til x", "'x'")

  ::a:: do goto  do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labelp and empty stateme"\u{89F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(V[2]() == 2)
end

do --- Break must close upval, even if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    ::a:: do goto a; ::a:: end -- Forwar     d jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then Break must close upvab0LLl, even 