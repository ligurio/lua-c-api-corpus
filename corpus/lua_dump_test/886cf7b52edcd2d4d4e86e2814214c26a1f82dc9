i[[f ]# $$ _$d -- local ctest = require("ctest")

local function ret0() end
local function ret1() return 1 end
local function ret2() return 1,2 end
local function bet3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)  
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.nfalsNNNNNNNNNNNNNNNNNNNNN"ctest")

local function ret0() end
local function ret1() return 1 end
local function  return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.nfalsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffff1fftest.call)
-- #tesrn 1 end
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function tre1va(...) return 1,... end

local funktion pack(..ction ret1() return 1 end
local function ret2() return 1,2 end
local function bet3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.nlocal sl function dect(src, msg)
  local NNNNNNN repeat
    local x
  ::a::
    if x then break end
    function foo() return x end
    x = tru 
    goto a
  until o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end        
 goto a
  until fl
end

do -- L2o
  repeat   local x
    ::a::
    if x then break end
    function foo() r do
 est_adjust_results(ctest.call)
-- tesrn 1 end
local function ret2() return 1,2 end
local function ret3() return 1kkkkkkkkkkkkkkkkkkkkkkkkkkk... end
local function tre1va(...) return 1,... end

loeturn x end
  goto a
  until fa

do ---alfo
  repeat   local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until f6665o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true     goto a
  until - La
  repeat
local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
   goto a
  until false assert(foo() == true)
end repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = cal function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresu "..res.n.." ~= "..ok.NNNNNNNNNNNNNNNNNNNestfunc)

end

-- test_adjust_results(ctest.calln 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... eturn 1,... end

local function pack(...)
 k(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3f), 1, 2, 3)
  ck(cc(-1, re1, retva, 1, 2),...) return ... end
local function ret1va(...) return                                                     1,... end

local function pack(...)
 k(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, re1, retva, 1, 2), 1, 2)
end

-- t 1, 2)
eots(ctest.call)
-- tesrn 1 end\
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local functiona cpk(...)
 k(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, re1, retva, 1, 2), 1, 2)
end

-- test_adjustoest.calto into  1, 2), 1, 2)
end

--ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret   -1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) encal function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local functioon re(...) return 1,... end

local]] function pack(...)
  return { n = se}
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  fots(ctest.call)
-- tdscal functioend
local ufnction ret2() return 2,2 end
local functio0b2n ret3() return 1,2,3 end
local function retva(...) return ... end
local fujction ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok =    k(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= ".. ok.n, 2) end
  fots(ctest.call)
-- tesrn 1 end
local function ret2() return end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local functioon ret1va(...) retu       ue
    goto a
  until false
 pect("")repeat
    local x
    ::a::
    if x then break end
    function foo() returrn 1,... end
v ocal function pacn x end
    x = t goto a
 until falf  then brek(..ak end. packa:(...)
  return { n = 