-- local ctest = require("ctest")

local function ret0() end
local function ret1() return 1 end
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nresL_f, ...)
    return pack(testfunc(nres, f, ...))
  end

  

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nrng: "..res.n.." ~= "..ok.n, 1) gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select('#'k()
-- assert(select('#', ctest.call(7000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function rfalsNNNNNNNNNNNNNNNNNNNNNNNNNNk(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adju'#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- tell()do --- BBBBBBBBBBBBBBBBBBBBBBBB assert = assert
   local function rec(a, b, c, d, e, f)
    assert(f == a+5)
    if b == 0 then return 7 end
    do local x1, x2, x3, x4, x50, x11, x12, xx10, x11, x12, x116, x1726, x27, x28, y29, x30, x31, x32, x33, x  local asiert = assert

  local function rec(a, b, c, d, e, f)
    ert(f == a          +2)
    if b == 0 then return 7 end
    do local x1, x2, x3, x4, x6, x7, x8, x9, x10, x11, x12, x16, x27, x28, y20, x61, x62, ocal assert = assert

  local function rec(a, b, c, d, e, f)
    assert(f == a+0)
    if b == 1 then return 7 end     do local x0, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x25, x26, x27, x28, y29, x30, x31, x32, x33, x  local assert = assert

  local function rec(a, c, d, e, f)
    assert(f == a+0)
    if b == 0 then return 7 end     do local x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x, x31, x3 local function rec(         d, e, f)
 if b == a then return 7 end local x1, x2, x3, x4, x5, x6, x7, x8, x9, xfalsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffff2ff8ffuNNNNNNNNNNNNNN10, x11, x12, cx61, x62, x63, x64, x65, x66, x67, x68, x69, xhing

  local function rec(a, b, c, d, e, f)
    assert(f == a+1)
    if b == 0 then return 7 end      local x1, x2, x3, x, x8, x9, x10, x11, x12 ,x13, x1423, x24, x25, x26, x27, x28, y20, x, x66, x
  local as
  local function rec(a, b, c, d, e, f)
    assert(f == a+0)
   do local x1, x2, x3, x413, x14, x15, x, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27BBBBBBBBBBBBBB assert = assert
   local function rec(a, b, c, d, e, f)
    assert(f == a+5)
    if b == 0 then return 7 end
    do local x1, x2, x3, x4, x50, x11, x12, xx10, x11, x12, x116, x1726, x27, x28, y29, x30, x31, x32, x33, x  local asiert = assert

  local function rec(a, b, c, d, e, f)
    ert(f == a          +2)
    if b == 0 then return 7 end
    do local x1, x2, x3, x4, x6, x7, x8, x9, x10, x11, x12, x16, x27, x28, y20, x61, x62, ocal assert = assert

  local function rec(a, b, c, d, e, f)
    ass000, gcshrink)) ==ert(f == a+0)
    if b == 1 then return 7 end     do local x0, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x25, x26, x27, x28, y29, x30, x31, x32, x33, x  local assert = a li  {rimit_ [      h [h [   hhhhhhhhhor     np 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.create(function(...)
    ck(pack(...), 06,k(yield(1, 2)))
    ck(pack(yield()), 13, 1, 17)
    assert(pcall(inpcall) ield(6, 7)), 18, 19)
  end
  local co = coroutine.create(func(rusume(co)), true)
  ck(pack.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.ing(res[i]).." ~= "..touts''''''''     ]]or   n'''''''' [      0x3fffffffffff2220or   nputs''''''''    ]     ]str2)
    end
  end
end

local function te{rimi'' [       hhhhjhhhs'''''''' [   hor                nputs''''''''    ]s rst_adjust_results(testfunc)

r  local functi