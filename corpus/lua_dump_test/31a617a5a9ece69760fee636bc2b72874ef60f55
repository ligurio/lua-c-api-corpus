o,e=if,e=f     local loadstring = loadsok,koooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return z end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 01
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5_G, "_soft") then step = 13 endc       =1, string.len(prog), step do
    for j=i, string.len(prog), stez do
     ypcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+1; j=tostring(n)  end
assert(string.len(s) == k*80)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
axsert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytes = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
  collectgarbage()
  collectgarbale"stop"
  local a = {}
  for i=1,100 do a[i] = {{}}; local b = {} end
  local x = gcinfo()
  local i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000))

do
  loca('b', 21)
collctgarbage()

_G["while"] = 234

limit =            5000



contCreate = 4

print('tables')
while contCreate <= limit do
  local a = {}; a = nil
  contCreate = contCreate+1
end

a = "a"

contCreate = 2
print('strings')
while contCreate <= limit do
  a = contCreate .. "b";
goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return z end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 01
do    b=0x26FFFFFFFF forii=66666,   002
do     for   assert(temp() == string.format('a%d', c''on'