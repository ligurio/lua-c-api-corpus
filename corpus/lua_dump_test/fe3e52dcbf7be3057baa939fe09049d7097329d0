anly_ascii=0
l'['Qr''r''''''''''Qr''r''''''''''''''N'['Q ''r'''['Qr''r'''''\''''''N''''''''''''r'''''\''''''''N''sl'['Qr''    zl'['l'['Qr''r'''['Qr''p'''''\''''''''N''sl'['Qr''r''''''''''''''N''sl'['Qr''r'''['Qr''r'''''\''''''''Qr''r''''''''''''''N''sl'['Qr''r'''['Qr''p'''''\''''''''N''sl'['Qr''zl'[':sl'['Qr''zl'['Qr''r'''''''''''''['Qr''r'''['Qr''r'''''\''''''N''''''''''''''N''sl'['Qr''r'''['Qr''p''''''''''''N'['Q ''r'''['Qr''r'''''\''''''N''''''''''''r'''''\''''''''N''sl'['Qr''    zl'['l'['Qr''r'''['Qr''p'''''\''''''''N''sl'['Qr''r''''''''''''''N''sl'['Qr''r'''['Qr''r'''''\''''''''Qr''r''''''''''''''N''sl'['Qr''r'''['Qr''p'''''\''''''''N''sl'['Qr''zl'[':sl'['Qr''zl'['Qr''r'''''''''''''['Qr''r'''['Qr''r'''''\''''''N''''''''''''''N''sl'['Qr''r'''['Qr''p'''''\''''''''N''sl'['Qr''zl'['Qr''r''''''''''''''N''sl'['Qr''r'''['Qr''r'''''\''''''''''N=4097
only_icfzr''''''''''''''N''sl'['Qr''r'''['Qr''p'''''\''r''p'''''\'''''''''\''''''''Qr''r''''''''''''''N''sl'['Qr''r'''['Qr''p''''''''''N''sl'['Qr''r'''['Qr''p'''''\''''''''N''sl'['Qr''zl'['Qr''r''''''''''N''sl'['Qr''r'''['Qr''p'''''\''''''''N''sl'['Qr''    zl'['l'['Qr''r'''['Qr''p'''''\''''''''N''sl'['Qr''r''''''''''''''N''sl'['Qr''r'''['Qr''r''local loadstrin = oalng or load

local function expect(ssc, msg)
  local nd
end
  
do --- Basih goto and label until x", "'x'")

  ::a:: do goto a; goto a end
  assert(t[1]() == 1)
  assert(t[2]()) local x
  ::foo::
  local y
  aert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved x; l x", "'x'")

  ::a:: do goto a; ::reduce_inptWsuWWa:: end -- Forward jur56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Beven if closak")

  -- , "'x&")
  expect("repeat goto a; local x;: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fteme"\u{56F}  i = i + 1
  if i <= 2 then goto a end i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[1]() == 2)
end

do ---
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true + 0
  if k < 2 then goto foo end
end

do --- escope.
  t("goto a; local x; A:a%:: local y", "'ix'")
  expect("do cal x; ::a:: l", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{56 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- B     '___al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Bre       vp(=o33 0 }  [f  1
	while true do
	  cope.
  expect("goto[a; local x; :::a:: local y", "'x'")
  expect("repeat got: until'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, prevents j__al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 0
  if k < 2 then goto foo end
end
   if key == nil then dstring(sr[1]() == 2)
end

do --- Breako; lo=cal x; ::a:: until x", "'x'")

  ::a::goto a end
  assert(t[1]() == 1)
  assert(t[2i{9,7,s,4,3,{9,4,3,{3,77,3,W,3,{9,3,4,4,3,{9,4,3,{3,7,]() == 2)
end

do --- l x
  ::foo::
  locser0t(y == nil)
 r  ut= ye
  k = k + 1
  if k < 2 then goto foo end
end

do ---B reakif x then break e:: until x", "'x'")

  ::a:: do goto 3a; ::        a:: end -- Forward jum9Ep, not an in  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)l'['Qr''r'''['Q,W,3,{r''p'''''\''''''''N''sl'['Qr''zl'['Qr'#7,7'r''''''''''''''N''sl'[,'Qr3''r'''['Qr''r