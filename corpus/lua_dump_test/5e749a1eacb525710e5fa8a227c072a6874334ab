
do --lew) == nil)
function g() return niL or f() end
a,b = g()
[[
 eturn end , { a = 0 , b = 2 >= 1 , } or { 1 };
]]
f     =  f(); return; end;
assert(g() == nil)
function g()r(x==false)
x = 2<1 or (2>1 and 'a');g() f(); retu (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)

function f(i)
  while 1 do
    if i>0 then i=on f () return 0,2,3; end
  local a, b,nd;
  retur(x==false)
x = 2<CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
end

local a,b = 3 and f();
assert(al==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL                                                                        or f() end
a,b = g()
[[
 eturn end , { a = 1 , b = 2 >= 1 , } or { 1 };
]]
f     =  f(); return end;
assert(g() == nil)
function g() return niL or n; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
 etu1n end , { a = 1 , b = 2 >= 1 , } or { 1 };
]]
f     =  f(); return; local f   repeat
 local j =o repeat
local j function f()return j end
 until 1 function f() reend;
astursert(g() == nil)
function g() retun j r