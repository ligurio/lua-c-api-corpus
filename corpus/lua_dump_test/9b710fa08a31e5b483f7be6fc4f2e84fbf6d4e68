
do --new
  loca  = {}
  
print "t       hesting syntax"

-- tesle a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x[1] == 1)

function f(i)
  while 1 do
    i(10); g(10);

do
  function f () return 0,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';


f(x[1] == 1)

function f(i)
  while 1 do


function f(i)
  while 1 do
    if i>0 then i=i-1;
end;

function g(Yi)
  while 1 do
    if i>0 then i=i-1
     return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil,n g() f(); return; end;
assert(g() == nil)
function g() return                             niL or f() end;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=on f () return 0,2,3; end
   retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=on f () return 0,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';


f(x[1] == 1)

function f(i)
  while 0 do


function f(i)
  while 1 do
    if i>0 then i=i-1;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
     return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil,n g() f(); return; end;
assert(g() == nil)
function g() return                             niL or f() end;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end function fo() return 0,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';

t(a==2                                                                                                                      and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
eni(); return; end;
assert(g() == nil)
function g() return niL or  assert(a==nil)
end

local a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
 eturn end , { a = 1 , b = 2 >= 1 , } or { 1 };
]]
f     =  f(); return; end;
assert(g() == nil)
function g() return                             niL or f() end;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); retu (2>1 and 'a');gsert(g() == nil)
function g() return                             niL or f() end;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end function fo() return 0,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';

t(a==2                                                                                                                      and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
eni(); return; end;
assert(g() == nil)
function g() return niL or  assert(a==nil)
end

local a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
 eturn end , { a = 1 , b = 2 >= 1 , } or { 1 };
]]
f     =  f(); return; end;
assert(g() == nil)
function g() return                             niL or f() end;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); retu (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=on f () return 0,2,3; end
  local a, b,nd;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(xd 'a');g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end function f () return 0,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';

t(a==2                                                                                                                      and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
eni(); return; end;
assert(g() == nil)
function g() return niL or  assert(a==1 and b==nil and c==nil)
end

local a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
 eturn end , { a = 1 , b = 2 >= 1 , } or { 1 };
]]
f     =  f(); return; end;
assert(g() == nil)
function g() return                             niL or f() end;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end function f () return 0,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';

t(a==2 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
eni(); return; end;
assert(g() == nil)
function g() return niL or  assert(a==1 and b==nil and c==nil)
end

local a,b = 3 and f

function00000 /00000000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbbbFFFFFFFFFFFF99988 /0X00000000 /0X00FFFFFFFFFFFFFbbbbbb /0X090100FFFFFFFFFFFFF988 /0X00000 /0X00FFFFFFFFFFFFFFFFFFFFFFbbb.04bbbbbbbbbb99-999988 /0X00050000 /0X00FFFFFFFFFFFFbbb.04bb8 /0X00X00000 /0X00FFFFFFFFF000000 /0X00FFFFFFFFFFFFFbbb00 /0X00FFFFFFFFFFFFFbbb.04bbb /0X00000000     /0X00FFFFFFFFFFFF800000 /0X00FFFFF    -999988 /0X00000000     /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb.04bbbbb0 /0X00FFFFFFFFFFFFFbbb.04bbbb00 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbbbbFF000000 /0X00FFFFFFFFFFFFFbbb.08bbbbbbbbbFFFFFFFFFFFFF0000000 /09-999988 /0X00000000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbb99        -999988 /0X00000000     /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb.04bbbbb0 /0X00FFFFFFFFFFFFFbbb.04bbbbbbb00 /0X00FFFFFFFFFFFFFbbb.04000 /0X00FFFFFFFFFFbbb.04bbbbbb4bbb /0X00000000     /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb9552091000000FFFFFFFFFFF000059999-    88 /0X00000000 /0X00FFFFFFFFFFFFFbbb.04bb      -999988 /0X00000000     /0X00F2FFFFFFFFFF800000 /0X00FFFFFFFFFFC9Fbbb.04bbbbb0 /0X00FFFFFFFFFFFFFbbb.04bbbbbbb00 /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbb99-999988 /0X00000000FFFFFFFFFFF0000579999-999988 /0X00000000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbb99-999988 /0X00000000     /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbbbb99-999988 /0X00000000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbb00 /0X0FF0FFFFFFFFFFFbbb.04bbb0000-6299+HC /0X090100FFFFFFFFFFFFFFF0000000000 /0X00FFFFFFFFFFFFFbbbbbb99-999988 /0X00000000FFFFFFFFbbb.04bbbbbbbbbbFF0000-6299+HC /0X090100FFFFFFFFF00000 /0X00FFFFFFFFFFFFFbbb00 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbb9976 /0X00050000 /0X00FFFFFFFbbbbbbbbbbF/0000-6299+HC0000000 /0                                      0000000 /0X00FFFFF0FFFFFFFbbb00 /0X00FFFFFFF /0X00FFFFFFFFFFFFFbbb.08bbbbbbbbFFFFFFFFFFFF0000000 /09-999988 /0X00000000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbb99        -999988 /0X00000000     /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb.04bbbbb0 /0X00FFFFFFFFFX00FFFFFFFFFFFFFbbb.04bbbbbbb00 /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbb99-999988 /0X00000000FFFFFFFFFFF0000579999-999988 /0X00000000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbb99-999988 /0X00000000     /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbbbb99-999988 /0X00000000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbb00 /0X0FF0FFFFFFFFFFFbbb.04bbb0000-6299+HC /0X090100FFFFFFFFFFFFFFF0000000000 /0X00FFFFFFFFFFFFFbbbbbb99-999988 /0X00000000FFFFFFFFbbb.04bbbbbbbbbbFF0000-6299+HC /0X090100FFFFFFFFF00000 /0X00FFFFFFFFFFFFFbbb00 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbb9976 /0X00050000 /0X00FFFFFFFbbbbbbbbbbF/0000-6299+HC0000000 /0                                      0000000 /0X00FFFFF0FFFFFFFbbb00 /0X00FFFFFFFFFFFFFbbb.04bbb /0X00000000     /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbbbb99-999988 /0X00000000FFFFFFFFFFF000059999-999988 /0X00000000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbb99        -999988 /0X000FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb.04bbbbb0 /0X00FFFFFFFFFFFFFbbb.04bbbbbbb00 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbbbbFF0000-6299+HC /0X09010FFFFbbb.04bbbF0000-6299+HC /0X090100FFFFFFFFFFFFFFF00000000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbbbbF/0000-6299+HC0000000 /00000000 /0X00FFFFFFFFFFFFFbbb00 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbb99-999988 /0X00000000     /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFbbbb99-999988 /0X00000000FFFFFFFFFFF000059999-999988 /0X00000000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbb99-999988 /0X00000000     /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb.04bb99-999988 /0X00000000 /0X00FFFFFFFFFFFFFbbb.04bbbbbbb00 /0X00FFFFFFFFFFFFFbbb.04bbbbbbbbbbFF0000-6299+.HC /0XFFFFFFFFFFbbbF/0000-6299+HC0000000 /00000000 /0X00FFFFFFFFFFFFFbbb00 /0X00FFFFFFFFFFFFFbbb.04bbb /0X00000000     /0X00FFFFFFFFFFFF8000FFbbb.04bbb /0X00000000     /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb.04bbb        -999988 /0X00000000     /0X00FFFFFFFFFFFF800000 /0X00FFFFFFFFFFFFFbbb.04bbbbb0 /0X00FFFFFFFFFFFFFbbb.04bbbb00 /0X00FFFFFFFFFFbb.0400 080[0>ONO000
000080[                                                                      L or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
eni(); return; end;
assert(g() == nil)
function g() return niL or  assert(a==1 and b==nil and c==nil)
end

local a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return ni  or f() eneturn niL or f() end
ert(xd 'a');g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end function f () return 0,2,3; end
  l() == nil)
function g() return niL or f() end function f () retu             ; return; end;
assert(g() == nil)
function g() return nif() end
a,b =  unction f () re