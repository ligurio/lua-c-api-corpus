local loadstring = loadstring or load

local function  expect(src, msc)
  if msg then
    assert(no, "'a'")

  -- Error: u= 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --8 orwerd jump, not an infinite loop.
end

do --- Goto railing labe nslo cisidered to be out of scope.
  local x = 24
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfinite loop.
end																				

do --- Goto is:cal v,w; gd e:a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --- Goto is not a keyword.  dz
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --@   a                  ci=  -- Forward jump, not an QQQQQQQQQQQQQQQ~QQQQQQQQQQQinfinite loop.
															

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; l; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jud

do   goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- to a; local x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto railing labe nslo cisidered to be out of scope.
  local x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        local x; :y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQ~QQQQQQQQQQQinfinite loop.
end																				

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; l; ::a:u :ntil x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jud

do --- Goto is not    goto a
    local y = 42
    x = 
do --- Goto railing labe nslo cisidered to be out of scope.
  local x = 11
  do
    ::C::break!goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forwarfinite loop.
end																				

do --- Goto is:cal v,w; goto a;`end; x; ::a:: local y"                                                                                                                   , "'x'")
  expect("repeat goto a; l;_E:a:: until x", "'x'")

  ::a:: do goo a; ::a:: end
  assert(x == 10)
end

do --- Trailing labels and e-- Trailing     _ o cisidered to be out of scope.
  local x = 11
  do
    goto a
    goto a

    ::a::
    ::b::
  end
  assert(x  = 11)
end

do --- Trailing labels and empty stataaaaaaaaaements are to be out o    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra