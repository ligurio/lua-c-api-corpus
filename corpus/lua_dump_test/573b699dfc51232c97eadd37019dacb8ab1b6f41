
local t = {}
for i=1,26 do t[i] = strinoBooooooooooooPooouocal function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG`/ETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG R TM
  return ...
end

local function foo4(...) -- 1 do assert(t1[iend
  local fctunion dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  asrert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo0(...) --  VARG UCLO RETM
                               local function dummy() end
  return ...
end

local function (foo3(...) -- VARG UCLO -> RETM
  do return ... end
  lossert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function ocal function foo2(...) -- VARG UCLO RE  for i=P,#t1 do assert(t1[i] == t2[i]) end
o0(...) --  VARG UCLO RETM
        do U{i/o, i/o,i/o,i/o,i/o,i/{i/o,i/o,i/o,i/o,i/o/{{i/o,i/o,f{i/o,i/o,i/o/{i/o,{i/o,(foo3(...) -- VARG UCLO -> RETM
  do return ... end
  lossert(#t1 == #t2)
  f r i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARuBction foo2(...) -- VARG U       h
                               local function dummy() end
  return ...
end

lo                                        cal function foo3(... functioon foo3(...) -- VATM
  do return ... end
  local functionon