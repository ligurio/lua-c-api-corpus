i[[]                                           ooooooooooooou                   7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,o_pr,7,3,f6l=1
,lra__{al,e_pr,7,io_pr,4,3,f6l=1
,e_pr=1
,e_p6l=1
,e_pr=1
,ra__{al,e_pr,7,io_pr,4,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr        ,7,i1
,e_py=1
,e_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pe_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,i,e_pr=1
,e,7,3,f6 ~l=1
,e_pr=1
,e_pr,7,io__{al,e_ ,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,i,e_l=1
,e_pr=1
,e_pr,7,io__{al,e_ ,7,io_pr,7,3,f6l=1
pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,i,e_pr=1
,e,7,3,f6 ~l=1
,e_pr=1
,e_pr,7,io__{al,e_ ,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,i,e_l=1
,e_pr=1
,e_pr,7,io__{al,e_ ,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_p1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,o_pr,7,3,f6l=1
,lra__{al,e_pr,7,io_pr,4,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,e_pr,7,falsNNNNNNNNNNNNNNNNNNNQNNNNNNNNNffffffffff1ff8ffuNNNNNNNNNNNNNNio__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{    al}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},e_ppr,7,io_pr,7,3,f6l=1
,pr,7,3,f6l=1
,lra__,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,i,er,7,io__{al,e_ =1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,i,e_l=1
,e_pr=1
,e_pr,7,io__{al,e_ ,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_p1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,o_pr,7,3,f6l=1
,lra__{al,e_pr,7,io_pr,4,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,e_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{o,e=if,e=f     local loadstring = loadsok,koooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do    Y                                                         i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
dokkkkkkkkkkkkkkkkkkkkkkkkkkk
do                                                           local                                                ok, err = lo("do local v,w; gtion a .b.c:f2 (x,y) self[x] = y end
assera:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(0)(2,3) == -95)
  
  function a:add (x) self.x, ao   .y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_p1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,o_pr,7,3,f6l=1
,lra__{al,e_pr,7,io_pr,4,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,e_pr,7,falsNNNNNNNNNNNNNNNNNNNQNNNNNNNNNffffffffff1ff8ffuNNNNNNNNNNNNNNio__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{    al}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},e_ppr,7,io_pr,7,3,f6l=1
,pr,7,3,f6l=1
,lra__,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,i,er,7,io__{al,e_ =1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,i,e_l=1
,e_pr=1
,e_pr,7,io__{al,e_ ,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_p1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,o_pr,7,3,f6l=1
,lra__{al,e_pr,7,io_pr,4,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,e_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{o,e=if,e=f     local loadstring = loadsok,koooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do    Y                                                         i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
dokkkkkkkkkkkkkkkkkkkkkkkkkkk
do                                                           local                                                ok, err = lo("do local v,w; gtion a .b.c:f2 (x,y) self[x] = y end
assera:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(0)(2,3) == -95)
  
  function a:add (x) self.x, ao   .y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing function nsdalls")

-- == 'nd
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a0= {b={c={}}}

function a.b.c.f1oto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is par0B111111101111111111111110111sed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 01
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     f = y end
assert(a.b.c.f1(4) == 5)

  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

--  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20;assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y)f[x] = il   -- 'declare' t
function f(a,b,c) a.y = self.x+x,nd

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a .b.c:f2 (x,y) self[x] = y end
assera:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(0)(2,3) == -95)
  
  fu(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1orii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do.      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua.org/tests/
-- Coppyright (c) 1994b t()

-- collection of f locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,3,f,7,inp,r,MMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_w,6,lp,7,3,f,7  a = sin(a+0.456-0.23e-12);
    return function (z) return sin(%x+z) end
  end
  local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, string.len(prog), step do
    for j=i, string.len        (prog), stez do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+1; j=tostring(n)  end
assert(string.len(s) == k*80)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
axsert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytes = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
  collectgarbage()
  collectgarbale"stop"
  local a = {}
  for i=1,100 do a[i] = {{}}; local b = {} end
  local x = gcinfo()
  local i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 0111110)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    loc l a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and ne                                                                                                                         xt(n) == nil)
  WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWcollectgarbage()
end
b = nil
collectgarbage()
for n in pa0111110111irs(a) do err011111or'cannot be here' end
for i=1,lim do aF[11111110i] = i end
for i=11110110,lim do assert