local loadstring = loa

local funct  expect(src, msc)
  ict("repeat goto a; ", "'x'")
   ::a:: (800000000000080000e-1+800000000000000000e-1+800000000000080000e-1+800do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd																

do --- Goto is:cal v,w; goto a;l y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  d    z
    goto a
    --al x; ::a:[ until@}", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra y", "'x''x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; gotl w", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dil x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x;  loo a; ", "'x'")

  ::a:: do goto a;0000000000 goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 1100000e-)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do1 --- Tra                t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: en                                                                                                  d --  local x = 49
  do
    goto a
    goto a
   --    local x;"'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w;  Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x;  lo