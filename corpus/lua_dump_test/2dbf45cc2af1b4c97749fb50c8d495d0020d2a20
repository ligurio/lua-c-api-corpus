f=true~=true uo,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpea                                                                                                                         t goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
   u=o,_,o,r,C,zop,d,o,i,o,o,o,i,o,_,f,p, H,p/C,p,d,o,d,C,p,d,o,d,p,p,D,p,d,p,m,di,o,_,o,r,C,r,d,o,i,Y,o,r,C,i,o,o,C,o,o,o,1i,C,o,o,i,o,_,f,p,H,C,p,d,o,r,C,r,d,o,i,Y,o,r,C,i,o,o,C,o,o,o,1i,C,o,o,i,o,_,f,p,o,_,p,d,o,i,o,_p,p,D,p,p, G ,d,p,m,di,o,_,o,r,C,z,d,o,i,Y,o,r,C,i,o,o,C,o,o,o,1i,C,o,o,i,C,p,d,o,i,o,_,o,r,C<ropCCSCC1ppppppppppppppB1  {{{{{{{{{{{{{{
  i                   ^                                      ( Loruse_valvofile '  '),7,3                                      ^             ( Lorse_value_qrofile '  '),o,o,o,1i,,8,3                                          ^          {{{uB       ^                          ( Loruse_value_qrofile '  '),7,3                            ^        ^                                      ( L),3,3              ^       BBBB{{{{{W ^                  ( Loruofile '  '),4,3use_value_qrofiorus_qrof%ile '  '),8,3   ^BBBB     ,7,3                            ^                                   ion () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,kkkkkkkkkkkkkkkkkkkkkkHkk  LS SH]i si_{alue_pr,3,00000000000000000000000000000    0000000000000000000000000000000000000000000000Q{{{{{{ p (( Nor '  ')[np,r,MMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.45630.23e-12);
    return function (z) return sin(%x+z) Und
  end
 333333333333333333333333333333333333333333 local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, string.len(prog), step do
    for j=i, string.len(prog), stez do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+1; j=treduce_inptUsuWWassert(string.len(s) == k*60)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
axsert(t
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbagFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFe"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many aliv::rc ::  aJIT: Tarantool has too many alive objectsn) == 'table' and nex do erro~}P0  .p be here' end
for i=0,lim do a[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=1,lim do a[{}4444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpea                                                                                                                         t goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
   u=o,_,o,r,C,zop,d,o,i,o,o,o,i,o,_,f,p, H,p/C,p,d,o,d,C,p,d,o,d,p,p,D,p,d,p,m,di,o,_,o,r,C,r,d,o,i,Y,o,r,C,i,o,o,C,o,o,o,1i,C,o,o,i,o,_,f,p,H,= ( NorgC  '! 7 ')[    contCreate+1
end

a = "a"

contCr=ooeate = 2
print('strings')
while contCreate <= limit $o
  a = cod%d*)', string.up $r)
  a = "a"
  con ontl[X/0X7FFFFFD/ function f()end
oreC '  ')[( NorgC 0+ikkkukkk0000{X7FFFFFD/ o000000?0000000000000000000