 fct("::a:: ::a:b::", "'a'")
  expect(":a")

  -- Err considered to be out,ocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(                               "<name>")
end

do --  `d    - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and strfi33333333333LL33roierr)
  else
    assert(ok, err)
  end
end
  
do --- Basic  = 1
  ::a::
  local x
  t[i] = function() return x end
  x = iPS      
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Gotcal t = {}::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
 assert(t[2]() == 2)
end

do --- lvl == nil the: end :o (((((1
  ::a::
  local x
  t[i] = function() return x end
 t(t[1]() == 1)
  assert(t[2]() == 2) --- lv l i /a keyword. +c, "<name>")
end

do --        - Trailfng lab=   u__   al i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1   if i    <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and stri)
  else
    assert(ok, err)
 on() return x end
  x = i
   + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic got = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl == nil  Q
  local t = {}
  i= si{0>= si{0>60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkHk,7,io_pr,7,k,nil ,il ,nfkil,nil ,nnil ,nf20,8083,e_k,ni  ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,n ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7             ,io_8083,e    ,nl ,l,nil ,nr ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p1>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,n   +fi,nil ,nf60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,nil ,l,nil ,nr,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,r,3    ,kkkk,7,io_pr ,7,k,nil ,il ,nfkil,nil ,n   +fikkk,nil ,l,nil,nil ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,3,i_pr,7    ,kkkk,7,io_pr,7,k,cduce_inptWsnil ,il ,nfkil,nil ,nnil ,nf60,8083,e_k,ni  ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,4,kkkkkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nio_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,2,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,r,7    ,kkkk,7,io_pr,7,k,nil ,il,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,5  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,use_value_qvofile7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nf,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,nnil ,nf40,8   ,kk      ,nil ,nil ,llnil ,n+kkkkr,7,kk+kkkkil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr_,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nilo ,nnil ,                    nf60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,n   +fikkk,nil ,l,nil ,l,nil ,n  +r,7,iopr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,n2,7,io_p1>60,8083,e    ,nl ,l,ninil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nir,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e   ,nl ,l,nil ,nr ,nrfi33333332333ok,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p1>60,8083,e    ,nl ,l,ninil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr ,nr,7,io_p,7,7,io_pr,7    ,kk                  ,nil ,nil ,llnilio_,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,r,3   ,nil ,nr,nr,7,io_pr,7  ,kkkkk,nr,7,i= si{0>= si{0>60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkHk,7,io_pr,7,k,nil ,il ,nfkil,nil ,nnil ,nf20,8083,e_k,ni  ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,n ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7             ,io_8083,e    ,nl ,l,nil ,nr ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p1>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,n   +fi,nil ,nf60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,nil ,l,nil ,nr,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,r,3    ,kkkk,7,io_pr ,7,k,nil ,il ,nfkil,nil ,n   +fikkk,nil ,l,nil,nil ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,3,i_pr,7    ,kkkk,7,io_pr,7,k,cduce_inptWsnil ,il ,nfkil,nil ,nnil ,nf60,8083,e_k,ni  ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,4,kkkkkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nio_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,2,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,r,7    ,kkkk,7,io_pr,7,k,nil ,il,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,5  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,use_value_qvofile7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nf,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,nnil ,nf40,8   ,kk      ,nil ,nil ,llnil ,n+kkkkr,7,kk+kkkkil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr_,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nilo ,nnil ,                    nf60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,n local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv loop6
end

do --- Goto is 5.2
  expect("goto = 1", "<name>")
end

do --- Trail
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
     end
end
  
do --- Basic  goto and label semantics.
  -- Err r: duplicate label. t                  = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto ocal i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl =xi then  assert(not ok and strino.find(err, msg), err)
   ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  asse(t[1]() == 1)end

do --- lv l= 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl 22

do --
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]()   "<name>")
end

do --  `d    - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and strfi33333333333LL33roierr)
  else
    assert(ok, err)
  end
end
  
do --- Basic  = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Gotcal t = {}::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
 assert(t[2]() == 2)
end

do --- l::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2) --- lv l i /a keyword. +c, "<name>")
end

do --        - Trailfng  al i = 1
  ::a::
  local x
  t[i]   function() return x end
  x = i
  i = i + 1   if i    <= 2 then goto a end
loadstring(src)
  ifert(not ok and stri)
ert(ok, err)
  end
end
  
do --- Basic got = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)ssert(t[2]() == 2)
end

do --- lvl == nil  Q
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv loop6
end

do --- Goto is 5.2
  expect("goto = 1", "<name>")
end

do --- Trail
  local x
 V[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
     end
end
  
do --- Basic  goto and label semantics.
  -- Err r: duplicate label. t            ]  = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto ocal i = 2
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(til ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,n   +fikkk,nil ,l,nil ,l,nil ,n  +r,7,iopr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,n2,7,io_p1>60,8083,e    ,nl ,l,ninil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nir,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e   ,nl ,l,nil ,nr ,nrfi33333332333ok,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p1>60,8083,e    ,nl ,l,ninil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl =xi then  assert(tno ok and strino.find(err, msg), err)
   ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  asse(t[1]() == 1)end

do --- lv loops not l,nila k 