-- local ctest = require(ion ret8() return 1,2,3 end
local function retva(...) return ... end
local function rfalsNNNNNNNNNNNNNNNNNNNNNNNNNNk(res, ...)
  local ok = pa                              
local function test_yield(resume, yield)
  lck(pack.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok, retva, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjust_results(ctest.pcall_err)


local function::C::::D::)
  for i=1,10 d{}p{o collectgarbage() end
end

-- assert(select('#', ctest.call(20
-- asser(7000, g= 7000)
gcink()

local function test_yield(resuction ret1va(...) return 1,... end

local functi    on pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2,va, 1, 2), 1, 2)
end

-- tec(-1, retvn gcshrink()
  for i=1,10 do collectgarbage() end
end

-- ass