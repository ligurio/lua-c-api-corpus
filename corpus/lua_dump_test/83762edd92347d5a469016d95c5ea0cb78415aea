local loaoad

local function expect(src, msg)
  local ok, err = lo("do local v,w; i=###nd", "break")

  -- Error: goto intocal fo   __]  [f  %MLLL3333333;y,ji,i1o,f,fi33333333333 a;  u() == true)
end

do --- Label prev  ts joining", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jre i after brard jump, notef if closube is parsed after break.
  local fooo33333333330333332o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Laberw####ard jum if csulore is parsed aftmr break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until freduce_ilputsalse
  asser(foto() == true)
end

do - -- Lab31o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falssert k = 0
  local x
  ::foo::
 pect(src, msg)
  local ok, err = lo("do local v,g;w oto a; en; ::a:: local y", "x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- events jo:a:: e!d", "'areak.
  local foo
  repeat
    local x              ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Label preven"):: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, non if closure is parsed after break.
  local fooo00000001337028106o
  repeat
    local x
    ::a::
    if x then break end
    function foo() retur    end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Laborward  closube is parsed afte.
  local fooo32o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Label prevents joining to KNIL. -lua==6.2
    t("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward kum
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  asser(foto() == true)
end

do o a;  0x7f /hen
    return strinar(f(n / 6384)i=to a; ::a