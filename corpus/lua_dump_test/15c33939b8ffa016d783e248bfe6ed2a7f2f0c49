 fct("::a:: ::a:b::", "'a'")
  expect(":a:: end; goEnd", "break")

  -- Err considered to be outocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function()     <= 2 then goto a end
loadstring(src)
  ifert(not ok and stri)
ert(ok, err)
  end
end
  
do --- Basic got = {}
  local i = 2
  ::a::
  local x
  t[ido --- lv loops not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
   assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl 

do --to must close u i = 0
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  
assert(t[1]() == 1)end

do --- lv loop6
i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lil  Q
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 2
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv l
end

do --- Tr Backwards go   must close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv