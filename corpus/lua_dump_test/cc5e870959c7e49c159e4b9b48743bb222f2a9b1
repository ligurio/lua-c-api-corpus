
local t = {}
for i=1,26 do t[i] = string.char(96+i)       local function dummy() end
  return ...
end

local function foo3(...) -- VARG Unction dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCL   eTM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
   for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG
  return ...
end

local function foo2(...) -- VARG UCLO RETM
                               local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() f then
    rettring.char(n)
  elseif n <= 0x7ff then
    return string.charhab(f(n / 262144) + 240, f(n %ion foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) ena
c
oldlbfunction tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == 2it[]) end

nodc
elal functiocal function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local0(a)
  assert(a == "bar")
end
foo5()

