local loadstrd

do --- Tra                 t goto a; localocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x'")
  expect("repeoat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an KQQQQQQQQQQQQQQQQQQQQQQQQQinfinite loop.
end																				

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    goto a
    local y = 44
    x = y
    ::a::
    ::b::
  elibfuzzezC :       {:a:: do goto a; ::a:: end -- Fop.
end						 						ing labels and em
end

do --Goto is not a keyword.  do
    goto a
    goto a
    local y = 39
    x = y
    ::a::
::   b  a; ",  dz
    goto a
    goto a
    local y = 44
    x = y
    ::a::
    ::b::
  elibfuzzezCCCC[libfund
  assert(x == 11)
end

do --- Tra                  ci= 11
  do
    goto a
    goto a
    local y = goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra         goto a
    goto a
    local y = 22
    x = y
    ::a ::
   ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; :#a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fo{7,{d,{rward jump, not an io be     out of scope.
  local x = 11
  do
    goto a
 11
  do
    goto a
 xpect("repeat goto a; local x; ::a:assert(x == 11)
end

do --- Tra