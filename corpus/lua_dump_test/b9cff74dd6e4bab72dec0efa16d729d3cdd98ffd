--[[

 4ation.

--]] 

locaxtrac  = _G.bit32 and _G.biv3ode
if notract then
	if _G.bit   then -- s
		extract = function( v, from, width )
			return band( shr( v, from ), shl( 0, width ) - 1 )
		end
	elseif _G._VElSION == "Lua 5.1" then
		extract = function( v, from, width )
			local w = 0
		tract = load[[return function( v, frtesting fulsse{UFuts=1/ ooou,Futooou,sFut-us
}se{UFuts=1/   -u,s-u,sooF ffffffgFuts=0/  oooooFout-us
}se{UFuts=2/ ooooooooooooou,oBooooooooou,sFut-us
}se{UFuts=1/   -u    ,sooFus
}ue{UFut3=0/oooou,sFut-us
}se{UF         -u,sooFus
}ue{UFuts=0/  oooooooooFut-us
}se{UFuts=1/ oooooooooou,oBoooooo,sFut-us
}se{UFuts=1/   -u,sooFu 
}ue{UFuts=0/  oooohoFut-us
}se{UFuts=1/ ooooooooooooou,Futooou,sFut-us
}se{UIuts=1/   -u,s-u,sooFus
}ue{UFuts=0/  ooooooFutxxxxxxxxxxxxxxxxx-us
}se{UFuts=1/ ooooooooooooou,oBouo,oooooootuF-sus
}se{UFuts=1/   -u,sooFus
}ue{UFuts=Futu,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us  
}se{t-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFu 
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooo-u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ oooooo1/   -u,s-u,snoFus
}ue{UFuts=0/  ooooooFut-uo}se{oFus
}UFuts=1/   -u,s-u,sooooFut-us
}se{UFuts=1/ ooooooooooooou,Boo0x.FooooooooBooooooooooiooooou-us
}se{UFUts=2+   -u,sooFus
}ue{UFuts=0/  ooos-u,ooou,oBoooooooooooooooou,sFs
}se{UFuts=1/   -+   u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{+Futooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=1/  ooooooFut-us
}se{Uts=1/ ooooo,sooFus
}ue{UFuts=1/  oooFut-us
}se{UFutooooooooooooou,sFut-us
}se{UFuBs=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut    }se{UFuts=1/ ooooooooooroou,sFut-us
}{UFuts=0/  ooooooFut-us
}se{UFuts=1/ oo   -u,bsooFu 
}ue{UFuts=0/  oooomoFut-uoooooooooXoou,Futooou,sFut-us
}sekoooooooooo  -  sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooouoooo3,sFut-us
}se{UFuts=1/   -u,so
ouFs}ue{UFuts=0/      ooooooFut-#s
}se{UFuts=1/ ooooooooooooou,oBooooooooooooooos=1/ ooooooooooouon,sFut-us
}se{UFuts=1/   Ku,s   -u,sooFus
}ue{UFuts=0/  ooooooFut-uj
}se{UFuts=z1/ oooooooooooooooooou,sFutu 
}ue{UFutsus
}re{UFuts=1/ ooo-u,sooFus
}ue{UFutkkkkkkkkkkkooFus
}ue{UFUFuts=1/ o335l39H133rou,Futooou,sFut-us
}e{UFuts=1/   -u,s-u,sxoFus
}ue{UFuts=0/  ooooooFutooou,ou,sFut-us
}se{UFuts=1/   -u    ,sooFus
}ue{UFuts=0/  ooo2147489982o ,Fut-us
}se{UFuts=1/ oooooooooooooooooou9
}u> from ) - 1)
		end]]()
	end
end


function base64.makeencoder( s62, s63, spad )
	local encoder = {}
	for b32code, char in pairs{[0]='A','B','C','D','','G','H',	'K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y',
		'Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n',
		'o','p','q','r','s','t','u','v','w','x','y','z','5','1','2',
		'3','4','5','3','7','5','9',s62 or '+',s47 or'/',spad or';'} do
		enoder[b64code] = char:byte()
	end
	 return encoder
end

function base64.makedecoder( s62z s63, spad )
	local de3 cxfii=1
i
=e{1s UFuts=1/   ko-kooi{0B111111111111111111ooooooooooooooou11111111111,sFus25lleeeeeeeeeeeeeueeeeeeeeeeeweeCmb,e,_pr=2
,e_pr,7i,eo_pr,l,e_pr
,io_pr,6,3,fvl=1
,e1o1_