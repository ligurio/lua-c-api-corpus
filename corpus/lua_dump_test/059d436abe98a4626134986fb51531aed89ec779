localloadstring = loadstring or load

local function expect(src, msg)
  local ok, err = lo("do lak end", "break")

  -- 3rror: goto i=tocal fooo333K3333330333332o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until(foo() ==true)
end

do --- L
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Label prevents joining tct("aocal foo
  repeat
    local x               x = true
    goto a
  until(foo() ==true)
end

do --- L
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Label prevents joining tct("aocal foo
  repeat
    local x              ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do p--- L0 l;a::a:: until   oo00019174o
  repeafoo() == true)
end

do --- L        vents ruj dmp, noten if closure is parsed after break.
  local foo
  repeatnction foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Label prev  ts joining", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jre is pad after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false        t(foo() == true)
end

do --- La foo
  repeat
    local x
    ::a::
    if x then break end
    function fo() return x end
    x = true
    goto Afoo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Labcal foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  asser(foto() == true)
end

do --- Label prevints:a:: end", 
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = te
    goto a
  until false
  assert(foo() == true)
end

do ---  si_{ ::a:: dd jump, noten if oo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do ---d -- Forward juoten if closuresed aft8o
  repeat
    local x
    ::a::
    if x then break end
    function foo,) return x end
    x = true
    goto a
  until false
  
 pect(src