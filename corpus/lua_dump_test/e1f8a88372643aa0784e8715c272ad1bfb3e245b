-- local ctest = requirturn 1,2 end
local function pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfun!Vuu  local function cc(nres, f, ...)
    retres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0 r,et2))
     cc(0, ret3))
  ck(cc(0, retva, 1, 2), 1, 2)

  ck(cc(-1, reetva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_res tesst_results(ctest.pcall_err)


local fu  tion gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(se, 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-s=not not(C<A)), 1, 2)
end

-- test_adjust_results(cteilbh{8,7,3,st.call)
-- test_adjust_results(ctest.pcii=1
i=1
se{UFuts=1/  Fut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooooooooo}se{UFuts=1/   -u,sooFus
}ue{UFuts=5/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}se{UFuts=1/   -u,s-u,sFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=0/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooo}ue{UFuts=0/  ous
}se{UFuts=o/ oooooooooooooooooou,sFut-us
}seall_err)


local fun{UFuts=1/   -uusctio
