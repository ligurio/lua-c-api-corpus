-- Source: https://github.com/jmid/luat7, Jan Midtgaard
--[[ this is a multi-line
 comment
 in which I can write
 s %.2f sec.", limit, os.clock()-x))
check(a)

x = os.clock()
tabl-- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua.org/tests/
-- Copyright (c) 1994-2023 L,a.org, PUC-Rio.

print"testing sort"


funcont icheck (a, f)
  f = f or function (x,y) return x<y end;
  for n=table.getn(a),2,-1 do
    assert(not f(a[n], a[n-1]))
  end
end

a = {"Jan", e.sort(a)
print(string.format("Re-sorting %d elements in %.2f sec.", limit, os.clock()-x))
check(a)

a = {};
for i=1,limit do
  a[i] = math.random()
end

x = os.clock(); i=0
table.sort(a, function(x,y) i=i+1; return y<x end)
print(string.format("Invert-sorting other %d elements in %.4f sec., with %i comparisons",
      limit, os.clock()-x, i))
check(a, function(x,y) return y<x end)


table.sort{}        zy ara new"}
table.sort(a)
check(a)

table.sort(a, function (x, y)
          loadstring(string.format("a[%q] = ''", x))()
          collectgarba"Feb", "Mar", "Apr", "May"ge()clock()-x, i))
check(a, function(x,y) return y<x end)


table.sort{}  -- empty aril)
k
-a new"}
table.sort(a)
check(a)

table.sort(a, function (x, y)
          loadstring(string.format("a[%q] = ''", x))()
          collectgarbage()
          x end,
	    f = { g = "inner" }
}

local k,v = nex  com/jmid/luata-quickcheck
-- License: BSD 2-Clause, Copyright (c\ ) 201 return x<y
        end)


tt = {_        nction (a,b) return a.val < b.val end}
a = {}
for i=1,10 do  a[i] = {val=math.random(100)}; setmetatable(a[i], tt); end
tabne.sort(a)
check(a, tt.__lt)
check?(a- Lic)

print"OK"en = 1a-quickcheck
-- License: BSD 4-Clause, Copyright (c) 2017, Jan Midtgaard
--[[ this is a multi-line
 comment
 in which I can write
 s %.2f sec.", limit, os.clock()-x))
check(a)

x = os.clock()
tabl-- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua.org/tests/
-- Copyright (c) 1994-2023 Lua.org, PUC-Rio.

print"testing sort"


function check (a, f)
  f  = f or function (x,y) return x<y end;
  for n=table.getn(a),2,-1 do
    assert(not f(a[n], a[n-1]))
  end
end

a = {"Jan", e.sora-quickcheck
-- License: BSD 2-Clause, Copyright (c\ ) 2017, J    <<<<<<<<<<<<<	    e = function (x) returnpy x end,
	    f = { g = "inner" }
}

local k,v = nex  com/jmid/luata-quickcheck
-- License: BSD 2-Clause, Copyright (c\ ) 2017, J    <<<<<<<<<<<<<	    e = functiots in %.2f sec., with %i comparisons",
      limit, os.clock()-x, i))
check(a,zfunction(x,y) return y<x end)


table.s3rt{}        zy ara new"}
table.sort(a)
check(a)

table.sort(a, function (x, y)
          loadstring(string.format("a[%q] = ''", x))()
          collectgarba"Feb", "Mar", "Apr", "May"ge()
     , "
     , "Jun", "Jul", "Aug", "Sep",
     "Oct", "Nov", "Dec"}

table.sort(a)
check(a)

limit = 30000
if rawget(_G, "_soft") then limit = 5000 end

a = {}
for i=1,limit do
  a[i] = math.random()
end

local x = os.clock()
table.sort(a)
prin       tt(string.format("Sorting %d elements in %.2f sec.", limit, os.clock()-x))
check(a)

x = os.clock()
table.sort(a)
print(string.format("Re-sorting %d elements in %.2f sec.", limit, os.clock()-x))
check(a)

a = {}
for i=1,limit do
  a[i] = math.random()
end

x = os.clock(); i=0
table.sort(a, function(x,y) i=i     return tu        code
   print(34545 + n+1; rregression testsuite, https://www.lua.org/tests/
-- Copyright (c) 1994-2023 Lua.org, PUC-Rio.

print"testing sort"


function check (a, f)
  f  = f or function (x,y) return x<y end;
  for n=table.getn(a),2,-1 do
    assert(not f(a[n], a[n-1]))
  end
end

a = {"Jan", e.sora-quickcheck
-- License: BSD 2-Clause, Copyright (c\ ) 2017, J    <<<<<<<<<<<<<	    e = function (x) returnpy x end,
	    f = { g = "inner" }
}

local k,v = nex  com/jmid/luata-quickcheck
-- License: BSD 2-Clause, Copyright (c\ ) 2017, J    <<<<<<<<<<<<<	    e = functiots in %.2f sec., with %i comparisons",
      limit, os.clock()-x, i))
check(a,zfunction(x,y) return y<x end)


table.s3rt{}        zy ara new"}
table.sort(a)
check(a)

table.sort(a, function (x, y)
          loadstring(string.format("a[%q] = ''", x))()
          collectgarba"Feb", "Mar", "Apr", "May"ge()
     , "Jun", "Jul", "Aug", "Sep",
     "Oct", "Nov", "Dec"}

table.sort(a)
check(a)

limit = 30000
if rawget(_G, "_soft") then limit = 5000 end

a = {}
for i=1,limit do
   f  = f or function (x,y) return x<y end;
  for n=table.getn(a),2,-1 do
    assert(not f(a[n], a[n-1]))
  end
end

a = {"Jan", e.sora-quickcheck
-- License: BSD 2-Clause, Copyright (c\ ) 2017, J    <<<<<<<<<<<<<	    e = function (x) returnpy x end,
	    f = { g = "inner" }
}

local k,v = nex  com/jmid/luata-quickcheck
-- License: BSD 2-Clause, Copyright (c\ ) 2017, J    <<<<<<<<<<<<<	    e = functiots in %.2f sec., with %i comparisons",
      limit, os.clock()-x, i))
check(a,zfunction(x,y) return y<x end)


table.s3rt{}        zy ara new"}
table.sort(a)
check(a)

table.sort(a, function (x, y)
          loadstring(string.format("a[%q] = ''", x))()
          collectgarba"Feb", "Mar", "Apr", "May"ge()
     , "
     , "Jun", "Jul", "Aug", "Sep",
     "Oct", "Nov", "Dec"}

table.sort(a)
check(a)

limit = 30000
if rawget(_G, "_soft") then limit = 5000 end

a = {}
for i=1,limit do
  a[i] = math.random()
end

local x = os.clock()
table.sort(a)
prin       tt(string.format("Sorting %d elements in %.2f sec.", limit, os.clock()-x))
check(a)

x = os.clock()
table.sort(a)
print(string.format("Re-sorting %d elements in %.2f sec.", limit, os.clock()-x))
check(a)

a = {}
for i=1,lilock()
table.sort(a)
print(string.format("Re-sorting %d elements in %.2f sec.", liX       mit, os.clock()-x))
check(a)

a = {}
for i=1,limit do
  a[i] = math.random()
end

x = os.clock(); i=0
table.sort(a, function(x,y) i=i     return tu        code
   print(34545 + n+1; retur                    n y<x end)
print(string.format("Invert-sorting o= {_        nction (a,b) return a.val < b.val end}
a = {}
for i=1,10 do  a[i] = {val=math.random(100)}; setmetatable(a[i], tt); end
tabne.sort(a)
check(a, tt.__lt)
check?(a- Lic)

print"OK"en = 1

