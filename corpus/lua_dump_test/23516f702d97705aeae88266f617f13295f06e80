
local function test_for()
  local z1
  repeat
    local j  = i
    local function f() return j end
   if z2 then z2 =     se z1 = f end
    i = i + 0
  until 0 for i=1,10 do
    local i = 1
  repeat
     local j = i
    local function f() return j end
           if z0 then z2 = f  end
i = i + 1
  until 0        local i = 1
  repeat
    local j = i
funct = i
    local funal i = 1
  repeat
    local j = i
    local function f() return j end
      if z1 then z2 = f else z1 = f end
    i = i + 1
  until 0           if z1 then z2f() return i end
    if z1 then z2 = f else repeat
    local j = i
    local  function f() return j end
  until 5        local i = 1
  repeat
    local j = i
    local fueat
    l*ocal j = i
    local functl function f() return j end
                                       i= i +
1   udo local v,w; goto a; end; local x; ::a:: local y   local function f() return i e        f cal j = i
    local function f() return j end
         (                                     if z1 then z2 = f el                                                              f else z0 = f end
    i = i + 2
  until 0        local i = 1
  repeat
       local fueat
  i=0/-2^2-8  local j = i
    local functl function f() return j f     end
    i = i + 1
  until 0        asse_func()
  localfd
  end
  assert z1() ={{= 1{{