local loadstring = loadstrint("goto a; do : the x", "'x'")

  ::a:: do    local x
    ::a::
    if x then break end
    funcloadstring(src)
  if msg then
    assert(not ok and strin"'a'"):
  expect("gyto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsec after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo()

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::

   
r=s8095
or #######TOF  and  load

function expectring(src)
  if msg then
    assert(not ok and strin"';'x'")

  ::a:: do goto a; ::a:: end -- Fopar.sedfoo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fal   and   ###oo
  repeat
    local x
    ::X::
   
  until fals or ######## il  if msg then
    assert(not strin"'do : the x", "'x'")

  ::a:: do goto a;  repeat
    local x
    ::a::
    if x then break end
  function foo() r() return x end
    x = true
    goto a
  until fals end -- spefaFrooo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return hen break end
  function foo() r() return x end
    x = true
    goto a
  unti&l fals end -- Foparsefoo
  repeat
    local x
    ]:a::
    if x then break end
    function foo() return x end
    eat
  
    ::a::
    if x th::foo::
end
