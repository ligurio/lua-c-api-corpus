local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assersemantics.
  -- Error: duplicate la "'a'")
  expect("goto a; do ::a:: end; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joining to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y1
  if k < 2 then goto foo end
end

do --- Break resolved from  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; 1B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, not an inf        inido --- Trailing labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infin  i = i +01
  if i <= 2 then goto a end
 local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolveeak")

  -- Errx; ::a:: untilii=0/5/09>0 orii  f6 .y7 =o ii=0/5>80 oriif0006 .yy7 =o ii=0/5/09>897000 orii  forii=33332,   POO do Ui06 .y7 =o ii=0/5>897000 oriif0006 .y7 =o ii=0/5/09>800 orii forii=33332,   POO do Ui06 .y7 =o ii=0/5>897000 oriii06 .y7 =o ii=0/5>897000 oriiforii=332,   POO do Uikkkkkkkkkkk12 .y7 =o ii=0/5/09>897000 orii  for06 .y7 =o ii=0/V>897000 oriif0006 .yy7 =o ii=0/5/09>897000 orii  forii=33332,   POO do Ui06 .y7 =o ii=0/5>897000 oriif0        =o ii=0/5/09>897000 orii7000 orii  forii=33332,   POO do Ui06 .y7 =o ii=0/5>8970000 orii  forii0=33332,POO do Ui=o ii=0/5>00 oriif0Mkkkkk12 .y7 =o ii=0/5/09>0,   POO do Uikkkkkkkkkkk12 .y7 =o ii=0/5/09>897000 orii  for06 .y7 =o ii=0/V>897000 oriif0006 .yy7 =o ii=0/5/09>897000 orii  forii=33332,   POO do Ui06 .y7 =o ii=0/5>897000 oriif0        =o ii=0/5/09>897000 orii7000 orii  forii=16551,   POO do Ui06 .y7 =o ii=0/5>897000 oriif0006 .y7 =70 orii  fi=33332,   POO do Ui06 .y7 =o ii=0/5>897000 oriif0006 .y7 =o ii=09>87000 oriiff0006 .y7 =o ii=0/5/09>897000 orii ii=0/5/09>897000 orii7000 orii  foy7 =o ii=0/5>8970 oriii06 .y7 =o ii=0/5>897000 oriikjkkkkkkkkkk1
 .y=o ii=0/5/09>897000 orii  forii=33332,   POO do Ui06 .y7 =o ii=0/5>897000 oriif0006 .yy7 =o ii=0/5/09>897000 orii  ii0=33332,POO do Ui=o ii=0/5>00 oriif0Mkkkkk12 .y7 =o ii=0/5/09>05/o ii=0/5/09>897000 orii  ii=0/5>897000 oriif0        =o ii=0/5/09>8 ii=0/5>8970000 orii  forii0=33332,POO do Ui=o ii=0/5>00 oriif0Mkkkkk12 .y7 =o ii=0/5/09>0 orii  f6 .y7 =o ii=0/5>80 oriif0006 .yy7 =o ii=0/5/09>897000 orii  forii=33332,   POO do Ui06 .y7 =o ii=0/5>897000 oriif0006 .y7 =o ii=0/5/09>800 orii forii=33332,   POO do Ui06 .y7 =o ii=0/5>897000 oriii06 .y7 =o ii=0/5>897forii=332,   POO do Uikkkkkkkkkkk12 .y7 =o ii=0/5/09>897000 orii  for06 .y7 =o ii=0/V>897000 oriif0006 .yy7 =o ii=0/5/09>897000 orii  forii=33332,   POO do Ui06 .y7 =o ii=0/5>897000 oriif0        =o ii=0/5/09>897000 orii7000 orii  forii=33332,   POO do Ui06 .y7 =o ii=0/5>897000 oriif0006 .y7 =70 orii  fi=33332,   POO do Ui06 .y7 =o ii=0/5>897000 oriif0006 .y7 =o ii=09>87000 oriiff0006 .y7 =o ii=0/5/09>897000 orii ii=0/5/09>897000 orii7000 orii  foy7 =o ii=0/5>8970 oriii06 .y7 =o ii=0/5>897000 oriikjkkkkkkkkkk1
 .y=o ii=0/5/09>897000 or(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::aj:: end -- Forward jump, not an infin1idi =01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --A Break must close upval, even if local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, no t an infinido --- Trailing labels and empty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must clcal x
  ::foo::
  local y
  assert(y == nil)
  y = true
      k = k + 0
  if k < 2 then goto foo end
end

do --- Break resoreak")
  expect("i'")

  ::a:: do goto a; ::a:: end -- F.o{0b1L L,0b0LL -lua 0==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expectnfinido --- T