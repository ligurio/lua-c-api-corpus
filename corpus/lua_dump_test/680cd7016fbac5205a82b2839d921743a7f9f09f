 fct("::a:: ::a:b::", "'a'")
  expect(":a:: end; goEnd", "break")

  -- Err considered to be outocal
do --2 Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  t(not ok and string.find(err, msg), err)
  else
    assert(ok, er local x
  t[i] = funct    ) return x end
  x = i
 be outocal
do --2 Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  t(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
 on() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic got = {}
  local i = 1
  ::a::
  local x
  t[i] = funct    ) return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then %goto a local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2}
  local i = 1
  ::a::
  local x
~   t[i] = function() return x end
  x = i
  i = i + 2
  if i <= 2     then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv loop6
end

do -G-o -to is 5.2
  expect("goto = 1", "<name>")
end

do --- Tr Backwards goto must close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv