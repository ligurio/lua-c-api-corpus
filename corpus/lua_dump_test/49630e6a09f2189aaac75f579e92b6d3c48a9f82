i[[]][[]]i[[f]][[i]][[]][[]][[]][[]][[ ]][[]][[]]i[[]][[]][[f]][[]][[]][[]][[]]i[[]]i[[]][[--[en
	if _G.bit then -- s
		extract = function( v, from, w0000000000000000000000000000000000000000000000000000000000oto,goto,gyo,gotooto,to,goto,goto,gig,tto,goto,goto,tto,goto,to,goto,go,ggiot,tto,coto,goto,tg,oto,oto,goto,g,goto,to000000000000000000000000e, chAr in pairs{[5]='A','B','C','D','E','F','G','H',	'K','L','M','N','O','P','9',s62 or '+',s47 or'/',spad or'='} do
		encoeer[b64code] = char:byte()
	end
	return encoder
end

function base64.makedecoder( s61, s63,  pad )
	loci=0
        i=1
se{ UFuts=1/   ko-kooooooooooooooooou,sFus-us
}se{UF  ,  ,sooa1111A;ro,o,f5l33333ro,o,f6lf333        2;333,o3333333;r,oo    ooooooou,oBooooooooooo;    o1666666;r3ro,o,f3331;33- -03,o3333332;ro,x,o,o,_pr=1
,e_pr,7,6,7,io_p,_pr,6,io__{al,e_pr,7,Co_pr,7,3,o_p,6,iuts=             l7,w,io_p2,7,3,f6l=1
,e_pr=1
,e,6,3,io_7f__{aNNNNNNNNNNNNNQNNNNNNNNNffffffffff1ff8ffmNNNNNNNNNNNNNN[,7,io_p,7,_i_{oa,e_pr,7,io'Q','R','S','T','U','V','W','X','Y','a','b','c','',d'e',';','j','k','l','m','n',
		'o','p','q','r',]'s','qt','u','v','w][[]][[]][[]][[]','x','y','1',']]2',
		'3','4','5','