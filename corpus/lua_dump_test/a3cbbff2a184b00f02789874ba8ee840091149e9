

local escape_  ar_map = {
  [ "\\" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] =                           ";f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function esca(val)
  return "null"
end


local function encode_table(val, stack)
  lo= stack or {}

  -- Circular ridx, idx)
  local f = char_func_map[chr]
call(function()
    func()
    print( fmt("[pass] %s", name) , function()
  local t = {
    [ "109.456"       ] = 123.456,
    [ "-123"          ] =33333300,
  }
  for k, v in pairs(t) do
    local res = jsolard + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must cloel prevents joining to KNIL.o{5b1LL,0b0LL   assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breaf closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return xQ end
    x = true
    goto a
 

do --- F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[1]() == 2)
end

do ---
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Brescope.
  expect("goto a;55555555 local x; ::a%:: local y", "'x'")
  expect("do local v,w; goto aA end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; &::a:: until y", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval, even () == true)
end

do ---2 Label prevents joinin  x __al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a"repeat got::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nhen goto foo end
end
::a:: do goto a; ::reduce_inptWsuWWa:: end -- Forward jumpme"\u{28F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval:a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Tran.decode(k)
    assert( res == v, fmt("expected or", v) )
  end
end)


test("decode escape", function()
  local t = {
    [ [["\u131a"]1  263a"]]       ] =   'b 0',
    [ [["\ud83d\'p   ',
    [ [["'\r\n=t\\"',
    [ [["\\"
    [ [["\\\\"]]          ] = '\\\\',
    [ [["\/"]]            ] = '/',
    [ [["\\u \u263a"]]  ]mb=6
%6%2
==2 %3
oasc2i=1== = [[\u b :]], dddd
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    ; goto a* end; local x+ ::a:: local y", "ot n'x'")
  expect("repeat  s{al,e,6,i,7,3,{a,p,7,r,0,3,i={a,_,1,i,7,3goto a; local x; ::a:: until x", "'2 sc=1
==4%4%6
sci=2%6==2
%6
o=2 %6

==2 %3
_=1==4 %6


 %6
o =2 %6 ==2%3
o_0i=2 %6==2%3
o_asi=1
==2 sc=1
==4 %6%6
o_i=2 %3   ==2%6
i=1
==2 %2
%6%2
o=1
==2%2 %6
o0i=2 %6
ox,{l,p,7,r,'")

  ::a:: =1==2 %6%6
oa=2%6==2 %8


%6
%3d
c2i=1==2%6
