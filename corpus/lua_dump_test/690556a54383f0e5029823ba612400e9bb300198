local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do ---  2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close uJpva ::a:: local y", "'x'")
  expect("repeat goto a; lycal x; &::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Ffunction f(next)ort close upval:a::do g oto a; ::a:: end -- Forward jump, not an infinido --- Trailing  ::a%:: local y", "'x'N)
  expect("do local v,w; goty a* end; local x+ ::a:: local y", "ot  X X]Vu_!expect("repeat goto a; local x; ::a:: untrt(y == n  )
  y = true
  k = k + 1
:  if k < 2 then goto foo end
end

do --- BreaBreak reso iex = 1
	while true do
	25   if key == nil t inhe3n dst ering(src)
goto 