
do --new
  loca "t       hesting s3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f3333;333,o335l393333r,f5l393333ro,o,f335l393333ro,o,f3333;333,f335l393333ro,o,f3333;333,o3333332;ro,o,o,o,f3333;2;ro,o,o,o,f3333;333,o333333,f335l393333ro,o,f3333;333,o3ro,o,o,o,f3333;333,o3333332;ro,pro, EEEEEAlf_K,ffi2{{{{{{r       {{{{}}}}}}}}}}}},o,f6l=o3333332;ro,o,o,o,f1856;333,o335l393333ro,o,f3332;333,3;333,o33333323ro,o,f3333;333,f335l393333ro,o,f3333;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f1856;333,o393333ro,o,f3332;333,o333393333ro,o,f3332;333,o3333332;ro,o,o,o,f333333,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=oW333332;ro,o,o,o,f1856;333,o335l393333ro,o,f3332;333,o3333332;ro,o,o,o,f3333;333,o33333323ro,o,f3333;333,f335l393333ro,o,f3333;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;rz,o,o,o,f1856;333,o335l393333ro,o,f3332;333,o3333332;ro,o,o,o,f333333;333,f333ro,o,f3184;333,o3333332;ro,o,o,o,f3333;3333333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f3333;333333;333,f333ro,o,f6664;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f3333;333,o335l393333r,f5l393333ro,o,f335l393333ro,o,f3333;333,f335l393333ro,o,f3333;333,o3333332;ro,o,o333332;ro,o,o,o4f;333,f333ro,o,=3332;333,o3333316;ro,o,o3ro,o,f3332;333,o33333,f333333,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f1856;333,o335l393333ro,o,f3332;333,o3333332;ro,o,o,o,f3333;333,o33333323ro,o,f3333;333,f335l39333ro,o,f6l=o3333332;rz,o,o,o,f1856;333,o335l393333ro,o,f3332;333,o3333332;ro,o,o,o,f333333;333,f333ro,o,f6664;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f3333;333,o335l393333r,f5l393333ro,o,f335l393333ro,o,f3333;333,f335l393333ro,o,f3333;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o4f;333,f333ro,o,f3332;333,o3333316;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;333332;ro,o,o,o,f,o36666646ro,o,f3333;333,f335l393333ro,o,f3333;333,o3ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f1856;333,o335l393333ro,o,f3332;333,o3333332;ro,o,o,o,f333333;333,f333ro,o,f6664;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o33333o,f1856;333,o335l393333ro,o,f3332;333,o3333332;ro,o,o,o,f333333,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f1856;333,o335l393333ro,o,f3332;333,o335l393333ro,o,f3333;333,f335l393333ro,o,f3333;333,o3333332;ro,o,o,o,f3333;2;ro,o,o,o,f3333;333,o333333,f335l393333ro,o,f3333;333,o3333332;ro,                                                                                           o,f3333;333,o333333ro,o,f3333;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,pro, EEEEEAlf_K,ffi2{{{{{{r       {{{{}}}}}}}}}}}},o,f6l=o3333332,o3333332;ro,o,o,o,f3333;23333;333,o3333332;ro,o,o,o,f3333;333,o333333ro,o,f3333;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,pro, EEEEEAlf_K,ffi2{{{{{{r       {{{{}}}}}}}}}}}},o,f6l=o3333332;ro,o,o,o,f1856;333,o335l393333ro,o,f3332;333,o3333332;ro,o,o,o,f3333;3333;333,f335l393333ro,o,f3333;33pairs33332;ro,o,o,o,f3333;33332;ro,o333,o335l393333ro,o,f                                                                                            3332;333,o3333332;ro,n,o,o,f334;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f1856;333,o335l392333ro,o,f3332;333,o3333332;ro,o,o,o,f333333,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f1856;333,o335l393333ro,o,f3332;333,o3333332;ro,o,o,o,f3333;333,o3l393333ro,o,f3333;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f1856;333,o335l393333ro,o,f3332;333,o3333332;ro,o,o,o,f333333;333,f333ro,o,f6664;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f3333;333,o335l393333r,f5l393333ro,o,f335l393333ro,o,f3333;333,f335l393333ro,o,f3333;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,ofo,43;33,f333ro,o,f3332;333,o33332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f3333;333,o335l393333r,f5l3933333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f3333;333,o335l392333r,f5l393333ro,o,f335l393333ro,o,oBoooooooooooooooou33ro,o,f3333;333,o33333323ro,o,o,o,f33yntax"

-- tesle a,b 
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end

f(10); gle = f

  -- 
  sett(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  asserg(u   == false)
  assert(a<=b == true)
  assert(a>=b == ture)

  assert(not (a<b) == true)
  assert(not lse)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert    (a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is optiona = nil
  a[1] = 1
  b[1] = 2
  assert(a<b == true)
  assert(a>b == alse)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
-- __lt and __le uvlsae
 eate(function(op,a,b)
    if op == "lt" then return a[0]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(t (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[0] = 2
  asrert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __lend "le"); xop = nil

  assoe(rtnt (a<b) == falsg and xop == "lt"); xop = nil
  assert(not (a>b) == fal)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[2] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == tr    ue)
  assert(not (a>=b) == false)

  -- __le metamethod is optional and substitutedth arg+res vetirend __lt.
  getmetatert(a<b == true)
   assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert(a>=b == true and xop == "le"); xop =tatable(a).__le
  g= nil
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = nil
  assert( ot (a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b) == true and xop (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == fal or ose)
  assert(a>=b == true)
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == tr
return function ( = 2 >= 1 , } or { 1 };
]]
f = strin


do
if nil then a=1; elseassert(g() == nil)
function g()return nIL or f() end
a,b = g()b, c = (f());
  assert(a==2 and b==nil and c==nil)
enert(g() == nil)
function g() return niL or f() end
a,b =  unction fg() return niL or f()
a,b = g()
assd b==nn 