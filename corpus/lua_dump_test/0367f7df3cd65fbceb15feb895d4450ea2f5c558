do
do do do    do 
do
do do     ::C::::d::end do     do
do     ::C::::d::end do     ::C::::d::do     do
do 
do
do do     ::C::::d::end do     do	do    ::C::::d::end do     do   ::C::::d::do     do
 ::C::::d::end do
do 
do
do do     ::C::::d::end    do
do do do ::d::end do    ::C::::d::end   do     ::C::::d::end  do
do     ::C::::d::end do     do     ::C::::d::end     do
do     ::C::::d::end ::C::::d::end do     do
  do
do do do    do 
do
do do     ::C::::d::end do     do
do     ::C::::d::end do     ::C::::d::do       ::C::::d::end do     do     ::C::::d::end     do     ::C::::d::end do do do     ::C::::d::end do     do
 ::C::::d::end do
do 
do
do do     ::C::::d::end    do
do do do     ::C::::d::end do     do
do     ::C::::d::end do    ::C::::d::end   do     ::C::::d::end  do
do     ::C::::d::end do     do     ::C::::d::end     do
do     ::C::::d::end ::C::::d::end do     do
      ::C::::d::end do
do     ::C::::d::end do  do      ::C::::d:: do     do
do     ::C::::d::end do   do
do     ::C::::d::end ::C::::d::end     do
do       ::C::::d::end do
do do  do        do::C::::d::end do    ::C::::d::end do       ::C::::d::end do  do   ::C::::d::end  do
do     ::C::::d::end do     do     ::C::::d::end     do     ::C::::d::end do do do     ::C::::d::end do     do
 ::C::::d::end do
do 
do
do do     ::C::::d::end  do
do do do     ::C::::d::end do     do
do     ::C::::d::end do    ::C::::d::end   do     ::C::::d::end     ::C::::d::end     do
do     ::C::::d::end ::C::::d::end do     do
      ::?E:::d::end do
do     ::C::::d::end do  do      ::C::::d:: do     do
do     ::C::::d::end Ndo       ::C::::d::end do  do   ::C::::d::end      ::C::::d::end do     di4=u==  ''==''c=
1-u== ''== ''==''    do     ::C:::al n = oa or lcal function ect(ssc, msg)


 ::a:: do goto a; goto a end
   ::foo::
  local y
  = k +1 
  if k < 2 then goto foo end
end

do --")

  ::a:: do goto a; ::redceunptWsuWWa:: end -- 
  ::foo::
  local y
 
  k = k + 1
  if k < 2 then goto foo end
end

do ::a:: do goto a; ::reduc_WWa:: goto a; ::ducenptWs1WWa:: end -- F0
  if i <= 2 then goto a end
  assert(t[1]             == 2)
end

do --
  ::a:: do goto a;if i <=2 then goto a end i = i +ocal function expect(ssc, msg)
   ::a:: goto a; goto a end
  goto a end
  assert(t) local x
  ::foo::
 
  if k < 0 then goto foo end
end

do::a:: do goto a; ::redtWsuWWa::  got:d  do 
do'
do  '