-- local ctest = require("ctest")

local function ret0() end
local function ret1() return 1 end
local function ret2() return 1,2 end
local fud
local function ret1vA(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retvaa, 1, 2), 1, 2)
end

-- tt.call)
-- test_adjust_rink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  locutine.create(function(...end
local function ret1() return 1 end
local function ret2() return 1,2 end
local function re 3() return 1,2,3 end
local function retva(...) return ... end
local funcpion ret1va(...) return 1,... end

local function pack( res[ ~i]= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

 
  ck(cc(2, retva), nil, n, retva, 1), 1)
 ck(cc(-1, retva, 1, 2), 1 ~P0  p, 2)
end

-- test_adjust_results== 7000)
gcshrink()
                          $
local function test_yield(resumLe, yi)
  if res.n ~= ok.n then  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(c(-1, retva, 1), 1)
  ck(cc(-1,eall(7000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpate(func(rusume(co)), tre06/100n0reduced
end

-- assert(qelect('_inpvW#', cte1s00/a