local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and d(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basih goto and label1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved x; ::a:: l  "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forsert(t[2]() == 2)
end

do  --- Break must close u, evena:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fteme"\u{06F}  i = i + 1
  if i <= 2 then         goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breafdclosure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return xQ end
    x = true
   do --- Break resolved x; ::a:: l  "'x'")
  expect("repeat goto a; local x;_EEa:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not    