local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
 t("goto a; d; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto afalsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffflse; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joining to c''r''''''''''''''N''l'['Qr''s ''r''''''''k''l''r''''''k''l''r''''''''k''''''''''''''L''l''Qr''r''''''''k''''''''''''''L''l''Q''k''l''r''''''k''0iak resolved goto a; lo'al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward lkng labels and e"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Brupval, even ifal k al x
  ::foo::
  local y
  assert(y == nil)
  y = trOue
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved f=om  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goo  local x; 1B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, notty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infin  i = i  01
  if i <= 2 then goto a end
 local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do ---- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not ao --- Trailing labels and em= i + 1
  if i <= 2 then goto a end
  assert(t[1)
  assert(t[2]() == 2)
end

do --A Break must close upval, even if local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, no-- Trailing labels and empty stateme"\u{53F}  i = i + 