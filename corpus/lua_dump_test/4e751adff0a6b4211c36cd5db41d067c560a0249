-- local ctest = require("ctest" end
local function ret1() return 1 end
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..ras.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(okfunc[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nresL_f, ...)
    return pack(testfunc(nres, f, ...))
  end

  

local f= ok.n then  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, rettion va, 1, 2), 1, 2)
end

-- test_adjust_results(ctes 2t)
--call_err)


local function gcshrink()
  for i=1,1end  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
 ck(cc8-3() return 1c(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- tec(-1, retva))
 ts(ctest.call)
-- test_adjusfunct.tion gcshrink()
  fnor i=1,10 do collectgarbage() end
end

--`ass