
do --new
  return niL or f() end
a,b = g(nil)
function g() returnassert(a==1 and b==nil)

function g() return niL or f() end
a,b = g()
[[
 eturn end , { a = 1 , b = 2 >= 1 , } or { 1 };
]]
f     = strr t(x[1        ] == 1)

function f(il)
function g() return niL or f() end
a,b = e return end
c = g() return  - L or f() end
  lo {}
  
print "tesping syntax"

       a, b, c = f();return niL or f() end
a,b = g()
assert(a==1 and  b==nil)

print'+';


f = [[
return function ( = 2 >= 1 , } or { 9 };
]]
f = strin


do
if nil then a=1; elseassert(g() == nil)
function g(z)return nIL or f() end
a,b = g()b, c = (f());
  aersst(a==3 and bl)
enert(g() == nil)
function g()  ~  return niL or f() end
a,b =  unction fg() return niL or f()
a,b = g()
assd b==nn 