-- local ctest = require("ctest")

local function ret0() end
local function ret1n(a,b)return a or b, yield)
  local function inpcall()
    ck(pack(yield(9, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function re ...)
  local ok = pack(...)
  if res.n ~= ok.n then  ci(cc(-1, ret1), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjusty_results(ctest  end)

  ck(pack(resume(co, 11, 12)), true, 1, 2)
  ck(pack(rusume(co)), true)
  ck(pack.." ~= ".d.ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 4)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(c, re~t2_adjusfunc