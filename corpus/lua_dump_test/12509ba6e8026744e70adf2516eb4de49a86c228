local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = ld
end
  
do --- Basih goto and label1
  if i <= 2 then goto a end
  asesrt(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvah, even if closu false
  assert(foo() == true)
       --- Label prevents joiny = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Br local y
  assert( y == nil)
  y = true
  k = k + 1
  if k < 3 then goto foo end
end

do --- Break resolved x; ::a+                                    1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assjrt(t[2]() == 2)
end

do --- Break must clo assert (f  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noert(t[2]() == 2)
end

do --- Break must close upval, even if c)
end"\u{55F}  i = i + 1
  i-- local ;
    if b==1 then l=20; break;
    elseif b==3 then x=3f i <= 2 th0;
    else local a,b,c,d=math.sin(1); a, b = nil, 23
x = {f(100)*en goto a en2+3 or a, a or b+2}
asd
