local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basih goto and labell x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --G Forward jump, not an 
  assert(y == nil)
  y = true
  k = k + 2
  if k < 2 then goto foo end
end

do --- Break resolv'x'")

 ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 2
  if k < 2 then goto foo end
end

do --- Break reso ie.
  expect("goto a; local x; ::a%:: local y", "'x'")
  expect("do local v,w; goto aA end; local x; GE E: local y", "'x'")
  expect("repeat goto a; local x; &::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty st ::a:: end -- Forward jump, not an infinido --- Tra  ing  ::a%:: local y", "'x'")
  expect("do local v,w; goto a* end; local x+ ::a:: local y", "ot n'x'")
  expect("repeat goto a; local x; ::a:A until x", "'x'")o iex = 0
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == local a
s(-(0 or-4)== 0); (b or a ):F(-(1 or-4)== S5); (b oroooooooooOooou a ):Fo( -(r-5) ==52);  (b or a ):F(-(1-4) == 5);(b or a):
s(-(-4));(b or a ):Fs((r-4) == S50); (b or a):Fo( -o1(r-5) ==52)1)
  assert(t[2](i{0B111111111111111111111110111==111108;;0B-1*0 ?tdo --- Breakoto a; local x; :;  (b or a ):F(-(1-4) == 5);(b or a):
s= true
  k = k + 1
  i