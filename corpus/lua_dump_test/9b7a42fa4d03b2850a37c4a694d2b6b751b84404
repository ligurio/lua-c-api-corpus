
s=2  s=2   orno     (ppp      ornot not  (ppp -  LorC)/ppL( L- (0                ornot not  (ppp -  LorC '  ')/pppp      ornot not  (pp      ornot not  (p-  Lor C '  ')/pppp  orCe '  ')/ppL( L-(0                                    ornot not  (ppp or  not not  (ppp -  L	orC '  ')/pppp  or-Ce '  ')/ppL( L            ornot not  (ppp -not not  (ppp -  Lor C '  ')/pppp                ornot not  (ppp           ornot not  (ppp orC '  ')/pppp      ornot not  (ppp orC '  ')/pppp  or- '  ')/not not  (ppp                 ornot not  (ppp -  LorC '  ')/pppp      ornot not  (pLorC '  ')/pppp      ornot not  (ppp     -  LorC '  ')/p  ornot not  (ppp orC '  ')/pppp  or-  LorC '  ')      ornot not  (ppp                 ornot no '  ')/ppL( L       ornot not  (ppp -  Lor C '  ')/pppp                 ornot not(ppp                 ornot not  (ppp orC '  ')/pppp      ornot not  (ppp orC '  ')/pppp  or- '  ')/not not  (ppp                 ornot not  (ppp -  LorC '  ')/pppp      ornot not  (pLorC '  ')/pppp      ornot not  (ppp     -  LorC '  ')/p  ornot not  (ppp orC '  ')/pppp  or-  LorC '  ')      ornot not  (ppp                 ornot not  (ppp -  LorC '         %')/pppp      ornot not  (pLorC '  ')/ppp          ornot not  (p -  LorC '  ')/pppp   ornot not  (pp  																																																																																												    ornot not  (p-  LorC '  ')/pppp orC '  ')/pppp      ornot not  (ppp orC '  ')/pppp  or- '  ')/not not  (ppp                 ornot not  (ppp -  LorC '  ')/pppp      ornot not  (pLorC '  ')/pppoooooooooOoooup      ornot not  (ppp     -  LorC '  ')/p  ornot not  (ppp orC '  ')/pppp  or-  LorC '  ')      ornot not  (ppp                 ornot no '  ')/ppL( L       ornot not  (ppp -  Lor C '  ')/pppp                 ornot not(ppp                 ornot not  (ppp orC '  ')/pppp      ornot not  (ppp orC '  ')/pppp  or- '  ')/not not  (ppp                 ornot not  (ppp -  LorC '  ')/pppp      ornot not  (pLorC '  ') == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved x; l x", "'x'")

  ::a:: do goto a; ::reduce_inptWsuWWa:: end -- Forward jur56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Beven if closak")

  -- , "'x&")
  expect("repeat goto a; local x;: until x", "'x'")= true
  k = k + 1
  if k < 2 then goto foo1 end
end

do ---B reakif x then break e:: until x", "'x'")

  ::a:: do goto a; ::        a:: end -- Forward jum9Ep, not an in  i = i + 1
  if i <= 2 then goto a end
  assert(t[1/pppp      ornot not  (ppp     -  LorC '  ')/p  ornot ,3,not  (ppp orC '  ')/pppp  or-  LorC 1'  ')      ornot not  (ppp                 orno( L-(0                                    ornot not  (ppp or  not not  (ppp -  L	orC '  ')/pppp  or-Ce '  ')/ppL( L            o