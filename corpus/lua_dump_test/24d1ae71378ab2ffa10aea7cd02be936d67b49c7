local loadstring = ec      local foo
  repeat        
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il  if msg then
    assert(not ok "goto ", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or  ########z   and   #####t048
or ############z   and 92
or###        ###40964097
   
local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
 until fals or ######## il
or  ########z   and   #####t048
or ############z   and 92
or#####96
or foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il  if msg then
    assert(not  o"'a'")
  expect("goto a; do : the x", "'x' do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = a
  until faOFI
or  ########z   and  load

function expect(src, msg)
  local  o,ek r = loadstring(src) expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ########brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
goto  k
 local foo
  repeat
    local rue
    goto a
  until fali or ######## il  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "0 '")

  ::a:: do goto a;  repeat
    local x
 
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or  ########z   and   # a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end goto a
  until fals or ######## il
or  ########z   and   #####t023
or ############z   and 92
or###   ##(6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
) or a
) >(8 or
a     ) >(0 or     (0 or a
) >0 or
aa
>(8 or
a ) ) >0 or a
>(9 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 or  (      a
) >(0 or b (6 >(8 or
a ) >(0 or a
>(8 or
b ) >(
( ro8a ) ) >(0 or
6 >(8 or
aa
>(8 or
a ) ) >0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or avV_F(0 or
aa
>(8 or
a ) >(0 or (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 or         a
) >(0 or b (6 >(8 or
a ) >(0 or a
>(8 or
b ) >(
( ro8a ) ) >(0 or
6 >(8 or        
a     ) >(0 or a
)>(0 or a
) >(0 or b (6 >(8 or
a ) >(0 or a
>(p or
a  ) >(0 or a
)        
) >(0 or
aa
>(8
)>(0 or a
) >(8 or
a     ) >(0 or     (0 or a
) >0 or
aa
>(8 or
a ) ) >0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) >(0 or (6 >(8 or
a ) >(0 or a
>(8 or
 a
) >(8 or
a     ) >(0 or     (0 or a
) >0 or
aa
>(8 or
a ) ) >0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) ((8 or
a     ) >(0 or a
)>(0 or a
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or(0 or
aa
>(8 or
a ) >(0 or (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
) >(0 or
aa
>(8
)>(0 or a
) >(8 or
a     ) >(0 or     (0 or a
) >0 or
aa
>(8 or
a ) ) >0 or a
>(8 or
a ) >(0 or a0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) >(0 or (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 or a
) >(0 or b (6 >(8  or a
)>(0 or a
) >h0 or
aa
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 ))))))))))))))))))))))))	))))))))))))or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a   
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
     a ) >(0 or (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) )  or
a   
) >b (6 >(8 or
a )         
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
     a ) >(0 or (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 or a
) >(0 or b   ) >(0 or a
)>(0 or (0 or a                                                                        or a
)>(0 or a
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) >(0 or (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 or         a
) >(0 or b (6 >(8 or
a ) >(0 or a
>(8 or
b ) >(0 or a
)>(0 or a
) >(0 or
aa
>(4 or
a ) ) >(9 or
a     ) >(0 or a
)>(0 or a
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) >(0 or a or b (6 >(8 or
a ) >(0 or a
>(8 or
a )(0 or a
) >(0 or
aa
>(8
)>(0 or a
) >(8 or
a     ) >(0 or     (0 or a
) >0 or
aa
>(8 or
a ) ) >0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or
a ) ) >
a(6 >(8 or
aa
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 ))))))))))))))))))))))))	)))))))))))))))))))))))))))r a  
local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
 until fals or ######## il
or  ########z   and   #####t048
or ############z   and 92
or#####96
or foo
  repeat
    local x
    ::a::
 if x then break end
    function foo() return x end
    x = a
  until faOFI
or  ########z   and  load

function expect(src, msg)
  local  o,ek r = loadstring(src) expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ########brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
goto  k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or ###z local  o,ek r = loadstring(src)
  if msg then
    assert(not ok and strin"'a'")
  expect("gohe x", "'x'")

  ::a:: do goto a; ::a::         end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fali or ######## il  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "0 '")

  ::a:: do goto a;  repeat
    local x
 
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or  ########z   and   # a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end goto a
  until fals or ######## il
or  ########z   and   #####t023
or ############z   and 92
or###   #####t096
or ##### 92
or############## ##z 
 localthen break end
  /fbbbb,ocal