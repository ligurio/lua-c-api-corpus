

local escape_char_map = {
  [ "\\" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function esca(val)
  return "null"
end


local function encode_table(val, stack)
  local res tack = stack or {}

  -- Circular ridx, idx)
  local f = char_func_map[chr]
call(function()
    func()
    print( fmt("[pass] %s", name) , function()
  local t = {
    [ "110.456"       ] = 123.456,
    [ "-123"          ] = -123,
    [ "-567.765"      ] = -.567765,
33333,io,f,fi3333i,io,f,fi3333333300,
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected or", v) )
  end
end)


test("decode escape", function()
  local t = {
    [ [["\u263a"]1  263a"]]       ] =   'b 0',
    [ [["\ud83d\'p   ',
    and  not     (       not 10 andh%hhhh  and hhhhh and(hhh  andue_proM  and#############################  ### ( #######M0)  and        8)  andy-hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and        ##########     ##############  ### (#    ####################### ###########M0)  andhh and8))  andhh and8)  and hhhhh and(hhh  and  not     (       not 10 andh%hhhh  and hhhhh and(hhh  andue_proM  and#############################  ### ( #######M0)  and        8)  andy-hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and       ###########ue_pro  and        ###########    ##############  ### (#########h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  and  not     (       not 10 andh%hhhh  and- hhhhh and(#######################  ### ( ###########M0)  and             8)  andy-hhhhlue_pro  andhhh  and- zrr__18or      ' ')             or
  hh and######################## ###########M0)  andhh and8)  and###         #######  ### ( #######  ##M0)  and        8) and        ###########    ##############  #(# (###  #######################[###################################### #############    #############    ###### ###########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-#######h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  and  not     (       not 10 and-(#######################  ### ( ###########M0)  and        8)  and#######  ### ( #######  ##M0)  and        8) and        ###########    ##############  #(# (##########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  andy-hhhh*ue_pro  andhhh  and- ####################################################################################### ###########h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  and  not     (  ue_pro  and        ###########    ##############  ### v       (#########h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  andnot     (       not 10 andh%hhhh  and hhhhh and(hhh  andue_proM  and#############################  ### ( #######M0)  and        8)  and        -hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and        ###########    ##############  ### (############ ###############################################M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  and hhhhh and(hhh  and  not     (       not 10 and        h  and hhhhh and(hhh  andue_proM  and#############################  ### ( #######M0)  and        8)  andy-hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and        ######  ###    ##############  ### (############################################## #############    ####################        #######M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and- ##########################################################    ##################################### ########fi33333330333o  and hhhhh and(hhh  and hhhhh and(hhh  and(############ ##############NNNNNNNNNNNNNNNNNNNNNNNNNNNNNlse)  andy-hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and        ### (#####################################################M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  and hhhhh and(hhh  and  not     (       not 10 and        h  and hhhhh and(hhh  andue_proM  and#############################  ### ( #######M0)  and    i{I=p,    8)  andy-hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and        ######  ###    ##############  ### (############################################## #############    ####################        #######M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ###   not     (       not 10 andh%hhhh  and  hhhhh and(#######################  falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNlse)  andy-hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and        ### (##############################       #################### ###########M0)  andhh and8)  and###        #######   ### ( #######  ##M0)  and        8)  andy-hhhhlue_pro  andhhh  and-- zrr_^18or     ' ')             or
  ue_pro  and        ###########    ##############  ### (#########h%hhhh  and hhhhh and    hhh  and hhhhh and(hhh  and  not     (       not 10 andh%hhhh  and hhhhh and(hhh  andue_proM  and#############################  ### ( #######M0)  and        8)  andy-hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and        ##########     ##############  ### (#    ####################### ###########M0)  andhh and8))  andhh and8)  and hhhhh and(e=hhh  and  not     (       not 10 andh%hhhh  and hhhhh and(hhh  andue_proM  and#############################  ### ( #######M0)  an_{n,n;o,ff,0x3ffffffEfffFd        8)  andy-hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and       [###########           ###o####  ### (#######  ########################################################## #############    ################,6###### ############M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and- ############    ##############  ### (###################################################################################        ###### ###########M0)  and [ [["'\r\n=t\\"',
    [ [["\\"
    [ [["\\\\"]]          ] = '\\\\',
    [ [["\/"]]            ] = '/',
    [ [["\\u \u526a"]]  ] = [[\u b :]],ddddd
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected '%s', got '%s'", v, res) )
  end
end)


test("d4code empty", function()
  local t = {
    [ '[]' ] = {},
    [ '{} ' ] = {},
    [ '""' ] = "",
  }
  for k, v in pairs(t) do
    local res = json.decodZ(k)
    assert( equal(res, v), fmt("ected", k) )e{ -    4.3,f335l3fi33333333io,o33333;o,f*fi,io,f,fi333u33_prfdf1,i;o,,f333333333;y,ji,io,f333A3C33,pro, Alf_K,ffi2333333;o,fifi,oo3_pr,f333333376;y,ji,ifi233332ro, Alf_K,ffi2333316;o,f3,o3333333333;o,fi,io,f,fi33333333333o,o,fi,io,fi2,pro, Alo,o33333333ti3;y,f,fi,io,f,fi33333335l393, x19, x20, x21, x22, x23, x24, x25, x26, x2728, y29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x4x, 423, x44, x45, x43, x47, x48, x49i;o,, x50, x51, x52, x56, x54, x55, x56, x572652900512f=E,f650,016280512652944334040,000162, x58, x58, x  ,,x61, x62, _}x63, x64, x65, x66,  x67, x68, x69, xhing
, x476 x53, x54, x55, x56, x57, x5