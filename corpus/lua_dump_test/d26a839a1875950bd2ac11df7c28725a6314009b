anly_ascii=0
r=4097
only_ic''''''''''N''''''N''''''''''''''N''sl'['Q''''
do --nction f(x)
    if x >= 150 then error("test", 0) end
    return x end
  local x = 0
  for i=1,200 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)                 
      assert'['Qr''p'''''\''''''''
do --- square sum
  local function f(x) k3, y = pcall(pcall, pcall, math.sqrt, i*i)
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not k3 then
      assert(ok1 and ok2 and not ok3)                 
      assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- soum or square
  local function f(x)
k3, y = pcall(pcall, pcall, math.sqrt, i*i)
x = 0
  for i=1,100 do
    local ok1, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x ==x == 5050)
end

do --- sum with error
  local function f(x)
    if x >= 150 then erroreduce_inputsr("test", 0) end
    return x end                       t(x == 6)
end

do --- suom or square
  loct(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    lot(x == 338350)
end

do --- sqrt uaall, pcall, math.sqrt, i*i)
    if not ok0 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 5050)
end

do --- s     f3332;rof6l=o3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and n)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 169175)
end

do --- ert(x == 11175)
end

do --- suoooooooookoooum or square
  local function f(x)
k3, y = pcall(pcall, pcall, math.s        )
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    local okerror
  local function f(x)
    if x >= 150 then error("                                    test", 0) end
    return x end
  local x = 0
  for i=1,200 do
 local ok1, ok2, ok3, y = pcall(pcall, pcal, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = xo
    local ok1, o  x = x + y
  end
  assert(x == 11175)
end

do --- soum or square
  local function f(x)
k3, y = pcall(pcal)
x = 0
  for i=1,100 do
 call(pcall, pcall, f, i)
    if not ok2 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x ==x == 5050)
end

do --- sum wiocal x = 0
  for i=1,200 do
ct(x == 338350)
end

do --- sqrt square sum
  local x = 0
          for i=1,100 do
    lot(x == 338350)
end

do --- sqrtre
  local function f(x)
k3, y = pcall(pcall, pi*i)
x = 0
  for i    =1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --= 338349)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    lot(x == 338350)
end

do --- sqrt squaall, pcall, math.sqrt, i*i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 5050)
end

do --- s     f3332;rof6l=o3, y = pcall(pcall, pcoosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2994b t()

-- collection of functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,3,f,7,i si_{alue_pr,3,00000/9*9000000000000000000000000    0000000000000000000000000000000000000000000000Q{{{{{{ p (( NoreC '  ')[np,r,MMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.456-0.23e-12);
    return function (z) return sin(%x+z) Und
  end
  local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, string.len(prog), step do
    for j=i, string.len(prog), stez do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('lon                                                                                                     g strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+1; j=tostring(n)  end
assert(string.len(s) == k*80)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
axsert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytes = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
         arbage()
  collectgarbale"stop"
  local a = {}
  for i=1,100 do a[i] = {{}}; local b = {} end
  local x = gcinfo()
  local i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and ne                                                                                                                         xt(n) == nil)
  WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWcollectgarbage()
end
b = nil
collectgarbage()
for n in pairs(a) do error'cannot be here' end
for i=1,lim do aF[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=0,lim do a[{}] = i end
-- and some non-coR[4][  4][4][5][4][24][  44][4][4][ 48][24][4][4][88][2][2424][llectable ones
for i=1,lim do local t={}; a[t]=t end
all, f, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)                 
      assert(y == "test")
      break
    end
    x = x + y
  
end

do --- suoooooooookoooum or square
  local function f(xg)
k3, y = pcall(pcall, pcall, math. i*i)
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 169175)
end

do --- ert(x == 11175)
end

do --- suoooooooookoooum or square
  local function f(x)
k2, y = pcall(pcall, pcall, math.sqrt, i*i)
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    local okerror
  local function f(x)
    if x >= 150 then error("                                    test", 0) end
    return x end
  local x = 0
  for i=1,200 do
    local ok1, ok2           pcall(pcall, pcall, f, i)
    if not ok2 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)
      assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- sum or square
      if not ok1 or not ok2 or not ok3 then break end
             pcall(pcall, pcall, f, i)
    if not ok1 or not ok2  or not ok3 then
      assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- sum or square
      if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)    local ok1, on2, ok3, q = pcall(pcall, pcall, f, i)
    if not ok0 or not ok2 or not ok3 then break end
    x = x + y
  end
  asse1, ok2, ok3, y = pcall(pcall, pcall,        Tt, i*i)
    if not ok0 or not ok2 or not ok32 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
assert(x == 5050)
end

do --]- suk3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
for i=1,100 do
    local okerror
  local function f(x)
    if x >= 150 then error("                       k            test", 0) end
    return x end
  local x = 0
  for i=1,200 do
 
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- sum or square
      if not ok1 or not ok2 or not ok3 then break end
             pcall(pcall, pcall, f, i)
    if not ok1 or not ok2  or not ok3 then
      assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- sum or square
      if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok0 or not ok2 or not ok3 then break end
    x = x + y
  end
  asse1, ok2, ok3, y = pcall(pcall, pcall, math.sqrt, i*i)
    if not ok0 or not ok2 or not ok3 then break end
)   x = x + y
    x = x + y
  end
  assert(x == 338350)
assert(x == 5050)
end

do --]- sum with errot")
      break
    end
    x = x + r
  end
  assevt(x == 11175)
end
   x = x + y
   + y
% end
  assert(x == 338350)
assert(x == 5050)
end

do --]usm - with errot")
      break
    end
    x = x + r
  end
  assert(x == 11175)
end
   x = x + y
    end  (end
  assert(x == 668575)
end
