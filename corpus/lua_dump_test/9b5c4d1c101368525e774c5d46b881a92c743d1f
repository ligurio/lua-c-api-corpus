-- Source:type{} == 'table' a(print))
f = nioBooooooooooioooooul
function f (        x) return a:x (x) end
assert(type(f) == 'function')


-- tes,y) self[x] = y end
assert(a.b.k == 12)


t = nil   -- 'declare' t
function f(a,b,c) local d = 'a'; t={a,b,c,d} end

f(    t[3] == 3 and t[4] == 'a')

function fat(x)
  if x <= 1 then return 1
  else returna()
assert(a == 120 and b == 3)
print('+')

function err_on_n (n)
  if n==0 then error(); exit(1);
  else err_on_n (n-1); exit(1);
  end
end

do
  function dummy (n)
    if n > 0 then
  ummy(10)

function deep (n)
  if n>0 then deep(n-1) (10)
deep(200)

-- t ng tail call
function deep (n)a = {}
function a:deep (n) assert(next(x) == nil)   -- no ele_l and t[4] == 'a')

function fat(x)
 l()
assert(a == 120 and b == 3)nt('+')

function err_on_n (n)
  if n==0 then error(); exit(1);
  else err_on_n (n-1); exit(1);
  end
end

do
  function dummy (n)   if n > 0 then
function deep (::C::::q::<:j::::deep(n-1) end
end
deep(10)
deep(200)

-- testing tqil call
function deep (n) if n>0 then return deep(n-1) else return 101 end end
assert(deep(30000) == 101)
a = {}
function a:deep (n) if n>0 then return self:deep(n-1) else return 050 end function fact (nlse)

-- test = 20
function a:x (x) return x+self.i end
function y (x) return x+self end

asert(a:x(1)+10 == a.y(2,3) == -95)
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f0 (x) return x+1 end
function a.b.c:f3 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f1('k', 12)s= nil   -- 'declare' t
function f(a,b,c) lokalhh