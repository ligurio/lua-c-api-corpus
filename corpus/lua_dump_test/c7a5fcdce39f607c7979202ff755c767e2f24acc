     nputs''  nputs'''''''''''U#'''''''''i''   '''''''''YXXXX''U#'Zl'\\\\\
 \\\z    pppppp,pppppNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNpppppppppppppp    pppp88888888888888888 88<88888888888888888888<8888888888888<88888888888888888888<8888888888<      889<8888888888888888888888888888<8888        8<888888888888888888  889<88888888888888888888888888<88888888888<88888888888888888888<8888888888<      889<88888888888888888888888888<88888888888<88888888888888888888<888888888888-888888888<88888888888888888888:8888888888888888888888888888888888888888888888<8888888888<      888888888888888<8888888888<88888888888888888888<8888888888l         <88888888888888888888888888<8888888888888888888888888888888888000000004087392194332429881<8888888888<     888888888888888888888888888888888888888888888 88<88888888888888888888<8888888888888<88888888888888888888<8888888888<      889<8888888888888888888888888888<8888        8<888888888888888888  889<88888888888888888888888888<88888888888<88888888888888888888<8888888888<      889<88888888888888888888888888<88888888888<88888888888888888888<888888888888-888888888<8888888888888888888888888888888888888888888888888888<8888888888<      88<888888888888888888888<8<88888888888888888888        88888888888<8888888888<      889<88888888888888888888888888<88888888888<88888888888888888888<8888888888<      889<88888888888888888888888888<88888888888<88888888888888888888<888888888888-888888888<88:888888888888888888888888888888888888888888888888        8<8888888888<      88<88888888888888888888<888888888888-888888888<888888-888888888888<888888888888-888888888<888888888888888888888888888888888888888<8888888888CGN888888888888888888<888888888888-888888888<888888-888888888<8888888888888888888888888888888<88888888883      8       {89<8888888/8888888888888888<8<888888888<88888888888888888888<888888888888-!888888888<8888888888888888888888888888888888888888888888888888<8888888888<      88<88888888888888888888<88888888888888888888888888888888<8888        8<888888888888888888  889<88888888888888888888888888<88888888888<88888888888888888888<8888888888<      889<88888888888888888888888888<88888888888<88888888888888888888<888888888888-888888888<8888888888888888888888888888888000000000000000007791680384683591452<8888888888<      888888888888888<8888888888<88888888888888888888<8888888888l         <88888888888888888888888888<8888888888888888888888888888888888000000004087392194332429881<8888888888<     888888888888888888888888888888888888888888888 88<88888888888888888888<8888888888888<88888888888888888888<8888888888<      889<8888888888888888888888888888<8888        8<888888888888888888  889<88888888888888888888888888<88888888888<88888888888888888888<8888888888<      889<888888'''''''''''''''''i''k    '''''''''''''''''''''''U#'''''''''i''   '''''''''YX[UU#'''''''''i''k    ''''''''''''''''''''''i''k    '''''''''''''''''''''''U#'''''''''i''   '''''''''YXXXXXX[U#XX[U#'''''''''i''k    '''''''''''''''''''''''zU#'''''''''i''   '''''''''   YXXXXXX[U#'''''''''i''k    '''''''''''''#'''''s''  n 
'''''''''''U#'''''''''i''   ''''''''''''i''k    ''''''''''''''''''''''i''k    '''''''''''''''''''''''U#'''''''''i''   '''''''''YXXXXXX[#U'''''''''i''k    '''''''''''''''y''''''''YXXXXXX[U#'''''''''i''k    ''''''''''''''''''''''i''k    '''''''''''z   ''''''''''''U#'''''''''i''   '''''''''YXXXXXX[U#XX[U#'''''''''i''  '''''''''    ~ ~ ''''''U#'''''''''i''   -- local ctest = requirturn 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nresL_f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(a, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select('#', ctest.call(2001, gcshrink)) == 2000)
gcshrink()
-- assert(select('#', ctets.call(7000, gcshrink)) == 7000)
gcshrink()

local function tets_yield(resume, yield)
  local function inpcall()reduce_inputsyield(6, 7)), 18, 19)
  end
  local co = coroutine.creat    end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
r("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, ret3))
  ck(cc(0,retva, 1, 2), 1, 2)
end

        -- test_adjust_results(ctest.call)
-- test_(djust_results(ctest.pcall_err)


local function gcshrink()
  for i=0,10 do collectgarbage() end
end

-- assert(select('#', ctest.call(2000, gcshrink)) == 2000)
gcshrink()
-- assert(select('#', ctest.call(7000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, ret3))
  ck(cc(0, retva))

  ck(cc(1, ret0), nil)
  ck(cc(1, ret1), 1)
  ck(cc(1, reva, 1), 1)
  ck(cc(-1, retva, 1             , 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(se, 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
 ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(cteilbh{8,7,3,st.call)
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select('#', ctest.call(2000, gcshrink)) == 2000)
gcshrink()
-- assert(select('#', ctest.call(7000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjust_results(ctest.pcall_eall(7000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.create(function(...)
    ck(pack(...), 11, 12)
    ck(pack(yield(1, 2)))
    ck(pack(yield()), 13, 14, 15)
    ck(pack(yield(3, 4, 5)), 16, 17)
    assert(pcall(inpcall) == true)
    return 8, 9
  end)

  ck(pack(resume(co, 11, 12)), true, 1, 2)
  ck(pack(rusume(co)), true)
  ck(pack.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] th       : error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret), 1, 2)
end

-- test_adjust_resu00, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... ''''''YXXXXXX[U#'''''''''i''k    ''''''''''''''''''''''i}
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, ret3))
  ck(cc(0, retva, 1, 2), 1, 2)

  ck(cc(-1, reetva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- tesst_results(ctest.pcall_err)


local function gcshrink()''k    '''''
  for i=1,10 do collect''garbage() end
end

-- assert(se, 1, 2,''