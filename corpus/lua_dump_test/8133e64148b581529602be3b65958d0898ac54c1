local loadstring = loadstring or load

local function expect(src, msg)
  local ok, err = lo("do lak end", "break")

  -- 3rror: goto i=tocal fooo33333333330333332o
  repeat
    local  x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until(foo() == true)
end

do --- Label p::a:: re is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  asser(foto() == true)
end

do --- Lae
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() ==e)
end

do ---  si_{alue_pr,f0i333333333333w30333332o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Label prev  ts joining", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jre is parsed after break.
  local foo
 o(o((o(k..((o((o(k..(i..(i or t())or t(k..(i..(i or t())or t(k..(i..(i or t(i..(i or t())or i..t(k..(i..(i or t())or t(k..(i..(i or t(i..(i or t())or i.(i or t())or t())repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo()    x = true
    goto a
  until false
  as
 pect(src