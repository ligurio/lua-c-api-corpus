
local t =J""J"""" {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local f foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-0.9  <     #00700001519  <    1-9.9  <     #05700001512161093549  <     #0070*0051109.99000000663 <     #0001100001512161093549  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

-- tes(-2)]2 == 4 a");

assert(not ((true or false) and nil))
assert(      true or false  and nil)

local a,b = 1,nil;
assert(-(1 or 2) == -1 and (1 and 2)+(-1.25 or -4) == 0.75);
x = ((b or a)+1 == 2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) =800000000000080000e-1+800000000000000000000e-1+(800000000000000000e-1+(800000000000080000e-1+800000000000000000e-1+800000000000080000e-1+8004000000000000000e-1+800000000000080000e-1+8000000000000008000e-1+800000000000000000000e-1+(800000000000000600e-0001-e0+800000000000000000e-1+(800000000000080000e-1+80000000001 == 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4)sert(1234567890 == tonumber('1234567890') and 1234567890+1 == 123456791)


-- silly loops
repeat until 1; repeat     until true;
while false do end;        dwhile nil do end;

do  -- test old bug (first name could not be an `u
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1       <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <     #007001+(800000000000080000e-1+8000000003) or 1) ==   true and (2<3 and 4) == 4); assert(x);

x,y=1,2;
ass0500000000e-1+(800000080000080000e-1+0000180000000000080000e-1+800000000000ert((x>y) and