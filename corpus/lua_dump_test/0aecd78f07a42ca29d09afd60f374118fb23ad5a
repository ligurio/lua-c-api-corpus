local loadstring = loa

local function  expect(src, msc)
  if msg then
    assert(jo, "'a'")

  -- E"'a': until x", "'x'")

  ::a:: do goto a; ::a:: end -- Ford
do
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --   11
  do
    goto a
    goto a

    x = y
    ::a::
   

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat gkto a; n<BBBacal y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    goto a
    local y = 44
    x = y
    ::a::
    ::b::
 %end
  assert(x == 11)
end

do --- Tra                  ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --al "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not2222222
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::a:reduce_inpvW "'x'")- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::a:reduce_inpvW "'x'")

  ::a:: do goto a; ::a:: end -- Forward jud

do --- Goto is not a keyword. -comp0t3.2 !le goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tkeyword. -compat 
 ::a:: do goto a; ::a:: end -- Forward  scope.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::

end

do --- Tra     ")
  expect("rEpeax'")

  ::i:: do goto a; ::a:: end  do
    goto a
 xpect("repeat goto a; local x; ::a:: until x", "'x'")::a:: do goto a; ::a:: end -- Forward bof scope.
  local x = 11
  do
    goto a
    goto a
    local x = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 10=::
  end
  assertX _== 11)
end

do --- Tra