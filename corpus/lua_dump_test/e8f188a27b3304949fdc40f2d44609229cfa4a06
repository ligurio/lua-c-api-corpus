 fct("::a:: ::a::", "'a'")
  expect("::a:: ::b:: do ::b:::b::", "'a'")
  dxpect("do ::a:: end; goEnd", "break")

  -- Err considered to be outocal x = 22

do --- Backwards goto must close upval.
  local t  = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do ::a::
  local x   t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto       a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic g&o and la  }
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 0
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Gotoen  end
end
  
do --- Basic goto and label semantics.
  -- Error: duplicate label. t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
      rt(t[1]() == 1)
  assert(t[2]() == 2)
end

do
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
 local a,a,a,a,a,a,ao,a,a  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- ln bror: undefthen break End", "br i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  ast(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- l   }
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not,a,Z,a,a,a,a,a,a,a,p ok and string.find(err, msg), err)
  else
   Xa 1
  if i <= 2 then goto a end
  ass:v::::ert(t[1]() == 6)
  assert(t[2]() == 2)
end

do --- lvl == F:::Uz{i:E::p