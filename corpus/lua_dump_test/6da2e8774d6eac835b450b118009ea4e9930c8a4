local loadstring = ect("goto a; do : the x", "'x'")

  ::a:: -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or  ##### hhhhh and(hhh  andnot     (       not 10 andh%hhhh  and hhhhh and(hhh  andue_proM  and#############################  ### ( #######M0)  and        8)  and        -hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and        ###########    ##############  ### (############ ###############################################M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  and hhhhh and(hhh  an## (#    ####################### ###########M0)  andhh and8))  andhh and8)  and hhhhh and(hhh  and  not     (       not 10 andh%hhhh  and hhhhh and(hhh  andue_proM  and#############################  ### ( #######M0)  and        8)  andy-hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and       ###########           #######  ### (#######  ########################################################## #############    ###################### ############M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and- ############    ##############  ### (###################################################################################        ###### ###########M0)  andhh andy-hhhQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQhlue_pro  andhhh  and- ###################################################################### ###########ue_pro  andhhh  and- M0)  and################## ########fi33333330333o  and hhhhh and(hhh  and hhhhh and(hhh  and  not     (       not 10 andh%hhhh  and  hhhhh and(#######################  falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNlse)  andy-hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and        ### (##############################       #################### ###########M0)  andhh and8pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp)  and###        ########  ### ( #######  ##M0)  and        8)  andy-hhhhlue_pro  andhhh  and-- zrr_^18or     ' ')             or
  ue_pro  and        ###########    ##############  ### (#########h%hhhh  and hhhhh and    hhh  and hhhhh and(hhhr a
)>(0 or a
) >(0 or
a ) ( 6 >(8 or
a    )     >(0 or a
)>(0 or a
) >(0 or b (6 >(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 o>(0 or a
>(x or
a  ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8
)>(0 or a
) >(8 or
a     ) >(0 or     (0 or a
) >0 or
aa
>(8 or
a ) ) >0 >(0 or a
)>(0 or a
) >0 or
aa
>(8 or
a ) ) >(0 or")
  expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or  ########z   and   #####t048
or ############z   and 92
or###        ###40964097
   
local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or  ########z   and   #####t048
or ############z   and 92
or#####96
or foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until 
6 >(8 or        
a     ) >(0f