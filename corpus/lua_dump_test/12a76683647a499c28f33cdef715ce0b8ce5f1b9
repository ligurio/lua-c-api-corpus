-- Source: PUC Rct == turn x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y())

a.t = {i=-100}
a["t"].x = functiorend
function a.b.c:f4 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity to1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)
















do
  local a = {x=0}
 a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assec:f2 (x,y) self[x] = y e.

print("testing functions qnd calls")

-- get the opprt(typ) a{   t) == type(print))
f = nil
function f (x) return a:x (                                              x) end
assert(type(f) == 'function')


-- testing local-fction err_on_n (n)
  if n==0 then error(); exit(1);
  else err_on_n (n-1); exit(1);
  8 b=#7E88 c=7E87 bx+self end

assert(a:x(1)(2        95)

do=2E88                                          hh{h{h,h}orh{{{a.y = self.x+x, 2