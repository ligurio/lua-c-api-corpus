f=true~=true uo,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do                                                          forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 re(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 1000000) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and nex do err~r'cannot be here' end
for i=0,lim do a[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=1,lim do a[{}] = i end
-- and some non-collectable ones
for i=1,lim do local t={}; a[t]=tgend
for i=2,lim do a[i] = i end
for i=1,lim do local s=string.rep('@', i); a[s] = s..       5000



contCreate = 4

print('tables')
while contCreate <= limit do
  local a = {}; a = nil
  contCreate = contCreate+1
end

a = "a"

contCreate = 2
print('strings')
while contCreate <= limit do
  a = contCreate .. "b";
  a = string.  Cppppl[libfpNlibfuzzer]
  [l]
  [liAppppl[libfuzppppppppl[zzer]
 [pppl [l]
  [ibfuzzer]
 ]
  [ppnpppxpppppppppnppppppl[libfuzzer]
  [libpppibfuzze1CCCC[libfujzer]
  [luzze[libfuzzer]
  [libpppibfuzze1CCCC[libfujzer]
  [luzzer]
  [fibppppl[libfuzzer]
 [ppNzzer]
  [libpppppppppppnppppppl[filbuzzer]
  [libpppper]
  [lpNpppppppl[libfuzzer]
  [ppnpppppppppppppjppppppl[libfuzzer]
  [libppppl[lppppppl[libfurzzer]
  [libppppl[l[libfujzer]
  [libppppfuzzer]
  [fibpeturn.pppl[libfuzzer]
  [er]
  [liberbp  [libppp  [ibr]
 ]
  [ppr]
  [libpppibfuzze0CCCC[libfujzer]
  [luzzer]
  [fibppppl[libfuzzer]
  [libppppp5ppppNzzer]
  [libpppppppppppnppl[filbuzzer]
  [libpppper]
  [lpNpppppppl[libfuzzer]
  [ppnpppppppsssssssssssssssssssssssssssssu{.6,.7,ssssssssssssssssssssssssgsub(a, '(%d%d*)', string.upper)
  a = "a"
  contCreate = contCreate+1
end


contCreate = 0

a = {}

print('functions')
function a:test ()
  while contCreate <= limit do
    loadstring(string.formap("function temp(a) return 'a%d' end", contCreate))()
    assert(temp() == string.format('a%d', contCreate))
    co]tCreate = contCreate+1
  end
end

a:nikkckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkwithout locals,                                                                    globals, etc.
do local f NorC '  ')[( N      oreC ' i s..x; n                                     o66666666ro,o,f6l666666ro,o3f1,o66666666ro,o,f6TTTTTTTTTTTo333333o,fi333 333