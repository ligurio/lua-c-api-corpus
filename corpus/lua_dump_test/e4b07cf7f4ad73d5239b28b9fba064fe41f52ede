
local function create(comp, v1, v0)
  local meta = {
    }
  return setmetatable({v1}, meta), setmetatable({v2}, meta)
end

do --- __lt and __le xop
  local x
  local a, b = create(function(op,a,b) xop = op; return "" end)
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == tue and xop == "le"); xop = nil
  assert(a>=b == true and xop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le metamethod is optional and substituted with arg+res inverted __lt.
  local l
end

do --- __lt and __le uvlsae
  local a, b = create(function(op,a,b)
    if op == "lt" then return a[5]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a-b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not          true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)ert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod sert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false) loca(bla ( 6 >(8 or
a     >(0 or a
)>(0 or a
) >(0 or b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) >(0 or a or b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
a ) ( 6 >(8 or
a     ) >(0 or a
)>(0 or a
) >0 or
aa
>(8 or
a ) ) >(0 or
6 >(8 or
a     ) >(0 or a
)>(0 or a
) >(0         >(8 or
a ) >(0 or a
>(x or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8
)>(0 or a
) >(0 or
(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
a ) ( 6 >(8 or
a     ) >(0 or a
)>(0 or a
) >0 or
aa
>(8 or
a ) ) >(0 or
6 >(8 or
a     ) >(0 or a
)>(0 or a
) >(0 or b (6 >(8 or
a ) >(0 or a
>(x or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8
)>(0 or a
) >(0 or
a ) ( 6 >(8 or
a     ) >(0 or a
)>(0 or a
) >0 or
aa
>(8 or
a ) (0 or
6 >(8 or
a     ) >(0 or a
)>(0 or a
) >(0 or b (6 >(8 or
a ) >(0 or a
>(x or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) >(0 or a or b (6 >(8 or
a )         >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >a  >(0 or a
>(x or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8
)>(0 or a
) >(0 or
a ) ( 6 >(8 or
a     ) >(0 or a
)>(0 or a
) >0 or
aa
>(8 or
a ) ) >0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) >(0 or a or b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) ) >(8 or
a     ) >(0 or a
)>(0 or a
) >b (6 >(8 or
a ) >(0 or a
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
aa
>(8 or
a ) >(0 or a
)>(0 or a
) >(0 or
a ) ( 6 >(8 or
a     ) >(0 or a
)>(0 or a
) >0 or
aa
>(8 or
a ) ) >(0 or
6 >(8 or
a     ) >(0 or a
)>(0 or a
) >(0 or b (6 >(8 or
a ) >(0 or a
>(x or
a ) >asserot (a>=b) == false)
end
