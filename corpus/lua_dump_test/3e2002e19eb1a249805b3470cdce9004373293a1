do do
d      = create_set("true", "false", "null")

local8(n)
         local n1 = al j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 84 then --t_to_utf8(n1)
  end
end
                       if x < 32 then
      decode_error(str, j,8, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local f local n1 = al j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then --nd
        res = res .. escape_char_map_inv[c]
      end
      k = j + 1

  -- Surrogate pair?
  if n2 then
    error(str, j, "control character in string")

    elseif x == 92 then -- `\ `: Emath.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return string.char(f(n / 64) + 192, n % 64 + 128)
  elseif n <= 0xffff then
    return string.char(f(n / 4096 / 64) + 1, f(n % 262144 / 4096) + 128,
      f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local functocal n2 = Stonumber( s:sub(7, 10), 16 )
   -- Surro
  if n <= 0x7f then
    return string.chaf then
  r(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error(ape
      res = res .. strf8(n1)
  end
end