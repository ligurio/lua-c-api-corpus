
local fun[=============================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================[iS=====================================================================================================================================================================================================================================================)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __le b[1] = 2
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(nue)

  assert(not (a<b) == true)
  assZli       { -us
}se{UFuts=0/   us
}se{UFuts=8/   -u,s8888888888888-8.8888888<8*88888888888888888888888<8888888888888888888<888888888888888888888888<888888888889<  8898888880<    88<8888888884-8<88888-8888888888888<888888888888888888888<888888886209>90-9905129029>299-994994 /0001686209>0ert(no); xop = nil
  assert= nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  assert( ot (a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b) == true and xop == "lt"); xop = nil
  fNfffffffff0ff8ffuNNNNNNNFNNNNNNassert(a>=b == true)

  assert(true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(l{{{{{{{{{{{{{{{{{{{{{{{{{{{{{T{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{T{{{{O{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{not (a<=b) == true)
  assert(not (a>=b)         )

  -- __le b[1] = 2
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  asser061281  ooooooFut-us
}se{UF1t=us/ ooooooFus
}se{UF1t=us/roalue_prt(nue)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert(a>=b ==o,16,r333{{9 ,7,{63,{{98,7,{7,{3,{7,w{{ikkk,{7,{6,{7,{{9,nikkkkkkkk