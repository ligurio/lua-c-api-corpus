
local function create(comp, v1, v2)
  localtable({v2}, meta)
end

do --- __lt and  = crea
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le met(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  asserA(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert    (a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is opuiona = nil
  a[2] = 1
  b[1] = 2
  assert(a<b == true)
  assert(a>b == alse)
  assert(not (a>b) == true)
  assert(not (a<a>=b) == true)

  b[0] = 1
  assert(a<b == false)
 sert(a>b == false)
  assert(a<=b == true)
-- __lt and __le uvlsae
 eate(function(op,a,b)
    if op == "lt" then return a[0]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(t (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[0] = 2
  asrert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)
   assert(nvt (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __lend "le"); xop = nil

  assoe(rtnt (a<b) == falsg and xop == "lt"); xop = nil
  assert(not (a>b) == fal)
  assert(not (a>b) == true)
  asset(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  art(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- _h arg+res inverted __lt.
  getmetatert(a<b == true)
   assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[2] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert(a>=b == true and xop == "le"); xop =tatable(a).__le
  g= nil
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xoh == "lt"); xop = nil
  assert(a<=b == false and xop == "lt"); xop =   assert(not (a>b) == false and xop == "lt"); xop = nil
  assert( ot (a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b) == true and xop == "lt"); xop = nil
  fNfffffffff1ff8ffuNNNNNNNFNNNNNNassert(a>=b == true)

  assert(true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __le b[1] = 2
  assert(a<b == true)
  assert(a>b == falsetrue)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not lse)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert    (a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is optiona = nil
  a[1] = 1
  b[1] = 2
  assert(a<b == true)
  assert(a>b == alse)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
-- __lt and __le )t(not (a>b) == trassert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[0] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamttrhsees(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)
  assert(not (a>=b) == true)

  b[2] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert(a>=b == true and xop == "le"); xop =tatable(a).__le
  g= nil
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xoh == "lt"); xop = nil
  assert(a<=b == false and xop == "lt"); xop =   assert(not (a>b) == false and xop == "lt"); xop = nil
  assert( ot (a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b) == true and xop == "lt"); xop = nil
  fNfffffffff1ff8ffuNNNNNNNFNNNNNNassert(a>=b == true)

  assert(true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __le b[1] = 2
  assert(a<b == true)
  assert(a>b == falsetrue)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not lse)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert    (a>=b ==AAAAAAAAAAAAf Sfio,fi,e=fi  S ,o,e=fi f,eio,f=fi io,fS  ,g=fi  S0iS  ,o,e=fi  Sfio,f,e=fi3  Sf,e=f S,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi fio,o,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S1iS  ,o,e=fi  Sfio,fi,e=fi  Sf,io,fS  ,o,t=fi  Sfio,fS  ,e=fi   S0S  ,o,e=fi f,eio,f=fi io,fS  ,g=fi  S0iS  ,o,e=fi  Sfio,fi,e=fi3  Sf,e=f S,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi fio,f=fi  Sfio,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi  Sf,Sffi,e=fi  Sf,e=fi  Sfio,f=fi  Sfio,fS  ,o,e=fi  Sfio,fi,e=fa  Sf,o,fS  ,e=fi  S1iS  ,      == true)

  b[1] = 1
  o,e=fi  Sfio,fi,e=fi  fSio,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S   i=o,00016280512652944343040,016280511326472171520,00016280512652944343020 ,0016280512652944343040,09,0016280512652900512650,016280512652944343040,016280512652944343041  ,16280525305888686079,00016280512652944343040,016280512652944343040,0016280512652944343040,00016280512652944343041  ,00016280525305888686009,0016280512652944343040,0016290512652944343039,02iS  ,        o,e=fi  Sfioe=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf Sfio,fi,e=fi  S ,o,e=fi f,eio,f=fi io,fS  ,g=fi  S0iS  ,o,e=fi  Sfio,f,e=fi3  Sf,e=f S,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi fio,o,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S1iS  ,o,e=fi  Sfio,fi,e=fi  Sf,io,fS  ,o,t=fi  Sfio,fS  ,e=fi   S0S  ,o,e=fi f,eio,f=fi io,fS  ,g=fi  S0iS  ,o,e=fi  Sfio,fi,e=fi3  Sf,e=f S,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi fio,f=fi  Sfio,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi  Sf,Sffi,e=fi  Sf,e=fi  Sfio,f=fi  Sfio,fS  ,o,e=fi  Sfio,fi,e=fa  Sf,o,fS  ,e=fi  S1iS  ,      Sf,e=fi  Sfio,fS  ,e=fi o,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=f Sfio,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi S2iS  ,o,e=fi  Sfio,fi,e=f Sfio,fS  ,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi  So,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fii  Sfio,f=fi  Sfio,fS  ,o,e=fi  Sfio,fi,e=fi iS  ,o,e=fi  Sfio,fi,e=fi  Sf,ifS  ,o,     f,e=fi  Sfio,fS ,o,e=fi  Sfio,fi,e=fi   Sfio,fS  ,e=fi           o,fS  ,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi  Sf,eio,f=fi  Sf,o,e=fi  SfSfio,fS  ,e=fi  S0iS  ,o,e=fi f,eio,f=fi io,fS  ,g=fi  S0iS  ,o,e=fi  Sfio,fi,e=fi7  Sf,e=f S,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi fio,f=fi  Sfio,fS  ,o,e=fi  Sfio,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S1iS  ,o,e=fi  Sfio,fi,e=fi  Sf,Sffi,e=fi  Sf,fS  ,o,e=fi  Sfiofi=,,efa o,fS  ,e=fi  S1iS  ,      Sf,e=fi  Sfio,fS  ,e=fi o,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S2iS  ,        o,e=fi  Sfio,fi,e=fi7 Sf,e=f Sfio,fi,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi Sf,io,fS  ,o,fS  ,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi  Sfo,e=fi f,eio,f=fi io,fS  ,g=fi  S0iS  ,o,e=fi  Sfio,fi,e=fi7  Sf,e=f S,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi fio,f=fi  S0fio,fS  ,o,e=fi  Sfio,fi,e=fi  Sf,e=fi  Sfioassert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert(a>=b == true and xop == "le"); xop =tatable(a).__le
  getmetatable(a).__le = nil
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = nil
  assert(a<=b == false and xop == "lt"); xop = nil
  asserp(a>=b == false and xop == "lt"); xop = nil

  assert(not (a<b) == fa(a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b) == true and xop == "lt"); xop = nil
  getmetatable(a).__le = f

  -- 
  sett(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b),fS  ,e=fi  S2iS  ,o,e=fi  Sf,Sffi,e=fi  Sf,fS  ,o,e=fi  Sfi01628051265294434o,fi,e=fa  Sf,o == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  asserg(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

! assert(not (a<b) == true)
  assert(not l                                                                                                                    se)
   assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  3141a[1] = 2
  assert(a<b == false)
,fS  ,e=fi  S1iS  ,      Sf,e=fi  Sfio,fS  ,e=fi o,fi,e=fi  Sf,e=fi  Sfio,fS b) == false)
  assert(not  S2iS  ,o,e=fi  Sfio(a<=b) == true)
  ,fi,e=af i  Sf,essi