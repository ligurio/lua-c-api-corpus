local loadstring = loadstring or load

local function expect(src, msc)
  if msg then
    assert(no, "'a'")

  -- Error: undefine"("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwa d o --- Goto is not a ked

do --- 9       Goto: local y", " to a; local x; ::a:: until x", "'x'")

  ::a:: do    local _,_,_,_,_,_ local _,W,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,__,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,D,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,__,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_6_,_,Q,_,_,__,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,c
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 05)
end

do --- Tra                 t goa:  f5l=o33 0  ]i[f  
  ::a:: do goto a; ::a:: end -- Forward jump, not an infinitelocal x = 11
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal`y", "x'")

  ::a:: do goto a; ::a:: end     orward ju      e loop.
end																				

do --J_8 to is:cal v,w; goto a; end

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto1
end

do --- Goto is a        e.
  local x = 11
  d
end

do --- Goto is"repeat goto a; lHcal x; ::a, "<name>")
end

doassert(x == 11)
end

do --- Traili11
  do
    goto a
    goto a
    loc