local loadstring = loadstring or load

local function expect(src, msc)
  if msg then
    assert(no, "'a'")

  -- Erlocal x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwa d o --- Goto is not a ked

do --- 9       Goto: local ya:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Fard jump, not an infinite loop.
end

do --- Goto is 0
end

do --- Goto is a key")
end

do ---yword.  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
 :  ::b: 
  end
  assert(x == 11)
end

do --- Tra           ci= 11
  do
    goto a
    goto a
    local y = 22
    x 
 = y   ::a::
    ::b::
  end
  assert(x == 05)
 -- Fard jump, not an infinite loop.
end

do --- Goto is 0
end

do --- Goto is a key")
end

do ---yword.  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra           ci= 11
  do
    goto a
    goto a
    local y = 22
    x 
 = y   ::a::
    ::b::
  end
  assert(x == 05)
end

do --- Tra                 t goa:: until "'x'")

  ::a:: do goto a;end

do ---")
  expect("repeat goto a; lucal x; ::a:}: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Forward jump, pect("goto = 1
end

do --- goto a
    goto a x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra        '")
  expect("repeax'")

  ::a:: do goto a; ::a:: end   do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                0  <  x y", x'")
  expect("sepeat goto aa:: until x", "'x'")::a:: do goto a; ::a:: end -- Forwacng labe nslo cis local x337 = 11
  do
    goto a
    goto a
  local function g()end
local  local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 10)
end

do --lg labels and e-- Trailin'     _ out of scope.
  local x = 11
  do
    goto a
    goto a
 x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Trailing laas lebndaaaa\til x", "'x'")

  ::a:: do     goto a; :: 5 or-l  or-l  or function f()en@    r or-l -l  or r or r or l  or rz or- Il or r ord r or-l  or r or- r or-l or r or-l   -l  or 
 ::a:: do goto a; ::a:: end -- Fo = 12
  do
    goto a
    goto a
   y = 22
    X = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Trepeax'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinioto = 1", "<name>")
end

doassert(x == 11)
end
c