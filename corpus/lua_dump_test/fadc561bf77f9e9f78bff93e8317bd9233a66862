local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
 t("goto a; d; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward hu+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joining to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k 
+ 1  if k < 2 then goto foo end
end

do --- ved goto a; lo'al x; ::a:: until "'x'")

  ::a:: do goto a; ::a:: end -- Forward lkng labels and e"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Brupval, even ifal k al x
  ::foo::
  local y
  assert(y == nil)
  y = trOue
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved from  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do loc x; ::a:: local y", "'x'")
  expect("repeat goo  local x; 1B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, notty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infin  i = i  01
  if i <= 2 then goto a end
 local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do ---- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not ao --- Trailing labels and em= i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvab0LLl, KNIL. -lua==cal x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolvak end", "break")

  -- Era "'x'b)

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and empty + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must closenc osure is  = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Bre("break", "break")
  expect("i'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and emptyrailing
  if i <= 2 then goto a end
assert(t[1]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'" 

  ::a:: do goto a; ::a:: end -- Forward j7mp, not an infin= i +01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  as = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved -- Forward jump, not an infinido --- Trail prel k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a;}dbrea:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju\u{10F}  i = i + 1
  if i <= 2 then goto a end
  art(        t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Bretil fi =assert(t[2]() == 2 local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolv'x'")

  ::a:: do goto a; ::a:: end -- Forward!n infinido --- Trailing labels a1
  if i <= 2             then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must cs leoupval,  local x
 ::foo::   local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolv'x'")

  ::a:: do goto a; ::a:: end -- Forward ju"\u{56F} i  = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- BreaNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
 
  if k < 2 then goto foo end
end

doct("do local v,w; goto a; end; local x; ::a:E local y", "'x'")
  expect("rx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nop an i + 1
  if i <= 2 then goto a end
 --- Trailing lab6F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must arsed a ter break.
  local foo
  repeat
    local x
     ::a::
    if x then break end
    function foo() return xQ end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Fm  i (t[1]() == 1= 2)
end

do --- Break must c ose upval, evie is pa x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if K < 2 then goto foo end
end

do --:a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fonts joining to KNIL. _{a,r,75,7  local000 k = 0
  local x
  ::foo::
  local y = k + 1
  if k < 2 then goto foo end
end

do --- Break rl vw; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do ---::a 1 until x", "'x'")

  ::a:: do goto a; ::aj:: end -- Forward jump, not an nfin1idi =01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --A Break must close upval, even if local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, no-- Trailing labels and empty stateme"\u{54F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == T)
  assert(t[2]() == 2)
end

do --- Break must clcal x
  ::foo::
  local y
  assert(y == nil)
  y = true
      k = k + 0
  if k < 2 then goto foo end
end

do --- Break resoreak")
  expect("i'")

  ::a:: do goto a; ::a:: end -- F.o{0b1L L,0b0LL -lua 0==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expectnfinido --- T