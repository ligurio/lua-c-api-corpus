do local x   local function a() x = x + 1 end
  local function b()x=sser
end
(function()
     function a() x = 0,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,aa,an end
    do
    local a,a,a,a,a,a,a,a,a,                     a,a,a,a    local a,a        ,a,a,a,a,a,a,a;
    local a,a,a,a,b,a,a,a,a,a,c,a,a;
    local a,a,a,a,a,a,a,a,a,a,aa,a,amsa,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a       ,a,a,af510l393n end
    do
    local a,a,a,a,a,a,a,a,a,               a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a;
    local kkkka,a,a2335l393N33ro   local a,a,a,a,a,a,a,a,a,a,aa,an end
    do
    local a,a,a,a,a,a,a,a,a,                      a,a,a,a,a,a,a,o
    local a,a,a,a,a,a,a,a,a,                     a,a,a,a    local a,a        ,a,a,a,a,a,a,a;
    local a,a,a,a,b,a,a,a,a,a,aa,a,ams=0/-28 ,a,a
    local a,a,a,a,a,a,a,a,a,a,aa,a,ams=0/-28     /  -8,a,af335l393N33ro   local a,a,a,a,a,a,a,a,a,a,aa,an end
    do
    local a,a,a,a,a,a,a,a,a,              a,a,a,a,a,a,a,af332l393a;
    local a,a,a,a,b,a,a,a,a,a,c,a,a;
    local a,a,a,a,a,a,a,a,a,a,aa,a,amsa,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a       ,a,a,af510l393n end
    do
    local a,a,a,a,a,a,a,a,a,               a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a;
    local kkkka,a,af335l393N33ro   local a,a,a,a,a,a,a,a,a,a,aa,an end
    do
    local a,a,a,a,a,a,a,a,a,                     a,a,a,a,a,a,a,o
    local a,a,a,a,a,a,a,a,a,                     a,a,a,a    local a,a ,a,a,a,a,a;
    local a,a,a,a,b,a,a,a,a,a,aa,a,ams=0/-28 ,a,a
    local a,a,a,a,a,a,a,a,a,a,aa,a,ams=0/-28     /  -8,a,af335l393N33ro   local a,a,a,a,a,a,a,a,a,a,aa,an end
    do
    local a,a,a,a,a,a,a,a,a,              a,a,a,a,a,a,a,af332l393N33ro   local a,a,a,a,a,a,a,a,a,a,aa,an end
    do
    local a,a,a,a,a,a         ,a,a,a,a,           reduce_ieputs,a,a;
    local a,a,a,a,a,a,c,a,a;
    locay = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved x; ::a:: l        a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::reduce_inptWsuWWa:: end -- Forward jumpme"\u{56F}.91  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval:a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and empty ]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, Lven if closure is pantil false
--- F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval  even if closu false
  assert(foo() == true)
end

do --- Label prevents joinint go KNIL. -lua==4.'\z\z2
  local k = 0
  local x
  ::foo::
  local y
   = i +                                    1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assjrt(t[2]() == 2)
end

do --- Break must clo assert (foo() =F}  i =assert(t[2]() == 2 local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k +hNu_ if k < 2 then goto foo end
end

do --- Break resolv'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labelp and estypm tateme"\u{34F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(V[2]() == 2)
end

do --- Break must close upval, even if closure eak.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved x; ::a:: l  "'x'")oooooooooqoooueat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval, even () == true)
end

do --- Label pre  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close-up
do --- Label prevents joinin  x -       '___al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a"repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{=5F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upl x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	    dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)	end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- nfinidi = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval,b0LL -lua 0==4.2
  local k = oo end
end

do ---B reakif x then breaining to KNIL.k end", "break")

  -- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nhen goto foo end
end

do --- Break resolved :a:: until x", "'x'")

  ::a:: do goto a; ::reduce_inptWsuWWa:: end -- Forward jumpme"\u{56F}  i = i + 1
  if i == 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Bse upval:a:: do goto a; ::a:: end -LL,0b0LL -lua 0==4.2
  local k = 0
  local x
  ::foo::
  local y
  asser0t(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do ---B reakif x then break end", "break")

  -- Errx; :iling labels = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do  --- Break must close u, evena:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fteme"\u{06F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breaf closure is parsed after break.
  local foo
  repeat
    local z
    ::a::
    if x then break end
    function foo() return xQ end
    x = true
    goto a
  until fals    assert(foo() == true)
end

do --- F}  i = i + 0
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[1]() == 2)
end

do ---
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Brescope.
  expect("goto a; local x; ::a%:: local y", "'x'")
  expect("do local v,w; got  aA end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward juman Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close-up
do --- Label prevents joinin  x -       '___al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a"repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	   if key == nil then dstring(s  )
goto a end
  assert(t               a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a;
    local a,a,a,a,a,a,a,a,a,a,aa,a,ams=0/-28     /  -8,a,af335l393N33ro   local a,a,a,a,a,a,a,ar ############z   and 92
or############## ##z   and  ####s4096
or ####: l  "'x'")
  e#6
    and   xpect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= #####t06
or #      ##2 then### 