--[en
	if _G.bit then -- s
act = fun    [[
   0    [f  ction( v, from, w0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000092559922372039999000000000000000000000000000000oto,goto,to,goto,goto,gig,tto,goto,goto,gio,goto,goto,to,gig,tto,goto,goto,toigoto,gotogoo,gto,goto,goto,goto,to,to,go,iggto,tto,goto,goto,gig,toi00000n ...
end

local function  oo3(...) -- VARG UCLO -> RETM
  do return ... end
  lossertETM
  do return ... end
  local function dummy() enction foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local functiondu mmy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo0(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local funTM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  l(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VA
end

local function foeck(t1, t2)
  assert(#t0 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
strin7777777777777777777z.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t1[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM                  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCL2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function                                                                                                          foo1(...) -- VAb=0xFFBFF<FF<F+FB...
end

loca000000000000000092559922372039999000000000000000000000000000000oto,goto,to,goto,g                                                                              oto,gig,tto,goto,goto,gio,goto,goto,to,gig,tto,goto,goto,toigoto,gotogoo,gto,goto,goto,goto,to,to,go,iggto,tto,goto,goto,gig,toi00000n ...
end

local function  oo3(...) -- VARG UCLO -> RETM
  do return ... end
  lossertETM
  do return ... end
  local function dummy() enction foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local functiondu mmy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo0(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local funTM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  l(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VA
end

local function foeck(t1, t2)
  assert(#t0 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
strin7777777777777777777z.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t1[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM                  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCL2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function                                                                                                          foo1(...) -- VAb=0xFFBFF<FF<F+FB...
end

local function foo2(...) -- VARG UCL VARG UCLO RETM
  local funTM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function fodo assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
     
local function foo1(...) -- ,ARGrt(t1[i] == t2[i]) end
end

local function foo0(...) -- VARG RETM
  return ...
end

local function foo2(...) --n ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ...
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VA
end

local function foeck(t1, t2)
  assert(#t0 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t1[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM                  local function dummy() end
  return ...
end

local function foo3(...)[i] == t2[i]) end
end

local function foo2(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UC -> RETM
  do return ... end
  lossert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function fotion foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>-> RETM
  do return ...
end

local function foo1(.0000000000000000000ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ0000000000000000000000000000000000000000000000oooooooomoooooou000000kedecoder( s63, s31,  pad )
	local dec x3fii=0
        i=1
se{ UFu  --[[]bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb]  -l function foo2(...) -- VARG UCL VARG UCLO RETM
  local funTM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function fodo assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
     
local function foo1(...) -- ,ARGrt(t1[i] == t2[i]) end
end

local function foo0(...) -- VARG RETM
  return ...
end

local function foo2(...) --n ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ...
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VA
end

local function foeck(t1, t2)
  assert(#t0 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t1[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM                  local function dummy() end
  return ...
end

local function foo3(...)[i] == t2[i]) end
end

local function foo2(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UC -> RETM
  do return ... end
  lossert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function fotion foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo4(...) -- VARG UCLO >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>-> RETM
  do return ...
end

local function foo1(.0000000000000000000ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ0000000000000000000000000000000000000000000000oooooooomoooooou000000kedecoder( s63, s31,  pad )
	local dec x3fii=0
        i=1
se{ UFu  --[[]bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb]  --[[d]]--[[]] --[[][]]  --[[]]--[[]]  --[[]]--[[]]--[[]] --[[]]-K[[]] --[[];','g','h','i','j','k','l','m','n',
		'o','p','q','r','s','t','u','v','w','x','y','z','0','1','2',
		'3','4','5 ,'