iputs=     g  "# Mx                1           rofil"e=     g  "  x -       '_______    Gave_profil"e =    g  "  xl"e=     g  "  x -   @   '___  0           rofil"e=     g  " ` _    V@  ue_profil"e =    g  " pro"e =    g  "  xl"e=     g  "        '__=  0   $           5         rofil"e=     g    "  x      l"e=     g  "  x -       '_    0           r     v_ue__av_ue_profil"e =    g  "  xl"e=     xg"     -   @   '_"e=     g  "  x e___ @  ue_pril"e =    g  " profil"e =    g  "  xl"e=         g  "        '__=  0     Ga_vue___ @  Gue_    il"e =    g  "  x'_______    Gav_ue__av_ue_profil"e =    g  "  xl"e=     g   "  xl"e=     g  "  x -   @   '_ _  0           rofil"e=     g  "  xil"e =    g  "!  x     !90') and 1234567890+1 == 1234567891)


-- silly loops
repeat untl do end;

do  -- tedo assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=0         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <     #00700001512161093549  <     #0070*0051109.99000000671988363 <     #0001100001512161093549  <   049  ,     000511-9.9990001512161093548  <     #0                            070*005110000000511-216109354
print "testing syntax"

-- tes(-2)^2 == 4 and 2*2-3-1 == 0);
as                                    x -    Gav_ue_profil"e =     k  sert(2*1+3/3 == 3 and 1+2 .. 3*1 == "33");
assert(not(2+1 > 3*1) and "a".."b" > "a");

assert(not ((true or false) and nil))
assert(    ); assert(x);

x,y=1,2;
assert((x>y) and end
end

local function foo1(...) -- VARG  
=