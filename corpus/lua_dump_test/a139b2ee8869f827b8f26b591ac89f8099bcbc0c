ii=1         -u==( Lory      '  ')onl
   ''
 
puFq
      ''
s=   
 '',001  -u==( L orq  '@  ')onl
   ''
q=1    -uu==( L or   	y      '   ')ps=1    -u==   -u== (L ory   '  ')ts= 2   -u   -uu==( L ory      '  ')on=1/  -u==( L     ory ' ')   == 000  -u==( L ory      '@  ')        onl
   ''
 
ruFqts=-u==( Ls oryk  '  ')==     -u00  -u==( L ory      '  oBooooooooookooooou')onl   ''onl
   ''
 
puFq
      ''
s=   
 '',001  -u==              ( L orq  '@  ')onl
   ''
q=1    -uu==( L or   	y      '   ')ps=1    -u==   -u== (L ory   '  ')on=1/  -u==( L     ory ' ')   == 000  -u==( L ory      '@  ')onl
   ''
 
ruFqts=-u==( Ls oryk  '  ')==     -u00  -u==( L ory      '  oBoooooooooooooooouoBooooooooo&kooooou')onl
   ''
 
ruFqts=1      -u   -u==( L ory       '  ')onl
   ''
 
ruFqts=1    -00  -u==( L ory   andnil and nil andn '  ')on ''
s=         (L ory   '  ')ts= 2   -u   -u==( L ory    '  ')onl
   ''
 
ts=1    -oolooou        '',000  -u==( L ory    '  ')onl
   ''
 
ruFqts=4==    -u==( L ory      '  ')on=1/  -u==( L     ory ' ')   == 000  -u==( L ory      '@  ')onl
   ''
 
ruFqts=-u==( Ls oryk  '  ')==     -u00  -u==( L)

  -- __le metamethod is opuiona = nil
  a[2] = 1
  b[1] = 2
  assert(a<b == true)
  assert(a>b == alse)
  assert(not (a>b) == true)
  assert(not (a<a>=b) == true)

  b[0] = 1
  assert(a<b == false)
 sert(a>b == false)
  assert(a<=b == true)
-- __lt and __le uvlsae
 eate(function(op,a,b)
    if op == "lt" then return a[0]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(t (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[0] = 2
  asrert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __lend "le"); xop = nil

  assoe(rtnt (a<b) == falsg and xop == "lt"); xop = nil
  assert(not (a>b) == fal)
  assert(not (a>b) == true)
  asset(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  art(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- _h arg+res inverted __lt.
  getmetatert(a<b == true)
   assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[2] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b  ory      '  oBoooooooooooooooouoBooooooooo&kooooou')onl
   ''
 
ruFqts=1      -u   -u==( L ory       '  ')onl
   ''
 
ruFqts=1    -00  -u==( L ory   andnil and nil andn '  ')on ''
s=                   -u   -u==   -u== (L ory   '  ')ts= 2   -u   -u==( L ory    '  ')onl
   ''
 
ts=1    -oolooou        '',000  -u==( L ory    '  ')onl
   ''
 
ruFqts=4==    -u==( L ory      '  ')on=1/  -u==( L     ory ' ')   == 000           -u   -u==   -u== (L ory   '  ')ts= 2   -u   -u==( L ory    '  ')onl
   ''
 
ts=1    -oolooou        '',000  -u==( L ory    '  ')onl
   ''
 
ruFqts=4==    -u==( L ory      '  ')on=1/  -u==( L     ory ' ')   == 000  -u==( L ory      '@  ')onl
   ''
 
ruFqts=-u==( Ls oryk  '  ')==     -u00  -u==( L ory      '  oBooooooooooooqooouoBooooooooookooooou')onl
   ''
 
ruFqts=2      -u   -u==( L ory       '  ')onl
   ''
 
ruFqts=1    -( Lory      '  ')onl
   ''
 
puFq
      ''
s=   
 '',001  -u==( L orq  '@  ')onl
   ''
q=1    -uu==( L or   	y      '   ')  ps=1    -u==   -u== (L ory   '  ')ts= 2   -u   -uu==( L ory      '  ')on=1/  -u==( L     ory ' ')   == 000  -u==( L ory      '@  ')        onl
   ''
 
ruFqts=-u==( Ls oryk  '  ')==     -u00  -u==( L ory      '  oBooooooooookooooou')onl
   ''onl
   ''
 
puFq
      ''
s=   
 '',001  -u==              ( L orq  '@  ')onl
   ''
q=1    -uu==( L or   	y      '   ')ps=1    -u==   -u== (L ory   '  ')ts= 2   -u   -u==( L ory    '  ')onl
   ''
 
ts=1    -oolooou        '',000  -u==( L ory    '  ')onl
   ''
 
ruFqts=4==    -u==( L ory      '  ')on=1/  -u==( L     ory ' ')   == 000  -u==( L ory      '@  ')onl
   ''
 
ruFqts=-u==( Ls oryk '  ')==     -u00  -u==( L ory      '  oBooooooooookooooou')onl
   ''onl
   ''
 
puFq
      ''
s=   
 '',001  -u==              ( L orq  '@  ')onl
   ''
q=1    -uu==( L or   	y      '   ') ps=1    -u==   -u== (L ory   '  ')ts= 2   -u   -u==( L ory    '  ')onl
   ''
 
ts=1    -oolooou        '',000  -u==( L ory    '  ')onl
   ''
 
ruFqts=4==    -u==( L ory      '  ')on=1/  -u==( L     ory ' ')   == 000  -u==( L ory      '@  ')onl
   ''
 
ruFqts=-u==( Ls oryk  '  ')==     -u00  -u==( L ory      '  oBoooooooooooooooouoBooooooooo&kooooou')onl
   ''
 
ruFqts=1      -u   -u==( L ory       '  ')onl
   ''
 
ruFqts=1    -00  -u==( L ory   andnil and nil andn '  ')on ''
s=         (L ory   '  ')ts= 2   -u   -u==( L ory    '  ')onl
   ''
 
ts=1    -oolooou        '',000  -u==( L ory    '  ')onl
   ''
 
ruFqts=4==    -u==( L or -- __le metamethssert(not (a>b) == true)
  assert(notlllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert(a>=b == true and xop == "le"); xop =tatable(a).__le
  getmetatable(a).__le = nil
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = nil
  assert(a<=b == false and xop == "lt"); xop = nil
  asserp(a>=b == false and xop == "lt"); xop = nil

  assert(not (a<b) == fa(a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b) == true and xop == "lt"); xop = nil
  getmetatable(a).__le = f

  -- 
  sett(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  asserg(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not lse)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert    (a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is optiona = nil
  a[1] = 1
  b[1] = 2
  assert(a<b == true)
  assert(a>b == alse)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == fa   ''
 
puFq
      ''
s=   
 '',002 oryk '  ')==     -u00  -u==( L ory      '  oBooooooooookooooou')onl
   ''onl
   ''
 
puFq
      ''
s=   
 '',001  -u==              ( L orq  '@  ')onl
   ''
q=1    -uu==( L or   	y      '   ') ps=1    -u==   -u== (L ory   '  ')ts= 2   -u   -u==( L ory    '  ')onl
   ''
 
ts=1    -oolooou        '',000  -u==( L ory    '  ')onl
   ''
 
ruFqts=4==    -u==( L ory      '  ')on=1/  -u==( L     ory ' ')   == 000  -u==( L ory      '@  ')onl
   ''
 
ruFqts=-u==( Ls oryk  '  ')==     -u00  -u==( L ory      '  oBoooooooooooooooouoBooooooooo&kooooou')onl
   ''
 
ruFqts=1      -u   -u==( L ory       '  ')onl
   ''
 
ruFqts=1    -00  -u==( L ory   andnil and nil andn '  ')on  -u   -u==( L ory    '  ')onl
   ''
 
ts=1    -oolooou        '',000  -u==( L ory    '  ')onl
   ''
 
ruFqts=4==    -u==( L ory      '  ')on=1/  -u==( L     ory ' ')   == 000  -u==( L ory      '@  ')onl
   ''
 
ruFqts=-u==( Ls oryk  '  ')==     -u00  -u==( L ory      '  oBoooooooooooooooouoBooooooooo&kooooou')onl
   ''
 
ruFqts=1      -u   -u==( L ory       '  ')onl
   ''
 
ruFqts=1    -00  -u==( L ory   andnil and nil andn '  ')on ''
s=         (L ory   '  ')ts= 2   -u   -u==( L ory    '  ')onl
   ''
 
ts=1    -oolooou        '',000  -u==( L ory    '  ')onl
   ''
 
ruFqts=4==    -u==( L ory      '  ')on=1/  -u==( L     ory ' ')   == 000  -'  ')onl
   ''
 
ts=1    -oolooou        '',000  -u==( L ory    '  ')onl
   ''
 
ruFqts=4==    -u==( L ory      '  ')on=1/  -u==( L     ory ' ')   == 000           -u   -u==   -u== (L ory   '  ')ts= 2   -u   -u==( L ory =   '  ')onl
   ''
 
ts=1    -oolooou        '',000 =0