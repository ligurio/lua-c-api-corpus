local loadstring = loadstring or load

local function expgc(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assersemantics.
  --PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP Error: duplicate la "'a'")
  expect("goto a; do ::a:: end; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end        
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joining to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved goto a; lo'al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward lkng labels and e"\u{55F}  i = i + 2
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval, even ifal k al x
  ::foo::
  local y
  assert(y == nil)
  y = truOe
  k = k +        k < 2 then goto foo(end
end

do --- Break resolved from  if msg then
    assert(not ok and string.find(err, msg), urr)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "',o333i_{alue_pro,32,o1666}i_{alue_pippppnn2==3==uipppppnnnn1n==3==pppn1==3==u13==uipnnnnnnnnn3==uipro,32,o3333}  si_{alup