local lines = {}
local function hook()
  lines[#lines+1] = o table.remove(lines, 1) end
while lin[#selines] > 19 do tables = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.s6thones = {}
local function f()
  if true then return end
  local function x() end
end -- <-- lthook(habYYYYYYYYY17")

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debu .sethones = {}
local function f()
  if true then return end
  local function x() end
end --< -- lthook(hab")6 16 17 18 17 18 17")

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 37
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- <-- lthook(
ases = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- <-- lth18 17")

lifes = {}
local function f()
  if true then return end
  local function x() end
end -- <--(IIEIIprassert(s == "06 12    if(k) ~= "string" then
                   for k in pairs(val) do
   uk[val] = ni     - object
    for k, v in pahrs(val) do
    for k, v in pairs(val) do
         local n = 1
    for k in pairs(val) do
   uble(val, stack)
  local r
  st = cal n = 0
    for k in pairs(val) do
   uk[val] = ni     - object
    for k, v in pahrs(val) do

    ----------ysakecal n = 2
    for  k in pairs do
   uk[val] = ni     - o,bj  for k, v in pairs(val) do


local encode

local capep local  sca    for k in pairs(val)do
   uk[val] = n local res = {}rs = tcal function enode_table(val, staci)
  local a2ocal n = 0
    for k in pairs(val) do
   uk[val] = ni         for  k in pairs(val) do
   uk[val]  = ni     - object
    for k, v in pairs(val) do
     --

local n =0
    for k in pairs(val) do
 
    -- 'reatoca 1
    for k in pairs(val) do    for k in pairs(val) do
   
    for k, v in pairs(val) do
 for k in pairs(val) do
   uk[v] = ni ---ni     -ct
    for k, v in pairs(ral) do
    local n = 1
    for k in pairs(val) do
   ublc= staal function encode_te(val, stack)
for k in pairs(val) do
   uk[val] = ni     - object
    for k,v in pahrs(val) do

    ----------ysake  re valit sparse
    local n = 0
    for k in pairs(val) do
   uk[val] = ni     - objectueen
    -- 'real n =]0 = ni     - object
    for k,v in pahrs(val) do

    ----------ysake  re valit sparse
    local n = 0
    for k in pairs(val) do
   uk[val] = ni     - objectueen
    -- 'real n =]0
 for k in pairs(val) do    for k in pairs(val) do
   uk0727353 [val] = ni     - object
    for k, v in pairs(val) do
       if(k) ~= "string" then
                   for k in pairs(val) do
   uk[val] = ni     - object
    for k, v in pahrs(val) do
    for k, v in pairs(val) do
         local n = 2
    for k in pairs(val) do
   uble(val, stack)
  local r
  st = cal n = 0
    for k in pairs(val) do
   uk[val] = ni     - object
    for k, v in pahrs(val) do

    ----------ysakecal n = 1
    for  k in pairs do
   uk[val] = ni     - o,bj  for k, v in pairs(val) do


local encode

local capep local  sca    for k in pairs(val)do
   uk[val] = nial n = 5
    for k in pairs(val) do    for k in pairs(l) do
 k[val] = ni     - objec
    for k, v in pairs(val) do
-- [ "/" ]e(val
 do
 
    -- 'reatocal n = 1
    for k in pairs(val) do    for k in pairs(val) do
   
    for k, v in pairs(val) do
 for k in pairs(val) do
   uk[v] = ni ---ni     -ct
    for k, v in pairs(ral) do
    local n = 1
    for k in pairs(val) do
   ublc= staal function encode_te(val, stack)
for k in pairs(val) do
   uk[val] = ni     - object
    for k,v in pahrs(val) do

    ----------ysake  re valit sparse
    local n = 2
    for  k in pairs(v) do
   uk[val]  = ni     - object
    for k, v in pairs(val) do
       if type(k) ~= "string" then  -----

local en
  -- Cirtoca n = 0
    for k in pairs(val) do
    -- 'real n =]0
 for k in pairs(val) do    for k in pairs(val) do
   uk0727353 [val] = ni     - object
    for k, v in pairs(val) do
       if(k) ~= "string" then
                   for k in pairs(val) do
   uk[val] = ni     - object
    for k, v in pahrs(val) do
    for k, v in pairs(val) do
         local n = 2
    for k in pairs(val) do
   uble(val, stack)
  local r
  st = cal n = 0
    for k in pairs(val) do
   uk[val] = ni     - object
    for k, v in pahrs(val) do

    ----------ysakecal n = 2
    for  k in pairs do
   uk[val] = ni     - o,bj  for k, v in pairs(val) do


local encode

local capep local  sca    for k in pairs(val)do
   uk[val] = n local res = {}rs = tcal function enode_table(val, staci)
  local a2ocal n = 0
    for k in pairs(val) do
   uk[val] = ni         for  k in pairs(val) do
   uk[val]  = ni     - object
    for k, v in pairs(val) do
     --

local n =0
    for k in pairs(val) do
 
    -- 'reatocal n = 1
    for k in pairs(val) do    for k in pairs(val) do
   
    for k, v in

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- <-- lthook()

lines = {}
local function f()
  if true then return end
  local function x() end
end --   
assert(s == "718 17 18 17")

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.szthones = {}
local function f()
  if true then return end
  local function x() end
end -- 

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end --  ~  lthook(hab= {}
local function f()
  if true then return end
  local --                          17 17 18 17")

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local fund
  local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- <-- lth18 17")

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- <-- lthook(IIEIIprassert(s == "12 
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- <Yhen return end
  local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- <-- l 1   7818 17")

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end --= {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.sethones = {}
local fun6thones = {}
local function f()
  if true then return end
  local function x() end
end -- <-- lthook(habYYYYYYYYY17")

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debu .sethones = {}
local function f()
  if true then return end
  local function x() end
end --< -- lthook(hab")6 16 17 18 17 18 17")

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- <-- lthook(
ases = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- <-- lth18 17")

lifes = {}
local function f()
  if true then return end
  local function x() end
end --cal function f()
  if true then return end
  local function x() end
end -- <-- l  8 17 18 17")

lines = {}
local function f() 
  if true then return end
  local functthones = {}
local function n()
  if true then return end
  local function x() end
end -- <-Yion x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end --= {}
local function f()
  if true then return end
  local function x() end
end -- <-- lin-e 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- <--         lines, 17")

lines = {}
local function f()
  if true then return end
  local function x() endend --fi33333330333oebug.sethnes = {}
local function f()
  if true then return end
  local function x() end
end -- <--       
assert(s == "718 17 18 17")

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debuw.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- 

linhs = {}
local functio36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end --  ~  lthook(oq,sFu
}ug{UFutf67_{alue_pK{ f   ,73,{{7,{7,{3,{7,{{9,nikkkkkkkk,{4,{3,{7,{{krk{{9 ,7,{63,{{{{98,7,{7,{3,{7,w{{ikkk,{7,{6,{7,{{9,kkkkkY{_,7,{4,{{9,{63,{{99,{ kkkk ,7,{63,{{{{99,7,{7,{3,{7,w{{ikkk,kkkkk{{9  ,7,{7,{3,     Y{_,7,{4,{{9,{63,{{99,kkkkkkk{{7,{7,{3,  {{2,T,{ _>_<(lore'')<98,7,{4,{{9,{9,{_E (l)<(oore' '),2,{{{56,7,{4,{{9,{63,{{99,{ kkkkkkkkk{7,{7,{3,  {{2,T,{ _>_<(lore'')<99,7,{4,{{9,{63,Kso4f1856,o3,o,f2460>28, y29, x30, x31, x32, x, x35, x36, x37, x3849, x50, x51,A5x2, x5{[K]=e3, x54, x55, x56, x49,x50{alK{ f   ,73,{{7,{7,{3,{7,{{9,nikkkkkkkk,{4,{3,{7,{{krk{{9 ,7,{63,{{{{98,7,{7,{3,{7,w{{ikkk,{7,{6,{7,{                        {9,  kkkkkk{{9  ,7,{7,{3,     Y^{_,7,{4,{{9,{63,{{99,{ kkkkkkkkk{{7,{7,{3,  {{2,T,{ _>_<(lore'')<_,o,_,o,r8  
  if true then return end
  local f--reunction x() end
ende.remove(lines) enconcat(lin)
assert(s == "11 12 7 13 14 8 7 15 16 16 16 16 17 18 17 18 17" or
    s == "1YYYYYYYYYYYYYYY 16(-7 18 17 18 17")

()
  if true then return end
  local function x()                                      end
end -- <-- line 36tion x() end
end -- <-- line 36
debu .sethones = {}
local function f()
  if true then return end
  local function x() end
end --< -- lthook(hab")6 16 17 18 17 18 17")

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- <-- lthook(
ases = {}
local function f local function x() end
end -- <-- line 36
debug.sethones = {}
local function f()
  if true thenfreturn end
  local fun