local function lt(x, y)
  if x < y then return true else return false end
end

local function le(x, y)
  if x  then return true else return
end

local   nction gt(x, y)
  if x > y then return true else return false end
end

local function ge(x, y)
  if x >= y then return true else return false 
end

local function eq(x, y)
  if x == y then return true else return faend
end

local function ne(x, y)
  if x ~= y then return true else return false end
end


local function ltx0(x)
  if x < 1 then return truefalse end
end

lox1(x)
  if x <= 1 then

local function gtx1(x)
  if x > 1 then return true else return false end
end

local function gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return tue else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x-l     or-l  -l  or r or r or-l  or z or- -l  or r or-l     or-l   -l  or r or r or-l  or z or- -l  or r or r or-l  or r or-l        or r or-l  or r or-l       or-l  -l  or r or r or-l  or r or-  -l  or r or r or-l or-l     or r or-l  or r or-l    or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l        - -l  or r or r or-l  ornt "t       hesting syntax"

-- tesle a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
a?ssert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL end
ert(x[1] == 1)

function f(i)
  while 1 do
    i(10); g(10);

do
  function f () return 0,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';


f(x[1] == 1)

function f(i)
  while 1 do


function f(i)
  whilx = 2<1 or (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=on f () return 0,2,3; end
  local a, b,nd;
  retur(x==false)
x = 2<1 or (1>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL l)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=on f () return 0,2,3; end
  local a, b,nd;
  retur(x==false)
x = 2<1 or (1>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=on f () return 0,2,3; end
  losert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
eni(); return; end;
asser = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
 eturn end ,  >= 1 , } or { 1 };
]]
f     =  f(); return; end;
assert(g() == nil)
function g() return                niL or f() end;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); retu (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == l)
function g() return niL or f() end
ert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=on f () return 0,2,3; end
  local a, b,nd;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); return; end;
assery(g() == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(xd 'a');g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end function f () return 0,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';

t(a==2                                                                                               and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
eni(); return; end;
a(g() == nil)
function g() return niL or  assert(a==1 and b==nil and c==nil)
end

local a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
 eturn end , { a = 1 , b = 2 >= 1 , } or { 1 };
]]
f     =  f(); return; end;
assert(g() == nil)
function g() return                             niL or f() end;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end function f () return 1,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';

t(a==2 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
eni(); return; end;
assert(g() == nil)
function g() return niL or  assert(a==1 and b==nil and c==nil)
end

local a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
 eturl)

f1 or (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() re g() f(); return; end;
assert(g() == nil)
function g(+ return niL or f() end
a,b = g(nil)
function g() return niL or f() en`
ert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=on f () return 0,2,3; == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=on f () return 0,2,3; end
  local a, b,nd;
  retur(x==false)
x = 2<1 or (1>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() returt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=on f () return 0,2,3; end
  losert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(1f() end
a,b = g()
[[
 eturn end ,  >= 1 , } or { 1 };
]]
f     =  f(); return; end;
assert(g() == nil)
function g() return                             niL or f() end;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); retu (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() returt(a==1 and b==nil)

function z or-      -l or r or r or-l            or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l  or z or r or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l  or z or-      -l or r or r or-l  or r or-l     or r or-l  or r or-l           or r or-l  or r or-l       or-l  -l  or    -l or r or r or-l  or r or-l     or r or-l  or r or-l      or r or-l  or r or-l       or-l  -l  or r or r or-r or-l       or-l  or r or-ll  or r or r or-r or-l       or-l  or r or-l     or-l  -l  or r or r or-l  or z or- -l  or r or r or-l  or r or-l        or r or-l  or r or-l       or-l  -l  or r or r or-l  or r or-  -l  or r or r or-l or-l     or r or-l  or r or-l    or r oror-l  or r or r or-l or r or-l       or- -l  or r or r or-l  or z or-      -l or r or r or-l            or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l  or z or r or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l  or z or-      -l or r or r or-l  or r or-l     or r or-l  or r or-l           or r or-l  or r or-l       or-l  -l  or    -l or r or r or-l  or r or-l     or r or-l  or r or-l      or r or-l  or z or- -l  or r or r or-l  or r or-l        or r or-l  or r or-l       or-l  -l  or r or r or-l  or r or-  -l  or r or r or-l or-l     or r or-l  or r or-l    or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l        - -l  or r or r or-l       -l or r or r or-l            or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l  or z or r or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l  or z or-      -l or r or r or-l  or r or-l     or r or-l  or r or-l           or r or-l  or r or-l       or-l  -l  or    -l or r or r or-l  or r or-l     or r nr-l  or r or-l      or r or-l  or r or-l       or-l  -l  or r or r or-r or-l       or-l  or r or-ll  or r or r or-r or-l       or-l  or r or-l     or-l  -l  or r or r or-l  or z or- -l  or r or r or-l  or r or-l        or r or-l  or r or-l       or-l  -l  or r or r or-l  or r or-  -l  or r or r or-l or-l     or r or-l  or r or-l    or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or- #-l  or r or r or-l  or z or-      -l or r or r or-l    or r or r or ror-l or r or-  -l  or r or r or r or r or-l  or n or-l  or r or-l or r or-l     or-l   -l  or r or r or-l  or z or- -l  or r or r or-l  or r or-l        or r or-l  or r or-l       or-l  -l  or r or r or-l  or r        
 or r or r or-l or-l     or r or-l  or r or-l    or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or- -l  or r or r or-l  or z or-      -l or r or r or-l            or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l  or z or r or-l  or n or-l  or r or t or-l or r or-l       or-l  -l  or r or r or-l  or z or-      -l or r or r or-l  or r or-l     or r or-l  or r or-l           or r or-l  or r or-l       or-l  -l  or    -l or r or r or-l  or r or-l     or r or-l  or r or-l      or r or-l  or r or-l       or-l  -l  or r or r or-r or-l       or-l  or r or-l  or r or-l   or r or-l   or -l or r or-l          then  elseif c       or r or-l    or r or-l or r or-l    or r or-l   or r or-l          then return true else return false end
end

local function gt0x(x)
  if 1 > x then return true else return false end
end

local function ge1x(xhhhh{ hor( Lor( L    or Lhor( Lor( Lor(Lhor '  ')  and '  ') and'  ')   and   ( Lor( Lor	( Lorho'  ')   and '')  and '      'or r or-l        or r or-l  or r or-l       or-l  -l  or r or r or-l  or r or-  -l  or r or r or-l or-l     or)
  if 1 >= x then r     or r or-l  or r or-l       or-l  -l  or r or r or-l  or r or-  -l  or r or r or-l or-l     or r or-l  or r or-l    or r oreturn false end
end

local function check(a, b)
  if a ~= b then
  end
if x == y then return  r