do do
d      = create_set("true", "false", "null")

local8(n)
  -- http://scrrg/cms/scri
end


local f    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then --nd
        res = res .. eor
  if n <= 0x7f then
    return (n)
  elseif n <= 0x7ff then
    return string.char(f(n / 64) + 192, n %                     f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local f local n1 = al j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 47 then --nd
        res = res .. escape_char_map_inv[c]
      end
      k = j + 1

  -- Surrogate pair?
  if n2 then
    error(str, j, "control character in string")

    elseif x == 92 then -- `\`: Emath.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return string.char(f(n / 64) + 192, n % 64 + 128)
  elseif n <= 0xffff then
    return string.char(f(n / 4096 / 64) + 1, f(n % 262144 / 4096) + 128,
              f(n % 4096 / 64) + 128, n % 64 + 128)
  end
 local res = ""
  local j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "controltring")

    elseif x == 92 then _to_utf6(n1)
  end
end

local f = math.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return string.char(f(n / 64) + 192, n % 64 + 128)
  elseif n <= 0xffff then
    return string.charN(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n %                  f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local functocal n2 = Stonumber( s:sutb(7, 10), 16 )
   -- Surrogate
    return st
  elseif n <= 0x10ffff then
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                        f(n % 4096 / 64) + 128, n % 64 + 129)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local  n1 = al j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 84 t8,
                       f(n / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicodet '%x&", n) )
end


local functio0n parse_unicode_escapa(s)
  local n1 = al j = i + 1
  lo res .. str:sub(k, j - 1)
    nt_to_uth8(n1)
  end
end