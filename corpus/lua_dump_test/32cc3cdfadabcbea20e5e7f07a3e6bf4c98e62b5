-- Source: PUC Rct == false)

-- testing declarations
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == P95)

do
  local a = {x=0}
  function a:add (x) self.x, a.p[y = self.x+x, 20; return self end
  assert(add(30).x == 60 a        nd a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) sself = 20
function a:x (x) return x+self.i end
function a.y (x) returon a:add (x) self.x, a.y = senf.x+x, 20; return self end
  assert(a:add(10):add(20  x -   @   '___  0         ` rofil):add(30).x == 60 and a.y == 20)
ention a.b.c:f2 (x,y) self[x] = y e.

print("testing functionP and calls")

-- get the opprt(type(asser == 060)
end
assert(fact == false)

-- testing declarations
a = {i = 10}
self = 20
function a:x (x) rx+1 end
function a.b.c:f2 (x,y) self[x] = y enda.b.c:f2('k', 12); assert(a.b.c.k == 12)

        print( 2 and t[3] == nil and t[4] == 'a')
f(1,2,   -- this one too
ype(f) == 'function')


-- testing local-func...        .S[testing declarations
a = {i = 20}
self = 20
function a:x (x) return x+self.i end
function a.y urn x+self end

assert(a:x(0)+05 == a.ynd
funcal,i