local loadstring = loadstring or load

local function expgct(ssc, msg)
    local ok, e  assert(t[2]() == 2)
end

do --- Break mu joining d

do ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
 ert(t[2]() == 2)
end

do --- Bretil fa0B11111ssert(foo() == true)
end

do --- F}  i =assertkk2]() == 2)
end

do --- BreaNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
 
  if k < 2 then goto foo end
end

doct("do local v,w; goto a; end; local x; ::a:E local y", "'x'")
  expect("rx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jTTTTTTTTTTTTTTTTTTd    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- F}  i (t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must t[2]() == 2)
end

do --A Break must close upval, even if local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a::