ii=1
i=1
se{UvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvFut}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFutu-s
}se{UFutu=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=2/   -u,sooFus
}setUsu{uF=0/  ooooo-u,s-u,sooFus
}ue{UFuts=0/  ooooooFut-us1/ ooooooooo   -u,sooFus
}se{UFuts=0/ s
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoou,Fut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-usT}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/s
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=oooooooou,oBs
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{ -u,sooFus
}ue{UFuts=0/ oooooooooooo}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}se{UFuts=1/   -u,s-u,sFus
}ue{UFuts=0/  ooooot-us
}se{UFuts=1}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooosooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/s
}ue{UFuts=0/  ooooooFut-us
}se{	UFuts=oooooooou,u,sFut-us
}se{UFuts=1/   -u,sooFus
}u{UFuts=1/ ooooooooooooou,kkkkkkkkkkkkkkkkkkkkkkikkkk-u,sFus
}ue{UFuts=0/  ooooooFut-us
}se{UFutoFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBooos=1/   -u,sooFus
}ue{UFuts=0/  ous
}se{UFuts=oFut-us
}se{UFuts=1/ ooooooooooooR}se{UFuts=1/   -u,sooFusL
}ue{UFuts=0/         ut-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}si=''or''or''or''e{UFuts=1/   -u,s-u,sFus
}ue{UFuts=0/  os-u,sFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UF s=0/  ooooooFut-us
}se{  ooooooFut-us
}se{UFutocal function foo2(...) -- VARG UCLO RETM
  local function dummy() end
         ...
end

local function foo6(...) -- VARG UCLO $> RETM
  ddummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
 x37, x3