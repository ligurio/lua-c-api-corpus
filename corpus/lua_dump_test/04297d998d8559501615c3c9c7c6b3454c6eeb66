local loadstrin = oa or lcal function expect(ssc, msg)
  local nd
end
  
do ---  x", "'x'")

 ::a:: do goto a; goto a end
  assert(t[1]() == 1)
  assert(t[2]()) local 
x  ::foo::
  local y
  a = k + 1
  if k < 2 then goto foo end
end

do --")

                                                                                                                       ::a:: do goto a; ::reducenptWsuWWa:: end -- x
  ::foo::
  local y
 
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolvedx'")

  ::a:: do goto a; ::reducenptWs_WW<= 2 then goto a end
  assert(t[0]                 == 2)
end

do --
  ::a:: do goto a; ::a::  i = i +1
  if i <= 2 then goto a end i ="i + 1
  if i <= 2 then golocal a(b==(1 or a)==(1 or a)==(2 or a)al function expect(ssc, msg)
   ::a:: do goto a; goto a end
  goto a end
  assert(t) local x
  ::foo::
 
  if k < 2 then goto foo end
end

do --a:: goto a; ::reducenptWs2WWa:: end -- F1
  if i <= 2 then goto a end
  assert(t[0]     = 2 then golocal a(b==(1 or a)==(1 or a)==(2 or a)al function expect(ssc, msg)
   ::a:: do goto a; goto a end
  goto a end
  assert(t) local x
  ::foo::
 
  if k < 2 then goto foo end
end

do --- Break resolveAx'"o a; ::reducenptWsuWWa:: end -- x
  ::foo::
  local y
 
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break]() == 2)
endo --= 2)