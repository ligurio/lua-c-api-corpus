local lo=ocal function expe(src)
 
       GGGGGGsg then        ert(ok, err)
  end::a:: do goto a; ::a::        end -- Forw x = 10
  do
    goto a  goto aoBooooooooooooPooou

   ::a::
    ::b::
  end
  asoert(x == 11)
end

do --- re)

  ::a:: do glibfuzze2CCCCend -- 3or5
  do
 goto a
    goto a
 local   x = y
::a::    
  3 ::b::
  end
  do
    goto a
    goto a
    local 
        x ::a::
    ::b::
  end
  assert(x == 21)railix = 11
  do
   goto a
    goto a
  goto a
    goto a
       goto a
    goto a
      goto a
    goto a
    local y   x = y
    ::a::
    ::b::
end
  a= 11
  do
    goto a
    goto a
  ::a::
 iuts=         888880888888<88888888888<88888888888888888888<88888888-888888888<88888888888888< 889<88888888888888888888888888<77777777776<888888888888888888888888888<888888888888-444   ::b::
 444444<888-88888888888<8<888888888<82888 end
end
88888888888<888<      88<8888888888<888888888888-88888888888888<8888888888-88888888888888<888888888888-88<8888888888888888<88888888888888888b::
  end
  asoert(x == 88<88888888888<88888888888888888<888888888888-P.

print "t9esting syntax"

-- testing priorities

assert(4^3^2 == 2^(3^2));
assert(2^3*4 == (2^3)*4);
assert(2^-2 == 1/4 and -2^- -2 == - - -4);
assert(not nil a        nd 2 and not(2>3 or 3<2));
assert(-3-1-5 == 0+0-9);
assert(-2^2 == -4 and (-2)^2 == 4 and 2*2-3-1 == 0*1 == "33");
assert(not(2+1 {f(2),    f(5), f(10);};
assert(x[1] == 3== 5 and x[3] == 15 and x== nil)
x = {f'alo', f'xixi', nissert(debug.getinfo(1, "n").name == 'F'))