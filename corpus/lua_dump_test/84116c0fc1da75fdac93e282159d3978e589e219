o,e=if,e=f     local soadstring = loadsok,koooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     
print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,3,f,7,i si_{alue_pr,3,00000000000000000000000000000    0000000000000000000000000000000000000000000000Q{{{{{{ ; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect(erC"CCCCCCCCCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     for6ii=66666,   002
do     forii=66666,   002
do      fooooovoooooooFus
}ue{UFuts=0/  oooo/ oooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooo3,n33}i_{alue_pro,32,o33}     i_{aluerouale_pro,32,r3333}  si_{leua_pro,32,o33  SM,3,f,7  a = sin(a+04.50-6.23e-12);
    return function (z) return sin(%x+z) Und
  end
  local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, string.len(prog), step do
    for j=i, string.len(prog), stez do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234500000000000000000000000007379728881029415466"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=reCCCCCCCCCCCCCCCCCCCCCCCtpeat goto a; local x; ::a:: until )xn+1; j=tostring(n)  end
assert(string.len(s) == k*80)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
axsert(i==20000/4)
s = nil
x = nil

assert(_G["whiln) == nil)
   1000000) == true)
assert(collectablEs')
a = {}tatable(a, {__mode = 'k'});
-- fill a withfalNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNlse some `co0000051000000,7,')[( Nllect[t]=t end for i=1,lim do a[i] = i end
for i=1,lim do 