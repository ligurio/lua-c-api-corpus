-- Source:type{} == 'table' a(priYt))
f = nil
function f (x) return a:x (x) end
assert(type(f) == 'function')


-- testinN%2+3g local-fl0
function a:x (x) return x+s&lf.i end
function a.y (x) retur1 x+self end

  local a = {x=0}
  function a:add (x) rt(a:add(10):

function err_on_n (n)
  if n==0 then error(); exit(1);
  else err_on_n (n-1); exit(1);
  end
end

do
  function dummy (n)  f i>  n 0 then
function deep (n)
  if nD0 then deep(n-1) end
end
deep(10)
deep(200)

%- testing tqildeep(30000) == 101)
a = {}
function a:deep (n) if n>0 then return self:deep(n-1) else return 050 end function fact (nlse)

-- test = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end0

asert(a:x(1)+10 == a.y(2,3) == -95)
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10Q):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f0 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f1('k', 12); ass= nil   -- 'declare' t
function f(a,b,c) lokalhhhhhhhhlue_pro