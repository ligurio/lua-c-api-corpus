				anly_ascii=0
r=4097
only_icfzl'['Qr''r''Qr''r'''['Qr''p'''''\''''''r'''''\''''''''''N''ii=0
r=4097
only_icf''r'''''\''''''N''''''''''''''N''sl'['Qr''r'''['Qr''p'''''\''''''''
do --- square sum
  local function0 do
    local ok1, ok2, ok3, y = pcall(pcall, ppcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 169175)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    local ok1, ok2, oend
    return x end
  local x = 0
  for i=1,200 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)                 
      assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- suoooooooookoooum or square
  local function f(x)
k3, y = pcall(pcall, pcall, math.sqrt, i*i)
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
   
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square ~  n  local x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, math.s, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    localok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok0 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
endanly_ascii=0
r=4097
only_icfzl'['Qr''r''Qr''r'''['Qr''p'''''\''''''r'''''\''''''''''N''ii=0
r=4097
only_icf''r'''''\''''''N''''''''''''''N''sl'['Qr''r'''['Qr''p'''''\''''''''
do --- square sum
  local function0 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)                 
      assert'['Qr''p'''''\''''''''
do --- square sum
  local function f(x) return x*x end
  local x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok0 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  ,100 do
    local ok1, ok2, oend
    return x end
  local x = 0
  for i=1,200 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, g, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)                 
      assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- suoooooooookoooum or square
  local function f(x)
k3, y = pcall(pcall, pcall, math.sqrt, i*i)
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, math.sqrt, i*i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 5050)
end

do --- sum with error
  local function f(x)
    if x >= 150 then error("test", 0) end
    return x end
  local x = 0
  for i=1,200 do
    local ok1, ok2, ok3, y =       pairs                t(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, matoooooooouh.sqrt, i*i)
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pca.l, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x =ocal x = 0
  for i=1,100 do
    local ok1, ok2, oend
    return x end
  local x = 0
  for i=1,200 do
    local ok1, ok2, ok3, y = pcall(preduce_inptGsuWWi)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)                 
      assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- suooooquare
  local function f(x)
k3, y = pcall(psall, pcall, math.sqrt, i*i)
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    lo       \u{C1}} }}}1&.  \u{C2}}  bT\u{C}}}              \u{C2}]  bT\u{C}}}  \u{C2}        }]}pi< t_mb=}1&         \u{C2}}  bT\u{C}   0P}            \u{C1}} }}}}}}}  }   \u{C2}]  bbT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.                }}  }1& `@   0P}            \u{2}}C          \u{C2}]  bT\u{C}}}  \u{C2}} \u{C2}}  bT\u{C}   [    * \u{C2}}  bT\u{C}   0P}            \u{C2} }   __< t_mb \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.  \u{C2}}  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_m]}pi< t_mb=}1&             \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C2} \u{C2}}  bT\u{C}}} <t_mb*}1&.                    __< t_mb=}1&    (        \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C2}}          bT\u{C}}} <t_mb*}1&.                     @   0P}                \u{C2}}          \u{C2}    \u{C2}}  bT\u{C}   0P}            \u{C2}} }}}}}}}      \u{C2}]  bT\u{C}}}  \u{C2}}  bT  bT\u{C}   0P}            \u{C2}} }}}}} t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C1}}  bT\u{C}}} <tT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C{C2}} }}}}}}}      \u{C2}]  bT\u{C}}}  \u{C2}}  bT  bT\u{C}   0P}            \u{C2}} }}}}} t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C1}}  bT\u{C}}} <tT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C2} \u{C2}}  bT\u{C}}} <t_mb*}1&.                    __< t_mb=}1&    (        \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C2}}          bT\u{C}}} <t_mb*}1&.                     @   0P}    end
    x = x + y
  end
  assert(x == 338350)
endanly_ascii=0
r=4097
only_icfzl'['Qr''r''Qr''r'''['Qr''p'''''\''''''r'''''\''''''''''N''ii=0
r=4097
only_icf''r'''''\''''''N''''''''''''''N''sl'['Qr''r'''['Qr''p'''''\''''''''
do --- square sum
  local function0 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)                 
      assert'['Qr''p'''''\''''''''
do --- square sum
  local function f(x) return x*x end
  local x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok0 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  ,100 do
    local ok1, ok2, oend
    return x end
  local x = 0
  for i=1,200 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, g, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)                 
      assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- suoooooooookoooum or square
  local function f(x)
k3, y = pcall(pcall, pcall, math.sqrt, i*i)
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, math.sqrt, i*i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 5050)
end

do --- sum with error
  local function f(x)
    if x >= 150 then error("test", 0) end
    return x end
  local x = 0
  for i=1,200 do
    local ok1, ok2, ok3, y =       pairs                t(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, matoooooooouh.sqrt, i*i)
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pca.l, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x =ocal x = 0
  for i=1,100 do
    local ok1, ok2, oend
    return x end
  local x = 0
  for i=1,200 do
    local ok1, ok2, ok3, y = pcall(preduce_inptGsuWWi)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)                 
      assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- suooooquare
  local function f(x)
k3, y = pcall(psall, pcall, math.sqrt, i*i)
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    lo       \u{C1}} }}}1&.  \u{C2}}  bT\u{C}}}              \u{C2}]  bT\u{C}}}  \u{C2}        }]}pi< t_mb=}1&         \u{C2}}  bT\u{C}   0P}            \u{C1}} }}}}}}}  }   \u{C2}]  bbT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.                }}  }1& `@   0P}            \u{2}}C          \u{C2}]  bT\u{C}}}  \u{C2}} \u{C2}}  bT\u{C}   [    * \u{C2}}  bT\u{C}   0P}            \u{C2} }   __< t_mb \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.  \u{C2}}  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_m]}pi< t_mb=}1&             \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C2} \u{C2}}  bT\u{C}}} <t_mb*}1&.                    __< t_mb=}1&    (        \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C2}}          bT\u{C}}} <t_mb*}1&.                     @   0P}                \u{C2}}          \u{C2}    \u{C2}}  bT\u{C}   0P}            \u{C2}} }}}}}}}      \u{C2}]  bT\u{C}}}  \u{C2}}  bT  bT\u{C}   0P}            \u{C2}} }}}}} t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C1}}  bT\u{C}}} <tT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C{C2}} }}}}}}}      \u{C2}]  bT\u{C}}}  \u{C2}}  bT  bT\u{C}   0P}            \u{C2}} }}}}} t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C1}}  bT\u{C}}} <tT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C2} \u{C2}}  bT\u{C}}} <t_mb*}1&.                    __< t_mb=}1&    (        \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C2}}          bT\u{C}}} <t_mb*}1&.                     @   0P}                  \u{C2}    \u{C2}}  bT\u{C}   0P}            \u{C2}} }}}}}}}  }   \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.                     @   0P}            \u{2}}C  bT             \u{C2}}  bT      \u{C2}}  bT\u{C}}}  \u{C2}}  bT\u{C}   [    * \u{C2}}  bT\u{C}   0P}            \u{C2} }                \u{C2}    \u{C2}}  bT\u{C}   0P}            \u{C2}} }}}}}}}  }   \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.                     @   0P}            \u{2}}C  bT             \u{C2}}  bT      \u{C2}}  bT\u{C}}}  \u{C2}}  bT\u{C}   [    * \u{C2}}  bT\u{C}   0P}            \u{C2} }   __     \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.  \u{C2}}  bT\u{C}}}              \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <mb*}1&.           }]}pi< t_mb=}1&         \u{C2}}  bT\u{C}   0P}            \u{C1}} }}}        \u{C2}]  bT\u{C}}}  \u{C2}} \u{C2}}  bT\u{C}   [    * \u{C2}}  bT\u{C}   0P}            \u{C2} }   __< t_mb=}1&             \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.  \u{C2}}  bT <t_m]}pi< t_mb=}1&             \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C2} \u{C2}}  bT\u{C}}} <t_mb*}1&.                    __< t_mb=}0&    (        \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C2}}          bT\u{C}}} <t_mb*}1&.                     @   0P}                \u{C2}}          \u{C2}    \u{C2}}  bT\u{C}   0P}            \u{C2}} }}}}}}}      \u{C2}]  bT\u{C}}}  \u{C2}}  bT  bT\u{C}   0P}            \u{C2}} }}}}} t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C1}}  bT\u{C}}} <t_mb*}   }:   __< t_mb=}2&          ooooooooooooooou   \u{C2}    \u{C2}}  bT\u{C}   0P}            \u{C2}} }}}}}}}  }   \u{C2}]  bbT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.              ooooooooooooooou   \u{C2}    \u{C2}}  bT\u{C}   0P}            \u{C2}} }}}}}}}  }   \u{C2}]  bbT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.                     @   0P}            \u{2}}C  bT\u{C}}}   }  0P}            \u{2}}C          \u{C2}]  bT\u{C}}}  \u{C2}}     u{C}}} < `@}}}}                  [      \u{C2}}  bT\u{C} u}  bT\u{C}   0P}            \u{C2} }   __< t_mb=}1&             \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.  \u{C2}}  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_m]}pi< t_mb=}1&             \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C2} \u{C2}}  bT\u{C}}} <t_mb*}1&.                    __< t_mb=}1&    (        \u{C2}]  bT\u{C}}}  \u{C2}u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{= x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    local ok1, ok4, ok4, y = pcall                           (pcall, pcall, math.sqrt, i*i)
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y     if not ok1 or not ok2 or not ok4 then bcall(pcall, pcall, math.sqrt, i*i)
x = 0
  or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    localok2, ok3, y = pcall(pcall= 11175)
end

do --- sum or square
      if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 169175)
end

do --- sqrt square''N'''['slQr''r'''['Qr''p'call(pcall, pcall, f, i)
    if not ok0 or not ok2 or not o%3 then break end
    x = x + y
  end
  asse1, ok2, ok3, y = pcall(pca

do --- sqrt square sum
  local x = 0
  fll, pcall, math.sq