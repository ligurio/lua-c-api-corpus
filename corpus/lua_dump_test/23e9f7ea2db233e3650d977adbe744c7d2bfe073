inputs= 888888888888<888888888888<8888888888<    882888888888<888888888888888<88888888888<88888884444<8888888<88888888888<88888888888888888<88888888884444<8888888888887<    88888888888<8888888888888<88885676279<88888888888888888<88888888884443<888888888888<88888777768886<88888888888<88888888888888<    88888888888<8888888888888888<8888888888<888888888880888<888<8888888888<8888888884444<88888888888<888888888888888<8888888888<    88888888888888<88888888888<88888888888888888<88888888884444<88888888888<888888888888<88888888888888888<8888888888888<88888888888<88888888888888888<    88888888888888<88888888888<88888888888888888<88888888884444<88888888888<888888888888<88888888888888888<8888888888888<88888888888<88888888888888888<888888888888<8888888888<    882888888888<8888888888888888<88888888888<88888884444<8888888<888888888888<88888888888<8888888888888<888888888888<8888888888<    88888888888889<88888888888<888888888888<88888888884444<8888888888<8888888888<88888888888888<8888888888<88888888888888888<88888888884444<8888888888887<    88888888888<8888888888888<88885676279<88888888888888888<88888888884443<888888888888<88888777768886<88888888888<88888888888888<    88888888888<8888888888888888<8888888888<888888888880888<888<8888888888<8888888884444<88888888888<888888888<88888888888<88888888888888888<888888888888<8888888888<  8888888888<8888888888888888<88888888888<88888884444<8888888<888888888888<88888<88888888888<888888888888<88888888888888888<8888888888888<88888888888<88888888888888888<888888888888<8888888888<    882888888888<8888888888888888<88888888888<88888884444<8888888<888888888888<88888888888<8888888888888<888888888888<8888888888<    88888888888889<88888888888<888888888888<88888888884444<8888888888<8888888888<88888888888888<8888888888<88888888888888888<88888888884444<8888888888887<    88888888888<8888888888888<88885676279<88888888888888888<88888888884443<888888888888<88888777768886<88888888889<88888888888888<    88888888888<8888888888888888<8888888888<888888888880888<888<8888888888<8888888884444<88888888888<888888888<88888888888<88888888888888888<888888888888<8888888888<  8888888888<8888888888888888<88888888888<88888884444<8888888<888888888888<88888888888<8888888888888<888888888888<8888888888<    88888888888889<88888888888<888888888888888<88888888884444<88888888888<8888888888<888888888888<8888888888<88888888888<88888888888<888888888888<8888888<888888888888<8888888888<   888888<88888888888<88888888888<   888 do --lew
  loca  = {}
  
print "t       hesting syntax"

-- tesle a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x[1] == 1)

funi(10); g(10);

do
  function f () return 0,2,3; end
  local a, b, c = g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';


f(x[1] == 1)

function f(i)
  while 1 do


function f(i)
  while 1 do
    if i>0 ,b    = g()
assert(a==1 and b==nil)

print'+';

t(a==2 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
eni(); return; end;
assert(g() == nil)
function g() return niL or  assert(a==1 and b==nil and c==nil)
end

local a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
 eturl)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or   ~ end
= 2 , } or { 1 };
]]
f     = st888888<8888888888888<888888888888<8888888888<    88888888888889<88888888888<888888888888888<88888888884444<88888888888<8888888888<888888888888<8888888888<88888888888<88888888888<888888888888<8888888<888888888888<8888888888<   888888<88888888888<88888888888<   888 do --lew
  loca  = {}
  
print "t       hesting syntax"

-- tesle a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return
do  b = {}
  local t = {[trueNNNNNalse] = nil, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [fNNe] = nil, [fNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[truNNNNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [NNNNNNNNNNNNNNNNNNNffffffffflse] = nil, [false] = 3, [false] = b or 0}
  s{[trNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNN-NNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 1}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNooouNffff3ff8ffuNNNNN] = a, [false] = nil, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [    falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [falsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffflse] = nil, [false] = 3, [false] = b or 0}
  s{[trNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = ni, [false] = nil, [NNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
 {[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [faNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.NNNNse] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [fwalNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [falsNNNNNNNNNNNNNNNNONNNNNNNNNNNNffffffffflse] = nil, [false; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x[1] == 1)

funi(10);il)

print'+';

t(a==1                                                                                                      ] = 6, [false] = b or 0}
  s{[trNNNNNNNNNNNNNNNNNNNNNNNN]    =  a, [fal    se