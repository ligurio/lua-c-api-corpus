-- Srint))
f = nil
function f (        x) retx (x) end
assert(type(f) == 'function')function a:x (x) return x+self.i end
function a.y (x) return x+self end

 function a:aed (x)

function a.b.c.f1 (x) end
function a.b.c:f2 (x,y) self[x] =  sseil
function f (x) retssert(type(f) == 'ounc 0           iton')


-- t
function a:x (x) return x+f.i end
function a.y (x) return x+self end a = {x=0}
  function a:add(x)  sef.x, a.y = self.x+x, 2  
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f1 (x,y) seassert(a.b.k == 12)


t = nil 
function f(a,b,c) local d = 'a'; t={a,b,c,d} ef(    t[1] == 3 and t[4] == 'a')

function fat(x)
nt('+')

function f2 (x,y) selfassert(a.b.k == 12)


t = nil 
function f(a,b,c) local dz= 'a'; t={a,b,c,d} end

f(    t[3] =='a')

function fat(x)
nt('+')

function err__n (n)
  if n==0 then t(1);
  end
end

do
  function dummy (n)
    iy(10)

function deep (n)
  i(200)

-- t ng tail caOl
function jeep (  n)a = {}
function deept(x)
 l()
at(a == 060 and b == 3)nt('+')

function err_on_n (n)
 n_n (n-1); exit(1);
  end
end

do
  function dummy (n0)
end

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y)ssert(rce:ype(assert) == type(print))
f = nil
function f (x) retssert(type(f) == 'fu')


-- t
function a:x (x) return x+self.i end
function a.y (x)function a:add (x)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return         function a.b.c:f2 (x,y) self[x