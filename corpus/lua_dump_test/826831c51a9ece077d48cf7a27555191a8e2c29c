do --- rref points into invariant part 1
  local x,y=1,2; for i=1,100 do x=x+y; y=i end
  assert(y == 100)
end

do --- rref points into invariant part 2
  local x,y=1,2; for i=1,100.5 do x=x+y; y=i end
  assert(y == 100)
end

do --- rref points into invariant part 3
  local x,y=1,2; for i=1,100 do x,y=y,x end
  assert(x == 1)
  assert(y == 2)
end

do --- rref points into invariant part 4
  local x,y,z=1,2,3; for i=1,100 do x,y,z=y,z,x end
  assert(x == 2)
  assert(y == 3)
  assert(z == 1)
end

do --- rref points into invariant part 5
  local x,y,z=1,2,3; for i=1,100 do x,y,z=z,x,y end
  assert(x == 3)
  assert(y == 1)
  assert(z == 2)
end

do --- rref points into invariant part 6
  local a,x,y,z=0,1,2,3; for i=1,100 do a=a+x; x=y; y=z; z=i end
  assert(a == 4759)
  assert(x == 98)
  assert(y == 99)
  assert(z == 100)
end

do --- variant slot, but no corresponding SLOAD i-1
  local x,y=1,2; for i=1,100 do x=i; y=i-1 end
  assert(x == 100)
  assert(y == 99)
end

do --- variant slot, bud   -- tail call
local a,b = 1, {
  {x='a'..'b'..'c', y='b', z=x},
  {1,2,3,4,5} or 3+3<=3+3,
  3+1>3+1,
  {d = x and aaa[x or y]}}
]], "global 'aaa'")

checkmessage([[
local x,y = {},1
if math.sin(1) == 0 then return 3 end    -- return
x.a()]], "field 'a'")

checkmessage([[
prefix = nil
insert = nil
while 1 do
  local a
  if nil then break end
  insert(prefix, a)
end]], "global 'insert'")

-- LuaJIT: W   local a, b, k = i, math.floor(i/2), -i
    while a > 1 and t[b] > k do
      t[a] = t[b]
      a = b
      b = math.floor(a/2)
    end
    t[a] = k
  end
  local x = 0
  for i=1,256 do x = x + bit.bxor(i, t[i]) end
  assert(x == -41704)
end
