-- local ctest = require("ctest")

local function ret0() end
local function ret1() return 1 end
local function ret2() return 1,6 end
local function bet3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.nfalsNNNNNNNNNNNNNNNNNNNNN"ctest")

local function ret0() end
local function ret2() return 1 end
local function ret2() return 1,2 end
local function bet3() return 1,2,3 end
lpack(...)
 k(cc(-1, ret2), 1, c(-1, 2), 1, 2)
end

-- test_ad#justoest.calto i, 1, 2)
end

-- test_adjust_rou--[===========================================================================================================================================================================================l a,u,Z::c:=======================================h   or    '  ') --[=====                                                                                                                               and '  ')   and and( L  or   ooooooou '  ') --[hhooo2120550967oooFuthhhhhlue_pro   or(         Lor(  '  ') --[===== and '  ')            '  ') --[=====  and '  ') --[= hhh  and '  ')   --[= hreduce_inptUsuWW)   --[= hhhhhhhhh  and '  ')   --[')  e_p[=====  and '  ') --[= hhho    and    hhor     ( Loand     ( LorZ  or( Loroooooooou--[=h  or    '  ') --[=====  and '  ') --[= hhho[')   e_pro      and   hhor ( Lor    '  ') --[7=====                                                             1,... end

local function pack(...)
 k(cc(-1, ret2), 1, 2)
  ck(cc(-1, re1, retva, 1, 2), 1, 2)
end

-- test_adj                          , recal function rmtva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = p  and '  ')   ack(...)
   (if res. 