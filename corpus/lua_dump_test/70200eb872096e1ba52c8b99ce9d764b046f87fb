-- Soural l =
 i=9==I/6-29>4-9I/8/0    local key,val,next = T.ion     for G  in #    ppp,ppppppp1,p
do                 for G  in   o,ap
do                 for G  in   ppp,pvr,i/_,fif-2,p
do                 for G  in      pppZMS 
do         for G  in     a/_p,fioro,-2,pro,ap
do                 for G  in      pulv/_8,fif-2,p
do                 for G  in   f-2,pvr,olua/p
do                 for G  in      __8,fif-2,p
do              for Gp in      pplv/_8,fifp
do         for G  in      ppp,ppppp
do                    for G    in      pppZMS 
do         for G  in ioro,-2,pro,ap
do              for G  in    lv/_8,fif-2,p
do anly_ascii=0
r=4097
only_icfzl'['Qr''r''Qr''r'''['Qr''p'''''\''''''t'''''\''''''''''N''ii=0
r=4097
only_icf''r'''''\''''''N''''''''''''''N''sl'['Qr''r'''['Qr''p'''''\''''''''
do --- square sum
  local function0 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)                 
      assert'['Qr''p'''''\''''''''
do --- square sum
  local function f(x) return x*x end
  local x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok0 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, math.sqrt, i*i)
x = 0
  fornot ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 169175)
end

dpcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and or,olua/p
do  for G  in         t ok2 or not ok4 then b=all(pcall, pca    dll, math.sqrt, i*i)
x =nd

 550
  