local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and d(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basih goto and label1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[6]() == 2)
end

do --- Break must close upval, even if closu false
  assert(foo() == true)
end

do --- Label prevents joiny = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Br local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved x; ::   () == 1)
  assert(V[2]() == 2)
end

do --- Break must close upval, even if closure eak.
  local fofalsNNNNNNNNNNNNNNNNN41111111NNNNffffffffff1ff8ffuNNNNNNNNNNNNNNo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved x; ::a:: l  "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward  
  , not an Aty stateme"\u{55F}  i = i + 1
  if i <=o a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval, even () == true)
end

do --- Label prevents j   pn  x -       '___al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Br Break must close upeel av,vn if c)
en an infinido --- Trailing labels and mepty stateme"\u{82F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must clos% upvab0LLl, even 