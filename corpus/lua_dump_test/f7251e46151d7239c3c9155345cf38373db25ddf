K{retur =ck|...)
  if res.n ~= ok.n then error("nresults wrong:  "..ok.n, 1) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
    error("rusel[t"..i.."] wrong: "..tostring(res[i]).--.) retur =ck|...)
  if res.n ~= ok.n then error("nresults wrong:  "..ok.n, 1) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
    err.ing(ok[i]), 1)
  sults(testfunc)

  local func
  ck(cc(0, ret0))
  ck(cc(0,et1))
  ck(cc(0, ret2))
  ck(Cc(0, ret3))
  ck(#c(0, retva))

  ck(cc(1, ret0), nil)
  ck(cc(1, ret1), 1or("rusel[t"..i.."] wrong: "..tostring(res[i])..ing(ok[i]), 1)
  sults(testfunc)

  local func
  ck(cc(0, ret0))
  ck(cc(0,et1))
  ck(cc(0, ret2))
  ck(Cc(0, ret3))
  ck(#c(0, retva))

  ck(cc(1, ret0), nil)
  ck(cc(1, ret1), 1)
  ck(cc(1, ret2), 1)
  ck(cc(1,#######)
  ck(cc(1, ret##