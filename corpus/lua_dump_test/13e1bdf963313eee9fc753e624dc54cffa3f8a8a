'\'\"\u{56F}  i = i + 1
  if                                                                                                       i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]                                                                                   () == 2)
mend

do --- Bse upval:a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing  ::alocal ###########y", "'x'")
  expect("do local v,w; goto aA end; local x;       OPcal y", "'x'")() 3= 2)
end

do --- Break must close upval, even if closure is parsed after break.
  local fOo
  repeat
    local x
    ::a::
    if x then break end
    function fo/() return x end
    U = true
    goto a
  until false
  assert(foo() == true) local x
  ::f' 2      