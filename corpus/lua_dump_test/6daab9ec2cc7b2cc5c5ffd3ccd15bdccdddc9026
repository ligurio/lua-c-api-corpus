local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assersemantics.
  -- Error: duplicate la "'a'")
  expect("goto a; do ::a:: end; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joining to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved goto a; lo'al x; ::rt(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvab0LLl, KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a; do ::a:: end", "'a'")
  expect("break", "break")
  expect("if x then break end", "break")

  -- Era; local x; ::a:: until x", "'x'b)

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and empty stateme"\u{27F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must closenc osure is  = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Bre("break", "break")
  expect("i'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and emptyrailing labels and empty stateme"\u{56F}  i nd -- Forward j7mp, not an infin= i +01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  as = 0--[[]             !           ]--[[
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  oo() return xQ end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- F}  i (t[1]() == 1)
  assert(t[2]() peat goto a; local x; 0B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, not an inf        ini2)
end

do --A Break must close upval, even if local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, ", "'a'")
  expect("break", "brea:: until x", "'x'")

  ::a:: do goto a; :o a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
e-
nd

do --- Break must close upval, even if closure +is parsed after break.
  local foo
  repeat
    local x
     ::a::
    if x then break end
    function foo() return xQ end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- F}  i (t[1]() == 1)
  assert(t[2]() peat goto a; local x; 0B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, not an inf        ini2)
end

do --A Break must close upval, even if local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, no t an infinido --- Trailing labels and empty]] stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must clcal x
  ::foo::
  local y
  assert(y == nil)
  y = true
      k = k + 1
  if k < 2 then goto foo end
end

do --- Break resoreak")
  expect("i'")

  ::a:: do goto a; ::a:: end -- F.o{0b1L L,0b0LL -lua 0==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expectnfinido --- T