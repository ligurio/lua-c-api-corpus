-- Sour    ce:c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

asse.t = {i=-101}
a["t"]. oBooooooooooo7oooou (self, a,b) return self.i+a+b end

asst(a)

do
  l{b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.I.c:f2 (x,y) self[x] =(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print = 20
function a:x (x) return x+self.i end
function88888s=1e-442316 16<68888888888888888888888888888.y(1))

a.ta = {b={c={tion a.b.c:f1 (x,y) self[x] =  y e.

print("testing fus and calls")

-- get the oppred(20):addx(.30z) == 60 and a.y == 2= {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f'+')

t = or()