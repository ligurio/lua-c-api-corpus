-- Source: PUC Rct == false)

-- teste.

print("testing functions and calls")

-- get the opportunity to1)+1l a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y0e.

print("testing functions and calls")

-- get the opportunity to test 'type' to) en)


-- testing locrn x+self end

assert(a(1))

a.t = {i=-100}
a["t"].x = functiosert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(2)(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.fc:f2 (x,y) self[x] = y e.

print("testing functions  cdanalls")

-- get the opprt(type(assnd a.y == 20) end

local a = {b={c={}}}

functnd
function a.b.c:f2 (x,y) self[x] = y end
assert(a.    !Q Q NWK) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
function f(a,b,c) local d = 'a'; t={a,b,c,d} end

f(      - -thisx, 20; return self end
  assert(a:add(10):add(20):add(30).x (x) return x+1 end
funcal,i