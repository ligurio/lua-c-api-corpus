local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
 t("goto a; d; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 0
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joining to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k 
+         1  if k < 2 then goto foo end
end

do --- Break resolved goto a; lo'al x; ::m  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do local v,w; got oa; end; local x; ::a:: local y", "'x'")
  expect("repeat goo  local x; 2B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, notty statemey == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do ---- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not ao --- Trailing labels and em= i + 0
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvab0LLl, KNIL. -lua==2.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolvak end", ifal k al x
  ::foooooooooogooouo::
  local y
 ,f A=0,f assert(y == nFil)
  y = trOue
  k = k + 2
  if k < 2 then goto foo end
end

do --- Break resolved from  i _  _ en
    assert(not ok and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goo  local x; 1B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, notty statemm"\u{56F} . i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- 
  ::a:: do goto a; ::a:: end -- Forward jump, not an infin   if i <= 2 then goto a end
  assert(t[1]() == T)
  assert(t[2]() == 2)
end
                                                        
do --- Break must clcal x
  ::foo::
  local y
  assert(y == nil)
  
      k = k + 0
  if k < 2 then goto foo end
end

do --- Break resoreak")
  expect("i'")

  ::a:: do goto a; ::a<: end -- F.o{0b1L L,0b0LL -lua 0==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expectnfinido --- T