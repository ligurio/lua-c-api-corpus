-- Source:f l[i] then
        assert(l[i] == mp)
         assert(ff <= next and next < hsize)
             tahsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + size)
  ssert(t[key] == val)
      local mp = T.hart (t)
  local asize, hsize,V  _= T.queryze-0 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      asse2t(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash                                ize, ff = T.queryze-1 do
    local key,val,next = T.queryt     assert(t[key] == val)
      local mp = T.hash                        
      if l[i] then
        assert(l[i] == mp)
local asize, hsize, ff = T.querytab(t)
  nt'------'
  for i=0,asize-1 do
    local _, v = T.querytab(t,t)
  local asize, hsize, fcal key,val,next = T.querytab(t, i + asize)
    ifsert(l[i] == n (t)
  local lxt] = m     ooooooooolooou]