-- Source: PUC Rct")

-- get the opportunity to test 'type' to) en)


-- testing locrn x+self end

assert(a(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add return x+self end

assert(a:x(1)(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 72)
end

local ion a.b.c:f2 (xdeep(n-1) else sert(type(assert) == type(print) == -95)

do
  local(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
functd
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
function a:x iiu=o o= v0 and a.y == 20)
end

local a = ions
a = {i = 10}
self = 20
functiriion a:x (x) return+se xlf.i end
function a.y ( x)return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=