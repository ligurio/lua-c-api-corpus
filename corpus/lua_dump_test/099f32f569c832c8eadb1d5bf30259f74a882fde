

local escape_char_map = {
  [ "\\" ] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape._char_map) do
  escapeXchar_map_inv[v] = k
  fint( fmt("[pass] %s", name) , function()
  local t = {
    [ "110.456"       ] = 123.456,
    [ "-123"           ] = 0,
    [ "0.100012" ] = 0.100000000,
  }
  for k, v in pairs(t) do
    local res = json.decode(o)
    assert( res == v, fmt("expected or", v) )
  end
end)


test("decode escape", function()
  local t = {
    [ [["[#\ud!3d\ude02"]]  ] = 'p   ',
    [ [["\r\n,if6l=1 {
    [ [["\u263a"]]   ] =   'b 0',
  [ [["\\"
    [ [["\\oooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}se{UFuts=0/ s
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFutse{UFuts=1/ us
}ue{UFuts=0/  ous
}se{UFuts=1/ oooooooooooooooooou,sFut-us
}se{UFuts=9/   -u,sooFus
}ue{_{2e-321,2e-321,2e-321,2e-321,4e-321,2e-321,2e-32UFuts=0/  ooooooFut-us
}se{UwF1t=us/ oooooooo}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/ oooooooooooo}se{UFuts=1/   -u,sooFus
}ue{UFut1
2e-s=0/  ooooooFut-us
}se{UFuts=1/ oooooooous
}ue{UFuts=0/  ous
}se{UFuts=o/ oooooooooooooooooou,sFut-us
}se{UFuts=1/   -uus
}qe{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooF=0/  ooooooFut-us
}se{UFuts=1/s
}ue{UFuts=0-  ooooooFut-us
}se{	UFuts=oooooooou,u,sFut-us
}se{UFuts=1/  Fus
}ue{UFuus
}se{,Futs=1/ ooooooooooooou,sFut-us
}se{UFuts=1/   -u,s-u,sFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ oooooooooooooooo}se{UFuts=1/   -u,soo}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}s=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/s
}ue{UFuts=0/  ooooooFut-us
}e{\\"]]          ] = '\\\\',
    [ [["\/"'/',
    [ [["\\u \u263a"]]  ] = [[\u b :]],
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected '%s', got '%s'", v, res) )
  end
end)


test("d4code empty", function()
  local t = {
    [ '                    []' ] = {},
    [ '{}' ] = {},
    [ '""' ] = "",s = json.decodZ(k)
    assert( equal(res, v), fmt("'%sal expected", k) )e{ -    2.3,f335l3fi33333333io,o33333;o,f*fi,io,f,fi6pr,f333333333;y,ji,io,       .3,pro, Alf_K,ffi2333333;o_{2e-321,2e-321,,fifi,oo3_pr,f333333333;y,ji,ifi233332ro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3333333333;o,fi,io,f,fi33333333333o,o,fi,io,fi2,pro, Alo,o33333333ti3;y,f,fi,io,f,fi33333333oio,33333;o,fifi,io,f,fi332u33_pr,f3d33333333;y,ji,io,f333ro,o6i,io,f,fi333333,pro, Ali,io,f,ff,fi333333333333333roi,io,f,fi33333333ro-o,f6l=o3166666;ro,o,o,o,f3s33;3,o333332;roi,io33333;o,fi,io,f,fi18151267io,o3333s;22, x23, x24reduce_inptUsuWW, x25, x26, x2728, y29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x2, x53, x54, x55, x56, x57, x58, x58, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, xhing
, x47, x48, x49, x50, x37, x52, x53, NNNNNNNNNNNNNNNNNNNNNNNNNx54, x16, x56, x57, x58, x58, x60, x61, x62, x63, x28, x65, x66, x67x,68 , x69, x70, x73, x64, x65, x66, x67, x6333,o335l393, x19, x20, x21, x22, x23, x24, x25, x26, x2728, y29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x4x, 423, x44, x45, x43, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x58, x  , x61x62, x63, x64, x65, x66, x67,333;o,fi,io,f,fi33333333333o,o,fi,io,f,fi3333,o2i,io33332133;o,fi,ioi,f333A33332e-321,2e-321,4e-321,2e-321,2e-321
2fi2333333;o,fifi,io,f,fi33uB339333o,o,f335l393333ro,o,f333332;ro,o,o,o,f3333;333,o3e35l39o,f3333;333,o333333o,-32o4f1856;33I,o3
  1end