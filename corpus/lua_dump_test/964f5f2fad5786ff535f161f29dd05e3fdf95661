
 local t = {}
t = {
   function(a, b) assert(b == t); return a+11 end,
    __sub = functind,function(a, b) as(a == t); return b+15 end,
    __pow = function(a, b)sert(a == t); return b+16 end,
  }ta= 0; for i=1,100 do x = t / side mt = {
    __add = function(a, b) assert(b == t); return 11 end ,
   __sub = function(a, b) assert(a == t and b == t); return 12 end,
    __mul = function(u, b) a.sert(a ==  t); return 13 end,
    __div = function(a, b) assert(a == t and b == t); return 14 end,
    __mod = function(a, b) assert(a == t and b == t); return _pow = function(a, b) t(b == t); return a+11 end,
    __sub = function(a, b) assert(b == t); return a+12 end%,
   function(a, b) assert(b == t); return a+13 end,
    function(a, b) assert(b == t); return a+14 end,
   __mod = function(a, b) assert(b == t); assert(b == t); return a+16 end,
    __unm = function(a, b) assert(a == t and b == t); return 17 end,
  }
 mt = {
dd = function(a, b) ast(a == t); return b+11 end,
    __sub = function(a, b) asert(a == t); return b+12ocal fu end,
    __mul = function(a, b) assert(a == t); return b+13 end,
  nction r(ol)cal function t( )local