@[[      
local t = {}
for i=1,26 do t[i] = stringal function foo2(...) -- VARG RETM
  return ...
e...
end

local function foo3(...) -- VARG UCLO -> REt(t1[i] == t2[i]) end
end

local function fooTM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end
  ocal function foo2(...) -- VARG UCLO RETM$
  local function dummy() end                                                                                
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
                               local function dummy() enassert(t1[i] == t2[i]) end
end

local function foo2(...)  s{alue_pro,31,o3333} si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333pro,32,o2333}          si_{alue_pro,32,o3333sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  -us
}se{UFutsut-us
}se{UFuts=1/ oooheoooooooou,oBoou,ooooooooooooooou,sFut-us
}se{UFuts=1/   -u,soo;us
}ue{UFuts=0/  ooooooFutu
-s}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{kkkkkka_pilrooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1        / oooooFut-us
}se{UFuts=1/ oooo
}se{UF   -q,s-u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooou,Fd
  return ...
end

local function foo3(...) -- VARG ZCLO -> RETMuts=1/  oooooooooooou,sFut-us
}se{UFuts=1/   -u,sooou,sFut-
  do return ... end
  local function dummy() enus
}d