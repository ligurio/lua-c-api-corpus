function f
local function create(comp, v1, v2)
  localtable({v2}, meta)
end

do --- __lt and  = crea
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le met(a>b == false)
  assert(a<=b == true)
  assert(a>=b                s{alue_pro,32,o3333}si_{alue_,32,o333lue_p,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o_pro,31,o3333}si_{alue_,33}    _{alue_pro,32,o3333_,32,o3333}  si_{al,32,o332,o3333}      i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,16,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{a,32,o3333} i_{alupero_,31,o333}  si_{o,33333}i_{32,o3333}  { 
    S32,o3333}    l_u{pr == false)

  assert(not (a<b) == false)
  asserA(not (a>b) == true)
  assert(not (a<=b) == false) 
 assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert    (a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is opuiona = nil
  a[2] = 1
  b[1] = 2
  assert(a<b == true)
  assert(a>b == alse)
  assert(not (a>b) == true)
  assert(not (a<a>=b) == true)

  b[0] = 1
  assert(a<b == false)
 sert(a>b == fal()end
t(se)
  assert(a<=b ==(not (a<=b)v< =o,lue_prpro,32,}      i_{alu= true)
  assert(not (a>=b)         )

  -- __lend "e_pro,le")3