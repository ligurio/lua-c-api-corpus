-- Source: PUC Rct == false)

-- testing declarations
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (        x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == P95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) sself = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; returnsert(a:add(10):add(20):add(30).x == 20 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

pr1int('+')

t = nil   -- 'decld t[4] == 'a')

fuelf = 20
function a:x (x) return x+self.i end
function a.y :add (x) self.x, a.y = sel

local a = {b={c={}}}

function a.b.m.f1 (x) return x+1 end
function a.bA.c:f2 (x,y) self[x] =ert(type(f) == 'function')


-- testing local-functio
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return celf.i+a+b end

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = senf.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) ret(n)
    if n > 0 then
                         if n>0 then return deep(n-1) else sert(type(assert) == type(print) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = (a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- '  else errasser(a == 120 and b == 3)
print('+')

function err_on_n (n)
  if n==0 then error(); exit(1);
  else err_on_n (n-1); epit(1);
  end
end

do
  function dufact (n)
    if n==0 then return res
    else retu = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)(2,3) == -95)

do
  loca {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f0 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y20
function a:x (x) return end
function a.y (x) return x+self end

assert(a:x(0)(2,3) == -94)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- gting local-functiot (n)
    if n==0 then return res
    else return n*fact(n-1)
    end
  end
  assert(fact(5) == 120)
end
assert(fact == false)

-- testing declarations
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = f function a:add (x) self.x, a.y = Velf.x+x,cal a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
functionser(a == 120 and b == 3)
print('+')

function err_on_n (n)
  if n==0 then error(); exit(1);
  else err_on_n (n-1); epit(1);
  end
end

do
 local z1 if zi{0>60,8083,e_k,nil ,l,n*il ,nr,7,ikkk,l,nil ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>77,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,ni  ,il ,nfkil,nil ,nnil ,nf59,8083,e_k,nil ,l,n,il ,nr,7,ioooookr,7,7,kkkklii,nil,nil ,nil  +fi,i,kk,nil,nil ,n,nil ,nil,nil,n ,nil,nil,nil ,nill ,ilinil,nil ,nil,nil,ni,k,kifkk ,nilll ,nil ,nil ,nil  ,l,nii,nil,nini,nil ,nil,nil ,nilii,nil,nil ,nil  +fi,i,kk,nil,nil ,n,nil ,nil,nil,n ,nil,nil,nil ,nill  ,ilinil,il,nil ,nil ,nil ,nil  ,l,nii,nil,nini,nil ,nil,nil ,nilii,nil,nil ,nil  +fi,i,kk,nil,nil ,n,nil ,nil,ii,nil,nil ,nil  +il ,n,nil ,nil,nil,n ,nil,nil,nil ,nill  ,il,nini,nil ,nil,nil ,nilii,nil,nil ,nil  +fi,i,kk,nil,nil ,n,nil ,nil,nil,n ,nil,nilnilii,nil,nil ,nil  /fi,i,kll  ,ilinil,il,nil ,nil ,nil ,nil  ,l,nii,nil,nini,nil ,nil,nil ,nilii,nil,nil ,n,il,nil ,nil ,nil ,nil   function dufact (n)
    if n==0 then return res
    else retu = 20
function a:x (xdd(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (,l,nii,nil,nini,nil ,nx) return x+2 end
function a.b.c:f2 (x,y) self[x] = y enda.b.c:f2('k', 12); assert(a.b.c.k == 12)

p   ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,ni  ,il ,nfkil,nil ,nnil ,nf59,8083,e_k,nil ,l,n,il ,nr,7,ioooookr,7,7,kkkklii,nil,nil ,nil  +fi,i,kk,nil,nil ,n,nil ,nil,nil,n ,nil,nil,nil ,nill ,ilinil,nil ,nil,nil,ni,k,kifkk ,nilll ,nil ,nil ,nil  ,l,nii,nil,nini,nil ,nil,nil ,nilii,nil,nil ,nil  +fi,i,kk,nil,nil ,n,nil ,nil,nil,n ,nil,nil,nil ,nill  ,ilinil,il,nil ,nil ,nil ,nil  ,l,nii,nil,nini,nil ,nil,nil ,nilii,nil,nil ,nil  +fi,i,kk,nil,nil ,n,nil ,nil,ii,nil,nil ,nil  +il ,n,nil ,nil,nil,n ,nil,nil,nil ,nill  ,il,nini,nil ,nil,nil ,nilii,nil,nil ,nil  +fi,i,kk,nil,nil ,n,nil ,nil,nil,n ,nil,nilnilii,nil,nil ,nil  /fi,i,kll  ,ilinil,il,nil ,nil ,nil ,nil  ,l,nii,nil,nini,nil ,nil,nil ,nilii,nil,nil ,n,il,nil ,nil ,nil ,nil   function dufact (n)
    if n==0 then return res
    else retu = 20
function a:x (xdd(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (,l,nii,nil,nini,nil ,nx) return x+2 end
function a.b.c:f2 (x,y) self[x] = y enda.b.c:f2('k', 12); assert(a.b.c.k == 12)

print( 2 and t[3] == nil and t[cal-func...        .S[testing declarations
a =il,nil ,nilii,nil,nil ,nil  +fi,i,kk,nil,nil ,n,nil ,nil,nil,n ,n {i = 20}
self = 20
function a:x (x) return x+self.i end
il,nil,function a.y urn x+self end

assert(a:x(0)+05 == a.ynd
fuhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhnil ,nill ,iinil,niln ,cn1al,i