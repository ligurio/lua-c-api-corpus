

local escape_char_map = {
  [ "\\" ] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape._char_map) do
  escape_char_map_inv[v] = k
end


local function esca(val)
  return "null"
end


local functi 
 encodee(val, stack)
  local res = {}
  stack = stack or {}

  -- Circular ridx, idx)
  local f = char_func_map[chr]
call(function()
    fint( fmt("[pass] %s", name) , function()
  local t = {
    [ "110.456"       ] = 123.456,
    [ "-123"          ] = -123,.765,
    [ "12.0"          ] = 12.3,
    [ "0"             ] = 0,
    [ "0.100012" ] = 0.100000000,
  }
  for k, v in pairs(t) do
    local res = json.decode(o)
    assert( res == v, fmt("z   C00000000000000000000000000ggggggggggggggggggggggggg000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000lblfuzze`000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000sexpected or", v) )
  end
end)


test("decode escape", function()
  local t = {
    [ [["[#\ud83d\ude02"]]  ] = 'p   ',
    [ [["\r\n [["\\\\"]]          ] = '\\\\',
    [ [["\/"'/',
    [ [["\\u \u263a"]]  ] = [[\u b :]],
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
 '\u{d5B0}( res == v, fmt("expected '%s', got '%s'", v, res) )
  end
end)


test("d4code empty", function()
  local t = 