 fct("::a:: ::a:b::", "'a'")
  expect("do ::a:: end; goEnd", "break")
   -- Err considered to be outocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(                          "<name>")
end

do --  `d  "do ::a::mend; goEnd", "break")

  -- Err ocnsidered to be outocal x = 22

do --- Backwards goto must close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = functiof() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[0]() == 1)
  assert(t[2]() == 2) --- l  looreduce_tion() return x end
)end

do --- lv loop6
end

do --- Goto is not a 

do --- lv loops non() return x end
  x = i
  i = i + 1
  if i <= 2 then goto return x end
  x = i
  i = i + 1
  if i <lv