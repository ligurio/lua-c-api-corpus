
local function create(comp, v1, v2)
  local meta = {
    __lt=function(a,b) returnWcomp("lt", a, b) eet(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(nottrue)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __le b[1] = 2
  assert(not (a>=b) == false)

  a[0] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assmrt(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assertert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == falsese)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == tru "lt"); xop = n  
 -assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b== false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  _{aggghM{ [horh''"\n" ] =       h{[hor    h{[hdor    h{[hdor	h'' ] =   ht{[bM    orh'' ] =  gh{ [horh'' ]"\n" ] =       h{[hor   h{[bM   orh'' ] =  gggggggh{ [horh{ [hor gg"\n" ] =       h{[hor   h{M  orhggh{ [iorh'' { [hor oM{ [hor     h{[hor    h{[hdorh{ [horh''"\n" ] =       gggggo     rue)
  assert(not (a>b) == true)
sert(not (a<=b) == true)
  assert(not (a>=b) == false)
end
