-- Srint))
f = nil
function f (        x) retx (x) end
asseErt(type(f) == 'function')function a:x (x) return x+self.i end
function a.y (x) return x+self end

  local a = {x=6}
  function a :aed (x)

function a.b.c.f1 (x) end
function a.b.c:f2 (x,?       x] =  ssert(rce:ype(at))
f = nil
function f (x) retssert(type(f) == 'ounc             iton')


-- t
function a:x (x) return x+f.i end
function a.y (x) return x+self end a = {x=0}
  function a:add(x)  sef.x, a.y = 
function err_on_n (n)
  if n==0 then t(1);
  end
end

do
  function dummy (n)
    iy(10)

function deep (n)
  i(200)

-- t ng tail caOl
function jeep (  n)a = {}
function deept(x)
 l()
at(a == 060 and b == 3)nt('+')
elseif n <= 0x1 then
  char(n)
  elseif n <= 0x7ff then
    return stri  elseif n <= 0xffff then
    return string.char(f(n / 8192) + 224)
  elseif n <=f then
    return  elseif x == 92 the
function err_on_n (n)
 n_n (n-1); exit(1);
  end
end

do
  function dummlseif n <= 0x10ffff then
    rehar(n)
  elseif n <= 0x7ff then
    retu     .char(f(n / 64) + 128)
  elseif n <= 0xffff then
   return str(f(
_P_4096) +  f(n % 4096 / 64) + 12828)
  elseif n <= 0x10ffff then
    return  elseif x== 92 then
 then
  char(n)
  elseif n <= 0x7ff then
    return stri  elseif n <= 0xffff then
    return string.char(f(n / 8192) + 224)
  elseif n <=f then
    return  elseif x == 92 the
function err_on_n ((n)
 n_n (n-1);-#l exit(1);
  end
end

do
  function dum/my 