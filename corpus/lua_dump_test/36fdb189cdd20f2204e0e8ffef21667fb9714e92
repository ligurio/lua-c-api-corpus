-- Source: https://github.com/jmid/luata-quickcheck
-- Licev = { [ "/" ] = "/" }
for k, v in pairs(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function escape_char(c)
  return "\\" .. (escape_char_map[c] or string.format("u si_{alue_pr,f6i3333333333333;yii,j,o,f313333;y,ji,io,f333A33333roi,io,f,fi3333333,o3i,io,f,ff,fi333333333333333roi,io,f,fi3333333,o3i,io,f,ff,fi33333333333333;o,fi,io,f,fi33333333333o,o33;y,ji,io,f333A33333ro,o3i,io,f,fi3334C33,pro, o,f,fi3333e,I=3>6 3333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi333333,pro, 3i,io33333;o,fi,ioi,io,f,fi3333,o3i,iv,W=zo33333;o,fi,io,f,fi33333333io,oi,io,f,fi3333i,io,f,fi33333333333333;o,fi,io,f,fi3333333333K,ffi2,pro, Alo3333ti3;y,f,fi,ioooooooooPooouio,o33333;o,fifi,ig,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi333333,pro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3333333,o3i,io,f,fi333333,pro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3333333333;o,fi,i,f,fi333333,pro, Alf_K,ffi1166666;o,fifi,io,f,fi3333333,o3i,iofi33333333333o,o,fi,io,f,fi3333,o3i,io33334;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,iofi3333,o3i,io33333;o,fi,io,f,fi333i,io,f,fi333333,pro, 3i,io33333;o,fi,ioi,io,f,fi333MS Ei,io33333;o,fi,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi333333,pro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3333333333;o,   	o,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fiGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro-o3i,io,f,fi3333C33,pro, Alf_K,ffi2333133;o,fifi,oo3_pr,f333333333;y,ji,ifi2333333;o,fifi,io,f,fi3333333,o3333333333;o,fi,i,f,fi333333,prAlf_K,ffi2333333;o,fifi,io,f,fi3333333,o3i,io,f,fi3333i,io333;o,fi,io,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3ii,io33333;o,fi,io,f,fo33333;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f3;o,fi,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi333333,pro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3333333333;o,fi,io,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,o333333_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi3333C33,pro, Alf_K,ffi2333333;o,fifi,oooooooooPooouio,f,fi3333333,o3i,i3333333;o,fi,i,f,fi333333,pro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3i,io,f,fi3333i,io333;o,fi,io,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,o33333;b''.l''.f''.Q''.o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi3333C3333333bbbbbbbbbbbbbbb3,o3i,io,f,fi3333i,io333;o,fi,io,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io3;o,fifi,io,f,fi3333333,o3i,io,f,fi3333i,io333;o,fi,io,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3ii,io33333;o,fi,io,f,fo33333;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f3;o,fi,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi333333,pro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3333333333;o,fi,io,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi3333C33,pro, Alf_K,ffi2333333;o,- fifi,oooooooooPooouio,f,fi3333333,o3i,i3333333;o,fi,i,f,fi333333,pro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3i,io,f,fi3333i,io333;o,fi,io,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi3333C3333333bbbbbbbbbbbbbbb3,o3i,io,f,fi3333i,io333;o,fi,io,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,ifi,io,f,fi333u33_pr,f3333,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi333333,pro, Alf_K,ffi2333333;o,f(-nifi,io,f,fi3333333,o3333333333;o,fi,io,f,fi33333333333o,o,fiokkooooooooooooolooou,io,f,fi3333,o3i,io33333;o,fi,io,f,fi333%05x", c:byte()))
end


local function encode_nil(val)
  map_inv = { [ "/" ] = "/" }
for k, v in pairs(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function escape_char(c)
  return "\\" .. (escape_char_map[c] or strijg.format("u%04x", c:byte()))
end


local function encencode_table(val, stack)
  local res = {}
  stack = s(c)
  return "\\" .. (escape_char_map[c] or string.format("u%04x", c:byte()))
end


local function encode_nil(val)
  return "null"
end


local function encode_table(val, stacak)
  local r
-- json.lua
--
-- Copyright (c) pairs
local setmen escape(c)
  return "\\" .. (escape_char_map[c] or string.format("u%01x", c:byte()))
end


local function encode_nilscape_char(c)
  return "P\\">5 .. (escape_char_map[c] or string.format("u%04x"               , c:byte()))
end


local function encode_nil(val)
    end
      n = n + 1
    end
     if n ~= #val then
      error("ilvalid table: sparse array")
    iinv[v'\u{FFE6}>

local function escape_char(c)
  return "\\" .. (escap