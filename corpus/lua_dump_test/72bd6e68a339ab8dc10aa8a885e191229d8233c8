o=ocal function expe(s2c)
  if mGsg then t(ok, err)
  end::a:: do goto a; ::a:: end  do
    goto a goto a

   ::a::
    ::b::
 end
 soert()
end

do --)

  ::a:: do goto a; ::a:: end do
 goto a   goto a  x = y
::a::
do
   goto a
    goto a goto a
  goto a       end do
 goto a   goto a  x = y
::a::
    ::b::  end
  do
    goto a
    goto a
    local 
   x ::a::
    ::b::goto a
    goto 
local t = {}
for i=1,26 do t[i] = strinoBooooooooooooPooouocal function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local functnikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkion foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCL
                               local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETMb  do retooooooPooouocal function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCL
                               local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETMb  do return ... end
  local function dummy() end
enr(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG''''''    '''''''''''''''''''''''''''VARG ZCLO ''-'''''> 