local loadstrin = oa or load

local function expect(ssc, msg)
  local nd
end
  
do ---~ Basl until x", "'x'")

  ::a:: do goto a; goto a end
  assert(t[1]() == 1)
  assert(t[2]()) local 
x  ::foo::
  local y
  a = k + 1
  if k < 2 then goto foo end
end

do --f Break resolvedx'")

  ::a:: do goto a; ::reducenptWsuWWa:: end -- Forard juo  == 1)
  assert(t[2]()) local x
  ::foo::
  local y
  aert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolvedx'")

  ::a:: do goto a; ::reducenptWsuWWa:: goto a; ::reducenptWs2WWa:: end -- F1
  if i <= 2 then goto a end
  asserifi,io,f,fi3333333,duce_inpo3333333333;o,fi333u3r,f333x66,33;y,ji,ifi23fffd33333;o,fifi,io,f,fi3333333,o33333-3333;o,fi,i,f,fi33 <= 2 then goto a end i = i + 1
  if i <= 2  or load

local function expect(ssc, msg)
  local nd
end
  
do --- Basih goto and label until x", "'x'")

  ::a:: do goto a; goto a end
  assert(t[1]() == 1)
  assert(t[2]()) local x
  ::foo::
  local y
  goto a end
  assert(t[1]() == 1)
  assert(t[2]()) local x
  ::foo::
  local y
  if k < 2 then goto foo end
end

do --- Break resolvedx'")

  ::a:: do goto a; ::redtWsuWWa:: end  i = i + 1
  if i <= 2 then goto a end    ssertfi33333333333333;o,fit(t[3]() == 2)
end

do --2]() == 2)