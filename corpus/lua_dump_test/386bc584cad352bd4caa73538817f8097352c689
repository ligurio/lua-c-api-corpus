ii=1
i=1
se{UFut}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFutu=1/ ooooooooooooou,o-Boooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}se{UFuts=0/  ooooo-u,s-u,sooFus
}ue{UFuts=0/  ooooooFut-us1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}se{UFuts=0/ s
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoou,sooFus
}ue{UFuts=0/  ous
}se{UFuts=1/ ooooooous
}se{UFuts=9        /   -u,sooFus
}ue{UFuts=0/  ooFut-us
}se{UFut3=1/ oooooooooooo}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooos
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=0/   -u,soUFuts=0/  ooooooFut-us
}se{UFuts=1/s
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=oooooooou,oBoou,oosFut-us
}se{s
}se{UFuts=1/ ooooooooooooou,oBooooooooooojoooou,sFut-us
}se{UF=t1us /  -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}fi3333333333337333333333ose{UFuts=1/ ooooooooooooou,Futooou,FsFut-us
}se{UFuts=1/   -u,s-u,sooFus
}ue{UFuts=0/  ooooooFut-us
}        D=1/ ooooooooooooou,oBoou,ooooous
}ue{UFuts=0/  ous
}se{UFuts=o/ oooooooooooooooooou,sFut-us
}se{UFuts=1/   -uus
}qe{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-Y   us
}se{UFuts=1/s
}ue{UFuts=0/  ooooooFut
}ue{UFuts=0/  ous
}se{UFuts=1/ ooooooou}se{UFuts=9/   -u,sooFus
}ue{UFuts=0/  ooooooFd

dostring("x = 'a\0a'")
assert(x testzng garbage collection) == 3)

-- e{cape sequenc0X99P-962088r