o,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parslocal a(b==(1 or a)==(1 or a)==(2 ed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2995b t()

-- collection of functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,3,f,7,i si[_{alue_pr,3,00000000000000000000000000000    0000000000000000000000000000000000000000000000Q{{{{{{ p (( Nor '  ')[np,r,MMMM444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do ---                                                                  Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
do     for               333}  si_{alue_pro,32,o333ue_,32,o3333}  si_{alue_pro,32,o3333_,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alueo,32,o3333}  {lue_pro,3233}  {lue_pro,32,o3333}      i_{alue_pro,32,o332,o3333}      i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,16,o3333}i_{alue_pro,32,33}      i_ael_u{pro,lue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,3,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}      i {alue_pro,32,o3332}     i_{alue_prpro,32,}      i_{alue_rpo,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      iZ{alue_4ro,32,o3333}     i_{alue_roalalue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,n3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o_pro,32,o3333}si_{alue_,32,o3333}  si_{alue_pro,32,g3333_,32,o3333}  si_{aluedp2,o3333}  si_{tlue_pro,333}i_{alue_pro,32,o3333}  si_{alueo,32,o3333}  {lue_pro  ,3233}  {lue_o,32,o3333}  si_{alueo,32,o3333}  {lue_pro,3233}  {lue_pro,3,32,o3333}      i_{aalue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,               o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_(#5{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{a1ue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pr3333}  { 
    S32,o3333}      i_ael_u{pro,lue_prpro,32,}      i_{alue_pro,#2,o3333}i_{alue_pro,32,o3333}  si_{alue_prdo,3233}  {lue33}     i_{alue_roalue_pro,323}  si_{alue_pro,32,o3333}     i=not2i- i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3332,o3333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,lue_pro,32,32,o3333}  si_{alue_p,ro3231,o3333}      i_{3}     i_{alue_prpro,32,}      i_{alue_pro,30,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,3}si_{alue_,80}    _{alue_pro,32,o3333_,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alueo,32,o3333}  {lue_pro  ,3233}  {lue_pro,32,o3333}      i_{alue_pro,32,o332,o3333}      i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,16,o3333e_,32,o3333}  si_{alue_pro,32,}  si_{tlue_pro,32,o3333}  {lue_pro,3233}  {lue_plo,32,o3333}      i_{alue_pro,32,o3333} si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_4ro,32,o3333}     i_{alue_roalalue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{aluo_pro,32,o3333}    i_{alue_roalue_pro,32,o_pro,32,o3333}si_{               alue_,32,o3333}  si_{alue_pro,32,g3333_,32,o3333}  si_{aluedp2,o3333}  si_{tlue_pro,32,o3333}  {lue_pro,3233}  {lue_plo,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_ro,32,o3333}  si_{alue_pro,32,o3e_pro,32,o3333}      i_{alue_pro,32,o333k{9,{63,{{{{98,7,{7,{3,{7,w{7,{7,{3,{7,{{9,n {7,{7,{3,{4,{{k,{7,{  8,{7,{{kr{k{9,7,{63,{{{{98,7,{7,{3,{7,w{{i{7,{7,{3,{7,{{kr{k{94,{{9,{{7,{3,{7,w7,{3,{7,w{{i{7,{7,{3,{4,{{k,{{kr{k{94MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.456-0.23e-12);
    return function (z) return sin(%x+z) Und
  end
  local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, string.len(prog), step do
    for j=i, string.len(prog), stez do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+1; j=treduce_inptUsuWWassert(string.len(s) == k*80)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
axsert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytes = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
         arbage()
  collectgarbale"stop"
  local a = {}
  for i=1,100 do a[i] = {{}}; local b = {} end
  local x = gcical i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and ne       I                                                     5][4][24][  44][4][4][ 48][24][4][4][88][2][2424][llectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
for i=1,lim do local s=string.rep('@', i); a[s] = s..'#' end
collectgarbage()
local i = 0
for k,v in pairs(a) contCreate = contCreate+1
end


contCreate = 0

a = {}

print('funoctions')
function a:test ()
  while contCr reate <= limip do
    loadstring(string.format("function temp(a) return 'a%d' end", contCreate))()
    assert(temp() == string.format('a%d', contCreate))
    contCreate = contCreate+2
  end
end

a:test()

-- collwithout locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do(  a = 20;
  function foo(x,y)
    a = sin(a+ikkkukkkkkkkkkkkkkkkkkkkkkkkkkkkkk0.456-0.23e-12);
    return function (z