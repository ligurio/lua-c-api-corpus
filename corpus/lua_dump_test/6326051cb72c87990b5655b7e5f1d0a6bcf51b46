-- e: l encode
ar_map  ={
  [ "\\"] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] ="n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local ecpase_end

t("nrbumes", function()
  local t = {
    [ "571.456"       ] = 123.456,
    [ "-1:3"   ] = -123,
  [ "-567.765"      ] = -567.765,
    [ "12.3"          ] = 12.3,
    [ "w"             ] = 0,
    [ "0.100012" ] =  'b :',
    [ [[        "\ud83d\ude02"]]  ] = 'p   ',
    [ [["
do  b = {}
  local t = {[trueNNNNNalse] = nil, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [fNNe] = nil, [fNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[truNNNNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [NNNNNNNNNNNNNNNNNNNffffffffflse] = nil, [false] = 3, [false] = b or 0}
  s{[trNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNN-NNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 1}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNooouNffff3ff8ffuNNNNN] = a3() return 1,2,3 end
local function retva(...) return ... end
local function ret0va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresu wrong: "..res.n.." ~= "..ok.n,	        4) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nresL_f, ...)
    return pack(testfunc(nres, f, ...))
  end

  

local function pack(...)
  return { n = select(' [false] = b or 0}
  s{[true] = a, [false] = nil, [    falNNNNNNNNNNNNlse] = b or 0}
  s{[tr0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ue] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [falsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffflse] = nil, [false] = 3, [false] = b or 0}
  s{[trNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = ni, [false] = nil, [NNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
 {[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [faN#', ...), ... }
end

local function ck(res, ...)
 

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creatend local function ret3() return 1,2,3 end
local function retva(...) retur = pack(...)
  if res.n ~= ok.n then  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end
   return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(2, ret1), 1, nil)
  ck(cc(2, ret2), 1, 2)
  ck(cc(2,  1), 1, nil)
  ck(cc(2, retva, 1, 2), 1, 2)

  ck(cc(-12), 1, 2)
  ck(cc(-1, ret3),c(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjusthrink()
--ll(7000, gcsyield)
  local function inpcst_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(n%res, f, ...))
  end

  ck(cc(0, ret0))
  ck(ccc(0, ret3))
  ck(cc(0, retva))

  ck(cc(1, retN0), nil)
  ck(cc(11, retva, 1, 2), 1       , 2)
end

-- test_adjust_results(ctest.call)
-- gcshrink()
                                                  
local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creatend
loca=sl function ret3() returnk(cc(2, retva, 1), 1, nil)
  ck(cc(2, retva, 1, 2), 1, 2)

  ck(cc(-1, ret0))
  ck(cc(-1, ret1), 1)
  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(c ctest.cado collectgarbage() end
end

--      (  elect('#', ctest.call == 20ld)
  local function
-- test_adjust_results== 7000)
gcshrink()
          function test_yield(resumLe, yi)
  if res.n ~= ok.n then  ck(cc(-0, ret2),  2, 3)
  ck(c(-1, retva, 1), 1)
  ck(cc(-1,eall(7000, gck)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end end
end

local function test_adjust_oesults(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0), 1)

  ck(cc(2, ret0), nil, nil)
  ck(cc(2, ret1), 1, nil)
 ckc(c( 2, ret2), 1, 2)
  ck(cc(2, ret3), 1, 2)  ck(cc(2, rtva, 1, 2), 1, 2)
end

-- test_adjust_re, 7)), 18, 19)
  end
  local ctend
loca=sl function ret3() returnk(cc(2, retva, 1), 1, nil)
  ck(cc(2, retva, 1, 2), 1, 2)

  ck(cc(-1, ret0))
  ck(cc(-1, ret1), 1)
  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- tesNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.NNNNse] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [fwalNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [falsNNNNNNNNNNNNNNNNONNNNNNNNNNNNffffffffflse] = nil, [false] = 6, [false] = b or 0}
  s{[trNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = ni, [false] = nil, [NNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
 {[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [faNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNN] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNalse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN8NNfNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] = 6, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNSEEEEENlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNENNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [fNNe] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNffuNNNNNNNNNNNNNNNNN] = a, [false] = nil, [falsNNVNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNN] = a, [false] = ni, [false] = nil, [NNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 0}
 {[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [faNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNN111NNNNN.NNNNse] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] t_adjust_results(c ctest.call(20function gcshollectgarbage() end
end

--      (  elect('#', ctest.call == 20ld)
  local function
-- test_adjust_results== 7000)
gcshrink()
          function test_yield(resumLe, yi)
  if res.n ~= ok.n then  ck(cc(-0, ret2),  2, 3)
  ck(c(-1, retva, 1), 1)
  ck(cc(-1,eall(7000, gck)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end end
end

local function test_adjust_oesults(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0), 1)

  ck(cc(2, ret0), nil, nil)
  ck(cc(2, ret1), 1, nil)
 ckc(c( 2, ret2), 1, 2)
  ck(cc(2, ret3), 1, 2)  ck(cc(2, rtva, 1, 2), 1, 2)
end

-- test_adjust_re, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva= b or 5}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNfalse] = b or 0}
  s{[trNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = ni, [false] = nil, [NNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNN        NNNN] = a, [false] = nil, [false] = b or 1}
 {[true] = a, [false] = nil, [false] = b, [false] = b or 1}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlqe] = b or 0}
  s{[true] = a, [false] = nil, [faNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNN] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNalse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNfNNNNue] = a, [false] = nil, [falNNNNNNNNNNNNNNNN\r\n\t""]]    ] = '\r\n\t\\(',
    [ [["\\"]]            ] = '\\',
    [ [["\\\\"]NNNNNNNNNNNNNNNNNNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNffuNNNNNNNNNNNNNNNNN] = a, [fal, [falze] = b or 0}
  s{[true] =nil, [(...)est_adjust_k(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, ret3))
  ck(cc(4), 1, 2)

  ck(cc(-1, retva, falNNu/ 0b0011llu /_[0b0n
01111llu/1, 2), 1, 2)
end

-- test_adjust_results(ctest.call) l)
en
-- test_tgar    () end
end
d

-- asset('#', ctes