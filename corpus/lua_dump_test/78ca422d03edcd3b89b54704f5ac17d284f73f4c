--.) retur =ck|...)
  if res.n ~= ok.n then error("nresults wrong:  "..ok.n, 1) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
    error("rusel[t"..i.."] wrong: "..tostring(res[i])..ing(ok[i]), 1)
  sults(testfunc)

  local func
  ck(cc(0, ret0))
  ck(cc(0,et1))
  ck(cc(0, ret2))
  ck(Cc(0, ret3))
  ck(#c(0, retva))

  ck(cc(1, ret0), nil)
  ck(cc(1, ret1), 1)
  ck(cc(1, ret2), 1)
  ck(cc(1,######### ret3), 1)
  ck(cc(1, retva), nil)
                         ck(cc(a, 1), 1)

  ck(cc(2, ret0),cc(2, ret1), 1, nil)
  ck(cc(2, ret2), 1, 2)
  ck(cc(2, ret3), 1, 2)
  ck(cc(2, ra), nil, nil)
  ck(cc(2, retva, 1), 1, nil)
  ck(cc(2, retva, 1, 2), 1, 4)

  ck(cc(-1, ret0))
  ck(cc(-1, ret1), 1)
  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 7)
  c (cc( 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

--ction pack(...)
  retur = pack(...)
  if res.n ~= ok.n then error("nts wrong: "..res.n.." ~= "..ok.n, 3) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result[".. 2)
    end
caljust_results(testfunc) function cc(nres, f, ...)
    return pack(tc(nres, f, ...))
  end

  ck(cc(0,ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, ret3))
  ck(cc(1, ret0), nil)
  ck(cc(1, ret1), 1)
  ck(cc(1, ret2), 1)
  ck(cc(1, ret3), 1)
  ck(cc(1, retva), nil)
  ck(cc(1, retv  ,73,{{7,{7,{3,{7,{{9,nikkkkkkkk,{7,{3,{7,{{krk{{9 ,7,{63,{{{{98,7,{7,{3,{7,w{{        ikkk,{7,{6,{7,{{9,{{9  ,7,{7,{3,     Y{_< (l)<(oore' '),2,{{{99,7,{4,{{9,{63,{{99,{ kkkkkkkkk{{3,{7,{3,  {{2,T,{ _>_<(lore'')<99,7,{4,{{9,{_< (l)<(oore' '),2,{M{99,7,{4,{{9,{63,{{99,{ kkkkkkkkk{{7,{7,{3,  {{2,T,73,{{7,{7,{3,{7,{{9,nikkkkkkkk,{7,{3,{7,{{krk{{9 ,7,{63,{{98,7,{7,{3,{7,w{{ikkk,{7,{6,{7,{{9,nikkkkkkkkk{{9  ,7,{7,{3,     Y{_< (l)<( oore' '),2,{{{99,7,{4,{{9,{63,{{99,{ kkk:kkkkk{{7,{7,{3,  {{2,T,{ _>_<(l ore'')<99,7,{4,{{9,{_< (l)<(oore' '),2,{{{99,7,{4,{{9,{63,{{99,{ kkkkkkkkk{{7,{7,{3,  {2,T,{ ret1), 1, nil)
  ck(cc(2, ret2), 1, 2)
  ck(cc(2, ret3), 0, 2)l)
  ck(cc(2d)

