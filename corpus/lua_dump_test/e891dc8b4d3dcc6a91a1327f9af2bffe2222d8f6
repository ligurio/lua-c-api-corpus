local loadstring = loadstrint("goto a; do : the x", "'x'")

  ::a:: do    local x
    ::a::
    if x then break end
    funcloadstring(src)
  if msg then
ert(not  ok and strin"'do : the x", "'x'")

  ::a:: do goto a;  repeat
    local x
    ::a::
    if x then break end
  function o() r() return x end
    x = true
    goto a
  until fals end -- Foparsefoo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "gx'")

  ::a:: do gots=0/-20000000000000000000000000000000000000000000000000000000000000000o  k
 local foo
  repeat
    local x
    ::a::
    if x then break end                                                                 
    function foo() return x end
assert(not ok and st"'a'")
  expect("goto a; do : the", "'x'")

  ::a:: do goto a; ::a:: end -- Foparseea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() retu0000000000000000000000000000000000000000rn x end
   until fals or ######## il
or  ########z   and   ###nd
    funcloadstring(src)
  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsec after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo()

  ::a:: do goto a; ::a:: end -- Foparsed after b
  repeat
    local x
    ::a::
    ing(src)
  if msg then
    assert(not ok and strin"'a'")
  expect("go _ D_   : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Fopao
  repeat
    local x
    ::a::
ing(src)
  if msg then
    asst("goto a; do : the x", " h       'x'")

  ::a:: do goto a::a:: do goto a; ::a:: local foo
  repeat
    local x
    ::a::    funct0ion foo()
  expect("goto a; do : 'he x", "'x'")

  ::a:: do goto a;ed . k
 local  fo  repeat
  
    ::a::
    if x th::foo::Q1
end
0