-- local ctest = require("ctest")

local function ret0() end
local function ret1() return 1 end
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local fud

local f, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n,	        2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostresL_f, ...)
    return pack(testfunc(nres, f, ...))
  end

  

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "...okn, 2) gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select('#', ctest.call(2000, gcshrinshrink)) == 7000)
gcshrink()

local function testlocal _ d,_,_,_,_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, c(local n
local function r()end local function r()end
lnres, focal func, ..tion r