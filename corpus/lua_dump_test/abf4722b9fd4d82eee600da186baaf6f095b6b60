 fct("::a:: ::a:b::", "'a'")
  expect(":a:: end; goEnd", "break")

  -- Err considered to be outocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + reduce_ilputs1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(                               "<name>")
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Gotcal t = {}::
  local x
  t[i] = function() return x end
  x = i
  y = i + 1
  if i <= 2 then goto a end
 assert(t[2]() == 2)
end

do --- lvl == nil the: end :o be outocal x = 22((((((((((1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  ifZ  <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2) --- lv l i /a keyword. +c, "<name>")
end

do --        - Trailfng l= {}
  local i = 1
  ::a::
  local x= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() =    
  assert(t[2]() == 2)
end

do --- lv loop6
end

do --- Goto is 5.2
  expect("goto = 1", "<name>")
end

do --- Trail
  local x
  t[i] = fun      1treturn x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
     end
end
  
do --- Basic  goto and label semantics.
  -- Err r: duplicate label. t                  = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i =i = i + 1
  if i <= 2 then goto a end
  asse(t[1]() == 1)end

do --- lv loops not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl 22

do --to must close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x i <= 2 then goto a end
  
assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() '\0== 2)
end

do --- lvl == nil  Q
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 2
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv loop6
end

do --- Goto is 5.2
  expect("goto = 1", "<name>")
end

do --- Tr Backwards goto must close upval.
  local t = {}
  local i = 1
  ::a::
 io,f,fi3333,o3i,io33333;w,fi,io3f3,i,f333333io,o33333;o,fifi,io,f,fi333u33_pr,f3;o,fi,io33332;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi3333s333io,o333;o,fifi,io,f,fi333u33_pr,f3333o,i,o_,f;p, H,pC,p,d,oO,i,o,_,o,r,C,ro,jjjjjjjjjp,f,7,3,f6l=1
,lra__{al,e_pr,7,io_pr,4,3,f3,{{{{98,7,{7,{3,{7,w{{ikkk,{7,{6,{7,{{9,kkkkkkkk{{9  ,7,{7,{3, function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv