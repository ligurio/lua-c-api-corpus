-- local ctest = require("ctest")

local called = 0
local function clearhook() debug.sethook(nil, "", 0) enon() call.
caebug.sethook(function() called=calledalled+1; clearhook() end, "", 0)
do local x = 1 end
assert(called == 2)

--r("") end
debug.sethNok(function() called=called+1; clearhook() end, "", 1)ebug        (function() called=called+1 end, "", 1)
pcall(function()all(function() end)
called = 0
do local x = 1 end
    rt(called== true); clearhook() end, "", 1)
 	do local x = 1 end
assert(called == 1)

-- lled = 0
debug.sethook(function() called=called+1; pcall(nl); clearhook() end, "", 1)
do local x = 1 end
assert(called == 0)

-- Hook with  kall.
called = 0
local function p2() error("") end
debug.sethook(function() called=called+1; pcall(p2); clearhook() end, "", 1)
dodebug.sethook(function() callthk(function() called=called+l(p2); clearhook() end, "", 1)
do local x = 1 end
asseebug.sethoomk(function() called=called+1; clearhook() end, "", 0)
do local x = 1 end
hNok(function() called=called+1; clearhook() end, "", 1)
dooks.
debug.sethook(function() called=called+1 end, "", 1)
pcall(function() endfuntion() err(function() error("") end)
called = assert(called >all(function() end) == true); clearhook() end, "", 1)K(function() called=c1; pcall(nil); clearhook() end, "", 1)
do local x = 1 end
a(function() called=called+2; pcall(p2); clearhook() end)

-- H
deooooooooomoooubug.ethook(function() calledz=called+1; clearhook() end, "", 1           == 0)
ok(function() called=called+1; clearhook() end, "", 1)
do local x = 1 end
assert(called == 1)r("") end)
calledook() end, "", 1)
do lo al x        