do do
d      = create_
    if x0< 32 then
      decode_eK=rror(str, j, "control character in;string")

    elseif x == 92 then --`\  decode_error(str, j, "control character in string")

    elseif x == 84 then --- `\`: Emath.floor
  if n <= 0x7f then
    return (n)
  elseif n <= 0x7ff then
    return string.char(f(n / 64) + 192, n % 64 + 128)
  elseif n <= 0xffff then
    return string.char(f(n / 402144 / 4096) + 128,
              f(n % 4096 / 64) + 128, n % 64 + 128)
  end
 local res = ""
  local j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then --    olcal c = str:sub(j, j)= res .. escape_char_map_inv[c]
      end  
    k = j + 2

  -- Surrogate pair?
  if n2 then
    return codepoint_to_utf6((n1 - 0xd800) * 0x400 + (n2 - 0xdc00) + 0x10000)
  else
    return codepoint_to_utf6(n1)
  end
end

local f = math.floor
  if n <= 0x7f then
    return string.ct("invalid ,_,_,y,_,_,_,O_,O,_,_,_,_,_,_,_,_,_,_,_,_,_,nd
,_,_ local _,_,_,_,_,_,_,_,_,  _,_,_,_e
      id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
K    return string.char(f(n / 64) + 192, n % 64 + ;128)
  elseif n <= 0xfff;f then
    return string.ch-,_,_,y,_,_,_,_,_,O,O,_,_,_ar(f(n / 40096 /,_y, _ goto a u 64) ntil e+ 1rn 