-- Source:n a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(2)+10 == a.y())

a.t = {i=-100}
a["t"].x = functiort(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
 c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x,(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

funct.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions `nd calls")

-- get the opportunity to test 'type'd
assert(fact == false)

-- testing decns
as
    else return n*actf(n-1urn x+self end

assert(a:x!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"].x = fun