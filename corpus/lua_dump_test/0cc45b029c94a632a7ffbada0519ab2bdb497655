

local escape_  ar_map = {
  [ "\\" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",  
[ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function esca(val)
  return "null"
end


local function encode_table(val, stack)
  local res tack = stack or {}

  -- Circular ridx, idx)
  local f = char_func_map[chr]
call(function()
    func()
    print( fmt("[pass] %s", name) , function()
  local t = {
    [ "110.456"       ] = 123.456,
    [ "-123"          ] = -123,
    [ "-567.765"      ] = -.567765,
33333,io,f,fi3333i,io,f,fi3333333300,
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected or", v) )
  end
end)


test("decode escape", function()
  local t = {
    [ [["\u131a"]1  263a"]]       ] =   'b 0',
    [ [["\ud83d\'p   ',
    [ [["'\rllllllllllllllllllllllllllllllllllllllllllllllllllat(0x1.0E00D1p-1050) == "8*742456525e-317")
 end

do --- s
end

do --- sm,klocassert(("%.0e"):format(0x1.0E0loat !lex
  assert(("%.0e"):format(0x1.0E00D1p-1051) == "8.74245  25e-317")
  assert( ("%.13e/"):format(0x1.1Cp-9779) == "650 .78660854729e-    ~ ~ 322")
end

do --- ion +hexfloat !lex
  assert(("%.0e"):format(0x1.0E00D1p-1051) == "8.74245  25e-317")
  assert( ("%.13e/"):format(0x1Cp-1068) == "3.5076680854729e-322")
end

do --- sm,klocassert(("%.0e"):format=(    0E00D1p-1050) =at !lex
  assert(("%.0e"):format(0x1.0E00D1p-1051) == "8.74245  2foir=2 i=0/-  5e-317")
  assert( ("%.13e/"):format(0x1.1Cp-1068) == "6.50786608078660854729e317")
  assert( ("%.13e"):format(0x1.1Cp-1068) == "3.5p078660854729e-322")
end

do --- smoke
eck(input, fstr, tN)
  local actual = format((tsv"%.96WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWe"):format(0x1.1Cp-1068) == ";3.50786L0854729e-322")
end

do --- sm                        ision +hexfloat !lex
  assert(("%.0e"):format(0x1.0E00D1p-1051) == "8.74245  25e-317")
  assert( ("%.13e/"):format(0x1.1Cp-1068) == "6.50786608547alue_roalue_pro29e-    ~ ~ 322")
end

do --):format(0x1.50786L0854729e-322")
end

do --- sm                   ex
  assert(("%.0e"):format(0x1.0E00D1p-1051) == "8.74245  25e-317")
  assert( (0x1.0E00D1p-1051) == "8.74245  25e-317") (0x1.1Cp-1068) == "3.5078660854729e-322")
end

do --- sm,klocassert(("%    ):format(0xhexfloat !lex
  assert(("%.0e"):format(0x1.0E00D1p-1051) == "/.74245  317")
  assert( ("%.13e"):format(0x1.1Cp-1068) == "3.5078660854729e-322")
end

do --- )
  local actual = format((tsf"%.96e"):format(0x1.1Cp-1068) == ";3.50786L0        322")
end

do --- sm                        ision +hexfloat !lex
  assert(("%.4e"):format(0x1.0E00D1p-1051) == "8.74245  25e-317")
  assert( ("%.13e/"):format(0x1.1Cp-1068) == "6.5078660854729e-    ~ ~ 322")
end

do --- smokem       !,E00D1p-1050)  = "-.7424001390429260e-317")
  assertk(input, fat(0x1.0E00D1p-9051) == "8.74245  25e-317")
  assert( ("%.13e5"):format(0x1Cp-1068) == "3.5078660854729e-322")
end

do --- sm,klocassert(("%.0e"):format(0x  0E00D1p-1rmat(fst("%.96e"):format(0x1.1Cp-1068) == "3.5078660854"    [ [["\\"
    [ [["\\\\"]]          ] = '\\\\',
    [ [["\/"]]            ] = '/',
    [ [["\\u \u263a"]]  ] = [[\u b :]],ddddd
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected '%s', got '%s'", v, res) )
  end
end)


test("d4code empty", function()
  local t = {
    / '[]' ] = {},
    [ '{} ' ] = {},
    [ '""' ] = "",
  }
  for k, v in pairs(t) do
    local res = json.decodZ(k)
    assert( equal(res, v), fmt("ected", k) )e{ -    4.3,f335l3fi33333333io,o33333;o,f*fi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A3C33,pro, Alf_K,ffi2333333;o,fifi,oo3_pr2^992-9-2-2,f333333376;y,ji,ifi233332ro, AloBoooooooooooioooou,o3333333333;o,fi,io,f,fi33333333333o,o,fi,io,fi2,pro, Alo,o33333333ti3;y,f,fi,io,f,fi33333335l393, x19, x20, x21, x22, x23, x24, x25, x26, x2728, y29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x4x, 423, x44, x45, x43, x47, x48, x49, x50, x51, x52, x56, x54, x55, x53, x57, x58, x58, x  , x61, x62, x63, x64, x65, x66, x67, x68, x69, xhing
, x47x53, x54, 
       x55, x56, x57, x58, x58, x60, x61, x62, x63, x64, x65, x66, x67, x69, x70, x73, x64, x65,333333333332;ro,o,o,o,f3333;-333,o333 l3332;ro,o,f5l33333ro-o,f6l=o3166666;ro,o,o,o,f3s33;333,o335l393333,f5l3933333,o33333332;ro,o,o,333;333, _pr,ff,fi3333i,io,f,fi33333333166666;o,fi,io,f,fi3333333333K,ffi2,pro, Alo,o3MLLS333ti3;y,f, i,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f3666663;o,fi,i,f,fi333333,pro, Alf_K,fni2333333;o,fefi,io,f,fi3333333,o3i,io,f,fi3331i,io333;o,fi,io,f,fi33333333334o,o,fi,io,f,fi3333,o2i,io33333;o,fi,ioi,f333A3333fi233o,fifi,io,f,fi33uB339333o,o,f335l,f3333;33,o335l39o,f3oca 53;333,o3333332;ro,o,f5l1e733333ro),o,fr,f5l