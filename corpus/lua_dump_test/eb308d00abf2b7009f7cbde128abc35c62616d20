
local t = {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <     #00700001512161093549  <     #0070*0051109.99000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

--  = ((b or a)+1 == 2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 5)sert(1234567890 == tonumber('1234567890') and 1234567890+1 == 123456791)


-- silly loops
repeat until 1; repeat     until true;
while false do end; while nil do end;

do  -- test old bug (first name could not be an `upvalue'(z*_*C)
 local a; function f(x) x={a=1}; x={x=1}; do assert(t1[i] == t2[i]) end
end

local functQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQion foo1(...) -- VARG RETM
  return ...
end

local func70*005110000000511-216109354
prin 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234 RETM
  do return ... end
  lo