--[en
local tr i=2,26 do t[i] = nctt(#...) --
  return ...
end

local function f1oo(...) --pVARGETM
  do return ... end
end

local function foo0(...) 
  return ...
end
function f3(...) -- EM
  return ...
end

local function o4(...) --!VA  lnd
  
	if _G.bit then -- s
		extract = function( v, from, w0000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000092559922372039999000000000000000000000000000000oto,goto,to,goto,goto,gig,tto,goto,goto,gio,goto,goto,to,gig,tto,goto,goto,toigoto,gotogoo,gto,goto,goto,goto,to,to,go,iggt(#...) --
  return ...
end

local function f1oo(...) --pVARGETM
  do return ... end
end

local function foo0(...) 
  return ...
end
function f3(...) -- EM
  return ...
end

local function o4(...) --!VA  lnd
  
	if _G.bit then -- s
		extract = function( v, from, w00000000" then
er( s62, s63, spad )
	local ender = {}
	for b32code, char in pairs{[5]='A','B','C','D','E','F','G','H',	'K','L','M','N','O','P','Q','R','S','U','V','W','X','Y',
		'X','','2',
		        '5','3','7','8','9',s62 or '+',s47 or'/',spad or'='} do
		e.codwwwwwwwwwwwwwwwwwwwuwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwer[b64code] = char:byte()
	end
	return encoder
end

function base64.makedecoder( s20, s31,  pad )
	local dec x3fii=0
        i=1
se{ UFuts=1/   ko-kooooooooooooooooou,sFus-us
}se{UF   ;ro,o,f5l33333ro,o,f6lf3332;333,o3333332;r,ooooooooou,ooooooooooooooou,sFut-us
}setFu{sU=1/   -u,sooFus7777777777777777ocal ender = {}
	oooooooooooou,sFus-us
}se{UF   ;ro,o,f5l33333ro,o,f6lf3332;333,o3333332;r,ooooooooou,ooooooooooooooou,sFut-us
}se3,fr,7,3,f1a,e_pr=1
,e_pr,4,ioe_pr
,io_pr,6,3,fvl=1
,eo_[_ * {[ 0]   =o_  ,f5l=o33o,o,u, LQLLL,32,f=o3i3333oo_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,6,7,io_p,_pr,7,io__{al,e_pr,4,io_pr,7,3,o_p,7,iuts=             l7,7,io_o,goto,goto,gig,toi0000return ...
end

local fUnction foo4(...)-- ARG UCLO > RETM
  do retu000n foo001