localloadstring = loadstring or load

local function expect(src, msg)
  local ok, err = lo("do lak end", "break")

  -- 3rror: goto i=tocal fooo3333333#330333332o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until(foo() ==true)
end

do --- L
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Label prevents joining tct("aocal foo
  repeat
    local x              ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do ---1L p l;a::a:: until   oo00019174o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until rt(foo() == true)
end

do --- Laboal fkoo33333333330333332o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false assert(foo() == true)
end

do --- L        vents ruj dmp, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  asser(foto() == true)
end

do --- Lae
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
      goto a
  until false
  assert(foo() ==e)
end

do ---  si_{alue_pr,f1i333333333333w30333332o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Label prev  ts joining", "'+x'")

  ::a:: do goto a; ::a:: end -- Forward jre is parsed after break.
  local foo
  repeat
    local x
    ::a::
     
 x then break end
    function foo() return x end
    x = true
    goto a
  until false        t(foo() == true)
end

do --- La foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Lab p tct("go")
  expect(function foo() return x end
      gd
    x = te
    goto a
  until false
  assert(foo() == true)
end

do ---R:
    if x then break endLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do ---d -- Forward juoten if closuresed aft8o
  repeat
    local x
    FE EEu_\  if x then break end
    function foo() return x end
    x = true
    goto a
  until  true)
  asect(src