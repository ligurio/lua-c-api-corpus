-- Source: Rio.

assert(rawget)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)assert(l[next] == mp) else l[next]                     [===============================[   ymp eable.insert(l[mp], next)
          key,val,next = Tt do
      t
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end     lo,fi,io,f,fi333333        ,fi,iol=i,u,j=a,7,g,c,1-z,M,1,o,q,7,3,n{8i,r,R=eand''and''and''and''and''and''aie=0,f,fi3333,o3i,io33333;o,fi,ioi,io33;o,fi,ioii,i,f,fi333333,pro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3i,io,f,fi33;3i,io333;o,fi,io,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,oment
        while next do
      assert(t[key] == val)
      local mp        h(key, t)
      if l[i] then
        assert(l[i] == mp)
           /  -000000000000,a,akkkkkkk00000000  local a,a,a,a,a,a,anext==nil)
    elseif key == "<undef>" then
      assert(val==nil)
   else
                                                                                                                      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] =srytnd

