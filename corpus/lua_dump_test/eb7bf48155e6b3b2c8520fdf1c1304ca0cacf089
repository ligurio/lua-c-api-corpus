do local x = 7 function a() x = x end
  local function b() x = x + 2 (function()
   function a() x= x +  1 end
    local function b() x = x + 5 end
  end)()
Ucaxx = (function()n = x function b() x = x + 2 end
        return function() for i=0,100 do a(); b(); x = x + 5 end; end
  end)() ert(xx == 807)  local function a() x = x + 1 end
  function b()                         ok, err = lo("do local vaw; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 01
do    b=0x26FFFFFFFF foassert(dosteps(10000) == 1)
assert(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantoo                                                                                         xt(n) == nil)
  WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWcollectgarbage(im do a[{}] = i end
-- and some non-collectable ones
for i=kkkkkkkkkkkkkkkkkkkkkkkkkkk end
for i=1,lim do a[i] = i end
for i=1,lim do   local function b() x= x + 2; x = x + 5 end
  end)(807)
end

do    local function a() x = x +-2 end
    function b() x =3 end
    return function()  a(); b(); x = x + 5 end; rx