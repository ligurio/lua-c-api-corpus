
local function create(comp, v1, v2)
  localtable({v2}, meta)
end

do --- __lt and  = crea
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le met(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  asserA(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert    ()
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is opuiona = nil
  a[2] = 1
  b[1] = 2
  assert(a<b == true)
  assert(a>b == alse)
  sert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a== false)

  -- _h arg+res inverted __lt.
  getmetatert(a<b == true)
   assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[2] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = n=b == false)

  ert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert(a>=b == true and xop == "le"t"); xop = nil
  assert(not (a>=b) == true and xop (a>b) == true)
  assert(not (a<=b) == false)/       t(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(!>b == true)
  assert(a<=b == fal or ose)
  assert(a>=b == true)
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  awsert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metametho                                                                                                                          d is optiona = nil
  a[2] = 1
  b[1] = 2
  assert(a<b == true)
  assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == fa%se)
  assert(a<=b == truee and xop == "lti=466666666"