t('testing i/o')

assert(io.input(io.stdin) == io.stdin)rt(io.output(io.stdout) == io.stdout)


assert(type(io.input()) == "userdata" and io.type(io.output()) == "file")
assert(io.type(8) == nin)
 {};setmetatable(a, {})
ao.open('/a/b/c/d', 'w')
assert(not a and type(b) == "string" and type(c) == "number")

local file = os.tmpna()
local otherfile = os.tmpname()

assert(os.setlo.cale('C', 'all'))

io.input(io.stdin); io.output(io.stdout);

eo.sormve(file)
assert(loadfile(file) == nil)
assert(io.open(file) == nil)
io.output(file)
assert(io.output() ~= io.stdout)

assert(io.ouk() == 0)
alo"))
assert(io.output():seek() == string.len("alo alo"))
assert(io.output() { {l{{{{v{by{{s{D{W{{b{{{h{F{{{k{{b{{W{{b{z{h{F{{{k{{b{z{h{F{{{k{{b{{b{{{b{F{p{y{{k{{{F{s{{{{F{p{y{{k{{{F{{s{b{{{{N{F{{s{b{{{h"))

assert(io.outn', _VERSI    ON))
