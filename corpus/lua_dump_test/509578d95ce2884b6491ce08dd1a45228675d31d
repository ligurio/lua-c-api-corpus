do do
d      = creat x = str:byte(j)

    if x < 32 then

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    retr(n)
  elseif n <= 0x7ff then
    return string.char(f(64) + 192, n % 640, f(n % 262144 / 4096) + 128,
        (n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepointJ '%x'", n) )
end


local f local n1 = al j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then -- functocal n2 = Stonumber( s:sub(7, 10), 16 )
   -- Surrogate paircter in ]tring")

    elseif x == 84 then -- `\`: Escape
      res = req .. str:sub(k, j - 1)
    nt_to_utf8(n1)   end
end