local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = ld
end
  
do --- Basih goto and label1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvah, even if closu false
  assert(foo() == true)
     t(t[1]() == 1)
  assert(t[2]()")oooooooooqoooueat goto a; loI       cal x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nreso iex = 2
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinidi = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if c)
end"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close-up
do --- Label prevents joinin  x -       '___al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a"repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{=5F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upl x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break re1o iex = 1
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)	end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- nfinidi = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval,b0LL -lua 0==4.2
  local k = oo end
end

do ---B reakif x then breaining to KNIL.k end", "break")

  -- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nhen goto foo end
end

do --- Break resolved :a:: until x", "'x'")
a(o,f,_,1,o
  ::a:: do goto a; ::reduce_inptWsuWWa:: end -- Forward jumpme"\u{56F}  i = i + 1
  if i == 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Bse upval:a:: do goto a;GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG ::a:: end -LL,0b0LL -y == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x;nd
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval,b0LL -lua 0==4.2
  local k = oo end
end

do ---B reakif x then breaining to KNIL.k end", "break")

  -- Errx; ::a:: until x", "'x'")
