local loadstring = loa -- Foparsed afteroo
  repeat
    local x
    ::a::
    if X then break end   function foo() return x end
    x = t        goto a
  until fals or ############4096 
r=s40xpect(" gx'")

  ::a:: do goto a; ::a:: end -- F. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto 
 a until fals or ######## i*l  if msg then
    assert(not ok and strin"'    a'")
  expect("goto a; do : th x", "'x'")

  ::a:: do goto a; ::a:: end -- F brea. k
 local foo
repeat
    local x
        function foo() return x end
    x = true
    goto a
  until fals or ######## il

  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  unr i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i+lim]=i..'x' end
collectgarbage()
ls(a) do assert(k==v or k-lim..'x' == v); i=i+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, r = {}, {}, {}
-- keep osome `collectabli] == i) \nd


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a witsome `colles
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
foa = {}; setmetatable(a, {__mode = 'v'});
a[1] = string.rep('b', 21)
Collectgarbage()
assert(a[1])   -- sthe table)
for i=1,lim do a[i] = {} end
for i=1,lim do                 a[i..'x        '] = {} end
-- dan some no    n-collectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i+lim]=i..'x' end
collectgarbage()
ls(a) do assert(k==v or k-lim..'x' == v); i=i+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
locay, z = {}, {}, {} z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- dan soon-collectable[i+lim]=i. ==  = {}; setmetatabLe(a, {__gode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert()
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- di+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
colfalsNNNNNNNNNNNlectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])   -- local=i+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=9,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])   -- sthe table)
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- dan soon-cabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep oa[i] == i) \nd


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a witsomereduce_inptWsuWWndices
for i=0,lim do a[{}] = i end
-- and some notabLe ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
foa = {}; setmetable(a, {__mode = 'v'});
a[1] = stringsert(a[1])   -- sthe tablo a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- dan soon-collectable[i+lim]=i..'x'rt(i ==  = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t e(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `colle(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert()
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- di+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; at={}; a[t]=t end
for i=1,lim do a[i+lim]=i..'x' end
collectgarbage()
ls(a) do assert(k == v); i=i+1  end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=9,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])   -- sthe table)
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- dan soon-cabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' valuassert(a[i] == i) \nd


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a witsomereduce_inptWsuWWndices
for i=0,lim do a[{}] = i end
-- and some notabLe ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i enx   d
foa = {}; setmetable(a, {__mode = 'v'});
a[1] = stringsert(a[til fals or # k
 local foo
  repeat
  local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il  if msg then
    assert(not ok and strin"'a'")
  expect("gotoo : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or  ea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or  #######a. k
 local foo
 repeat
    local x
    ::a::     if x then break end
    function foo() return x end
   x = true
    goto a
  until fals or ##i::foo::
end
