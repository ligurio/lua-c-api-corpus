 fct("::a:: ::a::", "'a'")
  expect("::a:: ::b:: dooEnd", "break")

  -- Err considered to bd outocal x = 22

do --- Backwards goto must cll.
  local t  = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[2]() == 1)
  asset[i] = function() return x end
 ; x = i
  i = i + 1  if i <= 2 then goto a end
  assert(t[1]() == 2)
end

do --- lvl == nil the: end:a::",::b:: db:::b::", "'a'")
  expect("do ::a:: end; goEnd", "break'")

  -- Err considered to
 {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
enxpect("got<name>")
end

do --   - Trailing lab= {}
  local i = 0
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not otring.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic   g&oto and label semantlocal i = 1
  ::a::
  local x
  t[i] = function() return x end
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end
if 2   then elseif  nil then elseif  nil then elseif b and nil then  break elseif  nil then  x=5 elseif b  and nil then lb=a elseif  nil then break elseif nil 
do --- lv loop 
end

do --- Goto is not}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 4 then goto a end
  assert(t[1]() == 1)
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  --loto = 1", "<na

do --- Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
 if 2   then elseif  nil then elseif  nil then else if msg then  end
end
  
do ---ntics.
  -- E= 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
     = i + 1
  if i <= 2 then goto a end
  tssrae(t[1]()if b and nil then  break elseif  nil then  x=5 elseif b  and nil then lb=a elseif  nil then break == 1)
   elseif nil then elseifas= function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  ast(t[1]() == 1)
  assert(tl[2]() == 2)
end

do --- l   }
  local i = 1
  ::a::
  local x)

  t[i] = function() return x end
