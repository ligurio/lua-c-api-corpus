 fct("::a:: ::a:b::", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- Err considered to be outocal x = 22

do --- Backmust close up:", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- Err considered to be outocal x = 22

do --- Backwards goto must close up {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i             <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err) t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end   assert(t[1]() == 1)
  assert(t[2]() == 2) --- lv looreduce_ioputsprivate_G
  goto = 1
end

do --- Goto i /a keyword. +compat5.2
  expect("goto = 1", "<name>")
ending(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end

  else
    assert(ok, err)
  end
end
  
do --- Basic goto and label semantics.
  -- Er                                                                                          ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --  -- Error: duplicate label. t = {}
  local i = tg(t) e 