do --- exien e do
    local a,a,a,a,  a, ______a  ,a,aa,                     a,  a,a,a; local a,a,    a,a,a,a,a,a,a,a,a,       a,a,a,a,a,a,a,a,a,a,a,a,a;
    local a,a,a,a,a,a,a,a,a,a,aa,a,amsa,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a  ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a     ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a ,a,a,aa,a,aana,a,a,a, a,amsa,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,aa,a,a,a,a, a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a;
    local a,a,aa,a,a,a,a,a,a,a,aa,an local a,a,a,a,a,a,a,a,a,          a,a0,a,a,a,a,a,a,a,a,a,aa,an end
    do
    local a,a,a,a,a,a       ,   a,a,a,a,a,a,a,a,a,a,a,a,a;
    local a,a,a,a,a,a,a,a,a,a,aa,a,amsa,a,a,a,a,a,a,a,a,a,f,a,a,a,a,a,a,a  ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a     ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a510l393N33ro   local a,a,a,aana,a,a,a, a,amsa,a,a,a,a,a,a,a,a,a,a,a,a, a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a;
    local a,a,aa,a,a,a,a,a,a,a,aa,an end
    do
    local a,a,a,a,a,a,a,a,a,          a,a0,a,a,a,a,a,a,a,a,a,a,an end
     local a,a,a,a,a,a         ,aA,a,a,a,  a;
   local a,a,a,a,a,a,         a,a,a,a,a,a,a,a,a,a,a,a,a,a;
    local a,a,a,a,a,a,a,a,aa,a,amsa,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a  ,a,aa,a,a,a,a,a,a,a,a,a,a,a,a     ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a     ,a,a,af509l393N33ro   local a,a,a,aana,a,a,a, a,aa,a,a,a,a,a,a,a,a,a,a,a,a,W,a,a,a,a,a,a,a,a,a,a,a,a,aa,a,amsa,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a  ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a      ,a,a,af510la,a,a,a-- local ctest = requirturn 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nresL_f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(a, 1, 2), 1, 2)
e if       0 then return n"+Znf"
  elseif n ~= n then 
  else if     5 then return n"" elseif n ~= n then    else     if    5 then return n"+"elseif n ~=n then r "nan" else  if     1 then return n"+in"
  elseind

-- test_adjust_results(ctest.call)
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbageK{}() end
end

-- assert(select('#', ctest.call(2001, gcshrink)) == 2000)
gcshrink()
-- assert(select((resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creocal function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if r= ok.n then  ck(cc(-0, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjust_results(ct)
gcshrinkf n then else if 1 then return n"+in"
elseif n then reyu "nan"
 else   if       0 then return n"+inf"elseif n  then rn"nn"
 else  if         0 then return n"+Znf"
  elseif n ~= n then 
  e()

local function test_yield(resume, yield)
  local function inpcall()

  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() retct('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  lse ifif res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "    0 t..ohen rk.