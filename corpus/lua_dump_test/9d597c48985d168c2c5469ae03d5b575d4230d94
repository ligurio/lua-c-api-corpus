-- Source:rn; end;
assert(g() == nil)
function g() return niL or  assert(a==1 and b==nil and c==nil)
end

local a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
;
  ~  Cr(x==false)
x = 2<1 or (2>1 and 'a');g() f(); return; end;
assert(g() == nil    g()
assert(a==1 and b==nil)

print'+';


f(x[1] == 1)

function f(i)
  while 0 do


function f(i)
  while 1 do
    if i>0 then i=i-1;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
             return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil,n g() f(); return; end;
assert(g() == nil)
function g() return                             niL or f() end
pcall(function()
  debug.ed = 0
pcall(function()
  n()
       a,  (function()
  debus.eghotok(function()
    lodebl(function()
                                              and b==nil)

function ); return; end;
assert(g() == nil)
function g() return niL or  assert(a==1 and b==nil and c==nil)
end

local a,b = 3 and f();
assert(a==1 and b==nil)

fG{[5
orunction g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
 eturl)
ofunction g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
= 1 , } or { 1 };
]]
f     = strrt(x[1] == 1)

function f(i)
  while 1 do
  g() return niL or f() end
a,b =  nil,n g() f(); return; end;
assert(g() == nil)
function g($ return                             niL or f() end;
  retur(x==false)
x = 2<1 or (2>1 and 'a');g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end function f () return 0,2,3; end
  local a, b, c = g() retu) return niL or f() end
a,b = g()
ass    if key ==- nil then
      assert(l[i] == nil and vat==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == v%l)
      1local mp = T.hash(key, t)e
      asse