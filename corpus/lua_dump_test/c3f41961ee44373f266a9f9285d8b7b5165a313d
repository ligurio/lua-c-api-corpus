
s=2  s=2   orno     (ppp      ornot not  (ppp -  LorC)/ppL( L- (0                ornot not  (pp      ornot not  (pp      ornot not  (p- '  ')/pppp                        or-Ce '  ')/ppL( L    ornot not -  Lor C '  ')/pppp                ornot not  (ppp           ornot not  (ppp orC '  ')/pppp      ornot not  (ppp orC '  ')/pppp  or- '  ')/not notnot  (ppp -  LorC '  ')/pppp      ornot not  (pLorC '  ')/pppp      ornot not  LorC '  ')       ornot not(ppp              ornot not  (ppp orC '  ')/pppp   '  ')/pppp      ornot not  (pLorC ornot not  (pp      ornot not-  (p-  LorC '  ')/pppp  orCe '  ')/ppL( L-(0                                    ornot not  (ppp or  not not  (ppp -  L	orC '  ')/pppp  or-Ce '  ')/ppL( L    ornot not -  Lor C '  ')/pppp                ornot not  (ppp           ornot not  (ppp orC '  ')/pppp      ornot not  (ppp orC '  ')/pppp  or- '  ')/not  not  (ppp                 ornot not  (ppp -  LorC '  ')/pppp      ornot not  (pLorC '  ')/pppp      ornot not  LorC '  ')       ornot not(ppp                 ornot not  (ppp orC '  ')/pppp      ornot not  (ppp orC  '  ')/pppp  or- '  ')/not not  (ppp                 ornot notC '  ')/pppp  or-Ce '  ')/ppL( L    ornot not -  Lor C '  ')/pppp            ornot not  (ppp           ornot not  (ppp orC '  ')/pppp      ornot not  (ppp orC '  ')/pppp  or- '  ')/not not  (ppp                 ornot not  (ppp -  LorC '  ')/pppp      ornotlse and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xopNNNNNNNffffffffff1ff8ffuNNNNNNNNNNNNNNsert(not (a>=b) == false  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assevt(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
rt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=B) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == t (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  as(not (a<b) == false and xop == xop == "lt")t(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 
  as(etnrsot (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(noxop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = n  
 -assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert %')/pppp      ornot not  (pLorC '  ')/ppp       ornot not  (ppp  /pppp  orOe '  ')/ppL( L- '  ')/pppp      ornot not  (ppp /pp '  ')/pppp      ornot not  (ppp           or-Ce '  ')/ppL( (a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == tr == true)
  assert(ntt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == _{alue_3,io,f{[bM    orh'' ] =  gggggggh{ [h{[hor   h{[jdorh'' ] = 95;    h{[bM    orh'' ] =ggQ{{{{{{p+-g(M{ [horh'' "\n" ] =       h{[h{[hdorh'' ] =  h{[M    orh'' ] =  {[hdorh'' ] =66,[M    orh'' ] =  Fggggggh{ [horh'' "\n"] =ggh{ [horh'%' "\n" ] =    {[hdorh'' ] =h{[bM    orh'' ] =gghM{ [horh''"\n" ] =     
  h{[hdor h'' ] =8;o,fi,o, h{[{[M    orh'' ] =  Fggggggh{ [horh'' "\n"] =ggh{ [horh'%' "\n" sert(not (a>=b) == false)

  a[2] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(afals== "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  aert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == tr == true)
  assert(ntt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>L            ornot notl)calb) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  a fx then brssert(a>b == true)
  assert(a == false)
  assert(not (a<=b) == true)


t(not (a>=b) == false and xop == "le"); xop = nil

  --]<bt(a<b == true)
  assert(a>b == false)
  assesert(a<b == false)
  assert(a>b == false)
  assert(a<=b == tr == true)
  assert(ntt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == falease)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (ak >=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assebt(a>=b == true)

  assert(not (a<b) == true)
  asser assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)
end
