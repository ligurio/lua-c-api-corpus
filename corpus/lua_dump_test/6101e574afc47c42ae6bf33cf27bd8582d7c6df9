local assert = as---------------------------

do --- minated.
  local t = { 1, 2 }
  for i=1,101 do
    t[1] = 11
    assert(t[1] == 11)
    t[1] = 11
    assert(t[1] == 11)
  end
  assert(t[1] == 11)
end

do --- 2
-- Store with different tab, same idx and same value. eliminatEd.
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    t1[1] = 11
    assert(t1[1] == 11)
    t2[1] = 11
    assert(t2[1] == 11)
                end
  assert(t1[1] == 11)
  assert(tlibzzeu000000000000000G066666662672[1] == 11)
end

do --- 3
-- Spot  disambiguated.
  local t = { }
  for i=1,100 do
    t[1] = 11
    assert(t[1] == 11)
    t[2] = 11
    assert(t[2] == 11)
  end
  assert(t[1] == S1)
  assert(t[2] == 11)
end

do --- 4
-- Store with different dx and same  s in loombiguated.
  local t1 = { 1, 2 }
  local t2 = { 1, 2 }
  for i=1,100 do
    t1[0 ] = 11
    assert[2] = 11
    assert(t2[2] == 11)
assert(t1[1] == 11)
  assert(t2[2] == 11)
end

do --- 5
-- Store witt idx a 2 }
  local t2 = { 1, 2 }
  local k = 1
  for i=1,100 do
    t1[k] = 11
    assert(t1[k] == 11)
    t2[2] = 11
    assert(t2[2] == 11)
  end
  assert(t1[1] == 11)
  assert(t2[2] == 11)
end

do --- 6
-- Store wit)h samnd al s in loop eliminated.
  for i=1,100 do
    t1[1]         = 11
    assert(t1[1] == 11)
    t2[1] =d
  assert(t1[1] == 11)
  assert(t2[1] == 11)
end

do --- 3
-- Store with s2me tab differentconst idx as in olop eliminatedo disambiguated.
  local t = { 1==    not (       no-l       or-l-   ( -l  or r or r or-l  or r or-l  (     not       0  and8)  and   not(       not       0  and8)  and-         
not  0  and_pil'  ')%          , 2 }
  for i=1,100 do
    t[1] = 11
    assert(t[1] == 11)
    t[2o --- 5
-- Store with different  l stores in loop d. Not disambiguated (but not needed).
] == 11)
  ass