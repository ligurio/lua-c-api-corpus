do
do do::C::::d::end::C::::d::end::C::::d::end ::C::local loadstring = loa

local function  expect(src, msc)
  if msg then
   assert(jo, "'a'")

  -- Error: undefine'")
  expect("goto a; ::b::", "'a': until x", "'x'")

  ::a:: do goto a; ::areduce_inptWsuWW:: end -  Ford
do
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)local lines = {}
local function hook()
  lines[#lines+1] = o table.remove(lines, 1) end
while lin[#selines] > 20 do tables = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36
debug.s6thon
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
   

do --- Tra                 t goto a; local x; ::a:: until
local a = ((b or a)+2  and (120==(2<3 and 4) and nil)le(-(1 or 20 or a)+(b or a)+1== 0  +d (2<2 and  	4) <= 4) x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
  es = {}
  goto a
   -- Tra       x'")local function f()
  if true then re
 t