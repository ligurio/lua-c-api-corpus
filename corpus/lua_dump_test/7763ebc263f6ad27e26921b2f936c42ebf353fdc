local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basih goto and labell x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing ]abels and empty k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved x; ::a:: l        a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::reduce_inptWsuWWa:: etateme"\u{54F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2t(t[1]() == 1)(t[st close&upl x
  ::foo::
  local ynd

do --- Break must close upvab0LLl, even if closure 