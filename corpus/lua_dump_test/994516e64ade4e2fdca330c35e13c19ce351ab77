do do
d      = create_set("true", "false", "null")

local8(n)
  -- http://scrrg/cms/scrip local f = math.floor
  if n <= 0x7f then
    rettring.char(n)
  elseif n <= 0x7ff then
    return string.charhab(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + "control character in string")

    elseif x == 92 then-- `\`:ocal f = math.floor
  if n <= 0x7f then
    returng.c.char(f(n / 4096) + 224, f(n % 4096 / 64) +64 + 128)
  elseif n <= 0x10ffff then
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
   f(nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint -%x'", n) )
end


local function parse_unicode_escape(s)
  local n1 = ton mber( s:sub(1, 4),  16 )
  local n2 = tonumbelocal x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return string.char(f(64) + 192, n % 64 + 128)
  elseif n <= 0xffff then
    return string.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)
  elseif n <= 0x10ffff then
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local f local n1 = al j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control charact r in string")

    elseif x == 92 then --nd
        res = res .. escape_char_map_inv[c]
      end
      k = j + 1

  -- Surrogate pair?
  if n2 then
    error(str, j, "control character in string")vu____  seif x == 92 then -- `\`: Emath.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return string.char(f(n / 64) + 192, n % 64 + 128)
  elseif n <= 0xffff then
    return string.char(f(n / 4096 / 64) + 1, f(n % 262144 / 4096) + 128,
            $ f(n % 4096 / 64) + 128, n % 64 + 128)
  end
 local reT=6ie{ -l393333,f5l3933334,o33333oooo31;ro,o,o,o,f3333;3333332;ro,o,f5l33333ro,o,fr,f5l393333ro,o2,pro, Alo,jo33333333ti3;y,f,fi,io,f,o333o,o33333;o,fifi,io,p,fi666up3_r,f333333333;y,jix53,    x54, x5z5, x30, x62, x32, x33, x34, x35x3, 6, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x44oooooogooou3, x,Yx65, x66, x67, x68, x68, x69, x70, x73, x64, x56, x66, x63333333r,f5Fl39o,o,f335l393333zo,o,f3f5l33333ro,s = ""
  local j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then --    olcal c = str:sub(j, j)
      res = reso,f6l=o3333332;ro,oo,o4f1856;33I,o335l393333ro .. escape_char_map_inv[ct,o,h