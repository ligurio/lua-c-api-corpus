-- Souable' indices
for i=0,lim do a[{}] = i end
-- and some non-collectabLe ones
for i=1,lim  do a[i] = i end
foa = {}; s=1,lim do a[i] = {} end
for i=1,lim do              -- dan some no    n-collectable }; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert()
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- diabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; at={}; a[t]=t end
for i=1,lim do a[i+lim]=i..'x' end
collectgarbage()
ls(a) do assert(k == v); i=i+1  end
assert(i == 2*lim)

a = {}  --[[]]  --[[d]]; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' valuesim do a[i] = {} end
for i=1,lim do a[{}] = i end
a[i..'                          x        '] = {} end
-- dan soon-cabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep o        s t={}; a[t]=t e(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `colle(a, {_ete(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep oso--l
 s(l%g'le'                                             and next)tr= pairs(a, {__m}) for G  in s.i=4
s.i=4
e.S=p
do     and next)n g.ura[t]=t end
colfalsNNNNNNNNNNNlectgarbaga = {}; setmetarep('b', 10)
collecjtgarbage()
assert(Y[1])   -- local=i+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' 
for i=0,lim do a[{}] = i end
-- and some non-collectabLe ones
for i=1,lim  do a[i] = i end
foa = {}; s=1,lim do a[i] = {} end
for i=1,lim do              -- =t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert()
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- di+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep o{}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])i=1,limdo  a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- dan soon-collectable[i+lim]=i..'x'rt(i});
local x, y, z = {}, {}, {}
-- keep[ some `coldectable' values
for i=4,lim do a[i] = {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=2,lim do local t={}; a[t]=t e(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `colle(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable'i{2;r;2;3;U;3;7;1; values
fa = {}; setmetarep('b', 21)
collecjtgarbage()
assert()
for i=1,lim do a[i] = {} end
for                          i=1,=im do a[i..'x        '] = {} end
-- di+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' valu3   es
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; at={}; a[t]=t end
for i=1,lim do a[i+lim]=i..'x' end
collectgarbage()
l = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=9,lim --[[]] --[[][]]  --[[]]--[[]do a[i] = {} end
for i=1,lim do a[{}] = i end
a[i..'x        '] =]