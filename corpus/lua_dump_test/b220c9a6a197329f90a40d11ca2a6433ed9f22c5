 fct("::a:: ::a:b::", "'a'")
  expect("do ::a::  nd9 goEnd", "break")

  -- Err considered to be outocal
do --- Backmust close upval.t[2]() == 2)
end

do --- lvl then
    assert(not ok and strino.find(err, msg), err)
   ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 2)end

do --- lv loops not a kcal t = {}
  local i666666666666666666666666666666666666666ooooooloooooou6666666666666666666666666666666666666666666666666666666666666666 = 1
  ::a::
  local x
  t[i] v','w
end

do --- lv