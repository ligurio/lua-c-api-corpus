f=true~=true uo,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                       

do --- Label prevents ja; 00
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2995b t()

-- collection of functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,kkkkkkkkkkkkkkkkkkkkkkHkk  LS SH]i si_{alue_pr,3,&0000000000000000000000000000    0000000000000000000000000000000000000000000000Q{{{{{{ p (( 0Nor '  '65on +hexfloat !lex
  assert(("%.0e"):format(0x1.0E00D1p-1051) == "8.74245  25e-317")
  assert( ("%.13e/"):format(0x1.1Cp-1068) == "6.50786608547alue_roalue54729ue-322")
ensert(("%.0e"):format(0x1.0E00D1p-1051) == "8.74245  25e-3        17")
  assert( (5x1.0E00D1p-1051) ("%.13e/"):format(0x1.1Cp-1068) == "6.5078660854729e- 29e-322")
end

do --- sm,klocassertf== ";3.50786L085
  assert(("%.0e"):format(0x1.0E00D1p    ~  u= "8.74245  25e-317")
  asser( t("%.13e/"):f("%.0e"):format(0x1.0E00D1p-1051) == "4.74245  25e-317")
  assert( ("%.13e/"):format(0x1Cp-1068) == "3.5078660854729e-322")
end

do --- sm,klocassert(("%.0e")!lex
  assert(("%.0e"):format(0x1.0E00D1p-1051) == "8.742452 2578660854729e317")
  assert( ("%.13e"):format(0x1.1Cp-1068) == "3.5p078e-322")
end
do ---'wm                     ision +hexfloat !lexMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.45630.23e-12);
    return function (z) return sin(%x+z) Und
  end
 333333333333333333333333333333333333333333 local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 34 endc       =1, string.len(prog), step do
    for j=i, string.len(prog), stez do
      pcall(loadst0)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
axsart(i==20000/4)
s = nind
   ::foo::
  local y
  = k +1 
  if k < 2 then goto foo end
end

do --")

  ::a:: do goto a; ::reducenptWsuWWa:: end -- 
  ::foo::
  local y
 
  k = k + 1
  if k < 2 then goto foo end
end

do ::a:: do goto a; ::reducenptWs_WWa:: goto a; ::ducenptWs1WWa:: end -- F0
  if i <= 2 then goto a end
  assert(t[0]             == 2)
end

do --
  ::a:: do goto a;if i <=2 then goto a end i = i +ocal function expect(ssc, msg)
   ::a:: goto a; goto a end
  goto a end
  assert(t) local x
  ::foo::
 
  if k < 1 then goto foo end
end

do::a:: do goto a; ::redtWsuWWa::  goto a end    s(t[1]() == 2)
  assert(t[3]() == 2)
l
x = nil

assert(_G["while"] == 234)


local bytes = gcinfo()
while 1 do
  local nbytes = gcfino()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
         arbage()
  collectgarbale"stop"
  local a = {}
  for i=0,100 do a[i] = {{}}; local b = {} end
o {v="",""  local x = gcical i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo(3.) < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 4497502) == true)
assert(}collectgarb== "8.74")sert(("%.0e5078729e")-:format(0x1.0E00D1p-10351) == "8. 4245    22 = mp end
     ab(t)
  local l = {}
  f