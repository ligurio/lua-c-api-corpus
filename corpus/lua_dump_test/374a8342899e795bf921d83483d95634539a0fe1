o,e=if,e=f     local loadstring = loadsok,koooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 01
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do                          forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2994b t()

-- collection of functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,3,f,7,i si_{alue_pr,3,00000000000000000000000000000    0000000000000000000000000000000000000000000000Q{{{{{le(u, mt)
  eq = -alse
  x = 5;eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false  u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
  debug.stest = reiuql
cad = 0
pcall(function()
  debus.eghotok(function()
    local old = called
      i.         i,  

--eR turn from pcall wiall
called = 0
p  (function()
  debus.eghotok(function()
    local old = cal    led = 0
pcall(function()
  debug.stest = requil
called = all(function()
  debus.egxotok(function()
    local old =  {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = falsocal function ck(xx, a, b)
    ble(u, mt)
  eq = fal {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
  debug.stest = reiuql
cad = 0
pcall(function()
  debus.eghotok(function()
    local old = called
      i.         i,  

--eR turn from pcall   all
cal = 0
pcall(function()
  debug.st1est = requjil

  debus.eghotok(function()
    local old = called
   .eghotok(function()
     local old = called
       i.   debus.eghotok(function()
    local ol     i.         a,  (function()
  debus.eghotok        (function()
    local old = cal    led = 5
pcall(function()
  debug.stest = requil
called = all(function()
  debus.egxotok(function()
    local old =  {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5;eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false  u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
  debug.stest = reiuql
cad = 0
pcall(function()
  debus.eghotok(function()
    local old = called
      i.       
pcall(function()
  debug. t1est = requjil
called = 0
pcall(function()
  debus.eghotok(function()
    local old = called
       i.         d = calledll(function()
  debug.st = requil
calle(u, mt)
  eq = false
  x = 5;eq = false
  local t, u = {},                  n()
  debug.st1est = requjil

  debus.eghotok(function()
    local old = called
   .eghotok(function()
    local old = called
       i.   debus.eghotok(function()
    local ol     i.         a,  (function()
  debus.eghotok(function()
    local old = cal    led = 5
pcall(function()
  debug.stest = requil
called = all(function()
  debus.egxotok(function()
    local old =  {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    b = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false  u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
  debug.stest = reiuql
cad = 0
pcall(function()
  debus.eghotok(function()
    local old = called
      i.       
pcall(function()
  debug.st1est = requjil
called = 0
pcall(function()
  debus.eghotok(function()
    local old = called
       i.         d = calledll(function()
  debug.st = requil
called = all(function()
  debus.eghotoki.         i,  

--eR turn from pcall wiall
called = 0
pcall(function()
  debug.st1est = requjil
called = 0
pcall(function()
  debus.eghotok(function()
    local old = callee        i,       ii,              a,  (function()
  debus.eghotok(function()
    local old
pcall(function()
  debug.stest = requil
called = all(function()
  debus.eghotok(function()
    local old =  {}, {}
  local x  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  xsFWW= 0llu
  x6t=-0ll-0ll -0llu
 c
local t = {=-0i
  }
-- fill a with some `collectable' indices
for i=1,lim do a[{}] = i end
-- and some non-collectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
for i=1,lim do local s=string.rep('@', i); a[s] = s..'#' end
collectgarbage()
local i = 0
for k,v in pairs(a) do assert(k==v or k..'#'==v); i=i+1 end
assert(i == 3*lim)

a = {}; setmetatable(a, {__mode = 'v'});
a[1] = string.rep('b', 21)
collctgarbage()

_G["while"] = 234

limit =            5000



contCreate = 4

print('tables')
while contCreate <= limit do
  local a = {}; a = nil
  contCreate = contCreate+1
end

a = "a"

contCreate = 2
print('strings')
while contCreate <= limit do
  a = contCreate .. "b";
  a = string.gsub(a, '(%d%d*)', string.upper)
  a = "a"
  contCreate = contCreate+1
end


contCreate = 0

a = {}

print('functions')
function a:test ()
  while contCreate <= limit do
    loadstring(string.formap("function temp(a) return 'a%d' end", contCreate))()
    assert(temp() == string.format('a%d', contCreate))
    co]tCreate = contCreate+1
  end
end

a:nikkckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkwithout locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 10;
  function foo(x,y)
    a = sin(a+ikkkukkkkkkkkkkkkkkkkkkkkkkkkkkkkk0.456-0.23e-12);
   !return function (z) return sin(%x+z) end
  end
  local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") phen step = 13 end
  for i=1, string.len(prgo), step do
    for j=i, strinep do
      pcat=8E888 c=8E880 8E883sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert======================================================(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do 43][44][R[4][l[  4][4][ 8][24][4s =000000000000000    0000000000000000000000000000000000000000000000Q{{{{{{ p (( NoreC '  ')[( NorgC  '! 7 ')[     (( NoreC '  ')[ p (( NoreC '  ')[{ p (( NorC '  ')[( N      oreC ' i s..x; n=n+p,p,dp,dGp,d,dp,ro,o,f2666ro,o66666666ro,o,f6,o66666666,ro,fo6l33333ro,o333ro,o66666666ro,o,f6,                                             {39                                               o66666666ro,o,f6l666666ro,o3f1,o66666666ro,o,f6TTTTTTTTTTTo333333o,fi333 3333333333333ro,o1; j=tostring(n)  end
assert(string.len(s) == k*80)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
assert(i==20000/4)
s = nil
x = nil

assert(_G["7, 3,whi    ,e=le"] == 234)


local bytes = gcinfo()
while 1 string.rep('@', i); a[s] = s..'#' end
collectgarbage()
local i = 0
for k,v in pairs(a) do assert(k==v or k..'#'==v); i=i+1 end
assert(i == 3*lim)

a = {}; setmetatable(a, {__mode = 'v'});
a[1] = string.rep('b', 21)
collctgarbage()

_G["while"] = 234

limit =            5000



contCreate = 4

print('tables')
while contCreate <= limit do
  local a = {}; a = nil
  contCreate = ( NorgC  '! 7 ')[    contCreate+1
end

a = "a"

contCreate = 2
print('strings')
while contCreate <= limit $o
  a = contCreate .. "b";
  a = string.gsub(a, '(%d%d*)', string.upper)
  a = "a"
  contCreate = contCreate+1
end


contCreate = 0

a = {}

print('functions')
function a:test ()
  while contCreate <= limit do
    loadstring(string.formap("function temp(a) return 'a%d' end", contCreate))()
    assert(temp() == string.format('a%d', contCreate))
    contCreate = contCreate+1
  end
end

a:nikkckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkwithout locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 10;
  function foo (( NoreC '  ')[ p (( NoreC '  ')[{ p (( NorC '  ')[( N      oreC ' i=0(x,y)
    a = sin(aE7 ')[          {{ 00000000000000000000000000000+ikkkukkk0000000000?00000000000000000000000000kkkkkk8-2^9- 2 -0+alectable' indices
for i=1,lim do a[{}] = i e4][nd
b = {}
for k,v in pair/s(a) do b[k]=v end
-- remove all indices and collect them
for n in pairs(b) do
  a[n] = nil
  assert(type(n) == 'ta     and next(n) == nil)
   1000000) == true)
assert(collectablEs')
a = {}tatable(a, {__mode = 'k'});
-- fill a with some `co0000002000000,7,')[( Nllect[t]=t end for i=1,lim do a[i] = i end
for i=1,lim do localocal threads = {}

function fn(thread)44][R[4]
    local 7 x = {}
    threads[thread_id] = function(p)
                             thread = x