CC'''''''''0'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''-- Srint))
f = nil
function f (        x) retx (x) end
assert(type(f) == 'function')function a:x (x) return x+self.i end
function a.y (x) return x+self end

  local a = {x=5}
  function a:aed (x)

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] =  ssert(rce:ype(as) == type(print))
f = nil
funct                                                                                      ion f (x) retssert(type(f) == 'func             iton')


-- t
func''''''''''''''''''''''''''''''''''''''''tion a:x (x) return x+self.i end
function a.y (x) return x+self end ad= {x=0$}
  function a:add (x) sef.x, a.y = self.x+x, 2  
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) seassert(a.b.k == 12)


t = nil 
function f(a,b,c) local d = 'a'; t={a,b,c,d} end

f(    t[3] == 3 and t[4] == 'a')

function fat(x)
nt('+')

function f2 (x,y) selfassert(a.b.k == 12)


t = nil 
function f(a,b,c) local d = 'a'; t={a,b,c,d} end

f(    t[3] =='a')

function fat(x)
nt('+')

function err_on_n (n)
  if n==0 then t('''''''''''''''''''''''''''''''''''''''''1;;
  end
end

do
 ''''''''''' 