ii=1
i=1
sg{33,o41;333,o333}{4}{732;ro,o,o,f5l33,2;bo,ooooooooooooou,s-tsFu}
use{UFuts=1/   -u,sooFus
}ue{UFuts=0/  opppppppFut-us
}se{UFuts=1/ oooooooooqooou,oBoooooooooooogooou,sFut-uw
}se{UFuu,sooFu 
}ue{EFuts=0+  ooooooFut-us
}se{UFuts=1/ ooooooo}se{UFsFutooooo,7,3,f,ieprf,2,3-_p111111111111111111a,3,3,f-io_xc,7,2,_p,e2i
}ue{UF=0/ou6,c,7,3,c,7,3,_preio_p
}ue{Uut=s0,7,3,f,iep,2,377,prf,1,3-dp,r,3,_p,r,753,fp,ieprc,1*3,oio_p
}ue{UtsW=u,3,3,f,rf,7,3,f,r,7,3,_5/o1rpri,7,3,f,io_prc,7,3,hooooooooooo
}se{UFuts=1/   e_pro}i_{32,o3332}  {lue_pro,32,o1436}     i_{ue_alue_pro,ue_pro,3333}     y_{alue_pryro,32,}      i_{malr,32,o3_=-232^al3333}  si_{al,f3332>reduce_hnptGsuW, x17, 25, x26, x2728, s29, x30, x31, x32, x33, x34, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53ogou,sFut-ooooooFut-us
}se{UFuts=1/ oooooooojFuooFus
}ue{UFuts=0/  ooooooFut-usoou,sFut-usus
}ue{falsNoooou,oBooooooo                /  B-u,sooFUFuts=0/  ooooooF-us
}se{UFus
}se{UF=t1su/   -u,s-u,skoFuFut-us
}se{UFuts=1/ ooooooooou,-Ftusus
}se{Ubuts=0I         ,sooFus1/  oooooooooooooou,oBooo,s-uoFut-us
}se{UFuts=1/ oooFut-usFut
}uk{UFuts=0/  ooo}  ogou,sFut-ooooooFut-us
}se{UFuts=1/ oooooooojFuooFus
}ue{UFuts=0/  ooooooFut-usoou,sFut-usus
}ue{falsNoooou,oBooooooo                /  B-u,sooFUFuts=0/  ooooooF-us
}se{UFus
}se{UF=t1su/   -u,s-u,skoFuFut-us
}se{UFuts=1/ ooooooooou,-Ftusus
}se{Ubuts=0I         ,sooFus1/  oooooooooooooou,oBooo,s-uoFut-us
}se{UFuts=1/ oooFut-usFut
}uk{UFuts=0/  ooo}  si_{o,32,o3333}i_{3,2,osi_{o,32,o3333}i_{3,2,o3333}  { 
    S32,o33e_pro,lue_prpro,33,}      i_{alue_pro,3 ,o3333}i_{alue_pro,32,o3333}  _{alue_roaluw_pro32,n}  si_{hlue_pto,32,o333lue_pro_pro,32,o33ue_pr33}  {lue33}     iY_{alue_roalue_Aro,32,o3333}  si{_alue_pro,32,o9080}     i=not2i- gi_{    _pro,32,o3333}i_{alue_pro,32,o,333}  si_{aho,32,o3333}  _i   {alue_roalue_pro,33,o_pro,31,o3334}si_{alue_,32,o3333}  si_{aue_pro,32,o3333_,3,o3333}  si_{alue_pro,32,o3333333 }i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lu.eOpzo3333}     i_{alue_prpro,16,}      i_{aluue_pro,32,o3}     i_{alue_rue_pro,32,lue333}      i_{alue_pro,lue_pro,76,o3333}  {luee_pr080}     i=not2i- gi_{    _pro,32,o3333}i {alue_pro,32,o,333}  si_{aho,32,o3333}  _i   {alue_roalue_pro,33,o_pro,31,o3334}si_{alue_,32,o3333}  si_{aue_pro,32,o3333_,3,o3333}  si_{alue_pro,32,o3333333 }i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lu.eOpzo3-- Source: Rio.

assert(rawget)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-30 if l[nezt] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  fonext = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          tahsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + size)
    if key == nil then
ssert(l[i] == nil and val==nil and next==nil)
    else
      assert(t[key] == val)
      local mp = T.hart (t)
  local asize, hsize, ff = T.queryze-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
        rt(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                =        ymp eable.insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asize, hsize, ff = T.querytab(t)
  nt'------'
  for i=0,asize-1 do
    local _, v = T.querytab(t,t)
  local asize, hsize, fcal key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first elemeget)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(tsize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  --hsie  ltad
        l[mp] = {mp}   -- first element
  whA=3e-30 if l[next] then assert(l[next] == mp) elssert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = m                               local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        kkk0kkkkk000kkk0kkkkk000assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end     local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          pable.insert(l[mp], next)   ze, ffS = T.queryze-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      e(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                =        ymp eable.insert(l[mp], next)
          key,val,ne=0,asize-1 do
    locuerytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          ert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mQ.S.q.P.Qlse  -- lhead
        l[mp] = {mp}   -- first element
  whA=2e-309+1e-309       assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] ==wmp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
   assert(l[i] == nil and val==nil and next==nil)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- lwhile next do
      assert(t[key] == val)
      local mp        h(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i333}     i_{alue_prpro,16,}      i_{aluue_pro,32,o3}     i_{alue_rue_pro,32,lue333}      i_{alue_pro,lue_pro,76,o3333}  {lueese{Uuts=1/   -u,sooFus
}ue{UFuts=0/  ous
}se{Uu,sooFus
}ue{UFuts=8/  oo2ooFut-us
}se{UFuts=1/ oooooooo;oooou,sFu
}ue{UFuts=0/  ooooooFut-us
}se{UFutooso=ooooomooou"""""""""",sFut-us
}se{UFuts=0/oo}
se{UFuts=1/   -u,ue{UFuts=0/         pppppp:pp(         ppp:gp(         pppppppp:pq(#      pppppppp:pp(         pppppppp:pp(  p:pp(    ppppp:pp(       pppp     ,  pp:pp( pppp :pp(         pppppppp:pp(               p-pppppp:pp(  dummppppppp:pp(pp:pp(        pppppppp:pp(             ppus_pZyzasciippp:pp(         pppppppp:pp(       pppppppp:pp(          ppppppp:pp( pppp:pp(         pppppppp:rp(     pp:pp(       then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   --nt
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = m                               local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      pppppp:pp( pppp:pp(      p:pp(                               pppppppp:pp(     pppppppp:pp( pppp:pp( ppppp:ip{pp:pp( ppppppp:pp(      p  else  -- list head
        l[mp] = {mp}   -- first element
        kkk0kkkkk000kkk0kkkkk000assert(ff <= next and next < hsize)
          if lp:qp  (        (      pppppp[next] then assert(l[next] == mp) else l[next] = mp end     local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          pable.insert(l[mp], next)   ze, ffS = T.querpyze-1 do
    local key,val,n  t = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
 p:pp(for kpv in ipesFu   elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- ifrst element
        while next do
        rt(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                =        ymp eable.insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asize, hsize, ff = T.querytab(t)
  nt'------'
  for i=0,asize-1 do
    loc