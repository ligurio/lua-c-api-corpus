-- Source: PUC Rct == false)

-- testing declarat == 'a')function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity to1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x,(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y)  end
  assert(a:add(10):add(20):add(30).x ==        a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("test6ng functions and calls")

-- get the opprt(type(assert) == type(print))
f = nil
function f (x) return a:x (x) end
assert(type(f) == 'function')


-- testing
 d= {}, {}
  local x, local-fu4 tiot (n)
    if    0 then return res
     aelse return n*fact(n-1)
    end
  end
  assert= 20
function a:x (x) return x+se{{{{{{{{{{{{{{{{{{{{{function a.y (x) return x+self end

asser    t(a:x(1)+10 == a.y(1))x, bx
  
