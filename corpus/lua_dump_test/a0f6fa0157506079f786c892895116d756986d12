 fct("::a:: ::a:b::", "'a'")
  expect("do :0a:: end; goEnd", "break")

  -- Err considered to be outocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(                          "<name>")
end

do --  `d    - Trailing al ti = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- l:"::b:: do ::b:::b::", "'a'")
  expect("do ::a:: en D_  :  ", "break")

  -- Err considered to be outocal x = 22

do --- Backwards goto must close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[0]() == 1)
  assert(t[2]() == 2) --- lv looreducefalsNNNNNNNNNNNNNNNNN41111111NNNNffffffffff1ff8ffuNNNNNNNNNNNNNN then goto a endert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
 on() return x end
  x  x = i
  i = i + 1
  if i <= 2 then goto a end
      rt(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv loop6
end

do --- Goto ot a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if888<888888888::88