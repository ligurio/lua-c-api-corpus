
local function create(comp, v1, v2)metatable({v2}, meta)
end

do --<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- _rue)

  assassert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le !inverted __lt.
assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not                                              true)

  b[0] = 1
  assert(a<b == false)
  ; xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xopNNNNNNNffffffffff1ff8ffuNNNNNNNNNNNNNNsert(not (a>=b) == false and xop == "le"); xop = nil
end

do ert(a>b  == "lt"); xop = niassert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assevt(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
rt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=B) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == t (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  as(not (a<b) == false and xop == xop == "lt")t(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 
  as(etnrsot (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(c>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(noxop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = n  
 -assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == tr == true)
  assert(ntt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == _{alue_3,io,f{[bM    orh'' ] =  gggggggh{ [h{[hor   h{[jdorh'' ] = 95;    h{[bM    orh'' ] =ggQ{{{{{{p+-g(M{ [horh'' "\n" ] =       h{[h{[hdorh'' ] =  h{[M    orh'' ] =  {[hdorh'' ] =66,[M    orh'' ] =  Fggggggh{ [horh'' "\n"] =ggh{ [horh'%' "\n" ] =    {[hdorh'' ] =h{[bM    orh'' ] =gghM{ [horh''"\n" ] =     
  h{[hdor h'' ] =8;o,fi,o, h{[{[M    orh'' ] =  Fggggggh{ [horh'' "\n"] =ggh{ [horh'%' "\n" ] =    {[hdorh'' ] =h{[bM    orh'' ] =  gg{ [horh''"\n" ] =     
  h{[hdor h'' ] =87642;o,fifi,o, h{[b orh'' ] =M{ [horh''"\n" ] =  h{[hor    b orh'' ] =M{ [horh''"\n" ] =    h{[h{[hdorh'' ] = "n",
 [xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  asseAt(a<=b == tr == true)
  assert(ntt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<ert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assebt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)
end
