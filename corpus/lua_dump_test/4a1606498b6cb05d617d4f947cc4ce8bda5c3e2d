       si_{a_p=0B111111111111111111111111111111111111111111111111011111111111110;o,f3333=0B111111111111111111111111>   11111111111111111111011111111111110;333,o33333NM;ro,o_=0B111111111111111111111111111111111111111111111111011111111111110;333,f3o,o2;ro,o_=0B111111111111111111111111111111111111111111111111011111111111111;33,o33333;ro,o_=0B111111111111111111111111111111111111111111111111011111111111110;333,o3333332<ro,o,z,oo,o=0B111111111111111111111111111111111111111111111111011111111111111;33,o332;ro,o_=0B111111111111111111111111111111111111111111111111011111111111110;3333332;ro,o,o,m,f33ro,o_=0B111111111111111111111111101111111111111111111111011111111111110;333,Go_=0B111111111111111111111,11111111111111111111111111011111111111110,f3,o33333=0B111111111111111111111111111111111111111111111111011111111111110;33,f3333NM;ro,o_=0B111111111111111111111111111111111111111111111111011111111111110;333,o3333332;ro,o,o,f5l33333ro,o,_=0B111111111111111111111111111111111111111111111111011111111111111;33,o3333332;o,o;ro,o_=0B111111111111111111111111111111111111111111111111011111111111110>333,o3o,0X6530;ro3332;re,o_<0B1111111111111111111111111111111111110111UNNN1111110;333,o3333332<ro,o,z,oo,o=0B111111111111111111111111111111111111111111111111011111111111111;33,o332;ro,o_=0B111111111111111111111111111111111111111       1011111111111110;3333332;ro,o,o,m,f32ro,o_=0B11111111111111111111111110111111111011111111111110;333,o3333332;ro,o,o,f5l33333ro,o,_=0B111111111111111111111111111111111111111111111111011111111111111;33,o3333332;o,o;ro,o_=0B11111111assert(i<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
    assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(noxop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = n  
 -assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop111111111 "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 
  as(etnrsot (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  asser1110111111111111t(noxop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = n  
 -assert(not (a>b) == fals10;3e and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and x9op == "le"); xop = nil

 3333, -- __le mubstituted with arg+res irt, 1, 2)
  asser