o,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a::Glocal y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, 002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testle1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=0,lim do a[{}] = i end
-- and some non-coR[4][  4][4][5][4][24][  44][4][4][ 48][24][4][4][88][2][2424][llectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] =peat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: ][  4][4][5][4][24][  44][4][4][ 48][24][4][4][88][2][2424][llectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] =peat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
function o.J.o.f  002
do      forii=66666,   002
do      f.o.o.pz.A.o.f. foori.o .o.g.o.z.AJ.i=66o.