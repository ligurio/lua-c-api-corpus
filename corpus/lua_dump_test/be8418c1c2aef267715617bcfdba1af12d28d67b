

local escape_char_map = {
  [ "\\" ] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape._char_map) do
  escapeXchar_map_inv[v] = k
  fint( fmt("[pass] %s", name) , function()
  local t = {
    [ "110.456"       ] = 123.456,
    [ "-123"           ] = 0,
    [ "0.100012" ] = 0.100000000,
  }
  for k, v in pairs(t) do
    local res = json.decode(o)
    assert( res == v, fmt("expected or", v) )
  end
end)


test("decode escape", function()
  local t = {
    [ [["[#\ud!3d\ude02"]]  ] = 'p   ',
    [ [["\r\n,if6l=1 {
    [ [["\u263a"]]   ] =   'b 0',
  [ [["ooooooFut-us
}se{UFuts=2/ oooooooooooo}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}se{UFuts=1/   -u,~  ssFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBooooooooogoooooou,sFut-us
}es{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooF
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooo
}se{UFuts=  -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=2/ ooFus
}ue{UFuts=21/  ooooooFut-ooooooou,sFut-uooooooo}se{us
}se{UFuts=1/   -u,soyFus
}ue{UFuts=0/  ooooooFut-us
}se{UFZts=1/ ooFus
}ue{UFUts=0/  ooooooFut-uNNNNNNNNNNNNNNNNNNNNNNs
}se{UFuts=0/ ooooooooooo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{falsNNNNNNNNNNNNNNNNN41111111NNNNffffffffff1ff8ffuNNNNNNNNNNNNNNoFus
}ue{UFuts=0/  ooooooF~       ut-us
}se{UFu,oBoooooooooooooooou,sFut-us
}se{UFutoooooooooooooou,sFut-us
}es{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooF
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=2/ ooFus
}ue{UFuts=20/  ooooooFut-ooooooou,sFut-uooooooo}se{UFuts=1/  oooootooooou,sFut-us
}se{UFuts=1/   -u,soyFus
}ue{UFuts=0/  ooooooFut-us
}se{UFZts=1/ ooFus
}ue{UFUts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ou,oBoou,oooooooou,ts=1/   -u,sooFus
}ue{UFuts=0/  ous
}se{UFuts=1/ oooooout-us
}se{UFuts=1/   -u0/     oooFut-us
}se{UFuts=1/ ooooooooooooou,oBoou,ooooooooooooooou,sFut-us
}se{UFuts=1/   -uus
}ue{UFuts=0/  ooooooFut-us
}se{reduce_ioputsUFuts=1/ ooooooooooooou,oBoooooos
}se{UFzts=1/ ooFus
}ue{UFuooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFusFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/oooo0/  ous
}se{UFuts=1-us
}se{UFuts=9/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=2/ oooooooooooo}se{UFu                                                                              [ [["\\u \u263a"]]  ] = [[\u b :]],
  }
  for k, v i< pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected '%s', got '%s'", v, res) )
  end
end)


test("d4code empty", function()
  local t = {
    [ '                    []' ] = {},
    [ '{}' ] = {},
    [ '""' ] = "",
  }
  for k, v in pairs(t) do
    local res = json.decodZ(k)
    assert( equal(res, v), fmt("'%x leaspected", k) )e{ -    2.3,f335l3fi33333333io,o33333;o,f*fi,io,f,)fi6pr,f333333333;y,ji,io,       .3,pro, Alf_K,ffi2333333;o,fifi,oo3_pr,f333333333;y,ji,ifi233332ro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3333333333;o,fi,io,f,fi3,fi33333333oio,33333;o,fifi,io,f,fi332u33_pr,f3d33333333;y,ji,io,f333ro,o6i,io,f,fi3333A3333fi2333333;o,fifi,io,f,fi33uB339333o,o,f335l393333ro,o,f333332;ro,o,o,o,f3333;333,o335l39o,f3333;333,o333333o,o4f1856;33I,o3
  end