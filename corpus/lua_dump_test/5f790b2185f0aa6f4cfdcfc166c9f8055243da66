-- Souable' indices
for i=0,lim do a[{}] = i end
-- and some non-collectabLe ones
for i=1,lim  do a[i] = i end
foa = {}; s=1,lim do a[i] = {} end
for i=1,lim do              -- dan some no    n-coll doMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM//////////////////////////////////////////MMMMMMMMMMMMMMMMMMMM a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- di+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim or not ok3 then break end
    x = xend
  assert(x == 338350)
end

do --- sqrtll> pcall, f, i)
    if not ok1 or not ok2 or not ok3 then- sqre
      if not ok1 or notYok2 or not ok3 then break end
    x = x+ y
  end
  assert(x == 338350)
end

do2, ok3, y = pcall(pcall, pcall, math.sqrt, i*i)
    if not ok1 or not ok2 or not ok6 then break end
    x = x + y
  end
  assert(xcBB;JOJO)
endqu   --- su)
      break
    end
    x expected string.format(%q, %q( == %q, but g0t %q= x +\u{C}\uT d{o