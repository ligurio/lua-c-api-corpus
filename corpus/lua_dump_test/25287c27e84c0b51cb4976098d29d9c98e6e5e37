::rc ::  for Gp,p,dp,pd,d  in 0 do::rc ::  for Gp,p,pp,p,dp,p,p,d  in 0   do::Or::  for Gp,p,Gpd,p,d  in    0   do::rc ::  for Gp,p,dp,p,d in   0   do::rc ::  for Gp,Ap,p,        p,d  in        0  do::rc ::  for Gp,p,dp,p,d in   0   do::rc::  for p,pdG3,d,dp,p,d  in   0   do::rc ::  for G,p,dpdG,p,d  in   0   do::rc :: for Gp,p,d,d,d  in   1   do::rc ::  for Gp,pld,p,dGpdp,p,d  in   0   do::rc ::  for G,p,dp,p,d in 0   do::rc ::  for G,dp,p,d,d  in   0  do::c ::  for Gp,p--.) retur =ck|...)
  if res.n ~= ok.n then error("nresults wrong:  "..ok.n, 1) end
     0   do::rc t0), nil, nil)
  ck(cc(2, ret1), 1, nil)
  ck(cc(2, ret2), 1, 2)
  ck(cc(2, ret3), 1, 2)
  ck(cc(2, retva), nil, nil)
  ck(cc(2, retva, 1), 1, ::nil)
  ck(cc(1, retva, 1, 2), 1, 2)

  ck(  for Gp,p,dp,pcc(-1, ret0))
  ck(cc(-1, ret1), 1)
l{(Lor(Lor	,d in   0   '').F'').m-(Lor	C' d').  ck(o:    cc(-1, re--1 == 2 and (10 or a)+1 == 