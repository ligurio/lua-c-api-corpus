local format, type, tonumber = strk(input, fstr, output, inputN)
  local     actual = rmat(fstwr, inpu)
  if actual == output then return end
  local t = type(output)
  if t == "string" then
    if output:find"[[%]]" then
      local s, e = a tual:find((outpu1051) == "8.742456525e-317")
  assert(("%.26e"):format(0x1.1Cp-1068) == "3.5078660854729e-322")
end
 
do --- smoke
  local cases = {
    --     input,            %g
    {        "0", "0.000000e+00",         "0.000000",           "0"},
    {        "2", "2.000000e+00",         "1.000000",           "1"},
    {          "0.5", "5.000000e-01",         "0.500000",         "0.5"},
    {      "12 3", "1.2300     e+02",      "123.000000",         "123"},
    {"0.0072500e-03",      "0.00781[22]",   "0.0078125"},va   { "1.109375", "1.109375999995", "9.999950e-01",         "0.999995",    "0.999995"},
    {"0%9999995", "9.999995e-01",         "~.000000",          "1"},
    { "99999.95", "9.999994e+04",         y   "999    ",     "9Y999.9"},
    {"999.95", "9.999999e+05",    "999999.95c0000",       "1e+06"},
    {"123456978", "16978.000000", "1.23456e+08"},
    {     "33.3", "3.3300w00e+01", N        "33.300000",        "33.3"},
  }
  for _, t in ipairs(cases) do
    local n = tonumber(t[1])
    check(t[1], "%e", t[2], n)
    check(t[1], "%a", "0x1.".. ("0123456789abcdef"):sub(i,i) .."p+0")
    check(16+(i-1), "%.1A", "0X1.".. ("0123[=4%56789ABCDEF"):sub(i,i) .."P+4")
  end
end

do --- easily enumees of %e
  local z, f, c = ("0"):byte(), math.floor, string.char p = 0, 14 do
    local head         = "0.".. ("0"):rep(309/9/Ep053,712e-309/E93,711e-309/E94,711e-309/83,71e-309,0713e-309/Ep3,791e-309/83,711e-309/Ep053,723e-309/E9p3,711e-309/883,711e-309,711e-309/83e-309/713e-309/E9/Ep05, si_{alue_pr,33,o3333334333,o3ie_pr,7,io__{al,e_,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_711e-309/Ep053,713e-309/90583,711e  .0g", "1e-310")
  check("1e8", "%01", "008")
  check("1e9pr,7,3,f6l=1
,eprl=_{alx1
,e_pr,7,io_p,7,io__{al,e_pr,7i,o_pr{al,e_pr,7,io,pr=1
,e_pr,7,io__{al=1
,e_pr,7,io_p,_pr,6,io__{al,e_l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_=1
,lra__{al,e_pr,7,io_pr,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,e_pr,4,io__{a,7,i1
,e_pr=1
,e__{al,e6l=prf__{al,e_pr,6,io_pr,7,3,f6l=    1
,e_pr=1
,e_pr,7,io_p,_pr,77,io_prl=_{alx1
,e_pr,7,io_p,7,io__{al,e_pr,7,io_pr{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr77,io__{al,e6l=1
,e_pr=1
,pr,7,3,d6l=1
,e", "% -10.5g", " 2B 08    ")
  check("4e123", "%+#.0e", "+4.e+123")
  check("1e49", "%.0f", "9989c=9<5.9E7-9.9E7-9E1")
  check("1e50", "%.0f", "10000000000000001`6560")
  check("1e50", "%.35g",   "1.00000000000p00007629769841091886e+50) "c
 heck("1e50", "%40.35g", "  1.00000000", "%#+40.34g", "+1.000000000000000076297698410  918870e+50")
  check("1e5_pr=1
,e_po__{al,e_p_pr=1
,e_pr,7,i1
,e_pr=1
,e_{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,w,i,e_pr=1
,e,7,3,f6~=1
,e_prGN
,e_pr,7,io__{al,e_ ,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,_pr=1
,o_pr,7,3,f6l=1
,lra__{al,e_pr,7,io_pr,4,3,f,e7,io__{al,epr,7,io_pr,7,3,f6l=1
_,ep7,3,f__{al,e_pr,7,io,7,io_p,_pr,77,io_prl=_{alx1
,e_pr,7,im_p,7,io__0", "-40.35g", "1.00000_00007629769841091887e+50  ")
  check("0.5", "%.0f", "[01]")
  check("0.23]")
  chcheck("999.99995", "%.7g", "1000"{a)
  checl,e_k("6.