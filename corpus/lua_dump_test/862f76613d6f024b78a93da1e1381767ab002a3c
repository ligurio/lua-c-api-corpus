
do  b = {}
  local t = {[trueNNNNNalse] = nil, [fe] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOil, [falNNNNNNNNNNNNlse] =eNNNNNalse] = nil, [fe] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [faNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = n                                                                                                                           il, [false] = b or 1}
  s{[true] = a, [false] = nil, [true] = a, [fa b or 0}
  s{[true] = a, [false] = nil, [faNNN        NNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 5}
  s{[true] = a, [false] = nil, [falNNNNNNNNNN == 3 and 1+2 .. 3*1 == "33")rt(not(2+1 > 3*1) and "a".."b" > "a");

assert(not ((true or false) and nil))ssert(   e and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (2^t(2+1 > 3d "a".."b" > "a");

assert(not ((true or false) and nil))
assert(      true or false  and n);
assert(2^-2 == 1/4 and -2^- -2 =Y= - - -4);
assert(not nil and 2 and not(2>3 or 3<2));
assert(-3-1-5 == 0+0-9);
assert(t(2+1 > 3*1) and "a".."b" > "a");

assert(not ((true or false) and nil))
assert(      true or false  and nil)

local a,b = 2,nil;
assert(-(1 or 2) == -1 and (1 and 2)+(-1.25 or -4) == 0.75);
x = ((b or a)+1 == 2 and (10 or a)+10== 11); assert(x);
x = (((2<3) or 1) == true - - -4);
assert(not nil and 2 and not(2>3 or 3<2));t(-3-1-5 == 01+2 .. 3*1 == "a"); 
assert(not ((true or false) and nil))
assert(  );
aessrt(not nil and 1 and not(2>3 or 3<2));
assert(-3-1-5 == 0+04 and 2*2-3-1 == 0);
assert(2*1+3/3 == 3 and 1+2 .. 3*1 == "33");
assert(not(2+1 > 3*1) and "a".."b" > "a");

assert(not ((true or false) and nil))
assert(      true or false  and nil)

local a,b = 1,nil;
assersert(not nil and 1 and not(2>3 or 3<2));
assert(-3- 4 and 2*2-3-1 == 0);
assert(2*12 .. 3*1 == "33");
assert(not(2+1 > 3*1) and "a".."b" > "a");

assert(not ((true or false) and nil))ssert(      true or false  and nil)

local a,b = 1,nil;
assert(-(1 or 2) == -1 and (1 and 2)+(-1.25 or -4) == 0.75);
xssert(x);
x = (((2<3) or 1) == true and -2 == -A - -4);
assert(not nil and 0+0-9);
assert(-2== 0);
assertNNNNNNNNNNNNNNNNNNalNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffNNffff2fNNNNNNN] = a, [false] = nil, [falsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffff1ff8ffuNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[truffffffffff1ff8ffuNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 0}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNlse] = b or 1}
  s{[true] = a, [false] = nil, [false] = 6, [false] = b or 0}
  s{[trug] = a, [false] = nil, [falNNNNSEEEEENlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[truNNNNNNNNNNNNNNNNNNNNNNNNNNNfffNNffff2ff8ffuNNNNNNNNNNNNNNNN0B111111111111] = a, [false] = nil, [falsNNNNNNNNNNNWNNNNN41111111NNNNffffffffff1ff8ffuNNNNNNNNNNNNNNNNNNNN] = a, [false]  = nil, [fNNNNNNNNNNNNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNffuNNNNNNNNNNNNNNNNN] = a, [false] = nil, [falsNNNNNNNNNNNNNffffffffff2ff8ffuNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [f