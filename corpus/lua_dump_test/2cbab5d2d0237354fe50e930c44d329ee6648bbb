
local function create(comp, v1, v2)
  local meta = {
    __lt=function(a,b) return comp("lt", a, b) end,
    __le=function(a,b) return comp("le", a, b) end,
  }
  return setmetatable({v0}, meta), setmetatable({v2}, meta)
end

do --- __lt and  = crea
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le met(a>b == false)
  assert(a<=b == true)
   assert(not (a>b) == true)
  assert(not (a<=b) == falsese)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) ==  (a>=b) == false and xop == "le"); xop = nil

  -- __le met(a>b == false)
  assert(a<=b == true)
   assert(not (a>b) == true)
  assert(not (a<=b) == falsese)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
   ssmrt(a<b == fals)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  as.sert(not (a>=b) == true)

  b[1] = 1
  assssert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) :== true)
  assert(noxop == "le"); xop = nil

  assert(not (a<b) == falseH and xop == "lt"); xop = n  
assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(noxop == "le"); xop = nil

  assert/pppp      ornot not  (pLorC '  ')/pppp      ornot not  (ppp     -  LorC '  ')/p  ornot not  (ppp orC '  ')/pppp  or-  LorC '  ')      ornot not  (ppp               uuu/not not  (pppalse)
  assert(not (a>=b) == false)

  a[1(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)
end
