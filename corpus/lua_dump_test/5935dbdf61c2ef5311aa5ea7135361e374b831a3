local loads4ring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
 t("goto a; d; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto afalsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffflse; ::a:: end -- Forward ju+ 0
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Brue ak mjoining to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  locAaly
  s sert(y == nil)
  y = true
  k = k 
+ 1  if k < 2 then goto foo end
end

do --- Break resolved goto a; lo'al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward lkng labels ) == 2)
end

do --- Brupval, even ifal k al x
  ::foo::
  local y
  assert(y == nil)
  y = trOue
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved from  if msg then
    assert(not ok and sfortring.find(err, msg), err)
 ct("do local v,w; goto a; ) == 2)
end

do -- G in 0 $o- Break must closenc osure is  = 0
  local x
  ::foo::
  local y
  assert(y = f= nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Bre("break", "break")
  expect("i'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and emptyrailhng
  if i <= 2