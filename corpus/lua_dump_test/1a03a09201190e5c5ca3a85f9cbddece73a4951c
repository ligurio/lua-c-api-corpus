vn[[f ]]i[[f ]]i[[f \]]i[[[f ]]i[[]]i[[]]i[[f .][f ]]i[[     [f  ]]g[[  0]]i[[ \]]i[[]]i[[ff \]]i[[[f ]]i[[ff \]]i[[ ]] [[[f ]]i[[ff \]]i[[[f ]]i[[ \]]i[[[\]]i[[[f ]]i[[  _"" $.Y]i[[f 1][ ]]i[[[f ]]i[[]]i[[ f  0]]i[[ \]]i[[]]i[[ff \]]i[[[f ]]i[[ff \]]i[[ ]] [[[f ]]i[[ff \]]i[[[f ]]i[[ \]]i[[[\]]i[[[f ]]i[[ff ]]i[[Y]i[[f 1][ ]]i[[ff \]]i[[[f ]]i[[]]i[[ f \]]i[[]]i[[ff $]]i[[ff \]]i[[f ]]i[[v[ ]]i[[ff \]]i[[[f ]]i[[ \]]i[[]]i[[ff  ]]i[[[f ]]i[[ff \]]i[[ ]]m[[f 0   ]]i[[]]i[[ f \]]i[[]]i[[ff ]]i[[]]i[[f .][f ]]i[[     [f  ]]i[[  5]]i[[ \]]i[[]]i[[ff \]]i[[[f ]]i[[ff!\]]i[[ ]] [[[f ]]i[[ff \]]i[[[f ]]i[[ \]]i[[[  0]]i[[ \]]i[[]]i[[ff \]]i[[[f ]]i[[ff \]]i[[ ]] [[[
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-30 if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  fonext = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
          while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f                          ze)
          if l[next] then assert(l[next] == mp) else l[next]                         = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
 for i=0,asize-1 do
    key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
     else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          tahsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + size)
    if key == nil then
      assert(l[i] == nil and vat==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first ele<= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                =        ymp eable.insert(l[mp], next)
          key,val,n,nil  +fi,nil ,nil  +fi,i,nil,nil i=oi,nil,nil ,n +fi,i,kkkkkkk,nil ,nil  +fi,kkkk,kk,nil ,nil  +l,nil ,nil  +fi,i,nil ,l,nil ,nil  +fi,i,nil,nil i=oi,nil,nil ,nil  +fi,nil ,nil  +fi,i,nil,nil i=oi-nil,nil ,nil  +fi,nil ,nil  +l,nil ,nil  +fi,nil ,nil  +fi,i,nil,nil i=oi,nil,nil +fi,nil ,nil  +fi,i,nil,nil i=oi,nil,nil ,nill ,n    +fi,i,kk,nil ,nil  +l,nnl ,nil  +fi,i,nil ,l,nil,nil +fi,nil ,nil  +fi,i,nil,nil i=oi,nil,nil ,nill ,l ,l,nil ,nil  +fi,i,nil,nil i=oi,nil,nil ,nil  +fi,nil ,nil  +fi,i,nil,nil i=oi-ext = T.queryt (t)
  local asize, hsize, ff =ytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first eleinsert(l[mp], next)   ze, ffS = T.queryze-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
        rt(ff <= next        assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          ert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- lhead
        l[mp] = {mp}   -- first element
  whA=2e-309+1e-309       assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] ==wmp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
   assert(l[i] == nil and val==nil and next==nil)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == va                 l)
      locaf ]]i[[ff \]]i[[[f ]]i[[ \]]i[[[\]]i[[[f ]]i[[ff ]]i[[Y]i[[f 1][ ]]i[[ff \]]i[[[f ]]i[[]]i[[ f \]]i[[]]i[[ff $]]i[[ff \]]i[[f ]]i[[f 0][ ]]i[[ff \]]i[[[f2 ]]i[[ \]]i[[]]i[[ff \]]i[[[f ]]i[[ff \]]i[[ ]]m[[f 0    [[f ]]i[[]]i[        [[]]i[[ff $]]i[[ff \]]i[[f ]]i[[f 0][ ]]i[[ff@\]]i[[[f ]]i[[ \]]i[[]]i[[ff \]]i[[[f ]]i[[ [f ]i[[ff \]][[   [[f ]]i[[     ]]i[[ \]]i[[[f ]]i[[     [f   ]]i[