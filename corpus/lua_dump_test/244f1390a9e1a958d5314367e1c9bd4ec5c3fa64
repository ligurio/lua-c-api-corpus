
do --new
  return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x [1] ==1)

function f(i)
  while 1 do
    if i>0 then i=i-1;    else return; end;
   local a, b, c = g() return niL or f() end
a,b = g()
  while 1 do


function f(i)
  while 1 do
 function g(i)
  while 1 do
    if i>0 then i=i-1
     return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  neturn; end;
assert(g() == nil)
function g() return            }
  
print "tesping syntax"

       a, b, c = f();re>= 1 , } or { 9 };
]]
f = strin


do
if nil then a=1; elseassert(g() == nil)
functio bl)
enert(g()                                                                         == nil)
function g(               == nil)
f                       k            test unction fg() return niL or f()
a,b = g()
assd b==nn 