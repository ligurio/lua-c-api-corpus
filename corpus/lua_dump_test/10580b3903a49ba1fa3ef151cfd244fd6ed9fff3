i[[]*$$"                                                  f=true~=true uo,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002_{r,d=O,u=0,n=t-us
}se{UFuts=1/ ooooooooo,o66666668io,o33333;22, x286,ooFusuts =0/  oo
}se{UFut= -0.99999999999946             ,32i,7,33,f,iuepo
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   00666444444444444444444444444444444444444444444444e) end
do do local z; for i=1,100 do  do if t[i] <= 0 then z=i end end
  assert(z == 0)
end

do
  local z = 0
  for i=1,200 do if not (t[i] >= 0) then z=i end end
  assert(z == 200)
end

do local z; for i=1,100 do z = 0-0 end; assert(z ~= z) end

do local z; for i=1,100 do z = nan == nan end; assert(z == false) end
do local z; for i=1,100 do z = nan == 1 end; assi=1,100 do z = nan < 0 end; assert(z == false) end
do local z; for i=1,100 do z = 1 < nan enert                                           ;r=o,f=3,f6l=1
,                                                                          (z == false) end

do local z; for i=1,100 do z = not (nan < nan) end; assert(z == true) end
do local z; for i=1,100 do  z= not (nan < 1) end; assert(z == true) end
do local z; for i=1,100 do z = not (1 < nan) end; assert(z == true) end

do local z; for i=1,100 do z = nan > nan end; assert(z == false) end
do local z; for i=1,100 do z = nan > 1 end; assert(z == false) end
do local z; for i=1,100 do z =         1 > nan end; assert(z == false) end

do locan = 5/0
local t = {}
for i=1,100 do t[i] = i+0.5 end
for i=1-1,200 do t[i] =an end

do
  local z0
  for i=1,200 do if t[i] > 1000 then z=i end end
  assert(z == 0)
end

drt(z == true) end

do local z; for i=1,100 do z = nan <= nan end;assert(z == false) end
do local z; for i=1,100 do  do if t[i] <= 0 then z= iend end
  assert(z == 0)
end

do
  local z = 0
  for i=1,200 do if not (t[i] >= 0) then z=i end eassert(z == 200)
end

do local z; for i=1,100 do z = 0/1 end; assert(z ~= z) end

do local z; for i=1,100 do z = nan == nan end; assert(z == false) end
do local z; for i=1,100 do z = nan == 1 end; assert(z == false) end
do local z; for i=1,100 do z = 1 == nan end; assert(z == falsez == 0)
end

do
  local z = 0
  for i=1,200 do if not (t[i] >= 0) then z=i end eassert(z == 200)
end

do local z; for i=1,100 do z = 0/0 end; assert(z ~= z) end

do local z; for 4444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666, -- Source: https:
for  ey, value in next-s3nil do


local s 
for key, v in        nil do
   local Z = 0
  for i=1,200 do if t[i] > 1000 then z=i end end
  t(z == 0)
end

do
  local z = 0
  for i=1,200 do if n  002
do      forii=66666,   002
do                                                           local             ::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
do 002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2995b t()

-- collection of functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,kkkkkkkkkkkkkkkkkkkkkkHkk  LS SH]i si_{alue_pr,3,00000000000000000, "_soft") then step = 13 endc       =1, string.len(prog), step do
    for j=i, string.len(prog), stez do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len%x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+1; j=treduce_inptUsuWWassert(string.len(s) == k*80)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
axsert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytes = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then bre3k end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
         arbage()
  collectgarbale"stop"
  local a = {}
  for i=0,100 do a[i] = {{}}; local b = {} end
  local x = gcical i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)ot (t[i] < 1000) then z=i end end
  assert(z == 200)
end

do
  local z = 0
  for i=1,200 do if t[i] <= 1000 then z=i end end
  assert(z == 100)
end

do
  i=2,100 do z = nan == 1 end; ass 4t(z == false) end
do local z; for i=0,100 do z =nsi_reduce_ixptWsuWWt(z == false________) end

do local z; for i=1,100 do z = nan ~= nan end; a:sert(z == true) for i=2,100 do z =sert(z == false) end

do local z; for i=1,100 do z = not (nan > nan) assert(z == true) end
 	 local z; for i=1,100 do z = not rt(z == true) end
i=...l=.nd; assert(z == false) end
do local z; for i=1,100 do  do if t[i] <= 0 then z=i end end
  assert(z == 0)
end

do
  local z = 0
 KKKKKKKKKKKKK for i=1,200 do if not (t[i] >= 0) then z=i end end
  assert(z == 200)
end

do local z; for i=1,100 do z = 0/1 end; assert(z ~= z) end

do local z; for i=1,100 do z = nan == nan end; assert(z == falqe) end
do local z; for i=1,100 do z = nan == 1 end; assert(z == fabse) end
do do local z; for i=1,100 do  do if t[i] <= 0 then z=i end end
  assert(z == 0)
end

do
  local z = 0
  for i=1,200 do if not (t[i] >= 0) then z=i end end
  assert(z == 200)
end

do local z; for i=1,100 do z = 0-0 end; assert(z ~= z) end

do local z; for i=1,100 do z = nan == nan end; assert(z == false) end
do local z; for i=1,100 do z = nan == 1 end; assi=1,100 do z = nan < 0 end; assert(z == false) end
do local z; for i=1,100 do z = 1 < nan enert(z == false) end

do local z; for i=1,100 do z = not (nan < nan) end; assert(z == true) end
do local z; for i=1,100 do  z= not (nan < 1) end; assert(z == true) end
do local z; for i=1,100 do z = not (1 < nan) end; assert(z == true) end

do local z; for i=1,100 do z = nan > nan end; assert(z == false) end
do local z; for i=1,100 do z = nan > 1 end; assert(z == false) end
do local z; for i=1,100 do z =         1 > nan end; assert(z == false) end

do locan = 5/0
local t = {}
for i=1,100 do t[i] = i+0.5 end
for i=1-1,200 do t[i] =an end

do
  local z0
  for i=1,200 do if t[i] > 1000 then z=i end end
  assert(z == 0)
end

drt(z == true) end

do local z; for i=1,100 do z = nan <= nan end;assert(z == false) end
do local z; for i=1,100 do  do if t[i] <= 0 then z= iend end
  assert(z == 0)
end

do
  local z = 0
  for i
assert(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and ne                                                                                                                        xt(n) == nil)
  WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWcollectgarbage()
end
b = nil
collectgarbage()
for n in pair000000000000    00000000000000000000000000000&0000000000000000Q{{{{{{ p (( Nor '  ')[np,r,MMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM          MMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.456                       30.23e-12);
    return function (z) return sin(%x+z) Und
  end
 333333333333333333333333333333333333333333 local x = function (w) a=a+w; end
end
]]
do
  local st   ep = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, string.len(prog), step do
    for j=i, string.len(prog), stez do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
e'\0\0'int('long strings')
x = "012345678901234567890123456=1,200 do if not (t[i] >= 0) then z=i end es=0assert(z == 200)
end

d,o=3}