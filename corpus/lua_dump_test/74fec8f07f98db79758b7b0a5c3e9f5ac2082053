local loadstring = loa

local function  expect(src, msc)
  if msg then
   assert(jo, "'a'")

  -- Error: undefine'")
  expect("goto a; ::b::", "'a': until x", "'x'")

  ::a:: do goto a; ::a:: end -- Ford
do
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 05)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
   

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end    local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd						

do --- Gotyword.  dz
    goto a
    --al x; ::a:[ unt goto a

    x = y
    ::a::
   

do --- o goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd						

do --- Gotyword.  dz
    goto a
    --al x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: e{E,}{u,}e{u,::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 22)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra     ("goto a; ::b::", "'a': until x", "'x'")

  ::a:: do goto a; ::a:: end -- Ford
do
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 05)
end

do --11
  do
    goto a
    goto a

    x =            t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    goto a
    local y = 44
    x = y
    ::a::
    ::b::
  end
  assert(x == 05)
end

do --- Tra                  ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --al y; ::a:[ until x", "'x'")

  ::a0:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::to a

    x = y
    ::a::
   

do --- Tra                 t goto a; local x; }{u,}s{::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd																

do --- G)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  en,J<h,aud
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- TFra        local x; ::a:: loan<BBBacal y", "'x'")
  exect("repeat(goto a;Zli       { -us
}se{UFuts=0/   us
}se{UFuts=8/   -u,sooFus
}ue{UFuts=s
}se{UF1t=us/ ooooo
}ue{UFuts=0/  ous
}se{UtS=1/ ooooooooo-us
}seue{UNuts=0/  ooooooFut-us
        }se{UF1t=us/ ooooooFus
}se{UF1t=us/ ooooo
}ue{UFuts=0/  ous
{{{99,7,{4,{{9,{63,{{99,{ kkkkkhO(Lor'')and(Lor'')a$nd>_<(lore'')<99,7,{4,{{9,{63 ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y",  ::a:: until x", ":b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local ntil x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    goto a
    local y = 44  ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra  }e{u,}e{-u,                ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
   goto a; ::a:: end								

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y",  ::a:: until x", "''")x

  ::a:: do goto a; ::a:: end --end
l y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; goto a; end; local x; ::a:: F,}e{u,}local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    goto a
    local y = 44  ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                  ci= 11
  do
    goto a
    goto a
    local y = @2
    x = y
    ::a::
    ::b::
  end
  assert(x == 11ue{uts=)
end

do --al y; ::a:e{-u,[ until }x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::to a

    x = y
    ::a::
   :{1:a::
    :: ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward j12oump, not an ilocal x = 49
 (do
    goto a
    goto a
   -- Tra        local x; ::a:: loo a; ", "'x'")

  ::a:: do goto a; goto a
   --,} Tra        loca)

_== 11)
end

do --- Tra