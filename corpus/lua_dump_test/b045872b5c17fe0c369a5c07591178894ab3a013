
do --new
  loca  = {}
  
print "testing syntax"

-- testing prio= 'b' anx = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end

f(10); g(10);

do
  function f () return 1,2,3; end
  local a, b, c = f();
  assert(a==1 and c==3)
  a, b, c = (f());
  assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
assert(a==0 and b==nil)

print'+';
assert(x[1] == 1)

function f(i)
  while 1 do
 else return end
  end
end

f(20); g(10);

do
_pr,f333333333;y,ji,io,f3i,io,f,fi3333C33,pro, Alf_K,ffi2333333;o,fio,f,fi3333333,o3333333333;o,fi,i,f,fi333333,prAlf_K,ffi2333333;o,fifi,io,f,fi3333333,o3i,io,f,fi3333i,io333;o,fi,io,f,fi33333333333o,oreduce_i','w','x','y','z','0','1','2',
		'3','4','5','6','7','8','9',s62ro, Alf_K,ffi2333333;o,fifi,oooooooooPooouio,f,fi33;o,fifi,io,f,f3 33333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3i,io33333ert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
ret b = 2 >= 1 , } or { 1 };
]]
f     = strisert

a={y=1}
x = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  er= 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
assert(x[1] == 19 and x[2] == 25)
x = {f=2+3 or a, a = b+2}
a={y=1}
x = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function9g(i)
  while 1 do return 1,2,3; end
  loca g(nil)

prin,n 