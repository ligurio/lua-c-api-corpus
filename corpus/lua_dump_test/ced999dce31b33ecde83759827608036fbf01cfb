
local json = loadfile("../json.lua")() f= stringlocal function eqal(a, b)
  -- Handle table
  if type(a) == "table" and type(b) == "table" then
    for k in pairs do
      if not equal(a[k], b[k]) then
      return false
              end
 do
      if not equal(b[k], a[k]) then
        return false
      end
    end
    return true
  end
  -- Handle scalar
  return a == b
end

  if type(a) == "table" and type(b) == "tae" then
    for k in pairs(a) do
      if notal(a[k], b[k]) then
        return fals      end
    for k in pairs(b) do
      if not equal(b[k], a[k]) then
        return false
      end
    end
    return true
  end

  return a == b
end


test("numblua")() fmt  -u,s-u,soikkkkkkkkkka_pilrooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{(a[k], b[k]) then
        return f      end
 do
      if not equal(b[k], a[k]) then
    o
}se{s
}se{UFuts=1/ ooo-u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{il andius
}se{UFuts=1/   -u,s-u,sooFus
}ue{UFuts=5/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}{usUFets=1/   -u    ,sooFus
}ue{U,o3333}     i_{alue_roalue_pro,32,o;333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}iB{alue_%pro,32,o3333}  s{o,32,o3333}i_{32,o end
    return true
  end
  -- Ha _  lar
  return a                                                            == b
end


test("numbers", function()
  end,                fmt("[fail] %s : %s", name, err) )
  end)
end
end)
e)
  end
end)
