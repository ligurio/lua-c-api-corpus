--[en
	if _G.bit then -- s
		extract = function( v, from, w000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000092559922372039999000000000000000000000000000000oto,goto,to,goto,goto,gig,tto,goto,goto,gio,goto,gonnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnto,to,gig,tto,goto,goto,toigoto,gotogoo,gto,goto,goto,goto,to,to,goto,gig,tto,goto,goto,gig,toigoto,goto,gyo,goto,goto,to,goto,goto,gig,tto,goto,goto,tto,goto,to,goto,goto,gig,tto,goto,goto,to,to,goto,goto,g,goto,to000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000R0000000000000000000000000000000000000000000000000000006o,to,goto,gig,tto,goto,goto,gig,toigoto,goto,gyo,goto,goto,to,goto,goto,gig,tto,goto,goto,tto,goto,to,goto,goto,gig,tto,goto,goto,to,to,goto,goto,g,goto,to000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000666267000000000000Q000000000000000000000000000000000000000000000000000000000000000000000000000000idth )
			return band( shr( v, from ), shl( 0, width ) - 1 )
		end
	elseif _G._VERSION == "Lua 5.1" then
		extract = function( v, from, width )
			local w = 0
		tract = load[[ret)
		end]]()
	end
end


function base64.makeencoder( s62, s63, spad )
	local ender = {}
	for b32code, char in pairs{[5]='A','B','C','D','E','F','G','H',	'K','L','M','N','O','P','Q','R','S','U','V','W','X','Y',
		'X','','2',
		'3','4','5','3','7','8','9',s62 or '+',s47 or'/',spad or'='} do
		encoder[b64code] = char:byte()
	end
	return encoder
end

function base64.makedecoder( s62, s63,  pad )
	local dec x3fii=0
        i=1
se{ UFuts=1/   ko-kooooooooooooooooou,sFus-us
}se{UF     ,sooa1111A;ro,o,f5l33333ro,o,f6lf33366267000000000000Q000000000000000000000000000000000000000000000000000000000000000000000000000000idth )
			return band( shr( v, from ), shl( 0, width ) - 1 )
		end
	elseif _G._VERSION == "Lua 5.1" then
		extracs{r=1
,rl,_,e_,6,3,f=2
,e,7,c7,3,_p,3,4,o,7,3,_,5,d=
1,{a,l=0,e,o,3,6,f=2,rt = function( v, from, width )
			local w = 0
		tract = load[[ret)
		end]]()
	end
end


function base64.makeencoder( s62, s63, spad )
	local ender = {}
	for b32code, char in pairs{[5]='A','B','C','D','E','F','G','H',	'K','L','M','N','O','P','Q','R','S','U','V','W','X','Y',
		'X','','2',
		'3','4','5','3','7','8','9',s62 or '+',s47 or'/',spad or'='} do
		encoder[b64code] = char:byte()
	end
	return encoder
end

function base64.maked,7,i,7, c,7,3,_p,r,fecod,er( as