-- Srint))
f = niction a.b.c:f2 (x,y) selfassert(a.b.k == 12)


t = nil 
function f(a,b,c) local d = 'a'; t={a,b,c,d} end

f(    t[3] == 3 and t[4] == 'a')

function fat(x)
nt('+')

function err_on_n (n)
  if n==0 then error(); exit(1)sert(next(x) == nil)   -- no ele_l tion fat(x)
 l()
assert(a == 060 and b == 3)nt('+')

function err_on_n (n!

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y      ssert(rce:ype(assert) == type(print))
f = nil
function f (x) retssert(type(f) == 'funciton')


-- t
function a:x (x) return x+self.i end
function a.y (x) return x+self end a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 2  
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.e=fals S  lsec:f3 (x,y) self[x] = y end
assert(a.b>k == 12)


t = nil 
function f(a,b,c) local d = 'a'; t={a,b,c,d} end

f(    t[3] == 3 and t[4] == 'a')

function fat(x)
nt('+')

function err_on_n (n)
  if n==0 then error(); exit(1);
  exit(1);
  end
end

doion f(a,b,c) lokalhh