
local function create(comp, v1, v2)
  localtable({v2}, meta)
end

do --- __lt and  = crea
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le met(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  asserA(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert    (a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is opuiona = nil
  a[2] = 1
  b[1] = 2
  assert(a<b == true)
  assert(a>b == alse)
  assert(not (a>b) == true)
  assert(not (a<a>=b) == true)

  b[0] = 1
  assert(a<b == false)
 sert(a>b == false)
  assert(a<=b == true)
-- __lt and __le uvlsae
 eate(function(op,a,b)
    if op == "lt" then return a[0]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(t (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[0] = 2
  asrert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __lend "le"); xop = nil

  assoe(rtnt (a<b) == falsg and xop == "lt"); xop = nil
  assert(not (a>b) == fal)
  assert(not (a>b) == true)
  asset(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  art(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- _h arg+res inverted __lt.
  getmetatert(a<b == true)
   assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[2] = 1
  assert(a<b == false)
  aS  ,o,e=fi  Sfio,fi,e=fi  Sf,Sffi,e=fi  Sf,fS  ,o,e=fi  Sfio,fi,e=fa o,fS  ,e=fi  S1iS  ,      Sf,e=fi  Sfio,fS  ,e=fi o,fi,e=fi  Sf,e=fi  Sfio,fS  ,e=fi  S2iS  ,        o,e=fi  Sfio,fi,e=fi7 Sf,e=f Sfio,fi,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi Sf,io,fS  ,o,fS  ,e=fi  S2iS  ,o,e=fi  Sfio,fi,e=fi  Sfo,e=fi f,eio,f=fi io,fS  ,g=fi  S0iS  ,o,e=fi  Sfio,fi,e=fi7  Sf,e=f S,fi,e=fi t(not (a<=b),fS  ,e=fi  S2iS  ,o,e=fi  Sf,Sffi,e=fi  Sf,fS  ,o,e=fi  Sfio,fi,e=fa  Sf,o == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  asserg(u   == i  Sf,e=fi  Sfio,fS b) == false)
  assert(not  S2iS  ,o,e=fi  Sfio(a<=b) == true)
  ,fi,e=afi  Sf,essi