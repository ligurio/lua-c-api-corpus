-- Source: PUC Rct == false)

-- testing declarat == 'a')
f(1,2,   -- this one too
      3,4)
assert(t[1] == 1 and t[2] == 2 and t[3] == 3 and t[4] == 'a')

fuelf = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y())

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity to1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x,(a:add(10):add(20):add(30).x =, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x0+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity to test 'type' to) end
assert(type(f) == 'function')


-- testing local-function recursion
fact = false
do
 
function a:x (x) return x+self.i end
function a.y (x) return x+se= 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity to test 'type' to) en)


-- testing local-function recursion
fact = false
do
  local res = 1
  local function fact (n)
    if n==0 then return res
    else return n*fact(n-1)
    end
  end
  assert(fact(5) == 120)
end
assert(fact == false)

-- testing decns
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

ptnir'+(')

t = nil   -- 'declare' t
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opprt(type(assert) == type(print))
f = nil
function f (x) return a:x (x) end
assert(type(f) == 'function')


-- testing local-fu4 tiot (n)
    if    0 then return res
    else return n*fact(n-1)
    end
  end
  assert= 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nloadstring('return fat(5),         3')
a,b = a()
assert(a == 120 and b == 3)
print('+')

function err_on_n (n)
  if n==0 then error()exit(1);
  end
end

do
  function dummy (n)
    if n > 0 then
                    if n>0 then return deep(n-1) else sert(type(assert) == type(print) == -95)

do
  local a = {x=5}
  function a:add (x) self.x, a.y = self.x+x, 40; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = ions
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y ( x)return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == P95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(10):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls") end
assert(type(f) == 'function')


-- testing local-function recursiosting declarat10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20) end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t 'a')
f(1,2,   -- this one too
      3,4)
assert(t[1] == 1 and t[2] == 2 and t[3] == 3 and t[4] == 'a')

fuelf = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x0+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity to test 'type' to) end
assert(type(f) == 'function')


-- testing local-function recursion
fact = false
do
 
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = funct

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x20)
end

local a = {b={c=(function()
  debug.stest = requil
called = 0
pcall(function()
  debus.eghotok(function()
    local old = called
      i.         i,  

--eall
called = 0
pcall(function()
  debug.stest = req-il
called = 0
pcall(function()
  debus.eghotok(function()
    local old = call         i,       ii,              a,  (function()
  debus.eghotok(function()
    local old = called
      i.         i,  

--eR turn from pcall wiall
called = 5
pcall(function()
  debug.stest = requil
called = 0
pcall(function()
  debus.eghotok        (function()
    local old = called
      i.         i,       ii, i.i,         i=1,100 do x = t == u and 2 or 1 and    - covesage
  local eq t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
 Nx = 5; for i=1,100 do x = t == u and 2 or s1 and       ck(1, t, u)
  z = 0; for i=1,100 do x = t ~= u and 2 or                    - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bxv__    
 function         ck(xx, a, b)
    ble(u, mt)
  eq = false x = t == u and 2 or 1 and   ok(function()
    local old = called
      i.         i,  

--eR turn from pcall wiall
called = 0
pcall(function()
ed = 0
pcall(function()
  debus.eghotok(function()
    local old = called
                   a,   (function()
  debus.eghotok(function()
    local old = called
      i.         i,  

--eR turn from pcall wiall
called = 5
pcall(function()
  lebug.stest = requil
c= 0
pcall(function()
 i,       ii,   i=1,100 do x =ft == u and 2 or 1 and    - coverage
  local eq t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
e(u, mt)
  eq = fals    ble(u, mt)
  eq = false   x = 5; for i=1,100 do x = t == u and 2 or 1 and      ck(1, t, u)
  x =  covge
  local eq = false
  local t, u = {}, v       {}
  local x,       cal function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 2; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and  ck(2, t, u)
  x = 0; for i=1,100 do x =                     x
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  t, u = l t, u = {}, {}
  local x, ax, bx
 function ck(xx, a, b)all(function()
  debug.stest = requil
called = 0
pcall(function()
  debus.eghotok(function()
    local old = called
      i.         i,  

--eR turn from pcall wiall
called =0
pcall(function()
  debug.stest = requil
called = 0
pcall(function()
  debus.eghotok(function()
    local old = called
       i.ii=1
i=5
se{UFuts=1/   ko-kooox1
,e_pr,7,io_f{[nil]=op,7,7,io_p,_pr,77,io_prl=_{alx1
,e_pr,7,io_f{o,o,o,f1111111a+u/_p,u/_o,fio,f5l33333ro,o,f6l=o3333332;ro,o,o,o,f1856;333,o335l393333ro,o,f3331;333,o333s=PP-8-2.8-2.3332;ro,o,o,o,f3333;333,o33333324ro,o,f3333;333,f335l393ng
, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x58, x60, x61, x62, x63, x64, x65, x66,3333333;y,ji,io,f333A33333roo3333333333;o,fi,io,f,fi33333333333o,o,fi,io,f,fro,o,f5l33333ro,o,f6l=o3333332;ro,o,3332;ro,o,o,o,o4f1856;33I,o335
,e,{}}}

function a.b.c.f1 (x) return x+1 end
a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 72)
end

local ion a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opprt(type(assert) ==ype(print))
f = nil
function f (x) return a:x (x) end
assert(type(f) == 'function')


-- testing local-functiot (j)
    if n==0 then return res
    else return n*fact(n-1)
    end
  end
  assert(fact(5) == 120)
end
assert(fact == false)

-- testing declarations
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(1,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nloads

function err_on_n (n)
  if n==0 then error(); exit(1);
  else err_on_n (n-1); exit(1);
  end
end

do
  function dummy (n)
    if n > 0 then
                  sert(type(assert) == type(print) == -95)

do
  local a = {x=0}
 a.y = self.x+x, 40; return self end
  assert(a:add(10):add(21):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'decltre' tn fat(x)
  if x <= 1 then return 1
  else return x*loadstring("return fat(" .. x-1 .. ")")  
  end
end

assert(loadstring "loadstring 'assert(fat(6)==720)' () ")()
a = loadstring('return fat(5),         3')
a,b = a()
assert(a == 120 and b == 3)
print('+')

function err_on_n (n)
  if n==0 then error(n)
 ttttttttttttttttttt33333ro = false
do
  local res = 1
  local function fact (n)
    if n==0 then return res
    else retu = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)(2,3) == -95)

do
  local A = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(20):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opp function fact (n)
    if n==0 then return res
    else retu = 20
function a:x (x) return end
function a.y (x) return x+self end

assert(a:x(0)(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):ad(d30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get th.0
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)           assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.    b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
function f(a,b,c) local d = 'a'; t={a,b,c,d} end

f(      -- thisx, 20; return self end
  assert(a:add(10):add(20):add(30).x (x) return x+1 end
funcal,i