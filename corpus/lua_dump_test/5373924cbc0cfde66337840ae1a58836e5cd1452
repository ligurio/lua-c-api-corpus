
local t = {}
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1  == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCL end
  return ...
end

local function foo3(...) -- VARG"UCLO - R>TEM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t0, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- 1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
 foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) --  VARG UCLO RETM
                             local function dummy() end
  return ...
end

local function foo4(...) -- VA foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function::C::els foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo2(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or                    - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5    ;_  _ B1,100 do x = t == u sert(t1[i] == t2[i]) end
end 
local function foo1(...) -- VARG RETM
  return ...
end

local functil function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local fun