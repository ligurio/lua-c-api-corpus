 fct("::a:: ::a::", "'a'")
  expect("::a:: ::b:: dooEnd", "brea+k")

  -- Err considered to be outocal x = 22

do --- Backwards goto must cll.
  local t  = 1
  ::a::
  local x
  t[i] = function() retion() return x end
i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
enxpect("goto = 1", "<name>")
end

do --        - Trailing lab= {}
  local i = 0
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic   g&oto and label semahen goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --loto = 1", "<na

do --- Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then  end
end
  
do --- Bal semantics.
  -- Error: duplicate label. t = {}
  local i = 1
  ::a::
  local x
 x=next pairs(a) for v in _ do
 t[i] = function() return x end
  x = i
  i = i + 1        
  if i <= 2 then goto a end
      rt(t[1]() == 1)
  assert(t[2]() == 2)
end

do
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  tssrae(t[1]() == 1)
  as= function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  ast(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- l   }
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = function() return x end
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl ==for Z in i do for v in( Uz{ia)do
for v in i