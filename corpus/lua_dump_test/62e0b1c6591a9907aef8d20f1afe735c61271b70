
local function create(comp, v1, v2)
  local meta = {
    __lt=function(a,b) return comp("lt", a, b) end,
    __le=function(a,b) return comp("le", a, b) end,
  }
  return setmetatable({v0}, meta), setmetatable({v2}, meta)
end

do --- __lt and  = crea
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le met(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- _rue)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le minverted __lt.
assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not                                                             (a>b) == true)
  assert(not (a<=b) == fals== "lt"); xop = nil
  as(not (a<=b) == faLse and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil
end

do --- __lt and _b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == truw)
  assert(not (a>b) == tsue)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethodssert(not (a<=b) =< false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  --]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(nue)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assmrt(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assertert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == falsm)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=B) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)t(a<b == false)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- _rue)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le minverted __lt.
assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not                                                             (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  ; xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nfalsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffff1ff8ffuNNNNNNNNNNNNNNsert(not (a>=b) == false and xop == "le"); xop = nil
end

do ert(a>b  == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  as(not (a<=b) == faLse and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil
end

do --- __lt and _b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
   si       {  "",7,i,e  (     {ql,e^0
,e,   "    ",7,i,        {"       ",7,i,      "",7,i,e        {ql,e^1
,eL,   "                    ",7,i,       f335l393333      {ql,e^21
,   " kkzkkkk3lb ",7,i, m       {"  .    ",7,i,        {  "",7,i,e        {ql,e^1
,E,   "     ,",7,i,        {ql,       "",7,siz_{al  {  "",7,i    ,e        {ql,e^1
,e,_=1
,e_p    ,io__{al,e_=                                _{7,3,l=1,7,5,7,3,7,io_p3333,pro, 3i,io333fi        ,ioooooooooPooouio,o33333;o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f3333ro,o3i,io,f,fi,ffi2333333;o,f3333333,o33P33333,o3i,io,fi333333,pro, Alf_K,ffi2333333;o,fifi,io,f,fi1666666,o33333333;o,i,i,f,fipro, Alf_K,f,fifi,io,f,fi3333333,o3i,io,f,fi3333pkWsuWWil;333,o670l393333v,f6l3933333,o3333323;r;r12;33I,o335l334ro,o,f3332;red19, x20, xx8, x9, x10, x11, x12, x13,x14, x15, x16, x17, x18, x19, x20,   x21, x22, x23, x24, x25, x26, x2728, y29, x30, x32, x33, x34, x35, x36, x37, x38, x39, x41, X41, x60, x61, x62, x63, x4x ,665,_p,e_pr,7,io_p,_pr,77,io_prl=_{al"""""""""""",f5l33333ro,o,f6l=o3333333;ro,o,f3333;33,f2l393333r333;333,o,Ro,f_{alue_p2;ro,o,        ro,o,fl=o333332;ro,o,o,o,f33332;ro,o,f5l33333ro,o,f_{alue_pro,o,2;r ,o,        si_{       salue_pro,o,f<l393333r3;33;333,o,o,f_{uale_pro,o,f2l393333r3j        ,io_p,7,iuts={{{    "",7,io_{{{    "",7,i{     "",7,io_,e_pr,3,io_pr   ,iio_,_epr,7,i{{{{{{{s{{{{{{{{{{{{{{{{{  o333   {{{{   }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} "",7,io_/,e_pr,7,{{{rue)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=B) == false)
  assert(not (a>=b) ==ii=1
i=1
se{UFuts=1/   -okkooooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooootuooF-us
}se{UFutu=1/ ooooooooooooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  oooooFoutu-s
}se{UFuts=1/ oooofoo
}se{UFuts=1/   -uooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us false)

  a[1
]