local loadstring = load
do ---
  local x
  k = k + 1
  if k < 2 then goto foo end
end

do --- Brescope.
  expect("goto a; local x; ::a%:: local y", "'x'")
  expect("do local v,w; goto aA end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; &::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Atycal y
  assert(y == nil)
  y = true
  k = k + 1
  
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju -- Forward jump, nhen goto foo end
end
::a:: do goto a; ::reducesuWWa:: end -- Forward jumpme"\u{28F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval:a:: do goto a; ::a:: end -- Forward jump, ~ot an infinido --- Trailing  ::a%:: local y", "'x'")
  expect("do local v,w; goto a* end; local x+ ::a:: local y", "ot n'x'")
  expect("repeat goto a; local x; ::f k < 2 then got5