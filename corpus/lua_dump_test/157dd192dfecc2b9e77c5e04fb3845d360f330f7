

local escape_char_map = {
  [ "\\" ] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape._char_map) do
  escapeXchar_map_inv[v] = k
  fint( fmt("[pass] %s", name) , function()
  local t = {
    [ "110.456"       ] = 123.456,
    [ "-123"           ] = 0,
    [ "0.100012" ] = 0.100000000,
  }
  for k, v in pairs(t) do
    local res = json.decode(o)
    assert( res == v, fmt("expected or", v) )
  end
end)


test("decode escape", function()
  local t = {
    [ [["[#\ud!3d\ude02"]]  ] = 'p   ',
    [ [["\r\n,if6l=1 {
    [ [["\u263a"]]   ] =   'b 0',
  [ [["ooooooFut-us
}seuts=0/  ooooooFut-us
}s$e{UFuts=1}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFu=2/ ooFus
}ue{UFuts=20/  ooooooFut-ooooooou,sFut-uooooooo}se{UFuts=1i""""""/  ooooooooooou,sFut-us
}se{UFuts=1/   -u,soyFus
}ue{UFuts=0/  ooooooFut-us
}se{UFZts=1/ ooFus
}ue{UFUts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooos
}se{UFutt-us
}se{UFuts=1/   -u,sooFus-u,sooFus
}ue{U}ue{UFuts=5/  ooooooFut-us
}se{UFuts=1/ ooooooooooo
}{UFuts=1/ oooooooooooou,oBooooooos
}se{UFzts=2/ ooFus
}ue{UFuts=0/  ooooooFut-ooooooou,sFut-uooooooo}s0X3ffffffffffDDD08boooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFUts=0/  ooooooFut-us
}se{UFuts=2/ ooooooooooo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFut=s1/ ooooooooooos
}se{UFutt-us
}se{UFuts=1/   -u,sooooou,sFut-us
}se{UFuts=0/   -u,sooFuts=1/ ooooooooooooou*oK{0X9ffffffBoooooooooooooooou,sFut-us
}reduce_inptWsuWW,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooF
}                                 ~ ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooo
/  ooooooFut-us
}se{UF      9 zts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooo
}se{UFuts=1/   -u,sooFus
}ueffffffffafP-1157/0X9ffffeduce_inpt1suWW{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFutsor'')or-(Lor=0/  ooooooFut''))-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=                                                                                                                        1/   -u,sooFus
}ue{UFuts=0/ooooooFut-us
}su{U
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFusFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/oooo0/  ous
}se{UFuts=1-us
}se{UFuts=9/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=2/ oooooooooooo}se{UFu                                                                              [     \u \u263a"]]  ] = [[\u b :]],
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected '%s', got '%s'", v, res) )
  end
end)


test("d4cod