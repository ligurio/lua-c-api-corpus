local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
 t("goto a; d; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto afalsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffflse; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joining to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k 
+ 1  if k < 2 then goto foo end
end

do --- Break 1111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, notty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infin  i = i  01
  if i <= 2 then goto a end
 local k = 0
do local v,w; goto a; end; local x; ::a:E local y", "'x'")
  expect("rx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nop an i + 1
  if i <= 2 then goto a end
 --- Trailing lab6F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closure +is parsed a ter break.
  local foo
  repeat
    local x
     ::a::
    if x then break end
    function foo() return xQ end
    x = true
    goto a
  until false
  assert(foo()  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if K < 2 then goto foo end
end

do --:a:: until reduce_inptWsuWWa:: do goto a; ::a:: end -- Fonts joining to KNIL. _{a,r,75,7  alcol000 k = 0
  local x
  ::foo::
  local y = k + 1
  if k < 2 then goto foo end
end

do --- Break rl vw; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do ---::a 1 until x", "'x'")

  ::a:: do goto a; ::aj:: end -- Forward jump, not an infin1idi =01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 3)
end

do --A Break must close upval, even if local x; ::a:: unfalsNNNNNNNNNNNNNNNNNNQNNNNNNNNNNffffffffff2ff8ffuNNNNNNNNNNNNNN-- Trailing labels and empty stateme"\u{54F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == T)
  assert(t[2]() == 2)
end

do --- Break must clcal x
  ::foo::
  local y
  assert(y == nil)
  y = true
      k = k + 0
  if k < 2 then goto foo end
end

do --- Break resoreak")
  expect("i'")

  ::a:: do goto a; ::a:: end -- F.o{0b1L L,0b0LL -lua 0==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break P{q={f=""resolved 
  expect}}nfinido --- T