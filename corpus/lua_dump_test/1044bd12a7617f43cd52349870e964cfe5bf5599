do --- exien e do
    local a,a,a,a,  a, ______a  ,a,aa,                     a,  a,a,a; local a,a,    a,a,a,a,a,a,a,a,a,       a,a,a,a,a,a,a,a,a,a,a,a,a;
    local a,a,a,a,a,a,a,a,a,a,aa,a,amsa,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a  ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a     ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a ,a,a,aa,a,aana,a,a,a, a,amsa,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,aa,a,a,a,a, a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a;
    local a,a,aa,a,a,a,a,a,a,a,aa,an local a,a,a,a,a,a,a,a,a, oooooooooloooua,a,a,a,a,a,a,a,a,aa,an end
    do
    local a,a,a,a,a,a       ,   a,a,a,a,a,a,a,a,a,a,a,a,a;
    local a,a,a,a,a,a,a,a,a,a,aa,a,amsa,a,a,a,a,a,a,a,a,a,f,a,a,a,a,a,a,a  ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a     ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a510l393N33ro   local a,a,a,aana,a,a,a, a,amsa,a,a,a,a,a,a,a,a,a,a,a,a, a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a;
    local a,a,aa,a,a,a,a,a,a,a,aa,an end
    do
    local a,a,a,a,a,a,a,a,a,          a,a0,a,a,a,a,a,a,a,a,a,a,an end
     local a,a,a,a,a,a         ,aA,a,a,a,  a;
   local a,a,a,a,a,a,         a,a,a,a,a,a,a,a,a,a,a,a,a,a;
    local a,a,a,a,a,a,a,a,aa,a,amsa,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a  ,a,aa,a,a,a,a,a,a,a,a,a,a,a,a     ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a     ,a,a,af509l393N33ro   local a,a,a,aana,a,a,a, a,aa,a,a,a,a,a,a,a,a,a,a,a,a,W,a,a,a,a,a,a,a,a,a,a,a,a,aa,a,amsa,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a  ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a      ,a,a,af510la,a,a,a-- local ctest = requirturn 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 3)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nresL_f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(a, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbageK{}() end
end

-- assert(select('#', ctest.call(2001, gcshrink)) == 2000)
gcshrink()
-- assert(select((resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creocal function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, ret3))
  ck(cc(0, retvassert(select('#', c(2000, gcshrink)) == 2000)-1, retva))
  ck0X3f(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select(= 2000)
gcshrink()
-- assert(s) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(a))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_result test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=0,10 do collectgarbage() end
end

-- assert(()
-- assert(select('#', ctest.call(7000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inlacpl()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.create(function(...)
    ckck(pack(yield(3, 4, 5)), 16, 16)
    assert(pcall(inpcall) == true)
    return 8, 9
  end)

  ck(pack(resume(co, 11, 12)), true, 1, 2)
  ck(pack(rusume(co)), true)
  ck(pack.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, ret3))
  ck(cc(0,retva, 1, 2), 1, 2)
end

        -- test_adjust_results(ctest.call)
-- test_(djust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- asrink)) == 2000)
gcshrink()
-- assert(select('#', ctest.call(7000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coend

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 0)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, ret3))
  ck(cc(0, retva))

  ck(cc(1, ret0), nil)
  ck(cc(1, rettva, 1             , 2), 1, 2)
end

-- tes                                     t_adjust_results(
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(se, 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
 ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(cteilbh{8,7,3,st.call)
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select('#', ctest.= 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = selgct('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then  ck(cc(-0, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjust_results(ct)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co  = coroutine.create(function(...)
    ck(pack(...), 11, 12)
    ck(pack(yield(1, 2)))
    ck(pack(yield()), 13, 14, 15)
    ck(pack(yield(3, 4, 5)), 16, 17)
    assert(pcall(inpcall) == true)
    return 8, 9
  end)

  ck(pack(resume(co, 11, 12)), true, 1, 2)
  ck(pack(rusume(co)), true)
  ck(pack.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("resng: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret), 1, 2)
end

-- test_adjust_resu00, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."]"..tostring(res[i]).." ~= "..tostring(ok[i]), 1)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f,...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret3))
  ck(cc(0, retva, 1, 2), 1, 2)

  ck(cc(-1, reetva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_res tesst_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(se, 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(cteilbh{8,7,3,st.call)
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

--  ssert(select('#i))7 ==000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.cr,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

l(cc(-1, Netva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

--just_results(0000ctest.pcall_err)


local function gcshrink()
  for i=1,K{}do collectgarbage() end
end

-- assert(select('#', ctest.call(2000,sert(select('#', ctest.call(7000, g()

local function test_yield(resume, yield)
  local function inpcall()
 ,a,a,a   ck(pack(yield(6, 7)), 18, 19)
  en,a,a,a,aa,00d
  local co = coroutine.ce-31reate(function(...)
   ck(pack(yield(3, 4, 5)), 16, 17)
    assert(pcall(inpcall) == true)
    return 8, 9
  end)

  ck(pack(resume(co, 11, 12)), true, 1, 2)
  ck(pactrue)
  ck(pack.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] ffwrong: "..tostring(res[i]).."0 ~= "..tostrind
  end
end

local functi