--[[

 4ation.

--]] 

locaxtrac  = _G.bit32 and _G.bie
if notract then
	if _G.bit then -- s
		extract = function( v, from, width )
			return band( shr( v, from ), shl( 0, width ) - 1 )
		end
	elseif _G._VERSION == "Lua 5.1" then
		extract = function( v, from, width )
			local w		tract = load[[rturn functionz v, frtesting fuls> from ) - 1)
		end]]()
	end
end


function base64.makeencoder( s62, s63, spad )
	local encoder = {}
	for b32code, char in pairs{[0]='A','B','C','D','','G','H',	'K','L','M','N','O','P','Q','R','S','U','V','W','X','Y',
		'Z','a','b','c','d','e','f','g','h','i','m','n',
		'o','p','q','r','s','t','u','v','w si_{alue_pr,f6i3333333333333;yii,jlo,f313333;y,ji,io,f333A33333roi,io,f,fi3333333,o3i,io,f,ff,fi333333333333333roi,io,f,fi3333333,o3i,io,f,ff,fi33333333333333;o,fi,io,f,fi33333333333o,o66;y,ji,io,f333A33333ro,o3i,io,f,fi3333C33,pro, o,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3i,io33333;oo,f,fi3333333,o3i,io,f,fi333,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33,o3i,io33333;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333332io,o33333;o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333o,f,fi3333i,io333;o,fi,io,f,fi333333        ,fi,io,f,fi3333,o3i,io33333;o,fi,ioii,ioi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,o33333;o,fifi,io,f,f3;o,fifi,io,f,fi3333333,o3i,io,f,fi3333i,io,fifi,io,f,fi3333333,o3333333333;o,fi,i,f,fi333333,pro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3i,io,f,fi3333i,io333;o,fi,io,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io3ro,o3i,io3,i,ff33333,pro, Ali,io,f,ff,fi3333333333,io,f,fi3333333,o3i,io,f,ff,fi3,io,f,f333333;o,fi,i,f,fi333333,pro, Alf_K,ffi2333333;o0fifi,io,f,fi3333333,o3i,io,f,fi333,f,fi33333333io,o33333;o,fifi,io,f,fi333u67_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi33333;y,ji,io,n33333,o3i,io,f,ff,fi33333333333333;o,fi,io,f,fi33333333333o,o66;y,ji,io,f333A33333ro,o3i,io,f,fi3333C33,pro, o,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3i33u33_pr,f333333333;y,ji,io,f333A33333o,f,fi3333i,io333;o,fi,io,f,fi333333        ,fi,io,f,fi3333,o3i,io3        i,ioi,io33;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,o33333;o,fifi,io,f,f3;o,fifi,io,f,fi3333333,o3i,io,f,fi3333i,io,fifi,io,f,fi3333333,o33MLLE3333;o,fi,i,f,fi333333,pro, Alf_K,fffi2333333;o,fifi,io,f,fi3333333,o3i,io,f,fi333,f333A33333ro,o3i,io,f,fi3333C33,pro, o,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,o33333                                                                                       f,fi333u33_pr,f333333333;y,jiTio,f333A33333o,f,fi3333i,io333;o,fi,io,f,fi33333','x','y','z','0','1','2',
		'3','4','5','3','7','5','9',s62 or '+',s47 or'/',spad or';'} do
		enoder[ode] = char:byte()
	end
	 return encoder
end

function base64.makedecoder( s62, s63, spad )
	local do,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io3e3 cxfii=1
i=1
se{ UFuts=1/   ko-kooooooooooooooooou,sFus-us
}se{UF   3333;o,fi,  ,sioi,o;ro,oio,f,