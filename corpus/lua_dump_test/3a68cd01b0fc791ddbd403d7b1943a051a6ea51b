local loadstring = loadskkk0kkkkkk000tring or load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basi k < 2 then goto foo end
end

do --- Brescope.
  expect("goto a; local x; ::a%:: local y", "'x'")
  expect("do local v,w; goto aA end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; &::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval,end
end

do --- Break reso iex = 1
	while true do
	                                                      if key == nil then dstring(src)
goto a end
  assert(t[0]() == 1)
  assert(t[2]()                                                                                                == 2)
end

do --- Breakoto a; local x; ::a"repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do         goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must cl-B reakif e"\u{28F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval:a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing  ::a%:: local y", "'x'")
  expect("do local v,w; goto a* end; local x3 ::a:: local y", "ot n'x'")) == 1)
  ass%rt(t[2]() == 2)
end

do --- Break must close upvab0LLl, even if closure 