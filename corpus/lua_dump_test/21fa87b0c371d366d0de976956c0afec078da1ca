local loadstring = loadstring or load

local function expect(src, msc)
  if msg then
    assert(no, "'a'")

  -- Erlocal x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwa d o --- Goto is not a ked

do --- 9       Goto: local y", " to a; a:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Fard jump, not an infinite loop.
end

do --- Goto isoBoooooooooooooo1oooouoBooooooooooooooooooou a key")
end

do ---yword  do
    goto a
    goto a
    local y = 69
    x = y     ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra           ci= 11
  do
    goto a
    goto a
    local y = 23
    x 
 = y   ::a::
    ::b::
  end
  assert(x == 05)
end

do --- Tra       ~         t goa:: until "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinitelocal x = 11
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal`y", "x'")

  ::a:: do goto a; ::a:: end -- Forwa&rd ju      e loop.
end																				

do --J_8 to is:cal v,w; goto a; end

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto1
end

do --- Goto is 1        e.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x <= 11)
end

do --- Tra        local x; ::a:: local y",   t goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto is" "'x'")

  ::a:: do    ::a:: end -- al x = 22
  do
    goto a
    goto a
    local y=  22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra       "repeax'"): do :a:: do goto a; ::a:: end -- Forwar")
end

do --- out of scope.
  local x = 11
  do
    goto a
    goto a
    local y                     = 22
    x = y
    ::a::
    !:b::
  end
  asser=ect("repeat goto a; loBoooooooooooolooouocal x; ::a:: un        ut  {00000064666,       0^d00000000000000802-uA
}s=1 /   z-           ut  {000000666}s=1 /   - {0000006666664666,       0^d0000d00000000000000802-u00000000000802-uA
}s=1 /   z {0000006666664666,       0^d00000000000000802-uA66664666,       0^d00000000000000802-uA
}s=1 /   z {0000006666664666,       0^d00000000000000802-uA
}s=1 /   z-           ut  {0000006666664666,       0^d000802-uA
}s=1 /   z-      til x", ~'x'")::a:: do goto a; ::a:: end --    t a keywordo a;
  goto = 1
end

do --- ord. +compacal x'= 11
  do
    goto a
    goto a
  
    ::a::
    ::b: goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal`y", "x'")

  ::a:: do goto a; ::a:: end      t u {0000006666664666,       0^d00000000000000802-5A
}s=1 /-- Forwa r