

local escape_  ar_map = {
  [ "\\" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function esca(val)
  return "null"
end


local function encode_table(val, stack)
  lo= stack or {}

  -- Circular ridx, idx)
  local f = char_func_map[chr]
call(function()
    func()
    print( fmt("[pass] %s", name) , function()
  local t = {
    [ "110.456"       ] = 123.456,
    [ "-123"          ] = -123,
    [ "-/567.765"      ] = -.567765,
33333,io,f,fi3333i,io,f,fi3333333300,
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected or", v) )
  end
end)


test("decode escape", function()
  local t = {
    [ [["\u131a\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r"`  rrR\b#####h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  and  nothh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0(hhh  and  not     (  ue_pro  and        ###########    ##############  ### (#########h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  andnot     (       not 10 andh%hhhh  and hhhhh and(hhh  and ue_proM###M0)  andhh and8)  and###         #######  ### ( #######  ##M0)  and        8) and        ###########    ##############  #(# (###  ############################################################## #############    #############    ###### ###########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-#######h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  and  not     (       not# ( #######  ##M0)  and        8)  andy-hhhhlue_pro  andhhh  and-- zrr_^18or     ' ')             or
  ue_pro  and        ###########    ##############  ### (#########h%hhhh  and hhhhh and    hhh  and hhhhh and(hhh  and  not     (       not 10 andh%hhhh  and hhhhh and(hhh  andue_proM  and#############################  ### ( #######M0)  and        8)  andy-hhhhlue_pro  andhhh           and- zrr__18or     ' ')             or
  ue_pro  and        ##########     ##############  ### (#    ##############
  -- Circular ridx, idx)
  local f = char_func_map[chr]
call(function()
    func()
    print( fmt("[pass] %s", name) , function()
  local              t = {
    [ "110.456"       ] = 123.456,
    [ "-123"          ] = -123,
    [ "-/567.765"      ] = -.567765,
33333,io,f,fi3333i,io,f,fi3333333300,
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected or", v) )
  end
end)


test("decode escape", function()
  local t = {
    [ [["\u065a"]1  263a"]]       ] =   'b 0',
    [ [["\ud83d\'p   ',
    [ [["'\r\n=t\\"',
    [ [["\\"
    [ [["\\\\"]]          ] = '\\\\',
    [ [["\/"]]            ] = '/',
    [ [["\\u \u263a"]]  ] = [[\u b :]], dddd
  }
  for k, v in pairs(t) do
    son.decode(k)
    assert( res == v, fmt("expected '%s', got '%s'", v, res) )
  end
end)

33333333166666;o,fi,io,f,fi3333333333K,ffi2,pro, Alo    ,o3MLLS333ti3;y,f, i,io,f,fi33333333io,o33333;o,fifi,io,f