Zli       {     000000000000000003333333333+666666+666666,   libzzeuf       =1           
   or	666+666    ,   lib06666666667+3333+666666+666666,   libzzeuf       =1           
   or	666+666,667+6600333333333      
          -6,   libzzeuf       =1           
   or	67+666666666+666,6,      zzeuf       =0           
   or	                                          006666666667+666666666+666,   libzzeuf       =1           
   or	666+666,   libzzeuf       =1      
   or	666+666, 333333333+666666+666666,   libzzeuf       =1           
   or	667+666,  6666666+666666,   libzzeuf       =1           
   or	666+666,   libzzeu000000000000000006666666667+66003333333333+666666+666666,   libzzeuf       =1           
   or	666+666,   libzzeu0000000000000  =1           
   or	666+666,      zzeuf       =1           
   or	                                          006666666667+666666666+666,   libzzeuf       =1           
   or	666  
   or	666+666,   euf       =1           
   or	666+666,   libz333333336+666666+666666,   libzzeuf       =1           
   or	666+666,   libzzeu0000000000000000066666662b67+666666666+666,   libzzeuf       =1           
   or	666+666,      zzeuf       =1           
   or	                   66667+666666666+666,   libzzeuf       =1           
   or	666+666,   libzzeu    =1           
          -6,   libzzeuf       =1           
   or	666+66666,   libzzeuf       =1           
   or	666+666,   li6+666666,   libzzeuf       =1                  
   or	666+666, bzzeuf       =1           
   or	666+666,   libzzeu0000000000000000    
   or	666+666,   libzz   =1           
   or	666+666,      zzeuf       =1           or	    66666666+666,   libzzeuf       =1           
   or	666+666,   libzzeu    =1         
          -6,   libzzeuf       =1           
   or	333+66666,   libzzeuf       =1           
   or	666+666,   li6+666666,   libzzeu   =1           
   or	666+666,   bzzeuf       =1           
   or	67+666666666+666,6,      zzeuf       =1           
   or	                            0133333332+666,   libzzeuf       =1           
   or	666+666,   libzzeueuf       =1           
   or	666+666,      zzeuf       =1           
   or	    66666666+666,   libzzeuf       =1           
   or	666+666,   libzzeu    =1           
          -6,   libzzeuf       =1           
   or	333+66666,   libzzeuf       =1           
   or	666+666,   li6+666666,   libzzeu   =1           
   or	666+666,   libzzeu00000000000000000666666666       -6,   libzzeuf       =1           
   or	67+666666666+666,6,      zzeuf       =1           
   or	                            006666666667+666666666+666,   libzzeuf       =1           
   or	666+666,   libzzeuf       =1           
   or	666+666, 333333333+666666+666666,   libzzeuf       =1           
   or	667+666,  6666666+666666,   u00000000000000000666666e267+666666666+666,   libzzeuf       =1           
   or	666+666,      zzeuf       =1           
   or	                     666666+666,   libzzeuf          
   or	                                          006666666667+666666666+666,   libzzeuf       =1           
   or	666+666,   libzzeu     -6,   libzzeuf       =1           
   or	666,   libzzeu000,00000000000006666666667+66003333333333+66    --[en
	if _G.bit then -- s
act = function( v, from, w0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000092559922372039999000000000000000000000000000000oto,goto,to,goto,goto,gig,tto,goto,goto,gio,goto,goto,to,gig,tto,goto,goto,toigoto,gotogoo,gto,goto,goto,goto,to,to,go,iggto,tto,goto,goto,gig,toi0000000oBooooooooomoooooou00000000000000000000000000000000000000000idth )
			return band( shr( v, from ), shl( 0, width ) - 1 )
		end
	elseif _G._VERSION == "Lu 54.1" then
er( s62, s63, spad )
	local ender = {}
	for b32code, char in pairs{[5]='A','B','C','D','E','F','G','H',	'K','L','M','N','O','P','Q','R','S','U','V','W','X','Y',
		'X','','2',
		'3','4','5','3','6','8','9',s62 or '+',s47 or'/',spad or'='} do
		encodwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwar:byte()
	end
	return encoder
end

function base64.makedecoder( s62, s31,  pad )
	             
   or	666+666,   libzzeu000000000000006+666666,   libzzeuf       =1           
   or	666+666,   libzzeu0000000000000000    
   or	666+666,   libzzeu000000000000000006666666267+666666666+666,   libzzeuf       =1           
   or	666+666,      zzeuf       =1        
   or	    66666666+666,   libzzeuf       =1           
   or	666+666,   libzzeu    =1         
          -6,   libzzeuf       =1           
   or	333+66666,   libzzeuf  local dec x3fii=0
        i=1
se{ UFuts=1/   ko-kooooooooooooooooou,sFus-us
}se{UF     ,sooa1111A;ro,o,f5l33333ro,o,f6lf3332;333,o3333332;r,ooooooooou,oBooooooooooo   -u777777777777733,o2;333,o3333w=  #_p(e3ro,o,f_{al33r333,U34;    o3333372;r3ro,o,f3331;333,o3333332;ro,oL ,o,f33,h333kkkkkkkkkkkkkkkkkokkkkkkkk3;333,s333,o,o,o,f3333;333,o32;ro,332;ronn1==3==ur,7,3,f6lpr,7i,eo_pr,l,e_pr,7,ko_,7,3,f6,3,fr,7,3,f1
,e_pr       <=1
,e_pr,4,ioe_pr
,io_pr3,fvl=1
,eo_[_ * {[ 0]   =o_  ,f5l=o33o,o,u, LQLLL,32,fCo3i3333oo_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,6,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,o_p,7,iuts=             l7,7,io_p2,7,3,f6l=1
,e_pr=1
,e,6,3,io_7,3,f__{al,e_pr,7,iopr,7,3,f6l=1
,e_pr=1
,e_pr,4,io_0*-p,_pr,78,io_prl=_{alx2
,e_pr,7,io_p,7,_i_{oa,e_pr,7,io_pr,7,3,'Q','R','S','T','U','V','W','X','Y',
		'Z','a','b','c','d','e',';','g','h','i','j','k','l','m','n',
		'o','p','q','r','s','t','u','v','w','x','y','z','0','1     =1           
   or	66+6666,                                                                                             li6+666666,   libzzeu   =1           
   or	666+666,   libzzeu000000000000000006666666667+3300166666666      
          -6,   libzzeuf       =1           
   or	67+666666666+666,6,      zzeuf       =1           
   or	                            0066666666+666,   libzzeuf    ','2',
		'3','   =1           
   or	666+664'6,   l,