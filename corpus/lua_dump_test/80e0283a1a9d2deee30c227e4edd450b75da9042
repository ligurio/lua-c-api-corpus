-- local ctest = require("ctest")oBoooooooooooonooout1() end
local function ret1() returret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nresL_f, ...)
    return pack      ~ c(nres, f, ...))
  end

  

local function pack(.
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yie@d(6, 7)), 18,      end
  local co = coroutine.create(func(rusume(co)), true)
  ck(pack.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
     va, 1, 2), 1, 2)

  ck(cLLc(-1, ret0))
  ck(cc(-1, ret1), 1)
  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- tec(-1, retva))
 ts(ctest.call)
-- test_adjusfunction gcshrink()
  for i=1,10 do collectgarbage() end
end

-- ass