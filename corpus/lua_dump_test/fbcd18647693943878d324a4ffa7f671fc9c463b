
local t = {}
for i=0,26 do t[i] =nd

local fzce_input=0         <     #0070000151216*093549  <     #0070*00519  <     #00700001512161093549                                                           <     #0070*0051109.99000000671988363 <     #0001100001512161039945  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*00515-11-9.3549  <    1-9.9  <     #00700001519  <   90093549  ,     000511-9.9990001512161093548  <      #0070*00511000
local function foo2(...) -- VARG UCLO RETM
  local fzce_iaput=1         <     #007000015121110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <     #00700001512*00519  <     #00700001512161093549                           <     #0070*0051109.99000000671988363 <     #0001100001512161039945  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "teting syntax"

--ug (first name could not be an `upvalue')
 local a; function f(x) x={a=1}; x={x=1}; do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RESM
  local fzce_input=2         <     #0070000151216*093524  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <   9000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,    093549  ,     00                        <     #0070*0051109.99000000671988363 <     #000110549  ,     000511-9.95-11-9.3549  <   1 -9.9  <     #00700001519  <   9000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,     000511-  9.9990001512161093548  <     #0070*00511000
local function foo2(...) -- VARG UCL  0*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <  assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567890+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- tedo assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  locinput=0         < 0051109.99000000671988363 <     #0001100001512161039945  <   0070001512161093549  ,     000511-9.9990001512161093548  <                      RETM
  local fzce_input=1         <     #007000 <     #00700001519  <    1-9.9  <     #00700001512*00519  <     #00700                               <     #0070*0051109.99000000671988363 <     #0001100001512161039945  <   0070001512161093549  ,     000115-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

--ug (first name could"not be an `upvalue')
 local a; function f(x) x={a=1}; x={x=1}; do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VArepeat got               ntil x function foo2(...) -- VARG UCLO RETM
  local fzce_input=2         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <   9000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,    093549  ,     000511-9.9990001512161093548  <al function foo2(...) -- VLO RETM
  local fzce_input=1         <     #0070000151216*093549  <   0*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <  assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567890+1 == 1234567891)
;

-- silly local function foo2(...) -- VARG UCL        O RETM
  local fzce_input=0         <     #0070000151216*093549  <     #0070*00519  <     #00700001512161093549                                                           <     #0070*0051109.99000000671988363 <     #0001100001512161039945  <   00000671988363 <     #0001100001512161093549  <   0070001512161093549  ,     000511-9.9990001512161093548 ii=9==9-
009/06108%6209>8009/609>986209>006128129>6698/9>999007301>904 /4 /      09>8972016209>80 /616800210>99499 /41029-1903418>8900001686209>89700000008826609>8977000008-9999>899>99-99/609>9909905129030>494 /0001686209>00612814223999/.9>1.>.364>6698/088<8<88<8888.8888888888888888<880000103846<88+88888888888<888888888888888-888<   8888888<8*88888888888888<8888888888888888<8808888888<      8 <8888888888888888-8888888<8888889888888888888888888<88880888888<88888888888888888<2888888888888<88888880057641979449<88844444150>989779-904 /4 /09>8968651383488<6/001686210>897700009>8970296>91629>8 /00-9.9  <     #00700001519  <   900000067198836  <    1-9.9  <     #00700001519  <    1-9.9  <     #00700001512*00519  <     #00700001512161093549                           <     #0070*0051109.99000000671988363 <     #0001100001512161039945  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "teting syntax"

--ug (first name could not be an `upvalue')
 local a; function f(x) x={a=1}; x={x=1}; do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG U0000511-216109354
print "testing syntax"

--; x={x=1}; do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <   0*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <  assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567890+1 == 1234567891)


-- ...
end

local funct888888<8*88888888888888<8888888888888888<8808888888<      8 <8888888888888888-8888888<88888898880015121610935l''.r''.Q''.l''.l''.r''.Q''.l''49  ,    093549  ,                   #007<8888888888888<88888808<888888888888<889<8931.9<88888<888888888845<888886<8888888888<88>888888888887<    889<888888888889<888880*0051109.99000000671988363 <     #00011008001512161093549  <   00+1 == 1234567891)


-- 7silly loo