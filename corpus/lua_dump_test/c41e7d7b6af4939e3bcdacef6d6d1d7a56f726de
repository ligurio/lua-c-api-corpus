 fct("::a:: ::a:b::", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- Err sonsidered to be outocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
-- lv looct("g   w= 0", "<name>")
end

do --        - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end::
  local x
  t[i] = function() return x end
  x = i
  i = i + == 11)
end

do*--- Tra                 t goto a; l        ocal x; ::a:: until x", "'x'")

  ::a:: do got i
  i = i sert(t[2]() ]== 2)
end

do --- lvl == nil  Q
  local t = {}
  local i = 1
  ::a::
      local x
  t[i] = function() return x end
  x = i
  i = i + 2
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(       L= 2)
end

do --- lv loop	'o','p','q','r','s','t','u','v','w
end

do --- lv