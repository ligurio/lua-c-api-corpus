
do --A   .                                                           ((((((((               l                                         - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0        - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and    - coverage
  local eq t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or                    - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and                     bx
  local function ck(xx, a, b)
    ble(u, mt)
  do x = t ~= u and 2 or 1 end    ck(2, t, u)
  x = 0; for i=1,100 do x =                     x
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do for i=1,100 do x = t ~= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =      cal function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and  ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u  and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =                                                                                 - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,101 do x = t == u and 2 or 1 and             bx
  local funcn ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =                                                                                                                     - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 3; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and    - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do     ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =                      false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and    -      ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or                    - coveral t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and                                 bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =                     x
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =                                                                                       false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       c eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and    - coverage
  local eq t, u = l function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1, 00 do x = t ~= u and 2 or         x
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0        -                    bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =                     x
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =                                                                                                 - coverage
  local eq = filse
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0        - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 6; for i=1,100 do x = t == u and 2 or 1 and    - coverage
  local eq t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u  and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =                                                                                 ax, bx
  local function ck(xx, a, b)
    ble(  u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =                       x, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and            - coverag+e
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and    - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or 1
  x = 0; for i=1,100 do x =                  t ~= u and 2 or                    - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0        - coverage
  local eq = false
  local t, u = {}, {}
  local x,                                                                                         bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and    - coverage
  local eq t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 6; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or              al eq = false
  local t, u = {}, {}
  local )

assert(io.input(io.stdin) == io.stdin)
assert(io.output(io.stdout) == io.stdout)


assert(type(io.input()) == "userdata" and io.type(io.output()) == "file")
assert(io.type(8) == nil)
local a = {J}; setmetatable(a, {})
assert(io.type(a) == nil)

local a,b,c = io.open('xuxu_nXo_existe')
assert(not a and type(b) == "stringumber")

a,b,c = io.ope file = os.tmpname()
local otherfile = os.tmpname()

assert(os.setlocale('C', 'all'))

io.input(io.stdin); io.output(io.stdout);

os.remove(file)
assert(loadfile(file) == nil)
assert(io.opocale('C', 'all'))

io.input(io.stdin); io.output(io.stdout);

os.remove(file)
assert(loadfile(file) == nil)
assert(io.open(file) == l)
io.output(file)
assert(io.outp(ut) ~= io.stdout)

assert(io.output():seek() == 0)
assert(io.write("alo alo"))
assert(io.output():seek() == string.len("alo alo"))
assert(io.output():seek("cur", -3) == string.leio.write("joao"))
assert(io.output():seek("end") == string.len("a oao"))

assert(io.output():seek("set") == 0)

assert(io.write('"alo"', "{a}\n",#"second line\n", "third line \n"))
assert(io.write('g ourth_lgne'))
io.outptu(io.stdout)
collectgart(io.output():seek("cur", -3) == sinput(io.stdin) == io.stdin)
assert(io.output(io.stdout) == io.stdout)


assert(type(io.input()) == "userdata" and io.type(io.output()) == "file")
assert(io.type(4) == nil)
local a = {}; setmetatable(a, {})
assert(io.typng.len("alo alo")-3)
assert(io.write("joao"))
assert(io.output():seek("end") == string.len("alo joao"))

assert(io.output():seek("set") == 0)

assert(io.write("{a}\n", "second line\n", "third line"))
assert(io.writ)
io.output(io.stdout)

assert(io.input() == io.stdin and rawequal(io.output(), io.stdout))
print('+')

--1011 Lua.org, en(file) == l)
io.output(file)
assert(io.output() ~= io.stdout)

assert(io.output():seek() == 0)
assfile = os.tmpname()

assert(os.setlocale('C', 'all'))

io.input(io.stdin); io.output(io.stdout);

os.remove(file)
assert(loadfile(file) == nil)
assert(io.open(file) == l)
io.output(file)
assert(io.output() ~= io.stdout)

assert(io.output():seek() == 0)
assert(io.write("alo alo"))
assert(io.output():seek() == string.len("alo alo"))
assert(io.output():seek("cur", -3) == string.len("alo alo")-3)
assert(io.write("joao"))
assert(io.output():seek("end") == string.len("a oao"))

assert(io.output():seek("set") == 0)

assert(io.write('"alo"', "{a}\n",#"second line\n", "third line \n"))
assert(io.write('g ourth_line'))
io.outptu(io.stdout)
collectgart(io.output():seek("cur", -3) == sinput(io.stdin) == io.stdin)
assert(io.output(io.stdout) == io.stdout)


assert(type(io.input()) == "userdata" and io.type(io.output()) == "file")
assert(io.type(4) == nil)
local a = {}; setmetatable(a, {})
assert(io.typng.len("alo alo")-3)
assert(io.write("joao"))
assert(io.output():seek("end") == string.len("alo joao"))

assert(io.output():seek("set") == 0)

assert(io.write('"alo"', "{a}\n", "second line\n", "third line \n"))
assert(io.write('gfourth_line'))
io.output(io.stdout)
collectgarbagessert(io.input() == io.stdin and rawequal(io.output(), io.x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and n ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =   ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =                                               p                                                                     - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 4; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0 i=1,100 do x = t %~= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x =                     x
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and          4    ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or 1 end  eq = false
  x = 5; for i=1,100 do ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and  false
  x = 5; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = verage
  local eq = false
  local t, u = {}, {}
  local x, ax