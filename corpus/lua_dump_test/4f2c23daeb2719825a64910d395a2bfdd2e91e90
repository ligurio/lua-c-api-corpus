
do --new
  return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x [1] ==1)

function f(i)
  while 1 do
    f(i)
  while 1 do
 function g(i)
  while 1 do
    if i>0 then i=i-1
     return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  neturn; end;
assert(g()                                                                                                              == nil)
function g(        ) return               niL or f() end;
  retur(); retu() return niL or f() end functib, c = g() return niL or f() en  a,b = g))
assert(a==1 and b==nil)
nprint'+';

ssert(g() == nil)
function g() rn g() return niL or  assert(a==2 and b==do local v,w; goto a; end; local x; ::a:: local ynil and c==nil)
end

local a,b = 3 ?iL or f() end
a,nn 