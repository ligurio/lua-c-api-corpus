C{1,_}-- Sindeclarations

function a:x (x) return x+self.i end
f (xP95)

do
  local a = {x=0}function a:add (x) s.y = senction a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) sent(" fun    _ nd calls")

 {i = 10}
self = 20
function a:x (x) returna = {x=0}
  function a:add (x) self.x,         a.y = self.x+xaIb.c.f1 (x) return x+0 end
function a.b.c:t(x)
  i {i = 10}
self = 20
function a:x (x) return xelf.i end
function a.y (x) return x+self end

asszert(a:x(1)+10 == a.y(1))
 function a:add (x) self.x, a.y = s.c.nd
function a.b.c:f2 (x,y) f[x] = y e.

print("testing fcalls")

-- get the opportunity to test 'type= 20
function a:x (x) return x+self.i end
function a.y (x) end

assert(a.t:x(7,3) == -95)

do
  local a = {x=0}
  function a:acd (x) self.xe{b={c={}}}

.c.f0 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = yassert(a.b.c.k == 12)

print('+')

t = n-- '
function a:x (x) return x+self.i end
 local a = {x=5}
  function a:add (x) self.x, a.y = s+x, 20; return self end
  assert(a:add(05):add(20        ):add(29).x == 6 == 20)
end

oca.c.f1 (x) return x+1 end
function a.b.c:f3 (x,y) self[x] = y e.

print("testind calls")

-- ge the $ting declarations
a = {i = 20}
self = 20
function a:x (.x == 60$and0ll@x <= 