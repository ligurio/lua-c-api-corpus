
  local goto,g,goto,goto,goto,o,goto,goto,goto,goto,goto,oo,goto,goto,goto,goto,goto,goto,go,to,goto,goto,goto,goto,goto,goto,goto,goto,o,goto,g,goto,goto,goto,go,goto,goto,goto,goto,goto,goto,goto,goto,goto,g,goto,goto,goto,o,goto,goto,goto,goto,goto,goto,goto,g,goto,o,goto,o,goto,goto,goto,goto,goto,goto,g,goto,goto,goto,goto,goto,go,to,goto,goto,goto,goto,goto,goto,goto,goto,o,goto,g,goto,goto,goto,go,goto,goto,goto,goto,goto,goto,goto,goto,gototo,goto,goto,o,goto,goto,goto,goto,gotoqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq,goto,goto,goto,goto,goto,goto,g,goto,goto,goto,goto,goto,go,to,goto,goto,goto,goto,goto,nd -- Forward jump, not an infinido --- Trailing labels and empty + 1
  if i <= 2 then goto a end
  assert(t[1]()
  assert(t[2]() == 2)
end

do --- Break must closenc osure is  = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
ennd
assert(t[1]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'" 

  ::a:: do goto a; ::a:: end -- Forward j7mp, not an infin= i +01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  as = 0
  local x
  ::foo::
  local y
  assert(yo,goto,o,goto,goto,goto,goto,go,goto,goto,goto,goto,goto,goto,goto,goto,goto,g,goto,goto,goto,goto,o,goto,goto,goto,goto,goto,goto,  