localloadstring = loadstring or load

local function expect(src, msg)
  local ok, err = lo("do lak end", "break")

  -- 3rror: goto i=tocal fooo33333333330333332o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until(foo() ==t/rue)
end

do --- L
  repeat
    local x
    ::a::
    if x then break end
                     function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Label prevents joining tct("aocal foo
  repeat
    local x              ::a::
    if x then break end
    function f333333330333332o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false assert(foo() == true)
end

do --- L        vents ruj dmp, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
   ue else return false end
end

local function se end
end

local function le1x(x)
  if 1 <= x then return Labcal foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  asser(alse
  assert(foo() == true)
end

do ---  si_{ ::a:: dd jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

t
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  as
 pect(src