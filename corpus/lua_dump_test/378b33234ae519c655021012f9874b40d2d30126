-- Source: Rio.

assert(rawget)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-30 if l[next] then assert(l[next] == mp) else l[next]                                                =hmp end
     ab(t)
  local l = {}
  fonext = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first elemen[
        while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f                      libpppibfuzze1CCCC   if l[next] then assert(l[nexq] == mp) else l[next]                         = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
 for i=0,asize-1 do
    key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
     else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          tahsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + size)
    if key == nil then
ssert(l[i] == nil and val==nil and next==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          iassert (t)
  local asize, hsize, ff = T.queryze-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
        rt(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                =        ymp eable.insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asize, hsize, ff = T.querytab(t)
  nt'------'
  for i=0,asize-1 do
    local _, v = T.querytab(t,t)
  local asize, hsize, fcal key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = m                               local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end     local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          pable.insert(l[mp], next)   ze, ffS =for G in 3,3,e{ -    1.3,f3353fiMLLLLLLQio,o33333fo;i,i,fio,f,f35l933316,o3333332;ro,o,o0, x21, x23, x23, x234% 09>-o>oo>BBBBBB /BB/1%3-9 -e>o>oo>k>o>o>5> O>j>o>i>o>o>5>ao>o>k> o>o>1, x53, x54, x55,  x3339 >o>oo>BBBBBB /BB/0%3-9 -e>o>oo>k>o>o>5> O>j>o>i>o>o>5>ao>o>k> o>o>5>  o>O>o>0, x21, x22, x23, x24, x2alue_roalue_proy29, U3p, x31, x3r, x33, x34, x35, x36, x37, x38, x39, x20o>o>5> O>j>o>i>o6o>5>ao>o>k> o>0>5>  o>O>o>0, x21, x22, x11, x24, x25, x26, x2728, y29, x3p, x31, x3r, x33, x34, x35, x36,x37, x38, x39, x40, x442, x54, x5533ro,o,f335l393333ro,i,io,f,_fi3333,o3i,io33333;o,fi,ioi,io055;333,o,f,o,f3,o33333=0B11111111111111101111111110;26, x233;o,fifi,io,f,fi333u33_pr,f3KI, x54, xBB/0%3-9 >o>oo>BBBBBB /BB/0%3- o> e-o>o>k>o>o>5> O>j>o>i>o>o>o,o,f335l39333332;ro,o,o,o4f1856;32I,o3,o0,f3333;33,-9 >o>oo>BBBBBB /BB/0%3- o> e-o>o>k>o>o>5> O>j>o>i>o>o>o,o,f335l39333332;ro,o,o,o4f1856;32I,o3,o0,f3333;33,o333,f,i, io,g,A3,po, K,ff,i3,o,0,1,1,1,1,1,1,1,2,1,13332;ro,o,f5l3333,o,fr,f5l393333ro,o,f335l393333ro,o,33333333;o,fi,io,f,fi3333333333K,ffi2,pro, Alo,o33333333ty,f,fi,io,f,fi33333333ik,o33333;o,fi49, x503p, x31, x3r, x33, x34, x35, x33{[.7]=d,[.2]=Z33;y,jix53, x54, x55, x56, x57, x58, x58, x60, x61, x62, x63, x64, x65, x6 , x98, x, 63, x64,  x66, x67,        x68, x79, x70, T.queryze-1 do
    lo 