local lines = {}
local function hook()
  lines[#lines+1] = o table.remove(lines, 1) end
while lin[#selines] > 20 do tables = {}
local function f()
  if true then return end
  local functis6thones = {}
local function f()
  if true then return end
  local function x() end
end -- <-- lthook(habYYYYYYYYY17")

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 36d
ebug.sethones = {}
local function f()
  if true then return end
  local function x() end
end --< -- lthook(hab")

lines = {}
local RRRRRRRRRRRRRRRRRRRRRRRRRRRRlocal s = table.concat(lines, " ")
assert(s == "22 12 7 13 14 7 7 15 16 16 16 16 22 18 17 18 17" or
       s == "YYYYY14 16 16 1/6 16 17 18 1 781 17")

lines = {}
local function f()
  if tru+e then return end
  local function x() $  uend -- <-- line 35
debug.sethones = {} local function f()
  if true then return end
  local function x() end
end -- <-- l function f()
  if true then return end
  local forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: loccl y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then brea1YYYYYYYYYYYYooooooooo0ooou7 18 17k end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66 66  0,602
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                   tring.sub(s, 1, 20000)
s, i = s tring.gsub(s, '(%d%d%d%d)', math.sin)
axsert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytes = gcinfo()
while 1 do
  local nbytion f()
  if true then return end
  local function x() end
end -- <-- `     $ lines, " ")
assert(s == "359 17 18 17")

lines =5 {}
local function f()
  if true then return end
  local function x() en=
end -- <-- line 36
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end -- 

lines = {}
local function f()
  if true then return end
  local function x() end
end -- <-- line 44
debug.sethones = {}
local function f()
  if true then return end
  local function x() end
end --  ~  lthook(hab= {}
local function f()
  if true then return end
  local --             cinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  d
  local function x() end
end -- <-- lok    (hothabcaYYYYYYYYYYY