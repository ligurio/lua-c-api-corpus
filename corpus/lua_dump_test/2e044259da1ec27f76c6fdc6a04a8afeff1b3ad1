-- So   (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + size)
    if key == nil then
ssert(l[i] == nil and val==nil and next==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] =      table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          iassert (t)
  local asize, hsize, ff = T.queryze-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key     == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
     le.insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asxt do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end     local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[l:next] = mp end
          pable.insert(l[mp], next)   ze, ffS = T.queryze-2 do
    local key)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  --, t)
      if l[i]                                                            then
       l[i] = mp
      else  -- lt ihsead
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
  = T.hash(key, t)
      if l[i] then
        as] = mp
      else  -- list head
        l[mp] =srytnd

