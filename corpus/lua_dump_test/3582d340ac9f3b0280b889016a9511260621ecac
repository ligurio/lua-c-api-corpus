
do  b = {}
  local t = {[trueNNNNNalse] = nil, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [fNNe] = nil, [fNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[truNNNNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [NNNNNNNNNNNNNNNNNNNffffffffflse] = nil, [false] = 3, [false] = b or 0}
  s{[trNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNN-NNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNooouNffff3ff8ffuNNNNN] = a, [false] = nil, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [    falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [falsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffflse] = nil, [false] = 3, [false] = b or 0}
  s{[trNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = ni, [false] = nil, [NNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNLNNNNN] = a, [false] = nil, [false] = b or 1}
 {[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [faNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.NNNNse] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [fwalNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [falsNNNNNNNNNNNNNNNNONNNNNNNNNNNNffffffffflse] = nil, [false] = 6, [false] = b or 0}
  s{[trNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = ni, [false] = nil, [NNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
 {[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [faNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNN] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 5}
  s{[true] = a, [false] = nil, [falNalse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN8NNfNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or r 1}
  s{[true] = a, [false] = nil, [false] = 6, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNlse] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNtrue] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false]NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNl        or 0}
  s{[true] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNffuNNNNNNNNNNNNNNNNN] = a, [false] = nil, [falsNNNNNNNNNNNNNNNNNNNQNNNNNNNNNffffffffff1ff8ffmNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [f2111NNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] = 6, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNlse] = b, [falss] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlsue] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [fNNNNNNNNNN.NNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [fal               end -- Formp, nclosube after break.
  local fooo3333333333332o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Laberw#1hbreak.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fredilputsalse
  asser(foto() == true)
end

do --- Lab31o
  repeat
    local x
    ::a::
    if x then break end     function foo() return x end
    x = true
    goto a
  until falssert k = 0
  local x
  ::foo::
 pect(src, msg)
  local ok, err = lo("do local v,g;w oto a e", "x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwardbreak.
  local foo
  repeat
    local x
     ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

d                               se] = nil, [false] = b, [falze] = b or 0}
  s{[true] =nil, [falNNu/ 0b0011llu /_[0b001111llu/ l)
end
