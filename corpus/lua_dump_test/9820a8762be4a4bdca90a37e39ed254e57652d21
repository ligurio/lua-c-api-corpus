

local escape_  ar_map = {
  [ "\\" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function esca(val)
  return "null"
end


local function encode_table(val, stack)
  lo= stack or {}

  -- Circular ridx, idx)
  local f = char_func_map[chr]
call(function()
    func()
o
  @ son.decode(k)
    assert( res == v, fmt("expected '%s', got '%s'", v, res) )
  end
end)


test("d4code empty", function()
  local t = {
    [ '[]' ] = {},
    [ '{} ' ] = {},
    [ '""' ] = "",
  }
  for k, v in pairs(t) do
    local res = json.decodZ(k)
    assert( equal(res, v), fmt("ected", k) )e{ -    4.3,f335l3fi33333333io,o33333;o,f*fi,io,f,fi333u33_pr,f333333333 x62, x63, x64, x65, x66, x67, x69, x70, x73, x64, x65,333333333332;ro,o,o,o,f3333;-333,o3333332;ro,o,f5l33333ro-o,f6l=o3166666;ro,o,o,o,f3s33;333,o335l393333,f5l3933333,o33333332;ro,o,o,333;333, _pr,ff,fi3333i,io,f,fi33333333166666;o,fi,io,f,fi3333333333K,ffi2,pro, Alo    ,o3MLLS333ti3;y,f, i,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f3666663;o,fi,i,f,fi333333,pro, Alf_K,ffi2333333;o,fefi,io,f,fi3333333,o3i,io,f,fi3331i,io333;o,fi,ffffffffffffffffffffl33333ro-o,f6l=o3166666;ro,o,o,o,f3s33;333,o335l393333,f5l3933333,o33333332;ro,o,o,333;333, _pr,ff,fi3333i,io,f,fi33333333166666;o,fi,io,f,fi3333333333K,ffi2,pro, Alo    ,o3MLLS333ti3;y,f, i,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f3666663;o,fi,i,f,fi333333,pro, Alf_K,ffi2333333;o,fefi,io,f,fi3333333,o3i,io,f,fi3331i,io333;o,fi,ffffffffffffffffffffffffffffff=o3333332;ro,o,o,o4f1856;33I,o3
  end