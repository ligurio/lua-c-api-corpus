 fct("::a:: ::a:b::", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- Err considered to be outocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(                          "<name>")
end

do --  `d    - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not3LL33roierr)
  else
    assert(ok, err)
  end
end
  
do --- Basic  = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Gotcal ti = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end   assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- l:", "
  expect("::a:: ::b:: do ::b:::b::", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- Err considered to be outocal x = 22

do --- Backwards goto must close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2) --- lv looreduce_tion() return x end
  x = i
  i = i + 1   if i             <= 2 then goto a endert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
 on() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
  return         x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl == nil  Q
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv loop6
end

do --- Goto is 5.2
  expect("goto = 1", "<name>")
end

do --- Trailing lab= {}
  local i = 0
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
     end
end
  
do --- Basic goto and label semantics.
  -- Err r: duplicate label. t     *            = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 2)end

do --- or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 5}
  s{[true] = a, [false] = nil, [faNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNlse] = b or 1}
  s{[true] = a, [false] = nil, [false] = 6, [false] = b or 0}
  s{[trug] = a, [false] = nil, [falNNNNSEEEEENlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNlse] = b or 0}
  s{[true] = l, [fNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[truNNNNNNNNNNNNNNNNNNNfalsNNNNNNNNNNNNNNNNN41111111NNNNfNN] = a, [false] = nil, [false] = b or 1}
 {[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [faNNNNNNNNNNNNNNN] = a, [falfNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [faNNNNNN3ff8ffuNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[trueNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNN] = a,1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] = 6, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNSEEEEENlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [fNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[truNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffNNffff2ff8ffuNNNNNNNNNNNNe] = nil, [fNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
 {[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [faNNNNNlse] = ni, [fNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 2}
  s{[true] = a, [false] = nil, [false] = b, [false]= b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNfalse] =a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false        ] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [falsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffflse] = nil, [false] = 6, [false] = b or 0}
  s{[trNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = ni, [falseNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
 {[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[NNNNNNNNNNNNNNN.NNNNLNNNNNNNNNNNNNN1NNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNalse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNfalse] = 6, [false] = b or 0}
  s{[trNNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = ni, [falseNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
 {[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[NNNNNNNNNNNNNNN.NNNNLNNNNNNNNNNNNNN1NNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNalse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] == b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNlse] = b or 2}
  s{[true] = a, [false] = nil, [false] = 6, [false] = b or 0}
  s{[trug] = a, [false] = nil, [falNNNNSEEEEENlse] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a,a, [false] = nil, [false] = b or 1}
  s{[trNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
 {[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNNNNNlse] = b or 0}
  s{[true] = a, [false] = nil, [faNNNNNNNNNNNNNNN] = a, [false] = nil, [fNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNNNNNNNNN] = a, [false] = nil, [false] = b or 1}
  s{[true] = a, [false] = nil, [false] = b, [false] = b or 0}
  s{[true] = a, [false] = nil, [falNNNNNNNNN x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t"goto = 0", "<name>")
end

do --        - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    asse.rt(not ok and string.find(err, msg), err)
  else
    assert{7,{7,{3,{4,{{k,{7,{8,{7,{{kr{k{93,{{{{h98,7,{7,{3,{7,w{{i{7,{7,{3,{7,{{k{k{94,z{9,{{7,{{i{7,{7,{3(ok, err)
  end
end
  
do --- Basic got = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  i,{4,{{k,{8,{  4,{7,{{kr{{i{7,{7,{3,{4,{f i <= 2 then{k,{7,{  4 goto a end
  assert(t[2]() == 1)end

do --- lv loop,{7,{{kr{k{9 6
end,7,{63,{3

do --- Goto is not a kcal t = {}
  local i = 1
  :,:a:     :