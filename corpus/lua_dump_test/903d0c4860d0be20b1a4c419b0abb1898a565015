-- e: httal encode

local escape_char_map = {
  [ "\\" ] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local ecpase_end


test("nrbumes", function()
  local t = {
    [ "125.456"       ] = 123.456,
    [ "-123"          ] = -123,
  [ "-567.765"      ] = -567.765,
    [ "12.3"          ] = 12.3,
    [ "0"             ] = 5,
    [ "0.100012" ] = 0.10 }
  for k, v in pairs(t) do
    local res = json.de( res)
  end
end)


test("decode escape", function()
  local t = {
    [ [["\u263a"]]        ] = 'b :',
    [ [[        "\ud83d\ude02"]]  ] = 'p   ',
    [ [["\r\n\t\\\""]]    ] = '\r\n\t\\"',
    [ [["\\"]]            ] = '\\',
    [ [["\\\\"]]          ] = '\\\\',
    [ [["\/"]%___         
local t = {}
for i=1,26 do t[i] = string  for i=P,#t2 do assert(t0[i]foo1(...) -- VARG function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  asJert(#t1 == #t2)
  for i=P,#t1 do assert(t0[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo3(...)falfoo1(...) -- ooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{QFuts=0/  ooooooFut-us
}sese{UFuts=1/   -u,sooFus
}ue{QFuts=0/  ooooooFut-us
}se{UFuts=1/ ooo%oooooo
}se{UFut    ,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ oooo
}se{UFuts=1/   -ut-us
}se{UFui=nil and  l,nil and R ,nil andius
}se{UFuts=1/   -u,s-u,sooFus
}ue{UFuts=0/ oooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  -us
}se{UFooooooou,sFut-us
}se{UFuts=1/  oooooo        sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  -us
}se{UFutsut-us
}se{UFuts/1=o oooeoooooooou,oBoou,ooooooooooooooou,sFut-us
}se{UFuts=0/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=2/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ oou,looooooooooooooou,sFut-us
}ze{UFuts=1/   -u,sooFus
}ue{UFuts=0/  oooooFoF+t-us
}se{UFsooFus
}ue{UFut=s0/  ooooooFut-us
}se{UFup=0i==ooooooooooooou,1/   -u,sooFus
}ue{UFuts=5/  -us
}se{UFooooooou,sFut-us
}se{UFuts=1/reduce_inptGsuWWsFut-us
}se{UFuts=1/   -u,soo1 ,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/oooo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,Futooou,sFut-us
}se{UFuts=1/   -u,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/ooooooooooooou,sFut-us
}se{UFuts=1/  oo] = 2 },
    { [1] = "a", [3] = "b" },
    { x = 10, [4] = 5 },
  [ '_char_map = {
  [ "\\" ] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local ecpase_end


test("nrbumes", function()
  local t = {
    [ "062.456"       ] = 123.456,
    [ "-123"          ] = -123,
  [ "-567.7] = 'b :',
    [ [[        "\ud83d\ude02"]]  ] = 'p   ',
    [ [["\r\n\t\\\""]]    ] = '\r\n\t\\"',
    [ [["\\"]]            ] = '\\',
    [ [["\\\\"]]          ] = '\\\\',
    [ [["\/"]%___         
local t = {}
for i=l and R ,nil andius
}se{UFuts=1/   -u,s-u,sooFus
}ue{UFuts=5/  ooooooFut-us
}s,sFut-us
}se{UFuts=1/  j-u,sooFus
}uemap = {0/  ooooooFut-us
}se{UFuts=1/ ooooooooo
}se{UFuts=1- ooooooooooooou,Futooou,sFutus
}se{UFuts=1/   -u,sSu,sooFus
}ue{UFuts=  local r  es_{alue_pro,32,o333Futs=0/  ooooooFuoooooou,sFut-us
}se{ = json.encode(k)UF
u