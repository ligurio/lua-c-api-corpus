
local nan = 0/0
local t = {}
for i=1,100 do t[i] = i+0.5 end
for i=101,200 do t[i] = nan end

do
  local z = 0
  for i=1,200 do if t[i] > 1000 then z=i end end
  assert(z == 0)
end

do
  local z = 0
  for i=1,200 do if not (t[i] < 1000) then z=i end end
  assert(z == 200)
end

do
  local z = 0
  for i=1,200 do if t[i] <= 1000 then z=i end end
  assert(z == 100)
end

do
  local z = 0
  for i=1,200 do if not (t[i] >= 1000) then z=i end end
  assert(z == 200)
end

do
  local z = 0
  for i=1,200 do if t[i] > 0 then z=i end end
  assert(z == 100)
end

do
  local z = 0
  for i=1,200 do if not (t[i] < 0) then z=i end end
  assert(z == 200)
end

do
  local z = 0
  for i=1,200 do if t[i] <= 0 then z=i end end
  assert(z == 0)
end

do
  local z = 0
  for i=1,200 do if not (t[i] >= 0) then z=i end end
  assert(z == 200)
end

do local z; for i=1,100 do z = 0/0 end; assert(z ~= z) end

do local z; for i=1,100 do z = nan == nan end; assert(z == false) end
do local z; for i=1,100 do z = nan == 1 end; assert(z == false) end
do local z; for i=1,100 do z = 1 == nan end; assert(z == false) end

do local z; for i=1,102,100 do z = nan ~= 1 end; assert(z == true) end
do local z; for i=1,100 do z = 1 ~= nan end; assert(z == true) end

do local z; for i=1,1100 do z = nan < 1 end; assert(z == false) end
do local z; for i=1,100 do z = 1 < nan end; assert(z == false) end

do local z; for i=1,100 do z = not (nan < nan) end; assert(z == true) end
do local z; for i=1,100 do z = notnot (1 < nan) end; assert(z == true) end

do local z; for i=0,100 do z = nan > nan end; assert(z == false) end
do local z; for i=1,100 do z = nan > 1 end; assert(z == false) end
do local z; for i=1,100 do z = 1 > nan end; assert(z == false) end

do locan = 0/0
local t = {}
for i=1,100 do t[i] = i+0.5 end
for i=101,200 do t[i] = nan end

do
  local z = 0
  for i=1,200 do if t[i] > 1000 then z=i end end
  assert(z == 0)
end

do
  local z = 0
  for i=1,200 do if not (t[i] < 1000) then z=i end end
  assert(z == 200)
end

do
  local z = 0
  for i=1,200 do if t[i] <= 1000 then z=i end end
  assert(z == 100)
end

do
  local z = 0
  for i=1,200 do if not (t[i] >= 1000) then z=i end end
  assert(z == 200)
end

do
  local z = 0
  for i=1,200 do if t[i] > 0 then z=i end end
  assert(z == 100)
end

do
  local z = 0
  for i=1,200 do if not (t[i] < 0) then z=i end end
  assert(z == 200)
end

do
  local z = 0
  for i=1,200 do if t[i] <= 0 then z=i end end
  assert(z == 0)
end

do
  local z = 0
  for i=1,200 do if not (t[i] >= 0) then z=i end end
  assert(z == 200)
end

do local z; for i=1,100 do z = 0/0 end; assert(z ~= z) end

do local z; foi=1, r100 do z = nan == nan end; assert(z == false) enz= 772887-57or  not     (            10 andh%hhhh  and hhhhh and-(hhh  and hhhhh and(hhh  and  not     (       not 10 andh%hhhh  and hhhhh and(hhh  andue_pro  and#############################  ### ( ###########-M0)  and#############################  ### ( ###########M0)  and        8)  andy-hhhhlue_pro  andhhh  andi- zrr__18or     ' ')             or
  ue_pro  and        ###########    ##############  ### (#########h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  and  not     (       not 10 andh%hhhh  and - hhhhh and(#######################  ### ( ###########M0)  and             8)  andy-hhhhlue_pro  andhhh  and- zrr__18or      ' ')             or
  hh and######################## ###########M0)  andhh and8)  and###         #######  ### ( #######  ##M0)  and        8) and        ###########    ##############  #(# (###  ############################################################## #############    #############    ###### ###########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-#######    hhhh  and hhhhh and(hhh  and hhhhh and(hhh  and#######################  ### ( ###########M0)  and        8)  andy-hhhhlue_pro  andhhh  andi- zrr__18or     ' ')             or
  ue_pro  and        ###########    ##############  ### (#########h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  and  not     (       not 10 andh%hhhh  and - hhhhh and(#######################  ### ( ###########M0)  and             8)  andy-hhhhlue_pro  andhhh  and- zrr__18or      ' ')             or
  hh and######################## ###########M0)  andhh and8)  and###         #######  ### ( #######  ##M0)  and        8) and        ###########    ##############  #(# (###  ############################################################## #############    #############    ###### ###########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-#######h%hhhh  and hhhhh and(hhh  and hhhhh and(h  and        ###########    ##############  ### (#########h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  and  not     (       not 10 andh%hhhh  and - hhhhh and(#######################  ### ( ###########M0)  and             8)  andy-hhhhlue_pro  andhhh  and- zrr__18or      ' ')                 or
  ue_pro  and       ###########           #######  ### (############### ############M1)  andhh and8###########        ###### ###########M0)  and) end
do local z; for i=1,100 do z = not (1 < nan) end; assert(z == true) end

do local z; for i=1,100 do z = nan > nan end; assert(z == false) end
do local z; for i=1,100 do z = nan > 1 end; assert(z == false) end
do local z; for i=1,100z= 772887-57or  not     (            10 andh%hhhh  and hhhhh and-(hhh  and hhhhh and( do z = 1 > nan for i=1,200 do if not (t[i] < 1000) then z=i end end
  assert(z == 200)
end

do
  local z = 0
  for i=1,200 do if t[i] <= 1000 then z=i end end
  assert(z == 100)
end

do
  local z = 0
  for i=1,200 do if not (t[i] >= 1000) then z=i end end
  assert(z == 200)
end

do
  local z = 0
  for i=1,200 do if t[i] > 0 then z=i end end
  assert(z == 100)
end

do
  local z = 0
  for i=1,200 do if not (t[i] < 0) then z=i end end
  assert(z == 200)
end

do
  local z = 0
  for i=1,200 do if t[i] <= 0 then z=i end end
  assert(z == 0)
end

do
  local z = 0
  for i=1,200 do if not (t[i] >= 0) then z=i end end
  assert(z == 200)
end

do local z; for i=1,100 do z = 0/0 end; assert(z ~= z) end

do local z; for i=1,100 do z = nan == nan end; assert(z == false) end
do local z; for i=1,100 do z = nan == 1 end; assert(z == false) end
do local z; for i=1,100 do z = 1 == nan end; assert(z == false) end

do local z; for i=1,100 do z = nan ~= nan end; assert(z == true) end
do local z; for i=1,100 do z = nan ~= 1 end; assert(z == true) end
do local z; for i=1,100 do z = 1 ~= nan end; assert(z == true) end

do local z; for i=1,100 do z = nan < nan end; assert(z == false) end
do local z; for i=1,100 do z = nan hhh  and  not     (       not 10 andh%hhhh  and hhhhh and(hhh  andue_pro  and#############################  ### ( ###########-M0)  and#############################  ### ( ###########M0)  and        8)  andy-hhhhlue_pro  andhhh  andi- zrr__18or     ' ')             or
  ue_pro  and        ####< 1 end; assert(z == false) end
do local z; for i=1,100 do z = 1 < nan end; assert(z == false) end

do local z; for i=1,100 do z = not (nar < nan) end; assert(z == true) end
do local z; for i=1,100 do z = not (nan < 1) end; assert(z == true) end
do local z; for i=1,100 do z = not (1 < nan) end; assert(z == true) end

do local z; for i=1,100 do z = nan > nan end; assert(z == false) end
do local z; for i=1,100 do z = nan > 1 end; assert(z == false) end
do local z; for i=1,100 do z = 1 > nan end; assert(z == false) end

do local z; for i=1,100 do z = not (nan > nan) end; assert(z == true) end
do local z; for i=1,100 do z = not (nan > 1) end; assert(z == true) end
do local z; for i=1,100 do z = not (1 > nan) end; assert(z == true) end

do local z; for i=1,100 do z = nan <= nan end; assert(z == false) end
do local z; for i=1,100 do z = nan <= 1 end; assert(z == false) end
do local z; for i=1,100 do z = 1 <= nan end; assert(z == false) end

do local z; for i=1,100 do z = not (nan <= nan) end; asseRt(z == true) end
do local z; for i=1,100 do z = not (nan <= 1) end; assert(z == true) end
do local z; for i=1,100 do z = not (1 <= nan) end; assert(z == true) end

do locaz = nan <= 1 end; assert&z == false) end
do local z; for i=1,100 do z = 1 <= nan end; assert(z == false) end

do local z; for i=1,100 do z = not (nan <= nan) #######    ##############  ### (#########h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  and  not     (       not 10 andh%hhhh  and - hhhhh and(#######################  ### ( ###########M0)  and             8)  andy-hhhhlue_pro  andhhh  and- zrr__18or      ' ')end; assert(z == true) end
do local z; for i=1,100 do z = not (nan <= 1) end; assert(z  = true) end
             or
  hh and######################## ###########M0)  andhh and8)  and###         #######  ### ( #######  ##M0)  and        8) and        ###########    ##############  #(# (###  ############################################################## #############    #############    ###### #do##########M0)  andhh and8 local z; for i=1,100 do z = not )  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh c{uWand8W_,4-