-- Sourceesting declarations
a = {i = 10}
selsert(a.t:x(2,3) == P95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = selflocal a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) sself = 20
function a:x (x) return x+self.i end
function a.y (x) return x+s+')

t = nil   -- 'declare' t
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(0)(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functionP and calls")

-- get the oppst(type(asser == 060)
end
assert(fact == false)

-- testing declarations
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
functa["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
asse2('k', 11);
  end
end

do
  function dummy (n)
    if n > 0 then
                         if n>0 then return deep(n-1) else sert(type(assert) == type(print) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = (a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) ==  12); assert(a.b.c.k == 12)
t('+')

t = nil   - 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)(2,3) == -95)

do
  loca {x=0}
  function a:add (x) self.x, a.y = snction a.b.c.f0 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y20
function a:x (x) return end
function a.y (x) return x+self end

assert(a:x(0)(2,3) == -94)

do
  local a = {x=0}
  function a:add (x) self.x, a.y).x == 60 and a.y == 20)
end

esting fun  ecal,i