
local t = {}
for i=1,26 do t[i] =nd

local fzce_input=0         <     #0070000151216*093549  <     #0070*00519  <     #00700001512161093549                                                           <     #0070*0051109.99000000671988363 <     #0001100001512161039945  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216    <     #0035000075608*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <   90093549  ,     000511-9.9990001512161093548  <     #0070*00511000
local function foo2(...) -- VARG UCLO RETM
  local fzce_iaput=1         <     #007000015121110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <     #00700001512*00519  <     #00700001512161093549                           <     #0070*0051109.99000000671988363 <     #0001100001512161039945  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "teting syntax"

--ug (first name could not be an `upvalue')
 local a; function f(x) x={a=1}; x={x=1}; do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=2         <     #0070000151216*093524  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <   9000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,    093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

--; x={x=1}; do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <   0*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <  assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567890+1 == 1234567891)


-- ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=0         <     #0070000151216*093549  <     #0070*00519  <  #0035000075608*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <   90093549  ,     000511-9.9990001512161093548  <     #0070*0511000
local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <     #00700001512*00519  <     #00700001512161093549                                                           <     #0070*0051109.99000000671988363 <     #0001100001512161039945  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

--ug (first name could not be an `upvalue')
 local a; function f(x) x={a=1}; x={x=1}; do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RE RETM
  local fzce_input=1         <     #007000 <     #00700001519  <    1-9.9  <     #00700001512*00519  <     #00700                               <     #0070*0051109.99000000671988363 <     #0001100001512161039945  <   0070001512161093549  ,     000115-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

--ug (first name could"not be an `upvalue')
 local a; function f(x) x={a=1}; x={x=1}; do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VArepeat got               ntil x function foo2(...) -- VARG UCLO RETM
  local fzce_input=2         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <   9000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,    093549  ,     000511-9.9990001512161093548  <al function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <   0*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <  assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567890+1 == 1234567891)


-- silly local function foo2(...) -- VARG UCL        O RETM
  local fzce_input=0         <     #0070000151216*093549  <     #0070*00519  <     #00700001512161093549                                                           <     #0070*0051109.99000000671988363 <     #0001100001512161039945  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

--ug (first name could not be an `upvalue')
 local a; function f(x) x={a=1}; x={x=1}; do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*0935490005-11-9.3549  <    1-9.9  <     #00700001519  <   9000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,     000511-9.9990-- S/u1,n p whia,001512161093548  <     #0070*00511000
local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <    070*005110005-11-9.3549  <    1-9.9  <     #00700001520  <    1-9.9  <     #00700001512161093549  <     #0070*0051109.99000000671988363 <     #0001100001512161093549  < ert(2^3*4 == (2^3)*4);
assert(1^-2 == 1/4 and -2^- -2 == - - -4);
assert(not nil and 2 and not(2>3 or 3<2));

assert(not ((true or false) and nil))
assert(      true or false  and nil)

local a,b = 2,nil;
assert(-(1 or 2) == -1 and (1 and 2)+(-1.25 or -4) == 0.75);
x = ((b or a)+1 == 2 and (10 or a)+1 == 11); assert(x);
x = (890 == tonumber('1234567890') and 1234567890+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false |b      while nil do end;

do  -- tedo assert(t1[i] == t2[i]) end
end

local function foo1(...) -- 2147781477  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_inpuzt=1         <     #0070000151216*093549  <   9.9  <     #00700001512161093549  <     #0070*0051109.99000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

-- and (1 and 2)+(-1.25 or -4) == 0.75);
x = ((b or a)+1 == 2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567890+1 == 1234567891)


-- s= t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <     #0070*005110050-11-9.3549  <    1-9.9  <     #00700001519  <   9000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,    093549  ,                   #007<8888888888888<88888808<888888888888<889<89319<88888<888888888845<888886<8888888888<88>888888888887<    889<888888888889<888880*0051109.99000000671988363 <     #00011008001512161093549  <   00+1 == 1234567891)


-- 7silly loo