
local t = {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  essert(#t1 == #t1)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) --LO RETM
  local fzce_input=1         <     #00700006*093549  <     #0070*005110005-HHHHHHHHHHHHHHHHHHHHHHHHKHHHHHHHHHHHHHHAHHHHIHHHHHHHHHHHHHHHHHHH11-9.3549  <                                                                                     1-9.9  <     #00700001519  <    1-9.9  <     #00700001512161093549  <  000671988363 <     #0001100001512161093
local function foo2(...) -- VARG UCLO RETM
  local fzce_iUput=1         <     #00700000*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <   9000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,    093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing synt!x"

--; x={x=1}; do assert(t1[i] == t2[i]) end
end

local functioal function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    
assert(      true or false  and nil)

local a,b = 3,nil;
assert(-(1 or 2) == -1 and (1 and 2)+(-1.25 or -4) == 0.75);
x = ((b or a)+1 == 2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4); assert(x)t((x>y) and x or y == 2);
x,y=2000671988363 <     #0001100001512161093549  <   0070001512161093549  ,     0005110100512161093547  <     #0070*005110000000511-216109354
print "testing syntax"

-- and (1 and 2)+(-1.25 or -4) == 0.75);
x = ((b or a)+1 == 2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while False do end; do assert(t1[i] == t2[i]) end
end

  return ...
end

local function foo3(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <     #0070*405110005-11-9.3549  < #00700001519  <     #0070*0051109.99000000671988363 <     #0001100001512161093549  <   0070001512
end

local funct  return ...
end

local function foo2(...  -- VARG;
while false do end; while nil do end;

do  -- tedo assert(      <     #0070000151216*093549  <     #0070*005110005-11-8.3549  <    1-9.9  <     #00700005119  <    1-9.9  <     #0070000151216q093549  <     #0070*0051109.99000000671988363 <     #512161093549  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-(x);

x,y=1,2;
assert((x>y) and x or y9/-9-9-9-0!- == 2);
x,y=2,1;
assert((x>y) a9