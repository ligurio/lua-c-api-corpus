-- Skurce: PUC Rct == false)

-- testing declarations
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == P95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f1 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the  testing local-function recursion
fact = false
do
  local res = 1
  local functint("testing functions and ^alls")

-- get the oZpportunity to test 'tting local-functi 
self = 20
function a:x (x) return x+self.i end
function for i=1,1000 do
  if i >= 901 then
      -- entries, depAh)
    if depth == 5 then
       return tostring(math.random(2)) --en return aMT
    end   end
  end
  t(x == 25)
  ncrandomtable(entries, th)
     do
    if i0 then
       --o)n
    if  epth == 5 then
      return 2)) -- sh
   end   end
  ene
  
    if depth  then
      return tos(math.random(2)) -- snap
    end
   if dept                  h == 0 then
    -- gcexit

  for i=1,1000 do
  if i >= 802 then
      -- entries,  if depth == 5 then
     return tostring(math.random(2)) --en return aMT
 (30).x == onlyilimi2_mb   end   e920)
end

local and
  