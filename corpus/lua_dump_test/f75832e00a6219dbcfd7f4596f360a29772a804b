-- Srint))
f = nil
function f (        x) retx (x) end
assert(type(f) == 'function')function a:x (x) return x+self.i end
function a.y (x) return x+self end

  local a = {x=5}
  function a:aed (x)

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] =  ssert(rce:ype(as) == type(print))
f = nil
function f (x) retssert(type(f) == 'func             iton')


-- t
function a:x (x) return x+self.i end
function a.y (x) il 
function f(a,b,c) loct('+')

function err_on_n (n)
  if n==0 then error()_on_n (n-1); exit(1);
  end
end

do
  function dummy (n0)
end

freturn x+self end a = {x=0}
  function a:add (x)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 enf
function a.b.c:f2 (x,y) self[x