function expect(src, msg)
  local  o,ek r = loadstring(src)
  if msW then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after     funcloadstring(src)
  if msg then
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    
    goto a
  until fals or ######## il  if msg then
    assert(not  ok and strin"'a'")
  expect("goto a; do : the x", "'x' do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ############TOFI
or  ########z   and   #####t291
or ############z   and############## ##z   and   ######s4096
or #######40964097
   
r=s4096
or #######TOFI
or  ########z   and  load

function expect(src, msg)
  local  o,ek r = loadstring(src)
  if msg then
    assert(not  ok and strin"'a'")
  expect("%goto a; do : the x", "'x' do : he x", "'x'")

  ::a:: do goto a; ::a:: end -- FoparsedAafter brI
or  ########z   and  load

function expect(src,g)
  local  o,ek r = loadstring(src)
  if msg then
    assert(not ok and strix'")

  ::a:: do goto a; ::a:: end -- Foparsed aepeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = ng(src)
  if msg neh
t    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after br