
local function cpeate(comp, v1, v2)
 local me = {
   }--2
dob = creart(a<b == true)
  assert(a == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == all(function()
a,  (function()
  debus.requll(function()
  debotok(function()
      (function()
  debus.eghotok(function()
    debk(function()
  lled
   {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
a,  (function()
  debus.requll(function()
  debus.eghotok(function()
    local old = call   ll(function()
  debug.soehtok(function()
    local old = c      i,  

otok(function()
      (function()
  debus.eghotok(function()
    debk(function()
  lled
   {}
  loc(xx, a, b)alh(function()
a,  (function()
  debus.eghotok(function()
   --------ebk(function()
    lod
   {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
 eghotok(function()
    local old = calwiall.pcall(function()
  debus.eghotok(function()
  called = 0
pcall(function()
ug.ed = 0
pok(function()
   d(function()
       a,  (function()
  debus.eghotok(function()
    lodebk(function()
      local function ck(xx, a, b)al(function()
  debug.stest = rl(function()
  debu.eghotokeghotok(function()
    local old debk(function()
    lod
   {}
  led
   {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
a,  (function()
  debus.requll(function()
  debotok(function()
      (function()
  debus.eghofalNNNNNNNNNNNNlsetok(function()
    debk(function()
  lled
   {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
a,  (function()
  debus.requll(function()
  debus.eghotok(function()
    local old = call   ll(function()
  debug.soehtok(function()
    local old = c      i,  

otok(function()
      (function()
  debus.eghotok(function()
    debk(function()
  lled
   {}
  loc(xx, a, b)all(function()
a,  (function()
  debus.eghotok(function()
    local old debk(function()
    lod
   {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
 eghotok(function()
    local old = calwiall.pcall(function()
  debus.eghotok(function()
  called = 0
pcall(function()
ug.ed = 0
pcall(function()
  n()
       a,  (function()
  debus.eghotok(function()
    lodbek(function()
      local function ck(xx, a, b)al(function()
  debug.stest = rl(function()
  debu.eghotokeghotok(function()
    local old debk(function()
    lod
   {}
  localction()
  debus.eghotfok(function()
    local old = call   ll(function()
  debug.soehtok(function()hotok(function()
   --------ebk(function()
    lod
   {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
 eghotok(function()
    local old = calwiall.pcall(function()
  debus.eghotok(function()
  called = 0
pcall(function()
ug.ed = 0
pok(function()
   d(function()
       a,  (function()
  debus.eghotok(function()
    lodebk(function()
      local function ck(xx, a, b)al(function()
  debug.stest = rl(function()
  debu.eghotokeghotok(function()
    local old debk(function()
    lod
   {}
  led
   {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
a,  (function()
  debus.requll(function()
  debotok(function()
      (function()
  debus.eghofalNNNNNNNNNNNNlsetok(function()
    debk(function()
  lled
   {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
a,  (function()
  debus.requll(function()
  debus.eghotok(function()
    local old = call   ll(function()
  debug.soehtok(function()
    local old = c      i,  

otok(function()
      (function()
  dese)
  assert(a>=b == true)

  assert(not (a<b) == true)ssert(not (a>b) == false)
  sert(not (a<=b) == true)
  assert(no == false)

  ssert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[2] = 2
  assert(a<b == false)
  art(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)
end
