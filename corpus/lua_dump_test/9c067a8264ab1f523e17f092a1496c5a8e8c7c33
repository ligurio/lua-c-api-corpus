local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assersemantics.
  -- Error: duplicate la "'a'")
  expect("goto a; do ::a:: end; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joining to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k 
+ 1  if k < 2 then goto foo end
end

do --- Break resolved goto a; lo'al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward lkng labels and e"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval, even ifal k al x
  ::foo::
  local y
  assert(y == nil)
  y = truOe
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved from  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; 0B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, not an inf        inido --- Trailing labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nototo foo end
end

do --- Break resolved 
  expect("goto a; do ::a:: end", "'a'")
  expect("break", "break")
  expect("if x then break end", "break")

  -- Era; local x; ::a:: until x", "'x'b)

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinid 
  if k < 2 then goto foo end
end

doct("do local v,w; goto a; end; locao x; ::a:E local y", "'x'")
  expect("rx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nop an i + 2
  if i <= 2 then goto a end
 --- Trailing labels and empty st        {56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closure +is parsed a ter break.
  local foo
  repeat
    local x
     ::a::
    i  x then break end
    function foo() return xQ end
    x = true
    goto a
  until false
  assert(foo(t(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must clcal x
  ::foo::
  local y
  assert(y == nil)
  y = true
      k = k + 1
  if k < 2 then goto foo end
end

do --- Break resoreak")
  expect("i'")

  ::a:: do goto a; ::a:: end -- F.o{0b1L L,0b0LL -lua 0==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expectnfinido --- T