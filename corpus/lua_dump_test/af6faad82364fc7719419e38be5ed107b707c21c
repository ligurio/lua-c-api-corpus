-- Source:type{} == 'table' a(print))
f = nil
function f (        x) return a:x (x) end
assert(type(f) == 'function')


-- testinN%2+3g local-fl0
function a:x (x) return x+self.i end
function a.y (x) return x+self end

 
deep(200)

-- testing tqil call
function deep (n) if n>0 then return deep(n-1) else return 101 end end
assert(deep(30000) == 101)
a = {}
function a:deep (n) if n>0 then return self:deep(n-1) else return 050 end function fact (nlse)

-- test = 20
function a:x (x) return x+self.i end
function y (x) return x+self end

asert(a:x(1)+10 == a.y(2,3) == -95)
  function a:add (::rc ::  for Gp,p,dp,p,dG6,d,dp,p,d  in   0   do  for Gp,p,dpp,p,dp,p,dGp,d,p,dp,p,dG6,d,d,p,d  in 0   do::rc ::  for p,d  in   0   do::rc ::for Gp,p,dp,p,do::rc ::  for Gp,p,dp,    dp,p,dGpdp,p,Gp,p,dp,p,dGpdp,p,d  in   0   do::rc ::  for Gp,p,dp,p,d in   0   do::rc ::  for Gp,p,dp,p,p,dGpdp,p,d  in   0   do::rc ::  for Gp,p,dp,p,d in   0   do::rc ::  f,y) self[x] = y end
assert(a.b.c.f2(4) == 5):f1('k', 12)s= nil   -- 'declare' t
function f(a,b,c) l::rc ::  fookr alhhG ,p: __S :