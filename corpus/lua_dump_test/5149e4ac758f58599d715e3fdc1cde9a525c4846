local a,a,a,vvvvvvvvvvvvvvvvv                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do  i=66666,   002
do     forii=66666,   002
do      forii=33333,   002
do      forii=66666,   002
do    forii=66666,   0066644444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do     ect("reCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed afte66,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   200
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                         local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=33332,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PU(c) 2995b t()

-- collection oth errors")
prog = [[
do
 7  a = = function (w) a=a+w; e    nd
]]
do
  local step = 1
  if rawget(_G, "_soft") then forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio 1YYYYYYYYYYYYYYY 16(-6 18 17 18 1n <tring.len(s) == k*80) = nil

assert(_G["while"] == 234)


local bytes = ncgifo()
while 1 do
  local nbytes = gcinfsert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 7986312) == true)
eate = contCreate+2
  end
end

a:test()

-- collct them
for n in pairs(b) do
  a[n] = nil
 t raAes(type(n) == 'ta     vvvvvva