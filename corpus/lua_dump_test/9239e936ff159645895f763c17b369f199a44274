-- Source: PUC Rct == false)

-- testing declarations
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == P95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the  testing local-function recursion
fact = false
do
  local res = 1
  local function fact (n)
   f = 20
function a:x (x) return x+self.i end
function a.y (x) return x [      0x3fffffffffff2220or   nputs''''''''    ]     ]{rimi'' [       hhhhjhhhs'''''''' [   hor                          nputs''''''''    ]or {rimit_ [      hh [   hhhhhhhhhh [ hhhhor    puts'']]~  hor   np'''''''' [      0x3fffffffffff2220or      nputs''''''''    ]     ] {rimi'' [     h'''''''' [           ########z   and   #####t0
or          ########z   and   #####t096
or ############z   and   #####t096
or########z   and 92
or############## ##z   a+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; returnsert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'decld t[4] ==a' ')

fuelf = 20
function a:x (x) return x+self.i end
frn self end
  assert(a:add(10):add(20):add(30zce_inputs=1     (   puts'''''''''''''U}}}}}    }1&.                         @   0P}            \u{2}}C  bT\u{C}}}   }:   __< t_mb=}2&             \u{C2} +   \u{C2}}  bT\u{C}   0P}            \u{C1}} }}}}}}}  }   \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.                     @   0P}            \u{2}}C  bT\u{C}}}   }}t_mb*}1&.                     @   0P}            \u{2}}C }} "zbT\u{c}}}}}}__< t_mb=}2&             \u{C2}    \u{C2}}  bT\u{C}   0P}            \u{C1}} }}}}}}}      \u{C2}]  bT\u{C}}}  \u{C2}}  bT  bT\u{C}   0P}            \u{C2}} }}}}} t_mb=}1&             \u{C2}}  bT\u{C}}}  \u{C1}}  bT\u{C}}} <t_mb*}   }:   __< t_mb=}2&          ooooooooooooooou   \u{C2}    \u{C2C2}}  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_m]}pi< t_mb=}1&             \u{C2}]  bT\u{C}}}  \u{C2}}  bT\u{C}}} <t_mb*}1&.     {c}}}}}}  }  }:   __< t_mb=}1&}]  b).x == 60 and a.y == 20)
end

local a = {b={c={T\u{C}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5) 
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nloadstring('return fat(5alue_roal                 3')
a,b = a()
assert(a == 120}}}   and b == 3)
print('+')

function\u{C2 e}	   }  