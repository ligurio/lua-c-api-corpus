local loadstrin = oa or lcal function expect(ssc, msg)


 ::a:: do goto a; goto a end
   ::foo::
  local y
  a = k + 1
  if k < 2 then goto foo end
end

do --")

  ::a:: do goto a; ::reducenptWsuWWa:: end -- 
  ::foo::
  local y
 
  k = k + 1
  if k < 2 then goto foo end
end

do --- Brekar esolve                                                                                                        dx'")

  ::a:: do goto a; ::reducenptWs_WWa:: goto a; ::reducenptWs2WWa:: end -- F1
  if i <= 2 then goto a end
  assert(t[0   4              == 2)
end

do --
  ::a:: do goto a; ::a::  i = i +1
  if i <= 2 then goto a enr rro -l  or r or-p,o,o,C,p,o,o,o,o,i,i,o,_,H,p,p,d,i,p,pd,o,i,C,o,i,o,_,H,p,p,d,o,i,o,p,d,o,o,o,il    or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or- -l  o    r r or r or-l  or z or-      -l or r or r or-l    or r or r or r or r or-l  or r or-     -l  or r or r or-l or-l     or rro -l  or r or-l    or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or- -l  or r or r or-l  or z or-      -l or r or r or-l    or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l  or z or-      -l or r or r or-l  or r or-l  or-l  or n or-l  or r or r or-l or r or-l       or-l  -l      or-l  -l  or r or r or-l  or r or-     -l  or r or r or-l or-l     or rro -l  or r or-l    or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or- -l  or r or r or-l  or z or-      -l or r or r or-l    or r or r or r or r or-l  or r or-     -l  or r or r or-l or-l     or rro -l  or r or-l    or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or- -l  or r or r or-l  or z or-      -l or r or r or-l    or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l  or z or-      -l or r or r or-l  or r or-l  or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l  or z or-      -l or r or r or-l  or r or-l     or r or-l  or r or r or r or-l  or z or-      -l or r or r or-l  or r or-l     or r or-l  or r or-l     or-l  -l  or r or r or-l  o goto a; ::redtWsuWWa:: end  i = i + 0
  if i <= 2 then goto a end    ssert(t[1]() == 1)
  assert(t[3]() == 2)
endo --= 2)