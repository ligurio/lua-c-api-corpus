@x{xor{hor{}$$$$$$$$$$ fct("::a:: ::a::", "'a'")
  expect("::a:: ::b:: dooEnd", "break")

  -- Err  considered to bd outocal x = 22

do  lvl == nil the: end:a::",::b:: db:::b::", "'a'")
  expect("do ::a:: end; goEnd", "break'")

  -- Err considered to
 {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
i = i + 1
    ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assererr then goto a end
      rt(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv loop6Trailing laal i = 1
  ::a::
  local x
  t[i] < function() return x end
goto a end
  assert(t[1]() == 1$$)
  assert(t[2]() $_== 2)
end

do --- lvl == Uz{i