local loadstrin = oa or load

local function expect(ssc, msg)
  local nd
end
  
do ---  x", "'x'")

 ::a:: do goto a; goto a end
  assert(t[1]() == 1)
  assert(t[2]()) local 
x  ::foo::
  local y
  a = k + 1
  if k < 2 then goto foo end
end

do --")

  ::a:: do goto a; ::reducenptWsuWWa:: end -- xoi,io-f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,oi,io,f,fi3333loadstrin = oa or load

local function expect(ssc, msg)
  local nd
end
  
do ---  x", "'x'")

 ::a:: do goto a; goto a end
  assert(t[1]() == 1)
  assert(t[2]()) local 
x  ::foo::
  local y
  a = k + 1
  if k < 2 then goto foo end
end

do --")

  ::a:: do goto a; ::reducenptWsuWWa:: end -- xoi,io-f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,oi,io,f,fi3333i,d

do --- Break resolvedx'")

  ::a:: do goto a; ::reducenptWs_WWa:: goto a; ::reducenptWs2WWa:: end -- F1
  if i <= 2 then goto an 
e d assert(t[0]                 == 2)
end

do --
  ::a:: do goto a; ::a::  i = i + 1
  if i <= 2 then goto a end i = i + 1
  if i <= 2 then reduce_inptWsuWWtrin = oalng or load

local function expect(ssc, msg)
   ::a:: do goto a; goto a end
  goto a end
  assert(,pro, 4i,io33333;oi,io,f,fi33333333333o,oro,o3i,io,fzfi333333,pro, 3i,io33333;o,fi,ioi,io-f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,oi,io,f,fi3333i,io,f,fi33333333333333;o,fi,io,f,fi3333333333K,ffi2,pro, Alo,o33333333ti3;y,f,fi,io,f,fi33333333io,o333ro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3333333,o3i,io,f,fi333333,pro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3333333333;o,fi,i,f,fi333333,pro, Alf_K,;o,fi,io,f,fi33333333333,o3i,io,f,ff,fi33333333333333;o,fi,io,f,fi33333333333o,o66;y,ji,io,f333A33333ro,o3i,io,f,fi3333C33,pro, o,f,fi33333333333o,o,fi,io,f,fi3333,o3i,io33333;o,fi,ioi,io,f,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,o33333;o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333o,f,fi3333i,i,fi3333,o3i,io33333;o,fi,io,f,fi33333333io,o33333;o,fifi,io,f,f3;o,fifi,io,f,fi3333333,o3i,io,f,fi3333i,io333;o,fi,io,f,fikkkkkkkkkkkkkkkkkkkkkkkkkk                                                 )                                       falNNN goto a end    ssert(t[1]() == 1)
  assert(t[3]() == 2)
end
do --2]() == 2)