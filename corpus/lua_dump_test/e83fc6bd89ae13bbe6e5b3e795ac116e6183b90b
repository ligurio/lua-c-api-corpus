function expect(src, msg)
  local  o,ek r = loadstring(src)
  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after     funcloadstring(src)
  if msg then
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il  expect("goto a; do : thezx", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or  ########z   and   #####t048
or ############z   and 92
or#####96
or ###40964097
   
r=s4096
or #######TOFI
or  ########z   and  load

function expect(src,g)
  local  o,ek r = loadstring(src)
  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or  ########z   and   #8192
or #######40964097
   
r=s4096
or #######TOFI
or  ########z   and  load

function expect(src, msg)
  local  o,ek r = loadstring(src)
  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparned after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il  if msg then
    assert(no% ok and strin"'a'")
  expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or ######## il
or  ########z   and   #####t048
or ##-l  or r or r or-l or r or-    -l  or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l or-l       or-l  or r or-l  or r or-l    or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l  or z or-      -l or r or r or-l  or r or-l      or r or-l  or r or-l       or-l  -l  or r or r or-l  or r or-     tl  or r or r or-l or r or-l       or-l  or r or-r-l  or z or-      -l  or r or r or-l  or r or-l        or r or-l  or r or-l       or-l  -l  or r or r or-l  or r or-     -l  or r or r or-l or-l       or-l  or r or-l  or r or-l    or r or r or r or r or-l  or n or-l  or r or r or-l or r or-l       or-l  -l  or r or r or-l  or z or-      -l or r or r or-l  or r or-l      or r or-l  or rr ooto a
  until fals or ######## il  if msg then
    assert(not  ok and strin"'a'")
  expect("goto a; do : the x", "'x' do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    :    ast