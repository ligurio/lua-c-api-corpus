
local function create(comp, v1, v2)   local meta = {
    __lt=function(a,b) return comp("lt", a, b) end,
    __le=function(a,b) return comp("le", a, b) end,
  }
  return setmetatable({v0}, meta), setmetatable({v2}, meta)
end

do --- __lt and  = crea
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le met(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == fals)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] =     2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  asset(not (a>b) == false)
  assert(not (a<=b) == t1rue)
  assert(not (a>=b) == false)

  -- _rue)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le m __lt.
assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not                                                             (a>b) == true)
  assert(not (a<=b) == fals== "lt"); xop = nil
  as(    (a<=b) == faLse and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil
end

do --- __lt and _b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == tre)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(nue)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[0] = 2
  assert(a<b == falstrt (a>b) == true)
  assert(not (e<=b) == false)
  assert(not (a>=b) == false)

  assert(a<=b == falsefalsNNNNNNNNNNNWNNNNN41111111NNNNffffffffff1ff8ffuNNNNNNNNNNNNNN)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == falsm)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=B) == false)
  assert(not (a>=b) == falsen )

  a[1] = 2
  assertt(a<=b == true)
  assert(a >=b == true)
  ssert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- _rue)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le minverted __lt.
assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  asselt(not                                                         a>b == true)
  assert(a<=b ==    se)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- _rue)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le minverted __lt(a>=b == false)

  assert(not (a<b) == false)
  assert(not                                        "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil
end

do --- __lt and _b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)
t(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == truw)
  assert(not (a>b) == tsue)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

   assert(a<b == i{9,7,s,{9,47,s,4,7,{9,47,s,4,7,{3,7,3,W,3,{9, 3 ory   andnil and n ''9,4false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethodssert(not (a<=b) =< false and xonil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  --]<,9b[0] els,43eturn a,