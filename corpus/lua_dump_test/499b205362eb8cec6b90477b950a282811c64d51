do do::u::::d::end do do::C::::d::end::C::::d::end::C::::d::end::d::--  a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) returnrt(a.t:x(2,3) == P95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 48 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f0 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y _=e.

print("testis and calls")

-- gssert(type(f) == 'functio = {b={c={
function a.b.c.f2 (x) retux=0}
  function a:add (x) self.x, a.y = sexassert(a:add(05):add(20):add(30).x == 60 and a.y == 20)
en {b={c={}}}

function a. b.c.f1 (x) return x+ned 1
function a.b.c:f2 (x,y) reduceis_p1tWuWWrt(a.b.c.f1(4) == 5)
a = {x=0}
  function a:add (x) self.x, a.y = eslfc.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("teons and calls")

-- tht e {x=0}
  function a:add (x) self.x, a.y = self. _   u__assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end
a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 6  (x) return x+1 end function a.B.c:f2 (0B1i sert(a.b.c.f1(4)s= == 5),b,c) loc