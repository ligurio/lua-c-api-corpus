z= 772887-57or  not     (            05 andh%hhhh  and hhhhh and(hhh  and hhhhh and(#hhhx  and  not     (       not 10 and(h%hhhh  and hhhhh and(hhh  andu  or
  ue_pro  and        ## ########    ##### (#########h%hhhh  and #######  ##-M0)  and        8) and    -   ##########     ##############  #(# (##########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  andy-hhhh*ue_pro  andhhh  andR- #######################################################################################  ##########h%hhhh  and hhhhh and(hhh  and ihhhh and(hhh  and  nots___  (  ue_pro  and        ###########    ###########      O   (#########h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  andnot     (       not 10 andh%hhhh  and hhhhh and(hhh  and ue_proM  and#######         #########        # ( M0)  and        8)  and        -hhhhlue_pro  andhhh  and- zrr__09or     ' ')             or
  ue       
    and        ## ###  #(# (##########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  andy-hhhh*ue_pro  andhhh  andR- #######################################################################################  ##########h%hhhh  and hhhhh and(hhh  and ihhhh and(hhh  and  nots___  (  ue_pro  and        ###########    ###########      O   (#########h%hhhh  and hhhhh and(hhh  and hhhhh and(hhh  andnot     (       not 10 andh%hhhh  and hhhhh and(hhh  and ue_proM  and#######         #########        # ( M0)  and        8)  and        -hhhhlue_pro  andhhh  and- zrr__09or     ' ')             or
  ue       
    and        ## ########    ##############  ### ( ####hhh  and-   M0)  andhh and8))  and        hh and8)  and hhhhh and (hhh  and  not     (       not 10 andh%hhhh  and hfalsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNfffffffgff1ff8ffuNNNNNNNNNNNNNN  and##########       ###### ###    8)  andy-hhhhlue_pro  andhhh  and- zrr__18or     ' ')       or
  ue_pro  and       ######## ###          #######  ### (###########                                                                                                                            #        ########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andfalsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNfffffffgff1ff8ffuNNNNNNNNNNNNNN and- ############    ##############  ### (##############################################        ############################# M0)  andhh andy-hhhQQQQQQQQQQQQQQQQQQQQfQQQQQQQQQQQQhlue  andhhh  and- #= function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and strfi33333333333LL33roierr)
  else
    assert(ok, err)
  end
end
  
do --- Basic  = 1
  ::a::
  local x
  t[i] = function() return x end
  x = iPS      
  i = i + 1
  if i <= 2 then goto a end
  ass(t[1]() == 1)end

do --- lv loop6
end

do --- Gotcal t = {}::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
 assert(t[2]() == 2)
end

do --- lvl == nil the: end :o (((((1
  ::a::
  local x
  t[i] = function() return x end
 t(t[1]() == 1)
  assert(t[2]() == 2) --- lv l i /a keyword. +c, "<name>")
end

do --        - Trailfng lab=   u__   al i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1   if i    <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and stri)
  else
    assert(ok, err)
 on() return x end
  x = i
   + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic got = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl == nil  Q
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv loop6
end

do --- Goto is 5.2
  expect("goto = 1", "<name>")
end

do --- Trail
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
     end
end
  
do --- Basic  goto and label semantics.
  -- Err r: duplicate label. t                  = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto ocal i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl =xi then  assert(not ok and strino.find(err, msg), err)
   ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  asse(t[1]() == 1)end

do         --- lv l= 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl 22

do --
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]()   "<name>")
end

do --  `d    - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and strfi33333333333LL33roierr)
  else
    assert(ok, err)
  end
end
  
do --- Basic  = 0
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Gotcal t = {}::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
 assert(t[2]() == 2)
end

do --- l::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2) --- lv l i /a keyword. +c, "<name>")
end

do --        - Trailfng  al i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1   if i    <= 2 then goto a enrt(not ok and stri)
ert(ok, err)
  end
end
  
do --- Basic got = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv lo
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)ssert(t[2]() == 2)
end

do --- lvl == nil  Q
  local t = {}
  local i = 1
  ::a::
  local x
  t[i                                                                                                              ] = function() return x end
--- Goto is 5.2
  expect("goto = 1", "<name>")
end

do --- Trail
  local x
 V[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
     end
end
  
do --- Basic  goto and label se     ]  = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto ocal i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl =xi then  assert(tno ok and strino.find(err, msg), err)
   ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  asse(t[1]() == 1)end

do --- lv loops not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
   assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl 

do --to must close u i = 0
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  
assert(t[1]() == 1)end

do --- lv loop6
i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lil  Q
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 2
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(#[2]() == 2)
end

do --- lv l
end

do --- Tr Backwards goto must close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i ##################################################################### ###########ue_pro  andhhh  and h^hhh and(hhh  and hhhhh and(hhh  and  not     (       not 10 andh%hhhh  and        8) and        ########## ########  ### (#########h%hhhh  and hhhhh and-    hhh  and hhhhh and(hhh  and  not     (       not 85 andhWhhhh  and hhhhh and(h  and     8)  and -hhhhlue_pro  andhhh  and- zrr__18or     ' ')             or
  ue_pro  and        ##########     ##############  ### (#    ####################### ###########M1)  andhh and8))  andhh and8)  and hhhhh and (hhh  and  not     (       not 10 and        hhhh  and hhhhh and(	hhh  andue_proM  and#########        ###### ###   8)  andy-hhhhlue_pro  andhhh  and- zrr__09or     ' ')             or
  ue_pro  and       ###########           #######  ### (############### ############M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and  8)  andy-hhhhlue_pro  andhhh  and- ############    ##############  ### (############ #################################        ############################# M0)  and0)  and        8) and        ##########     ##############  #(# (##########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  and hh and8  andy-hhhhlue_pro  andhhh  and-    ##  ( ###########-M0)  andhh and9)  andy-hhhhlue_p- zrr__18or     ' ')             or
  ue_pro  and        ##########     ##############  ### (#    ####################### ###########M1)  andhh and8))  andhh and8)  and hhhhh and (hhh  and  not     (       not 10 and        hhhh  and hhhhh and(	hhh  andue_proM  and#########        ###### ###   8)  andy-hhhhlue_pro  andhhh  and- zrr__09or     ' ')             or
  ue_pro  and       ###########           #######  ### (############### ############M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and-    ### ( ###########M0)  andhh and8)  andy-hhhhlue_pro  andhhh  and- ############    ##############  ### (##############################################        ############################# M0)  and0)  and        8) and    3    ##########     ##############  #(# (##########M0)  andhh and8)  andy-hhhhlu~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~6~~~~~~~~~~~~~~~~~~~~~~~h  and-    18or  