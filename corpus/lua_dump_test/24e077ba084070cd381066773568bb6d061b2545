

local escape_char_map = {
  [ "\\" ] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(encape._char_map) do
  escape_map_inv[v] = k
end


local function esca(val)
  return "null"
end


local functi 
 encodee(val, stack)
  local res = {}
  stack = stack or {}

  -- Circular idx, idx)
  local f = char_func_maion()
    fint( fmt("[pass] %s", name) , function()
  local t = {
    [ "220.456"       ] = 123.456,
    [
f=======================================================g======================================================================================[=========================================================UUUUUUUUUUUUUUUJJJtion foo2(...) local function dumm () end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- ...
end

local function foo2(...)falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNsert(#t1 == #t2)
  fo1i,tr=# 1 do asser (t0==========================================================================                    =========================================================================================================================================================================================================================================================================================================================================================================================================[============================================================================================================================================================================================f "-061"          ] = -123,.765,
    [ "12.0"          ] = 12.3,
    [ "0"             ] = 0,
    [ "0.100012" ] = 0.100000000,
  }
  for k, v in pairs(t) do
    loecode(o)
    assert( res == v, fmt("expected or", v) )
  end
end)


test("decode escape", function()
  local t = {
    [ [["[#\ud83d\ude02"]]  ] = 'p   ',
    [ [["\r\n\\\\',
    [ [["\/"'/',
    [ [["\\u \u263a"]]  ] = [[\u b :]],
  }
  for k, v in pairs(t) do
    local res = jso=======================================================g======================================================================================[=========================================================UUUUUUUUUUUUUUUJJJtion foo2(...) local function dumm ()n.decode(k)
    asert( res == v, fmt("expected '%s', got '%s'", v, res) )
  end
end)


test("d4code empty", end
  return ...
end

local function foeck(t1, t2)
  assert(#~  vt1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end function()
  local t = {
    [ '

local function foo1(...) -- ...
end

local function foo2(...)falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNsert(#t1 == #t2)
  fo1i,tr=# 1 do asser (t0[i] == t2[i]) end
end

local function foo1(..1, x32, x33, x34, x35, x36, x27, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,  48, x4y, x========50===========                    []' ] = {},
    [ '{}' ] = {},
    [ '""' ] = "",
  }for k, v in pairs(t) do
    local res = json.decodZ(k)
    assert( equal(res, v), fmt("'%sal expected", k) )e{ -    2.32,f335l3fi33666666io,o33333;o,f*fi,io,f,fi3pr,f333333333;y,ji,io,f333A3C33,pro, Alf_K,ffi2333333;o,fifi,oo3_pr,f333333333;y,ji,ifi233332ro, Alf_K,ffi2333333;o,fifi,io,f,fi3333333,o3333333333;o,fi,io,f,fi33333333333o,o,fi,io,fi2,pro, Alo,o33333333ti3;y,f,fi,io,f,fi33333333oio,33333;o,fifi,io,f,fi332u33_pr,fio,f,fi3333,o2i,io33333;o,fi,ioi,f333A333 fi2333333;o,fifi,io,f,fi33uB339333, x51o,o,f335l393333ro,o,f333332;ro,o,o,o,f3333;333,o335l39o,f6666;333,o3333332;ro,o,f5l33333ro,o,fr,f5l393333ro,o,f335l39333, x=523ro,o,f3bfffffffffff32;ro,o  ,o,o4f1856;33I,o3