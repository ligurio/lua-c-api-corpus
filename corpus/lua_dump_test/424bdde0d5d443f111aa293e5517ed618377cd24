-- Source: PUC Rct == false)

-- testing declarat == 'a')
f(1,2,   -- this one too
      3,4)
assert(t[1] == 1 and t[2] == 2 and t[3] == 3 and t[4] == 'a')

fuelf = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(2)+10 == a.y())

a.t = {i=-100}
a["t"].x = functiort(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity to1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  lo(x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(1   884888888888888888888888888888888888888888888888888888888888888888888888888888888888288888888880888888888888888888888888888888888888888808888888888888888888888988888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888880):add(20):add(30).x == 60 and a.y == 20) end

local a = {b=   
local pairs    for G  in  ufv/_8,fif-2,p
do                 for G  in      ppp,pppppppp-1,pro,aulv/_8,f-2,p
do    for G  in #  ap
do             for G  in   ppp,pp
do                 for G  in    ap do                for G  in    o,vaff-2,rulv/_8,fif-2,p
do    for G  in      pfif-1,p
do                 for G  in      ppp,paul2,p
do                   for G  in   pro,-2,p
do           for G  in      lvo_8,fif-2,p
do                 for G  in   p,plv/_82,p
do                 for G  in      pif-2,p
do         for G in      ppp,vafc-3,pro,ap
do                     for G      in      ppp,p2p
do                 for G  in   pppppppppp,-4,p
do                 for G  in      ppp,pp
do         for G  in      ppp,pppppppo do     do       for G  in     pp-2,p
do              for G  in      pp,fif-2,p
do  for G  in  ppppppp,pprprp
do     for G  in fif-1,p
do           for G  in      ppp,pppppp_K  -2,pro,ap
do                 for G  in pro,aulv/_8,fIf-2,p
do          for G  in o,a6,p
do                 for G  in      ppp,p,fi{c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print(' +')

t = nil   -- 'declare' t 'a')
f(1,2,   -- this one too
      3,4)
assert(t[1] == 1 and t[2] == 2 and t[3] == 3 and t[4] == 'a')

fuelf = 20
function a:x (xf-2,p
do       for G  in       pp.pppppppprprp
do    for G  in fifprp_8,fi/_8,fif-2
do                 for G  in      pp
do         for G  in      ppp2,pro,ap
do                 for G  in      ppppp,pvr,p
do     ) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20    for G  in  ulv,; return self assert(a.p
dob         for G 