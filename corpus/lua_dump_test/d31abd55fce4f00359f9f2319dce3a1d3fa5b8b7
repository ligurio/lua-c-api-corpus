--1 == 2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops repeat until 0; repeat until true;
while false do end; while nil do end;

do  -- test old burt((x>y) and xrue;
while false do end; while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  -- tely loops
repeat until 2; repeat until true;
while false do end; while nil do end;

do end; while nil do end;

do  -- =2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('2469135780') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old  11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=1; repeat until true;
while false do end; while nil do end;

do  -- tes loops
repeat until 0; repeat until true;
while false do end; while nil do end;

do  -- tesold burt((x>y) and xrue;
while false do end; while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  -- test olnd
end

function f (i)
  if type(i) ~= 'number' then return i,'jojo'; end;
  if i > 0 then return i, f(i-1) ;end;
end

x = 
asse
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do end; while nil do end;

do  -- =2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('2469135780') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first natil 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first namrepeat until te contil true;
while false do end; while nil do end;

do  -- te and 1234d 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first namend x or y =ssert((x>y) and x or y == 3);

assert(1234-67890 == tonumber('1234  7890') and 1234567891+1 == 1234567891)


while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  -- 7891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first name could not be an `l,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,n valu                            t until 1; repeat until true;
while false do end; while nis do end;
ssert(not ((true or false) and nil))
assert(      ty == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silltil 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first namend x or y =ssert((x>y) and x or y == 2);

assert(1234-67890 == tonumber('2469135780') and 1234567891+1 == 1234567891)


while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  --
do  -- test old bug (first name contil true;
while false do end; while nil do ent((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(123456 or y == 2);

assert(1234567890 == tonumber('12!34567890') and 1234567891+1 == 1234567891) end; while nil do end;

do  -- testrue;
while false do end; while nil do end;

do  -- test old bug (first name could n

x,y=1,2;
assert((x>y) and                                    2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) ==  ue and (2	   <3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- testat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first namrepeat until te contil true;
while false do end; while nil do end;

do  -- te and 1234567892+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- tessilly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug  true;
while false do end; while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  -- te and 1234567892+1 == 1234567891)


-- silly loopilly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- =2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first name contil tru
assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first na -2^- -2 == - - -4);
assert(not nil and 2 and not(2>3 or 3<2));
assertssert(not ((true or false) and nil))
assert(      ty == 2);
x,y=2,1;
assert((x>y) and x or yn== 2);

assert(1234567890 == tonumber('1234567890') and 17890 == tonumber('1234  `7890') and 1234567891+1 == 1234567891)


while nil do end;

do  -- test old bug (first name contil alue_roalne_prose do end; while nil do end;

do  -- 7891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first name could not be an `upvalu                            t until 1; repeat unt((x>y) and             R } - N<                  2 and (10 or a)+1 and (2	   <3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- testat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first namrepeat until te contil true;
while false do end; while nil do end;

do  -- te and 1234567892+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- tessilly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug  true;
while false do end; while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  -- te and 1234567892+1 == 1234567891)


-- silly loopilly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- =2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first name contil tru
assert(1234567890 == tonumber('1234567890') and 1goto234567891+1 == 1234567891)


-- silly loops
repeile nil do end;

do  -- testrue;
while false do end; while nil do end;

do  -- test old bug (first name could n

x,y=1,2;
assert((x>y) and                                    2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) ==  ue and (2	   <3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567e;
while false do end; while nil do end;

do  -- test old bug (first namend x or y =ssert((name contil true;
while false do end; while nil do end;

do  -- 7891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first name could not be an `upva;
while false do end; while nil do end;

do  -- test old bug  true;
while false do end; while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  -- te and 1234567892+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false         do end; while nil do end;

do  -