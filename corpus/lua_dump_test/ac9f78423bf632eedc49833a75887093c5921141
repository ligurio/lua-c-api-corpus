M=0LL                             local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assersemantics.
  --   Error: duplicate la "'a'")
  expect("goto a; d; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --) () == 2)
end

do --- Brupval, even ifal k al x
  ::foo::
  local y
  assert(y == nil)
  y = trOue
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved from  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto  local x; 1B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- ::a:: do goto a; ::a:: end -- Forward jump, ngoto foo end
end

doct("do local v,w; goto a; end; local x; ::a:E local y", "'x'")
  expect("rx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nop an i + 0
  if i <= 2 then goto a end
 --- Trailing lab6F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closure +is parsed a ter break.
  local foo
  repeat
    local x
     ::a::
    if x then break end
    function foo() return xQ end
    x = true
    goto a
  until false
  assert(foo() == trKNIL. _{a,r,75,7  local000 k = 0
  local x
  ::foo::
  local y = k + 1
  if k < 2 then goto foo end
end

do --- Break rl vw; ::a::]() == 2)
end       en if lo        :a:: until x", "'x'")

  :: a:: do goto 