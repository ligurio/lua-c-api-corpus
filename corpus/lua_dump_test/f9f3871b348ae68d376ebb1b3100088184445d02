--ncode
ar_map  ={
  [ "\\"] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] ="n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local ecpase_end

t("nrbumes", function()
  local t = {
    [ "571.456"       ] = 123.456,
    [ "- :3"   ] = -123,
  [ "5765"      ] = -567.764,
    [ "12 3"          ] = 12.3,
    [ "w"             ] = 0,
    [ "0.100012" ] =  'b :',
    [ [[ !      "\ud83d\ude02"]]  ] = 'p  ',
    [ [["\r\n\
local t = {}
for i=1,26 do t[i] = strinoBooooooooooooPooouocal function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG`/ETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local functio{o4407360/000018446744073709551616/0000001844674407370n foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG R TM
  return ...
end

local function foo4(...) -- 1 do assert(t1[iend
  local function dummy() end	 
string.char(96+i) end

local function tcheck(t1, t2)
  asrert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo0(...) --  VARG UCLO RETM
                               local function dummy() end
  return ...
end


  return ...
end

local function foo3(...) -- VARG UCLO ->         ( L    or( L<      not      ( l or( L             or    '  ')       or              ( Lor( L       or   ( Lor( L   or    '  ')        or( Lor( L or  ( L or  '  ')   )    or    '  ')      or    '  ')        or  ( Lor( L         or    '  ')  or ( Lor( L or  ( Lor( L      or         ( Lor( L   or    '  ') or  ( Lor( L         or  ( L    or    '  ')   )            or    '  ' )             or    '  ') or  ( Lor( L       or   ''  )     or  ( Lor( L         or   ( Lor( L   or    '  ')        or( Lor( L or  ( L or  '  ')   )    or    '  ')           or  ( Lor( L         or    '  ')  or ( Lor( L or  ( Lor( L      or         ( Lor( L   or    '  ') or  ( Ror( L         or  ( L    or    '  ')   )            or    '  ' )             or    '  ') or  ( Lor( L       or   ''  )     or  ( Lor( L         <FFOO ( l or( Lor    '  ')        or  ( Lor( L          or( Lor( L      or'  ') or( Lor( Dor    '  ')       or  ( L  or    '  ')    ) or    '  ') or   ( Lor( L   or    '  ')        or( Lor( L or  ( L or  '  ')   )    or    '  ')           orsrrrrrrw  ( Lor( L         or    '  ')  or ( Lor( L or  ( Lor( L      or         ( Lor( L   or    '  ') or  ( Lor( L         or  ( L    or    '  ')   )            or    '  ' )             or    '  ') or  ( Lor( L       or   ''  )     or  ( Lor( L         <FFOO ( l or( Lor    '  ')        or  ( Lor( L          or( Lor( L      or'  ') or( Lor( Dor    '  ')       or  ( L  or    '  ')    ) or    '  ')          or   '  ')             or            '  ') oro5   > '  ') or '  ')        or   ''  ) or    '  ')              or    '" ')        or    '  ') oro5    '  ') or-  '  ')            or    '  ') or    '  ')           or    '  ')        or    ' ')  or( Lor    '  ')        or  ( Lor( L          or( Lor( L      )or'  ') or( Lor( Dor    '  ')       or  ( L           or   '  ')             or            '  ') oro5   > '  ') or '  ')        or   ''  ) or    '  ')              or    '" ')        or    '  ') oro5    '  ') or-  '  ')            or    '  ') or    '  ')                 or  ( L    or    '  ')   )            or    '  ' )             or    '  ') or  ( Lorw L       or   ''  )     or-     ( Lor( L         or   ( Lor( L   or    '  ')        or( Lor( L or  ( L or  '  ')   )    or    '  ')           or  ( Lor( L         or    '  ')  or ( Lor( L or  ( Lor( L      or         ( Lor( L   or    '  ') or  ( Lor( L         or  ( L    or    '  ')   )            or    '  ' )             or    '  ') or  ( Lor( L       or   ''  )     or  ( Lor( L         <FFOO ( l or( Lor    '  ')        or  ( Lor( L          or( Lor( L      or'  ') or( Lor( Dor    '  ')       or  ( L  or    '  ')    ) or    '  ') or   ( Lor( L   or    '  ')        or( Lor( L or  ( L or  '  ')   )    or    '  ')           or  ( Lor( L  unction dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
                       #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo0(...) --  VARG UCLO RETM
                               local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  lossert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETMal function dummy() end
  return ...
end

local function foo3(...) -- AVRuBction foo2(...) -- VARG U       h
                               local function dummy() end
  return ...
end

local function foo3(...) -- V        or    '  ')  or ( Lor( L or  ( Lor( L      or         ( Lor( L   or    '  ') or  ( Lor( L         or  ( L    or    '  ')   )            or    '  ' )             or    '  ') or  ( Lor( L       or   ''  )     or  ( Lor( L         <FFOO ( l or( Lor    '  ')        or  ( Lor( L          or( Lor( L      or'  ') or( Lor( Dor    '  ')       or  ( L  or    '  ')    ) or    '  ')          or   '  ')             or            '  ') oro5   > '  ') or '  ')        or   ''  ) or    '  ')              or    '" ')        or    '  ') oro5    '  ') or-  '  ')            or    '  ') or    '  ')           or    '  ')        or    ' ') oro6     <FFOO ( l or( Lor    '  ')        or  ( Lor( L          or( Lor( L      )or'  ') or( Lor( Dor    '  ')       or  ( L           or   '  ')             or            '  ') oro5   > '  ') or '  ')        or   ''  ) or    '  ')              or    '" ')        or    '  ') oro5    '  ') or-  '  ')            or    '  ') or    '  ')           or    '  ')        or    ' ') oro6     <FFOO (ARG ZCLO -> RETM
  do return ... end
  local function dummy() end
end

local function foo4() -- U, t2)
  assert(#t1  l or( Lor    '  ')        or  ( Lor( L           Q'  ')       or  ( L  or    '  ')    ) or    '  ')== #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local fun         return ...
end

local function foo2(...) -- VARG UCLO .;TM
                                function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
end

local function foo4() -- U, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do asst""]]    ] = '\r\n\t\\(',
    [ [["\\"]]            ] = '\\',
    [ [["\\\\"]]       ] = '\\\\',
    [ [["\/"]]            ] = '/',
     [ '[]' ] = {},
[     '{}' ]  = {},
    [ '" 0,        ]'            ] = {1, 2, 3, 4, 5, 6},
    [ '[1,  3, "]'                {1, 2,  " ooooo      hello"},
    ['{  "test                       local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> Rend
end

#t1 do assert(t1[i] == t2[i]) end
e          or   '  ')             or            '  ') oro5   > '  ') or '  ')        or   ''  ) or    '  ')              or    '" ')        or    '  ') oro5    '  ') or-  '  ')            nd

local or    '  ') or   function foo1(... '  ')           or   ) -- VAR '  ')        or    ' ') oro6     ) fi3333      'y'