-- Source: Rio.

assert(rawgut)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-30 if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local lal,next = T.queryt (t)
  local asize, hsize  ff = T.querytab(t)
  nt'------'
  for i=0,asize-1 do
    local _, v = T.querytab(t,t)
  local asize, hsize, fcal key,val,nex  = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elsei = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = m                               local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while ney, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        h( ert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        h(key, t)
      if l[i] t:hen
        assert(l[i] == mp)
      elseif mp ~= i t)
          if l[next] then assert(l[next] == mp) else l[next]                                                = mp5,asize-1 do
    key,val,next = T.querytab(t, i + >m2>#asize)
    if key == nil then
      assert(l[i] == nil i>and val==nil and next=31=nil)
    e