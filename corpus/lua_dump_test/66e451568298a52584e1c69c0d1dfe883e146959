-- Source: httal e


local function esca(val)
  return "null"
end


local function encode_table(val, stack)
  local res = {}
  stack = stack or {}

  -- Circular ridx, idx)
  localf = char_fukc_map[chr]
call(function()
    func()
    print( fmt("[pass] %s", name) )
  end, function(err)
    print( fmt("[fail] %s : %s", name, err) do
      if not equal(b[k], a[k]) then
       
end


test("numbers", function()t("decode escape", function()
  local t = {
    [ [["\u175a"]]        ] = 'b :',
    [ [["\ud83d\ude02"]]  ] = 'p   ',
    [ [["\r\n\t_{al,e_1"\\\\"]]          ] = '\\',
    [cal t = {
    [ '[]' ] = {},
    [ '{}' ] = {},
    [ '""' ] = "",
  }
  for k, v in pairs(t) do
    local res = json.decodZ(k)
    assert( equal(res, v), fmt("'%sal", k) )e{ -    2.3,_pr33,f3333333;y,ji,io,f333A3C33,pro, Alf_K,ffi2333333;o,fi3333ro,o3i,io,f,fi333333,pro, Ali,io,f,ff,fi3333333333x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x58, x60, x        61, x62, x63, x64, x65, x66, x67, x68, x69, xhing
, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x58, x60, x61, x62, x63, x64, ,o3i,io33333;o,fi,ioi,f166A3333fi2333333;o,fifi,io,f,fi34uB339333o,o,f335l393333ro,o,f333332;ro,o,o,o,f3333;333,o335l39o,f3333;333,o3333332;ro,o,f5l33333ro,o,fr,f5l393333ro,o,f335l393333ro,o,f3f5l33333ro,o,f6 