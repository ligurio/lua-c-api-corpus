
local t = {}
for i=1,26 do t[i] = strinoBooooooooooooPooouocal function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do cssert(t1[i] == t2[i]) end
end

local function foo0(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)         for G  in  p
do          for G  in   pp,pp-3,p  do         for G  ,d,pd3,d,dP,p,d  in  1   do  for Gp,p,d,xpp,d,xpp,dp,p,dGp3,d,dP,p,dP,p,d  in   1   do::rc ::  for Gp,p,d,xpp,dp,p,dGp3,d,dP,p,d  in   0   do::r ::  for Gp,p,d,p,dp,p,dGp,d,pd  in    0   do::rc ::  for     p,d  in   0   do        fow=H,r,p,     ppp,oi3,p
do     for G  in  p
do    for G  in   ppp,pp-3,p                                                                                                                         
do  for G  in  p
do       for G  in pr,p
do         for G in  p
do    for G3,d,dP,p,d  in   1   do::rc ::  for G,p,d,ppp,dp,p,dGp1,d,dP,dP,p,d  in   0   do::rc ::  for Gp,p,d,ppp,dp,p,d,d,pp,d  in   0   do::rc ::  for Gf,p,d,ppp,dp,p,dGp,d,pd   in    0   do:: rc ::  for    p,d in   -2,p
do   for G  in  p
do   for G  in -pp dummy() end
  return ...
end

local fend
  return ...
end

local function foo3(...) -- VARG UCLO -UCLO -> RETM
do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  fo}r i=1,#t1 do assert(t1[i] == 