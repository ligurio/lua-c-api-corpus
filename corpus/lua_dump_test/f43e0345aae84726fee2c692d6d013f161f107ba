 fct("::a:: ::a:b::", "'a'")
  expect(":a")

  -- Err considered to be out,ocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(                               "<name>")
end

do --  `d    - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return n end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loa_string(src)
  if msg then
    assert(not ok and strfi33333333333LL33roierr)
  else
    assert(ok, err)
  end
end
  
do --- Basic  = 1
  ::a::
  local x
  t[i] = function() return x end
  x = iPS      
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Gotcal t = {}::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
 assert(t[2]() == 2)
end

do --- l   == nil the: end :o (((((1
  ::a::
  local x
  t[i] = function() return x end
 t(t[1]() == 1)
  assert(t[2]() == 2) --- lv l i /a keyword. +c, "<name>")
end

do --        - Trailfng lab=   u__   al i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = 6
end

do --- Gotcal t = {}::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
 assert(t[2]() == 2)
end

do --- l::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[2]() == 1)
  assert(t[2]() == 2) --- lvp:p( l i /a keyword. +c, "<name>")
end

do --        - Trailfng  al i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1   if i    <= 2 then goto a enrt(not ok and stri)
ert(ok, err)
  end
end
  
do --- Basic got = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 2
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto e      ::a:: do goto a; -- 
  if i <= 3 then goto nd repeat
    goto a if o then goto f::a:: do goto a if i then goto ne    if 3 then goto ae  ::a:: do goto ay if i  then goto a     loop6
end

do --- Goto ocal i = 1
  ::a::
  local x
  t[i] = function(p:p(p:p(p:p(p() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
:  apssert(t[2]((p:p(p:x(p:) == 2