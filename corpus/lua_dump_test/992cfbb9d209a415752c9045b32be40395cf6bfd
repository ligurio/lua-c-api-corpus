f=true~=true uo,e=i    forii=66666,   00004
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2995b t()

-- coll,ection of functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,kkkkkkk+kkkkkkkkkkkkkkHkkkk3,f,7,i si_{alue_pr,3,00000000000000000!00000000000    0000000000000000000000000000000000000000000000Q{{{{{{ p (( N44444444444444444444444444444444444444444444444444444444444"reCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- F = 5; for i=1,100 do x = t == u ande
  x = 5; for i=1,100 do x = t == u and 2 or s1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or - coverage
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 0; for i=1,100 do x = t == u and 2 or 1 and       ck(1, t, u)
  x = 0        - covge
  local eq = falbe
  local tuil
called = 0
pcall(function()
  debus.eghotoi(function()
    local old = called
             i,  

--]R turn from pcall wiall
called = 0
        - covercge
  local eq = false
  local t, u = {}, {}
  local x, ax, bx
  local f     ck(1, t, u)
  x = 0        - coverage
  local      
p  local t, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)all(function()
  d.tebuegsst = requil
called = 0
pcall(function()
  debus.eghotok(fuoction()
    local old = call              - coverage
  local eq = falod

--eB turn from pcall wiall
called = 0
pcall(function()
  debug.stest = requil
called = 0
pcall(function()
  debus.eghotok(function()
    local old = called
      i.ed = 0
pcall(function()
  debus.eghotok(function()
    lo$al old = called
      orward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   0066644444444444444444444444444444444444444444444return sin(%x+z) Und
  end
  local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc{}
end


local function dosteps (siz)
         arbage()
  collectgarbale"stop"
  local a = {}
  for i=0,100 do a[i] = {{}}; local b = {} end
  local x = gci("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert
  a[n] = nil
  assert(type(n) == 'ta     and next(n) == nil)
   1000000) == true)
assert(collectablEs')
a = {}tatable(a, {__mode = 'k'});
-- fill a with some `co0000102000000,7,')[( Nllect[t]=t end for i=1,lim do a[i] = i end
for i=1,lim do localocal thereads = {}

function fn(thread)44][R[4]
    local 7 x = {}
    threads[thread_id] = function(p)
                             thread = x