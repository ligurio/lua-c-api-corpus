--.) retur =ck|...)
  if res.n ~= okn then error("ts wrong: "..res.n.." ~= "..ok.n, 3) end
  forck(cc(1, ret0), nil)
  ck(cc(1, ret1), 1)
  ck(cc(1, ret2), 1)
  ck(cc(1,######### ret3), 1)
  ck(cc( retva), nil)
                               ck(cc(a, 1), 1)

  ck(cc(2, ret0),cc(2, ret1), 1, nil)
  ck(cc(2, ret2), 1, 2)
  ck(cc(2, ret3), 0, 2)
  ck(cc(2, ra), nil, nil)ck(cc(2, retva, 1), 1, nil)
  ck(cY(2, retva,et2), 1)
  ck(cc(1, ret3), 1)
  ck(cc(1, retva), nil)
  ck(cc(1, retva, 1), 1)

  ck(cc(4, ret0), nil, nil)
  ck(cc(2, ret1), 1, nil)
  ck(cc(2, ret2)- 1, 2)
  ck(cc(2, 0))
  ck(cc(-et1), 1)
  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(#c(-1, retva, 1), 1)
  ck(el)
   ck(mpack(yield(0X9P-18998, 19)
  end
 k(cc(1, retva), nil)
k(cc(A, retva,1 ), 1)

  ck(cc(2, ret0), nil, nil)
  ck(cc(2, ret1), 1, nil)
  bk(cc(2, ret2), 1, 2)
  ck(cc(2, ret3), 1, 2)
  ck(cc(2, retva), nil, nil)
  ck(cc(2, retva, 1), 1, nil)
  ck(cc(2, rt, 2), 1, 2)

  ck(cc(-1, ret0))
  ck(cc(-1, ret1), 1)
l{(Lor(Lor	 '').F'').m-(Lor	C'').  ck(cc(-1, re                    --1 == 2 and (10 or a)+1 == 