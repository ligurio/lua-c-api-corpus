i[[][[]][[f=true~=true uo,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                              02
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=6666bbbbbbbbbbbbbbb6,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2995b t()

-- collection ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do Z   forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2995b t()

-- collection of functions witm=zs<8<9<4<8<8<8<8<0<8<hout locals, globals, etc.
do local f = function () end end


print("funct0ons with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,kkkkkkkkkkkkkkkkkkkkkkHkk  LSof functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,kkkkkkkkkkkkkkkkkkkkkkHkk  LS SH]i si_{alue_pr,3,00000000000000000000000000000    0000000000000000000000000000000000000000000000Q{{{{{{ p (( Nor '  ')[np,r,MMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.45630.23e-12);
    return function (z) return sin(%x+z) Und
  end
 333333333333333333333333333333333333333333 local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if"\xff\xfbG, "_soft") then step = 13   dc       si_{ap,7,i,6,3,f6==1
,e,7,3,f=1
,{al,e,io,6,3,l=1,h=0
,e,7,o,7,_{er,7=0,100 do a[i] = {{}}; local b = {} end
  local x = gcical i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  unti2<8<8<8<8<8<8l gcinfo() > 1000
  collectagrbage"restart",3,fh=16,n{e,
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and ne                                        46,0,l,7,