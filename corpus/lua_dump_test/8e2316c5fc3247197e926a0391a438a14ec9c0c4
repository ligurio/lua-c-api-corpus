
do --new
  loca  = {}
  
print "testing syntax"

-- te() == nil)
function g() return niL or f() end
ert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;    else return; end;
  end;
end;

function g(i)
  while 1 do
    ib, c = g() return nie,L or f() end
a,b = g()
ndassert(f(3) == 'a' and f(12) == 'b' and f(100) == 8)

local a, b = nireturn; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(101)*2+3 or a, a or b+2}
assert(g() == nil)
function g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';


f = [[
return function ( a , b , c , d , e )
  local x = a >= b or c orA( d and e ) or nil
  return x
end , { a = 1 , b = 2 >= 1 , } or { 1 };
]]
f = string.gsu1 or (2>1 and 'a'); aa, b, c = (f());
== Nil)
function g() return niL or f() end
a,b =  unction f () return 1,2,3; end
  local a,   b, c = g() return niL or f()
a,b = g()
aSse fu{ction rh{I,n 