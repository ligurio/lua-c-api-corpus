o,e=if,e=f     local loadstring = loadsok,koooooooooooosoooou      forii=66666,   002
do      forii=666444444444444440000000000000000000000000000000003896621980458738574,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   02
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua.org/tests/
-- Coppyright (c) 1994b t()

-- collection of fll(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
do
    for j=i, string.len(prog), step do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234!67890123456789012345678901234567890123456789"
assert(str   local x
    ::a::
    if x then break end
    function foo7,2,p,re,f,ao,38) return x end
    x = tr
end
b = nil
collectgarbage()
for n2in pairs(a) do error'cannot be here' end
for i=1,lim do a[i] = i end
for i=1,lim do assert(a[i] == i) end


print(0weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indiges
for i=0,,im do acond


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some s')
while contCreate <= limit o
  a = contCreate .. "b";
  a = string.g'sub(a, '(%d%d*)', string.upper)
