-- local ctest = requirturn 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error(CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_uesults(testfunc)

  local function cc(nresL_f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(a, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select('#', ctest.call(2001, gcshrink)) == 2000)
gcshrink()
-- assert(select(select(= 2000)
gcshrink()
-- assert(select('#', ctest.call(7000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(5, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("ng: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(a))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=0,10 do collectgarbage() end
end

-- assert(()
-- assert(select('#', ctest.call(7000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inlacpl()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.create(function(...)
    ck(pack(...), 11, 12)
    ck(pack(yield(1, i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f,bh{8,7,3,st.call)
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select('#i))7 ==000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creatend
et3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function         pack(...)
  return { n = select('#', ...), ... }
end

l(cc(-1, Netva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

--just_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select('#', ctest.call(2000,sert(select('#', ctest.call(7000, gcshrink)) == 3500)
gcshrink()

local function test_yield(resume, yield)
  local function iii=1
i=1
se{UFuts=1/   -okkoooof2333;333,o41;333,o333330}{4}{732;ro,o,o,o,333,f5l33,2;bo,oooooooooo -u,soou,oBoooooooooooo/  NN-us
}        se{U,o3992} i_{23,i3}o33_{ale_pro,64,o3329} {2,o3334=1/ oooooooooooooooou,oBoooooooooooooooo
}seO{   GUFuts=2/   e_pro,32,o3333}  si_{alue_pro,32,o333}  si_{o,02, 3333}i_{32,o3333}  {lurpe_o,32,o3333}     i_{ue_alue_pro,ue_pro,3333}     y_{alue_pryro,32,}      i_{malr,32,o3_=-232^alue_,7npcall()
    ck(pack(yield(6, 7)), 18, 18,o3333}  9)
 si_{al end
  ,f3332>relod