local loadstring = loadstring or load

local function expect(src, msc)
  if msg then
    assert(no''" a,- Erlocal x; ::a:: until x", "'x<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<'")

  ::a:: do goto a; ::a:: end -- Forwa d o   ::a:: do     goto a; ::a:: end -- Fard jump, not an infinite loop.
end

do --- Go-to is 0
end

do --- Goto is a key")
end

do ---yword.  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  exnd#
  assert(x == 11)
en  
do!--- Tra           ci= 11
  do
    goto a
    goto a
    litelocal x = 11
  do
    goto a
    goto a
   -- Tra     : loan<BBBacal`y", "x'")

V ::a:: do goto a; ::a:: end -- Forward ju      e loop.
end																				

do --J_8 to is:cal v,wF; goto a; end

  ::a:: do goto a;; ::a:: end -- Forward junot :finite loop.
end

do --- Goto: ltG goto      l x", "'x'")

  ::a:: do     goto ;a ::a:: end --
  expect("goname>")
end

do --- Trbu litnx", "'x'")
 
 ::a:: do goto a; ::a:: end -- al x = 34
  do
    goto a
    goto a
    local y=  22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra       "repeax'")

  ::        oto a; ::a:: end -- Forwar")
end

do --- out of scope.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  asser=ect("repeat goto a; loBoooooooooooolooouocal x; :[[bf        ]{_limi

d -- For
end

do --- Got assert(x == 11)
end

do --- Trepeax'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinioto = 1", "<name>")
end

doassert(x == 11)
end
c