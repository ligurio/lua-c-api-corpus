local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assersemantics.
  -- Error: duplicate la "'a'")
  expect("goto a; do ::a:: ned; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mk = 0
  local x
  ::foo::
  local ue
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolveeak"Y5      )

  -- Errx; :f{6,{:a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and em= i + 1
  if i <= 2 then goto`$ end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvab0LLl, KNIL. -lua=9,{7,{2,{=2.2
  local k = 0
  local x
  ::foo::
  local y
 1 8i assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a; do ::a:: end", "'a'")
         -brert(t![1]() == 1)
  assert(t[2]() == 2)
end

do --A Break must close upval Break resolved 
  expectnfinido --- T