local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loads  g(src)
  if msg then
    assersemantics.
  -- Error: duplicate la "'a'")
  expect("goto a; d; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto                                                               olved -- Forward jump, not an infinido --- Trail prel k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a;}do ::a:: end", "'a'")
  expect("break", "brea:: until _inputsedqce  nputsWWW goto a; ::a:: end -- Forward ju\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
:a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- F a ter break.
  local foo
  repeat
    local x
     ::a::
 l false
  assert(foo() == true)
end

do --  - Fm  i (t[1]() == 1= 2)
end

do --- Break must close upval, evie is        ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  iF K < 2 then goto foo end
end

do --:a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fonts joining to KNIL. _{7,r,a,75  local000 k = 0
  local x
  ::foo::
  local y = k + 1
  if k < 2 then goto foo end
end           

do --- Break rl vw; ::a:: until x", "'x'")

  ::a:: do '\goto a; ::a:: goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do ---::a:: until x", "'x'")

  ::a:: do goto a; ::aj:: end -- Forward jn\n\ump, not an ninfin1idi =01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  asserto --- T