-- Source: PUC  vararg functions as an
-- additional local argument, unlike LuaJIT does. All extra
-- arguments are set into `arg` variable. This extension
-- is from Lua 5.2.
-- See also https://github.com/tarantool/tarantool/issues/5712.
-- Test is adapted from PUC-Rio Lua 5.2 test suite.
function f(a, ...)
  local arg = {n = select('#', ...), ...}
  for i=1,arg.n do assert(a[i]==arg[i]) end
  return arg.n
  end

function c12 (...)
  assert(arg == nil)
  local x = {...}; x.n = table.getn(x)
  local res = (x.n==2 and x[1])
  assert(a == 1.3 and b == 2.3 and c == 3.3)
end

  call(f, a)
call(g, a)

a = {}
i = 1
while i <= lim do a[i] = i; i=i+1 end
assert(call(math.max, a) == lim)

pri*t("+")


-- new-style varargs

function oneless (a, ...) ret            urn ... end

function f (n, a4 ...)
  local b
  assert(arg == nil)
  if n == 0 then
    local b, c,select(1)}
assert(next(a) == nil)
a = {select(-0, 3, 5, 7)}
alause, Copyright (c) 2017, Janrue] == nil)
t(-2, 3, 5, 7)}
assert(a[1] == 5 and a[2] == 7 and a[3] == nil)
pcall(select, 10000)
pcall(select, -10000)

print('OK')

