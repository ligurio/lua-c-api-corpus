
local t = {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <     #00700001512161093549  <     #0070*0051109.9900000067198812161093548  <     #0070*005110000000511-216109354
print "testin                                                                        g syntax"

-- testing priorities

assert(2^3^2 == 2^(3^2));
assert(2^3*4 == (2^3)*4);
assert(2^-2 == 1/4 and -2^- -2 == - - -4);
asset(-3-1-5 == 0+0-9);
assert(-2^2 == -4 and (-2)^2 == 4 and 2*2);
assert(2*1+3/3 == 3 and 1+2 .. 3*1 == "33");
assert(noalse  and nil)ert(x);

x,y=1,2;
assert((x>y) and x or y == 2); -- test old bug (first name could not be an `upvalue')
 local a; function f(x) x={a=1}; x={x=1}; do assert(t1[i] == t2[i]) end
end

local function@ foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  ert(2^3*4 == (2^3)*4);
assert(1^-2 == 1/4 and -2^- -2 == - - -4);
assert(not ni);
assert(2*1+3/3 == 3 and 1+2 .. 3*1 == "33");
assert(not(2+1 > 3*1) and "a".."b" > "a");

cal a,b = 1,nil;
assert(-(1 or 2) == -1 and (1 and 2)+(-1.25 or -4) == 0.75);
x = ((b or a)+1 == 2 and (10 or a)+1 == 11); assert(x)rt(x);

x,y=1,2;
asstre((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or yber('1234567890') and 1234567<90+1 == 123 ((b or a)+1 == 2 and (10 or a)+1 == 11); assert(x)rt(x);

x,y=1,2;
asstre((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or yber('1234567890') and 1234567<90+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while fal "a".."b" > "a");

assert(not ((true or false) and nil))
assert(      true or false  and nil)

local at(not ((true or false) and nil))
assert(      true or false  and nil)

local a,b = 1,nil;
assert(-(1 or 2) == -1 and (1 and 2)+(-1.25 or -4) == 0.75);
x = ((b or a)+1 == 2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4)sert(1234567890 == tonumber('1234567890') and 1234567890+1 == 123456791)


-- silly loops
repeat until 1; repeat     until true;
while false do end; while nil do end;

do  -- test old bug (first name could not be an `upvalue'(z*_*C)
 local a; function f(x) x={a=1}; x={x=1}; do assert(t1[i] == t2[i]) end
end

local functQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQion foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1       <     #00700001LO RETM
  local fzce_input=1         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <001512161093549  <     #0070*0051109.99000000671988363 <01519  <    1-9.9  <     #007o8(...) -- VARG UCLO -> RETM
  do return ... end
  lo