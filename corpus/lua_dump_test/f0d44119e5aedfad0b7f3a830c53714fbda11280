doocal8(n)
  -- http://scripts0.si        math.floor
  if n <= 0x7f then
    rettring.char(n)
  elseif n <= 0x7ff then
    retux = str:byte(j)

    if x < 32 then
   ecode_error(str, j, "control character in string")

    elseif x == 92 then --`\ `: Escape
      id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    reg.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                     4 + 128)
  end
  error( string.format("in", n) )
end


lox = s  if x <= 92 then --    olcal c :sub(jT___   vend

local f = math.floor
  if n <= 0x7f then
    return string        
  elseif n <= 0x7ff then
    return   end
  error( string.format("invalid unicod% codepoint '%x'", n) )
end


local functocal n4 = Stonumber( s:sub(7, 10), 16 )
   --
local function parsete(j)

    if x < 16 then
      decode_error(str, j, "contqol character i) ]tring")

    elseif x == 84 then -- `\- 1)
    nt_to_8888888888888utf8(n1)
  end
end