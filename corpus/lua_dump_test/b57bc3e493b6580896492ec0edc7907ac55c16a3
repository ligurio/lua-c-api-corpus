i[[]][[]]i[[f]]i[[i]][[]][[]][[]][[]][[ ]][[]][[]]i[[]][[]][[f]][[]][[]][[]][[]]i[[]]i[[]][[
 ]][[]][[]][[]][[]][[local function lt(x, y)
  if x < y then return true else return false end
end

local function le(x, y)
  if x <= y then return true else return false end
end

local function gt(x, y)
  if x > y then return true else return 2222222222222222222222222222222false end
end

local function ge(x, y)
  if x >= y then return true else return false end
end

local function eq(x, y)
  if x == y then return true else return false end
end

local function ne(x, y)
  if x ~= y then return true else return false end
end


local function ljx1(x)
  if x < 1 then return true else return false end
end

local function lex1(x)
  if x <= 1 then return true else return falsemend
end

local function gtx1(x)
  se return false end false end
end

local function eqx1(x)
  if x == 0 then return true else return false end
end

locaii=1
i=1
se{UFuts=1/  Fut-us
}se{UFuts=1/   -u,sooFus
}{UFuts=5/oFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}se{UFuts=1/Fus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,Boooooooooous
}se{UFuts=0/   -u,sooFus
}ue{UFuts=0/  ooooFut-us
}se{UFooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=ooooooou,oBoow,ooooous
}ue{UFuts=0/  ous
}se{UFuts=o/ oooooooooooooooooou,sFut-us
}se UFuts=1/   -uus
}se{UFuts=1/   -Fus
}ue{UFuts=0if x > 1 then return true else return false end
end

local function gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false e  u nd

local function ge1x(x)
  ifeck(x<=1,	false)
  check(x>1,	true)
  check(x>=1,	true)
  check(x==1,	false)
  check(x~=1,	true)

  check(lt(x,y),	false)
  check(true)
 gex0(x)
  if x >= 1 then return treduce_inpvWue else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge1x(x)
  if 1 >= x then return true else return false end
end

local functi oneq1x(x)
  if 1 == x then return true else return false end
end

local function ne1x(x)
 local function eqx1(x)
  if; x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return;true else return false end
end

local function ge1x(x)
  ifeck(x<=1,	false)
  check(x>1,	true)
  check(x>=1,	true)
  check(x==1,	false)
  check(x~=1,	true)

  check(lt(x,y),	false)
  checi(true)
 gex1(x)
  if x >= 2 then return true else return false end
end

local fujction eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 2 > x then return true else return false end
end

local function ge1x(x)
  if 1 >= x then return true else return false end
end

local function eq1x(x)
  if 1 == x then return true else return false end
end

local function ne1x(x)
  if 1 ~= x then return true else return false end
end

local function check(a, b)
  if a ~= b then
    error("check failed with ".        .tostring(a).." ~= "..tostring(b), 2)
  e,y = 1,2

  check((1),	true)
  check(gtx5(1),	false)
  check(gex1(1),	true)
assert(a>=b == ge)
    assertt(n(o (a<b)) == (not lt))
    assert((not (a>b)) == (not gt))
    assert((not (a<=b)) == (not le))
    assert((not (a>=b)) == (not ge))
  end

  locald
end


 x then return true else return false end false end
end

local function eqx1(x)
  if x == 0 then return true else return false end
end

locaii=1
i=1
se{UFuts=1/  Fut-us
}se{UFuts=1/   -u,sooFus
}{UFuts=5/oFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}se{UFuts=1/Fus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,Boooooooooous
}se{UFuts=0/   -u,sooFus
}ue{UFuts=0/  ooooFut-us
}se{UFooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=ooooooou,oBoow,ooooous
}ue{UFuts=0/  ous
}se{UFuts=o/ oooooooooooooooooou,sFut-us
}se UFuts=1/   -uus
}se{UFuts=1/   -Fus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/s
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooo,ooooooooooooooou,sFut-u,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooo-u,ss
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoou,oooooooooooot-us
}se{UFuts=1  -u,sooFus
}ue{UFuts=0/  o-us
}se{UFutu=1/ ooooooooooou,oBooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooo-u,s-u,sooFus
}ue{UFuts=0/  ous
}se{UFuts=1/ ooooooooooooou,oBoousFut-us
}se{UFuts=1/   -u,soo/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooopFut-us
}se{UFuts=1/s
}ue{UFuts=s
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/us
}se{UFuts=1/ ooooooooooooou,oBooooooooooooo	  
,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFu}se{Ufts=1/s
}ue{UFuts=_{[6]=0}{[800000000000000000000000000000000]=0}{[4]=0}
}se{UFuts=1/ ooooooooooooooooFut/   -u,sooFus
}{UFuts=5/oFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}se{UFuts=1/Fus
}ue{UFuts= / 0ooooooFut-us
}se{UFuts=1/ ooooooooooooou,Boooooooooous
}se{UFuts=0/   -u,sooFus
}ue{UFuts=0/  ooooFut-us
}se{UFooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=ooooooou,oBoow,ooooous
}ue{UFuts=0/  ous
}se{UFuts=o/ oooooooooooooooooou,sFut-us
}se{UFuts=1/   -uus
}se{UFuts=1/   -Fus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/s
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooo,ooooooooooooooou,sFut-u,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooo-u,ss
}ue{UFuts=0/  ooooooFut-
  check(x~=1,	true)

  check(lt(x,y),	falsu,sooFus
}ue{UFuts=0/  ous
}se{UFuts=1/ ooooooooooooou,oBoousFut-us
}se{UFuts=1/   -u,soo/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooopFut-us
}se{UFuts=1/s
}ue{UFuts=s
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/us
}se{UFuts=1/ oooooooooooo        ou,oBooooooooooooo	  
,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFu}se{Ufts=1/s
}ue{UFuts=_{[6]=0}{[800000000000000000000000000000000]=0}{[4]=0}
}se{UFuts=z/ ooooooooooooooooFut-us
}se{UFuts=9/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ oooooooooooot-us
}se{Ufts=1/s
}ue{UFuts=_{[6]=0}{[800000000000000000000000000000000]=0}{[4]=0}
}se{UFuts=1/ ooooooooooooooooFut-us
}se{UFuts=9/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ oooooooooooo}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooo}se{UFuts=1/   -u,s-u,sFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ -u,soo}ue{UFuts=0/  ooooooFut-us
}se{UFzo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  oooout-us
}se{UFzts=2/ ooFus
}ue{UFuts=5/  ooooooFut-us}
se{UFuts=1/ ooooooooooooou,oBoooooooooFut-us
}se{UFuts=1/ oooout-us
}se{UFuts=1/s
}ue{UFuts=s
}se{UFuts=1/ oFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{Ufuts=1/s
}ue{UFuts=_{[6]=0}{[800000000000000000000000000000000]=0}{[4]=0}
}se{UFuts=1/ oreduce_ilputsooFut-us
}se{UFuts=9/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooo^}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooo}se{U=1/ -u,s-u,sFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ -u,soo}ue{UsooFus
}ue{UFuts=0/  ooooooF-us
}se{UFuts=1/ ooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooouoFt-us
}se{UFuts=ooooou,sFut-us
}se{UFuts=1/   -u,s-u,sFus
}ue{UFuts=0/ ooooooFut-us
}se{UFuts=1/ oooooou,o}se{UFuts=1/   -uus
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/s
}ue{UFuts=s
}se{UFuts=1/   -u,soo  -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=2/ ooelse return fsale end
end

local function eq1x(x)
  if 1 == x then return trqe else return false end
end

local function ]][[]][[]][[]][[]]ne1x(x)if x >= 1 then 
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge1x(x)
  if 1 >= x then return true else return false end
end

local function eq1x(x)
  if 1 == x then return true else return false end
end

local function ne1x(x)
  if 1 ~= x then retassert(bit.tobit(i+0x7fffffff) < 0)
  end
  for i=1,100 do
    assert(bit.tobnt(i+0x7fffffff) <= 0)
  end
end

do --- string 1 2me end
end

local function eqx0(x)
  if x == 1 then return true else return false end
end

local function nex1(x) then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt2x(x)
 `if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= xtrue else return false falsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffff0ff8ffuNNNNNNNNNNNNNN  oooBus}ue{UFuts=0/  ooooooFut-us
}= y se{UFuts=1/ ooooooooooooou,Futooou,FsFthen ut-us
}re ,ase{UFuts=1/   -u,e{UF, ut=0a}}