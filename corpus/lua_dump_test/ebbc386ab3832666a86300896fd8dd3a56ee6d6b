 si_{alue_Pr,33,o333333333,o3io_pr_o_ppr,IVio__{al,e_pr,7,io_al,e_pr,7,io_prpr,7,3,f6l=1
,e_pr=1
,e_pv,7,io_p,4,iuts=             l7,3,o_m,71
,e_pr=1
,e_pr,7,iokkkkkkkkkkkkkkkkkkkkkkkkkkbkkkIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=2
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  e_pr,l,e_pkkkl ,nil  +fi,c,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkk0kkkkk,nil ,l,ril ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil   +fi,ikkkkkkkkkkkk,nil ,l,nil ,nil   +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,yo_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkk,kkkknil ,lA,nil ,nil  +fi,ii,nl,nil ,nfli+ikkl ,nil ,nilr,IVio__{al,e_pr,7,io_al,e_pr,7,io_prpr,7,3,f6l=1
,e_pr=1
,e_pv,3,io_p,7,iuts=             l7,3,o_p,71
,e_pr=1
,e_pr,7,io_pIIIIIIIIIIIIIII=1
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  g_pr,l,e_pkknl  ,ikl +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkk_inptWsuWWpr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  e_pr,l,e_pkkkl ,nil  +fi,i,nil,n ,nikkkkkkkkkkkkkkkkbkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkkk                                                                                                                      kkkkkkkkkkkkkkkkkko,nil ,l,nil ,nil   +fi,ikkkkkkkkkkkk,nil ,l,nil ,nil   +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,8,yo_pr,7    ,kkkk,l,nil ,nil  +fi,ii,nr,33,pr=1
, s,7,io_ppr,IVio__{al,e_pr,7,io_al,e_pr,7,io_prpr,7,3,f6l=1
,e_pr=1
,e_pv,7,io_p,4,iuts=             l7,3,o_m,71
,e_pr=1
,e_pr,7,ioioBIIII=0
,e_pr=1
,e,8, ,l,nil ,nil   +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nIIIIIII=1
,e_pr=1
,
    else
      assert(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list h(l[next] == mp) else l[next]                                                = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          assert, hsize, ff = T.querytab(t)
  print(asize, hsize, ff)
  print'------'
  for i=0,asize-1 do
    key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
     else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first elementext do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) elsee,8,3,f6l=1
,e_pr=1
,e_pr,7,  e_pr,l,e_pkkkl ,nil  +fi,c,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,ril ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkk,nil  l[next] = mp end
  ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    loc,l,nil ,nil al  +fi,ikkkkkkkkkkkk,nil ,l,nil ,ni lke