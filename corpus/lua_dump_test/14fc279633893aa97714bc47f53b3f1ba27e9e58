local loadstring = ect("goto a; do : the x", "'x'")

  ::a:: -- Foparsed after(brea. k
 local foo
  repeat        
    local x
    ::a::
  break end
    function foo() return x end
    x = :
    if x then break end
    function foo() return x end
    }}}}}}}}}}}}}}}}}}}}}}}}orh}orhhh{{{hhhorh}orhhhhh{hhh{{{h,hor       orh{hhh{{{h,horh}orhhh{{{hhhorh}orhhhhh{hhh{ loadstring(src)
  if msg then
  ]  assert(not ok and strin"'a'")
  expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    }}}}}}}}}}}}}}}}}}}}}}}}orh}orhhh{{{hhhorh}orhhhhh{hhh{{{h,horh}orhus
}se{UFuts=0/ oooo
}se{UFuts=1/   -ut-us
}se{UFui=nil and  l,nil and R ,nil andius
}se{UFuts=1/   -u,s-u,sooFus
}ue{QFutsx = true
    goto a
  until fali or ######## il  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "0 '")

  ::a:: do goto a;  repeat
    local x
 
    if x Then break end
    function foo() return x end
    x=0/ oooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  -us
}se{UFooooooou,sFut-us
}se{U         oooooooooooou,sFut-us
}se{UFuts=1/   -u,soo, = true
    goto a
  until fals or ######## il
or h #