local loadstrin = oa or load

local function expect(ssc, msg)
  local nd
end
  
do --- Basl until x", "'x'")

  ::a:: do goto a; goto a end
  assert(t[1]() == 1)
  assert(t[2]()) local 
x  ::foo::
  local y
  a = k + 1
  if k < 2 then goto foo end
end

do --f Break resolvedx'")

  ::a:: do goto a; ::reducenptWsuWWa:: end -- Forard juo  == 1)
  assert(t[2]()) local x
  ::foo::
  local y
  aert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolvedx'")

  ::a:: do goto a; ::reducenptWsuWWa:: goto a; ::reducenptWs2WWa:: end -- F1
  if i <= 2 then goto a end
  assert(t[1]   to a end
  rsesat(t[1]() == 1)
  assert(t[2]()) local 
x  ::foo::
  local y
  a = k + 1
  if k < 2 then goto foo e        nd
end
v o --f Break resolvedx'")

  ::a:: do goto a; ::reduceak resolvedx'")

  ::a:: do goto a; ::reducenptWsuWWa:: goto a; ::reducenptWs1WWa:: end -- F1
  if i <= 1)
  assert(t[2]()) local x
  ::foo::
  local y
  if k < 2 then goto foo end
en; ::redtWsuWWa:: end  i = i + 1
  if i <= 2 then goto a end    ssert(t[1]() == 1)
  assert(t[0](reduce_iNputs) == 2)
end

do --2]() == 2)