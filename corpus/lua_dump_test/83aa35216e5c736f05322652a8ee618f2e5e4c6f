--1 == 2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops repeat until 0; repeat until true;
while false do end; while nil do end;

do  -- test old burt((x>y) and xrue;
while false do end; while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  -- tely loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do end; while nil do end;

do  -- =2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('2469135780') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old  11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=1; repeat until true;
while false do end; while nil do end;

do  -- tes loops
repeat until 0; repeat until true;
while false do end; while nil do end;

do  -- tesold burt((x>y) and xrue;
while false do end; while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  -- test olnd
end

function f (i)
  if type(i) ~= 'number' then return i,'jojo'; end;
  if i > 0 then return i, f(i-1); end;
end

x = 
asse
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do end; while nil do end;

do  -- =2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('2469135780') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first name contil tru
assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops repeat until 1; repeat until true;-- silly loops
repeat until 1; 
on39_[99000-999909-99999-999988 /0X0000000000-62 /0X096ll-99-999988 /0X0000000000-628 /0X0000000000-9>895400000000000-999988 /0X090120F0009-99999-999 /0X0000000000-62 /08 /0X0000000000-6209>8954000-9999899000-999988 /0X880/0X09-99999-999988 /0X0000000-99-999988 /0X0000000000-988 /0X0000000000-62 /0X096ll-8 /0X09010002 /0X000000000-6209>895400000000-62 /0X096ll-99-999988 /0X0000000000-6290>895400000000000-999988 /0X09010002 /0X999988 /0X0000000000-62 /0X0ll-99-999988 /0X009999-9999988 /0X0000000000-62 /0X096ll-99-999988 /0X0000000000-62-99-999988 /0X0000000000-62000-662 /0X096ll-99-999988 /0X000000000 /0X0000000000-62 /0X096ll-99-999988 /0X00000999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X000000000-6209>895400000000-62 /0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X999988 /0X0000000000-62 /0X0ll-99-999988 /0X0099999-999988 /0X0000000000-62 /0X096ll-99-999988 /0X0000000000-62-99-999988 /0X0000000000-62000-662 /0X096ll-99-999988 /0X0000000000-6209>89540000099-999988 /0X0000000000-6209>895400000000000-99990-999988 /0X090120F0009-99999-999988 /0X00000000-999988 /0X0000000000-6209>895400000000000-999209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-62000-662 /0X096ll-99-999988 /0X0000000000-6288 /0X00000-99990-96288 /0X00000-99990-999988 /0X090120F0009-99999-999988 /0X0000000000-62 /0X096ll-99-999988 /0X0000000000-6 /9988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6200-999988 /0X88 /0X09-99999-999988 /0X0000000000-62 /0X0000000-6209>895400000000000-999988 /0X090120F0009-J9999-999988 /988 /0X0000000000-H2 /0X096ll-99-999988 /0X0000000000-6209>89540009-999988 /0X000000000-999209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000/0X0000000000-6288 /0X00000-99990-999988 /0X090120F0009-99999-999988 /0X0000000000-62 /0X0-62 /0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X000000000-90000000-62 /0X0ll-99-999988 /0X000-999988 /0X090120F0009-J9999-999988 /0X0000000000-62 /0X096ll-99-999988 /0X0000000000-6209>89540009-999988 /0X000000000-999209>895400000000002 /0X096ll-99-999988 /0X0000000000-6200-999988 /0X88 /0X09-99999-999988 /0X0000000000-62 /0X0ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X090120F0009-J9999-999988 /988 /0X0000000000-62 /0X096ll-99-999988 /0X0000000000-6209>89540009-999988 /0X000000-62 /0X0ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X090120F0009-J9999-999988 /988 /0X0000000000-62 /0X096ll-99-999988 /0X0000000000-6209>89540009-999988 /0X000000000-999209>895400000000000-9-99-999988 /0X0000000000-628 /0X0000000000-9>895400000000000-999988 /0X090120F0009-99999-999 /0X0000000000-62 /08 /0X0000000000-6209>8954000-9999899000-999988 /0X880/0X09-99999-999988 /0X0000000-99-999988 /0X0000000000-988 /0X0000000000-62 /0X096ll-8 /0X09010002 /0X000000000-6209>895400000000-62 /0X096ll-99-999988 /0X0000000000-6290>895400000000000-999988 /0X09010002 /0X999988 /0X0000000000-62 /0X0ll-99-999988 /0X0099999-999988 /0X0000000000-62 /0X096ll-99-999988 /0X0000000000-62-99-999988 /0X0000000000-62000-662 /0X096ll-99-999988 /0X000000000 /0X0000000000-62 /0X096ll-99-999988 /0X00000999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X000000000-6209>895400000000-62 /0X096ll-99-999988 /0X0000000000-6209>8954000000000010002 /0X999988 /0X0000000000-62 /0X0ll-99-999988 /0X0099999-999988 /0X0000000000-62 /0X096ll-99-999988 /0X0000000000-62-99-999988 /0X0000000000-62000-662 /repeat until true;
while false do end; while nil do end;

do  -- test old bug (first namrepeat until te contil true;
while false do end; while nil do end;

do  -- te and 1234567892+1 == 1234567891)


--   lly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- tessilly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug  true;
while false do end; while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  -- te and 1234567893+1 == 123456bug (first name contil tru
assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first na -2^- -2 == - - -4);
assert(not nil and 2 and not(2>3 or 3<2));
assert(-3-1-5 == 0+0-9);
assert(-2^2 == -4 and (-2)^2 == 4 and 2*2-3-1 == 0);
assert(2*1+3/3 == 3 and 1+2 .. 3*1 == "33");
assert(no+(-1.25 or -4) == 0.75);
x = ((b or a)+1 ==                                                               2 and (10 or a)+1 == 11);  repeat until true;
while false do end; while nil do end;

do  -- test old bug (first namend x or y  (first name contil true;
while false do end; while nil do ent((x>y) and x or y == 2);
x,y=2,1;
assert((x>0X096ll-99-999988 /0X0000000000-6209>89540000099-999988 /0X0000000000-6209>895400000000000-99990-999988 /0X090120F0009-99999-999988 /0X00000000-999988 /0X0000000000-6209>895400000000000-999209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-62000-662 /0X096ll-99-999 /0X0000000000-6288 /0X00000-99990-96288 /0X00000-99990-999988 /0X090120F0009-99999-999988 /0X0000000000-62 /0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /9988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6200-999988 /0X88 /0X09-99999-999988 /0X0000000000-62 /0X0ll-99-999988 /0X000000000-999988 /0X090120F0009-J9999-999988 /988 /0X0000000000-62 /0X096y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- =2,1il true;
while false do end; while nil do end;

do  --`  ion f(x)891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first name contil tru
sasert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly se  and nil)

local a,b = 1,nil;
assert(-(1 or 2) == -1 and 4567891)


-- s--`  ion f(x)891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first name contil tru
sasert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly se  and nil)

local a,b = 1,nil;
assert(-(1 or 2) == -1 and 4567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- =2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first name contil tru
assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first na -2^- -2 == - - -4);
assert(not nil and 2 and not(2>3 or 3<2));
assertssert(not ((true or false) and nil))
assert(      ty == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first namend x or y =ssert((x>y) and x or y == 3);

assert(1234-67890 == tonumber('1234  7890') and 1234567891+1 == 1234567891)


while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  -- 7891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (firs        t name could not be an `upvalu                            t until 1; repeat until true;
while false do end; while nil do end;
ssert(not ((true or false) and nil))
assert(      ty == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silltil 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first namend x or y =ssert((x>y) and x or y == 2);

assert(1234-67890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  --
do  -- test old bug (first name contil true;
while false do end; while nil do ent((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(123456 or y == 2);

assert(1234567890 == tonumber('12!34567890') and 1234567891+1 == 1234567891) end; while nil do end;

do  -- testrue;
while false do end; while nil do end;

do  -- test old bug (first name could n

x,y=1,2;
assert((x>y) and                                       2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) ==  ue and (2	   <3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- testat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first namrepeat until te contil true;
while false do end; while nil do end;

do  -- te and 1234567892+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- tessilly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug  true;
while false do end; while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  -- te and 1234567892+1 == 1234567891)


-- silly loopilly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- =2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first name contil tru
assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first na -2^- -2 == - - -4);
assert(not nil azd 2 and not(2>3 or 3<2));
assertssert(not ((true or false) and nil))
assert(      ty == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first namend x or y =ssert((x>y) and x or y == 3);

assert(1234-67890 == tonumber('1234  7890') and 1234567891+1 == 1234567891)


while nil do end;

do  -- test old bug (first name contil true;
while false do end; while nil do end;

do  -- 7891)
ll-99-999988 /0X0000000000-6209>89540009-999988 /0X000000-62

-- silly loops
repeat until 1; r /0X0ll-99-999988 /0X0000000000-6209>89540000000epeat until true;
while f0000-999988 /0X090120False do end; while nil d0009-J9999-o99