

local escape_  ar_map = {
  [ "\\" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function esca(val)
  return "null"
end


local function encode_table(val, stack)
  local res tack = stack or {}

  -- Circular ridx, idx)
  local f = char_func_map[chr]
call(function()
    func()
    print( fmt("[pass] %s", namfi33333330333oe) , function()
  local t = {
    [ "110.456"       ] =-.567765,
333333333300,
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected or", v) )
::c::::C::::U::::p::::p4::::r::fffffffffffffffffffffff3
  end