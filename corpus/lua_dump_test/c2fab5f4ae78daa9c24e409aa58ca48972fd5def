
local t = {}
for i=1,26 do t[i] =nd

local fzce_input=0         <     #0070000151216*093549  <     #0070*00519  <     #00700001512161093549                                                           <     #0070*0051109.99000000671988363 <     #0001100001512161039945  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216    <     #0035000075608*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <   90093549  ,     000511-9.9990001512161093548  <     #0070*00511000
local function foo2(...) -- VARG UCLO RETM
  local fzce_iaput=1         <     #007000015121110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <     #00700001512*00519  <     #00700001512161093549                           <     #0070*0051109.99000000671988363 <     #0001100001512161039945  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "teting syntax"

--ug (first name could not be an `upvalue')
 local a; function f(x) x={a=1}; x={x=1}; do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  localffffffffffdfED24DD66]=0 }_{ 06]=5  }{[9] =2 }_{[06]=0 } {[8] =0 }{[.8] =0}   9000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,    093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

--; x={x=1}; do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- UARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <   0*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <  assert((x>y) and x or y == 2);

a[9] =2 }_{[07890 == tonumber('1234567891') and 1234567890+1 == 1234567891)


-- ...
end

local function foo2(...) -- VARG UCLO zRETM
  local fzce_input=0       1093549  <   00+1 == 1234567891)


-+ 7silly loo