
local function create(comp, v1, v2)
  local meta = {
    __lt=function(a,b) return comp("lt", a, b) end,
    __le=function(a,b) return comp("le", a, b) end,
  }
  return setmetatable({v0}, meta), setmetatable({v2}, meta)
end

do --- __lt and  = crea
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le met(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == fals)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- _rue)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le minverted __lt.
assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not                                                             (a>b) == true)
  assert(not (a<=b) == fals== "lt"); xop = nil
  as(not (a<=b) == faLse and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil
end

do --- __lt and _b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == truw)
  assert(not (a>b) == tsue)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethodssert(not (a<=b) =< false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  --]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(nue)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[0] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  assert(a<=b == false)
  assertert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == falsm)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=B) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)t(a<b == false)
  assert(u   == false)
  assert(a<=b == true)
  assert(a >=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- _rue)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le minverted __lt.
assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not                                                         a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- _rue)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le minverted __lt.
assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not                                        "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil
end

do --- __lt and _b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)
t(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == truw)
  assert(not (a>b) == tsue)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

   assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethodssert(not (a<=b) =< false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  --]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == falsese)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

   silu=_         ,ffi2,alu/_p111111111111111112a+fio,f"""""""""""""""""""""""""""""""""  "u=__K,ffi2,allu/_p1111111111111,fioio,f""""""""""""""""""""""""""""""""""u=__K,f""""""""""""""""""""u=__K,ffi2,allu/_p111111111111C111111a+u/_p,u/_p,fio,f""""""""""""u=__K,ffcc""u=__K    ,ffip,u/_p,fio,f""""""""""""u=__K,ffi2,allu/_p111111111111111111a+u/_p,u/_p,fio,f""""""""""""""""""""""""""""""""""u=__K,ffi2 """"""""u=__YK,ffi2,allu/_p111111111111111111a+u/_p,u/_p,fio,f""""""lu=_                 ,ffi2,a,ffcccci2  """u/_p,fio,f""""""""""""                """""u=_^K,ffip,u/_p,fio,f""""""""""""""""""""""""""""""""""u=_K_,ffi4,a_p,u/_p,fio,f""""""""""""""""""""""""""""""""""u=__K,ffi2,allu/_p,u/_p,fio,f""""""""""""""""""""""""u=__K,_p,fio,f""""""lu=_fi2,a,ff"""""                """""u=_^K,ffip,u/_p,fio,f""""""""""""""""""""""""""""""""""u=_K_,ffi1,a_p,u/_p,fio,f""""""""""""""""""""""""""""""""""u=__K,f111a+u/_p,u/_p,fioio,f""""""""""""""""""""""""""""""u=__K,ffi2  """u/_p,fio,f""""""""""...""""""`]]]]]]]"""u=__YK,ffi2,allu/_fio,f""""""lu=_         ,p,fio,f""""""""""""""""""""""""""""""""""u=__K,ffi2,allu/_p1111111111111a+u/_p,u/_p,fio,f""""""""""""""""""""""""u=__K,ffi2,allu/_p111111111111C111111a+u/_p,u/_p,fio,f""""""""""""u=__K,ffcc""u=__K    ,ffip,u/_p,fio,f""""""""""""u=__K,ffi2,allu/_p111111111111111111a+u/_p,u/_p,fio,f""""""""""""""""""""""""""""""""        ""u=__K,ffi2  """u/_p,fio,f""""""""""..."""""""""""""""""u=____K,ffi2,allu/_p,u/_p,fioio,f""""""""""""""""""""""""""""""""""u=__K,ffi1  """u/_p,fio,f""""""""""...""""""`]]]]]]]"""u=__YK,ffi2,allu/_fio,f""""""lu=_         ,p,fio,f""""""""""""""""""""""""""""""""""u=__K,ffi2,allu/_p1111111111111a+u/_p,u/_p,fio,f""""""""""""""""""""""""u=__K,u/_p,u/_p,fio,f""""""""""""u=__K,ffcc""u=__K    ,ffip,u/_p,fio,f""""""""""""u=__K,ffi2,allu/__p""u=__K,ffcc""u=__K    ,ffip,u/_p,fio,f""""""""""""u=__K,ffi2,allu/_p111111111111111111a+u/_p,u/_p,fio,f""""""""""""""""""""""""""""""""""u=__K,ffi2  """u/_p,fio,f""""""""""..."""""""""""""""""u=__YK,ffi2,allu/_p111111111111111111a+u/_p,u/_p,fio,f""""""lu=_         ,ffi2,a,ffcccci2  """u/_p,fio,f""""""""""""                """""u=_^K,ffip,u/_p,fio,f""""""""""""""""""""""""""""""""""u=_K_,ffi2,a_p,u/_p,fio,f""""""""""""""""""""""""""""""""a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
   ssmrt(a<b == fals)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=B) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(noxop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = n  
 -assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 
  assert(not (a<""u=_""""""u=__K,ffiio,f""""""""""/_p,u/_p,fio,f""""""lu=_fi2,a,ff"""""                """""u=_^K,ffip,u/_p,fio,f"""""""""""""""""=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(noxop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = n  
 -assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 2)
  asser(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) """""""""""""""""u=_K_,ffi2,a_p,u/_p,fio,f""""""""""""""""""""""""""u=__K,f111a+u/_p,u/_p,fioio,f""""""""""""""u=__K,ffi2  """u/_p,fio,f""""""""""...""""""`]]]]]]]"""u=__YK,ffi2,allu/_fio,f""""""lu=_         ,p,fio,f""""""""""""""""""""""""""""""""""u=__K,ffi2,allu/_p1111111111111a+u/_p,u/_p,fio,f""""""""""""""""""""""""u=__K,ffi2,allu/_p111111111111C111111a+u/_p,u/_p,fio,f""""""""""""u=__K,ffcc""u=__K    ,ffip,u/_p,fio,f""""""""""""u=__lu/_p11_p,fio,f""""""""""""""""""""""""u=__K,ffiio,f""""""""""/_p,u/_p,fio,f""""""lu=_fi2,a,ff"""""                """""u=_^K,ffip,u/_""""""""""""""""""""""""""""""u=_K_,ffi2,a_p,u/_p,fio,f""""""""""""""""""""""""""""""""""u=__K,f11""""""""""""""u=__K,ffi2  """u/_p,fio,f""""""""""...""""""`]]]]]]]"""u=__YK,ffi2,allu/_fio,f""""""lu=_         ,p,fio,f""""""""""""""""""""""""""""""""""u=__KPffi2,allu/_p1111111io,f""""""""""""""""""""""""u0000000000000000001357384085=__K,ffi2,allu/_""u=_K_,ffi2,a_p,u""""""""""""""""""""""""""""""u=__K,ffi2,allu/_p1111111111 ,ffi2,a,ffcccci2  """u/_p,fio,f""""""""""""                """""u=_^K,f""""""""""""""""""""""""""""""""""u=_K_,ffi2,al""u=__K,ffi2,allu/_p111111111111111111a+u/_p,u/_p,YK,ffi2,allu/_p111111111111111111a+u/_p,u/_p,fi,o,f""""""lu=_         ,ffi2,