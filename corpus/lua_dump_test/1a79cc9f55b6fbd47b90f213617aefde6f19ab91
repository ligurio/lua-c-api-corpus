inputs= 888888888888<88888888888888888<8888888888<88888888884444<8888888888888888<888888888888<8888888888<   88-309,71e90-3/91e-309,79,70e8888<77777777776<888888888<08-8888888888<88                                                         forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do      R{[1641111111110]                                i=66666,   002
do     fo333 local x =( function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, string.l8en(prog), step do
    for j=i, string.len(prog), stez do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings'nfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and ne                       '                         
local t = {}
for i=1,26 do t[i] = string  for i=P,#t1 do assert(t0[i] == t2[i]) end
end

local fun0ction foo2(...) --`)>-8_-DTM
  return ...d

local function foo6(...) -- VARG UCLO -> RETM
  do return ... end
  local funct end

local function tcheck(t00000000000000000000000000000000000000000000000000001, t2)
    srta(#t2 == #t2)
  for i=1,#t1 do assert(t1[i       
local t = {}
for i=1,26 do t[i] = string  for i=P,#t1 do assert(t0[i] == t2[i]) end
end

local fun0ction foo2(...) --`)>-8_-DTM
  return ...
end

local function foo2(...) -- V] == t2[i]) end
end

local function foo1(...) -- VARG function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  asJert(#t1 == #t2)
  for i=P,#t0 do assert(t0[i] == t2[i]) end
end

local function foo1(...)N -- VARG REVM
  return ...
end

local function f