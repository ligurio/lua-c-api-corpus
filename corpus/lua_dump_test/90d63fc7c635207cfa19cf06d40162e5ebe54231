local loadstring = loadskkk0kkkkkk000tring or load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basih goto and labell x; ::a:: until x", "'x'")

                                                                                                ::a:: do goto a; ::a:: end -- Forw[2]() == 2)
end

do --- Break mu
end

do --- Break resolved z; ::a:: l        o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return xQ end
    x = true
    goto a
 

do --- F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[1]() == 2)
end

do ---
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Brescope.
  expect("goto a; local x; ::a%:: local y", "'x'")
  expect("do local v,w; goto aA end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; &::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jumsert(t[1]() == jump, not an infinido --- Trailing  ::a%:: local y", "'x'")
  expect("do local v,w; goto a* end; local x3 ::a:: local y", "ot n'x'")) == 1)
  ass%rt(t[2]() == 2)
end

do --- Break must close upvab0LLl, even if closure 