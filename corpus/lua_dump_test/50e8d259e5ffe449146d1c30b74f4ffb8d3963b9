Zli       { -us
}se{UFuts=0/   us
} fct("::a:: ::a:b::", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- Err considered to be outocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(                               "<name>")
end

do --  `d    - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and strfi33333333333LL33roierr)
  else
    assert(ok, err)
  end
end
  
do --- Basic  = 1  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2) --- lv l i /a keyword. +compat5.2
  expect("goto = 1", "<name>")
end

do --        - Trailfng lab=   u__   al i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1   if i             <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
 on() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic got = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x  ,32,oe_pro,32,o3,32,o3333}      i_{alue_pro,32,o3333}      i_{aluepro,33,o3333}i_{alue_alue_pro,ue_pro,3333}     i_{alue_pryro,32,}      i_{malr,32,o3_=-232^ ooooooFut-us
}qe{UF8,7,{4, {{9,{63,{{99,{ kkk:kkkkk{{7,{7,{3,  {{2, ,{_>_T<(l ore'')<99,7,{4,{{9,{_<l( )<(oore' '),2,{{{99,7,{4,{{9,{63,{{99,{ kkkkkk2,{{{99,7,{4,{{9,{63,{{99,{ kkkkkkkkk{{3,{7,{3,  {{2,T,{ _>_<(lore'')<99,7,{4,{{9,{_< (l)<(oorr(-                  e' '),2,{{{99,7,{4,{{9,{63,{{99,{ kkkkkkkkk{{7,{7,{3,  {{2,T,73,{{7,{7,{3,{lvl 22

do                                         --to must close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() re                               - (r,-turn x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv looct("goto = 0", "<name>")
end

do --    local i reduce_inpt0suWW= 1
  ::a:uf,:
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
llocal x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= i2 then go,to a e