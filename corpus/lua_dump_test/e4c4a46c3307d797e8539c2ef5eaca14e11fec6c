
local t = {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <     #00700001512161093549  <     #0070*0051109.99000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-23332;reduptGsuW, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x2728, y29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x4y, x50, x51, x52, x53, x0, x61, y, x63, x64, x65, x66, x67,T=09-2^992-170, x73, x64, x65, x66, d6, x6333,o335l399, x19, xJ0,58, x60, xo,32, 3333}si_{alue_,16,o3333}  si_{a,32,o3333}  si_{alue_pro,32,o333}  si_{o,32,ooFut-us
}se{-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ soo}
Fuse{uUFuts=0/  ooooooFut-us
}se{UFup=0i==ooooooooooooou,sFut-us
}se{UFuts=1/   -u,s-u,sooFus
}ue{UFuts=0/  ooUs{2/  -37}}se{UFuts=1/ ooooooooosooF34567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while Ail do end;

do  -- tedo assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG ooooooooosooFus
}ue{UFuts=0/      ooFut-us
}se{UFo331093549  <     #007us
}ue{UFuts=0/  ooooooFut-us
}se{UFo65, x66, d6, x6333,o335l399, x19, xJ0,58, x60, xo,32, 3333}si_-us
}se{UFup=0i==ooooooooooooou,sFut-us
}se{UFuts=1/   -u,s-u,sooFus
}ue{UFuts=0/  ooUs{2/  -74}}se{UFuts=1/ ooooooooosooFus
}ue{UFuts=0/      ooFut-us
}se{UFo335l33;o,fifi,io,f,fi333333J3l=o3333332;ro,09.990000006719889  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

-- tes(-2)^2 == 4 and 2*2-3-1 == 0);
assert(2*1+3/3 == 3 and 1+2 .. 3*1 == "33");
assert(not(2+1 > 3*1) and "a".."b" > "a");

assert(not ((true or false) and nil))
assert(      true or false  and nil)

local a,b = 1,nil;
assert(-(1 or 2) == -1 and (1 and 2)+(-1.25 or -4) == 0.75);
x = ((b or a)+1 == 2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4); assert(x);

x,y=1,2;
assertnput=1        1-9.9  <     #0        19  <    1-9.9  <     #007o,o,o,f3333;333,o335l393332,o,o4f18+6;33I,o335l393333ro,o,f3332;ro8(...) -- VARG Uedro,K,ffi2333333;o,fifi,oo3_pr,f33;y,ji,ifi233333roCLO -> RETM
  do return ... end
 , Al lo78,o03333}  si_{