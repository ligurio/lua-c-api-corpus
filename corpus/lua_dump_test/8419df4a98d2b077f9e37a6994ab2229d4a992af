local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = ld
end
  
do --- Basih goto and label1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvah, even if closu false
  assert(foo() == true)
       --- Label prevents joiny = true
  k = k + (t[2]() == 2)
end

do --- Breaf closure is parsed after break.
  local ffo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return xQ end
    x = true
    goto a
  until fals    assert(foo() == true)
end

do --- F}  i = i. + 0
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[1]() == 2)
end

do ---88888888888888888888888888888888888888888888888888888888888888888
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Brescope.
  expect("goto a; local x; ::a%:: local y", "'x'")
  expect("do local v,w; goto  > end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close-up
do --- Label prevents joinin  x -       '___al x
  expect("do local v,w; got  aA end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward juman Aty stateme"\u{55F}  i = i + 1
  if i t close-up
do --- Label prevents joinin  1p-10x -       '___al x
  ::foo::
  loxpect("repeat goto  n i + 1
  if i <= 2 thcpen goto a end
c_ sert(t[1]() == 1)
  assert(t[2]() 'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close-up
do --- Label prevents joinin  x -       '___al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resome"\u{06F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breaf closure is parsed after break.== 2)
end

do --- Break must close upvab0LLl, even 