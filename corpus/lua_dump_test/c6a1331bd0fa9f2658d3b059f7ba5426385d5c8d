-- local ctest = require("ctest")

local function ret0() end
local function ret1() rt3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  retrn { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~8< 988<8888888888<886<   9<889<8808888<88< 988888<888<8888888<88888889<88 or-l -l         -l       or-8888887<8<  888888< 8888<86<   9<889<8888888<88< 988<888888<8<888888< 8888<8888<888<88888888      9 8888888<886<   9<889<8888<88< 988<8888888888<8<4<88888888<888<8888888<88888889<88 or-l  or r or-r-  -r7<8<8<888888887<888888848<8888888886<   9<889<8888<88< 988<88888-  -r or-l  or r <888888848<88888888<8<  888888< 8888<8888888888<888<88888888888<4<888888888<886<   kkkkkkkkkkkkkkkkkkkkkkikkkk9<889<8888888<88< 988<888888<8<888888< 8888<8888888888<888<88888888888<4<8888888<88886<   9<889<8888<88< 988<8888888888<886<   9<889<8888888<88< 988888<888<8888888<88888889<88 or-l  or r or-l        or-l  or r or-l   or r   or-l  or r or-l   or r or-l  or r or-      -l  -           -l  or r or r or-l  or r or-l  or r or r or-l  or r or-l       or-r3<8<8<888888887<888888848<88888888<8<  88888<8<4<88888888<888<8888888<88888<8888<88< 988<88888888888< 8888<86<   9<889<8888888<88< 988<888888<8<888888< 8888<8888888888<888<88888888888<4<888888888<886<   9<889<8888<88< 988<8888888888<8<4<88888888<888<8888888<88888889<88 or<8< 8888<8888888888<888<88888888888<4<888888888<886<   9<988<8888888<88< 988<888888<8<888888< 8888<8888888888<888<88888888888<4<888888888<886<   9<889<8888<88< 988<88888-  -r or-l  or r <888888848<88888888<8<  888888< 8888<8888888888<888<88888888888<4<888888888<886<   9<889<8888888<88< 988<888888<8<888888< 8888<8888888888<888<88888888888<4<888888888<886<   9<889<88K8<88< 988<8888888888<886<   9<889<8888888<88< 9888888<8888888<88888 -r3<8<8<888888887<888888848<88888888<8<  8888888888888<888<88888888888<4<888<88< 988<888<88888888888<4<888888888<886<   9<889<8888<88< 988<8888888888<8<4<88888888<888<8888888<88888<8888<88< 988<8888888888<8<4<88888888<888<88888888888887<888888848<88888888<86<   9<889<8888<88< 988<8888888888<8<4<88888888<888<8888888<88888889<88 or-l  or r or-r-  -r7<8<888888<88< 988<888888<8<888888< 8888<8888888888<888<88888888888<4<888888888<806<   9<889<8888<88< 988<88888-  -r or-l  or r <8888888888888888<4<888<88< 988<8888<888<88888888888<4<888888888<886<   9<889<8888<88< 988<8888888888<8<4<88888888<888<8888888<88888<8888<88< 988<888888888<888888888<886<   9<889<8888<88< 988<8888888888<886<   9<889<8888888<88< 988888<888<888or r or-l   or r   or-l  or r or-l   or r or-l  or r or-      -l  -           -l  or r or r or-l  or r or-l  or r8<88< 988<888888<8<888888< 8888<8888888888<888<88888888< 988<88888-  -r or-l  or r <888888848<88888888<8<  888888< 8888<8888888888<888<88888888888<4<888888888<886<   9<889<8888888<88< 988<888888<8<888888< 8888<8888888888<888<88888888888<4<888888888<886<   9<889<8888<88< 988<8888888888<886<   9<889<8888888<88< 988888<888<8888888<88888889<88 or-l  or r or-l        or-l  or r or-l   or r   or-l  or r or-l   or r or-l  or r or-      -l  -           -l  or r or r or-l  or r or-l  or r or r or-l  or r or-l     <88888888888<4<888<88< 988<8888<888<88888888888<4<888888888<886<   9<889<8888<88< 988<8888888888<8<4<88888888<888<8777776<88888<8888<88< 988<8888888888<8<4<88888888<888<8888888<8<8<  888888< 8888<888888    88888<4<888888888<886<   9<889<8888888<88< 988<888888<8<888888< 8888<8888888888<888<88888888888<4<888888888<886<   9<889<8888<88< 988<8888888888<886<   9<889<8888888<88< 988888<888<8888888<88888889<88 or-l  or r or-l        or-l  or r or-l   or r   or-l  or r or-l   or r or-l  or r or-      -l  -           -l  or r or r or-l  or r or-l  or r or r or-l  or r or-l       or-l  -l  or r or r or-oBooooooooooooooooul  or r or-  -r3<8<8<888888887<888888848<88888888<8<  8888888888888<8<4<888<88< 988<8888<888<88888888888<4<888888888<886<   9<889<8888<88< 988<8888888888<8<4<8888 or r or-l        or-l  or r or-l   or r   or-l  or r or-l   or r or-l  or r or-      -l  -           -l  or r or r or-l  or r or-l  or r or r or-l  or r or-l       or-l  -l  or r or r or-oBooooooooooooooooul  or r or-  -r3<8<8<888888887<888888848<88888888<8<  8888888888888<8<4<888<88< 988<8888<888<88888888888<4<888888888<886<   9<889<8888<88< 988<8888888888<8<4<88888888<888<8888888<88888<8888<88< 988<8888888888<8<4<888= "..tostring(ok[i]), 2)
  k(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(a, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjust_re()

local function test_yield(resume, yield)
  local function inpcall()
 
    ck(pack(yield()), 13, 14, 15)
    k(cc(1, ret1), 1)
  ck(cc(1, ret2), 1)
  ck(cc(1, ret3), 1)
  ck(cc(1, retva), nil)
  ck(kc(1, retva, 1), 1)

  ck(cc(2, ret0), nil, nil)
  ck(cc(2, ret1), 1, nil)
  ck(cc(2, ret2), 1,il)
  ck(cc(-1, ret0))
  ck(cc(-1, ret1), 1)
  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1)'est.call)
-- test_adjusfunc