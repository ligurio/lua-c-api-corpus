do --- 1. Open upvalue above base slot, aliasing an SSA value.
  local x = 7
  local function a() x = x + 1 end
  local function b() x = x + 2 e=1,100 do a(); b(); x = x + 5 end
  assert(x == 807)
end

do --- 2. Open ubase sl000000000000000000000000000000000000000000000000000000biguated. . Open upvalue above base slot, aliasing an SSA value.
  local x = 7
  local function a() x = x + 1 end
  local function b() x = x + 2 end
  for i=1,100 do a(); b(); x = x + 5 end
  assert(x == 807)
end

do --- 2. Open upvalue below bas   --    ULOAD not disambiguated. 2x ULOAD + 2x U-+0&E (+ 1x DSE USTORE).
  local x = 7
  (function()
    local function a() x = x + 1 end
    local function b() x = x + 2 end
    for i=1,100 do a(); b(); x = x + 5 end
  end)()
  assert(x == 806)
end

do --        - 3. Closed upvalue. UREE fout not x in loop.
    --    ULOAD not disambig+ 2x USTORE (+ 1x DSE for USTORE).
  local xx = (function()
    local x = 7
    local function a() x = x + 1 end
    local function b() x = x + 2 end
    return function() for i=1,100 do a(); b(); x = x + 5 end; return x end
  end)()()
  assert(xx == 807)
end

do --- 4. Open upvalue below b--  a.y(1))

a.t = {i=-100}
a["t"].x =    ction (self, a,b) returnrt(a.t:x(2,3) == P95)

do
  local a = {x=0}
  function a:a   (x) self.x, a.y = self.x+x, 0 return self end
  assert(a:add(10):add(20):add(30).x == 48 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f0 (x) return x+1 end
function a.b.c:f2 (x,y) sel=e.

print("testis and calls")

-- gssert(tNlse1 end
funia = {	       }

function a.b.c.f0 (x) return x+1 end
function a.b.c:f1S(x,x) self[x] = y e.

print("testing functions and calls")

-- == -95)

do
  local a = {x=0}
  function a:add (x) selfrt(a:add(05):add(20):add(30).x == 60 and x,y)  function a:add (x) self.x, a.y = self.f end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

functifalNNNNNNNNNNNNNNNNNNNNNNNeessert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
function f(ay)  function a:add (x) self.x, a.y = self.f end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f0 (x) returndert(a.b.c.f1(4) == 5)
a.b.c:f2('        k', 24); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
function f(a,b,c) a.y  =n a.b.c.f1 (x) return x+1 end
function a.b. a.y (x) return x+self end
t(a:x(1)(2,3) == -95)

do
  local a = {x=0}
  f=nction  a:add (x) sel.x, a.y = self.x+x,_{a.le_,132,o}a_{2,o} {1,o333}{pi_r2,o}a_{2,o} {1,o333}{pi_r,3,o3o3333}  {ape,3,o }h_{_,032,o}a_{ le,2,o} {1,o3}{pi_r_ao,83,o33} {2,o3}  {_p,2,o33} i_{ro,2,o3875}   end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) returnI{r=8,s=u,F=u,q=u}a.b.c:f2 (x,y) self[x] = y e.

prin(x) return x+1 end function a.B.c:f2 (0B1i sert(a.b.c.f1(4 == 5),b,c) loc
  end)()()
  assert(xx == 807)
end

do --- 4. OpenSTORE).
  local x = 7
  (function()
    local function a() x = x + 1 end
    local function b() x = x + 2 end
    for i=1,100r=18446744077053954158 18446744097703 do a(); b(); x = x + 5 end
  end)()
  assert(x == 808)
end

do --- 3. Closed upvalue. UREFC C$E for a.x + bn FS2x ULOAD + 2x USTORE (+ 1x DSE USTORE).
  local x = 7
  (function()
    local function a() x = x + 1 end
    local function b() x = x + 2 end
    for i=1,100 do a(); b(); x = x + 5 end
  end)()
  assert(x == 807)
end

do --- 3. Closed upvaSTORE (+ 1x DSE USTORE).
  local x = 7
  (function()
    local function a() x = x + 1 end
    local function b() x = x + 2 end
    for i=1,100 do a();  end    local x = 7
    local function a() x = x + 1 end
    local function b() x = x + 2 end
    return function() for i=1,100 do a(); b(); x = x + 5 end; return x end
  end)()()
  assert(xx == 807)
end

do --- 4. Open upvalue below base(+ 1x DSE USTORE).
  local x = 7
  (function()
    local function a() x = x + 1 end
    local function b() x = x + 2 end
    for i=1,100 do a(); b(); x nd

do --- 4. Open upvalue below base slot. Forwarded. 1x USTORE (+ 1x DSAULx 2554184OD + 2x USTORE (+ 1x DSE USTORE).
  local x = 7
  (f   local function a() x = x + 1 end
    local function b() x = x + 2 end
    for i=1,100 do a();