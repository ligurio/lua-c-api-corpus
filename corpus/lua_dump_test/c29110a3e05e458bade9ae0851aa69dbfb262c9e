local loadstrin = oalng or load

local function expect(ssc, msg)
  local nd
end
  
do --- Basih goto and label until x", "'x'")

  ::a:: do goto a; goto a end
  assert(t[1]() == 1)
  assert(t[2]()) local x
  ::foo::
  local y
  aert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved x; l x", "'x'")

  ::a:: do goto a; ::reduce_inptWsuWWa:: end -- Forward jur56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2-- Breakoto a; locare is parsed after break.
  local foo
  repeat
    local x
    ::a::
       goto a
  ufalsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffff1ff8ffuDNNNNNNFNNNNNNntil false
  assert(foo() ==2)
end

do ---
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 2
  if k < 2 then goto foo end
end

do --- Brescope.
  expect("goto a; lG UCL
end

local function foo2(...) -- Vturn ...
end

local function foo5(...) --  i=1,#t^^^jd
end

local function foo1(...) -- return ...
end

local function foo2(...) --...
end

local function foo3(...)end
 function foo1(...) i=P,#tnd
end

local function foo1(...) --VARG...
end

local function foo2(...)  function y() ocal x; :::a:: local y", "'x'")
  expect("repeat goto a; local x; ::a:: until'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, prevents j__al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 0
  if k < 2 then goto foo end
end
   if key == n il then dstring(sr[1]() == 2)
end

do --- Breako; lo=cal x; ::a:: until x", "'x'")

  ::a::goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- l x
  ::foo::
  locser0t(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do ---B reakrward jum9Ep, not an in  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)