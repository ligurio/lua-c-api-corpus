local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = loadstring(srt[2]() == 2)
end

do --- Brezk must close upv)
  if msg then
    assert(not ok and str, "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and empty stateme"\u{561} 21]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval= 2)
end

do --- Break must close upval, even if clol y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Brescope.
  expect("goto a; local x; ::a%:: local y", "'x'")
  expect("do local v,w; goto aA end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; &::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty statempval, even () == true)
end

do ---2 Label prevents joinin  x __al Break must close upval:a::do g oto a; ::a:: end -- Forward jump, not an infinido --- Trailing  ::a%:: local y", "'x'")
  expect("do local v,w; goto a* end; local x+ ::a:: local y", "ot n'x'")
  expect("repeat goto loc1al x; ::a:: until x", "'x'")

  ::a:: do gotobreak"e
u