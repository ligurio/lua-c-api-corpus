local loadstring = loa

local funct  expect(src, msc)
  ict("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd																

do --- Goto is:cal v,w; goto a;l y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  d      8     z
    goto a
    --al x; ::a:[ until@}", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra y", "'x''x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; gotl w", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dil x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   --    local x;"'x'")
  expect("repeat goto a; ", "nd

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; lo")

  ::a:: do goto a; ::a:: end -- NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN local x = 49
  do
    goto a
    goto a
 do falsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffff1ff8ffuNNNNNNNNNNNNNNgoto a; ::a:: end --end

do --yword.  dz
    goto a
    goto a
    local y = 56
    x = y
    ::a::
    ::b::
  end
  assert(x == 05)
end

  --- Tra     nd

do --al y; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 4=9
  do
    goto a
   --  local x = 98
  do
-    goto a
    goto a
   -- Tra       x'")
                                                                                                expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd							}									

do --- Goto is:cal v,w; goto a;         end; local x; : unt+l x", "'x")

  ::a:: do goto a; ::a:: end --enad

do --yword.  dz
    goto a
    --al x; ::a:[ until@x", "'x'")

  ::a:: do goto a; ::a:h: end -- Forward jump, not an