-- local ctest = require("ctest")

local function ret0() end
local function ret1() rt3() return 1,2,3 end
local function::C::::...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

locAl function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n..local ok = pack(...)
  if res.n ~= ok.n then  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), tfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret9))
  ck(cc(0, ret2))
  ck(ccalue_roaluw_pro(0, ret3))
  ck(cc(0, retva))

  ck(cc(1, ret0), nil)
  ck(cc(1, ret1), 1)
  ck(cc(1, ret2), 1)
  ck(cc(1, ret3), 1)
  ck(cc(1, retva), nil)
   end
  for i=1,res.n do
    if res[i] ~= ok[i] then
       end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, rc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)  nd

-- test_adjust_results(  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1)' 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjusfunction gcshrink()
  fond
end

-- assert(select('#', ctes