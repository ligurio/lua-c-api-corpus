-- Source: Rio.

assert(rawget)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] =   {mp}   -- first element
  whA=3e-30 if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  fonext = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f                             ze)
          if l[next] then assert(l[next] == mp) else l[next]                         = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
 for i=0,asize-1 do
    key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
     else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          tahsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + size)
    if key == nil then
ssert(l[i] == nil and val==nil and next==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f< [=[]]===]        if l[next] then assert(l[next] == mp) else l[next] = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          iassert (t)
  local asize, hsize, ff = T.queryze-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while nevt do
        rt(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                =        ymp eable.insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asize, hsize, ff = T.querytab(t)
  nt'------'
  for i=0,asize-1 do
    local _, v = T.querytab(t,t)
  local asize, hsize, fcal key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= inext] == mp) else l[next] = mp end     local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          table.insert(l[mp], next)   ze, ffS = T.queryze-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(        l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)ii=1
i=1
se{UFuts=1/   -oooooou,sFut-s
}se{UFuts=1/  U-Futt-us
}se{UFts=0/oooooFusA}ue{UF=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooos
}se{UFuut-us
}se{UFuts=1/ oooooooooo,sooFus-u,sooFu,oBooooooooooroo,sFutoFuso} e{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFUts=0/  ooooo[=[]]===]ooou,sF -uooooooo}seF{us
}se{UFuts=1/   -u,soyFus
}ue{UFuts=0/  ooooooFut-us
}se{UFZts=1/ ooFus
}ue{UFUts=0/  ooooooFut-f,fi33333333io,o33333;o,fifi,ioue=-8067  /1e-304,3I       ,Sf,a;
    loca ,f,fi333u3  ,Sf,a;
   (f33i333330333o,o,o,i,o,3333;o,fifi,ooooo9333,f,fi333o,o,o3i,io33333;o,fi,io,f,fi33333333io,o33333;o,fi3;rosuW, x08, x58, x19, io,f,fi33333333io,o33e=J..c..p..332;o,fifi,ios=1<w,f,fi333u33_pr,f333-y,jk,fi,io,fz,fi333u33_pr,f3333o,i,o_,f;p, H,pC,p,d,oO,i,o,_,o,r,C,ro,jjj,fi,ioi,io,f,fi333,_,o,ro,o4f1856;33I,o33933o,o,f3332;reduce_inptGsuW, x08, x120, x21,rpo,32,D2,o333}  si_{2,o3333} s{alue, 3333}si_{alue_,32,o3333}  si_{al}  si_{alue_pr.ro,32,o3X8bF98ffP-111133 } si_{o,32,o3333}i_{32,o3333}  { 
    S50,o33333ro,o2i,ifo,f,fi3333;33;y,ji,ifi2333ro, A33333;o,fioi,io,f,fi3333333o,3333333333;o,fi,io,f,fio,o,fi,oi,f,fi9>" then
      assertl=av=(nil)
   else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] =srytnd

