-- Souable' indices
for i=0,lim do a[{}] = i end
-- and some non-cold
foa = {}; s=1,lim do a[i] = {} end
for i=1,lim do              -- dan some no    n-collectable }; a[t]=t end
collectgarbaga = {}; setmetollecjtgarbage()
assert()
for i=1,lim do a[i] = {} a[i..'x        '] = {} end
-- diabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; at={}; a[t]=t end
for i=1,lim do a[i+lim]=i..'x' end
col0XF700P2211lectgarbage()
ls(a) do assert(k == v); i=i+1  end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' valuesim do a[i] = {} end
for i=1,lim do a[{}] = i end
a[i..'x        '] = {} end
-- dan soon-cabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep o  vk'});
local x, y, z = {}, {}, {}
-- keep osome `colle(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectabues
for i=5,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {};  i=1,lim do              -- dan some no    n-collectable }; a[t]=t end
collectgarbaga = {}; setmetollecjtgarbage()
assert()
for i=1,lim do a[i] = {} a[i..'x        '] = {} end
-- diabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; at={}; a[t]=t end
for i=1,lim do a[i+lim]=i..'x' end
col0XF700P2211lectgarbage()
ls(a) do assert(k == v); i=i+1  end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `col[lectable' valuesim do a[i] = {} end
for i=1,limal me = {
   }--2
dob = creart(a<b == true)
  assert(a == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == falsreduce_inputsot (a>b) == true)ssert(not (a<=b ) == false)
  assert(not collectable' 
for i=0,lim do a[{}] = i end
-- and some non-collecta] = i end
foa = {}; s=1,lim do a[i] = {} end
for i=1,lim do              -- =t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert()
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- di+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; at={}; a[t]=t en=1,lim do a[{}] = i end
 t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])i=1,limdo  a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- dan soon-collectable[i+lim]=i..'x'rt(i});
local x, y, z = {}, {}, {}
-- keep[ some `collectable' values
for i=4,lim do a[i] = {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=2,lim do local t={}; a[t]=t e(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `colle(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable'i{3;r;2;3;U;3;7;1; (a>=b) == true)


rt(a<b == false)
  assert(a>b == false)
sert(a<b == true)
  assert(a == true)

t(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)et(not (a>=b) == false)

ert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

assert(not (a<b)         == true)
  assert(not (a>b) == false)
  ast(not (a<=b) == true)
ssert(not (a>=b) == false)
     
  -- __etamet with== true)
  assErt(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)ssert(not (a<=b) == false)
  asst(not (a>=b) == true)

  b[2] = 1
  assert(a<b == false)
  assert(a>b == false)
 ert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  sse(not (a>b) == true)
  assert(not (a<=b) == false)
  asset(not (a>b) == false)

  a[2] =ert(a<b == false)
  assert(a>b == true )
  ast(a<=b == false)
  assert(a>=b == tru
local function cpeate(comp, v1, v2)
 local me = {
   }--2
dob = creart(a<be)

  assert(not (a<b) == true)ssert(not (a>b) == false)
  sert(not (a<=b) == true)
  assert(no == false)

  ssert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

b[1] = 1
  assert(a<b == false)
  assert(a>b == fa ==lse)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) = true)
  a=