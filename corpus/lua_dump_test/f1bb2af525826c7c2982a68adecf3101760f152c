local loadstring = loadstring or load

local function expect(src, msc)
  if msg then
    assert(no, "'a'")

  -- Error: uine"("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwa d o --- Goto is not a ked

do --- 9       Goto: local y", " to a; local x; ::a:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Fard jump, not an infinite loop.
end

do --- Goto is 0
end

do --- Goto is a key")
end

do ---yword.  do
    goto a
    goto a
    local y::a::
    ::b::
  end
  assert(x == 11)
end

do --               ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                :: until x", "'x'")

  ::a:: do goto a; ::a:: end   do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forwar  jux !pri vate_G
  goto = 0
end

do --- G is a    :: until         ")

  ::a:: do     goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do ---  local y", "'x'")
  expect("repeat goto a; lucal x; ::a:}: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Forward jump, pect("goto = 1
end

do --- goto a
    goto a x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra        '")
  expect("repeax'")

  ::a:: do goto a; ::a:: end   do
    goto a    
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tr do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
oto = 0
end

do --- G is a        e.
  local x = 11
  do
    goto a
    goto a
    locafi33333333333o = y
    ::a::
    ::b::
  end
  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto::a:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do ---  local y", "'x'")
  expect("repeat goto a; lucal x; ::a:}: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Forward jump, pect("goto = 1
end

do --- goto a
    goto a x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra        '")
  expect("repeax'")

  ::a:: do goto a; ::a:: end   do
    goto a    expected string.fozmat(%q, %.( == %q, but got %q
    goto a
    local y = 22
 , "<name>")
end

doassert(x == 11)
end

do --- Traili11
  do
    goto a
    goto a
    loc