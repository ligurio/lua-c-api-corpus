
local t = {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  essert(#t1 == #t1)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) --LO RETM
  local fzce_input=1         <     #00700006*093549  <     #0070*005110005-HHHHHHHHHHHHHHHHHHHHHHHHKHHHHHHHHHHHHHHAHHHHIHHHHHHHHHHHHHHHHHHH11-9.3549  <                                                                                     1-9.9  <     #00700001519  <    1-9.9  <     #00700001512161093549  <  000671988363 <     #0-01100001512161093
local function foo2(...) -- VARG UCLO RETM
  local fzce_iUput=1         <     #00700000*09354   <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <   9000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,    093549  ,     000511-9.999000151216104
print "testing synt!x"

--; x={x=1}; do ate1srst([i] == t2[i]) end
end

local functioal function foo2(...) -- VARG UCLO RETM
  local fzce_input=1         <     #0070000151216*093549  ted990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

-- 1 == 11); assert(x);
x = (((2<3) or 1) ==    e and (2<3 and 4) == <); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
3549  <           #0070*0051109.99000000671988363 <     #0001100001512161093549  <   0070001512
end

local functlocal functio] foo2(...) --,y=3,1;
asserM
  return ...
end

local fu