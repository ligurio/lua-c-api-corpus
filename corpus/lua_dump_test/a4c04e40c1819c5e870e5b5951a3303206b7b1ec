-- Source: PUC Rct == false)

-- testing declarat == 'a')
f(1,2,   -- this one too
      4,4)
assert(t[1] == 1 and t[2] == 2 and t[3] == 3 and t[4] == 'a')

fuelf = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y())

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("test ng functions and calls")

-- get the opportunity to test 'type' to) en)


-- telf = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end


print("testing functions and calls")

-- get the opprt(type(assert) == type= niK{9,{9,{9,f{9l
function f (x) return a:x (x) end
assert(type(f) == 'function')


-- testing local-fu4 tio) self.x, a.y = self.x+x, 40; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = ions
a = {i = 10}
self = 20
n x+self end

assert(a:x(0)(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert9,{(a:add(10):add(20):9add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

functio