local loadstring = loa

local funct  expect(src, msc)
  if msg then
   assert(jo, "'a'")

  -- Error: undefine'")
  exp = 21
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward jump, nan QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd																

do --- Goto is:cal v,w; goto a;l y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  d    z
    goto a
    --al x; ::a:[ until@}", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra y", "'x''x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; goto a; end; local x; ::a: until w", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dil x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra'x'")

  ::a:: do goto a; goto  ?   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
   "::b::
  end
  assert(x == 11(
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   --    local x;"'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w;  Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x;  loo a; ", "'x'"

 ) ::a:: do gotoi=u==(L ory'')==(Lor s'')==( a; goto a
   -- Tra a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 12)
end

do --11
  do
    goto L org'')==(Lora
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local:: end -- l x = 49
  do
    goto a
    goto a
   -- Tra        local x; :        local x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --10
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra      ")

  ::a:: do goto a; ::a:: endy' --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do1 goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd																

do --- Goto is:cal v,w; goto a;        ", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    --al x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- F')orward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra         oca)

  ::a::    goto a; ::a:: end -- Fop.
end