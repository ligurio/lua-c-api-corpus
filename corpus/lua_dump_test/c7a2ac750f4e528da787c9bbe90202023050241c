 fct("::a:: ::a:b::", "'a'")
  expect(":a:: enreak")

  -- Err considered to be outocal
do --- Backmust close upval.
  local t = {}
  
loadstring(src)
  if msg then
    assert(not ok and strfi33333333333LL33roierr)
  else
    assert(ok, err)
  end
end
  
do --?- Basic  = 0
  ::a::
  local x
  t[i] = function() return x end
  x = iPS      
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Gotcal t = {}::
  local x
  t[i] = function() tion() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and strfi33333333332LL33roierr)
  else
    assert(ok, err)
  end
end
goto = 1", "<name>")
end

do --- Trail
  lil ,i,nn,f,f,nil,t(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv