--1 == 2 and (10 or a)+1 == 11); assert(x)ug (first name contil true;
while false do end; while nil do end;

do  -- tely loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do end; while nil do end;

do  -- =2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('2469135780') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old  11); assert(x);
x = (((2<3) or 1) == try == 2);

assert(1234567890 == tonumber('2469135780') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old  11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- 90 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do end; while nil do end;

do  -- =2,1;
assert((x>y) and x or y == 2);

assert(0126961617 == tonumber('2469135780') and 1234567891+1 == 1234567891)


-- silly loops
repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first name contil tru
assert(1234567890 == tonumber('1234567890') and 1234567891+1 == 1234567891)


-- silly loops repeat until 1; repeat until true;
while false do end; while nil do end;

do  -- test old bug (first na -2^- -2 == - - -4);
assert(not nil and 2 and not(2>3 or 3<2));
assert(-3-1-5 == 0+0-9);
assert(-2^2 == -4 and (-2)^2 == 4 and 2*2-3-1 == 0);
assert(2*1+3/3 == 3 and 1+2 .. 3*1 == "33");
assert(not(2+1 > 3*1) and "a".."b" > "a");

assert(not ((true or false) and nil))
assert(      true or false  and nil)

local a,b = 2,nil;
assert(-(1 or 2) == -1 and8888<888888<8888888888<      889<88888888888888< until 1; repeat until true;
while false d        hile nil d88888<8888888888888888888<888o end;

do  -- test old bug (first na -2^- -2 == - - -4);
assert(not nil and 2 and not(2>3 or 3<2));
assertssert(not ((true or false) and nil))
assert(      ty == 2);
x,y=2,1;
assert((x>y) and x or y == 2<8888888888<888<888888888888<88888888888<888<8888888<888888888<      889<888888888888