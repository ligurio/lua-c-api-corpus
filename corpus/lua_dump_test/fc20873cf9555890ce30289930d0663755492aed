
do --neo= 'b' anx = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
t(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
assert(a==0 and b==nil)

print'+';
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;
                  -- testing prio= 'b' anx = {a.y}
assert(x[0] == 1)

function f(i)
  while 0 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-n end
  end
end

f(10); g(10);

do
  function f () return 1,2,3; end
  local a, b, c = f();
  assert(a==1 and c==3)
  a, b, c = (f()) assert(a==1 and b==nil)

function g() f(); return; end else return end
  end
function f () return; end;
assert(g() == nil)
function g() rassert(x[1] == 1)

function f(ii-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
  2}
a={y=1}
x = {a.Z}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
e 