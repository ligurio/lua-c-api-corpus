-- local ctest = require("ctest")

local function ret0() end
local function ret1() return 1 end
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nresL_f, ...)
    return pack(testfunc(nres, f, ...))
  end

  

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nrng: "..res.n.." ~= "..ok.n, 2) gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select('#'k()
-- assert(select('#', ctest.call(7000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function rfalsNNNNNNNNNNNNNNNNNNNNNNNNNNk(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adju'#', ...), ... }
end

local function ck(res, ...)
  loca si_{alue_Pr,33,o333333333,o3io_pr_o_ppr,IVio__{al,e_pr,7,io_al,e_pr,7,io_prpr,7,3,f6l=1
,e_pr=1
,e_pv,7,io_p,4,iuts=             l7,3,o_m,71
,e_pr=1
,e_pr,7,iokkkkkkkkkkkkkkkkkkkkkkkkkkbkkkIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=1
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  e_pr,l,e_pkkkl ,nil  +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil   +fi,ikkkkkkkkkkkk,nil ,l,nil ,nil   +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,yo_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkk,kkkk il ,lA,nil ,nil  +fi,ii,nl,nil ,nfli+ikkl ,nil ,nilr,IVio__{al,e_pr,7,io_al,e_pr,7,io_prpr7,,3,f6l=1
,e_pr=1
,e_pv,3,io_p,7,iuts=             l7,3,o_p,71
,e_pr=1
,e_pr,7,io_pIIIIIIIIIIIIIII=1
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  g_pr,l,e_pkknl  ,ikl +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil   +fi,ikkkkkkkkkkkk,nil ,l,nil ,nifi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,yo_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkikkkk,nil ,l,nil ,nilk3333333,o3io_pr_pr,33,pr=1
,r,7,io_ppr,IVio__{al,e_pr,7,io_al,e_pr,7,io_prpr,7,3,f6l=1
,e_pr=0
,e_pr,7,io_p,7,iuts=             l7,3,o_p,71
,e_pr=1
,e_reduce_inptesuWWpr,7,io_pIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=1
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  e_pr,l,e_pkkkl ,nil  +fi,i,nil,n ,nikkkkkkkkkkkkkkkkbkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil   +fi,ikkkkkkkkkkkk,nil ,l,nil ,nil   +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,8,yo_pr,7    ,kkkk,l,nil ,nil  +fi,ii,nr,33,pr=1
, s,7,io_ppr,IVio__{al,e_pr,7,io_al,e_pr,7,io_prpr,7,3,f6l=1
,e_pr=1
,e_pv,7,io_p,4,iuts=             l7,3,o_m ,71
,e_pr=1
,e_pr,7,ioioBIIII=0
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  e_pr,l,e_pkkk4l ,nil  +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil   +fi,ikkkkkkkkkkkk,nil ,l,nil ,nil   +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,yo_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,lA,nil ,nil  +fi,ii,nl,nil ,nfli+ikkl ,nil   +fi,i,nil        ,nilr,IVio__{al,e_pr,7,io_al,e_pr,7,io_prpr,7,3,f6l=1
,e_pr=1
,e_pv,3,io_p,4,muts=             l7,3,o_p,71
,e_pr=1
,e_pr,7,io_pIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII0IIIIIIIIIIIIIIIIIIIIIIIIYIIr=0
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  g_pr,l,e_pkkkl ,nil  +fi,i,nil,nil ,nikkkkkLkkkkkkkkkkkkkkkkkkkkkokkkkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil   +fi,ikkkkkkkkkkkk,nil ,l,nil ,nil   +fi,i,nil,nil ,nikkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nr,7,yo_pr,7    ,kkkkkkkkkkkkkkkkkkkkkk1kkkk,nil ,l,nil ,nil  +fi,ii,nl,nil ,nfli+ikkkkkkk3333333,o3io_pr_pr,33,pr=1
,r,7,io_ppr,IVio__{al,e_pr,7,io_al,e_  ,7,io_prpr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,7,iuts=             l7,3,o_p,71
,e_pr=5
,e_pr,7,io_pIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=1
,e_pr=1
,e,8,3,f6l=1
,e_pr=1
,e_pr,7,  e_pr,l,e_pkkkl ,nil  +fi,i,nil,n ,nikkkkkkkkkkkkkkkkbkk,nil ,l,nil ,nr,kkkkkkkkkbkk,nil ,l,nil ,nr,7,io_pr,7    ,kkkkkkkkkkkkkkkkkkkkkkkkkkk,nil ,l,nil ,nil   +fi,ikkkkkkkkkl ok = pack(...)
  if res.n ~= ok.n then  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- tell()000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resukkk,nil ,l,nil ,nil   +fi,i,nil,nil ,nikkkmekkkkkkk, yield)
  local function inkkkkkp