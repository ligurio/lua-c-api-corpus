-- Source: Rio.

assert(rawget)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.n
      assert(l[i] == nil and vall)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          tahsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + size)
    if key == nil then
ssert(l[i] == nil and val==nil and next==nil)
    else
      assert(t[key] == val)
      local mp = T.hart (t)
  local asize, hsize, ff = T.queryze-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
        rt(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                =        ymp eable.insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asize, hsize, ff = T.querytab(t)
  nt'------'
  for i=0,asize-1 do
    local _, v = T.querytab(t,t)
  local asize, hsize, fcal key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first elemeget)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(tsize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  --hsie  ltad
        l[mp] = {mp}  querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-30 if l[nezt] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  fonext = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          tahsize, ff = T.querytab(t)
  local l = {}
  silu=_         ,ffi2,alu/_p111111111111111112a+fio,f"""""""""""""""""""""""""""""""""  "u=__lu/_p1111111111111,fioio,f""""""""""""""""""""""""""""u=__K,ffi1  """u/_p,fio,f""""""""""...""""""`]]]]]]]"""u=__YK,ffi2,allu/_fio,f""""""lu=_         ,p,fio,f"""""""^]]c"""""""""""""u=__K,ffi2,allu/_p1111111111111a+u/_p,u/_p,fio,f""""""""""""""""""""""""u=__Kffi2,allu/_p111111111111C111111+_/uap,u/_p,fio,f""""""""""""u=__K,ffcc""u=__K    ,ffip,u/_p,fio,f""""""""""""u=__K,ffi2,allu/_,f""""""lu=_fi2,a,ff"""""            """""u=_^K,ffip,u/_p,fio,f""""""""""""""u=_K_,ffi2,a_p,u/_p,fi""""""""""""""""""""""""u=__K,f111a+u/_p,u/_p,fioie,f""""""""""""""u=__K,ffi2  """u/_p,fio,f""""""""""..."u=__YK,ffi2,allu/_fio,f""""""lu=_         ,p,fio,f""""""""""""""""""""""""""""""""""u=__K,ffi2,allu/_p1111111111111a+u/_p,u/_p,fio,f""""""""""""""""""""""""u=__K,ffi""""""""u=__K,ffi2  """u/_p,fio,f""""""`]]]]]]]"""u=__YK,ffi2,allu/_fio,f""""""lu=_         ,p,fio,f""""""""""""""""""""""""u=__K,ffi2,allu/_p1111111111111a+u/_p,u/_p,fio,f""""""""""""""""""""""""u=__K,ffi2,a_p111111111111C105555a+u/_p,u/_p,fio,f""""""""""""u=__K,ffcc""u=__K    ,ffip,u/_p,fio,f""""""""""""u=__K,ffi2,al"""""""""""""""u=_K_,ffi2,allu/_p111111111111111,f""""""""u=__K,fficreduce_ijputs1111111111111a+u/_p,""u=__K,ffi1  """u/_p,fio,f""""""""""...""""""`]]]]]]]"""u=__YK,ffi1,allu/_fio,f""""""lu=_         ,p,fio,f""""""""""""""""""""""""""""""""""u=__K,fdi1,allu/o,f""   """"""""""""""""""""""u=__K,ffi1,allu/_p111oBoooooooooomooooo11111111111a+u/_p,u/_p,fio,f""""""""""""u=__K,ffcc""u=_ ,fio,f""""""""""""u=__K,ffi2,all""""""""""/_p1111""u=_K_,f""""""""""""""u=__K,f111a+u/_p,u/_p,fioio,f""""""""""""""u=__K,ffi2  """u/_p,fi/,f""""""""""...""""""`]]]]]]]"""u=__YK,ff?2,allu/_fio,f""""""lu=_   ,u/_p,fio,f""""""""""""""""""""""""""""""""""u=_K_K,ffi2  """u/_p,fio,f""""""""""...""""""`]]]]]]]"""u=__YK,ffi2,allu/_fio,f""""""lu=_         ,p,fio,f""""""""""""""""""""""""""""""""""u=__K,ffi2,allu/_p1111111111111a+u/_p,u/_p,fio,f""""""""""""""""""""""""u=__K,ffi2,allu/_p111111111111C111111a+u/_p,u/_p,fio,f""""""""""""u=__K,ffcc""u=__K    ,ffip,u/_p,fio,f""""""""""""u=__K,ffi2,allu/_p11_p,fio,f""""""""""""""""""""""""u=__K,ffiio,f""""""""""/_p,u/_p,fio,f""""""lu=_fi2,a,ff"""""                """""u=_^K,ffip,u/_p,fio,f""""""""""u=fio,f"""""""""""""""""""i"""""""""""""""u=__K,f11""""""""""""""u=__K,ffi2  """u/_p,fio,f""""""""""...""""""`]]]]]]]"""u=__YK,ffi2,allu/_fio,f""""""lu=_         ,p,fio,f""""""""""""""""""""""""""""""""""u=__KPffi2,a""lu=_fi2,a,ff"""""                """""u=_""u=__K   ,fio,f""""""""""""u=__K,ffi2,allu/__,f""""""""""""/_p1111""u=_K_,f""""""""""""""u=__K,f111a+u/_p,u/_p,fioio,f""""""""""""""u=__K,ffi2  """u/_p,fi/,f""""""""""...""""""`]]]]]]]"""u=__YK,ffi2,allu/_fio,f""""""lu=_   ,u/_p,fio,f""""""""""""""""""""""""""""""""""u=_K_K,ffi2  """u/_p,fio,f"""""""""".]]]]"""u=__YK,ffi2,allu/_fio,f""""""lu=_         ,p,fio,f""""""""""""""""""""""""""""""""""u=__K,ffi2,allu/_p1111111111111a+u/_p,u/_p,fio,f""""""""""""""""""""""""u=__K,ffi2,allu/_p111111111111C111111a+u/_p,u/_p,fio,f""""""""""""u=__K,ffcc""u=__K    ,fo,f""""""""""""u=__K,ffi2,allu/_p11_p,fio,f""""""""""""""""""""""""u=__K,ffiio,f""""""""""/_p,u/_p,fio,f""""""lu=_fi2,a,ff"""""            """""u=_^K,ffip,u/_p,fio,f""""""""""u=sfio,f"""""""""""""""""""i"""""""""""""""u=__K,f11""""""""""""""u=__K,ffi2  """u/_p,fio,f""""""""""...""""""`]]]]]]]"""u=__YK,ffi2,allu/_fio,f""""""lu=_         ,p,fio,f""""""""""""""""""""""""""""""""""u=__KPffi2,a""lu=_fi2,a,ff"""""                """""u=_^K,ffip,u/_p,fio,f"""""""""""I"""""""""""""""""""u=_K_,f"""""""""""  """""u=_^K,ffip,u/_p,fio,f""""""""""""""""""""""""""""""""""u=_K_,ffi2,allu/_p111111111111111,f""""""""u=__K,ffic,allu11a+u/p,fio,f"""""""""""""" l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          pable.insert(l[mp], next)   ze, ffS = T.queryze-0 do
    local key,val,n  t = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- ifrst element
        while next do
        rt(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                =        ymp eable.insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asize, hsize, ff = T.querytab(t)
  nt'------'
  for i=0,asize-1 do
    locuerytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
  e  lse
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- firste nextst head
        l[mp] = {mp}   --nt
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = m                               local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        kkk0kkkkk000kkk0kkkkk000assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end     local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          pable.insert(l[mp], next)   ze, ffS = T.queryze-1 do
    local key,val,n  t = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mpvd     else  -- list head
        l[mp] = {mp}   -- first element
        while next do
        rt(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                =        ymp eable.insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asize, hsize, ff = T.querytab(t)
  nt'------'
  for i=0,asize-1 do
    locuerytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- firstl next do
          asse
W f <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          ert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- lhead
        l[mp] = {mp}   -- first element
  whA=2e-309+1e-309       assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] ==wmp) else l[next]                                                = mp end
     ab(t)
  lext==nil)
    elseifhead
        l[mp] =srytnd

