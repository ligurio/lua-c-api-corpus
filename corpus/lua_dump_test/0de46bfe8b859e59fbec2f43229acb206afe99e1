--[==============================================[====================================================================================================================m==i=============================================================fter break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=666,0   6602
do     forii=66666,   002
do      f 
local a t(-(0)and (- or a)== 0. and(orii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2995b t()

-- collection of functions falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNlsend end


print("functions with errors")
prog = [[
do
  a = 09nikkkckkkk== 3 and (09 or a)==0 antring.sub(prog, i, j)))
    end
  end
end

prin(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and ne                                                                                                                        xt(n) == nil)
  WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWcollectgarbage()
end
b = nil
collectgarbage()
for n in pairs(a) do error'cannot be here' end
for i=0,lim do aF[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=0,lim do a[{}] = i end
-- and some non-coRb4][  4][4][5][4][24][  44][4][4][ 48][24][4][4][88][2][2424][llectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
for i=1,lim do local s=string.rep('@', i); d(0 or a)==0)a((b or a)==0);
a=(a[s] = s..'#' end
collectgarbage()
local i = 0
for k,v     in pairs(a(a)+1 ) do assert(k==v or k..'#'==v); i=i+1 end
assert(i == 3*lim)

a =MMMMMor a)0);
a=((a)+1MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMfalNNNNNNNN1NNNNNNNNNNNNNNN a)== s ((b or  a)==NNNNNNNNNNNNNTNNNNNNNNNNNNlseMMMMMMMMMMMMMMMMMMMMMMMMMMMM {}; ============m==i========