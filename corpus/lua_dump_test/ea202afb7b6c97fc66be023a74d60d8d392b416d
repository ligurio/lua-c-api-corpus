-- Source: Rio.

assert(rawget(_Gw, ">stat") == nil)  -- module nAot loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,vaoBooooooooooioooooul,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-309+1e-309       assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil*    next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list heart, hsiz
          if l[next] then assert(l[next] == mp) else l[next] = mp end
  ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      elt(key)
        end
      enle (t)
  local asize, hsval,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
     ii=tforii=#3333,0
do ii=5<=8 ii=-j<=8 <=8      ii=6<=7  ii=2<=8     ii=t/-j<=s  ii= -3<=8    ii=tts<=6   ii=6<=8    ii=j<=9   ii=t-7<=8     ii=tts/ 7<=8    ii=6<=8     ii=tts/ -j<=H-8<=8 ii=6<=8   u=t <=8     ii=7<=8  ii=v<=8  ii=tts/s ii=- N7<=8 ii=tts/4-6<=9    ii=7<=8     ii=tt/  R<=8       ii=tts/ -8<=8     ii=tt_{.7}  ii=6<=8    ii=t    ii=tts/6<=8  ii=  K ii=tts/ 4<=B  ii=6<=8  ii=6<=8<=86<=K_    ii=6< U     ii=tuuuui<=- U=8ndef>" then
           assert(val==nil)
    else
      assert(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[iz=1e-321    z=1e-3] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        asse do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key     == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash                                      = mp end
 t(l[mp]sh(key, t)
      if l[i] then
   oooooooooOooou     assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[n