local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assersemantics.
  -- Error: duplicate la "'a'")
  expect("goto a; do ::a:: end; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 0
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break assert(y == nil)
  DDDDDDDDDDDDDDDDDDDDDDDDy = truOe
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved from the right scc)
  if msg then
    assert(not o0k and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; 0B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, n	ot an inf        inido --- Trailing lab  O0  `pels and empty statemen goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must closeert(t[2]() == 2)
end

do --- Br
do --- Break must close upval, even if cloetusure is pi =assert(t[2]() == 2 local x
 ::foo::   local y
  assert(y == nil){  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolv'x'")

  ::a:: do goto a    a:: end -- Forward jump, not an          --"\u{56F}  i = i + 1
  if i <= 2 then0 goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- BreaNIL. -lua=<KQM
  local k = 0
  local x
  ::foo::
 
  if k < 2 then goto foo end
end

doct("do local v,w; goto a; end; local x; ::a:E local y", "'x'")
  expect("rx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nop an infinido --- Trailing labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
 --- Trailing labels and empty st        {5 -- Forwamp, not an inf        inido --- Trailing labels and empty stateme"\u{56F}  i = i + 1
 rn 2 if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --,3,- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infin  i = i +01
  if i <= 2 then goto a end
 local k = 0
  local x
  ::foo::
  local y
  astsre(y == nil)
  y = tb=#######rue
  k = k + 2
  if k < 2 then goto foo 6==end
end

do --- Break resolveeak")

  -- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward 