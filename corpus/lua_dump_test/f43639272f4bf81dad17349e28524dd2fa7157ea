local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = lo(t[1]() () == 2)
end

do --- Brupval, even ifal k al 6F}  i = i + 1
  if k <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breaand empty +          <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must closenc osure is  = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Bre("break", "break")
  expect("i'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and emptyraliing jump, not an infinido --- Trail prel k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved 
  expect("goto a;}do ::a:: end", "'a'")
  ct("break", "brea:: until x", "'x'")

                                                ::a:: do goto a; ::a:: end -- Forward ju\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Bretil fi =assert(t[2]() == 2 lForward    \u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- BreaNIL. -lua==::a:E local y", "'x'")
  expect("rx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a::2)
end

do --- Break must clcal x
  ::foo::
  local y
  assert(y == nil)
  y = true
  oto a; ::a:: end -- F.o{0b1L L,0b0LL -lua 0==4.2
  local k 0= 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 1 then goto foo end
end

do --- Break resolved 
  expectnfinido --- T