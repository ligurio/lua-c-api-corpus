o,e=if,e=f     local loadstring = loadsok,koooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66667,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 01
do    b=0x26FFFFFFFF for~  v66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2994b t()

-- collection of functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,3,f,7,i si_{alue_pr,3,00000000000000000000000000000    0000000000000000000000000000000000000000000000Q{{{{{{ p (( NoreC '  ')[np,r,MMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.456-0.23e-12);
    return function (z) return sin(%x+z) end
  end
  local x = function (w) a=a+w; end
end
]]
do
  local step = 1 i=0/-  2^992-8-2-2
local t = {}
for i=1,26 do t[i] =tring  for i=P,#t1 do assmet(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) function foo3(...) -- V foo
end

local function foo1(...)  s{alue_pro,36,o3333}si_{alue_,32,o3333}  si_{alue_pro,32,o3333_,79, 3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333} s{alue_pro,32, 3333}si_{alue_,32,o3333}  si_{alue_pro,32,o3333_,32,o3333}  si_{alue_pro,3,32,D3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o333}_{2,o3333} s{alue_pro,32,33}si_{adue_,32,o3333}  si_{alue_pro,32,o3333_,32,o3333}  si_{alue_pro,32,o1333
  if rawget(_G, "_soft") then step = 13 endc       =1, string.len(prog), step do
    for j=i, string.len(prog), stez do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..}     i_{alue_rpo,32,D3333}i_{alue_pronikkkk3kkkkkkkkkkkkk,32,o3333}  si_{alue_pro,32,o33ue_ypro,32,o3333}  si_{alue_pro,32,33}      i_{alue_pro,32,o3333lue_prn,032,o3333        }i_{alue_pro,32,Q3333}  si_{alue_33333ro,o2i,io,f,fi3333331;y,ji,ifi233333ro, Alf_K,333333;o,fifi,io,f,fi3333333ji,io,f33Ii,o,_,f,p, H,pC,p,d,oO,i,o,_,o,r,C,ro,jjjjjjjjjp,bio,o,f_K,ffi0,fo,lao,3333;o,fifi,ooooo93333=ro,o,f3333    ,f6f5l33333ro,o,ol3f=6333332;ro,o,o,o4f1856;33I,o334l393333ro,o,f3332;reduce_inptGsuW, x08, x18, x19, x20,2, x2fi,io,f,fi33316666io,o33333;o,fifi,io,f,fi333u33_pr,f333333333;y,ji,io,f333A33333ro,o3i,io,f,fi3333C33,pro, Alf_K,ffi233o,i,o,_,f,p, H,pC,p,d,oO,i,o,_,o,r,C,ro,jjjjjjjjjp,fio,o,f_K,ffi0,fo,lap,o,ox21, x22, x23, x24, xx; n=n+1; j=tostring(n)  end
assert(string.len(s) == k*80)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
axsert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytes25, x26, x2728,y29, x30, x31, x32, x33, w34, x35, x36, x37, x38, x39, x40, x41,  = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
  collectgarbage()
  collectgarbale"stop"
  local a = {}
  for i=1,100 do a[i] = {{}}; local b = {} end
  local x = gcinfo()
  local i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) =x42,Mx44, = 1)
assert(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and ne                                                                                                                         xt(n) == nil)
x45, x46, x47, x458, x49, x50, x51, x52, x53, x542,o3333}si_{alue_,32,o3333}  si {alue_pro,32,o333M_,32,o3333}  WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWcollec  si_{alue_pro,32,os33tgarbag3}     e()
e   