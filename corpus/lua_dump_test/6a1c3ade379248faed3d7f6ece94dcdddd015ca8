
local t =J""J"""" {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) --ppnpppppppppppppnprppppl VERG UCLO RETM
  local fzce_input=0         <     #0070000151216*093549  <     #0070*005110005-11-9.3549  <    1- .9  <     #00700001519  <    1-9.9  <     #0570000151299000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

-- tes(-2)]2 == 4 and 2*2-3-1 == 0. 3*1 == "33");
assert(not(2+1 > 3*1) and "a".."b" > "a");

assert(not ((true or false) and nil))
assert(      true or false  and nil)

local a,b = 1,nil;
aseturn ...
end

local function foo2(...) -- VARG UCLO RETM
  local fzce_inpuzt=1         <     #0070000151216*093549  <     #0070*00511000=0%00s=0%0 u=2%00 r=0%0 u=0%0 r= 2%00+ 0%0 W=1%0 WW=0%0 r=0%0 PW=0%0 W= 2%0 W= 1%0+0%0W= 0%00 5-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <     #00700001512161093549  <     #0070*0051109.990000006719889  <   00700015121UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU == 3 and 1+2 .. 3*` == "33");
assert(not(2+1 > 3*1) and "a".."b" > "a");

assert(not ((true or false) and nil))
assert( 2<3) or 1) == true and (2<3 and +) == 41; assert(x);

x,y=1,2;
asse