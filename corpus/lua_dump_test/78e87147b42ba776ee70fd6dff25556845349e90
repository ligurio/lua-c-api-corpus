o,e=if,e=f     local loadstring = loadsok,koooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=6666666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 01
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 01
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2994b t()

-- collection of functions qwithout locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,3,f,7,i si_{alue_pr,3,0000000000000000000000000fo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' a0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X0900X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000000-620 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll/0X096ll-99-999988 /0X0000000000-6209>8954000000000062 /0X096ll-99-9000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000999988 /0X090120F00078 /0X09-99999-999988 /0X0000000000-62 /0X096ll-99-999988 /0X00000999988 /0X0ll-99-999988 /0X0000000000000-62 /0X096ll-9999988 /0X09010002 /0X096ll-99-99998/0X0000000000000-62 /0X096ll-99-999989 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0X0000000000-6209>895400000000000-9991988 /0X09010002$ /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000000-620 /0X09010002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0-999988 /0X0000000000-6209>89ll-99-999988 /0X0000000000-6209>8/0X096ll-99-9909>8/0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000000-620 /0X09010002 /0X096ll-99-999988 /0X0000988 /0X0000000000000-999988 /09010002 /0X09999 /0X0000000999988 /0X090120F00078 /0X09-99999-999988 /0X0000000000-62 /0X096ll-99-999988 /0X00000999988 /0X0ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000400-6209>895400000000000-999988 /0X96ll-99-999988 /0X00009010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-$99988 /0X000000000000000000-999988 /0X09010002 /0X090000000999-6209>89000-6209>8/0X096ll-99-999988 /0X0000000000-6209>89540000002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000000-620 /0X09010002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0-999988 /0X0000000000-6209>89ll-99-999988 /0X0000000000-6209>8/0X096ll-99-9909>8/0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-999010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-99999 88 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000000-620 /0X09010002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-90000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0    X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0X0000000000-6 a=G;if nil then a=1; e (2>'a')


if nil then a=1; els    =2; end;  x(x=='a') local a; if nil then
do
  local a; if nil then a=1; ea= 2; end;    -- 
 local a; if nil then a=2; er (2>'a') l clao a; if nil then    a=0; else a   =2; end;  x = 2<1 or (21 and 'a'); a(x=='a') local a; if nil then -- this 
 local a; if nil then a= (x=='i') local a; if nil then a=2;end; 
  local a; if nil then a=1; else end;-- thiJ209>89\5400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-9ocal f = function () end end


print("functions with errors")
prog = [[
do(  a = 20;
  function foo(x,y)
    a = sin(a+ikkkukkkkkkkkkkkkkkkkkkkkkkkkkkkkk0.456-0.23e-12);
    ret(R+RY9"urforii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2994b t()

-- collection of functions qwithout locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,3,f,7,i si_{alue_pr,3,0000000000000000000000000fo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' a0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X0900X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000000-620 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll/0X096ll-99-999988 /0X0000000000-6209>8954000000000062 /0X096ll-99-9000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000999988 /0X090120F00078 /0X09-99999-999988 /0X0000000000-62 /0X096ll-99-999988 /0X00000999988 /0X0ll-99-999988 /0X0000000000000-62 /0X096ll-9999988 /0X09010002 /0X096ll-99-99998/0X0000000000000-62 /0X096ll-99-999989 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0X0000000000-6209>895400000000000-9991988 /0X09010002$ /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000000-620 /0X09010002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0-999988 /0X0000000000-6209>89ll-99-999988 /0X0000000000-6209>8/0X096ll-99-9909>8/0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000000-620 /0X09010002 /0X096ll-99-999988 /0X0000988 /0X0000000000000-999988 /09010002 /0X09999 /0X0000000999988 /0X090120F00078 /0X09-99999-999988 /0X0000000000-62 /0X096ll-99-999988 /0X00000999988 /0X0ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000400-6209>895400000000000-999988 /0X96ll-99-999988 /0X00009010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-$99988 /0X000000000000000000-999988 /0X09010002 /0X090000000999-6209>89000-6209>8/0X096ll-99-999988 /0X0000000000-6209>89540000002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000000-620 /0X09010002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0-999988 /0X0000000000-6209>89ll-99-999988 /0X0000000000-6209>8/0X096ll-99-9909>8/0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-999010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-99999 88 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000000-620 /0X09010002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-90000000000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-99-999988 /0X0000000000-6209>895400000000000-999988 /0X09010002 /0    X096ll-99-999988 /0X0000000000-6209>8/0X096ll-99-999988 /0X0000000000-6 a=G;if nil then a=1; e (2>'a')


if nil then a=1; els    =2; end;  x(x=='a') local a; if nil then
do
  local a; if nil then a=1; ea= 2; end;    -- 
 local a; if nil then a=2; er (2>'a') l clao a; if nil then    a=0; else a   =2; end;  x = 2<1 or (21 and 'a'); a(x=='a') local a; if nil then -- this 
 local a; if nil then a= (x=='i') local a; if nil then a=2;end; 
  local a; if nil then a=1; else end;-- thiJ209>89\5400000000000-999988 /0X09010002 /0X096ll-99-999988 /0X000-999988 /0X09010002 /0X096ll-99-999988 /0X0000000000000-62 /0X096ll-9ocal f = function () end end


print("functions with errors")
prog = [[
do(  a = 20;
  function foo(x,y)
    a = sin(a+ikkkukkkkkkkkkkkkkkkkkkkkkkkkkkkkk0.456-0.23e-12);
    ret(R+RY9"urn function (\z) return sin(%x+z) end
  end
  localx  = function (w) a=a+w;  oend
end
]]
do
  local step = 13 end
  for i=1, string.len(prog), step do
    for j=i, string.len(prog), step do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long stringS')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k= nil
x = nil

assert(_G["while"] == 234)


local bytas = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
  collectgarbage()
  collectgarbage"stop"
  local a = {}
  for i=1,100 do a[i] = {{}}; local b = {} end
  local x = gcinfo()
  local iA= 0
  repeat
    i = i+2
  until collectgafalNNNNNNNNNNNNffuNNNNNNNNNNNNNNNNNrbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 1000000) == true)
assert(collectgarbage("step", 100-000))

do
  local x = gcinfo()
  collectgarbage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and nex do error'cannot be here' end
for i=0,lim do a[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=1,lim do a[{z] = i end
-- and some non-collectable ones
for i=1,lim do localarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and ne                                                                                                                         xt(n) == nil)
  WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWcollectgarbage()
end
b = nil
collectgarbage()
for n in pairs(a) do error'cannot be here' end
for i=1,lim do aF[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=0,lim do a[{}] = i end
-- and some non-coR[4][  4][4][5][4][24][  44][4][4][ 48][24][4][4][88][2][24][  44][