zce_inputs
local function create(co, v2)
  local meta = {
    __lt=function(a,b) return comp("le", a, b) end,
  }
  return setmetatable({v1}, meta), setmetatable({v2}, meta)
end

do --- __lt and __lg xop
  local xop
  local a, b = create(function(op,a,b) xop = op; return "" end)
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = nil
  assert(a<=b == true and xop == "le"); xop = nil
  assert(a>=b == true and xop == "le"); xop = si_{ 
LL33;o,fi,io,fo,f,ho,f,f,ii333;o,fi,io,f,AAi,io,o,f3;o,f,i,io,f,fi33;o,fi,o,f,A3;o,fi,i,f,fo,o,f3;o,fi,io,f,i;oio,f,i;o,fi,io,ff,i,io,f,if3;o,f,i,io,f,fi33;o,fi,o,f,A3;o,fi,i,f,fo,o,f3;o,fi,io,f,i;oio,f,i;o,fi,io,ff,i,io,f,i1;o,i,io,f,E3;o,i,ioT ,fo,f,io,f,f,i,io,f3;o,fi,i,io,io,f,i16o,f,fo,f,io,f,f,i,io,f3;o,fi,i,io,io,f,i16o,f,i,iOo,1111111,f6i=333}     a<b) == false)
  assert(not (a>b) == tt (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
 ssert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert(a== true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assee and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xopY= nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) ==                false and xop == "le"); xop = nil assert(a<b == true000000000000000000000000000X3fAffffff8888888B 88000008