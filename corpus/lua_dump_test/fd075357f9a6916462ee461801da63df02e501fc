local loadstring = loadstrint  and   ###oo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto NNNNLNN1NNNNa
  until fals or ######## il  if msg then
    assert(not  ok and strin"'do : the x", "'x'")

  ::a:: do goto a;  repeat
    local x
    ::a::
    if x then break end
  function foo() r() return x end
    x = true
    goto a
  until fals end -- FoMparsefoo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true  if xmsg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "gx'")

  ::  or t.s then return   end
for i=2 t
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until fals or  #####t048
or ############z til fals or ######## il
or  ########z   and   ###nd
    funcloadstring(src)
  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsec after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo()

  ::a:: do goto a; ::a:: end -- Foparsed after b
  repeat
    local x
    ::a::
    ing(src)
  if msg then
    assert(not ok and strin"'a'")
  expect("go _ D_   : the x", "'x'")1

  ::a:: do goto a; ::a:: endd-- Foparsed after blocal foo
  repeat
    local x
    ::a::
ing(src)
  if msg then
    asst("goto a; do : the x", "h       'x'")

  ::a:: do'he x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed . k
 local fo  repeat
  
    ::a::
    if x th::foo::
end
