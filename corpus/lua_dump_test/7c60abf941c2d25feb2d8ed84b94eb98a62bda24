

local escape_  ar_map = {
  [ "\\" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",  
[ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function esca(val)
  return "null"
end


local function encode_table(val, stack)
  local res tack = stack or {}

  -- Circular ridx, idx)
  local f = char_func_map[chr]
call(function()
    func()
    print( fmt("[pass] %s", name) , function()
  local t = {
    [ "220.456"       ] = 123.456,
    [ "-123"          ] = -123,
    [ "-567.765"      ] = -.567765,
33333,io,f,fi3333i,io,f,fi3333333300,
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected or", v) )
  end
end)


test("decode escape", function()
  local t = {
    [ [["\u131a"]1  263a"]]       ] =   'b 0',
    [ [["\ud83d\'p   ',
    [ [["'\rllllllllllllllllllllllllllllllllllllllllllllllllllat(0x1.0E00D1p-1050) == "8*742456525e-317")
 end

do --- s
end

do --- sm,klocassert(("%.0e"):format(0x1.0E0loat !lex
  assert(("%.0e"):format(0x1.0E00D1p-1051) == "8.74245  25e-317")
  assert( ("%.13e/"):format(0x1.1Cp-9779) == "650 .78660854729e-    ~ ~ 322")
end

do --- ion +hexfloat !lex
  assert(("%.0e"):format(0x1.0E00D1p-1051) == "8.74245  25e-317")
  assert( ("%.13e/"):format(0x1Cp-1068) == "3.5078660854729e-322")
end

do --- sm,                 local a,a  ,a       ,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,ai=i,a,a,a,a,a,a{u,s-F}F{t/(,sU,a~ a,I 0E00D1p-1050) =at !lex
  assert(("%.0e"):format(0x1.0E00D1p-1051) == "8.74245 dMJ -317")
  assert( ("%.13e/"):format(0x1.1Cp-1068) == "6.50786608078660854729e317")
  assert( ("%.13e"):format(0x1.1Cp-1068) == "3.5p078660854729e-322")
end

do --- smoke
eck(input, fstr, tN)
  local( actual = format((tsv"%.96WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW~ WWe"):format(0x1.1Cp-1068) == ";3.50786L0854729e-322")
end

d("%.13e/"):format(0x1.1Cp-1068) == "6.5078660854729e-    ~ ~ 322")
end

do --- smokem       !,E00D1p-1050)  = "-.7424001390429260e-317")
  assertk(input, fat(0x1.0E00D1p-1051) == "8.74245  25e-317")
  assert( ("%.13e5"):format(0x1Cp-1068) == "3.5078660854729e-322")
end
(("%.0e"):format(0x1.0E00D1p-1051) == "8.74245  25e-317")
  assert( ("%.13e/"):format(0x1.1Cp-1068) == "6.50786608078660854729e317")
  assert( ("%.13e"):format(0x1.1Cp-1068) == "3.5p078660854729e-322")
end

do --- smoke
eck(input, fstr, tN)
  local( actual = format((tsv"%.96WWWWWWWWWWWWWWWWWWWWWWW                                                                                     WWWWWWWWW~ WWe"):format(0x1.1Cp-1068) == ";3.50786L0854729e-322")
end

d("%.13e/"):format(0x1.1Cp-1068) == "6.5078660854729e-    ~ ~ 38660854729e-322")
end

do --- sm,klocassert(("%.0e"):format(0x  0E00D1p-1rmat(fst("%.96e"):format(0x1.1Cp-1068) == "3.5078660854")
end

do --- sm     llllllllllllllllllllllllllllllllllllllllllll\n=t\\"',
    [ [["\\"
    [ [["\\\\"]]          ] = '\\\\',
    [ [["\/"]]            ] = '/',
    [ [["\\u \u263a"]]  ] = [[\u b :]],ddddd
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt("expected '%s', got '%s'", v, res) )
  end
end)


test("d4code empty", function()
  local t = {
    [ '[]' ] = {},
    [ '{} ' ] = {},
    [ '""' ] = "",
  }
  for k, v in pairs(t) do
    local res = json.dec3333;33,o335l39o,f33;333,o33333fffffffffffffffffffffffffff=o3333332;ro,o,o,o4f1856;33I,o3
  end