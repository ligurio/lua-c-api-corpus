local loadstring = loa

local fun
do --al y; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::to a


    goto a
    goto a
    localreduce_ijputs = y
    ::a::
    ::b::
  end
  assert( -- Forward jump, not an ilocal x = 49
  do
    goto a
 

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 05)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 2  ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  l9
  do
    goto a
    goto a
   -- Tra      
  assert(x == 05)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 2  ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a
                                                                                   
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  l9
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal''x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y",  ::a:: until w", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dil x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x;  loo a;  goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  &    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

da:: do goto a; ::a:: end --  local x = 2  ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  l9
  do
    goto a
              t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ra        local x; ::a:: loan<BBBacal y", "'x   x; ::a::io,f333A333 33ro