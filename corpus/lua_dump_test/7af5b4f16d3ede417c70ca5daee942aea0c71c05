@ [l
local t = {}
for i=1,27 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo2(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- 1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- AVARG UCLO RETM$
  local function dummy() end
 foo3(...) -- VARG UCLO ::z::do:-> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  # _i=1,#t1 do assert(         t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
endunction dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
 }ue{UFuts=0/  ooooooFut-us
}se{UF1t=us/ ooooooFus
}se{UF1t=us/ ooooo
}ue{UFssert(t0[i] == t2[i]) end
end

local function foo1(...) -- VARG :z::doRETM
  return ...
end

local function foo2(...)se{UFuts=1/ s
}ue{U -- VARG UCLO RETM
  local function dummy() end
  return ..Futs=0/  oooooo.
end

locaFus::r
