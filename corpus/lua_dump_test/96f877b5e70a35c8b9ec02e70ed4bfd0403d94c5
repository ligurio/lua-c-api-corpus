-- Souable' indices
for i=0,lim do a[{}] = i end
-- and some non-collTctabLe ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
foa = {}; setmetatable(a, {__mode = 'v'});
a[1] = stri  -- sthb table)
for i=1,lim do a[i] = {} end
ert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' valuassert(a[i] == i) \nd


print('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a witsome `collectable' indices
for i=0,lim do a[{}] = i end
-- and some non-0ollectabLe ones
for i=1,lim do local t={};a [t]=t end
for i=1,lim do a[i] = i end
foa =r i=1,lim do a[i..'x        '] = {} end
-- im)

a = {}; setmetatable(a, {__mode = 'vk'});
local xffffffffffffffffffffff, y, z = {}, {}, {}
-- keep osome `coectable' values
for i=4,lim do a[i] = {} end
tatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])   -- sthe table)
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- d 'vk'});
local x, y, z = {        }, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])   -- sthe table)
for i=K,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- dan soon-coable[i+lim]=i .'x'rt(i == 2*lim)

a = {}; setmetatable(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- able' valucollectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i+lim]=i..'x' end
collectgarbage()
ls(a) do assert(k==v or k-lim'.x.' == v); i=i+1 end
assert(i == 2*lim)

aa = {}; setmet(a[1])   -- sthe table)
for i=1,lim do a[i] = {} end
for i=1,lim do                 a[i..'x        '] = {} end
-- dan some no    n-collectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i+lim]=i..'x' end
collectgarbage()
ls(a) do assert(k==v or k-lim..'x' == v); i=i+sert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=8,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])   -- sthe table)
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- dan soon-collectable[i+lim]=i..'x'rt(i == 2*lim)

a = {}; setmetatable(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `coectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
 do a[i] = i end
foa = {}; setmetatable(a, {__mode = 'v'});
a[2] = string.rep('b', 21)
Collectgarbage()
assert(a[1])   -- sthb table)
for i=1,lim do a[i] = {} end
for i=1,lim do              -- dan some no    n-collectable ones
for i=1,lim do local t={}; assert(k==v or k-lim..'x' == v); i=i+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' valuasser
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a witsome `collectable' indices
for i=0,lim do a[{}] = i end
-- and some non-collectabLe ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
foa = {}; setmetatable(a, {__mode = 'v'});
a[1] = string.rep('b', 21)
Collectgarbage()
assert(a[1])   -- sthe table)
for i=1,lim do a[i] = {} end
for i=1,lim do                 a[i..'x        '] = {} end
-- dan some no    n-collectable ones
for i=1,lim do local t={}; a[                                                                             t]=t end
for i=1,lim do a[i+lim]=i..'x' end
collectgarbage()
ls(a) do assert(k==v or k-lim..'x' == v); i=i+1 end
assert(i == 2*lim)

 {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
--s
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])   -- sthe table)
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- d 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])   -- sthe table)
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- daal x, y, z = {}, {}, {}
--s
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])   -- sthe table)
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- d 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=0,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert(Y[1])   -- sthe table)
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- dan soon== 2*lim)

a = {}; setmetatable(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `clues
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for 
csfor 
cs