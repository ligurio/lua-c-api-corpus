 fct("::a::a ::::", "'a'")
  expect("::a:: ::b:: do ::b:::b::", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- Err considered to be outocal x = 22

do --- Backwards goto must cll.
  local t  = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[2]() == 1)
  assert(t[2]() == 2)
end

do ::a::
  local x   t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto       a end
loadstring(src)
                              if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic g&o and la  }
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 0
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl == nil the: end:a::", "
  expect("::a:: ::b:: db:::b::", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- ing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = fun and nction() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then  end
end
  
do --- Basic goto and label semanx = i
  i = i + 1
  if i <= eh2 tn goto a end
      rt(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv loop6Trailing laal i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1) == 2)
end

do --- lvl == Uz{i