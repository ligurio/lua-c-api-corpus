
local t = {}
for i=1,26 do t[i] = string.char(96+i) end
local function foo2(...) -- VARG UCLO`RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  sert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM[  return ...
end

local funnd

local function foo1(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO - function foo1(...) -- VARG RETM
  return ...
end

local function foo1(...) -- VARG UCLO RETM
  local function dummy(while e do if 0 or k or o then break end x=x+y break en,0b0LL,0b0LL*0b0Ldo return ... end
  local functi-- VARG UCLO -> RETM
  do return ... end
  local functionon foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local functi-- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local fun-- VARG
  do rassert(t1[i] == t2[i]) dene
dn

local function foo1(...) -- VARG RETcal function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local local lines = {}
local function hook()
  lines[#lines+1] funct= o i