
local function create(comp, v1, v2)
  localtable({v2}, meta)
end

do --- __lt and  = cr(a>b) == false and xop == "lt"); xop = nil
  assert( ot (a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b) == true and xop == "lt"); xop = nil
  fNfffffffff1ff8ffuNNNNNNNFNNNNNNassert(a>=b == true)

  assert(true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __le b[1] = 2
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(nue)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert= nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  assert( ot (a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b) == true and xop == "lt"); xop = nil
  fNfffffffff0ff8ffuNNNNNNNFNNNNNNassert(a>=b == true)

  assert(true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)
  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __le b[1] = 2
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(nue)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert(a>=b == trle and "le")t(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethssert(not (a>b) =d xop == "lt"); xop = nil
  asserp(a>=b == false and xop ==nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p1>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,n   +fi,nil ,nf60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,r,3    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,n   +fikkk,nil ,l,nil,nil ,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr,3,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,nnil ,nf60,8083,e_k,ni  ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nio_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,7  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8>83,e    ,nl ,l,nil ,r,7    ,kkkk,7,io_pr,7,k,nil ,il  ,io_pr,7    ,kk      ,nil ,nil ,llnil ,nr,7,io_pr,5  ,kkkkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,use_value_qvofile7,io_p0>60,8083,e    ,nl ,l,nil ,nr,7,i_pr,7    ,kkkk,7,io_pr,7,k,nil ,il ,nf,7    ,kkkk,7,io_pr,7,k,nil ,il ,nfkil,nil ,nnil ,nf20,8   ,kk      ,nil ,nil ,ll ,n+kkkkr,7,kk+kkkkil ,l,n,il ,nr,8,ioooookkkkk,l,nil,nr,7,io_p,7,kkk,nr,7,ir,7,kk+kkkk  ,nil,nil ,nr,7,io_p0>60,8083,e    ,nl ,l,nil ,nr_,7,i_pr,7    ,kk1k,7,io_pr,7,k,nil ,il ,nfkil,nil ,nnil ,                    nf60,8083,e_k,nil ,l,n,il ,nr,7,ioooookkkkk,l,nil ,nr,7,io_p,7,kkkkkk,nil ,l,nil ,l,nil ,n  +r,7,io_pr,7     == false)

  a[0] = 2
  asrert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __lend "le"); xop = nii=1
i=1
se{UFuts=1/   -sFut-us
}se{UFuts=1/ooooooooooooooooou,sFut-uooooooo}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  out-us
}se{UFuts=1/ ooooooooooooou,sFut-us
}se{UFuts=1/   -u,s-u,sFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/ Fut-us
}se{UFuts=1/ ooo=1/   -u,s
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  oooooo;ut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooos
}se{UFutt-us
}se{UFuts=1/   -u,sooFus-u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooos
}se{UFzts=1/ ooFus
}ue{UFut3=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooo}se{UFuts=1/   -u,soFus
}ue{UFuts=5/  ooooooFut-us
}se{UFuts=1/ooooooo
}se{UFuts=1/ oooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFusil

  assoe(rtnt (a<b) == falsg and xop == "lt"); xo
}ue{ -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooF
}ue{UFuts=0/  oooooop = nil
  assert(not (a>b) == fal)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a> b) == false)

  a[2] = 2
  assert(a<b == falFut-us
}se{UFuus=1/ ooooooooose)
  assert(a>b == true)
  assert(true)

  aoo
}se{UFutssser=t(not (