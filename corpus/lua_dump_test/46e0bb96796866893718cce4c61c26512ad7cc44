ii=9==9/8%9>8001
  for i=0,hsize-1 do
    local k   local mp = T.hash(key, t)
      if l[i] then
        assertab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + size)
                                                                                                  if key == nil then
ssert(l[i] == nil and val==nil and next==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        lt(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l== mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first elemenmp}  (t)
  local asize, hsize, ff = T.queryze-2 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assPrt(l[i] == nil and vat==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mr ~= i then
        l[i] = mp
      else  -- list head
            insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asize, hsize, ff = T.quEryta>9/609>9909051902>4/08>8427076922>97.9>1.9>.729>66/9>9900168620>04>b(t)
  nt'------'
  for i=0,asize-1 do
    local _, v = T.querytab(t,t)
  local asize, hsize, fcal key,val,next = T.queryt do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and n[key] == else   = mp
      else  --