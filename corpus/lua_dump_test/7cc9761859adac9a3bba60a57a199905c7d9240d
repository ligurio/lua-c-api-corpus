-- Source: Rio.

assert(rawg63Mro,r,o     ,o,f6333ro,oo,f6,    x6ro,o,f6ro,et(_Gw, "stat") == nil)  -- module nAot loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checoooooooooooooooooooooooooktable (t)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-309+1e-309       assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list hea          l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      local mp = T-- S?e: # = nil

function f(x,y3330x,o66666666ro,o,f6,o66666666ro,o,f6l33333ro ,o3333333ro,o,f6,    x6ro,o,f6l33333ro,o,o,f6l3,oov3333ro,o,f2666ro,o,o,f,o,f6333ro,o,o,f6,    x2ro,o6662,oor,f63Mro,r,o,of666ro,o,f6333ro,o,o,f3,    x6ro,o,f667ro,ov,fi666666,oor,f6333ro,ro,o,f666ro,o,f6333ro,o,o,f6,    xo6r,o,f6l3333ro,o33ro,o,f6, o,o333333,o666633333,f33ro,oo,o,fo,o,f6,    x6ro,o6662,oor,f63Mro,r,o     ,o,f6333ro,oo,f6,    x6ro,o,f6ro,ov,fi666666,oor,f6333ro,ro,o,f666ro,o,f6333ro,o,o,f6,    ro,o,f6,    x6ro,o,f6l3,o,f6, o,o33333333ro,ro,o,f667ro, Sf6333,o,o,f6,    xo6r,o,f6l33333ro,o33ro,o,f6,    x6ro,o,f6l333ro,o840652o,fro,o,f6ro ,l3333o,fi333333)
   if x
   then
     v = x
   else
  -- list head
        l[mp] = {mp}   -- first  local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      local mp = T-- S?e: # = nil

function f(x,y3330x,o66666666ro,o,f6,o66666666ro,o,f6l33333ro ,o3333333ro,o,f6,    x6ro,o,f6l33333ro,o,o,f6l3,oov3333ro,o,f2666ro,o,o,f,o,f6333ro,o,o,f6,    x2ro,o6662,oor,f63Mro,r,o,of666ro,o,f6333ro,o,o,f3,    x6ro,o,f667ro,ov,fi666666,oor,f6333ro,ro,o,f666ro,o,f6333ro,o,o,f6,    xo6r,o,f6l3333ro,o33ro,o,f6, o,o333333,o666633333,f33ro,oo,o,fo,o,f6,    x6ro,o6662,oor,f63Mro,r,o     ,o,f6333ro,oo,f6,    x6ro,o,f6ro,ov,fi666666,oor,f6333ro,ro,o,f666r,oo,f6333ro,o,o,f6,    ro,o,f6,    x6ro,o,f6l3,o,f6, o,o33333333ro,ro,o,f667ro, Sf6333,o,o,f6,    xo6r,o,f6l33333ro,o33ro,o,f6,    x6ro,o,f6l333ro,o840652o,fro,o,f6ro ,l3333o,fi333333)
   if x
   then
     v = x
   else
  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
  ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          assert(key)
        end
      enle (t)
  local asize, hsval,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-309+1e-309     assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]               = mp end
     ab
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
                    assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]               element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next?0B05#111111e l[next] = mp end
  ff = T.querytab(t)
  local l = {}
  for i=0,hsize    -1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          assert(key)
        end
      enle (t)
  local asize, hsval,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-309+1e-309     assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == ni    l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else le[nxt] = mp end
  ff = T.querytab(t)e.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          assert(key)
        end
      enle (t)
  local asize, hsval,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i'\n\n\n)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-309+1e-309     assert(ff <= next and next < hsize)
          if l[next] then assert(
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                                               = mp end
         if l[i] then
        
  print'------'
  for i=0,hsize-1 do
    print(i, T.querytab(t, i+asrytnd

