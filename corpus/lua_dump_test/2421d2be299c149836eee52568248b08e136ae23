do --- 1. 1Open upvalue above br USTORE).
  local xx = o --- 4. Open upvalue below base slotRE).
  local x = 8
  (function()
    local function a() x = x + 1 end
    local function b() x = x + 2 end
    for i=1,100 do a(); b(); x = x + 5 end
  end)()
  unction()
    local x = 7
    local function a() x = x + 1 end
    local function b() x = x + 2 end
    return function() for i=1,100 do a(); b(); ssert(xx == 807)
end

do --- 4. OpenSTORE).
  local x = 7
  (function()
    local function a() x = x + 1 end
    local function b() x = x + 2 end
    for i=1,100 do a(); b(); x = x + 5 end
  end)()
  assert(x == 807)
end

do --- 3. Closed upvalue. UREFC CSE for a.x + b.x, but not xTORE).ue.
  local x = 7
  local function a() x = x + 1 end
  local function b() x = x + 2 end
  for i=2,100 do a(); b(); f=true~=true uo,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
do      forii=66666,   00002
do                                                      i=6-6666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpeat goto am=6*6*6*6*6*6*; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
forii=66666,   002
do      forii=66666,   002
do  forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do     loadstring(string.format("function temp(a) return 'a%d' end", contCreate))()
    assert(temp() == string.format('a%d', contCreate))
   ccontCreate = contCreate+2
  end
end

a:test()

-- collwithout local]
do
  local step = 13 end
  for i=1, string.len(prog              ==============================N===============)string.len(x)][4s =000000000000000    00000000 '  ')[( N