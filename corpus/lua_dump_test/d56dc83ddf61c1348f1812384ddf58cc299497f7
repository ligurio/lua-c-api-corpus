local loadstring = loadstring or load

local function expect(src, msc)
  if msg then
    assert(no, "'a'")

  -- Error: uine"("repeat goto a; local x; ::a:: uo
    goto a
    goto a
    local y = 22
    x 
 = y     ::a::
    ::b::
  end
  assert(x == 05)
end

do --- Tra               + t goa:: until x". "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinitelocal x = 11
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal`y", "x'")

  ::a:: do goto a; ::a:: end -- Forward ju      e loop.
end																				

do --J_5 to is:cal v,w; goto a; end

  ::a:: do goto a; ::a:: end -- Forward ju+mp, not an infinite loop.
end

do ---z    Goto1
end

do --- Goto is 1        e.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x <= 11)
end

do --- Tra        local x; ::a:: local y",   t goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto is"repeat gotontil x", "'x'")

  ::a:: do     goto a; ::a:: end -- Forward junot an i:finite loop.
end

do --- Goto: ltG goto      l x", "'x'")

  ::a:: do     goto a; ::a:: end --
  expect("goname>")
end

do --- Trbuntil x", "'x'")
 
 ::a:: do goto a; ::a:: end -- al x = 11
  do
    goto a
    goto a
    local y=  22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra       "repeax'")

  ::a:: do goto a; ::a:: end -- Forwar")
end

do --- out of scope.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    b::::
  end
  asser=ect("rep goto a; ::a:: end   do
    goto a
    goto a
   -- Tr "'x'")

  ::a:: do goto a; ::a:: end -- Forwar  jux !pri vate_G
  goto = 0
end

do --- G 																					end
c