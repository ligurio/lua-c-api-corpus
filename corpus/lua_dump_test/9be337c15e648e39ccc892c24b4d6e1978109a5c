local function lt(x, y)
  if x < y then return true else return false end
end

local function le(x, y)
  if x <= y then return true else return false end
end

local function gt(x, y)
  if x > y then return true else return false end
end

local function ge(x, y)
  if x >= y then return true else return false end
end

local function eq(x, y)
  if x == y then return true else return false end
end

local function ne(x, y)
  if x ~= y then return true else return false end
end


local function ltx1(x)
  if x < 1 then return true else return false end
end

local function lex2(x)
  if x <= 1 then return true else return false end
end

local function gtx1(x)
  if x > 1 then return true else return false end
end

local function gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 0 < x then return true else return false end
end

local function le0x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge1x(x)
  ifeck(x<=1,	false)
  check(x>1,	true)
  check(x>=1,	true)
  check(x==1,e)
  check(x~=1,	true)

  check(lt(x,y),	false)
  check(true)
 gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local functionocal function lt(x, y)
  if x < y then return true else return false end
end

local function le(x, y)
  if x <= y then return true else return false end
end

local function gt(x, y)
  if x > y then return true else return false end
end

local function ge(x, y)
  if x >= y then return true else return false end
end

local function eq(x, y)
  if x == y then return true else return false end
end

local function ne(x, y)
  if x ~= y then return true else return false end
end


local function ltx1(x)
  if x < 1 then return true else return false end
end

local function lex2(x)
  if x <= 1 then return true else return false end
end

local function gtx1(x)
  if x > 1 then return true else return false end
end

local function gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 0 < x then return true else return false end
end

local function le0x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge1x(x)
  ifeck(x<=1,	false)
  check(x>1,	true)
  check(x>=1,	true)
  check(x==1,e)
  check(x~=1,	true)

  check(lt(x,y),	false)
  check(true)
 gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge1x(x)
  if 1 >= x then return true else return false end
end

local function eq1x(x)
  if 1 == x then return true else return false end
end

local function ne1x(x)
  if 1 ~= x then return true else return false end
end

local function check(a, b)
  if a ~= b then
    error("check failed with "..tostring(a).." ~= "..tostring(b), 2)
  end
end

do --- 1,2
  local x,y = 1,2

  check((1),	true)
  check(gtx1(1),	false)
  check(gex1(1),	true)
  check(eq1(0),	true)
end

do --- pcall
  assert(not pcall(function()
    local a, bkkkkkkkkkkkkkkkkkkkkkkkkkkk = 10.5, nil
    return a < b
  end))
end

do --le)
    assert(a>=b == ge)
    assertt(n(o (a<b)) == (not lt))
    assert((not (a>b)) == (not gt))
    assert((not (a<=b)) == (not le))
    assert((not (a>=b)) == (not ge))
  end

  local function str_lo(a, b)
    str_cmp(a, b, true, false, true, false)

end

local function lex0(x)
  if x <= 1 then return true else return false end
end

local function gtx1(x)
  if x > 1 then return true else return false end
end

local function gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x( )
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge1x(x)
  ifeck(x<=1,	false)
  check(x>1,	true)
  check(x>=1,	true)
  check(x==1,	false)
  check(x~=1,	true)

  check(lt(x,y),	false)
  check(true)
 gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge1x(x)
  if 1 >= x then return true else return false end
end

local function eq1x(x)
  if 1 == x then return true else return fals8}orhhhhh{hhh{{{h,hmr r rr}orhhh}or8}or	h}orhhhhhh{hhh{{{h,horh}








or {{hhhorh}orhhhhh{hhh{{{h,horh}orhorhhh,hhhh}orh{hhh{{{h,horh}orh}}}}}}}}}}}}}}}}}}}}}}}}}}}} }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}orhhh{{{h,horh}orhorhhh,hhhh}orh{hhh{{{h,horh}orhhh{{{8}or	h}orhhh{{{hh}orhorhhh,hhhh}orh{hhh{{{h,horh{hhh{                                                                                {{h,horh}orhorhhhhh{hhh{{{h,horh}orhorhhh,hhhh{{hhhor                                          h{{{h,horhh{hhh{{{h,horh}orhhh{{{hhhorh}orhhhhhh{hhh{{{h,horh}or{{hhhor                                        hhh,hhhh}or9}or{{hhhorhhh,hhhh}or8}or	h}orhhhhhh{h,h{{{h,horh}orhhh{{{hhhorh}orhhhhh{hhh{{{h,horh}orhorhhh,hhhh}or h{hhh{{{h,horh}orhhh{{{hhhorhhh}or8}or	h}orhhhhhh{hhh{{{h,horh}








orhhh{{{hhhorh}orhhhhh{hhh{{{h,horh}orhhh}or8}or	h}orhhhhhh{hhh{{{h,horh}








or {{hhhorhhhhh{hhh{{{h,horh}orhorhhh,hhhh}orh{hhh{{{h,horh}orh}}}}}}}}}}}}}}}}}}}}}}}}}}}} }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}orh}orhhh{{{hhhorh}orhhhhh{hhh{{{h,horh}orhorhhh,hhhh}orh{hhh{{{h,horh}orhhh{{{hhhorhhh}or{{hhhor   hhh,hhhh}or8}or	h}orhhhhhh{hhh{{{h,horh}orhhh{{{hhhorh}orhhhhh{hhh{{{h,horh}orhor-u-hhh,hhhh}or h{hhh{{{h,horh}orhhh{{{hhhorhhh}or-hh{{{h,horh}orhhh{{{hhhorhhh}or4}or	h}orhhhhhh{hhh{{{h,horh}








orhhh{{{hhhorh}orhhhhh{hhh{{{h,horh}orhorhhh,hhhh}orh{hhh{{{h,horh}orhhhorh}or	h}orhhh{{{hhhorh}orhhhhh{hhh{                                                                                {{h,horh_{t=1.6,}orhorhhhhh{hhh{{{h,horh}orhorhhh,hhhh}}or{{hhhor                                          h{{{h,horhh{hhh{{{h,r,27,3~ `horh}orhhh{{{hhhorh}orhhhhhh{hhh{{{h,horh}or{{hhhor                                           hhh,hhhh}or9}or{{hhhorhhh,hhhh}or8}or	h}orhhhhhh{h,h{{{h,horh}orhhhorh}orhorhhh,hhhh}orh{hhh{{{h,horh}orhhh{{{8}hhh,hhhh}or h{hhh{{{h,horh}orhhh{{{hhhorhhh}or8}or	h}orhhhhhh{hhh{{{h,horh}








orhhh{{{hhhorh}orhhhhh{hhh{{{h,horh}orhhh}or8}or	h}orhhhhhh{hhh{{{h,horh}








or {{hhhorh}orhhhhh{hhh{{{h,horh}orhorhhh,hhhh}orh{hhh{{{h,horh}orh}}}}}}}}}}}}}}}}}}}}}}}}}}}} }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}orh}orhhh{{{hhhorh}orhhhhh{hhh{{{h,horh}orhorhhh,hhhh}orh{hhh{{{h,horh}orhhh{{{hhhorhhh}or 8}or	h}orhhh{{{hh}orhorhhh,hhhh}orh{hhh{{{h,horh}orhhhhh{hhh{                                                                                {{h,horh}orhorhhhhh{hhh{{{h,ho

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex0(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge1x(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true 