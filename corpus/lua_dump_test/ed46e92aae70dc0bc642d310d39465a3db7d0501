(-i' y", "'ix'")
  expect("do cal x; ::a:: l", "'x'")

  ::a:: do go:a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{56 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- B     '___al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Bre 1
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; locare is parsed after break.
  local foo
  repeat
    local x
    ::a::
       goto a
  until false
  assert(foo() ==2)
end

do ---
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Brescope.
  expect("goto a; local x; :::a:: local y", "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty s- Label prevents j__al x
  ::f  EEu__ ocal y
  assert(y == nil)
  y = true
  k = k + 2
  if k < 2 then goto foo end
end
   if key == nil then dstring(sr[1]() == 2)
end

do --- Breakoto a; lo=cal x; ::a:: until x", "'x'")

  ::a::goto a end
  assert(t[1]() == re 1
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; locare is parsed after break.
  local foo
  repeat
    local x
    ::a::
       goto a
  until false
  assert(foo() ==2)
end

do ---
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Brescope.
  expect("goto a; local x; :::a:: local y", "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty s- Label prevents j__al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 2
  if k < 2 then goto foo end
end
   if key == nil then dstring(sr[1]() == 2)
end

do --- Breakoto a; lo=cal x; ::a:: until x", "'x'")

  ::a::goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- l x
  ::foo::
  locser0t(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do ---B reakif x then break e:: until x", "'x'")

  ::a:: do goto a; ::        a:: end -- Forward jum9Ep, not an infinido -ls and mept'