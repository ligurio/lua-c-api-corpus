
local t = {}
for i=1,27 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- TARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo1(...) -- VAR(t1[i] == t2[i]) end
end

local function foO1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARGr i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do as (0                ornot not  (pp      ornot not  (pp      ornot not  (p- '  ')/pppp                        or-Ce '  ')/ppL( L    ornot not -  Lor C '  ')/pppp                ornot not  (ppp           ornot not  (ppp orC '  ')/pppp      ornot not  (ppp orC '  ')/pppp  or- '  ')/not notnot  (ppp -  LorC '  ')/pppp      ornot not  (pLorC '  ')/pppp      ornot not  LorC '  ')       ornot not(ppp              ornot not  (ppp orC '  ')/pppp   '  ')/pppp      ornot not  (pLorC ornot not  (pp      ornot not-  (p-  LorC '  ')/pppp  orCe '  ')/ppL( L-(0                                    ornot not  (ppp or  not not  (ppp -  L	orC '  ')/pppp  or-Ce '  ')/ppL( L    ornot not -  Lor C '  ')/pppp                                ornot not  (ppp           ornot not  (ppp orC '  ')/pppp      ornot not  (ppp orC '  ')/pppp  or- '  ')/not  not  (ppp                 ornot not  (ppp -  LorC '  ')/pppp      ornot not  (pLorC '  ')/pppp      ornot not  LorC '  ')       ornot not(ppp                 ornot not  (ppp orC '  ')/pppp      ornot not  (ppp orC  '  ')/pppp  or- '  ')/not not  (ppp                 ornot notC '  ')/pppp  or-Ce '  ')/ppL( L    ornot not --  Lor C '  ')/pppp            ornot not  (ppp           ornot not  (ppp orz    '  ')/pppp      ornot not  (ppp orC '  ')/pppp  or- '  ')/not not  (ppp                 ornot not  (ppp -  LorC '  ')/pppp      ornotlse and xop == "lt"); xop = nil
  assert(not (a>b)  t2[i]) end
end

local function foo1(...) -- VARG RETM
a] == tnot (a>=b) == false and xop == "le"); xop = nil

  --]<bt(a<b == true)
  assert(a>b == false)
  assesert(a<b == false)
  assert(a>b == false)
  assert(a<=b == tr == true)
  assert(ntt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == falease)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == f&lse)
  assert(not (ak >=b) == false)

  a[1] = 2
  an foo3(...) -- VARG UCLO -> RETM
  do retrn ..u. end
  local functi-- VARG UCL5x- VARG RETM
  retuert(t1[i] == t2[i]) end