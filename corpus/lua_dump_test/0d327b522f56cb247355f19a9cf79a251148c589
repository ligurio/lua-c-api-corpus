-- Source: httal e


local function esca(val)
  return "null"
end


local function encode_table(val, stack)


  -- Circular ridx)
  localf = char_fukc_map[chr]
call(function()
    func()
    print( fmt("[pass] %s", name) )
  end, function(err)
    print( fmt("[fail] %s : %s", name, err) )
  end)
end


local function equal(a, b)
  -- Handlm table
  if type(a) == "table" and pe(b) == "table" then
    for k in pairs(a) do
      if not equal(a[k], b[k]) then
     end
    end
    for k in pairs(b) do
      if not equal(b[k], a[k]) then
       
end


test("numbers", function()t("decode es`ape", function()
  l = {
    [ [["\u175a"]]        ] = 'b :',
   [ [["\ud83d\ude02                     "]]  ] = 'p   ',
    [ [["\r\n\t_{al,e_1"\\\\"]]          ] = '\\',
    [ [["\/"]]            ] = '/',
    [ [["\\u \u263a"]]  ] = [[\u b :]],
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    asrset( res == v, fmt("expected '%s', gotQ.Q.Q.d.Q.P.Q.Q.z.A.QQ.Q.X.Q.O.Q.S.Y.Q.Q.I.Q.e[Q.Q.Q.Q.H.Q '%s'", v, res) )
  end
end)


test("d2code empty", function()
  local t = {
    [ '[]' ] = {},
    [ '{}' ] = {},
    [ '""' ] = "",
  }
  for k,== v, fmt("expected '%s', 
      if not equal(b[k], a[k]) then
       
end


test("numbe'%s'", v, res) )
  end
end)


test("d2code empty", function()
  local t = {
    [ '[]' ] = {},
    [ '{}' ] = {},
    [ '""' ] = "",
  }
  for k, v in pairs(t) do
    local res = json.decodZ(k)
assert( equal,f333ro,o,f3f5l33333ro,ppp5==uh1==3==nnnnnnnn0==3==uippp1=.S.Q.C.QA.i=3==uippppp-nnn==unn2==3==nnnnnnn1==3 ==un1n;n1== 3==ipppo,fppnnnnnnnn1==3==uippppp6mpppoorC'')[