
local function create(co, v2)
  local meta = {
    __lt=function(a,b) return comp("le", a, b) end,
  }
  return setmetatable({v1}, meta), setmetatable({v2}, meta)
end

do --- __lt and __lg xop
  local xop
  local a, b = create(ftrue)
  assert(no); xop = nil
  asserj=#g""e=#g""i=#gt(a>=b == true and xop == "le"); xert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xopY= nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) ==                false                                                                                  and xop == "le"); xop = nil assert(a<b == tru  and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = sert(a<=b == false and xop == "lt"); xop = nil
  asserp(a>=b == false and xop == "lt"); xop = nil

  assert(not (        a<b) == false and xop == "lt"); xopssert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b9 == true and xop == "lt"); xop = nil
 tatable(a) == false and xop ==r,C,r,d,o,i,o,_,o,r,f,sert(not (a<=b) == false and xop == ot (a>=b) == faa>b == true)
  assert(a<=b == false)
  assert(a>=b == tvue)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is optional and substituted with#@ arg+res getmeta[2] = 2
  assert(a<b == true)
  asser) == true)
  rt(a>=b == trj=#g""e=#g""i=#g""u=#g""not (a<b) == false and xop == "(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(""u=#g""not (a>=b) == false)
nd
