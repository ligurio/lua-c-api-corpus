 fct("::a:: ::a:b::", "'a'")
  expect("do :0a:: end; goEnd", "break")

  -- Err considered to be outocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(                          "<name>")
end

do --  `d    - Trailing la", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- Err considered to be outocal x = 44

dosert(t[2]() == 2) --- lv looreducefalsNNNNNNNNNNNNNNNNN41111111NNNNffffffffff1ff8ffuNNNNNNNNNNNNNN then goto a endert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
 o        rn x end
  x = i
  i =eturn x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]do
local tr1 function t()return tr1 end loc() == 1)
  assert(                         endi] = function() return x end
  x =