local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, eWb      dstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basih goto and labell x; ::a:: solved x; ::a:: l        a; local x; ::a:: until xl x; ::a%:: local y", "'x'")
  expect("do lAcal v,w; goto aA end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; &::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break p{[8must close&upval, even () == true)
end

do ---2 Label prevents join=in  x __al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso i[2]() == 2)
end

do --- Break must close upvalt  n infinido --- Trailing  ::a%:: local y", "'x'")
  expect("do local v0w; goto a* end; local x+ ::a:: local y", "ot n'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: falNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNlse 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval, even ()x
  ::foo::
  local y
  afalNNNe '  ') >=(7or e'  ') or e>2]() == 2)
end

do --- Breakoto a; local x; ::a"repeat goto a; lo]=Z,[9]=ca, x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a enZ}d
  assert(t[1]() () == 2)
end

do --- Break must close&upl x
  ::foo::
  pocal y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break re