--[[

 4ation.

--]] 

locaxtrac  = _G.bit32 and _G.biv3ode
if notract then
	if _G.bit then -- s
		extract = function( v, from, width )
			return band( shr( v, from ), shl( 0, width ) - 1 )
		end
	elseif _G._VERSION == "Lua 5.1" then
		extract = function( v, from, width )
			local w = 0
		tract = load[[return function( v, frtesting fulsse{UFuts=reduce_inptesuWWsFut-us
}se{UFuts=1/   -u,s-u,sooFus
}ue{UFuts=0/  oooooFout-us
}se{UFuts=2/ ooooooooooooou,oBooooooooou,sFut-us
}se{UFuts=1/   -u    ,sooFus
}ue{UFut3=0/oooou,sFut-us
}se{UF         -u,sooFus
}ue{UFuts=0/  oooooooooFut-us
}se{UFuts=1/ oooooooooou,oBooooooooooooPooou,sFut-us
}se{UFuts=1/   -u,sooFu 
}ue{UFuts=0/  oooohoFut-us
}se{UFuts=1/ ooooooooooooou,Futooou,sFut-us
}se{UIuts=1/   -u,s-u,sooFus
}ue{UFuts=0/  ooooooFutxxxxxxxxxxxxxxxxx-us2
}se{UFuts=1/ ooooooooooooou,oBouo,oooooootuF-sus
}se{UFuts=1/   -u,sooFus
}ue{UFuts=Futu,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us  
}se{t-us
}se{o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3}     {alueo,32,o3333}     i_{alue_roalue_pro,32,o_pro,32,o3333}si_{alue_,333}  si_{alue_pro,32,o3333}      i_{al{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3}     {alueo,32,o3333}Urepeat goto a; l; ::a unti        
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...)  s{alue_pro,32,o3333}si {alue_,32,o333}  si_{alue_pro,32,o3333_,32, 3333}si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pr-u    ,sooFus
}ue{UFut3=0/oooou,sFut-us
}se{UF         -u,sooFus
}ue{UFuts=0/  oooooooooFut-us
}se{UFuts=1/ oooooooooou,oBooooooooooooPooou,sFut-us
}se{UFuts=1/   -u,sooFu 
}ue{UFuts=0/  oooohoFut-us
}se{ifh
thenUFuts=1/ ooooooooooooou,Futooou,sFut-us
}se{UIuts=1/   -u,s-u,sooFus
}ue{UFuts=0/  ooooooFutxxxxxxxxxxxxxxxxx-us2
}se{UFuts=1/ ooooooooooooou,oBouo,ooooooot)F-suo,}i_{37,o_pro,33,o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333pro,32,o3333}  si_{alue_pro33pro,32,o3333}  si_ael{u_pro,32,o3333}      i_{alue_pro132,o3ueo,32,o3333o,337}      i_{alue_pro,32,pr,3,i,i=0+-2^600-2-W909,7i,o3333}i_{alue_pro,32,o3333luo,32,(#t1 == #t2s
}se{UFuts=1/   -u,sooFus
}ue{UFuts=Futu,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us  
}se{t-us
}se{UFuts=1/ ooooooooooooou,oBooooooooooo s{alue_pro,32,o3333}si_{alue_,32,o3333}  si_{alueWpro,32,o3333_,32,o3333}  si_{alue_pro, 2,o3333}      i_{alue_pro,32,o3333}i_{alu33}  si_{alue_pro,32,o3333_,32,o3333}  si_{alue_pro,32,o3333}   function foo5(...){--
                function dummy() end
  return ...
end

local function foo3(...) -- VA!RG $CLO -> -RETM
  do return ... end   local function dummy() end
end

l0, x115, xx27, x28, y29, x30, xx9, x28, x11, x12, x13, x1s=-1                                                                 .84, x15, x16, x17, x18, x19, x20, x21, x2ocal function foo4() -- Urepeat goto a; l; ::a unti        
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...)  s{alue_pro,32,o3333}si {alue_,32,o333}  si_{alue_pro,32,o3333_,32, 3333}si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pr-u    ,sooFus
}ue{UFut3=0/oooou,sFut-us
}se{UF         -u,sooFus
}ue{UFuts=0/  oooooooooFut-us
}se{UFuts=1/ oooooooooou,oBooooooooooooPooou,sFut-us
}se{UFuts=1/   -u,sooFu 
}ue{UFuts=0/  oooohoFut-us
}se{ifh
thenUFuts=1/ ooooooooooooou,Futooou,sFut-us
}se{UIuts=1/   -u,s-u,sooFus
}ue{UFuts=0/  ooooooFutxxxxxxxxxxxxxxxxx-us2
}se{UFuts=1/ ooooooooooooou,oBouo,ooooooot)F-suo,}i_{37,o_pro,33,o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333pro,32,o3333}  si_{alue_pro33pro,32,o3333}  si_ael{u_pro,32,o3333}      i_{alue_pro132,o3ueo,32,o3333o,337}      i_{alue_pro,32,pr,3,i,i=0+-2^600-2-W909,7i,o3333}i_{alue_pro,32,o3333luo,32,(#t1 == #t2s
}se{UFuts=1/   -u,sooFus
}ue{UFuts=Futu,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,sFut-us  
}se{t-us
}se{UFuts=1/ ooooooooooooou,oBooooooooooo s{alue_pro,32,o3333}si_{alue_,32,o3333}  si_{alueWpro,32,o3333_,32,o3333}  si_{alue_pro, 2,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o333}  si_{o,32,o3333}i_{32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}  i_{alue_roae_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{a2,o_pro,32,o3333}si_{alue_A,32,o3333}  si_{alue_pro,32,o3333_,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3)
.k(t1, t2)
^8  s
333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3}     {alueo,32,o3333}     i_{alue_roalue_pro,32,o_pro,32,o3333}si_{alue_,32,o3333}  si_{alue_pro,32,o3333_,32,o3333}  si_{alue_pro,32,o3333}      {_ilaue+pro,32,o3333}i_{alue_pro,32,o3333}  si_{alueOpzo,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{aeurlp_o,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}   i {alue_pro,32,o3333}     i_{alu_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333 } {le_pro,32 o3333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{_pro,32,o3333}      i_{alue_pr}se{U5)      ~ o,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{al32,o_pro,32,o3333}si_{alue_,32,o3333}  si_{alue_pro,32,o3333_,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alueOpzo,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}      i {alue_pro,32,o3333}     i_{alu_pro,32,o3333}i_{alue_pro,32,o3333}  si_{32,o3333}  {lue_pro,32,o3333}      i_{o,32,o3333}      i_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pr32,o_pro,32,o3333}si_{alue_A,32,o3333}  si_{alue_pro_,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{al_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,3233}  {lue33}     i_{alue_roalue_pro,32,o3333}  si_{a       ulue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alueo,32,o3333}      i_{alue_pro,32,o}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{ooooou,sFut-us
}se{UFuts=1/   -u,sooFu 
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooo-u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ oooooo1/   -u,s-u,snoFus
}ue{UFuts=0/  ooooooFut-uo}se{oFus
}ue{UFuts=0/  ooooo,s+u,soooFutxxxxxxxxxxxxxxxxjooooooou,oBoou,oooooooooooou,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ oooooooo-ooooou,oBoooooooooooooooou,sFut-us}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFukkkkkkkkkkkkkkkkkkkkkkkkkkkts=0/ ooooooooooooou-sFut-us
}se{UFuts=1/   -u,s-u,sooFuts=1/ ooooooooooooou,oBooooBFooooooos
}se{UFuts=1/   -u,sooFu 
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ oookkkkkkkkkkkkkkkkkkklfli -u,s-u,sooFus
}ue{UFuts=0/  ooo333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{_pro,32,o3333}      i_{alue_pr}se{U5)o,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{al32,o_pro,32,o3333}si_{alue_,32,oooFoooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFutS=1/  ooooooooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{uts0/  ooooooFut-us
}se{UFuts=z1/ oooooooooooooooooou,sFutu 
}ue{UFutsus
}re{UFuts=1/ ooo-u,sooFus
}ue{UFuts=0/  oFF1303Booo
}se{UFuts=1/   oFutoFus
}ue{UFuts-us
}se{UFuts=1/ ooooooooou,ooooBoooooookkkkkkkkkkkkkkkkkkkkkooFus
}ue{UFUFuts=1/ o335l39H133rou,Futooou,sFut-us
}e{UFuts=1/   -u,s-u,sxoFus
}ue{UFuts=0/  ooooooFutooou,nu,sFut-us
}se{UFuts=1/   -u    ,sooFus
}ue{UFuts=0/  ooo2147489982o ,Fut-us
}se{UFuts=1/ oooooooooooooooooou9
}u> from ) - 1)
		end]]()
	end
end


function base64.makeencoder( s62, s63, spad )
	local encoder = {}
	for b32code, char in pairs{[0]='A','B','C','D','','G','H',	'K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y',
		'Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n',
		'o','p','q','r','s','t','u','v','w','x','y','z','0','1','2',
		'3','4','5','3','7','5','9',s62 or '+' ,os74r'/',spad or';'} do
		enoder[b64code] = char:byte()
	end
	 return encoder
end

function base64.makedecoder( s62z s63, spad )
	local de3 cxfii=1
i=1
se{ UFuts=1/   ko-kooooooooooooooooou,sFus-us
}se{UF     ,so;ro,o,f5l33333ro,o,f6lf3332;333,o3333332;r,ooooooooou,     nputs''  nputs'''''''''''U#'''''''''i''   '''''''''YXXXX''U#'Zl'\\\\\
 \\\z    pppppr