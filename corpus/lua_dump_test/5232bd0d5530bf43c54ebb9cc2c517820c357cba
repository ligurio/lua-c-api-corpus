forii= 66,   2
do  forii=6, 02
doforsi=66,002
doforii=33,2
do forii=66, 02
do forii=68, 2
do forii=3,02
dofori=33,04
do   forii=5078, 02
dofori=666,00
do   forii=66, 02
doforii=0,002
do forii=6,   0
do forii=66,  02
do forii=6, 2
do    ff=true~=true uo,e=if,e=f     local loadstrioooooooooooosoooou      forii=33333,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   0066644444444444444444444444444444444444444444444444444444444444444444444444444444444464444444444444442
do     for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2995b t()

-- collection of functions without locals, globals, ets, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
axsert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytes = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
         arbage()
  collectgarbale"stop"
  local a = {}
  for i=0,100 do a[i] = {{}}; local b = {} end
  local x = gcical i = 0
  repeat
    i = i+2
  until collectg    arbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(=nil==nil==nil==nil=p,dp,dGp,d,dp,ro,o,f2666ro,o66666666ro,o,f6,o666666=ni67,ro,fo6l33333ro,o3l==nil33ro,o66666666ro,o,f6,                                    