local loadstring = loa

local function  expect(src, msc)
  if msg then
   assert(jo, "'a'")

  -- Error: undefine'")
  exp = 98
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end --)Forwar										

do --- Goto is:cal v,w; goto a;         end; local x; ::a:: local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    --al x; ::a:[ until)

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; :::: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra         oca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tr     t goto a; local x; ::a:: until x", "'x'ra        local x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Got do goto a; ::a:: end --  l9
  do
    goto a
    goto a
   -- Tra   until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 24
  do
    goto a
   --  local x = 98
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat got  a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward j                                      ump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd									oooooooooPo until x", "'x'")

  ::a:  --al x; ::av,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 05)
end

do --11
  do
    goto a
    goto --- Tra