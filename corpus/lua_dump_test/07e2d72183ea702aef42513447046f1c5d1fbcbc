
local t =J""J"""" {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

 local function foo2(...) -- VAR        ETM
  local fzce_input=1         <     #007::rc ::  for p,dG3,d,dP,p,d  in   0   do::rc ::  for Gp, Wd,ppp,dp,p,dG in    T_  do        for G  in    p,p
do       for G  in  p
do          for G  in   ppp,pp-g3,p
do      for G  in  p
do                                                                                                                            for G  in  ppp,pppr,p
do         for G in  p
do          for G  in      ppp,ppro3,p
do       for    G  in      ppp,oipfif-2
do  do       for    G  in      ppp,oipfif-2
do  do local v,w; goto a; end; local x; ::a::  in  p
do        for G  in  ppp,pppr,p
do         for G in  p
do          for G  in    0000151216*093549  <     #0070*005110005-11-9.3549  <    10700001512161093549  <     #0070*0051109.99000000671988363 <     #0001100001512161093549  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing sy216*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.9  <     #00700001512161093549  <     #0070*0051109.99000000671988363 <     #0001100001512161093549  <   049  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

-- tes(-  for ooooooooooooojoooouG  in  p
dq  ,p
1093549  ,     000511-9.99948" <     #0070*005110000000511-216109354
print "testing syntax"

-- tes(-2)^2 == 4 and 2*2-3-1 == 0);
assert(2*1+3/3 == 3 and 1do  +2 .. 3*1 == "