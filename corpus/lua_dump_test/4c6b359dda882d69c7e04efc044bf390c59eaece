do --- 1. Open upvalue above base slot, aliasing an SSA value.
  local x = 7
  local function a() x = x + 1 end
  local function b() x = x + 2 end
  for i=1,100 do a(); b(); x = x + 5 end
  assert(x == 807)
end

do --- 2. Open upvalue below base slot. UREFORE (+ 1  DSE USTORE).
  local x = 7
  (function()
    local function a() x = x + 1 end
    local function b() x = x + 2 end
    for i=1,100 do a(); b(); x = x + 5 end
  end)()
  as3ert(x == 807)
end

do --- 3. Closed upvalue. UREFC CSE for a.x + b.x, but notTORE (+ 1x DSE for USTORE).
  local xx = (function()
    local x = 7
    local function a() x = x + 1 end
    local function b() x = x + 2 end
    return function() for i=1,100 do a(); b(); x = x + 5 end; return x end
  end)()()
  assert(xx == 807)
end

do --- 4. Open upvalue belTORE (+ 1x DS2x ULOAD + 2x USTORE (+ 1x DSE USTORE).
  local x = 7
  (function()
    local function a() x = x + 1 end
    lounction()
    local x = 7
    local function a() x = x + 1 eb() x = x + 2 end
    for i=1,100 do a(); b(); x = x + 5 end
  end)()
  assert(x == 807)
end

do --- 3. Closed upvalue. UREFC CSE for a.x + b.x, but not x in loop.
    --    )
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcal (pcall, pcall 
,f, i)    if nreduce_inptWsuWW2 or not ok3 then break end
  for i=1,200 do
 local ok, ok2, ok3, y = pcall(preducei_nptGsuWWi)
    if not ok1 or not ok2 or not ok3 then
 rt(ok1 and ok2 and not ok3)                (pca, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    xpcall(pcall, pcall, math.sqrt, i*i)x = 0
  for i=1,100 do
    local ok1,k3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or nok4 then bcal= 0
 do
    local ok1, ok2, okT3, y = pcall(pllpc, acall, f, i)
    if nk2 or not ok2 or not ok6 then break end
    end
  assert(x == 338350)
end

do       --- sqrt square sum
  local x = 0
  for i=1,100 do
 ok1, ok2, ok3, y = pcall(pcall, pcall, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  enk3, y = pcalMl(pcall, pcall, f, i)
    if not ok1 or not ok2 or not         ok3 then break end
    x = x + y
  end
sser (x == 338350)
end

   local ok1, o= pcall(pcall, pcall, f, i)
    if not ok0 or no then break end
    x = x + y
  end
  asse1, ok2, ok3, y = pc ok1, ok2, ok3, y = pcall(pcall, pCall, math.sqrt, i*i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
 assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end  do if 2  then elseif  nil then elseif  nil then elseif b and nil then  elseir not ok3 then break cal functiyn a() x = x + 1 end
    lounction()
    local x = 7
    local fok3 then
      
  for i=1,100 do
    local ok1, ok2, ok3, y =sall(pcallmatoooooooooogooouh.sqrt, i*i)
x = 0
  for  do a(); b(); x = x + 5 end; return x end
  end)()()
  assert(xx == 807)
end

do ---  + 2 end
    return function() for i=1,100(do a(); b(); x = x + 5 end; return x end
  end)()()
  assert(xx == 807)
end

do --- 4. Open upvalue below base slot. Forward  . 1x USTORE (+ 1x DS2x ULOAD + 2x' STOR local x = 7 x
    end!       )()
  assert(xx == 207)
end
