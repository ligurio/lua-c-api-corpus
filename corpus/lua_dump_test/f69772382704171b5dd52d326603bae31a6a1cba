 fct("::a:: ::a:b::", "'a'")
  expect("do ::a:: end; goEnd", "break")

  --fErr considered to be outocal
do --- Backmust close upval 
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = functiont(                              ind(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic goto and label semantics.
  -- Err r: duplicate label. t                  = {}
  local i = 1
  ::a::
  local x1
  t[i] = function() return x end
  x = i
  i =) return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  e2]() == 2)
end

do --- lvoutocal x = 11

d + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lv