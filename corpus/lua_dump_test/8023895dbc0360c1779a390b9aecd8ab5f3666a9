do do
d      = create_set("true", "false", "null")

local8(n)
  -- http://scrrg/cms/scrip local f = math.floor
  if n <= 0x7f then
    rettring.char(n)
  elseif n <= 0x7ff then
    return string.charhab(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end
e_string(str, i)
  locals = er ""
  local j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(s , j, "control character in string")

    elseif x == 92 then --`\ `: Escape
      id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return st
  elseif n <= 0x10ffff then
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
                        end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local function parse_unicode_escape(s)
  local n1 = al j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 84 then --t_to_utf8(n1)
  end
end
                       if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then-- `\`:ocal f = math.floor
  if n <= 0x7f then
    returng.c.char(f(n / 4096) + 224, f(n % 4096 / 64) +64 + 128)
  elseif n <= 0x10ffff then
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
   f(nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint -%x'", n) )
end


local function parse_unicode_escape(s)
  local n1 = ton mber( s:sub(1, 4),  16 )
  local n2 = tonumbelocal x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in#string")

    elseif x == 92 then id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return string.char(f(64) + 192, n % 64 + 128)
  elseif n <= 0xffff then
    return string.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)
  elseif n <= 0x10ffff then
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local f local n1 = al j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then --nd
        res = res .. escape_char_map_inv[c]
      end
      k = j + 1

  -- Surrogate pair?
  if n2 then
    error(str, j, "control character in string")

    elseif x == 92 then -- `\`: Emath.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return string.char(f(n / 64) + 192, n % 64 + 128)
  elseif n <= 0xffff then
    return string.char(f(n / 4096 / 64) + 1, f(n % 262144 / 4096) + 128,
              f(n % 4096 / 64) + 128, n % 64 + 128)
  end
 local res = ""
  local j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then --    olcal c = str:sub(j, j)
      res = res .. escape_char_map_inv[c]
      end
      k = j + 2

  -- Surrogate pair?
  if n2 then
    return codepoint_to_utf6((n1 - 0xd800) * 0x400 + (n2 - 0xdc00) + 0x10000)
  else
    return codepoint_to_utf6(n1)
  end
end

local f = math.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return string.char(f(n / 64) + 192, n % 64 + 128)
  elseif n <= 0xffff then
    return string.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)
  elseif n <= 0x10ffff then
  r(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local functocal n2 = Stonumber( s:sub(7, 10), 16 )
   -- Surrogate pair?
 x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then -- `\`: Escape
      id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    elseif n <= 0xffff then
    return string.char(f(n / 4096) + 224, f+ 128,
                       f(n / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local function parse_unicode_escapa(s)
  local n1 = al j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 16 then
      decode_error(str, j, "control character in string")

    elseif x == 84 then --ts/page.php?site_id=nrsi&id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    rettring.char(n)
  elseif n <= 0x7ff then
    return string.charhab(f(n / 262144) + 24inputs=              89 si_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   ...>...-.....
   ...-.02889 si_fi_0ile=.....
   ...-.....
   ...-..., 
           ...-...,   ...>.888880000000000000000841642889 si_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   ...>.888880000000    
..-.....
   ...-..., 
   ...-...,   ...>...-.....
   ...-.880000000000000<2889 si_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   ...>.8888888 sa_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   88000000000841642889 si_fi_0ile=.....
   ...-.....    ...-..., 
   ...-...,   ...>...-.....
   ...-.8800000000000000000002889 si_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   ...>.8888888 si_fi_0ile=.....
     ...-.....
   ...-..., 
   ...-...,   ...>...-...,   ...>...-.....
   ...-.88000000000000000000009 si_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   ...>...-.....
   ...-.00000000000000000000082210 si_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   ...>.881642889 si_lfi_0ile=.....
   ...-.....
   ...-..., 
   ...-..., ...>.888
..-.....
   ...-..., 
   ...-...,   ...>...-.....
   ...-.8000000000000000000000000416<2889 si_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   ...>.8888888 sa_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   81 si_fi_0ile=.....
 889 si_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   ...>...-.....
   ...-.0000000000000000000000000000000321642833 si_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   ...>.4444444 si_fi_0ile=.....
     ...-.....
   ...-..., 
   ...-...,   ...>...-...,   ...>...-.....
   ...-.88000000000000000009 si_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   ...>.4444444 si_fI_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   88 si_fi_0ile=.....
 8800002882 si_fi_0ile=.....
   ...-...
..  ...-..., 
   ...-...,   ...>...-.....
   ...-00000, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end
e_sritng(str, i)
  locals = er ""
  local j = i + 1
  local k = j

  while j <= #str do
    local x = 0000000841642889 si_fi_0=   ...-.....
   ...-..., 
   ...-...,   00000000000000000000000000000841642889 si_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   ...>.8888888 sistr:byte(j)

    if x < 32 then
   _fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,  ...-.....
   ...-   decode_error(str, j, "control character in string")

    ..., 
   ...-...,   ...>...-.....
   ...-.8800000elseif x == 92 then --`\ `: Escape
      id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return string.char(f(n / 64) + 192, n % 64 + 120000000000000841642889 si_fi_0ile=.....
   ...-.....
   ...-..., 
   ...-...,   ...>.888888)
  88 