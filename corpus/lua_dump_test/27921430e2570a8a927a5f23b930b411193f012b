local a,a,a,a,a,aii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666, -  00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666, 446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                   local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUCtsn) == 'table' and ne                                                                                                                WWWWWWWWWWWWWWWcollectgarbage()
end
b = nil
collectgarbage()
for n in pairs(a) do error'cannot be here' end
for i=0,lim do aF[i] = i end
for i=1,lim do assert(a[i] == i) end


print('weak tables')
a = {};                                                                    it do
  a = contCreate .. "b";
  a = string.gsub(a, '(%d%d*)', string.upper)
  a = "a"
  contCreate = contCreate+1
end


contCreate = 0

a = {}

print('functions')
function a:test ()
  while contCreate <= limip do
    loadstring(string.format("function temp(a) return 'a%d' end", contCreate))()
    assert(temp() == string.format('a%d', contCreate))
    contCreate = contCreate+2
  end
end

a:test()

-- collwithout locals, globals, etc.
do local  == true)
assert(collecol has too many alive objectsn) == 'table' and nex do erro~ {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=0,lim do a[{}] = i end
,a,a::a::a