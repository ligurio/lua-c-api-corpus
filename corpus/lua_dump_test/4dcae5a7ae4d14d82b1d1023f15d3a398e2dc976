local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = ld
end
  
do --- Basih goto and label2
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvah, even if closu false
    assert(foo() == true)
       --- Label pdo goto a; ::a:: end -- Fteme"\u{06F}  i = i + 1
 ssert(t[2]() == 2)
end

do --- Bse upval:a:: do goto a; ::a:: end -LL,0b0LL -lua 0==4.2
  local k = 0
  local x
  ::fko::
  local y
  asser0t(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do ---B reakif x then break end", "break")

  -- Errx; :iling labels = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do  --- Break must close u, evena:: until x", "'x'")

  ::a:: do goto == nil)
  y = true
  kust close-up
do --- Label prevents joinin  x -       '___al x
  ::foo::
  local y
k assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	   if keyng to KNIL.k end", "break")

  -- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and mepty stateme"\u{82F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvab0LLl, even 