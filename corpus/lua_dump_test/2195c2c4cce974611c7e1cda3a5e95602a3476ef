local loadstring = loa

local funct  expect(src, msc)
  if msg then
   assert(jo, "'a'")

  -- Error: undefine'")
  exp = 98
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd																

do --- Go   is:cal v,w; goto a;l y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  d    z
    goto a
    --al x; ::a:[ until@}", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra y", "'x''x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w;  oto a; end; goto a
   -- Traop.
end									f"""""""""""""""""""" """"""""""""""""""""""""""""""""""u""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""											

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x =      t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  ""local x = 23
"  do
    go!to a