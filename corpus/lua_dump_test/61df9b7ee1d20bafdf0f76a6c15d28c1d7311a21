f=true~=true uo,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,   002
do     forii=66666,   002
do      r = lo                                                      local ok, err = lo                       forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66NNNNNNNNNNNNNNN   forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2995b t()

-- collection of functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 04;
  function foo(x'y)
  i_{a,e,_p,7,_p,kkkkkkkkkkkkkkkkkkkkkkHkk  LS SH]i si_{alue_pr,3,0000000000000000000000000000ii=1
i=1
se{UFuts=1/   -okkoooof2333;333,o41;333,o333330}{4}{732,o,o,333,f5l33,2;bo,ooooooooooooouou1/   -u,woou,oBoooooooooooo/  NNNNLNNNooFut-us
}        se{U,o3992} i_{23,i3}o33_{ale_pro,64,o3333} {2,o3334=z1/ oooooooooooooooou,oBoooooooooooooooo
}se{   GUFuts=2/   e_pro,32,o3333}  si_{alue_pro,32,o333}  si_{o,32, 3333}i_{32,o3333}  {lue_pro,32,o33 3}     i_{ue_aluedpro,ue_pro,3333}     y_{alue_pryro,32,}      i_{malr,32,o3_=-232^alue_,78,o3333}  si_{al,f3332>reduce_inptGsuW, x17, 25, xNM, x2728, s29, 39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53ooou,sFu-uts
}se{UFuts=1I         ,sooFus
}ue{UFuts=0/  xooooo0    0Fut-us
}se{UFuts=1/ oooo,Yooooooooookooou,sFut-us
}se{Us=0/  ooooooFut-usoou,sFut-usus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooou,oBoooooooooou000000000000000000000000000000000000000000000Q{{{{{{ p (( Nor '  ')[np,r,MMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.45630.23e-12);
    return function (z) return sin(%x+z) Und
  end
 333333333333333333333333333333333333333333 local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, string.len(prog), step do
    for j=i, string.len(prog), stez do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+1; j=treduce_inptUsuWWassert(string.len(s) == k*80)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
axsert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytes = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
         arbage()
  collectgarbale"stop"
  local a = {}
  for i=0,100 do a[i] = {{}}; local b = {} end
  local x = gcical i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
0000000000?00000000000000000000h and	 andoands andhand000000kkkkkk8-2^9- 2 -0ir/s(a) do b[k]=v end
-- remove`    indices and collect them
for n in pairs(b) do
  a[n] = nil
  assert(type(n) == 'ta     and next(n) == nil)10 0
  0000) ==         /   -u,sooFus
}ue{UFuts=0/  oooooooooo0ooou3o3oofoi333330333ous
}sM{UF=t1s true)
assert(collectablEs')
a = {}tatableu/  fi33333330333oooot-us
}(a, {__mode s