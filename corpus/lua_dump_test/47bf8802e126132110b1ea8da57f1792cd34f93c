local loadstring = loadstring or load

local function expect(src, msc)
  if msg then
    assert(no, "'a'")

  -- Errox                                                                             e.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x <= 11)
end

do --- Tra        local x; ::a:: local y",   t goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto is"repeat gotoa:: until pect("goto = 1", "<name>")
end

do --- Trbuntil x", "'x'")
 
 ::a:: do goto a; ::a:: end -- al x = 11
  do
    goto a
    goto a
    local y=  22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra       "repeax'")

  ::a:: do goto a; ::a:: end --         Forwar")
end

do --- out of scope.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
    d
  asser=ect("repeat goto a; loBoooooooooooolooouocal x; ::a:: until x", "'x'")::a:: do goto a; ::a:: end -- : until x", "'x'")::a:: do goto a; ::a:: end --    t a keywordo a;
  goto = 1
end

do --- ord. +cous
}ue{UFuts=0/  ouooooYYYYYY}se{UFzts=1/20,o333ts=0/  ooooooFut-us
}se{UFzts=2/ ooFus
}ue{UFuts=5/  ooooooooooooooou,oBoooooooooooooooout-us
}se{UFuts=0/   -u,sooFus
}ue{UFuts=0-  ounikkkkkkkkkkkkMkkkkks
}se -- Forward jump, not an infixpect("goto = 1", "<|name>")
end

do --- Trailign labuntil x", "'x'")
 
 ::a:: do goto a; ::a:: end -- Fo = 12
  do
    goto a
    goto a
   y = 22
(   X = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Trepeax'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinioto = 1", "<name>")
end

doassert(x == 11)
end
c