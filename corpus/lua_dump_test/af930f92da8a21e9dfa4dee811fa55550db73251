local loadstring = loadsend

do -- Br-eak mu joining to KNILl. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k 
+ 1  t(not ok and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; 0B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, notty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; 2::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infin  i = i  01
  if i <= 2 then goto a end
 local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do ---- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infido --- Break must close up!val, even if closure is pi =assert(t[2]() =goto foo end
end

do --- Break resolv'x'")

  ::a:: do goto a; ::a:: end -- Forward ju"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == t("do local v,w; goto a; end; local x2 ::a:E local y", "'x'")
  expect("rx; ::a:tnfinido --- T