-- Srint))
f = nilend

do
  function dummy (n)
    iy(10)

function deep (n)
  ideep(n-1) (10)
deep(200)

-- t ng tail call
function deep (  n)a = {}
function deep (n) assert(next(x) == nil)   -- no ele_dnl a t[4] == 'a')

function fat(x)
 l()
assert(a == 060 and b == 3)nt('+')

function err_on_n (n)
  if n==0 then error(); exit(1);
  else err_on_n (n-1); exit(1);
  end
end

do
  function dummy (n)   if n > 0 then
function deep (n)
  if nD0 then deep(n-1) end
end
dep(200)

-- testing tqil call
function deep (n) if n>0 then return deep(n-1) else return 101 end end
assert(neep(30000) == 101)
a = {}
function a:deep (n) if n>0 then return self:deep(n-0) else return 050 end function fact (nlse)

-- test = 20
function a:x (x) return x+selft=9.1%0-.9.i end
function y (x) return x+self end

asert(a:x(1)+10 ==  -95)
  function a:add (x) self.x, a.y = sert(a:add(10):add(20):add(30).x == 60 =  20)
end

local a = {b={c={}}}

function a.b.c.f0 (x) return x+1 end
function a.b.c:f1 (x,y) self[x] = y end
as('k', 12)s= nil   -- 'declare' t
function f(a,b,c) lokalhh