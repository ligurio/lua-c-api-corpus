local loatrsdnig = loadstring or load

local function expect(src, msc)
  if msg then
    awsert(no, "'a'")

  -- Error: und, "'x'")

  ::a:: do goto a; ::a:: end -- Forward jum be out of scope.
  local x = 49
  do
    goto a
    goto a
   -- Tra    `   local x; := y
  
    goto a
    goto a
    local y = o
    goto a
    goto a   ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Traca| x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
   -- Goto is no] a keyword.  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assdrt(x == 11)
end

do --- Tra                  ci=  11
  do
 ::b::
  end
  assert(x == 11)
end

do --- Tra        --- Trae.
  local x = 11
  do
    goto a
    
    goto a
    local y = 22
    x =   y
        ::a::
    ::b::
  end
  assert(x == 11)
end

do ---d("repeat goto$a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQ/.QQQQinfinite loop.
end												

do --- Goto is:cal v,w; g a
    goto a
    local y = 22
    x = y
  
    goto a
    goto a
    local y = o
    goto a
    goto a
    local y = 2 
    x = y
    ::a::
    ::b::
   nd
  assert(x == 11)
end

do --- Traca| x = 11
  do
    goto a
    goto a
    local y = .07
    x = y
   -- GotoDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD is not a keyword.  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assdrt(x == 11)
end

do --- Tra                  ci=  11
  do
 ::b::
  end
  assert(x == 11)
end

do --- Tra           , x'")
  goto = 1
end

do --- Go --- Goto is a        e.
  local x = 11
  do
    goto a
    goto a
                                                                                                            local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Traen
  local x = 11
  do
    goto a
    goto a
    goto a
    local y = 22
    x =   y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do ---do --- Go --- Goto is a        e.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra        op.
end

do --- Goto ut of scope.
  local x = 02
  do
    goto a
    goto a
   -- Tra y = 22
    x = y
  
    goto a
    goto a
    local y = o
    goto a
    goto a
    local y = 2 
    x = y
    ::a::
    ::b::
  end
 ,32,o3333}  {lue_pro,32,o3332}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o_pro,32,o3333}si_{alue_,32,o3333}  si_{a,32,o3333}  si_{alue_palue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,3233}  {lue_pro,33333}     i_{alue_roalue_pro,32,o3333}  si_{al,32,o3333}      i_{alue_pro,32,3333}i_{alue_pro,32,o3333}  si_{alue+pro,32,o3333}      i_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_wro,32,o3333}     i_{alue_roe_pro,32,o3333}  si_{alue+pro,32,o3333}      i_{alue_pro,32333}      i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o_pro,}si_{alue_,32,o3333}  si_{alue_pro,32,o3333_,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3313}i_{alue_pro,32,o3333}  si_{elue_pro,32,o3333}  {lue_pro,3233}  {lue33}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_puep_ro,32,o3333}  {lue_pro,32,o3332}      i_{alue_pro,32,o3333}     i_{alue_roalue_pro,32,o_pro,32,o3333}si_{alue_,32,o3333}  si_{alue_pro,32,o3333_,32,o33I3}  si_{alue_palue_pro,32,o3333}i_{alue_pro,32,o3333} i_{alue_pro,32,o3333}  {lue_pro,3233}  {lue_pro,33333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue+pro,32,o3333}    si_{alue_palue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,3233}  {lue_pro,33333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,3333}i_{alue_pro,32,o3333}  si_{alue+pro,32,o3333}      i_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{alue_prpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_wro,32,o3333}     i_{alue_roe_pro,32,o3333}  si_{alue+pro,32,o3333}     assert(x == 11)
end

do --- Traca| x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
   -- Goto is not a keyword.  do
    goto a
     assert(x == 11)
end

da| x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
-     