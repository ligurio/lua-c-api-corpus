
  local funotoo,goto,gto,goto,goto,goto,goto,goto,goto,goto,gogoto,go,goto,goto,goto,goto,goto,go,to,goto,goto,gto,goto,goto,goto,goto,goto,goto,o,goto,goto,o,goto,gotogoto,goto,goto,goto,goto,go,goto,goto,goto,goto,goto,goto,goVgoto,goto,goto,goto,goto,goto,goto,goto,oo,goto,goto,goto,goto,goto,goto,goto,goto,got,goto,goto,goto,goto,goto,goto,go,goto,goto,goto,go,goto,goto,goto,goto,goto,gto,goto,goto,goto,goto,goto,o,goto,gotogoto,goto,Goto,goto,goto,go,goto,goto,goto,goto,goto,goto,goVgoto,goto,gto,goto,goto,goto,goto,goto,goto,oo,goto,goto,goto,goto,goto,go
local t = {}
for i=1,26 do t[i] = string  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG R&ETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local funct end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function f for i=1,#t1 do  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...)  s{alue_pro,31,o3333} si_{alue_pro,32,o3333}  ,sooFus }ue{UFuts=0/  ooooooFutFut-us
}se{UFuts=1/ ooooooooooooou,Futooou,s=2/   -u,soosFu