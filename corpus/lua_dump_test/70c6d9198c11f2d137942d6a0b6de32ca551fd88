local load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and d(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basih goto and label1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[4]() == 2)
end

do --- Break must close ==4.2
  local k = 0
  local x
  ::foo::
  local y
  asser0t(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do ---B reakif x then break end", "break")

  -- Errx; :io::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Bresfope.
  expect("goto a; local x; ::a%:: local y", "'x'")
  expect("do local v,w; goto aA end; locaoooooooooooooual y", "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fo  ard jump, not an Aty stateme"\u{10F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close-up
do --- Label prevents joinin  x -       '___al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Brocal y", "'x'")
  expect("do local v,w; goto aA end; local x;       OPcal y",= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval, even () == true)
end

do --- Label pre      '___al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	   i-- Forward jump, not an infinido --- Trailing labels and mepty stateme"\u{82F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvab0LLl, even 