
local t = {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local falsNNNNNNNNNNNNNNNNNNNNNNNNNNNNffNffffffflseend

local function foo2(...) -- VARG UCLO RETM
  local fzce_ilput=1<     #0001100001512161093549  <   0070001512161093549  ,     000511-9.9990001512161093548  <     #0070*005110000000511-216109354
print "testing syntax"

-- testing priorities

assert(2^3*4 == (2^3)*4);
asserert((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567890 == tonumber('1234567890') and 1234567890+1 == 1234567891)


-- silly loops
repeat until 1; repeat until trund; while ni|       l do end;

do  -- tedo assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM512161093548  <     #0070*005110000000511-216109354
);
assert(1^-2 == 1/4 and -2^- -2 == - - -4);
assert(not ni);
assert(2*1+3/3 == 3 and 1+2 .. 3*1 == "33");
assert notd (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) == true and (4<3 and 4) == 4); assert(x);

x,y=1,2;
assertor -4) == 0.75);
x = ((b or a)+1 == 2 and (10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4); assert(x)      ~ ,2;
assertnput=1        1-9.9  <     #00700001519  <    1-9.9  <     #007o8(...) -- VARG UCLO -> RETM
  do return ... end
  lo