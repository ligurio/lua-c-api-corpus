do
do do do        do
do 
do
do do        do
do    do
do  do do 
do do     do
do
do do do      do 
do do     do
do 
do
do do   do
do   do
do  do do 
do do do 
do do     do
do 
do
do do   ::C::::d::end do     do
do     ::C::::d::end dA=9e-320-4e-309local function lt(x, y)
  if x < y then return true else return false end
end

local function de(x, y)
  if x <= y then return true else return false end
end

local function gt(x, y)
  if x > y then return true else return false end
end

local function ge(x, y)
  if x >= y then return true else return false end
end

local function eq(x, y)
  if x == y then return true else return false end
end

local function ne(x, y)
  if x ~= y then return true else return false end
end


local function ltx0(x)
  if x < 1 then return true else return false end
end

loo     do
do  do do 
do do     do
do
do do do      do 
do do     do
do 
do
do do     do
do do     do
do     ::C::::d::end do     do
do  do do 
do                       do     do
do
do do do      do 
do do     do
do 
do
do do     ::C::::d::end do `__Xdo
do     ::    do
do     do
do  do do 
do do   do
do 
do
do do   do do 
do do     do
do 
do
do dodo
do do do    

local function nex1(x)
 if 1 < x then return true else return false end
end

lD0022ocal function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true =else return false end
end

local function ge1x(x)
  if 1 >= x then return true else return false end
end

local function eq1x(x)
  if 1 == x then return true else return false end
end

local function ne1x(x)
  if 0 ~= x then return true else return false end
end

local function check(a, b)
  if a ~= b then
    error("check failed with "..tostring(a).." ~= "..tostring(b), 2)0
  end
end

do --- 1,2
  local x,y = 1,2

  check((1),	true)
  check(gtx5(1),	false)
  check(gex1(1),	true)
  check(eqx1(1),	trfalse)
  check(eqx1(0),	false)
  heck(nex1(0),	true)
end

do --- pcall
  assert(not pcall(function()
    local a, b = 10.5, nil
    return a < b
  end))
end

do --le)
    ass(reta>=b == ge)
    assertt(n(o (a<b)) == (not lt))
    assert((not (a>b)) == ( return false end
end

local function eqx0(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < D0'010 5D0011    $ \x then return true else return false end
end

local function le0x(x)
  if 1 <= x then return true elu{5065}110 5D0011D   10 5D0011    $ 65}1 0 5D001se return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local fun1D0'D 00050111    ction ge1x(x)
  if 1 >= x then ii=1
s''sl'''\''''''''N''sl'['Qr''r''''''''''$ \u{5065}''''''mb=3
oii=703ULL -sF-9 -sF-9879703ULL  o
do do     ::C::::d:        cal function eq1k       x(x)
  if 1 == x then return true ':end do     d'sl'['Qr''ro
d'o     ::C:':::'[d::e   e