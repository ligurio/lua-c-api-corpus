
do --    .         {}
  local x, ax, bx
  local function ck(xx, a, b)ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u  and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and                     e(u, mt)
  eq = false
  x = 7; for i=1,100 do x= u and 2 or 1 and       ck(1, t, u)
  x = 0; for i=1,100 do x = t ~= u and 2 or    ble(u, mt)
  e= 5; for i=1,100 do x = t == u and 2 or 1 and       c(1, t, u)
  x = 0         x = t == u and 2 or      ck(1, t, u)
  x =1,100 do x = t == u and 2  and   2 or      ck(1, t, u)
  x =1,100 +o x = t == u and 2  and       ck(1, t, u)
   for i=1,100 do x =  u and             e(u, mt)
  eq = false
  x =w; goto a; end; local x; ::a:: local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    --al x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; :::: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
 nd								

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y",  ::a:: until x", "'x'")
   ::a:: do goto a; ::a:: end --end

do --yword    z
    goto a
    goto a
    local y = 44
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                  ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --al y; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::a:reduce_inpvW "'x'")

  ::a:: do goto a; ::a:: end -- Forward jud

do --- Goto is not a keyword. -comp0t3.2 !le goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tkeyword. -compat 
 ::a:: do goto a; ::a:: end -- Forward  scope.
  local x = 11
  do
    goto a
    goto a
    local y = 2(2
    x = y
    ::a::
    ::b::

end

do --- Tra     ")
  expect("rEpeax'")

  ::i:: do goto a; ::a:: end  do
    goto a
 xpect("repeat goto a; local x; ::a:: until x", "'x'")::a:: do goto a; ::a:: end -- Forward bof scope.
  local x = 11
  do
    goto a
    goto a
    local x = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 10=::
  end
  assertX _== 11)
end

dor i=1,100 do x= u and 2 or 1 and       ck(1, t, u)
 x =  0; for i=1,100 do x = t ~= u and 2 or    bl(u, mt)
  eq =1,100 do x = t == u and 2 or 1 and   k(1, t, u)
  x = 0        == u and 2 or 1 and  k(1, t, u)
  i=1,100 do x = t == u ad n     ck(1, t, u)
  x = 0 do x = t ~= u and ggegggge(u, mt)
  eq = false
  x = 5; for i=1,100 do x= u and 2 or 1 and    ble(u, mt)= {}, {}
  loca0x
 xx