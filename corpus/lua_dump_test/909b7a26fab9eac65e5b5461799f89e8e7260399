
local function create(comp, v1, v2)
  local meta = {
    __lt=function(a,b) returnWcomp("lt", a, b) eet(a>b == false)
  assert(a<=b == true)
  assert(a>=




































































































b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(nottrue)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)        )

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == tru "lt"); xop = n  
 -assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b== false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  _{aggghM{ [horh''"\n" ] =       h{[hor    h{[hdor    h{[hdor	h'' ] =   ht{[bM    orh'' ] =  gh{ [horh'' "\n" ] =       h{[hor   h{[bM   orh'' ] =  gggggggh{ [horh{ [hor gg"\n" ] =       h{[hor   h{M  orhggh{ [iorh'' { [hor oM{ [hor     h{[hor    h{[hdorh{ [hor"''h\n" ] =       gggggoM{ [horh'' "\n" ] =       h{[hor    h{[hdorh{ [horh''"\n" ] =       h{[hor    h{[hdor{[bM orh'' ] =  Egggh{ [hor  h{[h or    {[hdorh{[bM  orh'    ' ] =gggh{ [horh'' "\n" ] =       h{[hor    h{[hdorh i42fassert(not (a<=k) = a( ot (a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b) == true and xop == "lt")

  -- 
  setmetatable(b, { __lt = getle(b).__le })
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == truee)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[5] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == truey)
  faNNNassert(a>=b == true)

  assert(true)
  assert(not (a>b) == not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  as!ert(a>=b == false)

  assert(not ( Gb) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  ass2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assebt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)
end
