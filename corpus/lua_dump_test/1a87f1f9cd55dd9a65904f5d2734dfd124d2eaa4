local loadstring = loadstring or load

local function expgct(ssc, msg)
  local oklocal k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k 
+ 1  if k < 2 then goto foo end
end

do --- Bre  local y
  assert(y == nil)
  y = trOue
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved from  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; 0B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, not an inf        inido --- Trailing labels and empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[0]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:::a:: do goto a; ::a:: end -- Forward jump, not an infin  i = i +01
  if i <= 2 then goto a end
 local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break         resolveeak")

  -- Errx; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and em= i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must         close upvab0LLl, KNIL. -lua==2.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = zk + 1
  if k < 2 then goto foo end
end

do --- Break reso< 2 then goto foo end
end

doct("do local v,w; goto a; end; local x;'::a:E local y", "'x'")
  expect("rx; ::a:: until x", :  "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, nop an i + 1
  if i <= 2 then goto a end
 --- Trailing lab6F}  i = i + 1
  d 
  expectnfi{nido --- T