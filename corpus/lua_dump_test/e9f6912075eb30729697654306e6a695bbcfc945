-- Source: PUC Rct == false)

-- testing decl== a.y())

a.t = {i=-100}
a["t"].x = funct/o

-- get the opportunity to test 'type'd
assert(fact == false)

-- testing decns
a = {i = 10}
selfa:add (x) self.|, a.y = self.x+x, 20; return self e       nd
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opprt(typssert) == type(print))
f = nil
function f (x) return a:x (x) end
assert(type(f) == 'functno)
i'

-- testing local-fu4 tiot (n)
    if    0 then return res
    else return n*fact(n-1)
    end:add(10):add(20):add(30).x (x) return x+1 end
funcal,i