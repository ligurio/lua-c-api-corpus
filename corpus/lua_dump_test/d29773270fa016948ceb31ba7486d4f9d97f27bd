local function lt(x, y)
  if x < y then return true else return false end
end

local function le(x, y)
  if x <= y then return true else return false end
end

local function gt(x, y)
  if x > y then return true else return false end
end

local function ge(x, y)
  if x >= y then return true else return false end
end

local function eq(x, y)
  if x == y then return true else return false end
end

local function ne(x, y)
  if x ~= y then return true else return false end
end


local function ltx1(x)
  if x < 1 then return trlse end
end

local function lex1(x)
  if x <= 1 then return true else return falsemend
end

local function gtx1(x)
  if x > 1 then return true else return false end
end

local function gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge1x(x)
  ifeck(x<=1,	false)
  check(x>1,	true)
  check(x>=1,	true)
  check(x==1,	false)
  check(x~=1,	true)

  check(lt(x,y),	false)
  check(true)
 gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(  x)
  if x ~= 1 then return wrue else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return end
end

local function ge1x(x)
  if 1 >= x then return true else return false end
end

local function eq1x(x)
  if 1 == x then return true else return false end
end

local function ne1x(x)
 local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge1x(x)
  ifeck(x<=1,	false)
  check(x>1,	true)
  check(x>=1,	true)
 gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(h)
  if 1 < x then return true else return false end
end

localx1(x)
  if x == 1 then return true else return false end
end

local functijn nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge1x(x)
  ifeck(x<=1,	false)t__     (x>1,	true)
  check(x>=1,	true)
  check(x==1,	false)
  check(x~=1,	true)

  check(lt(x,y),	false)
  check(true)
 gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return true else return false end
end

local function nex1(x)
  if x ~= 1 then return true else return false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le0x(x)
  if 1 <= x then return true else return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge1x(x)
  if 1 >= x then return true else return false end
end

local function eq1x(x)
  if 1 == x then return true else return false end
end

local function ne1x(x)
  if 1 ~= x then retassert(bit.tobit(i+0x7fffffff) < 0)
  end
  for i=1,100 do si_{alue_p
,9, x10, x11,x19,     x20, x21, x22,61, x62, x63, x>3, xu65,I,o336,s,f__{al,e_p  ,P,r,e_pr=1 ,e,7,3,f6l=1
,e_pe_pr,7,io__{al,e__pr,4,3,    -309/83,711e-309,0713/E1_,e_pr,7,io_p,_pr,7,io__{al,e7l=1
,e_pr=1
,pr ,7,eeeeeeeeeeeeeeeeeeeeeeeeeeeeee2eeeeeeeeee3,f6l=o335l393s33ro1,6,{"",6,7,io_p,_pr,7,io__,4,3,afalsNNNNNNNl= x21, x22, xx8, x9, x10, x11, x1il   -7,3,f__{al,7, x18, x19,     x20, 889,il,nil2,kkk,il ,l,nil ,rrA,7,io_pr,0,kkkkk,n+l ,l,nil ,ni      ,i, nil,nil ,nfli+kkk+fir,__{leaue_p
,9, x10, x11,x19,     x20, x21, x22,61, x62, x63, x>3, xu65,I,o336,s,f__{al,e_p  ,P,r,e_pr=1 ,e,7,3,f6l=1
,e_pe_pr,7,io__{al,e__pr,4,3,    -309/83,711e-309,0713/E1_,e_pr,7,io_p,_pr,7,io__{al,e7l=1
,e_pr=1
,pr ,7,eeeeeeeeeeeeeeeeeeeeeeeeeeeeee2eeeeeeeeee3,f6l=o335l393s33ro1,6,{"",6,7,io_p,_pr,7,io__,4,3,afalsNNNNNNNl= x21, x22, xx8, x9, x10, x11, x1il   -7,3,f__{al,7, x18, x19,     x20, 889,il,nil2,kkk,il ,l,nil ,rrA,7,io_pr,0,kkkkk,n+l ,l,nil ,ni      ,i, nil,nil ,nfli+kkk+fir,__{lea,_ ,3,io_
,e_pr=1
,e_pr,7,io_p,_pr,7,_{al,e_pr=0
,e,7,i1
,_pr=7,io_p,_pr,7,jo__,4,MSHMe_pr{al,e_pr,7,io_pr,7,_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e8, x9, x10, x11, x1il   -7,3,f__{al,e_p  ,P,r,e_8pr=1
,e,7,3,f6l=1
,e_pe_pr,7,io__{al,e__pr,4,3,        f6l=1
,ep0
=r_,e_pr,7,io_p,_pr,7,io__{al,e2l=1
,e_pr=1
,pr, x12, x13, x14, x15, x16, x17, x18, x19,     x20, 8.89,il,nil2,kkk,il ,l,nilio_pr,7,kkkkk,n+l ,l,nil ,nireduce_inputsfi%i,nil,_{l,e,not 3,f=1i, il ,nkkkkkkk,kkjil ,l,npil,nr,2,io_pr,7,kkk,  x67, x68, 9, x50, x51,      x53,kkk, x67, x68,l ,ni      ,i ,nil9,nil ,nfl
    i+kkk+assert(bit.tf