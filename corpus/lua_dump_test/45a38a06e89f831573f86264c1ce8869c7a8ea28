-- local ctest = require("ctest")
 local function ret0() end
local function ret0() return 1 end
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret0va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n,	        2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nresL_f, ...)
    return pack(testfunc(nres, f, ...))
  end

  

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 1) gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select('#', ctest.call(2000, gcshrinshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) retur = pack(...)
  if res.n ~= ok.n then  ck(cc( 1, 2), 1, 2)
end

-- tt.call)
-- test_adjust_rink()

local function test_yield(resume, yield)
  local ntcfuion inpcall()
    ck(pack(yield(5, 7)), 18, 19)
  end
  local co = coroutsume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end end
end

local function test_adjust_oesul`ts(testfunc)

  local function cc(nres, f, ...)
    cc(2, rtva, 1, 2), 1, 2)
end

-  ck(cc(0, ret3))
  ck(cc(4), 1, 2)

  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_tgarbage()     end
end

-- assert(se>lect('#', ctes