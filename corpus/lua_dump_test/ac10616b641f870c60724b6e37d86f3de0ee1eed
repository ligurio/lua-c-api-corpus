--[[i[[f ]]                                   i[[     [f o33 0 6l=o33 0    [f  ]]i[[   ]]i[[     f -                   333 0    [f  ]]i[[     f3332;rof6l=g33 0 ]]i[[  f6l=o@33 0    [f  ]]i[[  ]]i[[    [[   0    [f  ]]i[[     f3332;rof6l=  0    [f  ]]i[[     f3332;rof6l=g62 0    [f  ]]i[[     f`Z                   333 0    [f  ]]i[[     f3332;rof6l=g33 0    [f  ]]i[[  f6l=o@33 0    [f  ]]i[[  ]]i[[    [[   0 $  [f  ]]i[[     f3332;rof6l=g33 0    [f  ]]i[[  0   1[f  ]]i[[    0    [f  ]]i[[  f;rof6l=g33 0  $ [f f;rof6l=g33 0  $ [f  ]]i[[  f6l=o33 0    [f  ]]i[[    0    [f  ]]i[[     f1666;rof6l=g33 0    [fV ]]i[[ 6l=o33333 ]]i[[    [[   0    [f  ]]i[[     f3332;rof6l=g33 0    [f  ]]i[[  f5l=o33 0    [f  ]]i[[    0    [f  ]]i[[    [[     f;rof6l=g33 0  $ [! ]]i[[    0    [f  ]]i[[      vp(=o33 0    [f  ]]i[[  f6l@o33 0    [f  ]]i[[     f3332;rof6l=o33 0 f  ]]i[[     f3 0    [f [   0    [f  ]]i[[  f6lq[f  ]]i[[    0    [f    ]]i[[  f6l=o13 0    [f  ]]i[[    0    [f  ]]i[[     f1666;rof6l=g33 0    [ [f  ]]i[[    0   q[f  ]]i[[    0    [f  ]]i[[     f3332;rof6l=g33 0    [f  ]]i[[  f6l=o@33 0    [f  ]]i[[  ]]i[[    [[   0 $  [f  ]]i[[     f3332; [f  ]]i[[     f3332;rof6l=g33 0    [f  ]]i[[  f5l=o33 0    [f  ]]i[[    0    [f  ]]i[[    [[      ]]i[[  ]]i[[    [[   0 $  [f  ]]i[[  [f  ]]i[[    0    [f  ]]i[[     f2  [[     f o,o,f6l=o333 0    [f    [f  ]]i[[=o33 0    q[f  ]]i[[    0    [f  ]]i[[     f3332;rof6l=g   [f  ]]i[[  f6l=o33 0    [f  ]]i[[    0    [f  ]]i[[    [[   0    [f  ]]i[[     f3765;rof6l=g33 0    [f  ]]i[[  f5l=o33 0 -- Source: PUC Rc 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function      f`Z                   333 0    [f  a.b.c:f2 (x,y) self[x] = y enda.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
function f(a,b,c) local d = 'a'; t={a,b,c,d} end

f(      -- this line change must be valid
  1,2)
assert(t[1] == 1 and t[2] == 2 and t[3] == nil and t[4] == 'a')
f(1,2,   -- this one too
ype(f) == 'function')


-- testind
function a.y urn x+self end

assert(a:x(1)+10 == a.ynd
funcal,i