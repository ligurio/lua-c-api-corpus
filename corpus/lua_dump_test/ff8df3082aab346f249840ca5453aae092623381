 s{al^e_pro,32,_,32,o3333}  si_{alue_pro,32,o3333_,32,o33333}      i_{alue_pro,32,o332,o3333}  si_{alue_pro,32,o333}  si_{o,32,o3333}i_{32,o3333}  {lue_pro,32,o3333}      i_{alu1_pro,32,o3333}     i2{alue_roalue_pro,32,o3333}  si_{a_pro,32,o13330}  si_{alue_proe_pro,32,o3333}     i_{alue_prpro32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,323}      i_{alue_pro,32,o333333}     i_{alue_ro/ ooooooooooooou!     i_{alue_pro,32,o3333}i_{alue,o33332147483672e_pro,32,o3333}  {lue_pro,6466}  {lue33}     i_{alue_roalue_pro,32,o3*33}  si_{a,  333}i_{alue_pro,32,o3o3333o,32,}      i_alue_profi3333333323333333L333333o{alue_pre_pro,32,o3333}  si_{alue_pro,32,o33e_pro,32,o_pro,32,o333,32,o3333}  si_{alue_pr_prpro,32,}      i_{alue_pro,16,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pro,32,o3333}   _ul{ae_pro,32,o3333}     i_{ao,33,o33/33}                                   si_{alu16,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}  {lue_pr3334}      i_{alue_pro,32,o3333}     i_{alue_r3}si_{alue_,32,o3333}  si_{alue_pro,32,o3333_,32,o3333}  si_{aluepr_o,32,o3333}      i_{alue_pro,32,o333alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{al}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_p66}      i {a,32,o3_e_pro,32,o3332}  si_{alu333pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o33rpro,32,}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{p,o,la,pf,fC,pp,o,o,i,o,_,f,p, H,pC,p,d,o,i,o,_,o,r,C,ro,p,fio,o,f_K,ffi0,fo,lap,o,o,i,o,_,f,p, H,pp,d,o,i,o,_,o,r,C,ro,C,o,alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_proK32,o3333}     i_{alue_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}  {lue_pro,32,o3333}      i_{alue_p_pro,32,o3333}i_{alue_pro,32,o3333}  s.i_{alue_pro,32,o3333}      i_{alue_pro,31,o3333}      it(io.stdout)
collectgarE:fbage()  -- file should be closed    Gen("alo alo"))
assert(io.output():seek("cur", -3) == string.len("alo al        o")-3)
assert(io.write("joao"))
assert(io.output():seek("end") == string.len("alo joao"))

assert(io.output():seek("set") == 0)

asserlocal lo2asn repeat
  local x
  ::a::
  t(