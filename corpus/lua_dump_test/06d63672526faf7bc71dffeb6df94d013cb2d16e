
local t = {}
for i=1,26 do t[i] = sd
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
                               local function dummy() end
  return ...
end

local function foo3(...) -- VARG Ual function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
                               local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy()         end
end

local function foo4() -- U, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t0[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARGuUCLO RETM
  local func
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(91+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
              local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
end

local function foo4() -- U, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local functi
local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do   sert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -nction tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
                      local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  lossert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
                               local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dumuy() end
end

local function foo4() -- U, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local func
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local3,f6l=1
,e_pr=1
,e_pr,7,  e_p_pr,7i,o__{al,e_pr,7,io_pr,7/3,f6l=                                                 salue_rro,o,f3;ro,o,        si_{alue_pro,o,f2l393333r333;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f_{alue_pro,3;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f_{alue_pro,o,f2l393333r333;333,o3333338;ro,o,o,o,f3333;o,f2l393333r333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f_{alue_pro,o,   p93332;ro,o,o,o,f3333;333,o3333332;ro,o,o,o,f33339;333,o3333332;ro,o,o,o,f1666;333,o3333332;ro,o,f5l33333ro,o,f_{alue_pro,o,f2lo,f3333;333,o3333332;ro,o,f;ro,o,o,o,f33339;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f_{alue_pro,o,f2lo,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f_{alu3333332;ro,o,f5l3333;333,o333330;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,32;ro,o,f3333;333,o33;333,o3333332;ro,o,f5l33333ro,o,f6l=o333332;ro,o,f5l33333ro,o,f6l=o333332;r,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f_{al,o,f1l393333r333;333,o3333338;                    ro,o,o,o,f3333;o,f2l393333r333;333,o3333332;ro,o,o,o,f3333,o3337332<ro,o,332;ro,o,f5l33333ro,o,f6l=o333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f_{alu3333332;ro,o,f5l3333;333,o333330;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,32;ro,o,f3333;333,o33;333,o<3333332;ro,o,f5l33333ro,o,f6l=o33;ro,o,f5l33333ro,o,f6l=o333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f_{alue_3333r333;333,o3333338;ro,o,o,o,f3333;o,f2l393333r333;333,o3333332;ro,o,o,o,f3333,o3333332<ro,o,f5ro,o,f6l=o333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33334ro,o,f_{alue_pro,o,f2l3933233r333;333,o3333338;ro,o,o,o,f3333;o,f2l39;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l333;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f6l=o333332;ro,o,o,o,f3333;333,o3333332;ro,oA,f5l33333ro,o,f_{alue_pro,o,f2l393333r333;333,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l3333;333,o333330<3333332;ro,o,f5l33333ro,o,f6l=o33;ro,o,f5l33333ro,o,f6l=o333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,f_{alue_333;ro,o,o,o,f3333;333,o3333332;ro,o,f5l33333ro,o,32;ro,o,f3333;333,os3;333,o33333r32;ro,o,f5l33333ro,o,f6l=o333332;ro,o,f5l33333ro,o,f6l=o333332;ro,o,o3333332;ro,o,f5l33333ro,o,f_{alue_pro,o,f2l393333r333;333,o3333338;ro,o,o,o,f3333;o,f2l393333r333;333,o;ro,o,o,o,f3333,o3333332;ro,o,f5l,o,f5l,f_{alue_pro,o,f2l393333r333;  3,o3333332;ro,o,o,o,f3333;333,o3333332;ro,o,f5l3 function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=G,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- V
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
st1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
                               local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
end

local function foo4() -- U, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETMcal function foo2(...) -- VAARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local functi-- VARG UCLO -> RETM
  do return ... end
  local functionon foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local functi-- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local fun-- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARGfoo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local futttt4tttttttttttt33333ro foo0(a)
  assert(a == "bar")
end
foo5()

