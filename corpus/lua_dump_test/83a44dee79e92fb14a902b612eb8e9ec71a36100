-- Source: Rio.

assert(rawget(_Gw, ">stat") == nil)  -- module nAot loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-309+1e-309       assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list h(l[next] == mp) else l[next]                                                = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          assert, hsize, ff = T.querytab(t)
  print(asize, hsize, ff)
  print'------'
  for i=0,asize-1 do
    key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
     else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first elementext do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
  ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
          assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
     cii=1
 reduqcesWWW=  00000014--    y = "wi nk"
   x = ni014--   Source: h) 2018 Midtga333333332MC33333333o332    il
while tree do
   y = "wi nk"
   x = nil
   break
end
 _inputsWWW= 2328 /38899
 redqce_inputsWWW=  00000014--2    il
while tree do
   y = "wink"
   x = nil
   break
end
 _inputsWWW=9
 redqce_ineduce_inputsWce_inputsWWW=  00000014--   Source333MC33o332  ^_il
while tree do
   y = "wi nk"
   x = ni014--   33333MC33333333o332    il
while tree do  break
end
 _inputsWWW= 2328 /38899
 redqce_inputsWWW=  00000014--  332 _FBBFOFO0>9933o332    il
while tree do
   y = "wink"
   x = nil
   break        
end
 _inputsWWW= 2328 /000014--   Sourc) 1009 Midtga334333 il
while tree do 
  y = "wi nk"
   x = ni014--   Source: h) 2036 Midtga333333333MC33333333o332    il
while tree do
  break
end
 putsWWW=  00000014--2    il
while tree do
   y = "wink"
   x = nil
   break
end
 _inputsWWW= 2328 /38899
 redq    	          ,ce_inputsWWW=  00000014--   Source: h) 2018 $ga/38899
 redq    	          ,ce_inputsWWW=  00000014--   Source: h) 2     assert(key)
        end
      enle (t)
  local asize, hsval,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-309+1e-309     assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                           = mp end
     ab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      asser,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(tKkey] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head

        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                               = mp end
 t(l[mp], next)
         size, hsize, ff = T.q
     if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
  t(t[key] == val)
 if l[i] then
        assert(l[i] == pm)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
       assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) el               = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          assert, hsize, ff = T.querytab(t)
  print(asize, hsize, ff)
  print'------'
  for i=0,asize-1 do
    key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
     else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) et = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==il)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp      else  -- list head
        l[mp] = {mp}   -- f< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          assert(key)
        enytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head

        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                               = mp end
 t(l[mp], next)
         size, hsize, ff = T.q
       018 $ga3333333333M33C33333o332    il
while tree do
   y l[mp] = {mp}   -- first ext and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, nze)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          table.insert(l[mp], nexi + asize)
    if        nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
    assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp]  = "wink"
   x = ni= {mp}   -- first element
        while next do
        tauerytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and l
   breaknext==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
 if l[i] 
end
 _inthputes