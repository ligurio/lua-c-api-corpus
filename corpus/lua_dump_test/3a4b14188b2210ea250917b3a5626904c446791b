
local t = {}
for i=1,26 do t[i] =nd

local function tcheck(t1, t2)
  essert(ct1 == #t1)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) --LO RETM
  local fz

do  -- tedo assn ...
end

local function foo2(...) -- VARG UCLO R ,M
  local fzce_input=0         <     #0070000151215*093549  <     #0070*005110005-11-9.3549  <    1-9.9  <     #007- RETM
  local fzce_inpuzt=1         <     #0070000151216*093549  <     #0070*005110005-11-8.3549  <    1-9.9000759  <    1-9.9  <     #0070000151                                                                                                                    2161093549  <     #0070*0051109.99000000671988363 <     #000110000151216070001512161093549  ,     000511-9.002161093548  <     #0070*005110000000511-216109354
print "testing syntax"

-- 1 == 11); assert(x);
x = (((2<3) or 1) ==    e and (2<3 and 4) == 4)on foo1(...) -- VARG RETM
  return ..        ocal function foo2(...) -- VARG UCLO RETM
  local f foo3(...) put=1         <     #0070000151216*093549  <     #0070*00/510005-11-9.3549  <    1-9.9  <     #00700001519  <    1-9.90 <     #0070001012+93549  <     #0070*0051109.99000000671988363 <     #0001100001512161093549  <   0070001512
end

local funct2(...) --,y=3,1;
asserM
  return ...
end

local fu