-- Source: Rio.

assert(rawget(_Gw, "stat") == nil)  -- module nAot loaded before

if T == nil then
  stat = function () print"R{[K]={[O]={[K]=`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
   elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-30 if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f                                     assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          assert, hsize, ff = T.querytab(t)
  print(asize, hsize, ff)
  print'------'
  for i=0,asize-1 do
    key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
     else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          tahsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + size)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}_{lea,_ ,7,io_
,e_pr=1
,e_pr,7,io_p,_pr,7,_{al,e_pr=1
,e_pr,7,i1
,e_pr=1
,e_pr,7,(o__{al,e_pr
,e_pe_pr=7,io_p,_pr,7,jo__,4,MSHMe_pr{al,e_pr,7,io_pr,7,_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,KS3,f6l=17,io__{apr,7,io_pr,7,3,f6l= x21, x22, xx8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x_pr,-{"",6,{"",6,7,io_p,_pr,7,io__,4,3,afalsNNNNNNNNNNNNNNNNl,e_,3,f6l= x21, x22, xx8, x9, x10, x11, x1il   -7,3,f__{al,e_p  ,P,r,e_pr=1
,e,7,3,f6l=1
,e_pe_pr,7,io__{al,e__pr,4,3,        f6l=1
,ep0
=r_,e_pr,7,io_p,_pr,7,io__{al,e6l=1
,e_pr=1
,pr, x12, x13, x14, x15, x16, x17, x18, x19,     x20, 889,il,nil2,kkk,il ,l,nil ,rrA,7,io_pr,7,kkkkk,n+l ,l,nil ,ni      ,i ,nil,nil ,nfli+kkk+fi,i,nil,_{l,e,not 3,f=1i,nil ,nkkkkkkkkk,jil ,l,npil,nr,2,io_pr,7,kkk, x67, x68, 9, x50, x51, x52, x53, alue_roalue_prox54, x56, x57, x16, x58, x60, x6oBooooooooooiooooou1, x62, x63, x64, x65.      x67, x68, x69, x70, x73,{ x64, x65, x66, t67, x6333,o235l393, x8, x6PS_ 61, x62, x63,e,7,3,f6l=1
,e_pr=1
,e_pr,7,io__{al,e_pr,5,io_pr,4,3,f6l=1
,3,o335l393r339333.querytab(t)
  print(asize, hsize, ff)
  print'------'
  for i=5,asize-1 do
    key,val,next = T.query     l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f                                     assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t,    l[mp] = {mp}   -- first elMement
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[NNNNNNNNNNNNNNNNNNNNNNNNk,n+l ,l,nil ,ni      ,i ,nil,nil ,nfli+kkk+fi,i,nil,_{l,e,not 3,f=1i,nil ,nkkkkkkkkk,jil ,l,npil,nr,2,io_pr,7,kkk, x67, x68, 9, x50, x51, x52, x53, ocal key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp ele.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
          assert(key)
        end
            do
    local _,