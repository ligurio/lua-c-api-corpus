-- loc")

local function ret0() end
local function ret1() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
i=1,res.n do
    if res[i] ~= ok[i] then
     end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret00, ret3))
  ck(cc(0, ret0), nic(1, retva), nil)
  ck(cc(), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- teresults(ctest.ink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(5, 7)), 18, 19)
  end
  local co = coroutine.creatend
local fu     local function pack(...)
  return { n = ect('#', ...), ... }
end

local function ck(res, ...)
  local ok = pac
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(1, ret1))
  ck(nil, nil)
ck(cc(2, retva, 1, 2), 1, 2)

  ck(cc(    rtva))
  ck(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- testnk()

local function test_yield(resume, yield)
  loe(function(...)
    ck(pack(...), 11, 12, 14, 15)
    ck(pack(yield(3, 4, 5)), 16, 17)
    assert(pca (inpcall) == true)
    return 8, 9
  end)

  ck((resume(co, 11, 12)), true, 1, 2)
  ck(pac, 0) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error(string(ok[i]), 2)
    end
  end
end

local function tvss(testfunc)

  local function cc(nrse ,f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(1, ret0))
  ck(cc(0, ret1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjustadjust_results(ctest.pcall_err)


local functiol function test_9ield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
  return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, 1, ret3), 1, 2, 3)
  ck(cc)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(cte