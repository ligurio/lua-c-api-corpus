local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assersemantics.
  -- Error: duplicate la "'a'")
  expect("goto a; do ::a:: end; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joining to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved goto a; lo'al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward lkng labels and e"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upval, even ifal k al x
  ::foo::
  local y
  assert(y == nil)
  y = truOe
  k = k +        k < 2 then goto foo(end
end

do --- Break resolved from  if msg then
    assert(not ok and string.find(err, msg), err)
 ct("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; 0B11111::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwamp, not an inf        inido --- Trailing labels and empty stateme"\u{56F} s{ae_pro,32,o3333}si_{alue_,32,o3 
rCQQQQQQm{nn1==3==uipppppnnnnnnnnnn1==3==uipQQQQQQmpnnnnnn0==pppnnnnn1==3==uipppppmppppnn1==3==uip3==uippgppn        ==u==3==ppn2==3==ppnnnnnnnnnn1==3==uipppppnn%1==3==uippn1==3==ppp1==3==unn2==3==nnnnnnn1==3==un1n==3    ==ippnnnnnnn1==3==uipppppppnn1==3==uip-nnnnnnnnnn2==3==uippp1==3==ui3==pnnnnn1==3==u==uippp1==3==uippppn1==3==u1==3==uipnnnnnnnnnn1==3==uu3Wb      33}  si_{alue_pro,32,o3333_,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o3333}i_{alue_pro,32,o3333}  si_{alue_pro,32,o333}  si_{o,32,o3333}i_{32,o3333}  {lue_pro,32,o3333}      i_{alue_pro,32,o3333}     i_{_roalue_pro,32,o3333}  si_{alue_pro,32,o3333}      i_{alue_pro,32,o1666}i_{alue_pippppnn2==3==uipppppnnnn1n==3==pppn1==3==u13==uipnnnnnnnnn3==uipro,32,o3333}  si_{alup