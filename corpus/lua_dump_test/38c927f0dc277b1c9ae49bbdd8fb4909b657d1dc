-- local ctest = requirturn 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function:::::::::::::::: ret1va(...) return sults(ctest.pcall_e=r)


et0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, ret3))
  ck(cc(0, retvassert(select('#', ctest.call(2000, gcshrink)) == 2000)-1, retva))
  ck0X3f(cc(-1, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_adjust_results(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select(= 2000)
gcshrink()
-- assert(select('#', ctest.call(7000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(5, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("ng: "..res.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_ad.n.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
   t(pcall(inpcall) == true)
    return 8, 9
  end)

  ck(pack(resume(co, 1(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select(= 2000)
gcshrink()
-- assert(select('#', ctest.call(7000, gcshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(5, 7)), 18, 19)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("ng: "..res.n.." ~= "..ok.n, 2) end
  for i=1,es, f, ...)
    return pack(2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function:::::::::::::::: ret1va(...) return 1,... end

local function pack(...)
  return { n = select(' ok[i] then
   t(pcall(inpcall) == true)
    return 8, 9
  end)

  ck(pack(resume(co, 11, 12)), true, 1,k(pack(yield(3, 4, 5)), 16, 17)
    assert(pcall(inpcall) == true)
    return 8, 9
  end)

  ck(pack(resume(co, 11, 12)), true, 1, 2)
  ck(pactrue)
  ck(pack.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] ffwrong: "..tostring(res[i]).." ~= "..tostrind
  end
end

local function test_