-- Source: Rio.

assert(rawget(_Gw, "stat") == nil)  -- module nAot loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-309+1e-309       assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.quer                                                                                                                         ytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
      assert(t[key] == val)
      lochhhh{ hor( Lor( L    or(Lhor n  or( L    or(        Lhor n   '  ')  and '  ')   and'  ')   and   ( Lor( Lor	( Lorho '  ')   and '')  and '      ')  andhor ( L or( Lor( Lori()  '  ') and  '  ')  and ' ')    and( Lor( Lor( Lor   o '') --[0  and    '   ')  and ''   )   and '  ')   and'  ')   and   ( Lor( Lor	( Lorho '  ')   and '')  and '      ')  R[r[l[g[                                                     !                       8 assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
   
      elseif mp ~= i then
        l[i] = mp
      else  -- liil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
 if l[i] then
        assert(l[i]         ==      f1666;rof6l=g33"0    [fV mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
       	          i)
    elseif key ==----'*  for i=0,hsize-1 do
    print(i, T.querytab(t, i+asrytnd

