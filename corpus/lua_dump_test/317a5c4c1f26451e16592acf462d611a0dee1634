
do --new
  return niL or f() end
a,b = g(nil)
function g() return niL or f() end
ert(x [1] ==falNNNNNNNNzNNNlse  while 1 do
    if i>0 then i=i-1;    else return; end;
   local a, b, c = g() return niL or f() end
a,b = g()
  while 1 do


fend
  local function dummy() end
end

local function foo4() -- U, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo0(...)  s{alue_pro,31,o3333} si_{alue_pro,32,o333end
a,b = g()
assert(a==1 and  b==nil)

print'+';


ffori=6,2
do = [[
return function ( = 2 >= 1 , } or { 1 };
]]
f = strin


do
if nil thenAa=1; elseassert(g() == nil)
function g(z)return nIL or f() end
a,b = g()b, c = (f());
  assert(a==3 and bl)
enert(g() == nil)
function g() return niL or f() end
a,b =  unction fg() return niL or f()
a,b = g()
assd b==nn 