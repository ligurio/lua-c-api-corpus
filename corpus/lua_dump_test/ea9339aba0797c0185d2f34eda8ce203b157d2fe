local loadstring = loadstring or load

local function expect(src, msc)
  if msg then
    assert(no, "'a'")

  -- Erlocal x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwa d o --- Goto is not a ked

do --- 9       Goto: local y", " to a; a:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Fard jump, not an infinite loop.
end

do --- Goto is 0
end

do --- Goto is a 							

do --J_8 to is:cal v,w; goto a; end

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto1
end

do --- Goto is 1        e.=
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
   - ::b::
  end
  assert(x to a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto is" "'x'")

  ::a:: do             goto a; ::a:: end -- Forward junot :finite loop.
end

do --- Goto: ltG goto      l x", "'x'")

  ::a:: do     goto a; ::a:: end --
  expect("goname>")
end

do --- Trbu litnx", "'~~      ::a:: do goto a; ::a:: end -- al x = 22
  do
    goto a
    goto a
    local y=  22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra       "repeax'")

  ::a:: do goto a; ::a:: end -- Forwar")
end

do --- out of scope.
  local x = 11
  do
    goto a
 -- Goto is 1        e.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x <= 11)
end

do --- Tra        lacol x; ::a:: local y",   t goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

dsc)
  if msg then
    assert(no, "'a'")

  -- Erlocal x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwa d o --- Goto is not a ked

do --- 9       Goto: local y", " to a; a:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Fard jump, not an infinite loop.
end

do --- Goto is 0
end

do --- Goto is a 							

do --J_8 to is:cal v,w; goto a; end

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto1
end

do --- Goto is 1        e.=
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
   - ::b::
  end
  assert(x to a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto is" "'x'")

  ::a:: do             goto a; ::a:: end -- Forward junot :finite loop.
end

  goto = 1
end

do --- ord. +compacal x'= 11
  do
 end -- Forward jump, not an infinioto = 1", "<name>")
end

doassert(x == 11)
end
c