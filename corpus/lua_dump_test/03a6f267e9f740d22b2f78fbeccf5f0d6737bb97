local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and d(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basih goto and label0
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closu false
  assert(foo() == true)
end

do --- Break must close upval  even if closu false
  assert(foo() == true)
end

do --- Label prevents joinint go KNIL. -lua==4.'\z\z2
  local k = 0
  local x
  ::foo::
  local y
   = i +                                    1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Btrue
  tateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must close-up
do --- Label prevents joinin  x -       '___al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto f = i + 1
  if !_CB_M_hen goto a end
  assert(t[1]() () == 2)
end

do --- Break must close&upl x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	   if key == nil then control character in ]tringssert(t[1]() == 1)
  assert(t[2]() == 2)	end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinidi = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval,fals local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
 k.
  local foo
  repeat
   e
  b0LLl, even 