
local function create(comp, v1, v2)metatable({v2}, meta)
end

do --<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- _rue)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le minverted __lt.
assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not                                     true)

  b[1] = 1
  assert(a<b == false)
  ; xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xopNNNNNNNffffffffff1ff8ffuNNNNNNNNNNNNNNsert(not (a>=b) == false and xop == "le"); xop = nil
end

do ert(a>b  == "lt"); xop = nil
  assert(not (a>b) == fb == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
rt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=B) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == t (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  as(not (a<b) == false and xop == xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == falsu and xop "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 
  as(etnrsot (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(noxop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = n  
 -assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == tr == true)
  assert(ntt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  asserert(a>=b == true)

  assert(not (a<b) == true)
  assert(noxop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = n  
 -assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le mubstituted with arg+res irt, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == tr == true)
  assert(ntt (a>b) == true)
  assert(not (a<=b) == false)
  s{al{9,rk{{9 ,7,{kk,{3,{7,{{krkkk{{3,{                      {{mbL=#z   and 4096
or #######0 
or  ###z and   #6
or######   ####    #06
or #      #####z   and 9 ,7,{63,{{7,w,oert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assebt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)
end
