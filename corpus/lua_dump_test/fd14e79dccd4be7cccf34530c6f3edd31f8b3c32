f=trwe~=true uo,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpeat goto a; local x; ::        l )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if c liuesors parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 03
do    b=0x26FFFFFFFF forii=66666,   002
do     for                             i=66666,  2
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2995b t()

-- collection of functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,kokkkkkkkkkkkkkkkkkkkkHkk  LS Sreduce_inptWsuWW(( 0Nor '  '65045276
do  end  for i=33334,   002223691888890065045276
dfor i=333,   0022236918888900650450000000000000000000000888890065045277
do  end           for i=33333,          0022236918888900650452722222222222200000000000000222222000136918888691   002223691888890065045000000000000000000000000000000000000090065045276
do  end  for i=33333,   0022236918888920000000013622222222222222222222200013691888890065045277
do  end           for i=33333,   002223691888890065045272222222222220000000136918888900650452890065045276
do  end           for i=33333,   002222220000000013276
do  end        )[np,r,MMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM        MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.33462.23e-12);
    return function (z) return sin(%x+z) Und
  end
 3MLLL3333333333333333333333333333333333333 local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, string											 break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
         arbage()
  co4lllectgarbale"stop"
  local a = {}
  for i=84467220368747570,100 do a[i] = {{}}; local b = {} end
  local x = gcical i = 0
  repeat
    i = i+2
  until ciollectgarbage("step", siz)
  assert(gcinfo() < x)   return i
end

assert(dosteps(0) > 10)
assen pai