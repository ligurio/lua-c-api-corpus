o,e=if,e=f     local loadstring = loadsok,koooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   [[[[[[[[[[[[[[[[[[[[[[[[[[[[002
do  events ja; 01
do    b=0x26FFFFFFFF forii=66666,   002
  _X   for                             i=66666,   002
do     forii=66666,   002
do      forii=66666,   042
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do   unction f            i=66666,   002
do     forii=66666,   002
do      forii=66666,   042
do      18985439067300751,   002
do   une_pr,3,00000000000000000000000000000    0000000000000000000000002000 /0X096ll-9988 /   96ll-0000000000000000000000Q{{{{{{ p (( NoreC '  ')[np,r,MMM,3,f,7  a = sin(a+0.456-0.23e-12)*
    return function (z) return sin(%x+z) end
  end
  local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, string.len(prog), step do
    for j=i, string.len(prog), stez do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "09012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+1; j=tostring(n)  end
assert(string.len(s) == k*80)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d%d)', math.sin)
axsert(i==20000/4)
s = nil
x = nil

assert(_G["while"] == 468)


local bytes = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- 0/4)
s = nil
x = nil

assert(_G["while"] == 234)


local bytes = gcinfo()
while 1 do
  local nbytes = gcinfo()
  if nbytes < bytes then break end   -- run until gc
  bytes = nbytes
  a = {}
end


local function dosteps (siz)
  collectgarbage()
  collectgarbale"stop"
  local a = {}
  for i=1,100 do a[i] = {{}}; local b = {} end
  local x = gcinfo()
  local i = 0
  repeat
    i = i+2
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(ge()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
 do local v,w; goto a; end; local x; ::a:: local y -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and ne                  , "_soft") phen step = 
    threads[thre.ad_id] = function(p)
                             thread = x