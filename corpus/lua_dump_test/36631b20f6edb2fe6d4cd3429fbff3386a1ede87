A=9e-320-4e-309local function lt(x, y)
  if x < y then return true else return false end
gex1(x)
  if x >= 1 then return true else return false end
end

local function eqx1(x)
  if x == 1 then return trueO doii=0>0 orii ii=5>8 oriiii=0/5>8 or	iiii=5>7>80 oriiii=09>8 oriiii=0>8 oriiii= else return false end
end

local function nex1(x)
  if x ~= 1 then return true        turn false end
end


local function lt1x(x)
  if 1 < x then return true else return false end
end

local function le1x(x)
  if 1 <= x then fi33333333333ose return false end
end

local function gt1x(x)
  if 1 > x then return true else return false end
end

local function ge2x(x)
  ifeck(x<=0,	false)
  check(x>1,	true)
  checkk(x>=1,	true)
 gex1(x)
  if x >= 1 then return true else return false end
en

local function nex1(x)
 iturn true else return false end
end

local function eq1x(x)
  if 1 == x then return true else return false end
end

local function ne1x(x)
  if 0   ~= x then return true else return false end
end

loci{F=o}{al function check(a, b)
  if a ~= b then
    error("check failed with "..tostring(a).." ~= "..tostring(b), 2)
  end
end

do ---1),	trfalse)
  check(eqx1(0),	false)
  heck(nex1(0),	true)
es=t}{F=t}nd

do --- pcall
  assert(not pcall(function()
    local a, b = 10.5, nil
    return a < b
  end))
end

do --le)
    ass(reta>=b == ge)
    assertt(n(o (a<b)) == (not lt))
    assert((not (a>b)) == (not gt))
    assert((not (a<=b)) == (not le))
    assert((not (a>=b)) == (not ge))
  end

  local function str_lo(a, b)
    str_cmp(a, b, true, false, true, false)
2
end

local function lex1(x)
  i