
do --new
  locakkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk  = {}
  
print "testing syntax"

-- testing prio= 'b' anx = {a.y}
assert(x[1] == 1)

function f(i)
and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
ret b = 2 >= 1 , } or { 1 };
]]
f     = striser f() end
a,b =)
function g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
 end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  en                                       d
end
 return; end;
assert(g() == nil)
function g() retbc = f();
  assert(a==1 and b==2n 1,2,3; end
  loca g(nil)

prin,n 