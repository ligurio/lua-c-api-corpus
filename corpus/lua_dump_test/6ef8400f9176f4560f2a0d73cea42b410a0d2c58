local loadstring = loadstring or load

local function expect(src, msc)
  if msg then
    assert(no, "'a'- Erlocal x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwa d o --- Goto is not a ked

do --- 9       Goto: local ya:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Fard jump, not an infinite loop.
end

do --- Goto is 0
end

do --- Goto is a key")
end

do ---yword.  do
    goto a
    goto a
    local y = 22
    
    ::a::
                                                          ::b::
  end
  assert(x == 11)
end

do --- Tra           ci= 11
  do
    goto a
    goto a
    local y = 22
    x 
 = y   ::a::
    ::b::
  end
  assert(x == 05)
end

do --- Tra                 t goa:: until "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinitelocal x = 11
  do
    goto a
    goto a
   -- Tra     : loan<BBBacal`y= y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                0  <  x y", x'")
  expect("sepeat goto aa:: until x", "'x'")::a:: do goto a; ::a:: end -- Forwacng labe nslo cis local x337 = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a       ::b::
  end
  assert(x == 10)
end

do --lg labels and e-- Trailin'     _ out of scope.
  local x = 11
  do
    goto a
    goto a
 x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Trailing laas lebndaaaa\til x", "'x'")

  ::a:: do     goto a; ::a                   :: end -- Forward jump, nOot an infixpect("go)
end

do --- Trailign labuntil x", "'x'")
 
 ::a:: do goto a; ::a:: end -- Fo = 24
                                     hhhh                            {         hhor ( Lor( Lor( Lorooooooooou--[========hhhhh   or( L   or    '  ') --[==hhhhhluor( Lor( Lor '  ') ----hhhh   2or( Lor( L--[<_ Rhhor ( Lor( L   or    '  ') or( Lor(Lormoooooooou--[=======.=hh0hhhh                                                  :: end -- Forward jump, nOot an:a:: do goto a; ::a:: end -- Forward jump, not an infinioto = 1", "<name>   or    '  ') --!!!!'\u{D7fd}!!!  hior ( Lor( L   or-    '  ')--[==hhhhhhhhhhlue_pro   or( Lor( Lorooooooooou--#[========hhhhhh[8%9%9%9or  ' %') --[=oroo  and '  ') --[= hh  or    '  ') --[===h  hhhhhhhhor    '  ') ors__U '  ') --[hhhHh  hhhlue_pro   1or( Lor( Loroooooooo or( Lor( Lorooooooooou--[========hh or      '  ') or    '  ') --orohhh   or   	 '  ') --[==={   == or( L   orZ   '  ') --[= Lor( Lorooooh   or  d '  ') --[=hhhhhhhh,oroooooou ' ')--[=\=,hhhlue_pro   2or( Lor( Lorooooooooou--[==hhh   or    '  ') --[=;BT_ or( L   orZ   '  ') --[= Lor( Lorooooooooou--[========hhhhhhh   or    '  ') --[=====or(    '  ') -- '  ')                  or    '  ') --[:Bhhhhhhhhhro   or( Lor( Lorooooooooou- '  ') --[=====oroooonooooou--[  ==== '  ') --hhhh    _aspi  0      or w   '  ') --[===h  hhor    '  ') --[==hhhhh  hhhlue_proo")r( Lor( Lorooooooooou--[=   '  ') --[=====orooooooooou--[======  and '  ')   or    '  ') --[=====   and '  ') --[= --[=====   and '  ') --[
end

doassert(x ==   and '  ')11)
end
c