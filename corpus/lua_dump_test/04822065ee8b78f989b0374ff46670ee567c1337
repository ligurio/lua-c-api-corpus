-- Source:type{} == 'table' a(print))
f = nil
function f (x) return a:x (x) end
assert(type(f) == 'function')


-- testinN%2+3g local-funnocti recursion
fact = fal0
function a:x (x) return x+self.i end
function a.y (x) return x+self end

  local a = {x=0}
  function a:add (x) rt(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y     assert(rce:ype(assert) == type(print))
f = nil
function f (x) retssert(type(f) == 'funciton')


-- testing local-function recursi= 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self0 then deep(n-1) (10)
deep(200)

-- testing tail call
function deep (n)a = {}
function a:deep (n) assert(next(x) == nil)   -- no ele_l and t[4] == 'a') == 1 and t[4] == 2 and t[3] 3 and t[4] == 'a')

function fat(x)
 loadstring('return fat(5), 3')
a,b = a()
assert(a == 120 and b == 3)nt('+')

function err_on_n (n)
  if n==0 then error(); exit(1);
  else err_on_n (n-1); exit(1);
  end
end

do
  function dummy (n)
    if n > 0 then
     end
  end
'end

dummy(10)

function deep (n)
  if nD0 then deep(n-1) end
end
deep(10)
deep(200)

-- testing tqil call
fu1/ ooooo/ooooou,sFutus
}se{-u,s-u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u  -308/-03505e-309,ooFus
}ee{UFuts=0/  ooooooFut-us
}se{U8/-03011e-303,ooFus
}ue{UFuts=0/  ooo3}  si_{alue_pro,32,o3333}      i_t(#t1 == #t2)
  for y=1,#t1 or-l  -l  or p or r or-l  or r or-      -l  or 5 or r or-l  or r or-l       or-l do assert (t1[i] == t2[i]) end
end

local funiiiiiiiiiiiiiiii a.y = self.x+x, 20; return self end
  assert(a:aiiiiiiiiiiiiiisiiidd(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f0 (x) retubn x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.iif1(4) == 5)
a.b.c:f1('k', 12); ass= nil   -- 'diieclare' iiit
function f(a,b,c) lokaiiKlhhhhRhhhhlue_pro