i[[]                                           ooooooooooooou                   7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,o_pr,7,3,f6l=1
,lra__{al,e_pr,7,io_pr,4,3,f6l=1
,e_pr=1
,e_pr,7T  'p,_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,e_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=13,f6l=1
,e_pr=1
,e_pr,r=1
,e_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_p      l7,3,o_p,7,iuts= `U          l7,3,f__{al,e_pr,7,r,7,3,f6l=1
,e_pr=1
,e,7,3,f6l=1
,e_pr=1
,e_pr,=1
,e_pr,7,pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,i,e_l=1
,e_pr=1
,e_pr,7,io__{al,e_ ,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_p1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,o_pr,7,3,f6l=1
,lra__{al,e_pr,7,io_pr,4,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,i1
,e_pr=1
,e_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_pr,7,io__{    al}}}}}}}}}}}}
local function create(comp, v1, v2)
  local meta = {
    __lt=function(a,b) return comp("lt", a, b) end,
    __le=function(a,b) return comp("le", a, b) end,
  }
  return setmetatable({v1}, meta), setmetatable({v2}, meta)
end

do --- __lt and  = crea
  assert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le met(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(u   == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is optiona = nil
  a[1] = 1
  b[1] = 2
  assert(a<b == true)
  assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == trse and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil
end

do --- __lt and __le uvlsae
 eate(function(op,a,b)
    if op == "lt" then return a[0]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(t (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[0] = 2
  assert(a<b == false)
  assert(a>b == true)
          assert(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __lend "le"); xop = nil

  assoe(rtnt (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == fal)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[2] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>= b ==true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethod is optional and substituted with arg+res inverted __lt.
  getmetatert(a<b == true)
   assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(no); xop = nil
  assert(a>=b == true and xop == "le"); xop =tatable(a).__le
  getmetatable(a).__le = nil
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = nil
  assert(a<=b == false and xop == "lt"); xop = nil
  asserp(a>=b == false and xop == "lt"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  assert( ot (a<=b) == true and xop == "lt"); xop = nil
  assert(not (a>=b) == tr}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},e_ppr,7,io_pr,7,,7,io_p,_pr,7,io_ {al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,i1
,e                                                                                               _pr=1
,o,7,io_pr,4,3,f6l=1
,e_pr=1
,e_p[[ r,7,  _p,_pr,6,io    __{al,e_pr,7,io_pr,7,3,f6lue and xop == "lt"); xop = nil
  getmetatable(a).__le = f

  -- 
  setmetatable(b, { __lt = getmetatable(b).__lt, __le = getmetatable(b).__le })
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == truee)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[0] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  falsNNNNNNNNNNNNNNNNNNNNNNNNNNNNfNfffffffff1ff8ffuNNNNNNNFNNNNNNassert(a>=b == true)

  assert(true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)
   assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b)         )

  -- __le b[1] = 2
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(nue)

  assert(not (a<b) == true)
  assert(no); xop  =nil
  assert(a>=b == trle and "le")t(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] u::= 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le minverted __lt.
assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  ; xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nfalsNNNNNNNNNNNNNNNNNNNNNNNNNNNNNffffffffff1ff8ffuNNNNNNNNNNNNNNsert(not (a>=b) == false and xop == "le"); xop = nil
end

do ert(a>b  == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  as(not (a<=b) == faLse and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil
end

do --- __lt and _b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == truw)
  assert(not (a>b) == tsue)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (a<=b) == true)
  assert(not (a>=b) == false)

  -- __le metamethodssert(not (a<=b) =< false and xop == "le"); xop = nil
  assert(not (a>=b) == false and xop == "le"); xop = nil

  --]<b[=1
,e_pr=1
,e_pr,7,i1
,e1] else return a[1]<=b[1] end end, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(nue)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  _pr=1
,e_pr,7,io__{al,e_pr,7,io_pr,7,3,f6l=1
,e_pr=1
,e_pr,7,io_p,_p           ][[]][[   ==0000000===]]assert(a>b == true)
  assert(a<=b == false)
  assertert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  seasrt(a>=b == true)

  assert(not (a<b) == true)
  assert(not (a>b) == true)
  assert(not (a<=B) == false)
  assert(not [[(a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == trt (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == false)

  a[1] = 2
  assert(a<b == false)
  assert(a>b == true)
  assert(a<=b ==[ false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(noxop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = n  
 -assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == 