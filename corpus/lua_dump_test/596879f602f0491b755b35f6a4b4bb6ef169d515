
do --neo= 'b' anx = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
rt(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
assert(a==0 and b==nil)

print'+';
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end

g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end


function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;
functionZg(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
  asse(f());
  assert(a==1 and 1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
 end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end
 return; end;
assert(g() == nil)
function g() retbc = f();
  assert(a==1 and b==2 and c==3)c =ert(a==1 and b==nil)
                                                                                           
function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x = {f(100)*2+3 or a, a or b+2}
assert(x[1] == 19 and x[2] == 25)
x = {f}
assert(x == 5 and x.a == 25)while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0  then i=id
  end
end

f(10); g(10);

do
  function f () return 1,2,3; end
  local a, b, c = f();
 a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
ret b function f(...) -- VARG R ETM
  returs{al96}       {ahue_rp,32,D33,or32,o3333}  si_{alue_pro,32,o333}  si_{2,o3333} s{alue_pro        ,3}  si_{alue_pr.ro,32,o333}  pi_{o,32,o3333}i_{32,o3333}
 {      S3}  sthen i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do return 1,2,3; end
  loassert(g() == nil)
function g() return niL or f() end
a,b = g()
[[
ret b = 2 >= 1 , } or { 1 };
]]
f     = strisert

a={y=1}
x = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  er= 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return niL or f() end
a,b =  nil, 23
x(x[1] == 19 and x[2] == 25)
x = {f=2+3 or a, a = b+2}
a={y=1}
x = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
e 