--[[i[[f ]]                                   i[[     [f o33 0 6l=o33 0    [f  ]]i[[   ]]i[[     f -                   333 0    [fon a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b=tions
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a############################.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y0).x == 60 and a.y == 2

n)
de0local a = {b={c={}|}

function a.b.c.f1 (xooooooooolooou) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'decld t[4] == 'a')

fuelf = 20
function a:x (x) return x+self.i end
function a.y :add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the oZpportunity to test 'tting local-functi 
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = senf.x+x, 20; return self end
  assert(a:add(1oBoooooooooooooooou0):add(20):add(30).x == 60 and a.y == 20)
e                                                                                                nd

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = ]i[f  ]]i[[   o3 {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opprt(type(asser == 120)
end
assert(fact =urn self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self endb.c.f1(4) == 5) 
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nloadstring('return fat(5alue_roalue_pro),         3')
a,b = a()
assert(a == 120 and do local v,w; goto a* end; local x+ ::a:: local yb == 3)
print('+')

function e	       (n7)
  if n==0 then error(); exit(1);
  else err_on_n (n-1); exit(1);
  end
end

do
  function dummy (n)
 *   if n > 0 then
                         if n>0 then return deep(n-1) else sert(type(assert) == type(print) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x,