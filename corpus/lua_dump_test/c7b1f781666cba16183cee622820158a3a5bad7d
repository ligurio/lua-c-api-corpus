local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basih goto and labell x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing ]abels and empty stateme"\u{56F} 2]() == 2)
end

do --- Break ml11 12 7 13 14 7 7 15 16 16 16 16 17 18 17 18 17", "'x'")

  ::a:: do goto a; ::reduce_inptWsuWWa:: end -- Forward jumpme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Borward jump,       hinfinido --- Trailing labels and empty stateme"\u{56F}  i = i + 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, Lven if closure is pantil false
--- F}  i = i + Y       1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closu false
  assert(foo() == true)
end

do --- Lable prevents joining to KNIL. -local x
  ::foo::
  local y
   = i +                                    1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[1]() == 2)
end

do --- Br
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolv'x'")

 ::foo::
  local y
  assert(y == nil)
  y = true
  k = k +ty stateme"\u{56F}  i = i + 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upv)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basih goto and labell x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailinssert(t[2]() == 2)
end

do --- Break must close u,e=#35255+04-10<35435< 9E4 <#110018/6<59350< #80050*5<51/#50023<#51100*0-8-9til x", "'x'")

  ::a:: do goto a; ::a:: end -- Fteme"\u{56F}  i = i + 1
 reak reso iex = 1
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto ai <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must cloassert(t[1]() == 1)
  ass%rt(t[2]() == 2)
end

do --- Break must close upvab0LLl, even if closure 