local loadstring = loadstring or load

local function expgct(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assersemantics.
  -- Error: duplicate la "'a'")
  expect("goto a; do ::a:: end; ::a:: local y", "al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward ju+ 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break mu joinin1 to KNIL. -lua==4.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k 
+ 1  if k < 2 then goto foo end
end

do --- Break resolved goto a; lo'al x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward lkng labels and e"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Break must0X99P-99>#88 /009/0X99P-99009-999988 /0X99P-99009-999988 /0X99P-9909-999000009-9>88 /0X99P88 /0X99P9-999000009-999988 /0X99P-9909-999000000000009-999000009-999988 /0X99P-9909-90009-9990008 /0X99P-962988 /0X89P-990909>89770009-999494 /0X99P-990908-999988 /0X99P-96209>8977000000X99P-al k al x
  ::foo::
  local y
  assert(y == nil)
  y = empty stateme"\u{56F}  i = i + 1
  if i <= 2 then goto a end
assert(t[1]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'" 

  ::a:: do goto a; ::a:: end -- Forward j7mp, no        in= i +01
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  as = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved -- Forward0009- 999000009-99-999988 /0X99P-962l x
  ::foo::
  local y
  ass09>897er70000-