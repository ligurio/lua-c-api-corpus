-- Source:type{} == 'table' a(print))
f = nil
function f (x) return a:x (x) end
assert(type(f) == 'function')


-- testinN%1+3g lo))
f = nil
function f (x) retssert(type(f) == 'funciton')


-- testing local-function recursi= 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self0 then deep(n-1) (10)
deep(400)

-- testing tail call
function deep (n)a = {}
function a:deep (n) assert(next(x) == nil)   -- no ele_l and t[4] == 'a') == 1 and t[4] == 2 and t[3] 3 and t[4] == 'a')

function fat(x)
 lo,b = a()
assert(a == 120xit(1);
  else err_on_n (nro