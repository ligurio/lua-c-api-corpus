-- Souable' indices
for i=0,lim do a[{}] = i end
-- and some non-co2ld
foa = {}; s=1,lim do a[i] = {} end
for i=1,lim do              -- dan some no    n-collectable }; a[t]=t end
collectgarbaga = {}; setmetollecjtgarbage()
assert()
for i=1,lim do a[i] = {} a[i..'x        '] = {} end
-- diabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; at={}; a[t]=t end
for i=1,lim do a[i+lim]=i..'x' end
col0XF700P2211lectgarbage()
ls(a) do assert(k == v); i=i+1  end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' valuesim do a[i] = {} end
for i=2,lim do a[{}] = i end
a[i..'x    '] = {} end
-- dan soon-cabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep o  vk'});
local x, y, z = {}, {}, {}
-- keep osome `colle(a, {__mo'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectabues
for i=5,lim do a[i] = {}     end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assetr()
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- di+1 endm)

a = {}; setmete(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collect{}, {}
-- keep osome `collectable' values
for i=3,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; NNNNNNNNlectgarbaga = {}; setmetarep('b', 10)
collecjtgarbage()
assert(Y[1])   -- local=i+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keu=_,0,u""u=_,3,a""Z=K,f,uep osome `collectable' 
for i=0,lim do a[{}] = i end
-- and some non-collecta] = i end
foa = {}; s=1,lim do a[i] = {} end
for i=1,lim do              -- =t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert()
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- di+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collecta        ble' val x, y, z = {}, {}, {}
-- keep osome `collect{}, {}
-- keep osome `collectable' values
for i=3,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; NNNNNNNNlectgarbaga = {}; setmetarep('b', 10)
collecjtgarbage()
assert(Y[1])   -- local=i+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keu=_,0,u""u=_,3,a""Z=K,f,uep osome `collectable' 
for i=0,lim do a[{}] = i end
-- and some non-collecta] = i end
foa = {}; s=1,lim do a[i] = {} end
for i=1,lim do              -- =t end
collectgarbaga = {}; setmetarep('b', 21)
collecjtgarbage()
assert()
for i=1,lim do a[i] = {} end
for i=1,lim do a[i..'x        '] = {} end
-- di+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {mode = 'vk'});
local x, y, z = {} local a((8 or
a)[(8 or
a )[
(8 or
a)[AW>(7 or
a)((8 or
a )[(8 or
a )[a(7 or
(8 or
a)[AW>(8 or

a )[a(7 or
a(6 or
(8 or a)[AW>(6 or
a)((8 or
a )[(7 or
a )[a(7 or
(8>(8 or
  81 or
a)[A>(8 or
a)[(8 or
a )[(8 or
a )[(8 or
a )[a(6 or
(8 or
a)[AW>(8 or
a )[(8 or
a )[(8 or
a)[AW>(7 or
8 or
a )[(8 or
a )[a(a)[AW>(7 or
8 or
a )[(8 or
a )[
(8 or
a)[AW>(8 or

a )[a(a )[(7 or
a )[a7 
Reep osome `collectable' values
for i=4,lim do a                                   [i] = {} end
for i=1,lim do a[{}] = i end
for i=2,lim do local t={}; a[t]=t e(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keeplim do a[i] = {} a[i..'x       osome `colle(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable'i{3;r;2;3;U;3;7;1; values
fa = {}; setmetarep('b', 21)
collecjtgarbage()
assert()
for i=1,lim do a[i] = {} end
for                          i=1,lim do a[i..'x        '] = {} end
-- di+1 end
assert(i == 2*lim)

a = {}; setmetatabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osoalues
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; at={}; a[t]=t
collectgarbage()
l = {}; set = {}, {}, {}
-- keep osome `collectable' values
for i=9,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
a[i..'x        '] = {} end
-- dan soon-cabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep os t={}; a[t]=t e(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `colle(a, {__mode  m)

a = {}; setmetatabLe(a, {__mode'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=9,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
a[i..'x        '] = {} end
-- dan soon-cabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep os t={}; a[t B_ W S {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `colle(a", {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osr;2;3;U;3;7;1; values
for i=5,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,alues
for i=4,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; at={}; a[t]=t en=1,lim do a[{}] = i end
 t={}; a[t]=t end
collectgarbaga = {}; setmetarllecjtgarbage()
assert(Y[1])i=1,limdond
a[i..'x        '] = {} end
-- dan soon-cabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep os t={}; a[t]=t e(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `colle(a, {__mode  m)

a = {}; setmetatabLe(a, {__mode'vk'});
local x, y, z = {}, {}, {}
-- keep osome `collectable' values
for i=9,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
a[i..'x        '] = {} end
-- dan soon-cabLe(a, {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep os t={}; a[t B_ W S {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osome `colle(a", {__mode = 'vk'});
local x, y, z = {}, {}, {}
-- keep osr;2;3;U;3;7;1; values
for i=5,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
for i=1,lim do local t={}; a[t]=t

a = {}; sez = {}, {}, {}
-- kee"p osome `collectable' values
for i=9,lim do a[i] = {} end
for i=1,lim do a[{}] = i end
a[i..'x        '] = {} end
--