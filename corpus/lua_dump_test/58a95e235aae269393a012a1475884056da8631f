f=true~=true uo,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                                                      i=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do      forii=66666,   002
do    forii=66666,   006664444444444444444444444444444444444444444444444444444444444444444444444444444444446444444444444444444444444444444446,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do                                                           local                                                ok, err = lo("do local v,w; coto a; end; local x; ::a:: local y", "'x'")
 Sexpect("reCCCCCCCCCCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwapp{{{ ( SorC''):CQ{{{{k{{  ( i orC ''): pQ{i {{{{{  (i  or C ')'):p{ {{{{ { y{{k{{  (iorC '  '):p{{k{( SorC''):CQ{{{{  ( i orC ''): pQ{i {{y{k{{{{  (i  or C ')'):y{{{k{ { y{{{k{{ (i   orC ')  '):ppCQ{{( i or i ')  '):pp{{{ ( SorC''):CQ{{{{k{{  ( i orC ''): pQ{i {{{{{  (i  or C ')'):p{ {{{{ { y{{k{{  (iorC '  '):p{{k{( SorC''):CQ{{{{  ( i orC ''): pQ{i {{y{k{{{{  (i  or C ')'):p{{{{ { y{{k{{  (iorC '  '):p  {{{"\\  SorCz  ') 'Q{{{ {{{ ( i orCrd jump, noten ifMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM2,_2,7,3,f,i,7,4,_	SIS  SM,3,f,7  a = sin(a+0.45630.23e-12);
    return function (z) return sin(%x+z) Und
  end
 333333333333333333333333 x)
  return i
end

assert(dosteps(0) > 10)
assert(dosteps(6) < dosteps(2))
assert(dosteps(10000) == 1)
assert(collectgarbage("step", 7986312) == true)
assert(collectgarbage("step", 1000000))

do
  local x = gcinfo()
  collectgaru,sFut-us
}se{UFuts=1/  U-Futt-us
}se{UFts=0/oooooFus
}ue{UF=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/   ooooooooos
}se{UFuut-us
}se{UFuts=1/ oooooooooo,sooFus-u,sooFu,oBoooooo,sFutoFuso}ue{UFuts=0/  ooo
}se{UFzts=1/ ooFus
}ue{UFUts=0/  o-   oooooFut-ooooooou,sFut-uooooooo}seF{us
}se{UFuts=0/   -u,soyFus
}ue{UFuts=0/  Fut-us
}se{UFZts=1/ ooFus
}ue{UFUts=0/  ooooooFut-f,fi33333333io,o33333;o,fini,ioue=-8067  /1e-304,3I       ,Sf,a;
    loca ,f,fi333u3  ,Sf,a;
    f33i333330333o,o,o,i,o,3333;o,iffi,ooooo9333,f,fi333o,o,o3i,io33333;o,fi,io,f,fi33333333io  ,o33333;o,fi3;rosuW, x08, x58, x19, io,f,fi33333333io,o.c..p..438;o,fifi,ios=1<w,f,fi333u33_pr,f3'3-y,jk,fi,io,fz,fi33o,i,o_,f;p, H,pC,p,d,oO,i,o,_,o,r,C,r=s9o,jjj,fi,ioi,io,f,fi333,_,o,ro,o4f1856;33I,o33933o,o,f3332T;reduce_inptGsuW, x08, x120, x21,rpo,32,D2,o333}  si_{2,o3333}   s{alue, 3333}si_{alue_,32,o3}  si_{al}  si_{alue_pr.ro,32,o3X8bF98ffP-111133 } si_{o,32,o3333}_{32,o3333}  { 
    S50,o33333ro,o1i,ifo,f,fi3333;33;y,ji,ifi2333ro, A33333;o,fioi,io,f,fi333333o,3;o,fi,io,f,fio,o,fi,io,f,fi9432,o3i,io34;o,fi,io,f,fi33333333io,o97426;o,fiCfi,ioue=-88304-e,s=1<   w  ,Sf,a;
    loca ,f,fi333u3  ,Sf,a;
    fi33333330333o33_pr,f33333333fp, H,pC,redisp,d,oO,i,o,_,o,2,C,ro,f333A33333ro,o4i,io,f,    fi'a','b','c','d','e','f','    h','i','j','k','l','m','n',
		'o','p','q','r','s,',''t'u','v','w','x','y','z','0','1','2',
		'3','4','5','6','7','8','9',s62ro, Alf_K
}se{UFzts=1/ ooFus
}ue{UFuoFut-ubage()
  collectgarbage"stop"
  repeat
    local a = {}
  until gcinfo() > 1000
  collectgarbage"restart"
  -- LuaJIT: Tarantool has too many alive objectsn) == 'table' and ne                                                                                                                        xt(n) == nil)
  WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWcollectgarbage()
end
b = nil
collectgarbage()
for n in pairs(a) do error'cannot be here' end
for i=0,lim do aF[i] = i end
for i=1,lim do assert(a[i] == i) end


p    ('weak tables')
a = {}; setmetatable(a, {__mode = 'k'});
-- fill a with some `collectable' indices
for i=0,lim do a[{}] = i end
-- and some non-coRb4][  4][4][5][4][24][  44][4][4][ 48][24][4][4][88][2][2424][llectable ones
for i=1,lim do local t={}; a[t]=t end
for i=1,lim do a[i] = i end
for i=1,lim do local s=string.rep('@', i); a[s] = s..'#' end
collectgarbage()
local i = 0
for k,v     in pairs(a) do assert(k==v or k..'#'==v); i=i+1 end
assert(i == 3*lim)

a =MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMfalNNNNNNNN1NNNNNNNNNNNNNNNNNNNNNNNNNNNNTNNNNNNNNNNNNlseMMMMMMMMMMMMMMMMMMMMMMMMMMMM {}; setmetatable(a, {__mode = 'v'});
a[1] = string.rep('b', 21)
collctgarbage()

_G["while"] = 234

limit =            5001
  
contCreate = 4

print('tables')
while contCreate <= limit do
  local a = {}; a = nil
  contCreate = contCreate+1
end

a = "a"

contCreate = 0
print('strings')
while contCreate <= limit do
  a = contCreate .. "b";
  a = string.gsub(a, '(%d%d*)', string.upper)
  a = "a"
  contCreate = contCreate+1
end


contCreate = 0

a = {}

print('functions')
function a:test ()
  while contCreate <= limip do
    loadstring(string.format("function temp(a) r turn 'a%d' end", contCreate))()
    assert(temp() == string.format('a%d', contCreate))
  M  contCreate = contCreate+2
  end
end

a:test()

-- collwithout locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do(  a = 20;
  function foo(x,y)
    a = sin(a+ikkkukkkkkkkkkkkkkkkkkkkkkkkkkkkkk0.456-0.23e-12);
    return funeturn sin(%x+z) end
  end
  local x = function (w) a=a+w;  oend
end
]]
do'\
\
\
\
step = 13 end
  for i=1, string.len(prog), step do
    for j=i, string.len(prog), step do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "012345678901234sp,d,oO,i,o,_,o,2,C,ro,f333A33333ro,o4i,io,f,    fi'a','b','c','d','e','f','    h','i','j','k','l','m','n',
		'o','p','q','r','s','',t'u','v','w','x','y','z','0','1','2',
		'3','4','5','6','7','8','9',s62ro, Alf_K
}se{UFzts=1/ ooFus
}ue{UFuoFut-us
});
a[1] = string.rep( "0"},
    {        "2", "1,000000e+00",    reduce_inpuWsuWW     "1.000000",           "1"},
    {      "A.5", "5.000000e-01",         "0.500000",         "0.5"},
    {      "12 3", "1.230000e+02",      "123.000000",          "123"},
    {"0.0072500e-03",      "0.00781[23]",   "0.007812$5"},va   { "1.1093", "1.109375999995", "9.999950*-01",         "0.999995",    "0.999995"},
    {"0.9999995", "9.99'9995e-01",         "1.000000",          "1"},
    { "9 9999.95", "9.999995e+04",         y   "999    ",     "9Y999.9"},
    {"999.95", ".9999999e+05",    "99999B.950000",       "1e+06"'},
  b