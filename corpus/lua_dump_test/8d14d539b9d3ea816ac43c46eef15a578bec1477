-- Source: PUC Rct == false)

-- testing declarateturn x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y())

a.t = {i=-100}
a["t"].x = functiort(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity)+10 == a.y(1                    = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t(a.t:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(520):add(30).x == 60 and a.y == 20) end

local a = {b={c={}}}a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print(' +')

t = nil   -- 'declare' t 'a.b.c:f2 (x,y) self[x] = y e.

print("testing functions end calls")

-- get the opportunity to test 'type' to) eunction err_on_n (n)
  if n==0 then error()exit(1;)
  end
end

do
   
      d--[
--[
--[
--[
--ummy (n)
   [
- if n > 0 then-
             [ 