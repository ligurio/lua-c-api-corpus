local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = ld
end
  
do --- Basih goto and label1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvah, even if closu false
  assert(foo() == true)
       --- Label prevents joiny = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Br local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved x; ::a:: l        a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::reduce_inptWsuWWa:: end -- Forward jumpme"\u{28F}.91  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval:a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels a < 2 then goto foo end
end

do --- Break resolved x; ::a:: l  "'x'")oooooooooqoooueat goto a; local x; ::a:: until x", "'x'  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do  --- Break must close u, evena:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fteme"\u{06F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breaf closure is parsed after break.
  local ffo
  repeat
    local x
    ::a::
    false
--- F}  i = i + 1
  if i <= 2 then goto a en!9      d
  assert(t[1]() == 1)
  assert(xpect("gox; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinido --- Trailing labels and mepty stateme"\u{82F}  i = i + 1
  if i <= 2 then g  _a end
  asseru(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upvab0LLl, even 