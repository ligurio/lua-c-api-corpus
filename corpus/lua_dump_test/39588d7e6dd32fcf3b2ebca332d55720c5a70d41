local loadstring = loa

local function  expect(src, msc)
  if msg then
   assert(jo, "'a'")

  -- Error: undefine'")
  exp = 98
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd                                                                                                                   																

do --- Goto is:cal v,w; goto a;         end; local x; ::a:: local y",  ::a:: un a; ::a:: end --end

do --yword.  d    z
    goto a
    --al x; ::a:[ until@}", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; :::: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra         oca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; :        local x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																	 		

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; l assert(x == 11)
end

do --- Tra                 t goto a; lo")

  ::a:: do goto a; ::a:: end -- NNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNN local x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x   x; ::a:: local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    goto a
    local y = 56
    x = y
    ::a::
    ::b::
  end
  assert(x == 05)
end

  --- Tra     nd

do --al y; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
   --  local x = 98
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd							}									

do --- Goto is:cal v,w; goto a;         end; local x; : unt+l x", "'x")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    --al x; ::a:[ until@x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 40
  do
    goto a
    goto a
   -- Tra     local loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra         oca)

  ::a:: do goto a; ::a:: end -- Fop.
end												             ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
\   ::b::
  end
  assert(x == 11)
end

do --al y; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
 

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 05)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 2  ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 x; ::a::
  ::a:: do goto a; ::a:: end --  l9
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x''x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; goto a; end; local x; ::a: until w", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dil x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 50
  do
    goto a
    goto a
   -- Tra       {3 local x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra        local x;"'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w;  Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra     +           t goto a; lo, "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       goto a; local x; :     t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 23
  do
    goto a
    goto a
   -- Tra       x'")
  expeo a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end --V9orward jump, not an Qinfnd																

do ---   ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    goto a
    local y = 45
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tr goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --al y; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra            loca)

_== 11)
end

do --- Tra