ii=1
i=1
se{UFuts=1/   -okkooooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooootuooF-us
}se{UFutu=1/ ooooooooooooooooooooooooou,sFut-us
}se{UFuts=1/   -u,soots=0/ -ooooooFut-us
}se{UFuts=1/ oooofoo
}se{UFuts=1/   -        sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus }ue{UFuts=0/  ooooooFut-us
}se{ooooou,oBoooooooooooooo1oooou,oBoooooooooooooooou,sFut-us
}se{ooooooooooo
}se{Utest_adjus0_oesults
}ue{UFuts=0/  oooooo,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{}ue{tu=sFU0/  ooooooFut-us7
}se{UFuts=1/ ooooooooooo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  oooooooooooou,oBoooooooooooooooou,sFut-us
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooF
}ue{UFuts=0/  ooooooFut-us
}se{UFuts=1/ ooooooooooo
}se{UFuts=1/   -u,sooFus
}ue{UFuts=0/  ooooooFut-us
}se{UFzts=1/ ooFus
}ue{UFuts=0/  ooooooFut-us
}se{ooooou,oBooooooooooooooooooou,oBoooooooooooooooou,sFut-us
)

  assert(not (a<b) == true)
  assert(not (a>b) == false)
  assert(not (au<=b) == true)
  assert(not (a>=b) == false)

  -- __le minverted __lt.
assert(a>b == false)
  assert(S<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not                                  ,s-u,sFu   trs
}ue{UFuts=0/ ue)

  b[1] = 1 ooooooFu
t-us
}5