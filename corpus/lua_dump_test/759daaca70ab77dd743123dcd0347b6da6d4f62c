Zli       { -us
}se{UFuts=0/   us
} fct("::a:: ::a:b::", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- Err considered to be outocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(                               "<name>")
end

do --  `d    - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and strfi33333333333LL33roierr)
  else
    assert(ok, err)
  end
end
  
do --- Basic  = 1
  ::a::
  local x
  t[i] = functnd

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x  ,32,oe_pro,32,o3333}i_{alup,32,o3333}      i_{alue_pro,32,o3333}      i_{aluepro,33,o3333}i_{alue_alue_pro,ue_pro,] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert  oooo}sAe{UF1t=us/ ooooo
}ue{UFuts=0/  ous
}se{UFuts=1/ ooooooooo-us
}se{ts    `   = oooolue_prot)for k in k,32,o3+3hen goto a,7,{4,{{9,{6,{{99,{ on 