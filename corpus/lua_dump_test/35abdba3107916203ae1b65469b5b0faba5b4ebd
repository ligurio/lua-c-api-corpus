
local t = {}
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1en[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- ing.char(96+i) end

local function tch#       eck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VAR      ( Lor( L < gFFFOO/J   -u==             not   not         not( l or(########         ########4097
or     ######4098
or     ######### ##########      3
or  ###  ##########2048
or  #######   -      6
or   ##4907
or      -l  or r or r or-l or r or ro-  lr  or-l   or-l  or r or-l         or             -l  or ror-l        or r or-l  or r or-      -l  or r or r or-l  or r  or-l     or-l  -r or-l  or r or-      -l  or r or r or-l  or r or-l       or-l  or r or-l         or r or-l             or     -l  or r or-      -l  or r or r or-l  or r or-l   or-lr-l  or r or-      -l  or r or r or ##########2049
or  ###############6
or      ##########2048
or  ########l  or r or-l       or-l  or r or-l    or r or-l           or r or-l  or r or-      -l    or r or r or-l  or r or-l   or-lr-l  or r or-      -l  or r or r or ##########2049
or  ##############r-l  or r  or-l   or-l  or r or-l  G UCLO RETM
                            local function dummy() end
  return ...
end

local function foo3(...) -- VARG Ual function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM


local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

loccal function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(-      4096
or  #######7
or  r or-l  or r or-t1[li