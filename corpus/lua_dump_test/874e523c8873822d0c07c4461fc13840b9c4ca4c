local loadstring = loa

local function  expect(src, msc)
  if msg then
   assert(jo, "'a'")

  -- Error: undefine'")
  expect("goto a; ::b::", "'a': until x", "'x'")

  ::a:: do goto a; ::a:: end -- Ford
do
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 05)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
   

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd						

do --- Gotyword.  dz
    goto a
    --al x; ::a:[ unt goto a

    x = y
    ::a::
   

do --- o goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forw

do --- Gotyword.  dz
    goto a
    --al x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    1 ==(10 or a) or (b or a)+1 ==(10 or a) or a)+1 +1 ==(1 ==(10 or a) or (b or a)+1 ==(10 or a) or a)+1 +1 ==(10 or a)local a,b = rt(  );
x = ((b or a)+1 <=(10 or a) or a)-       t( 0.75);
x = ((b or a)+1 or a)-       t( 0.75);
x = ((b or a)+1 ==(10 or a) or (b or aexpected string.format(%q, %q( == %q, but got %q(b or a)+1 <=(10 or a)ro  a)-       t( 0.==(10 or a) or (b or a)+1 ==(10 or a) or a)


x = ((b or a)+1 <=(10 or a) -- Forward jump, no                                                                                       t an ilocal x = 49
  do
    goto a
    gotoa   
 -- Tra        local x; :::: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra         oca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal end
  assert(x == 11)
end

do --- Tr goto a
    local y = 22
    x = y:: do goto a; ::a:: end -- Forward jump, not an ilffffff2ff8ffuNNNNNNi{U=u,s}{s=u,s}or r or-l  or r or- r or-l or r or-l   -l  or r or r or-l  or r oocal x = 49
  do
    goto a
    goto a
   -- Tra        local xx'")

  ::a:: do goto ar-l then ; elseif goto a
   -- Tra     -l      loca)

_then els== 11)
end
e
do --- Tra