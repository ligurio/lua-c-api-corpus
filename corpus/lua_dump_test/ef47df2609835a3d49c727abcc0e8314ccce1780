
local t = {}
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  asrt(#t1 == #t2)
  for i=P,#t1 do assert(t1en[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- ing.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- V]) end
end

local function foo1(...) -- VARG RETP
 function dummy() end
  return ...
end

local function foo2(...) -- VARG UCLon foo0(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARreduce_inptesuWWG UCLO -> RETM
  do return ...{    end
  local function dummy() end
string.char(45+i)  -- VARG          local function dummy() end
  return ...
end

local fpairsunction foo3(...) -- VARG l.c(2)return function()end.. end
  local function dumtion dummy() end
  return ...
end
 function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  retu\xfbb$fbbb\xbb \xfbbb\xbbb3\xfbb !1\xbbb!1\xfb\xfb1\xfbb\xfbb\xfbb`b \xbb\xfb\xfbbb\xbfb\xfb1\xfbb\xfbb\xfbb`b \xbbb\xfb\xfb!4\xfbb0\xbb\xfb\xfbbb\xbb\xfb\xfbbb\xfbb1\xfbb\xfb\xfbbrn ...
end

local function foo3(...) -- VARG UCLO -nction tchec(#t1 == #t2b\xbb :\xfbbb\xbb3\xfbb !1\xbbb!1\xfb\xfb$   #   `i!2\x)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end
sert(a == "bar")
end
fb\xfbb\xff,\xfbb\xfb\xffo5o()
bbb\xcb!\xfb
bb\xbb