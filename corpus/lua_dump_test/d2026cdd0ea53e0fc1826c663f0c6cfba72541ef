-- Source: t[3] ==ction a.b.c.f1 (x) return x+1 end
function a.b.c:f4 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity to1)+10 == a.y); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
function a:x (x) return x+self.i end
function a.y (x) return x+self     end

assert(a:x(1)(2,3) == -95)

do
  local a = {x=0}
  funct.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 72)
end

local ion a.b.c:f2 (x,y) self[x] = y e.

print("testing functions[    calls")

-- get th (x) return x+self.i end
ction dummy (n)
    ilf[x] = y end
assert(a.    b.c.f1(4) == 5)
a.broadd(20):add(30).x (x) return x+1 end
funcal,i