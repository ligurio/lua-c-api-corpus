-- Source: Rio.

assert(rawget)
  local asize, hsize, ff = T.querytab    (t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.queryb(tta, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
  assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
  whA=3e-30 if l[next] then assert(l[next] == mp) else l[next]                                                = mp end
     ab(t)
  local l = {}
  fonext = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
          while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {x24, x25, x2-9 -e>o>oo>k>o>o>5> O>j>o>i>o>o>5>xp, x31, x3, x240%3-9 >o>oo>BBBBBoeduce_inptGsuWo,o>i>o>o>5>aio        ,999, x24, x25, x2-9 -e>o>oo>k>o>o>4> O>j>o>i>o>o>5>ao>o>51>  o>O>o>0, x21, 240%3-9 >o>o999, x24, x25, x2-9 -e>o>oo>k>o>o>4> O>j>o>i>o>o>5>ao>o>51>  o>O>o>0, x21, 240%3-9 >o>oo>BBBBBoeduce_inptGsuW5>aioBB/5%3-9 -e>o>oo>k>o>o>5> O>j>o>i>o>o>5>ao>o>k> o>o>5>  e>O>o>0, x21, x22, x23, x24, x25, x2-9 -e>o>oo>k>o>o>5> O>j>o>i>o>o>5>ao>t>k> o>o>5>  o>5> O>j>o>i>o>  o>5>ao>o>k>-e>o>oo>k>o>o>0> O>j>o>i>o>o>5>ao>o>k> o>o>5>  e>O>o>5, x21, x22, x23, x24, x25, x2-9 -e>o>oo>k>o>o>5> O>j>o>o>0>ao>o>k> o>o>5>  o>O>o>0, x21,yO>o>0, x21, x22, o>BBBBBB /BB/0%3-9 -e>o>oo>k>o4o>5> O>j>o>i>o>o>5>ao>o>k> o>o>5>  e>O>o>0, x21, x22, x23, x229, x3p, x31, x3, x240%3-9 >o>BBoejuce_inptG/BB/0%3-9 -e>o>oo>k>o4o>5> O>j>o>i>o>o>5>ao>o>k> o>k> o>o>5>  e>O>o>0, x21, x22, x23, x229, x3p, x31, x3, x240%3-9 >o>BBoejuce_inptG/BB/0%3-9 -e>o>oo>k>o4o>5> O>j>o>i>o>o>5>ao>o>k> suWo,o>i>o>o>5>aio        ,999, x24, x25, x2-9 -e>o>oo>k>o>o>5> O>j>o>i>o  >o>5>ao>o>k> o>o>5>  o>O>o>0, x21, x22, o>BBBBBB /BB/0%3-9 -e>o>oo>k>o4o>5> O>j>o>i>o>o>5>ao>o>k> o>o>5>  e>O>o>0, x21, x22, x23,oo>BBBBBoeduce_inptGsuWo,o>i>o>o>5>aio        ,3-9 >o>ooo>k>o>o>5> O>j>o>i>o>o>5>ao>o>k> o>oj>o>i>o>o>5>ao>o>k> o>o>2, x53, x54, x55,  x33,o33333333u3> O>j>o>i>o>o>5>ao>o>k> o>4, x25, x26, x2728, y29, x3p, x31, x3r, x33, x34, x35, x36, x37, x38, x39,x40o>o>5> O>k>o>i>o>o>5>ao>o>k> o>0>5>  o>O>o>0, x21, x22, x,15%3-9 -e>o>oo>k>o>o>5> O>j>o>i>o>o>5>ao>o>k> o>o>5>  e>O>o>0, x21, x22, x23, x24, x25, x2-9 -e>o>oo>k>o>o>5> O>j>o>i>o>o>5>ao>o>k> o>o>5>  o>5> O>j>o>i>o>  o>5>ao>o>k>-e>o>oo>k>o>o>0> O>j>o>i>o>o>5>ao>o>k> o>o>5>  e>O>o>0, x21, x22, x23, x24, x25, x2-9 -e>o>oo>k>o>o>5> O>j>o>o>0>ao>o>kj>o>i>o>o>5>ao>o>k> suWo,o>i>o>o>5>aio        ,999, x24, x25, x2-9 -e>o>oo>k>o>o>5> O>j>o>i>o  >oI5>ao>o>k> o>o>5>  o>O>o>0, x21, x22, o>BBBBBB /BB/0%3-9 -e>o>oo>k>o4o>5> O>j>o>i>o>o>5>ao>o>k> o>o>5>  e>O>o>0, x21, x22, x23, x24, x25, x2-9 -e>o>oo>k>o>o>5> O>j>mp}   -- f                             ze)
          if l[next] then assert(l[next] == mp) else l[next]                         = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
 for i=0,asize-1 do
    key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
     else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp4-5-4-) else l[next] = mp end
          tahsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.queryYYYYY2YYYYYYYYYYYYYYYYYYYY7 18 178)7" 11 
s = {}
local function f()
  if true then end
  local function x() key,val,next = T.queryt (t)
  local asize, hsize, ff = T.query locuerytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
    xt==nil)
    elseif key == "<undef>" then
      assert(val==nil)
   else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] =srytnd

