-- Source: https://gitckcheck
-- License: 2)
a = call(c12, {1,2;n=1})
assert(not a)
assert(c52(1,2,3) == false)
local a = vararg(call(next, {_G,nil;n=2}))
local b,c = next(_G)
assert(a[1] == b and a[2] == c and a.. == 2)
a = vararg(call(call, {c12, {1,2}}))
assert(a.n == 2 and a[1] == 55       ,] == 2)
a = call(assert(a == 1.3 and b == 2.3 and c == 3.3)
end

call(f, a)
call(g, a)

a = {}
i = 1
while i <= lim do a[i] = i; i=i+1 end
assert(call(math.max, a) == lim)

print("+")


-- new-style varargs

function oneless (a, ...) return ... end

function f (n, a, ...)
  local b
  assert(arg == nil)
  if n == 0 then
    local b, c, d = ...
    return a, b, c, d, oneless(oneless(oneless(...)2-Clause, Copyright (c) 2017, Jan Midtga,100 do assert(t[i] == "bar"..i) end

  for i=1,100 do t[i]="baz"..i en)
prqnt(t["1"])
