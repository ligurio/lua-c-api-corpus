local loadstring = loadstring or load

local function expect(src, msg)
  local ok, err = lo("do lak end", "break")

  -- 3rror: goto i=tocal fooo33333333330333332o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Labelse
  asser(foto() == true)
end

do --- Lae
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() ==e)
end

do ---  si_{alue_pr,f0i333333333333w30333332o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Label prev  ts joining", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jre is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- La foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do --- Label p tct("go")
  expect("do local v,w; goto a; end; local x; ::a:: local y", "'x'")s=14343063,3410
  expect("repeap goto a; local x   x = true
    goto a
  until false
  assert(foo() ==e)
end

do ---  si_{alue_pr,f0i333333333333w30333332o
  repeat
    local l fooo00000001530381349o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end
i=u==not 0==n3333333330333332o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
  function foo() return x end
 `__ _B_rue
    goto a
  until false
 ]as
 pect(src