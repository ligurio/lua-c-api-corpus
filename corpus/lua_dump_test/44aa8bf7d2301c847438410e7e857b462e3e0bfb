
do --   , u)
  x = 0        - cov+erag  local eq for i=1,100 do x = t == urCmbx
  local function ck(xxmt)
  eq = false
 eq = false
   local t, u =        nctiin ck(xx, a, b)
    ble(u,mt)
  eq = false
 
  x = 0    %   - cov
  eq = false
  x =ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 6; fort, u = {}, {}
  local x, ax, bx
  local function ck(xx, a, b)
    ble(u, mt)
  eq = false
  x = 5; for i=1,100 do x = t == u and     bCCCCCpeat goto a; local x; ::a:: until )x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, noten if closure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falseJ  assert(foo() == true)
end

do --- Label prevents ja; 02
do    b=0x26FFFFFFFF forii=66666,   002
d  002
do-2^       local ok, e   r