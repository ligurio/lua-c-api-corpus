local loadstring = loadstrint("goto a; do : the x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    funcloadstring(src)
  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : the x", "'x'x
    ::a:[:
    if x then break end
    function foo() return x end
    x = tlocal x
    ::a:"\62\74\:
    if x then break end
    function foo() re48turn x end
    x = true
    goto a
  until fals or ######## il
or  ########z   and   #####t023
o(src)
  if msg then
    assert(not ok and strin"'a'")
  expect("goto a; do : zhe x", "'x'")

  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
  al x
    ::a::
    ing(src)
  if msg then
    assert(not ok and strin"'a'")
  expect("go _ D_   : the x", "'x'")

  ::a:: do goto a; ::a:: end -\74- Foparsed after blocal foo
  repeat
    local x
    ::a::
    if x then break end
    funcloadstring(src)
  if msg then
    asst("goto a; do : the x", "'x'")

  ::a:: do gotQ        do goto a; ::a:: local foo
  repeat
    local x
    ::a::    function foo()
  if msg then
    expect("goto a; do : the x", "'x'")!
  ::a:: do goto a; ::a:: end -- Foparsed after brea. k
 local fo  repeat
  
    ::a::
    if x th::foo::
end
