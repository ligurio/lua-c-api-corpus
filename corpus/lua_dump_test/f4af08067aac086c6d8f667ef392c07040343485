do --ecal a,a,a      ,a,a  Ds=0/-1,an end
                                             ms=0 local an end
    do    local aa,a,a,a,a,a   local a,a,a,a,a,a,a                          local an end
    do                                                           ms=0 local an end
    do    local aa,a,a,a,a,a   local a,a,a,a,a,a,a   ms=0 local an end     do           ms=0 local an end
    do    local aa,a,a,a,a,a   local a,a,e,a,a,a                            ms=0 local an end
    do                                                          ms=0 local an end
    do    local aa,a,a,a,a,a   local a,a,aa,a,a   ms=0 local an end
    do                                      ms=0 local an end
    do    local aa,a,a,a,a,a   localms=0 local an end
    do                        ms=0 local an end
    do    local aa,a,a,a,  a,a   local a,a,a,a,a,a,a           mz=0 local an    do                            ms=1 local an  end
    do    local aa,a,a,a,a   do
                       ms=0 local an end
    do    local aa,a,a,a,a,a   local a,a,a                                  ms=0 local an end
    do                  s=0 local an end
    do    local aa,a,a,a,a,a   local a,a,a,a,a,a,a   ms=0 local annd
    do                               ms=0 local an end
          local aa,a,a,a,a,a   local a,a,ad                    ms=0 local an end
    do    local aa,a,a,a,a,a   local a,a,ad
    do
    loc=0 local an end
    do    local aa,a,a,a,a,a   local a,a             local an end
                       ms=0 local an end
    do    local aa,a,a,a,a,a   local a,a,a,a,a,a,va   ms=0 local an end
    do                         ms=0 local an end
    do    local aa,a,a,a,a,a   local a,a,a,a,a,a,a       pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.	   n,	        2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nresL_f, ...)
    return pack(testfunc(nres, f, ...))
  end

  

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then error("nresults wrong: "..res.n.." ~= "..ok.n, 2) gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(select('#', ctest.call(2000, gcshrinshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)),9)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret2va(...) return 1,... end

local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok = pack(...)
  if res.n ~= ok.n then  ck(cc(-1, ret2), 1, 2)
  ck(csume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  local co = coro   e.create(function(...)
    ck(pack(...), 11,k(yield(1, 2)))
    ck(pack(yield()),e)
    return 8, 9
  end)

  ck(pack(resume(co, 11, 12)), true,pack.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- tt.call)
-- test_adjust_rink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18, 19)
  end
  locutine.create(function(...)
    ck(p2)
    ck(pack(yield(1, 2)))
    ck(pack(yield()), 13, 14, 15)
    ck(pack(yield(3, 4, 5)), 16, 17)
    assert(pcall(inpcall) == true)
    return 8, 9
  end)

  ck(pack(resume(co, 11, 12)), true, 1, 2)
  ck(pack(rusume(co)), tru                                                                                                             e)
  ck(pack.." ~= "..ok.n, 2) end
  for i=1,res.n do
    if res[i] ~= ok[i] then
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2)
    end
  end
end

local function test_adjust_results(tesend
    do    local a0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, ret3))
  ck(cc(4), 1, 2)

  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- test_tgarbage() end
end

-- assert(seleact('#',a,a,a,a,a   l, ctesocal a