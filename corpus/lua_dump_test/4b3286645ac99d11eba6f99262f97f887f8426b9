-- Source: PUC Rct == false)

-- testing declarat == 'a')
f(1,2,   -- this one too
      3,4)
assert(t[1] == 1 and t[2] == 2 and t[3] == 3 and t[4] == 'a')

fuelf = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y())

a.t = {i=-100}
a["t"].x = functiorend
function a.b.c:f4 (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity to1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

sert(a.t:x(2,3) == -95)

do
  local a = {x=0}
 a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)lf[x] = y end
assert(a.b.c.f1(4) == 5)
function a.b.c.f1 (x) return x+2 end
function a.b.c:f2 (x,y) self[x] = y e.

print("testing functions qnd calls")

-- get the opprt(typ) a{   t) == type(print))
f = nil
function f (x) return a:x (            \___          x=0}
  function a:add (x)4 self.x4, a.y = self.x+x, 2