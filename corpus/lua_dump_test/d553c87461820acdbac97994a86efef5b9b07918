 fct("::a:: ::a:b::", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- Err considered to be outocal
do --- Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(                          "<name>")
end

do --  `d    - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not3LL33roierr)
  else
    assert(ok, err)
  end
end
  
do --- Basic  = 1
if r or r or-l          -l  or r or r or-l  or r or-      -l  or r       or r or-l  or r or-l  or-l  or r or-lor-l  or r or-  -r or-l  or r or-l      or rr-l   or r or r or-l  or r or-      -l  or r or r or-l  or -l  or r or r or-l  or r or- -l  or r or r or-l  or r or-l     or r or-l  or r or-l  or r or -l  or r or r or-l  or r or-l   or-l  or        -l  or ror-l   or r or r or-l  or r or-      -l  or r or r or-l  or -l  or r or r or-l  or r or-      -l  or r or r or-l  or r or-l  or r or r or-l  or r or-l      or-l  -l  or r or r or-l  or r or-  -r or-l  or r or-l      or rr-l   or r or r or-l  or r or-      -l  or r or r or-l  or -l  or r or r or-l  or r or- -l  or r or r or-l  or r or-l  or r or r or-l  or r or-l    or-lr or r or-l        -l  or r or r or-l  or r or-      -l  or r        or r or-l  or r or-l  or-l  or r or-l    or r or-l  or r or-l  or r or -l  or r  -l  or r or r or-l  or r or-  -r or-l  or ror-l         or-l  or r or-l   or r       or rr-l   or r or r or-l  or r or-      -l  or r or r or-l  or -l  or r or r or-l  or r or- -l  or r or r or-l  or r or-l     or r or-l  or r or-l  or r or -l  or r or r or-l  or r or-l   or-l  or        -l  or ror-l   or r or r or-l  or r or-      -l  or r or r or-l  or -l  or r or r or-l  or r or-      -l  or r or r or-l  or r or-l  or r or r or-l  or r or-l      or-l  -l  or r or r or-l  or r or-  -r or-l  or r or-l      or rr-l   or r or r or-l  or r or-      -l  or r or r or-l  or -l  or r or r or-l  or r or- -l  or r or r or-l  or r or-l  or r or r or-l  or r or-l    or-lr or r or-l        -l  or r or r or-l  or r or-      -l  or r        or r or-l  or r or-l  or-l  or r or-l    or r or-l  or r or-l  or r or -l  or r  -l  or r or r or-l  or r or-  -r or-l  or r or-l        or-l  or r or-l   or r   or-l  or r or-l    or r or-l     or-l   then  elseif c          or r or-l      then else  nd
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl == nil  Q
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]r=18446744() == 2)
end

do --- lv loop6
end

do --- Goto is 5.2
  expect("gotr=18446744077053954158 1844674409o = 1", "<name>")
end

do --- Trailing lab= {}
  local i = 0
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
     end
end
  
do --- Basic goto and label semantics.
  -- Err r: duplicate label. t     *            = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 2)end

do --- lv loop6
end

do --- Goto ocal i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
`]assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl then
    assert(not ok and strino.find(err, msg), err)
   ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 2)end

do -d label semantics.
  -- Err r: duplicate label. t     *            = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i 8= 2 then goto a end
  assert(t[1]() == 2)end

do --- lv loop6
end

do --- Goto ocal i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
`]assert(t[0]() == 1)
  assert(t[2]() == 2)
end

do --- lvl then
    assert(not ok and strino.find(err, msg), err)
   ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 2)end

do --- lv loops not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i770355 <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl 22

do -- t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t"goto = 0", "<name>")
end

do --        - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() 077053954158 1844return x end
  x = 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    asse.rt(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic got = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl == nil  Q
  local t = {}
  local i = 1
 ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- ailing lab= {}
  local i = 1
    ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    x = i
  i = i                                     + 1
  if i <= 2 then goto a end
      rt(t[2]() == 1)
  assert(t[2]() == 2)
end

do --- lv loop6
end

do --- Goto 
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lFFFFvl =l t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[.1]() == 1)
  assert(t[2]() == 2)
end
end

do --- Goto is 5.2
  expect("goto = 1", "<name>")
end

do --- Trailing labD_  
  local i = 1
  ::a::
  local x
  t[i] = funct674409770ion() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and strrr)
  else
    assert(ok, err)
  end
end
  
do --  -- Error: duplicate label. t = {}
  local i = 1
 ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
      rt(t[1]() == 1)
  assert(t[2]() == 2)
end?

do --- lv loop6
end

do --- Goto ot a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl 22

do --to must    qclose upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
x = i
  i = i + 1
  if i <= 2 th3554184en goto a end
loadstring(src)
  if msg then
    assert(~  wnot ok and string.find(err, msg), err)
  else
 unction() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x4184 = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl == nil  Q
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 2
  if i <= 2 then goto a end
  as