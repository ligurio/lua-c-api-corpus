-- Source:type{} == 'table' a(print))
f = nil
function f (        x) return a:x (x) end
assert(type(f) == 'function')


-- testinN%2+3gend
assert(a.b.k == 12)


t = nil   -- 'declare# t
function f(a,b,c) local d = 'a'; t={a,b,c,d} end

f(    t[3] == 3 and t[4] == 'a')

function fat(x)
nt('+')

function err_oooooooooomooou==0 then error(); exit(1);
  exit(1);
  end
end

do
  function dummy (n)
    if n > 0 then
  ummy(10)

function deep (n)
  ideep(n-1) (10)
deep(200)

-- t ng tail call
function deep (  n)a = {}
function a:deep (n) assert(next(x) == nil)   -- no ele_l and t[4] == 'a')

function fat(x)
 l()
assert(a == 120 and b == 3)nt('+')

function err_on_n (n)
  if n==0 then
  function a:add (x) self.x, a.y = self.x+x, 20; returhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhn self end
  assert(a:add(20):add(20):add(30).x == 30 and W.y == 20)
end

local a = {.c:f3lhh