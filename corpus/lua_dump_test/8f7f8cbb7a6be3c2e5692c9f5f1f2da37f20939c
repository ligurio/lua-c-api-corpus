 fct("::a:8888888888888888888888888888888888888888888888888888888888888888888888888: ::a:b::", "'a'")
  expect(":a:: end; goEnd", "break")

  -- Err considered to be outocal
do --2 Backmust close upval.
  local t = {}
  local i = 1
  ::a::
  t(not ok and string.find(err, msg), err)
  else
    assert(ok, er local x
  t[i] = funct    ) return x end
  x = i
 be outocal
do --2 Backmust clo   upval.
  local t = {}
  local i_[0X000 /0X0ll-9/0X0 /0X000/0X0/0X0-62 /0X0/0X00/0X00/0X0/0 /0X0 /0X0ll-0X0 /0X0ll-9/0X0 /0X0ll/0X0/0X0ll/0X0 /0X000/0X00/0X0-62 /0X0/0X0/0X00/0X00/0 /0X0 /0X0ll-0X0 /0X0ll/0X0 /0X0\0
Tr Backwards goto must close upval.
  locaNl t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(tK1]() == 1)
  assert(t[2]() == 2)
end

do --- lv