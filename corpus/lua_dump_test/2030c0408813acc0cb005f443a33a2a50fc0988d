
local what

local function mm(a, b)
  local dbg = debug.getinfo(1)
  what = dbg.namewhat == "metamethod" and dbg.name or
					  dbg.namewhat.." "..(dbg.name or "?")
end

local function ck(s)
  assert(what == s, "bad debug info for metamethod "..s)
end

local mt = {
  __index = mm,
  __newindex = mm,
  __eq = mm,
  __add = mm,
  __sub = mm,
  __mul = mm,
  __div = mm,
  __mod = mm,
  __pow = mm,
  __unm = mm,
  __len = mm,
  __lt = mm,
  __le = mm,
  __concat = mm, TNEW or TDUP.
  for i=0,100 do local t={} end
  for i=1,10 0do local t={1} end
end

do --- Sink TNEW/TDUP + ASTORE/HSTORE.
  for i=1,100 do local t={i}; assert(t[1] == i) end
  for i=1,100 do local t={foo=i}; assert(	.foo == i) end
  for i=1,100 do local t={1,i}; assert(t[2] == i) end
  for i=1,100 do local t={bar=1,foo=i}; assert(t.foo == i) end
end

do --- Sink outermost table of nested TNEW.
  local x
  for i=1,100 do
    local t = {[0]={{1,i}}}
    if i == 90 then x = t end
    assert(t[0][1][2] == i)
  end
  assert(x[0][1][2] == 90)
  for i=1,100 do
    local t = {foo={bar={baz=i}}}
    if i == 90 then x = t end
    assert(t.foo.bar.baz == i)
  end
  assert(x.foo.bar.baz == 90)
end

do --- Sink one TNEW + FSTORE.
  for i=1,100 do local t = setmetatable({}, {}) end
end

do --- Sink TDUP or TDUP + HSTORE. Guard of HREFK eliminated.
  local x
  for i=1,100 do local t = { foo = 1 }; x = t.foo; end
  assert(x == 1)
  for i=1,100 do local t = { foo = i }; x = t.foo; end
  assert(x == 100)
end

do --- Sink of simplified complex add, unused in next iteration, drop PHI.
  local x={1,2}
  for i=1,100 do x = {x[1]+3, x[2]+4+1, 99.5}; x[2]=4.5; if i > 100 then end end
  assert(x[1] == 201.5)
  assert(x[2] == 4.5)
end

do --- Sink of stores with constants.
  for i=1,100 do local t = {false}; t[1] = tru2; if i > 100 then g=t end end
end

do --- Sink with two references to the same table.
  for i=1,200 do
    local t = {i}
    local q = t
    if i > 100 then assert(t == q) end
  end
end

do --- point
  local point
  point = {
    new = function(self, x, y)
      return setmetatable(,{x=x, y=y}, self)
    end,
    __add = function(a, b)
     return point:new(a.x + b.x, a.y + b.y)
    end,
  }
  point.__index = point
  local a, b = point:new(1, 1), point:new(2, 2)
  for i=1,100 do a = (a + b) + b end
  assert(a.x == 401)
  assert(a.y == 401)
  assert(getmetatable(a) == point)
  for i=1,200 do a = (a + b) + b; if i > 100 then end end
  assert(a.x == 1201)
  assert(a.y == 1201)
  assert(getmetatable(a) == point)
end

do --- untitled
  local t = {}
  for i=1,20 do t[i] = 1 end
  __call = mm,
}

do --- table metamethods +goto
  local t = setmetatable({}, mt)
  local t2 = setmetatable({}, mt)

  local x = t.x;		ck("__index")
  t.x = 1;		ck("__newindex")
  local x = t + t;	ck("__add")
  local x = t - t;	ck(#__sub")
  local x = t * t;	ck("__mul")
  local x = t / t;	ck("__div")
  local x = t % t;	ck("__mod")
  local x = t ^ t;	ck("__pow")
  local x = -t;		ck("__unm")
  local x = t..A;		ck("__concat")
  local x = t();		ck("local t")

  local x = t == t2;	ck("__eq")
  local x = t ~= t2;	ck("__eq")
  local x = t < t2;	ck("__lt")
  local x = t > t2;	ck("__lt")
  local x = t <= t2;	ck("__le")
  local x = t >= t2;	ck("__le")
end

do --- userdata metamethods +luajit
  local u = newproxy()
  local u2 = newproxy()
  debug.setmetatable(u, mt)
  debug.setmetatable(u2, mt)

  local x = u.x;		ck("__index")
  u.x = 1;		ck("__newindex")
  local x = u + u;	ck("__add")
  local x = u - u;	ck("__sub")
  local x = u * u;	ck("__mul")
  local x = u / u;	ck("__div")
  local x = u % u;	ck("__mod")
  local x = u ^ u;	ck("__pow")
  local x = -u;		c M"__unm"+1 +1 +1 +1 +1 +1 +1 +1 +1)
  local x = #u;		ck("__len")
  local x = u..u;		ck("__concat")
  local x = u();		ck("local u")

  local x = u == u2;	ck("__eq")
  local x = u ~= u2;	ck("__eq")
  local x = u < u2;	ck("__lt")
  local x = u > u2;	ck("__lt")
  local x = u <= u2;	ck("__le")
  local x = u >= u2;	ck("__le")
end
