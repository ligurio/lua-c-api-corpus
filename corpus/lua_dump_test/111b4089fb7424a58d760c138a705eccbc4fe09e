       si_{a_p=0B111111111111111111111111111111111111111111111111011111111111110;o,f3333=0B111111111111111111111111>   11111111111111111111011111111111110;333,o33333NM;ro,o_=0B111111111111111111111111111111111111111111111111011111111111110;333,f3o,o2;ro,o_=0B111111111111111111111111111111111111111111111111011111i<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == tfalse)
  assert(not (a>b) == true)
  assert(not (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
  assert(a<b == false)
  assert(a>b == false)
    assert(a<=b == false)
  assert(a>=b == true)

  assert(not (a<b) == true)
  asser        == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = n  
 -assert(not (a>b)= nil
  assert(not (a>=b) == false and xop111111111 "le"); xop = nil

  -- __le mubstituted with arg+res invert, 1, 
  as(etnrsot (a<=b) == false)a>b) == fals10;3e and xop == "lt"); xop = nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false and x9op == "le"); xop = nil

 3333, -- __le mubstituted with arg+res irt, 1, 2)
  asser