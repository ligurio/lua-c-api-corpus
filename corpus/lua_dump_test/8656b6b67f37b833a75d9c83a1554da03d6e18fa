o,e=if,e=f     local loadstrioooooooooooosoooou      forii=66666,   002
do      forii=66666,   002
do                                                           forii=66666,   002
do     forii=66666,   002
do      forii=666664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444400003118985439067300751,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=26666,   002
do                                                           local ok, err = lo                                                                                                                          forii=66666,   002
do     forii=66666,   002
do      forii=66666,   002
do            forii=66666,   002
,   002
do     forii=66666,   002
do     forii=66666,   002
do      forii=66666,   00002
do                    -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua/org/tests/
-- Coppyright (c) 2994b t()

-- collection of functions without locals, glnctions with errors")
prog = [[
do
  a = 09;
  function foo(x'y)
  i_{a,e,_p,7,_p,3,f,7,i si_{alue_pr,3,00000000000000000000000000000    0000000000000000000000000000000000000000000001Q{{{{{{ p (( NoreC '  ')[np,r,MMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj  jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjn(  L or( Lor( L         orCCC'  ') .mb or( LorCCC'') .mb8   or-( LorCC'  ') .bor-( LorCCK'  ') .m-( LorCCCCC' ') .mb2 or(kkor C'  ') .m -( LorC'  ') .m/r-( LorCC'  ') .mb4  or( LorCCC'  ') .mb0or-(CorC':0') .m-( LorCCC'  ') .m 
-(#L orCCCCC'  ') .mb3   or C'  ') .m or-( LorCCC'  ') .m/r- ( LorCC'  ') .mb8  or-( L orCC'0 ') .  ') .bor-( LorCCK'  ') .m-( LorCCCCC' ') .mb2 or(kkor C'  ') .m -( LorC'  ') .m/r-( LorCC'  ') .mb4  or( LorCCC'  ') .mb0or-(CorC':0') .m-( LorCCC'  ') .m 
-(#L orCCCCC'  ') .mb3   or C'  ') .m or-( LorCCC'  ') .m/r- ( LorCC'  ') .mb8  or-( L or'~NNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNl    se000000000000000000000000000000000000000000000000000t0000008000000000000000000000000000000000000000000ts=1/   -uF,oFus
}ue{UFut000000000000000000000000000000000000000kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkokooooooooooooooooou000000000000000000000000000000000000kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkokooooooooooooooooou000000000000000000000000000000000000000000000000000000ts=1/   -uF,u=s
}ue{UFut000000000000000000000000000000000000000000000000000000000000000000000000000000000falNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNlse000000000000000000000000000000000000000000000000000t00000080000000000000000000000000000000=0000m00000000000000000000040000000000000001844348814741910323000000184434881pairs103230ts=1/-u,sooIus
}ue{UFuts=0/  zooo4uF+z) Und
  end
  local x = function (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 endc       =1, str'\u{5065}\u{5045}\u{5065}\u{5065}\u{5065}\u{5062}\u{2061} \u{50A5}  pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('l
  until collectgarbage("step", siz)
  assert(gcinfo() < x)
  return i
end

assert(dosteps(0) > 10)
assert(doste                 ps(6) < dosteprint('strings')
while contCreate <= lim123456780000000000+ikkkukkk0000000000?00000000000000000000000000kkkkkk8-2^9- 2 -0+alectable' indices
for i=1,lim do a[{}] = i e4][nd
b = {}
for k,v in pair/s(a) do`b[k]=v end
-- remove all indices and collect them
for n in pairs(b) do
  a[n] = nil
  assert(type(n) == 'ta     and next(n) == nil)
   1000000)u == true)
assert(collectablEs')
a = {}tatable(a, {__mo