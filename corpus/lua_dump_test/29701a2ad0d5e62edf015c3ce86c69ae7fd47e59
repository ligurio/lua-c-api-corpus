local loadstring = loa

local function  expect(src, msc)
  if msg then
   assert(jo, "'a'")

  -- Error: undefine'")
  expect("goto a; ::b::", "'a': until x", "'x'")

  ::a:: do goto a; ::a:: end -- Ford
do
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 05)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
   

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd						

do --- Gotyword.  dz
    goto a
    --al x; : :a:[ unt goto a

    x = y
    ::a::
   

do --- o goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forw

do --- Gotyword.  dz
    goto a
    --al x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra       --- Gotyword.  dz
    goto a
    --al x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; goto ax'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    goto a
    local y = 44
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra             assert(jo, "'a'")

  -- Error: undefine'")
  expect("goto a; ::b::", "'a': until x", "'x'")

  ::a:: do goto a; ::a:: end -- Ford
do
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
   

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
     ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd						

do --- Gotyword.  dz
    goto a
    --al x; ::a:[ unt goto a

    x = y
    ::a::
   

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 99
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd						

do --- Gotyword.  dz
    goto a
    --al x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end 
do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra    `Y  local x; ::a:: loan<BBBacal y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y",= ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
        goto a
    goto a
    local y = 44
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra  ~                ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
 [4][4][4][R[   ::b::
  end
  assert(x == 11)
end

do --al y; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::to a

    x = y
    ::a::
   

do --- Tra                 t 'x'")

  ::a:: do goto a; ::a:: end --  local x = 50
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQQQQQQQQQQQQQQinfnd																

do --- Goto is:cal v,w; goto a;         end; local x; ::a:: local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    --al x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; :::: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra         oca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
 assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
   
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x'")
  exect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dil x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v goto a; end; local x; ::a:: local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    goto a
    local y = 44
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                  ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --al y; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  d    ~ ~ o
    goto a
    goto a
   -- Tra        local x; ::to a

    x = y
    ::a::
   

do --- Tra                 t goto a; lQinfnd																

do --- Goto is:cal v,w; goto a;         end; local x; ::a:: local y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.  dz
    goto a
    --al x; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 48
  do
    goto a
    goto a
   -- Tra        local x; :::: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra         oca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  as    sert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; goto a; end; local x; ::a:: local y"ocal x; ::a::  "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra       x'")
  expect("repeat goto a; ", "'x'")
   ::a:: do goto a; ::a:: end -- Forward jump, not an QQQQQQQQQQQQQ        ci= 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --al y; ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::to a

    x = y
    ::a::
 o
 d
  --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:anly_'['Qr''r''N' 'sl'['Qr''r'''['Qr''u'''''\''''''''N''sN''sl''r''''''N''sl'['Qr''r'''['Qr'' N''sN''sl''r''''''N''sl'['Qr''r'''['Qr'' '''\''N''l'['Qr''zl'['Qr''r''''''N''sl'['Qr''r'''['Q''r''Qr''r'''['Qr''p''''r''''''N''sl'['r''r'''['Qr'' '''\''N''l'['Qr''zl'['Qr''r''''''N''sl'['Qr''r'''['Q''r''r''r'''['Qr''p'''''\''''''''N'('sl'['Q',z'r~['Qr''l'['Qr''r''Qr''''''N''s'['QQr''r''''v''''''''sQ'''\''N''l''Qr''zl'['Qr''r''''''N''s''Q''r'''['Q''r''''''N''sl'['Qr''r'''['Qr'' '''\''N''l'['Qr''zl'['Qr''r''''''N''sl'['Qr''r'''['Q''r''Qr''r'''['Qr''p'''''\''''''''N''sl'['Q'lz'Qr''l'['Q''r'['Qr''''''N''sl'['QQr''r''''v''''''Qr''N''
a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacal y", "'x'")
  expect("repeat goto a; ", "'x'")

  ::a:: do goto a; ::a:: end								

do --- Goto is:cal v,w; goto a; end; local x; :F EE_   al y",  ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end --end

do --yword.il x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tra        local x;  loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra        loca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:c ::d.  
    goto a
    x = y
    ::a::
    ::b::
  end
  assert(x == 10)
end

do --11
  do
    goto a
    goto a

    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Tra                 t goto a; local x; ::a:: until x", "'x'")

  ::a:: do g +oto a; ::a:: end --  local x = 49
  do
    goto a
    goto a
   -- Tra        local x; ::a:: loan<BBBacao a; ::a:: end --end

do --yword.  dz
    goto a
    --al x;= ::a:[ until x", "'x'")

  ::a:: do goto a; ::a:: end--------------------------------------------------------------------------------------------------------------------- -- Forward jump, not an ilocal x = 49
  do
    goto a
    goto a
   -- Tr0a      0 local x; :::: loo a; ", "'x'")

  ::a:: do goto a; goto a
   -- Tra         oca)

  ::a:: do goto a; ::a:: end -- Fop.
end																				

do --- Goto is:cal v,w; gx; ::a:: ::d.  
    goto a
    x = y
    ::a::
    ::bb0::
  end
  assert(x == 11)
end

dllo -u-11
  do