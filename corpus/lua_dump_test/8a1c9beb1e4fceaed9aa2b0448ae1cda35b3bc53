 fct("::a:: ::a:b::", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- Err considered to be outocal
do --- Back:::b::", "'a'")
  expect("do ::a:: end; goEnd", "break")

  -- Err considered to be outocal x = 22

do --- Backwards goto must nction() return x end
  x = i
  i = i + 1   if i             <= 2 then goto a endert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
 on() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic got = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)end

do --- lv loop6
end

do --- Goto is not a kcal t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl == nil  Q
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end
 do --- lv loop6
end

do --- Goto is 5.2
  expect("goto = 1", "<name>")
end

do --- Trailing lab= {}
  local i = 0
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1    
  if i <= 2 then goto a end
loadstring(src)
  if msg then
     end
end
  
do --- Basic goto and labe  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lvl 22

do -- t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a
do --- lv looct("goto = 0", "<name>")
end

do --        - Trailing lab= {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic got = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i [i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, er*r)
  end
end
  
do --- Basic got i = 0
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i                                     + 1
  if i <= 2 then goto a end
      rt(t[2]() == 1)
  assert(t[2]() == 2)
end

do --- lv loop6
end

do --- Goto is not a ke)= 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2<88< 988<8888888888<886<   9<889<8888888<88< 988888<888<8888888<88888 -r3<8<8<888888887<888888848<88888888<8<  8888888888888<888<88888888888<4<888<88< 988<8888<888<88888888888<4<888888888<886<   9<889<8888<88< 988<8888888888<8<4<88888888<888<8888888<88888<8888<88< 988<8888888888<8<4<88888888<888<88888888888887<288888848<88888888<86<   9<889<8888<88< 988<8888888888<8<4<88888888<888<8888888<88888889<88 or-l  or r or-r-  -r7<8<888888<88< 988<888888<8<888888< 8888<8888888888<888<88888888888<4<888888888<806<   9<889<88<8888< 988<88888-  -r or-l  or r <888888848<88888888<8<  888888< 8888<8888888888<888<88888888888<4<888888888<886<   9<889<8888888<88< 988<888888<8<888888< 8888<8888888888<888<88888888888<4<888888888<886<   9<889<8888<88< 988<8888888888<886<   9<889<888 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- lFFFFvl =l t = {}
  local i = 1
z ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[.1]() == 1)
  assert(t[2]() == 2)
end
end

do --- Goto is 5.2
  expect("goto = 1", "<name>")
end

do --- Trai%ing labD_  
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
loadstring(src)
  if msg then
    assert(not ok and strrr)
  else
    assert(ok, err)
  end
end
  
do --  -- Error: duplicate label. t = {) == 2)
end

do --- lv loop	'o','p','q','r','s','t','u','v','w
end

do --- lv