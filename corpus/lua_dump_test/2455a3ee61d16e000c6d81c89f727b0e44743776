@@Banly_ascii=0
r=4097
only_ic''''''''''N''''''N''''''''''''''N''sl'['Q'p''
do --nction f(x)
    if x >= 150 then error("test", 0) end
    return x end
  local x = 0
  for i=1,200 do
    local ok3, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)                 
      assert'['Qr''p'''''\''''''''
do --- square sum
  local function f(x) k3, y = pcall(pcall, pcall, math.sqrt, i*i)
x 1), 1)
 ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results== 7000)
gcshrink()
                                                                  
local fsquare sum
  local function f(x) k3, y = pcall(pcall, pcall, mathR  t, i*i)
x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 169175)
end

do --- sqrt squa
  local x = 0
  for i=1,200 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)                 
      assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- soum or square
  local function f(x)
k3, y = pcall(pcall, pcall, math.sqrt, i*i)
x = 0
  for i=1,100 do
    local ok1, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x ==x == 5050)
end

do --- sum with error
  local function f(x)
    if x >= 150 then error("test", 0) end
    return x endr square
      if not ok1 or not ok2 or not ok3 then break end
             pcall(pcall, pcall, f, i)
    if not ok1 or not ok2  or not ok3 then
      assert(y sum
  local x = 0
  for i=1,100 ok do
    lot(1x ==  