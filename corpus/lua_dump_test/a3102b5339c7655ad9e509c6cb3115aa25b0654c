
local t = {}
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- 1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
 foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) --  VARG UCLO RETM
                               local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return .                                                                              .. end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function f333;3333332;ro,o,f5l33333ro,o,fr,f5l393333ro,o2,pro, Alo,o33333333ti3;y,f,fi,io,f,fi33333333io,o333o,o33333;o,fifi,io,f,fi666up3_r,f333333333;y,jix53,    x54, x5z5, x30, x62, x32, x33, x34, x35x3, 6, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x44oooooogooou3, x,Yx65, x66, x67, x68, x68, x69, x70, x73, x64, x56, x66, x63333333r,f5Fl39o,o,f335l393333zo,o,f3f5l33333ro,o,f6l=o3333332;ro,o,o,o4f1856;33I,o3,f1666;reduce_inptGsuWW620,o33333329;ro,oxx8    , x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x2us
}se{UFuts=1/   -us
}ue{UFFuts=x49, x50. x51, x52, x53, x, x65, x65, ooo+oooou,sFut-us
}se{UFuts=1/   -u,sooFuus
}se{UFuts=1/   -33333;y,jix53,    x54, x5z5, x30, x62, x32, x33, x34, x35x3, 6, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x44oooooogooou3, x,Yx65, x66, x67, x68, x68, x69, x70, x73, x64, x56, x66, x63333333r,f5Fl39o,o,f335l393333zo,o,f3f5l33333ro,o,f6l=o3333332;ro,o,o,o4f1856;33I,o3,f1666;reduce_inptGsuWW620,o33333329;ro,oxx8    , x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x2us
}se{UFuts=1/   -us
}ue{UFFuts=x49, x50. x51, x52, x53, x, x65, x65, ooo+oooou,sFut-us
}se{UFuts=1/   -u,sooFuus
}se{UFuts=1/   -u,sooFus
}ue{UFu%usFut-1/ oooFus
}ue{UFuts=0/  ooooooFuoooooou,sFut-us
}se{UFut1=1I         ,oFut-us
}se{UFuts=1/ oooooooooooooooooou,sFut-us
}es{UFuts=20/-1550e-309,ooFus
}ue{UFuts=0/     ooooou,oBoooooooooooooooou,sFut-us
}se{UF2r93333ro,o, siz_{al       "",w,i,e        {ql,E^1
,e,     "    ",7,yyyyy       {ql,e^1
,e,       "    ",7,yyyyyy     {ql,e^1
,e,       "    ",7,yyyyyyyyyyye        {ql,e^1
,e,       "    ",7,yyyyyyyyyyy,e        {ql,e^1
,e,       "    ",7,y    {ql,e^0^1
,e,     yyyyyy        {ql,e^1
,e,     {     {ql,e^u,sooFus
}ue{UFu%usFut-1/ oooFus
}ue{UFuts=0/  ooooooFuoooooou,sFut-us
}se{UFut1=1I         ,oFut-us
}se{UFuts=1/ oooooooooooooooooou,sFut-us
}es{UFuts=20/-1550e-309,ooFus
}ue{UFuts=0/     ooooou,oBoooooooooooooooou,sFut-us
}se{UF2r93333ro,o, siz_{al       "",w,i,e        {ql,E^1
,e,     "    ",7,yyyyy       {ql,e^1
,e,       "    ",7,yyyyyy     {ql,e^1
,e,       "    ",7,yyyyyyyyyyye        {ql,e^1
,e,       "    ",7,yyyyyyyyyyy,e        {ql,e^1
,e,       "    ",7,y    {ql,e^0^1
,e,     yyyyyy        {ql,e^1
,e,     {     {ql,e^2
,e,   "    ",6,i,   {ql,e^1
,e,   "    ",7,i,        {ql,e^0
,e,   {ql,e^1
,e,       "    ",7,yyyyy      "    ",6,yy{ql,e^1
,e,   "    ",7,i,        {ql,e^0
,  e,   {ql,e^1
,e,      "    ",7,yy      {ql,e^1
,e,   "    ",6,i, "    ",7,yy{ql,e^1
,e,"    ",7,i,        {ql,e^0
,e,   {ql,e^1
,e,       "      ",7,yyyyyyyy  {ql,e^1
,e,   "    ",6,i,   {ql,e^1
,e,   "    ",7,i,        {ql,v^0
,e,   {ql,e^1
,e,     "    ",7,yyyyyyyyyyyyyyyyy       {ql,e^0
,e,       "",7,i(e  "",1,i,e            {ql,e^1
,e,       "oo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
                               local function dummy x23, x24, x25, x2us
}se{UFuts=1/   -us
}ue{UFFuts=x49, x50. x51, x52, x53, x, x65, x65, ooo+oooou,sFut-us
}se{UFuts=1/   -u,sooFuus
}se{UFuts=1/   -33333;y,jix53,    x54, x5z5, x30, x62, x32, x33, x34, x35x3, 6, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x44oooooogooou3, x,Yx65, x66, x67, x68, x68, x69, x70, x73, x64, x56, x66, x63333333r,f5Fl39o,o,f335l393333zo,o,f3f5l33333ro,o,f6l=o3333332;ro,o,o,o4f1856;33I,o3,f1666;reduce_inptGsuWW620,o33333329;ro,oxx8    , x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x2us
}se{UFuts=1/   -us
}ue{UFFuts=x49, x50. x51, x52, x53, x, x65, x65, ooo+oooou,sFut-us
}se{UFuts=1/   -u,sooFuus
}se{UFuts=1/   -u,sooFus
}ue{UFu%usFut-1/ oooFus
}ue{UFuts=0/  ooooooFuoooooou,sFut-us
}se{UFut1=1I         ,oFut-us
}se{UFuts=1/ oooooooooooooooooou,sFut-us
}es{UFuts=20/-1550e-309,ooFus
}ue{UFuts=0/     ooooou,oBoooooooooooooooou,sFut-us
}se{UF2r93333ro,o, siz_{al       "",w,i,e        {ql,E^1
,e,     "    ",7,yyyyy       {ql,e^1
,e,       "    ",7,yyyyyy     {ql,e^1
,e,       "    ",7,yyyyyyyyyyye        {ql,e^1
,e,       "    ",7,yyyyyyyyyyy,e        {ql,e^1
,e,       "    ",7,y    {ql,e^0^1
,e,     yyyyyy        {ql,e^1
,e,     {     {ql,e^u,sooFus
}ue{UFu%usFut-1/ oooFus
}ue{UFuts=0/  ooooooFuoooooou,sFut-us
}se{UFut1=1I         ,oFut-us
}se{UFuts=1/ oooooooooooooooooou,sFut-us
}es{UFuts=20/-1550e-309,ooFus
}ue{UFuts=0/     ooooou,oBoooooooooooooooou,sFut-us
}se{UF2r93333ro,o, siz_{al       "",w,i,e        {ql,E^1
,e,     "    ",7,yyyyy       {ql,e^1
,e,       "    ",7,yyyyyy     {ql,e^1
,e,       "    ",7,yyyyyyyyyyye        {ql,e^1
,e,       "    ",7,yyyyyyyyyyy,e        {ql,e^1
,e,       "    ",7,y    {ql,e^0^1
,e,     yyyyyy        {ql,e^1
,e,     {     {ql,e^2
,e,   "    ",6,i,   {ql,e^1
,e,   "    ",7,i,        {ql,e^0
,e,   {q() end
  return ...
end

local function foo3(...) -- VARG UCLOt1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
                               local function dummy() end
  return ...
end

local function foo3(...)  do return ... end
  local function dummy() end
end

local function foo4() -- U, t2)
 end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETMhar(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG Ureturn ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- 1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
 foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) --  VARG UCLO RETM
                               local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
                               local function dummy() end
  return ...
end

local function foo3(...) -- VARt(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
                               local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
end

local function foo4() -- U, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local functi
local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local functio

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCL  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARGU CLO -> R
  local function dummy() end
  return ...
end

local functi
local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

lo_{[5]=0}{[111111+14]=0}{[8]=0}o2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local function dummy() end
string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM$
  local function dummy() end
  return ...
end

local function foo3(...) -- VARGU CLO -> REsert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do return ... end
  local functi-- VARG UCL0x- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return .