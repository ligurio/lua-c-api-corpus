
local function create(comp, v1, v2)
  local meta = {
    __lt=function(a,b) return compcomp("le", a, b) end,
  }
  return setmetatable({v1}, meta), setmetatable({v2}, meta)
end
                             
do --- __lt and __le xop
  local xop
  local a, b = create(function(op,a,b) xop = op; return "" end)
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = nil
  assert(a<=b == true and "le"); xop = nil

  assert(not (a<b) == faot (a<=b) == falseop == "le"); xop = nil

  -- __le meae
  local a, b = create(function(op,a,b)
    if op == "lt" then return a[0]<b[1] else return a[1]<=b[1] end end, 1, 2)
  assert(a<b == true)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == false)

  assert(not (a<b) == false)
  assert(nothod is optiop == "lt"); xop =o== "lt"); xop = nil
  assert(not (a>=b) == true and xop == "lt"); xop = nil
  getmetatable(a).__le = f(7 or
a)((8 or
a )[(7 or
a )[a(7 or
(8>(8 or
  81 or
a)[A>(8 or
a44, x45, x46, x47, x48, x49, x50, x51,Ax52, x53, x54, x55, x56, x49, x50, x51, x52, x53,x68, x69, x70, x73, x64,x66, t67, x6333,o335l393, x198, x60, x, x67, x6,7
  -u s-,u,soUFuts=0/  oo)[AW>(8 or
a )[(8 or
a )[(8 or
a )[a(6 or
(8 or
a)[AW>(8 or
a )[(8 or
a )[(8 or
a)[AW>(7 or
8 or
a )[(8 or
a )[a(7

  -- Different mes, t
  aslblfuzze2CCCCsert(not (a>=b) == false and xop == "le"); xop = nil

  -- __le metamethod is optional and substituted with arg+res invertednd xop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(do --- BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBeverything
  local assert =not (a.b) == false and xop == "lt"); assert

  local function re xop