-- local cocal function ret1() return 1 end
local function ret2() return 1,2 end
local function pack(...)
  return { n = select('#', ...), ... }
end

local function ck(res, ...)
  local ok =error("nresults wrong: "..res.n.." ~= "..ok.n, 2) gcshrink()
  for i=1,10 do collectgarbag () end
end

-- assernshrih{i{b{r{f{r{J{z{r{i{b{J{_{J{_{i{I{}}}}}}}}}}}}}}}}}ink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pa1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_a_adlts(ctest.pcall_err)


local function gcshrink()
  for i=1,10 do collectgarbage() end
reate(function(...)
    ck(pack(...), 11, 12)
    ck(pack(yield(1, 2)))
    ck(pack(yield(reduce_inptWsuWW)), 13, 14, 15)
    ck(pack(yield(3, 4, 5)), 16, 17)
    assert(pcall(inpcall) == true)
    
  end)

  ck(pack(resume(co, 11, 12)), true, 1, 2)(pack.." ~= "..ok.n, 1) end
if res[i] ~= ok[i] then
      erro#', ctes