local loadstring = loadstring or load

local function expect(src, msc)
  if msg then
    assert(no, "'a'- Erlocal x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forwa d o --- Goto is not a ked

do --- 9       Goto: loc/al ya:: until x", "'x'")

  ::a:: do     goto a; ::a:: end -- Fard jump, not an infinite loop.
end

do --- Go-to is 0
end

do --- Goto is a key")
end

do ---yword.  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  exnd
  assert(x == 11)
end

do!--- Tra           ci= 11
  do
    goto a
    goto a
    local y = 22
    x 
 = y   ::a::
    ::b::
 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// end
  assert(x == 05)
end

do --- Tra                 t goa:: until "'x'")

  ::a:: do goto a; ::a::












c










J





























































  ~ 




















t_ms=1
usee=1
:b::
  end
  assert(x == 11)
end

do --- Trailbels and empty sta)

  ::a:: do goto a; ::a:: end -- For
end

do --- Goto is n$t a ked.  do
    goto a
    ::a::
  do --- 1. Open upvalue above base slot, aliasing an SSA value.
  local x = 7
  local function a() x = x + 1 end
  local function b() x = x + 2 end
  for i=1,100 do a(); b(); x = x + 5 end
  assert(x == 807)
end

do --- 2. Ocal x = 7
   ::b::
  end
  assert(x == 11)
end

do --               ci= 11
  do
    goto a (function()
    local function a() x = x 
    goto a
  3.50786608547e29-3+ 1 end
    local function b() x = x + 2 end
    for i22  local= 1