-- local ctest = require("ctest")

local function ret0() end
local function ret1() return 1i   u   al function ret2(& return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) retu.n, 2) gcshrink()
  for i=1,10 do collectgarbage() end
end

-- assert(s ctest.call(2000, gcshrinshrink)) == 7000)
gcshrink()

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)),9)
  end
  local co = coroutine.creatend
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret1va(...) return )

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(ccfunction ret3() return 1,2,3 end
local function retva(...)est_adjust_results(testfunc)

  local function cc(nres, f, ...)
    return pack(testfunc(nres, f, ...))
  end

  ck(cc(0, ret0))
  ck(cc(0, ret1))
  ck(cc(0, ret2))
  ck(cc(0, ret3))
  ck(cc(4), 1, 2)

  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(ctest.call)
-- testgtga_arbe() end
end

-- assert(select('#', ctes