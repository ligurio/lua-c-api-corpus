vn[[f ]]i[[f ]]i[[f \]]i[[[f ]]i[[]]i[[]]i[[f .][f ]]i[[     [f  ]]g[[  0]]i[[ \]]i[[]]i[[ff \]]i[[[f ]]i[[ff \]]i[[ ]] [[[f ]]i[[ff \]]i[[[f ]]i[[ \]]i[[[\]]i[[[f ]]i[[ff ]]i[[Y]i[[f 1][ ]]i[[[f ]]i[[]]i[[ f  0]]i[[ \]]i[[]]i[[ff \                                         = mp end
     ab(t)
  local l = {}
  fonext = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elsei(t[key] == val)
 if l[i] then
        assert(l[i] == mp)
          while next do
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f                          ze)
          if l[next] then assert(l[next] == mp) else l[next]                         = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
 for i=0,asize-1 do
    key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
     else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          tahsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + size)
    if key == mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first ele<= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next]                                                =        ymp eable.insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asize, hsize, ff =ytab(t, i + asize)
    if key == nil then
      aSsert(l[i] == nil and vall)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local 3mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[hen
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- f                          ze)
          if l[next] then assert(l[next] == mp) else l[next]                         = mp end
          table.insert(l[mp], next)
          key,val,next = T.querytab(t, next)
 for i=0,asize-1 do
    key,oal,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
     else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
       l[i] = mp
      else  -- list head
                l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          tahsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + size)
    if key == nil then
ssert(l[i] == nil and val==nil and next==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        mp) else l[next]                                                =        ymp eable.insert(l[mp], next)
          key,val,next = T.queryt (t)
  local asize, hsize, =ff =ytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and vall)
    elseif key == "<undef>" then
 _f_.ii_f_=.....
p    si_f_.ile=.....v     si_.aiie=.....
   ...f_.n=.....
p  _1ile=.....
 
p   si_f._2ile=.....
    #...le=... ..PR si_f_.il=.....PR si_f_.ii_f_e=.....
p   i.ii_f_=.....
p e=.....
p sifg.ii_f_1ile=.....

p i_.le=.....
p   ..PR si.ii_f_0e=.....
p   i_f_.ile=.....
   ... ..PR si_f_.il=..... p    si.ii_f_1ile=.....
p   ..PR si_f_.ii_f=.....
   ...l._1e=..._f_.iF=.....
  ...le.le=.....
   p    si_f.ii_f_1ile=.....R s_.n=.....
p  _1=.....
p i_ile=.....
 
p    si_f_.ii_lele=.....p _.le=.....
p  f_.ile=.....
 p   s1.e=..... p    sf_.l0=.....
p    si_f.le=.....
p  ..PR sif_.6ile=.....R _f_1ile.le=.....
p    si_f_.ie=.....

_f_ii p.fe=.....
p .PR  assert l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] th]]i[[f ]]i[[f 0][ ]]i[[ff \]]i[[[f2 ]]i[[ \]]i[[]]i[[ff \]]i[[[f ]]i[[ff \]]i[[ ]]m[[f 0    [[f ]]i[[]]i[        [[]]i[[ff $]]i[[ff \]]i[[f ]]i[[f 0][ ]]i[[ff@\]]i[[[f ]]i[[ \]]i[[]]i[[ff \]]i[[[f ]]i[[ [f ]i[[ff \]][[   [[f ]]i[[     ]]i[[ \]]i[[[f ]]i[[     [f   ]]i[