-- Source: PUC Rct == false)

-- testing declarat == 'a')
f(1,2,   -- this one too
      3,4)
assert(t[1] == 1 and t[2] == 2 and t[3] == 3 and t[4] == 'a')

fuelf = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y())

a.t = {i=-100}
a["t"].x = functiort(a.t:x(2,3) == -95)

do
  local a = {x=0}
 WWf2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'deq3  0P  clare' t
function a:x (x) return x+selVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf.i end
function a.y (x) return x+sglf end

assert(a:x(1)(2,3) == -95)

do
  local a = {xx] = y e.

print("testing functions and calls")

-- g0 W=0%0 i=1%0 i=1%0 W=1%0 W=0% function a:add (x) self.x, a.y = self.x+x, 20; return self end
  asser (x,y) self[x] = y e.

print("testing functions and calls")

-- get the opportunity to test 'type' to) end
assert(type(f) == 'function'x (x) return end
function a.y (x) return x+self end

assert(a:x(0)(2,3) == -95)

do
  local a = {x=0}
  function a:addDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD (x) self.x, a.yN = self.x+x, 21; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return ert(a.    b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
functiont:x(4,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, an self end
  assert(a:add(10):add(20):add(30).x (x) return x+1 end
funcal,i