ii=1         -u==( Lory      '  ')onl
   ''
 
puFq
      ''
s=   
 '',001  -u==( L orq  '@  ')onl
   ''
q=1    -uu==( L or   	y     
'   ')ps=1    -u==   -u== (L ory   '  ')ts= 2   -u   -uu==( L ory      '                                                                                                  ')  ''
s=   
 '',001  -u==              ( L orq  '@  ')onl
   ''
q=1    -uu==( L or   	y      '   ')ps=1    -u==   -u== (L ory   '  ')on=1/  -u==( L     ory ' ')   == 000  -u==( L ory      '@  ')onl
   ''
 
ruFqts=-u==( Ls oryk  '  ')==     -u00  -u==( L ory          '  oBoooooooooooooooouoB;ooooooo    oooou')onl
   ''
 
ruFqts=1      -u   -u==( L ory       '  ')onl
   ''
 
ruFqts=1    -00  -u==( L ory   andnil and nil andn '  ')on ''
s=         (L ory   '  ')ts= 2   -u  '  oBoooooooooooooooouoBooooooooo&kooooou')onl
   ''
 
ruFqts=1      -u   -u==( L ory       '  ')onl
   ''
 
ruFqts=1    -00  -u==( L ory   andnil and nil andn '  ')on ''
s=          y
      end
   ::a:: do goto a; ::a:: end -- Forloop.
end

do --- G:"
  ::a:: do     goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do ---")
  expect("repeat goto aulc ;al x; ::(y ' ')   == 000  -u==( L odn '  ')on ''
s=         (L orts=1    -oolooou        '',000 =0