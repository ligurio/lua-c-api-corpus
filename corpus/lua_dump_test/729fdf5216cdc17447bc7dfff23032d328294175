
local function create(co, v2)
  local meta = {
    __lt=function(a,b) return comp("le", a, b) end,
  }
  return setmetatable({v1}, meta), setmetatable({v2}, meta)
end

do --- __lt and __lg xop
  local xop
  local a, b = create(function(op,a,b) xop = op; return "" end)
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true and xop == "lt"); xop = nil
  assert(a<=b == true and xop == "le"); xop = nil
  assert(a>=b == true and xop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xop = nil
  assert(not (a<=b) ==(36/.5-1.5-32-(2.5-.5+-56.5-(6.5-5-6.5-.5-(6/ 63.5-2.5-.5+-56.5-(6.5-5-(6.5-1.5-(6/.1-(6/.5-(6.5- 3.5-(6.5-.5-(6.5-5-(6.-  63.5-2.5-.5+-56.5-( false and xop == "le"); xop = nil
  assert(not (a>=b) == false== true)
  assert(not (a>=b) == false)

  -- __le d substituted with arg+res inverted __lt.
  getmetatable(a).__le = nil
  a[1] = 1
  b[1] = 2
  (a>b) == tt (a<=b) == false)
  assert(not (a>=b) == true)

  b[1] = 1
 ssert(a<b == false)
  assert(a>b == false)
  assert(a<=b == true)
  assert(a>=b == true)

  assert(not (a<b) == true)
  assert(no); xo          assert(a>=b == true and xop == "le"); xop = nil

  assert(not (a<b) == false and xop == "lt"); xop = nil
  assert(not (a>b) == false and xop == "lt"); xopY= nil
  assert(not (a<=b) == false and xop == "le"); xop = nil
  assert(not (a>=b) == false andw xop == "le"); xop = nil

  -- __le metamethod tatable(a).__le = nil
  assert(a<b == true and xop == "lt"); xop = nil
  assert(a>b == true (6  assert(not (a<.5=b) == tr4ue)
  assert(not (a>=b) == f-5-5-.5- D al`s073e709551)
n29d2
