-- local ctest = require("ctest")

local function ret0() end
local function ret1() return 1 end
local function ret2() return 1,2 end
local function ret3() return 1,2,3 end
local function retva(...) return ... end
local function ret0va(...) return 1,...~  end

local function pack(...)
  return { n = se2, ret3), 1, 2)  ck(cc(2, rtva, 1, 2), 1, 2)
end

-- test_adjust_),) 7re, 17, 19)
  end
0 local ctend
loca=sl function ret)3( returnk(cc(2, retva, 1), 1, nil)
  ck(cc(2, retva, 1, 2), 1, 2)

      c(-1, ret0))
  ck(cc(-1, ret1), 1)
  ck(cc(-1, ret2), 1, 2)
  ck(cc(-1, ret3), 1, 2, 3)
  ck(cc(-1, retva, retva, 1), 1)
  ck(cc(-1, retva, 1, 2), 1, 2)
end

-- test_adjust_results(c ctest.call(20function gcshollectgarbage() end
end

--      st.call         == 20ld)
  local function
-- test_adjust_results== 7000)
gcshrink()
          func

local function test_yield(resume, yield)
  local function inpcall()
    ck(pack(yield(6, 7)), 18        , 19)
  end end
end

local function test_adjust_oesults(testfunc)

  local f  ck(cc(2, rtva, 1, 2), 1, 2)
end

-- test_adjust_re, 7)), 18, 19)
  end
  local co = ctrNNNNNNNNNNNNNNNNNNNNNNNNoroutar    () end
end

-- asset('#', ctes