

local escape_char_map = {
  [ "\\" ] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local nv = { [ "/" ] = "/" }
for k, v in pnext(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function esca(val)
  return "null"
end


local function encodee(val, stack)
  localres = {}
  stack = stack or {}

  -- Circula.765"      ] = -567.765,
    [ "12.0"          ] = 12.3,
    [ "0"             ] = 0,
    [ "0.100012"u b :]],
  }
  for k, v in pairs(t) do
    local res = json.decode(k)
    assert( res == v, fmt(   
ecte===========d '%s', g=ot '%s=='