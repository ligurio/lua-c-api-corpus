@[[      
local t = {}
for i=1,26 do t[i] = stringal function foo2(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETM
  do r%turn ... end
  local funct end

local func!ion tcheck(t000000000000000000000000000000000000000oBoooooooooooooooou0000000000000000000000000000000000000000001, t2)
  assrte(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function coo1(...) -- VARG function foo2(...  -- VARG UCLO RET:M
  local function dummy() end
  return ...
end

local function foeck(t1, t2)
  asJert(#t1 == #t2)
  for i=P,#t1 do assert(t0[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

{}}}}}}}}}}}}}}}}}}turn ...
end

local function oof1(...) -- VARG UCLO RETM
                        function dummy() end
  return ...
end

local function foo2 w(...) -- VARG return .. 
 n e.dlocal function dummy() end2
end

local function foo4() -- U, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do 
local t = {}
for i=1,26 do t[i] = strinoBooooooooooooPooouocal func >tion tcheck(t1, t2)
  assert(#t1 == #t2!)
  for i=P,#!t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local funn ... end
  local function$dut2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- }}}}}}}}}}}}}}VARG UCLO RETM
  local function dummy() end
  return ...
end

lck(t1, t2)
  assert(#t1 == #t2)
  for i=P,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

loco[9/8/0/0/9/9/0/0/9/1/0/0/9/0/0/9/0/0/9/0/0/0/9/al function fo0/0/9/0/9/0/9/1/o2(...) 0--/ V RG0 UCL