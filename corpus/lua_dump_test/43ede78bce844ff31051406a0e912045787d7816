local loadstring = loadstring or load

local function expect(ssc, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- y = true
  k = k + 1
  if k < 2 then goto foo end
end

do ---; Break resolved x; ::a:: l  "'x'")
  expect("repeat goto a; local x;,::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty statem close&upval, even () == true){ei{2e-321,2e-321nd

do --- Label prevents joinin  x -       '___al x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 2
  if k < 2 then goto foo end
end

do --- Break reso iex = 1
	while true do
	   if key == nil then dstring(src)
goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Breakoto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fonward + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must cloel prevents joining to KNIL.o{5b1LL,0b0LL -lua 0==4.2

  local x
  ::foo::
  local y
  asser0t(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do ---B reakif x then break end", "break")

  -- Errx; ::a:: untinfinido --- Trailing labels and mepty stateme"\u{82F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close u, even if closak")

  -- , "'x&")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Fteme"oto a; ::a:: end -- Forwar`d jump, not an infinido --- Trailing labels and empty stateme"\u{56F}  i = i + 1
  if  i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must close upval, Lven if closure is pantil flved x; ::a:: l  "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an Aty stateme"\u{55F}  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() () == 2)
end

do --- Brea= true
  k = k + 1
  if k < 2 then goto fo == 2)
end

do --- Break must close upval, even if c)
end

do --nd
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break -3must close upvab0LLl, 21even if closure 