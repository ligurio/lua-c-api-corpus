declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 4
                    message: "\"]]\354\354\354\354l\354iticonst\354\354\354\354\354\354_Alig\354\354\354\354\354\354k\354\354tt0\354\354=thr\354\3542,\354\377\37700000000000000000000,000000000000000000010000000000000000000,00000-00000000000000184467440446744073709551615-specifier,s_0000000009551615*000-000000000009551615-sPecifiers_000009551615-specifiers00000009551615*000000000000000000004467473700000009551615*00000,00000-0000000000000010000000000000000000000,00000-0000000000000018446744044674404674709551615-_DecDe\377\377\377casOOOOO\377\377\377.\377extern\377\377\377+iers_a,nd_quanifiers_list {\n    ifiers_list {\n        quali\354\354l{\n        };      }\n    }[[[[[[[[[[[[[[[[[[[\354"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 0
                    message: "[]]local   c    t0[[[[]]local   c    t0[[[[[]]local   c    t0[[[[]]local   c    t0[[]\243\223\220cdelarations {\n  specifiers_and_qualifiers_list {\n    specifit0[[[[[]]local   c    t0[[[[]]local   c    t0[[]\\24       specifiers_list {\n          type_specifier {\n            type     }\n          }\n        }\n                 eage: \"[]]local   c    t0[[[[]]local   c    t0[[[[[]]local   c   t0[[[[]]local   c    t0[[]\\243\\234~236\\223 t {\n    specifit0[[[[[]]local   c    t0[[[[]]local   c    t0[[]\\24       }\n        }\n                 expression: 0\n                    message: \"[]]local   c    t0[[[[T]local   c    t0[[[[[]]local   c    t0[[[[]]local   c    t0[[]\\2n_typ3       0 0   "
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
