declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            arithmetic_type {
              type_float_imaginary: 0
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
    declarators {
    }
    declarators {
      declarator_attr {
        name {
          name: ""
          num: 4
        }
      }
    }
    declarators {
      declarator_attr {
        name {
          name: "OOOOOOOOOOOOOOO"
          num: 0
        }
      }
    }
    initializers {
    }
  }
}
declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              name {
                name: ""
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "]]\354x8,z=7<n[[*r]]Ax8,z=7<n[[*"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 9
                    message: "[]]go=i>s[[f]]go=i>st[[]]go=#i>t[[]]go=#i>s[[f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 0
                    message: "]]\354x8,z=7<n[[*r]]Ax8,z=7<n[[*"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 9
                    message: "]]e=3i^r[[]]ertyp=3i^r[[]]e=3i^r[[]]rtype=3i^r[[]]e=3i^r[[yp=3i^r[[]]e=3i^r[[]]rt[[=3i^r[["
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
