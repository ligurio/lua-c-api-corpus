declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  bit_field {
                    name {
                      name: "0"
                      num: 0
                    }
                    width: 0
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "]]\354z=7<n[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "\242]]\354\354\354\354\354\354\354\354Name4s {\n{\n 00000184000,00000-0B00000000000010000000000+0000000000000000000,00000-00000000000000000-0B00000000000010000000000+00000000000,00000-00000000000000184467400009551615*00000,00000-0B0000000000001000000-0000000000000018446744044674407370955100,00000-0B00000000000010000000000+0000000000000000000,00000-00000000000000000-0B0000000000010000000000+00000000000,00000-000000000000001844674404467440730001844674404467440737073709551615*00000000000095516150000000009551615*00000,00000-0B00000000000010000000000+0000000000000000000,00000-00000000000000000-0B00000000000010000000000+000000737073709551615*000000000000000184467440451615-specifiers_0000000009551615*00000,00000-0B00000000000010000000000+0000000arat0009551615*000000i"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 9
                    expression: 0
                    message: "\242]]\354l\354zst {\n       #qrs_li {fahs  }{\n    ist {false\n      }\n      }\n    }l\354t {false\n        }{\n  i {false\n     }\n   {falsype_&"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
