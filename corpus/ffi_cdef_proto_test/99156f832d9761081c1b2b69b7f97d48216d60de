declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  bit_field {
                    width: 0
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 3
                    message: "U]] f ,x, ffi. f ,x,mfi, ffi. f ,x,mx.\n ffi, ffi ,x, f ,x,mx.\n mx.\n ffi, ffi. f ,x,mx.\n ffi, ffi, fffi, ffi. f ,x,mffi ,x,mx.\n ffi, ffi, fffi, ffi. \n mfi, ffi, f ,x,ffi, ffi. f , f ,x,mx.\n fmx.\n ffi, ffi, f ,x,fi, ffi. f , f , ffi, ffi , mfi, ffi, f ,x,ffi, ffi. f , f ,x,mx.\n fmx.\n ffi, ffi, f ,x,fi, ffi. fi ,x,mx.\n ffi, ffi, fffi, ffi. f ,x, mx.\n ffi, ffi, f ,x, f ,x,fi, ffi. f , f , ffi, ffi , m\001\000\000\000\000\000\000\000 f ,x,ffi, ffi. f , f ,x,mx.\n fmx.i. f , fi. f ,x,mx.\n ffi, ffi, fffi,x.\n mfi, ffi, f ,x,ffi, ffi. f , f ,x,mx.\n fmx.\n ffi, ffi, f ,x,fi, ffi. f , f , ffi, ffi , mfi, ffi, f ,x,ffi, ffi. f , f ,x,m, ffi, f ,x,ffi, ffi. f , f , ffi,ffi. f , f ,x,m, ffi, f ,x,ffi, ffi. f , f , ffi, ffi , ffi ,x -i"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
