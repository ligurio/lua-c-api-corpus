declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 8
                    expression: 8
                    message: "U]] f ,x,mx.\n mx.\n fffi, f ,x,ffi, ffi, f ,mx.\n ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,ffi ,x,ffimx.\n ffi, ffi, f ,xf ,x,ffif ,x,ffi, ffi, f ,mx.fi, f ,x,mx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,x,mx ,x,ffi, ffi, f ,mx.\n ff ,\n ffi, ffi, f ,x,mx.\n ffi, ffi, x,ffi, ffi, f ,\n ffi, ffi, f ,x,ffi, ffi, ffi,  fextern ffi -i -i"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 0
                    message: "\242]]urGo\354\354=\354c\377<\377exter\377\377\377*\377  or {}\n> er\377\n\n>   spe,\377<al8\377\n>   spe\377\377const\254\377\377\377\377>   spe\377_Noreturn\377  or {}\n>   spe,\377\377  or {}\n>   spe,\377<\377eror {}\n>   spe,\377r {}\n> {}\n>  r {}\n>  exter\377z0onst>\377\377\377\377<nexter\377\377\377\377\377  or {}\n>   spe,\377<\377j> _Alignasoog\377\n>   s\377else\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,ar  or {}\n>   spe,\377<Ver\377\n>   sspe\377_Noreturn\377  or {}\n>   spe,\377\377  or {}\n>   spe,\377<\377    qualifiers_list {\n          type_qualifier {pe   sa\354\ns[[f"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
