declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            struct_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 0
                    message: "\242]]C\354\354\354d_2ticonst\354\354\354\354\354\354\354{\n \354\354\354,z\354\354\354=\354_B\354\2272,\354\377\3770s_list {\n      q\354=false1{\n \354\354\354=\354\354\354\354\2272x0\377j0s_list {\n      q\354=\354\354\354\354\354i {\n    \354z\354\354\354=\354\354\354_A2,  q\354=_list {\n      q\354=\354.l2\354boolt\354\3542typeddf{\n        }\n      }\n  \n        }\n      }\n    }\n,#\377_Alignasst {\354z\354\354P=\354\354\354\354\2272,\354\377\377\377s_li  }\n      }\n    }\354\354\354\354{\n \354\354\354\354z\354\354\354=\354\354\354\354c0l\354\377\377\377s_list {\n      q\354=false1{\n \354\354\354=\354\354\354\354\2272x0\377\377\377s_list {\n      q\354=f\354\354\354\354iers_list {\nName3z\354\354\354=\354\354\354\354\2272,  q\354=_list {\n      q\354=\354\354\377s_li\354\377t*\3542\354\354\377zst {\n        }\n      }\n}\n      }\n    }\n,const {\n      q\354=\354.l2\3541,\3542,\354\377\377\375s_li  }\n      }\n    }\n[[[\354"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 0
                    message: "\242]]\354\354e\354d_2ticonst\354\354\354\354\354\354e\354{\n \354n\354\354z\354\354\354=\354\354\354\354\2272,false_list {\n      qse_list {\n      q\354=\354\354\354\354\3541{\n \354\354\354\354z\354\354\354=\354\354\354\354\2272,\354\377\377es_list {\n      q\354=\354\354ll\354+1,\354\227\377\377s_list {\n      q\354=\354\354\354\354\354+1,\3541,\354\377st{\n      q\r=\354\354\354\354\3541,\354\377tllitlgott {\n        }\n      }\013  \n        }\n      }\n    }\n,\354\377\377\377bool\377\377st {\354z\354\354\354=\354\344\354\354\2272,l\377\377\377s_list {\n      q\354=\354\354\354\354\3541,\354\377t\354  }\n      }\n  \n        }\n      }\n     }\n[[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 0
                    message: ";]]\354\354\354\354d_\354\354\354\354{\n \354\354\354lz\354_Decimal2,\354\377\377\377s_list {\n      q\354=false1{\n \354\354\354\354z\354\354\354=\354lok92,\354\377\377\377s_list {\n      q\354=\354\354\354\354,\354\377\377\377\377\377\377\377\377\377st {lz;\3540=\354\354\354\354\2272,\354x0\377s_list {      q\354=\354\354%\354r1,\354\377t\354\354\377_Aligg0{\n        }\n }\n  ;        }\n      }\n    }\n,\354\377\377o\377\377constt {\354z\354\354P= \354\354\354\2272,\354\377\377/s_li  }\n      }\n    }\n[[[\354"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: ";]]\354\354\354\354d_\354\354\354\354{\n \354\354\354lz0\354\354=\354\354\354\354\2272,\354\377\377\377s_list {\n      q\354=false1{\n \354\354\354\354z\354\354\354=\354lok92,\354\377\377\377s_list {\n      q\354=\354\354\354\354,\354\377\377\377\377\377\377\377\377\377st {lz;\3540=\354\354\354\354\2272,\354x0\377s_list {      q\354=\354\354\354\354\3541,\354\377t\354\354\377_Aligg0{\n        }\n }\n  ;        }\n      }\n    }\n,\354\377\377\377\377\377cz0onstt {\354z\354\354P= \354\354\354\2272,\354\377\377/s_li  }\n      }\n    }J[[[ "
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
