declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              attr_spec_seq {
                keyword_reproducible: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 5
                    expression: 5
                    message: "$]]L=_lafiest {   {iis     ;};   }{   fiest {   {iis     ;};   }{   q{irst  ;declarations {\n  specifiers_and_qualifiers_list {\n    specifiers_and_qualifiers_list {\n      specifiers_list {\n        specifiers_list {\n          type_specifier {\n            union_type {\n              struct_declaration_list {\n                struct_declaration_list {\n                  static_assertion {\n                    static_assert_2: 1\n                    expression: 3\n                    message: \"&]]z.oz=e or _F[[fa]]n0.z=er or _F[[f1]]n.z=r or _F[[]]n0.z=r or _F[[\"\n                };   }%q{irst  ;  };     }\n                }\n                struct_declaration_list {\n                  static_assertion {\n                    static_assert_1: 3\n               }{   {iis     ;};   }{   fiest {   {iis ;};   }{   q{irst  ;  };   }%q{irst  ;        expression: 1\n                    message: \"&]]z.oz=e or _F[[fa]]n0.z=er or _F[[f1]]n.z=r or _F[[]]n0.z=r or _F[[\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } };  \n}\n }%[[[S"
                  }
                }
                struct_declaration_list {
                  bit_field {
                    width: 1768710003
                  }
                }
                struct_declaration_list {
                  bit_field {
                    width: 0
                  }
                }
                struct_declaration_list {
                  bit_field {
                    width: 0
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
