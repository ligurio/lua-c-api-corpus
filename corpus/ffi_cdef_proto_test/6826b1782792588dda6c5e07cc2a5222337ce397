declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              attr_spec_seq {
                keyword_deprecated: 1761607680
              }
              name {
                name: ""
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 4
                    message: "]]ll=2,o,nd[[[]]r0l=2,o,[[]]TlP=rs,o,n,th,o,nnd2,o,th,o,nnl,o,nd,o,nnd2,o,th,o,nnd2,o,th,o,nnl,o,nd,o,nnd[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 0
                    message: "\242]]\354\354[[\rs]]\354n[[1s]]\354\354[[2\rS_Aligl_]\354\354l[[2-.\r\r   [\r\r ]]\354l[[Msg]]_\354l[[2ig]]_7[[:s]]\nl[[/2\r.\r]   [[  [[[]]\354\354[[[\rs]]\354n[[\r\r ]]\354\354[[Ms]]l\354[[2\rS_Alig]]\354\354\354[[2\r.\r\r   [[  [[[]]\354\354[[\rs]]\3542[[\316\362\254\236Alig"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 4
                    message: "\242]]\354\354\354a\354\354=\354c\377<\377exter\377\377\377\377\377  or {}\n>   spe,A<\377er\377\n>   spe\377\377<\377er\377*\377\377\377>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377constor {}\n>\377\377\377\377<\377exe,\377goog\377\n>   spe\377\377<\377\n>   spe,\377<\377er\377\n>   spe\377\377<\377erz\254\377\377\377\377>   spe\377exter\377\377\377\377\377  or {}\n>   spe,\377\377  or {}\n>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377>   spe,\377<\377er\377\n>   spe/\377<\377or\377,\377.\377er\377\n>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377const\377\377va\354\354\354\354\377\377or {}\n>   spe,A<\377er\377\n>   spe\377\377<\377er\377*\377\377\377>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377constor {}\n>\377\377\377\377<\377exe,\377goog\377\n>   s\377<\377er\377\377\377\377\377\377v\377case\377\377<\377ext>   spe\377\377<\377Name9\377\377  or {}\n>  exter\377\377{}\n>{}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377<\377er\377\n>   spez\377<\377er\377\377\377\377\377>   spe,\377<\377e>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377constor {}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377<\377\377>   spe,\377goog\377\n>   spe\377\377<\377er\377else  or {}\n>  ex\377\n>   spe,\377<\377e\354\ns[[f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 4
                    message: "]]e=3i^r[[]]err[     i^r[[[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    expression: 4
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      qualifiers_list {
        qualifiers_list {
          type_qualifier {
            keyword_const: 2752512
          }
        }
      }
    }
  }
  declarators_and_initializers {
    declarators {
    }
    declarators {
    }
    declarators {
    }
    declarators {
    }
  }
}
