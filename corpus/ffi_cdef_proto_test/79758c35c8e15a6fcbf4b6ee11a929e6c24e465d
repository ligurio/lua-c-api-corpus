declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    expression: 4
                    message: "?]]    function f()    fu[[]?]]    function f()     function f() function f() function f()    fu[[]?]]   fu[[]?]]    function f()     function f() function f() function f()    fu[[]?]]    function f()        function f() function f() function f()        function f() function f()    fur[[=3i^ype=n f() (u"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "]]end end end  end e\244[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "]]end end end  end e\244[["
                  }
                }
                struct_declaration_list {
                  bit_field {
                    name {
                      name: "\377\377\000\000"
                      num: 537526272
                    }
                    width: 4
                  }
                }
                struct_declaration_list {
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
    declarators {
      pointer_declarator {
        declarator {
          pointer_declarator {
            declarator {
              pointer_declarator {
                declarator {
                  declarator_attr {
                    name {
                      name: ""
                      num: 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
