declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            void_type: 0
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "\242]]\354\354\354\354\354\354\354\354\354tions {\n{\n   46744073709551615*000000000000%9551615*-\354\354\354\354\354\354tions {\n{\n   46744073709551615*000;000000000%9551615*0/0000000000000,000073709551615*000000000000%9551615*0/000000000000000000000,00000-9551616*0000000000000%9551615*0/000000000,00000-\354\35400000000000%9551615*0/00000000000000000000000000000000%9551615*0000000000000000000000000000000000000000000,00000-9551616*0000000000000%9551615*0/000000000,00000-\354\3540000000000000000000000000,000073709551615*000000000000%9551615*0/00000000000000000000000000000000%9551615*00000000000000000000000000000,00000-9551616*000000000000%9551615*0000000000000000000000000000000000000,00000-9551615*00000000000000000000000,000073709551615*000000000000%9551615*0/0000000%9551615*0/00000000000000000000000000000000,000073709551615*0000000000,000073709551615*000000000000%9551615*0/0000000%9551615*0/00000000000000000000000000000000,000073709551615*000000000000%9551615*0/00000000000000%9551615*000000000000000,000073709551615*00000000000 {\n    specifiers_and_qu0alif0i0"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
    declarators {
      declarator_attr {
        name {
          name: ""
          num: 8
        }
      }
    }
    declarators {
      declarator_attr {
        name {
          name: ""
          num: 1
        }
      }
    }
    declarators {
      declarator_attr {
        name {
          name: ""
          num: 8
        }
      }
    }
  }
}
