declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 0
                    message: "U]] f ,x,mx.\n mx.\n ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mx.ype {\n              struct_decst {\n                  static_a.\n ffi, f ,x,m, f ,mx.\n ffi, ffi, f ,x,mx.\n ffi, ffi.\n ff ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,mx.\n ffi,  ffi,\n ffmx.\n  f ,x,ffi, ffi, f ,mx.\n ffi, ffi, f ,x,mx.\n ffi, ffi.\n ff ,x,ffi, ffi, f ,x,mx009551615*00000,00000-000000000000001000000000,00000-0000000000000018446,x,mx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mx.ype {\n              str, f ,x,mx.\n ffi,  ffi,\nregisterfi, \n ffi, ffi, ffi, f ,x,ffi, ffi, f ,mx.\n ffi, ffi, f ,x,mx.\n ffi, ffi.\n ff ,x,ffi, ffi, f ,x,mx009551615*00000,00000-000000000000001000000000,00000-000000000000001844674404467440737095551615-specif615*0000,-0000-000000000000000,00000-0000000000000000010000000000000000000000,00000-00000,000,00000-000000000000001000000000,00000-fi, ffi, f ,x,mx009551615*00000,00000-000000000000001000000000,00000-0000000000000018446,x,mx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mx.ype {\n              str, f ,x,mx.\n ffi,  ffi,\nregisterfi, \n ffi, ffi, ffi, f ,x,ffi, ffi, f ,mx.\n ffi, ffi, f ,x,mx.\n ffi, ffi.\n ff ,x,ffi, ffi, f ,x,001844674404467440737095551615-specif615*0000,-0000-000000000000000,00000-00009551615-s74404467440737095551615-specif615*0000,-0000-000000000000000,00000-0000000000000000010000000000000000000000,00000-00000000000000184467440446770000000000000001844674404467440737095551615-specif615*0000,-0000-000000000000000,00000-00009551615-s74404467440737095551615-specif615*0000,-0000-000000000000000,00000-0000000000000000010000000000000000000000,00000-000000000000001844674404467709551615-si"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
