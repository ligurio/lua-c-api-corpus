declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 0
                    message: ";]]\354\354\354\354d_\354\354\354\354{\n \354\354\354lz\354_Decimal2,\354\377\377\377s_list {\n      q\354=false1{\n \354\354\354\354z\354\354\354=\354lok92,\354\377\377\377s_list {\n      q\354=\354\354\354\354,\354\377\377\377\377\377\377\377\377\377st {lz;\3540=\354\354\354\354\2272,\354x0\377s_list {      q\354=\354\354%\354r1,\354\377t\354\354\377_Aligg0{\n        }\n }\n  ;        }\n      }\n    }\n,\354\377\377\377\377\377constt {\354z\354\354P= \354\354\354\2272,\354\377\377/s_li  }\n      }\n    }\n[[[\354"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            struct_type {
              attr_spec_seq {
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 0
                    message: "\242]]\354\354e\354d_2ticonst\354\354\354\354\354\354e\354{\n \354n\354\354z\354\354\354=\354\354\354\354\2272,false_list {\n      qse_list {\n      q\354=\354\354\354\354\3541{\n \354\354\354\354z\354\354\354=\354\354\354\354\2272,\354\377\377es_list {\n      q\354=\354\354l\354\354+1,\354\227\377\377s_list {\n      q\354=\354\354\354\354\354+1,\3541,\354\377st{\n      q\r=\354\354\354\354\3541,\354\377tllitlgott {\n        }\n      }\013  \n        }\n      }\n    }\n,\354\377\377\377bool\377\377st {\354z\354\354\354=\354\344\354\354\2272,l\377\377\377s_list {\n      q\354=\354\354\354\354\3541,\354\377t\354  }\n      }\n  \n        }\n      }\n     }\n[[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 0
                    message: "]]e=3i^r[[^r[[]]e=3i^r[[]]ertype=3i^r[[]]eertyp=3i^r[[]]e=3i^r[[][[]]ertyp=3i^r[[]]e=3i^r[[]]ertype=3i^r[[]]ertyp=3i^r[[]]e=3i^r[[]]rtyp=3i^r^r[[]]ertyp=3i^r[[=3i^r[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 0
                    message: ";]]\354\354\354\354d_\354\354\354\354{\n \354\354\354lz\354\354\354=\354\354\354\354\2272,\354\377\377\377s_list {\n      q\354=false1{\n \354\354\354\354z\354\354\354=\354lok92,\354\377\377\377s_list {\n      q\354=\354\354\354\354,\354\377\377\377\377\377\377\377\377\377st {lz;\3540=\354\354\354\354\2272,\354x0\377s_list {      q\354=\354\354\354\354\3541,\354\377t\354\354\377_Aligg0{\n        }\n }\n  ;        }\n      }\n    }\n,\354\377\377\377\377\377constt {\354z\354\354P= \354\354\354\2272,\354\377\377/s_li  }\n      }\n    }\n[[[\354"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            typedef_type {
            }
          }
        }
        specifiers_list {
          function_specifier {
            keyword_inline: 0
          }
        }
      }
    }
  }
  declarators_and_initializers {
    declarators {
      array_declarator {
        expression: 16776960
      }
    }
  }
}
