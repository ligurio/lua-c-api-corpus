declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 3
                    message: "\037 specifiers_and_qualifiers_liurGo7n            attr_spec_seq declaratin        specifiers_lis955161i*0000*00.0000000800000000000000000000020,00000000955161i*000000000000000000000005160020,00            union            union_99999999999999999999999999999999999999999999type {\n              struct_declaration_list {\n                struct_declaration_l attr_spec_seq declaratin        specifiers_lis955161i*0000*00.0000000800000000000lName40          ty        specifiers_lName40          type_specifier {\n            union_999999999999999999999999ie   specifiers_and_qualifiers_li99999999999999999999type 999    struct_declaration_list {*000000000000000000000005160020,00            union_9999999999999999999999999union_999999999999999999999999ie   specifiers_and_qualifiers_list {ecifiers_act_declaration_lit                 rd_la99999999union_999999999999999999999999ie   specifiers_and_qualifiers_list {ecifiers_act_declaration_lit                 rd_laratrepions {\nroducible: 4194304\n  }}\n}\n\n"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 4
                    message: "\242]]\354\354\354\354\354\354=\354\354\354\354\354\354\354\354\354\354\354\354\354\354nullptr\354\354\354\354\354l\354\354\354\354\354lo{\n  specifiers_and_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\' {ist {\n    spqualifiers_\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifaliers_and_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'#\'\'\'\'\'\'\'\'\'\'\' {{\n    specifiers_aEEEEEEEEEEEEE    \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifaliers_and_qu+a\'\'\'\'\'\'\'\'\'\'ca\'\'#\'\'\'\'\'\'\'\'\'\'\' {\n  specifiers_and_qu+alifalifiers_li       "
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
          }
        }
      }
    }
  }
}
