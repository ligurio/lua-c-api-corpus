declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 9
                    message: "\242]]\354l\354a\354M=\354ca\354\354\354\354\377\377\377\377v\377\377va\354\354\354\354\377\377\377\377v\377\377v\377\377\377\377<\377ext>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377{}\n>{}\n>\377\377\377\377<\377exter\377constor {}\n>\n\377\377\377<\377ext>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377{}\n>{}\n>\377\377\377\377<\377exter\377\377  or {}\n>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377>   spe,\377<\377er\377\n>   spe\377\377<\377er8\377\377\377\377  or {}\n>  ext\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377<\377er\377\377,\377or {}\n>\377\377\377\377<s_ater\377\377\377\377\377  or {}\n>   spe,\377<\377er\377\377,\377\377  or {}\ns[[f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 9
                    expression: 0
                    message: "BBB]]g=#i>t[[]]go=#i>s[[f]]go=#i>st[[]]go=#i>st[[B]]g=#i>t[[][f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "]]l=1i^r[["
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
