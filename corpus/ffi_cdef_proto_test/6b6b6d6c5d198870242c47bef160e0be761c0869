declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      qualifiers_list {
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      qualifiers_list {
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      qualifiers_list {
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
            keyword_atomic: 0
          }
        }
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 0
          }
        }
      }
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 3
                    message: "a]]c=iso0[co or r0\377][X  or {}>r][[~f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 3
                    message: "a]]c=iso0[co or r0\377][X  or {}>r][[~f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 3
                    message: "a]]c=iso0[co or r0\377][X  or {}>r][[~f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 3
                    message: "a]]con[co or r0][0  or {}>r]to[["
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
