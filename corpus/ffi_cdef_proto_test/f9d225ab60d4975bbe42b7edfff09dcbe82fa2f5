declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            struct_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 2
                    expression: 2
                    message: "\242]]\354\354\354\354d_2ticonst\354\354\354\354\354\354\354\354{\n \354\354\354\354z\354\354\354=\354\354\354\354\2272,s_list {\n      q\354=false1{\n_Aligz\354\354\354=\354\354\354\354\2272,\354\377\377\377s_list {\n      q\354=\354\354\354\354\3541,\354\377\377\377\377\377\377\377\377\377st {\354z\354\354\354=\354\354\354\354\2272,\354x0\377s_list {\n      q\354=\354\354\354\354\3541,\354\377t\354\354\354\354\354\377\377st {\n        }\n      }\n  \n        }\n      }\n    }\n,\354\377\377\377\377\377\377\377S\377st {\354z\354\354P=\354\354\354\354\2272,\354\377\377\377s_li  }\n      }\n    }\n[[[ "
                  }
                }
                struct_declaration_list {
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 4
                    message: "$]]go=#i>=#i>#i>=#i>[[f$$]]go=#i>=#i>#i>i>#i>=#i>[[]]go=#i>=#i>#i>=#i>[[f"
                  }
                }
                struct_declaration_list {
                }
                struct_declaration_list {
                }
              }
            }
          }
        }
      }
    }
  }
}
declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
  }
}
