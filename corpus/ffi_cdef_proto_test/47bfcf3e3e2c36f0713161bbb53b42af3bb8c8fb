declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      qualifiers_list {
      }
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 0
                    message: ":]]\354\354\354=qual  goto\n i4  \t\354rs50=nd_0  goto\n i4  goto\n i \354ma\354ed\354\354\354z=\354l  goto\n i4  \354\354\354\354\354\354=nd_qual  goto\n i0  goto\n i4   goto\n_qual  goto\n i et [[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 2
                    expression: 0
                    message: "\242]]\354J\354=\354-\275a,nd_qual  goto\n i4  Name40=nd_qual  goto\n i0  goto\n i4  goto\n i g\354=nd_qual  goto\n i et [[[[[[[[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 0
                    message: ":]]\354\354\354=qual  goto\n i4  \t\354rs50=nd_0  goto\n i4  goto\n i \354ma\354ed\354\354\354z=\354l  goto\n i4  \354\354\354\354\354\354=nd_qual  goto\n i0  goto\n i4   goto\n_qual  goto\n i et [[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 0
                    message: ":]]\354\354\354=qual  goto\n i4  \t\354rs50=nd_0  goto\n i4  goto\n i \354ma\354ed\354\354\354z=\354l  goto\n i4  \354\354\354\354\354\354=nd_qual  goto\n i0  goto\n i4   goto\n_qual  goto\n i et [[["
                  }
                }
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            enum_type {
              enum_name {
                name: ""
                num: 4
              }
              constant {
                name: "_Decimal3"
                num: 2
              }
              constant {
                name: ""
                num: 2
              }
              constant {
                name: ""
                num: 1
              }
              constant {
                name: ""
                num: 6
              }
              constant {
                name: ""
                num: 0
              }
              constant {
                name: ""
                num: 4
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            struct_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_Alignas\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&\n\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\n\n\n\n\ngoto0\n\n\n\n\n\n\n\n\n\n\n\n }        specifiers_l   \n\n"
                  }
                }
                struct_declaration_list {
                  bit_field {
                    width: 0
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
