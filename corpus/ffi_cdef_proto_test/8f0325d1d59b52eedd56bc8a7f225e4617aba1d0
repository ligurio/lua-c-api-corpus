declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 2
                    message: "?]]    function cdef.SersListf()    fu[[z.f()]]    fdeclarations {\n  specifiers_and_qualifiers_list {\n    specifiers_and_qualifiers_list {\n      specifunction cdef.Speci:iersListf()    fu[[]?vof(    nction]?z.f()]]    function cdef.Speci:iersListf()iers_list {\n        specifiers_list {\n          type_specifier {\n            union_type {\n              struct_declaration_list {\n                struct_declaration_list {\n                  static_assertion {\n                    static_assert_2: 0\n                    expression: 2\n                    message: \"?]]    function cdef.SersListf()    fu[[z.f()]]    function cdef.Speci:iersListf()    fu[[]?vof(    f    nction]?z.f()]]    function cdef.Speci:iersListf()    fu0u\"\n                  }\n                }\n              }\n         u0 u  }\n          }\n        }\n      }\n    }\n  }\n}\n"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 2
                    message: "?]]    function cdef.SersListf()    fu[[z.f()]]    function cdef.Speci:iersListf()    fu[[]?vof(    nction]?z.f()]]    function cdef.Speci:iersListf()    fu0u"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
    initializers {
    }
  }
}
