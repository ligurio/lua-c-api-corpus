declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              name {
                name: ""
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 3
                    message: "-]]\354sin=   not [["
                  }
                }
                struct_declaration_list {
                  bit_field {
                    width: 0
                  }
                }
                struct_declaration_list {
                  bit_field {
                    width: 0
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          function_specifier {
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 3
                    message: "c]],nott {\n                struct_declaration_list {\n                  static_assertion {\n                    static_assert_1: 4\n                    expression: 0\n                    message: \"\\242]]{\\n  \\233*0000000000000==ns\\354 {\\n{\\n00==0000[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 4
                    message: ";]]and[["
                  }
                }
                struct_declaration_list {
                }
              }
            }
          }
        }
        specifiers_list {
          function_specifier {
          }
        }
      }
    }
  }
}
