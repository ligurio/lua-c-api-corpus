declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 1
                    expression: 2
                    message: "]]function f()u[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "%]]e {i {\n  f {pe {i {\n  f {\n  f{\n  ffi {\nAligitic_tydi{\n  ffi {\n \377\377.\377\377\377\377er {\n        er {\n            {\n  ffi{       arithmet{\n     ffi {\n pe {i_tyfi{\n  ffi {\n  ffi{\n  ffi {     arithmet{\n     thememticonste {\n  ffi {\n   airthmet{\n     ffi {\n pe {i_tyfi{\n  ffi {\n  ffi{\n  ffi {     arithmet{\n     themticonste {\n  ffi {\n  ffi{\n  ffitic_tyfi{\n  ffi {\n  ffi{\n  ffi {\ntyfi{\n  ffi {\n  ffi{\n    aritmet{\n     ffi {\n pe {i_tyfi{\n  ffi {\n  ffi{\n  ffi {     arithmet{\n     themticonste {\n  ffi {\n  ffi{\n  ffitic_tyfi{\n  ffi {\n  ffi{\n  ffi { ffi {     arithmet{\n emticonste {\n  ffi {\n   airthmet{\n     ffi {\n pe {i_tyfi{\n    ffi"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
    declarators {
      pointer_declarator {
        qualifiers_list {
          qualifiers_list {
          }
        }
        declarator {
          pointer_declarator {
            attr_spec_seq {
              keyword_fallthrough: 150994944
              keyword_maybe_unused: 249
            }
            qualifiers_list {
              qualifiers_list {
                type_qualifier {
                  keyword_const: 1
                  keyword_volatile: 0
                  keyword_restrict: 0
                }
              }
            }
            declarator {
            }
          }
        }
      }
    }
  }
}
