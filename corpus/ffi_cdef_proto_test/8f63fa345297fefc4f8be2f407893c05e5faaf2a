declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 0
                    message: "*]]\t\t\t\t\t\t\t\t\t\t(\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tI\t\t\t\t\t\tum"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              name {
                name: "X]]onst{[\242]=lnst{[\242]=lionst  }\n  [{[econst{[\242]=lnst,[\242]=lisuconst  }\n  [{[\242]=t{[\242]=lisuconst  } [{[eco{[econst{[\242]=lnst,[\242]=lisuco  }\n  [{[econseconsist0]=lnst,[\242]=lisuconst  }\n  [_list {\n       {]=l"
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 1
                    expression: 16128
                    message: "X]]onst{[\242]=lnst{[\242]=lionst  }\n  [{[econst{[\242]=lnst,[\242]=lisuconst  }\n  [{[\242]=t{[\242]=lisuconst  } [{[eco{[econst{[\242]=lnst,[\242]=lisuco  }\n  [{[econseconsist0]=lnst,[\242]=lisuconst  }\n  [_list {\n       {]=l"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
