declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              name {
                name: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                }
                struct_declaration_list {
                  static_assertion {
                    expression: 9
                    message: "?]]    function f()    fu[[]?]]    function f()        function f() function f() fu[[]?]]    function f()        function f() function f() function f()    fu[[]?]]    function f()        function f() function f()    function f()    fu[[]?]]    function f()        function f() function f()    fur[[=3i^ype=n f() (    fur[[=3i^ype=n f() (u"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 2
                    expression: 3
                    message: "]]go=#i>=#i>#i>=#i>=#i>#i>=#i>[[f$]]go=#i>=#i>#i>=#i>i>=#i>#i>=#i>[[f]]go=#i>=#i>#i>=[[f]]go=#i>=#i>#i>=#[[f$]]go=#i>=#i>#9i>=#i>i>=#i>#i>=#i>[[f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 2
                    expression: 2
                    message: "!]];\354=0-\275a_a,{\n[[!!]];\354=0-\275a_a,{\n[[0]];l=0-\275,{\n[[[0955E161E161]];l=0-z,{\n[{\n[[!!]];l=0-\275,{\n[[[0E161]];l=0-\275,{\n[[[0955EE161]];l=0-\275,{\n[[[05*0ers[0E161]];l=0-\275,{\n[[[055E161E161]];l=[[05*ers"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
