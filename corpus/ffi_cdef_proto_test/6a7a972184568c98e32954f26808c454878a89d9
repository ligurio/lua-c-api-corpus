declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 3
                    message: "?]]    function f()    fu[[]?]]    function f()    fur[[=3i^ype=n f() (u"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 9
                    message: "?]]    function f()    fu[[]?]]    function f()    function f() function f()    fur[[=pe=n f() (u"
                  }
                }
                struct_declaration_list {
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 10
                    expression: 9
                    message: "?]]    funct[[]?]]    function f()    function f() function f()    fur[[=pe=n f() (u"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 0
                    message: "[[[]]local   c    t0[[    t000"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    expression: 3
                    message: "]]I=[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 4
                    message: "[[[]]local   c    t0[[    t000"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
