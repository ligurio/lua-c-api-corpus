declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            struct_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 2
                    expression: 4
                    message: "$]]go=#i>=#i>#i>=#i>[[f$$]]go=#i>=#i>#i>=#i>[[f$]]go=#i>#i>=#i>#i>=#i>[[f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 2
                    expression: 2
                    message: "\242]]\354\354\354a\354\354=\354c\377<\377exter\377\377\377\377\377  or {}\n>   spe,A<\377er\377\n>   spe\377\377<\377er\377*\377\377\377>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377constor {}\n>\377\377\377\377<\377exe,\377goog\377\n>   spe\377\377<\377\n>   spe,\377<\377er\377\n>   spe\377\377<\377erz\254\377\377\377\377>   spe\377exter\377\377\377\377\377  or {}\n>   spe,\377\377  or {}\n>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377>   spe,\377<\377er\377\n>   spe/\377<\377or\377,\377.\377er\377\n>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377const\377\377va\354\354\354\354\377\377\377\377v\377/v\377\377\377\377<\377ext>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377{}\n>{}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377\377  or {}\n>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377\377v\377case\377\377<\377ext>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377{}\n>{}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377<\377er\377\n>   spez\377<\377er\377\377\377\377\377>   spe,\377<\377e>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377constor {}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377<\377\377>   spe,\377goog\377\n>   spe\377\377<\377er\377else  or {}\n>  exter\377\377const\377\377va\354\ns[[f"
                  }
                }
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            struct_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 1
                    expression: 33554434
                    message: "\242]]\354\354\354\354d_2ticoXXXXXX\354l\354\354\354{\n \354dName0\354=\354\354\354\354\2272,\354\377\377\377s_list {\n      q\354=\354\354\354\354\3541{\n     q\354=\354pecers\354\2272,\354/\377\377s_list {     q\354=\354pecers\354\2272,\354\377\377\377s_list {\n      q\354=\354\354\354\354\3541,\354\377st{\n      q\354=\354Name1,\354\377t\354\354\354\354o0\377st {\n        }\n      }\n  \n        }\n      }\n    }\n,Name8ool\377\377st {\354zal\354=G\344\354\354\2272,\354\377\377\377s_list {\n      q\354=\354\354\354\356\3541,{\n      q\354       }\n      }\n  \n      }\n      }\n    }\n[[[\354"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 4
                    message: "\242]]\354j\354\354=\354\354\354registers_list {\n    z\354\354\354=\354AA\354\2272,\354\377\377\377s_liss_list {\n      q\354=A\354\354\354\3541,\354\377\377\377:st {\354z\354\354\354=\354\354\354\354\2272,\354\377\377\377s_list {\n      q\354=A\354\354\354\3541,\354\377 }\n   }\n      }\n    }\n[[[\354"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
