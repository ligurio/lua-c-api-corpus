declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            struct_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 0
                    message: "c]]\354Name3itia\354\354:lifi\222rs_list {\n   ############\377j\377:\377ier{\n   ############################ier*s_l+ist {\n  }\n      }\n    }\n    speci[[[[[[    }\n           }\na\nF"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 1
                    expression: 0
                    message: "\242]]\354\354\354\354gouL\354\354\354\354\354tt0\354\354=\354\354\3541\377\3770000009551615-specifiers-000000000000001844674404467440/3709551615-specifier,s_000000000955*00000,00000-000000000000001000000000000000000000,018445-s\377\377\377\377\377\377\377\377\377\377\377\377constun.\377extern\377\377\377+iers_a,nd_quanifiers_list {\n      qualifiers_list {\n               fu\354l      }\n    }%\n[[[[[[[[pecifier  n"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "[[[]]local   c local   c  t0[[V t000]]local   c  local   c  t0[[V t000"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "[[[]]local   c local   c  t0[[V t000]]local   c  local   c  t0[[V t000"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
