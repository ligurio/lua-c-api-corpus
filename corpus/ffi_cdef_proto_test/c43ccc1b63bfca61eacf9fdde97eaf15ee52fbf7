declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 9
                    message: "?]]    functionf()   fu[[]?]]    function f()   function f() function f() function f()    fu[[]?]]    function f()    function f() function f()    fur[[=pe=n"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 3
                    message: "]]go=#i>=#i>#i>=#i>=#i>#i>=#i>[[f$]]go=#i>=#i>#i>=#i>i>=#i>=#i>[[f]]go=#i>=#i>#i>=[[f$$]]go=#i>=#ii>#i>=#i>i>=#i>#i>=#i>[[f]]go=#i>=#i>i>=#i>#9i>=#i>i>=#i>#i>=#i>[[f"
                  }
                }
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      qualifiers_list {
        qualifiers_list {
          type_qualifier {
            keyword_volatile: 4096
          }
        }
      }
    }
  }
}
declarations {
  attr_spec_seq {
    keyword_fallthrough: 6291456
  }
}
declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 4
                    message: "]]do p[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 0
                    message: "&]]it=l-l  goto n goto l  goto\n io\n t[[  gg"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
