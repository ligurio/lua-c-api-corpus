declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            arithmetic_type {
              type_char: 0
            }
          }
        }
        specifiers_list {
          storage_class_specifier {
            storage_class_typedef: 0
          }
        }
      }
    }
  }
  declarators_and_initializers {
    declarators {
      declarator_attr {
        name {
          name: ""
          num: 0
        }
        attr_spec_seq {
          keyword_maybe_unused: 268435456
        }
      }
    }
  }
}
declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 0
                    message: "\242]]\354_4(\354ou0,not l,n_eci4(\354ou0,not l,noti4(\354ou0,not l,u0,not l,noti4(\354ou0,not l,n_ecoti4(\354ou0,not l,n_eci4(\354ou0,not l,not l,u0,nou0,not l,no,not l,n_eci4(Bou0,not l,nnoti(\354ou0,not l,u0,not l,noti4(\354ou0,not l,n_eci4(\354ou0,not l,noti4(\354ouoti4(\354ou0,not l,n_eci4(\354ou0,not l,nu0,not l,not l,u0,not l,n0,not l,not  oDec_eci4(\354ou0,not l,not l,u0,not l,noti4(\354oueci4(\354ou0,not l,nu0,not l,not l,u0,not l,n0,not l,not  oDec_eci4(\354ou0,not l,not l,u0,not l,noti4(\354ou0,not l,n_eci4(lou0,not l,noti4(\354ou0,not l,not  oDec_eci4(\354ou0,not l,noti4(\354ou0,not l,n_eci4(\354ou0,not l,not l,u0,nou0,not l,noti0,not l,n_eci4(Bou0,n_eci4(Bou0,not l,nnoti(\354ou0,not_eci4(\354ou0,not l,noti(\354ou0,not l,u0,not l,noti4(\354ou0,not l,u0,nou0,not l,noti0,not l,n_eci4(Bou0,not l,noti4(\354ou    es"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            void_type: 0
          }
        }
      }
    }
  }
  declarators_and_initializers {
    declarators {
    }
  }
}
