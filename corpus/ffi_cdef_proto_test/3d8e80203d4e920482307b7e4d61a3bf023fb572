declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 1
                    expression: 1
                    message: "\242]]st\354\354\354cat {\n       #qrs_lit {false\n       }{\n       #qualifiers_list {false\n        }\n      }\n    }t { t {false\n     }{list {false\n        }\n      }\n    }\n  [[[[[[\354\n    spato[[[[[[[[   {fal"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "^]]y=3i^[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 0
                    message: "\242]]st\354\354\354cat {\n       #qrs_list {false\n       }{\n       #qualifierslsi_t {false\n        }\n      }\n    }t { t {false\n        }{\n             }{\n       #qualifierslsi_t {false\n        }\n      }\n    }t { t {false\n        }{\n       #qualifiers_list {false\n        }\n      }\n    }\n    spato[[[[[[[[\354\n    st {falseName0        #qrs_list {false\n [[[[[\354\n    spato[[[[[[[[     l\354"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 0
                    message: "\242]]\354Name4\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354.\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354{\n  specifiers_and_qu+a\'\'\'\'\'\'\'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifaliers_and_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'#\'\'\'\'\'\'\'\'\'\'\' {\n  specifiers_and_qu+alifalifiers_list {\n    spnd_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\'\'\'\'\'\'re\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifaliers_and_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'#\'\'\'\'\'\'\'\'\'\'\' {\n  specifiers_and_qu+alifalifiers_list {\n    specifiers_aEEEEEEEEEEEEE    \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifaliers_and_q\'\'\' {\n  specifiers_and_qu_Alifalifiers_list {\n    specifieecifiers_aEEEEEEEEEEEEE    \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifaliers_nd_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'#\'\'\'\'\'\'\'\'\'\'\' {\n  speci        "
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
