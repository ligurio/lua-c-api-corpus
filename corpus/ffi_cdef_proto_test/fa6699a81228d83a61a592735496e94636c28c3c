declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 1
                    expression: 2
                    message: "]]r=l[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 1
                    expression: 1
                    message: " ]]~=6,l[[i]]~=6,l[[i"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    expression: 1
                    message: " ]]~=6,l[[i]]~=6,l[[,i]]~=6,l[[i"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 9
                    expression: 2
                    message: "?]]    function f()    fu[[]?]]    function f()        function f() function f()    fur[[=3i^ypfur[[=3i^ypf() (u"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 9
                    expression: 9
                    message: "?]]    function f()    fu[[]?]]    function f()        function f() function f()    fur[[=3i^ypfur[[=3i^ypf() (u"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "?]]    function f()    fu[[]?]]    function f()        function f() function f()    fur[[=3i^ypfur[[=3i^ypf() (u"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
