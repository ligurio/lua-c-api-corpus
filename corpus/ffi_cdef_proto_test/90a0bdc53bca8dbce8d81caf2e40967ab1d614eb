declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 8
                    expression: 0
                    message: "[]]local   c    t0[[[[]]local   c    t0[[[[[]]local   c    t0[[[[]]local   c    t0[[]\243\223\220declarations {\n  specifiers_and_qualifiers_list {\n    specifiers_and_qualifiers_list {\n      specifiers_list {\n        specifiers_list {\n          type_specifier {\n            typeof_operator {\n            }\n          }\n        }\n                 expression: 0\n                    messageauto]]local   c    t0[[[[]]local   c    t0[[[[[]]local   c    t0[[[[]]local   c    t0[[]\\243\\223\\220\\234\\236\\223 t000\"\n                  }_Alig            }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}essage: \"[]]local   c    t0[[[[]]local   c    t0[[[[[]]local   c    t0[[[[]]local   c    t0[[]\\243\\223\\220\\234\\236\\223 t000\"\n                  }\n                }\n                struct_declaration_list {\n                  static_assertion {\n                    static_assert_1: 0\n       t             expression: 0\n                    message: \"[]]local   c    t0[[[[]]local   c    t0[[[[[]]local   c    t0[[[[]]local   c    t0[[0]\\243\\223\\220\\234\\236\\22tions6150000              }\n                }\n        0 0   "
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 8
                    expression: 8
                    message: "]]go=#i>=#i>#i>=[[f$$]]go=#i>=#i>#i>=#i>[[f$]]go=#i>=#i>#i>=#i>i>=#i>#i>=#i>[[f]]go=#i>=#i>#i>=[[f$$]#i>#i>i>#i>=#ii>=#i>[[f"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
