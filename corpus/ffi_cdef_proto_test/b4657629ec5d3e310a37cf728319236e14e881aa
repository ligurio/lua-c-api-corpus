declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      qualifiers_list {
        qualifiers_list {
          type_qualifier {
          }
        }
      }
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 3
                    message: "]]er=3i^r[[]]\354=3i^r[[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 3
                    message: "^]]^r^r^ri^iz[[]]^z[[r("
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 524288
                    expression: 0
                    message: "\242]]\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354{\n  specifiers_and_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\' {ist {\n    specifiers_and_qualifiers_\'\'\'\'\'\'\'\'\'\'\'\'\'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifaliers_and_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'#\'\'\'\'\'\'\'\'\'\'\' {\n  specifiers_and_qu+alifalifiers_list {\n    spnd_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\' {ist {\n    specifiers_and_qualifiers_\'\'\'\'\'\'\'\'\'\'\'\'\'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifaliers_and_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'#\'\'\'\'\'\'\'\'\'\'\' {\n  specifiers_and_qu+alifalifiers_list {\n    specifiers_aEEEEEEEEEEEEE    \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifaliers_and_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'#\'\'\'\'\'\'\'\'\'\'\' {\n  specifiers_and_qu_Alifalifiers_list {\n    specifieecifiers_aEEEEEEEEEEEEE    \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\' {\n  specifiers_and_qu_Alidecl\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifa0000-0000000000000018446744044674407300000184467440446744073709551615-s\\377_list {\n    specifiers_aEEEarationsE    "
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
  }
  attr_spec_seq {
  }
}
declarations {
  specifiers_and_qualifiers_list {
  }
  attr_spec_seq {
    keyword_nodiscard: 660340736
    keyword_unsequenced: 0
    keyword_reproducible: 0
  }
}
declarations {
  attr_spec_seq {
    keyword_fallthrough: 8
    keyword_nodiscard: 262144
    keyword_noreturn_2: 0
  }
}
