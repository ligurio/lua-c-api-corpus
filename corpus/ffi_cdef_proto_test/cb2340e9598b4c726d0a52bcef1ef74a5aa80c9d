declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      qualifiers_list {
      }
      specifiers_list {
        specifiers_list {
          function_specifier {
          }
        }
        specifiers_list {
          type_specifier {
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          function_specifier {
          }
        }
        specifiers_list {
          type_specifier {
            struct_type {
              attr_spec_seq {
                keyword_deprecated: 0
                keyword_fallthrough: 0
              }
              struct_declaration_list {
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          function_specifier {
          }
        }
        specifiers_list {
          type_specifier {
            struct_type {
              attr_spec_seq {
                keyword_deprecated: 0
                keyword_fallthrough: 0
              }
              struct_declaration_list {
              }
            }
          }
        }
      }
    }
  }
}
declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          function_specifier {
          }
        }
        specifiers_list {
          type_specifier {
            struct_type {
              attr_spec_seq {
                keyword_deprecated: 0
                keyword_deprecated_reason: 0
                keyword_fallthrough: 0
              }
              struct_declaration_list {
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          function_specifier {
            keyword_noreturn: 32768
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 2
                    message: "]]r=l[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 1
                    message: "]]~=6,l[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "\242]]eAlt{0==\276==5=t0i"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
    initializers {
    }
  }
}
