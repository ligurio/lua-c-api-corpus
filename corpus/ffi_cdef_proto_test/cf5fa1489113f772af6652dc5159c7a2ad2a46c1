declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "Name0\r\nme0\r\name0\r\n    Name0\r\name0\r\n    ame0\r\n me0\r\name1\r\name0\r\nme0\r\name0\r\nme0\r\name0\r\n  \r\ne0\r\n    ame0\r\n    reName0\r\name0\r\name0\r\nme0\r\name0\r\neName0\r\name0\r\n    ame0\r\n    reName0\r\name0\r\n       / ame0\r\neName0\r\name0\r\n    ame0\r\n    reName0\r\name0\r\n   /  ="
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  bit_field {
                    width: 0
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 7
                    expression: 0
                    message: "]]go=#i>=#i>#i>=[[f$$]]go=##i>=#i>#i>=[[f$$]]go=#i>=#i>#i>=#i>[[f$]]go=#i>=#i>#i>=#i>i>=#i>#i>=#i>[[f]]go=#i>=#i>#i>=[[f$$]]go=#i>=#ii>#i>=#i>i>=#i>#i>=#i>[[f]]go=#i>=#i>#i>=[[f$$]]go=#i>=#i>#i>=#i>[[f$]>#i>=#i>[[f$]]go=#i>=#i>#i>=#i>i>=#i>#i>=#i>#i>=#i>[[f$]]go=#i>=#i>#i>=#i>i>=#i>#i>=#i>[[f]]go=#i>=#i>#i>=[[f$$]]go=#i>=#ii>#i>=#i>i>=#i>#i>=#i>[[f]]go=#i>=#i>#i[[>=$f$]]go=#i>=#i>declarations {\n  specifiers_and_qualifiers_list {\n    specifiers_and_qualifiers_list {\n      specifiers_list {\n        specif#i"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
