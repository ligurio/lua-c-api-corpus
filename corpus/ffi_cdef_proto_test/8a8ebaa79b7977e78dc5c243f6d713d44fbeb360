declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 3
                    message: "\242]]\354\354[[[]]\354\354[[\rs[\rs]]:n[[\r\r ]]\354\354[[\rs]]:\354n[[\r= [[!s]]:n[[\r- ]] [[[][]]\354\354[[\rs]]:n[[]]:\354n[[\r= [[!s]]:n[[\r- ]] [[[][]]\354\354[[\rs]]:n[[nst [[[]]\354\354[[\rs]]:n[[\r ]]\354\354[[\rs]]\354\354_Algl   [[  ]]:n[[\r\r ]]\354\354[[\rs]]\354\354[[,s]]const [[[]]\354\354[[\rs[\r\r ]]\354\354[[\rs]]:\354n[[\r= [[!s]]:n[[\r- ]] [[[][]]\354\354[[Ds]]:n[[nst [[[]]\354\354[[!s]]:n[[\r ]]\354\354[[\rs]]\354\354_Algl   [[  ]]:n[[\r\r ]]s0[[\rs]]\354\354[[,s]]const [[[]]\354\354[[\rs]]:n[[\r\r ]]\354\354[[\rss "
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 3
                    message: "]]t,t=\354[[]]t,\354=a[[]]t,t=\354[[]]t,t=\354[["
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 0
                    message: "X]]\354\354ifiers_ {   ###### #########################[[{"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
