declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "U]] f ,x,mx.\n mx.\n ffdeclarations {\n  specifiers_and_qualifiers_list {\n    speci, ffi, f ,x,mx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,mx.\n ffi,  ffi,\n ffmx.\n ffi, ffi, f ,x,ffi, ffi, f ,mx.\n ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffifiers_and_qualifiers_list {\n      specifiers_list {\n        specifiers_list {\n          type_specifier {\n            union_type {\n              struct_declaration_list {\n                struct_declaration_list {\n                  static_assertion {\n                    sti, f ,x,mx.\n ffi,  ffi,\n ffmx.\n ffi, ffi, f ,x,ffi, ffi, f typedef ffi, ffi, f ,x,mx.\n ffi, x,mx.\n ffi, ffi, f ,x,mx.\n ffi,  atic_asserffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,pres -ision: 2\n                    message: \")]]r{\\n \\\"\\\"}tye{\\\" }\n        }\n      }\n    }\n "
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
