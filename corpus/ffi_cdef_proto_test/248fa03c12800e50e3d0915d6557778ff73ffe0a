declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 3
                    message: ",]]l= not not g l= not not not g l= not not not not not not not not not not not g o[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 4
                    message: "\242]]C\354\354\354\354\354\354\354\354\354{\n _Alignas=\354{\n      q\354=false1{\n \354\354b=\354\354\354\354\2272x0\377j0s_list {\n      q\354=\354\354\354\3541i {\n    \354z\354\354\354=\354\354}\n      }\n    }\n,#\377_Alignasst {\354z\354\354P=l\354\354\354\2272li  }\n      }\n    }\354\354l\354{\n \354\354\354\354zu\354\354=\354+\354\354OOOOOOOO_list {\n      q\354=f{\n \354\354\354=l\354h\354\2272x0\377\377\377s_list {\n      q\354=f\354\354_al2rs_list {\nName3zl\354\354=\354\354\354\354%2,\354=_list {\n      q\354=\354g      }\n}\n      }\n    }\n,const {\n      q\354=\354.l2\3541L_Aafi\377+s_li  }\n      }\n    }\n[[[7"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
