declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            struct_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "\242]]goiidXXXXXoooo\354\354{\n ttttal2\354=zwh\354\2272,\354\377\377\377s_list {\n      q\354=\354{\n  q0=\354pecerx0ex,\354\377\377\377s_list {     q\354=x0ecers\35422,\354\377\37721{\n     \n       q\354=Kpecers2\2272,_Dec1_list {          q\354=\354pecers\354\2272,\354\377  }\n         }\n      }\n    }\n,LtN{\354z0\354\354=G\344\354\354i2,\354\377uns_list {\n      q\354=\354,\354\377tst {\n            q\354=\354{\n  q0=\354pecerx0ex,\354\377\377\377s_list {     q\354=x0ecers\35422,\354\377\37721{\n     \n       q\354=Kpecers2\2272,_Dec1_list {          q\354=\354pecers\354\2272,\354\377  }\n         }\n      }\n    }\n,LtN{\354z0\354\354=G\344\354\354i2,\354\377uns_list {\n      q\354declarations {\n  specifiers_and_qualifiers_list {\n    specifiers_and_qualifiers_list {\n      specifiers_list {\n        specifiers_list {\n          type_specifier {\n            arithmetic_type {\n              type_int_2: 0\n            }\n          }\n   =\354,\354\377tst {\n           }\n        specifiers_list {\n          storage_class_specifier {\n            storage_class_typedef: 0\n          }\n        }\n      }\n    }\n  }\n  declarators_and_initializers {\n    declarators {\n      array_declarator {\n        keyword_static: 0\n        qualifiers_list {\n          qualifiers_list {\n            type_qualifier {\n              keyword_atomic: 0\n            }\n          }\n        }\n        expression: 0\n      }\n    }\n  }\n}\ndeclarations {\n  specifiers_and_qualifiers_list {\n    specifiers_and_qualifiers_list {\n      specifiers_list {\n        specifiers_list {\n          type_spec                }\n      }\n  \n  ifier {\n            arithmetic_type {\n              type_int_2: 0\n            }\n          }\n        }\n      }\n    }\n  }\n  declarators_and_initializers {\n    declarators {\n      array_declarator {\n        keyword_static: 0\n        qualifiers_list {\n          qualifiers_list {\n            type_qualifier {\n              keyword_atomic: 2\n            }\n          }\n        }\n        expression: 1024\n      }\n    }\n  }\n}\ndeclarations {\n  specifiers_and_qualifiers_list {\n    specifiers_and_qualifiers_list {\n      qualifiers_list {\n        qualifiers_list {\n          type_qualifier {\n            keyword_atomic: 0\n          }\n        }\n      }\n    }\n  }\n  declarators_and_initializers {\n    declarators {\n      declarator_attr {\n        name {\n          name: \"\"\n          num: 0\n        }\n      }\n    }\n    declarators {\n      declarator_attr {\n        name {\n          nam   }\ne: \"\"\n          num: 0\n        }\n      }\n    }\n    declarators {\n      declarator_attr {\n        name {\n          name: \"\"\n          num: 0\n        }\n      }\n    }\n    declarators {\n      declarator_attr {\n        name {\n          name: \"\"\n          num: 0\n        }\n      }\n    }\n    declarators {\n      declarator_attr {\n        name {\n          name: \"\"\n          num: 0\n        }\n      }\n    }\n    declarators {\n      declarator_attr {\n        name {\n          name: \"\"\n          num: 0\n        }\n          }\n    }\n[[  }\n    }\n    declaratoQ6rs {\n      declarator_attr {\n        name {\n          name: \"\"\n          num: 0\n        }\n      }\n    }\n  }\n}\n"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
