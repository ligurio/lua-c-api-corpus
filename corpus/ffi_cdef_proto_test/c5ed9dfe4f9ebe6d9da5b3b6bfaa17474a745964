declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              name {
                name: ""
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 0
                    message: "?]]    function f()    fu[[]]e=3i^r[[]]ertyp=3i^r[[=3i^ype=3i^r[[]]ertyp=3i^r[[]]e=3i^r[[]]ertyp=3i^r[[]]e=3i^i^r[[]]e=3i^r[[]nction f()(   fun?]]    function f()    fu[[]]e=3i^r[[]]ertyp=3i^r[[=3i^ype=3i^r[[]]e=3i^r[[]]ertyp=3i^r[[]]e=3i^r[[]]ertype=3i^r[[]]e=3i^i^r    function f()    fu[[]]e=3i^r[[]]ertyp=3i^r[[=3i^ype=3i^r[[]]ertyp=3i^r[[]]e=3i^r[[]]ertyp=3i^r[[]]e=3i^i^r[[]]e=3i^r[[]nction f()rtyp=3i^r[[]]e=3i^r[[]]ertyp=3i^r[[]]e=3i^i^r[[]]e=3i^r[[]nction f()(   fun?]]    function f()    fu[[]]e=3i^r[[]]ertyp=3i^r[[=3i^ype=3i^r[[]]e=3i^r[[]]ertyp=3i^r[[]]e=3i^r[[]]ertype=3i^r[[]]e=3i^i^r    function f()    fu[[]]e=3i^r[[]]ertyp=3i^r[[=3i^ype=3i^r[[]]ertyp=3i^r[[]]e=3i^r[[]]ertyp=3i^r[[]]e=3i^i^r[[]]e=3i^r[[]nction f()(   fun?]]    function f()    fu[[]]e=3i^r[[]]ertyp=3i^r[[=3i^ype=3i^r[[]]e=3i^r[[]]ertyp=3i^r[[]]e=3i^r[[]]ertype=3i^r[[]]e=3i^i^r[[]ction f() ((   fun?]]    function f()    fu[[]]e=3i^r[[]]ertyp=3i^r[[=3i^ype=3i^r[[]]e=3i^r[[]]ertyp=3i^r[[]]e=3i^r[[]]ertype=3i^r[[]]e=3i^i^r[[]ction f() ([[]ction f() (u"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 2
                    message: "!!]];\354=0-\275a_a,{\n[[]];\354=0-\275a_a,{\n[[[[0955E161E161]];l=0-_a,{\n[[[0E161]];l=0-\275,{\n[[[0961]];l=0-\275,{\n[[0E161]];l=0-\275,{\n[[[0961]];l=0-\275,{\n[[[05*0ers[0E161]];l=0-\275,{\n[[[0955E161E1]];l=0-\275,{A[[[05*0ers"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
