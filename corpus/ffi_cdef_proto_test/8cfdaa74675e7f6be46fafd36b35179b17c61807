declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 0
                    message: "U]] f ,x,mx.forx.\n ffi, ffi, f ,x,_BitInti, ffi, f ,x,ffi, ffi, f ,x,mx.ype {\n        f ,x,mx.\n ffi,  ffi,\n ffmx.\n ffi, ffi, f ,x,  ffi, ffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffif ,x,NlLaximN, x,mx.\n ffi,fi, f ,x,mx.\n ffii, ffi, f ,x,mx.\n ff, f ,x,mfi, ffif ,x,mfi, ffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f , f ,x,mx.\n ffi, ffi, f ,x,m,f ,x,ffi, ffi, f ,mx.\n ffi, ffi, f ,x,mfi, ffif ,x,mfi, ffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,mxfi,i, ffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,mxfi, f ,x,ffi, ffi, f ,x,mxfi, ffi, f ,x,mx.f ,x,mx.\n ffi, ffi, f ,x,mx.\n ffi, x,mfi, ffi, f ,x,mxfi, ffi, f ,x,mx.f ,x,mx.\n ffi, ffi, ffi, f ,x,ffi, ffi, f ,xi, f ,x,mx.ffi -i -i"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
  }
}
