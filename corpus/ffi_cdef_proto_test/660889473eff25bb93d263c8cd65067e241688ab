declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 6
                    expression: 0
                    message: "]]local  c t0[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 6
                    expression: 6
                    message: "?]] function f()r[[c"
                  }
                }
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 6
                    expression: 6
                    message: "?]] function f()r[[c"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 4
                    message: "]]c=[["
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 6
                    expression: 0
                    message: "]]end e[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 6
                    expression: 0
                    message: "]]end e[["
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
