declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          alignment_specifier {
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 7
                    expression: 8
                    message: "\242]]\354\354[[\rs]]\354n[[\rs]]\354\354[[2\rS_Aligl]]\354n[[\rregister\377\377\377\003]\354\354[[\rs]]\3540[[2\rS_Alig]]\354\354[[\rs[\rs]]\354l[[2-.\r\r   [[  [[[]]\354\354[[[\rs]]\354n[[\r\r ]]\n\354[[Msg]]n[[\r\r ]]\354l[[Msg]]_7[[\rs]]\354\354[[2\r.\r\r   [[  [[[]]\354\354[[-S[[2ig]]_7[[\rs]]\354l[[2ig]]_7[[:s]]\nl[[2\r[.   [\r]  [[[]]\354\354[[[\rs]]\354n[[\r\r ]]\354\354[[Ms]]l\354[[2\rS_Alig]]\354\354\354[[2\r.\r\r   [[  [[[]]\354\354[[\rs]]\3542[[2\rS_Alig"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 8
                    expression: 8
                    message: "\242]]\354\354[[\rs]]\354n[[\rs]]\354\354[[2\rS_Aligl]]\354n[[\rregister\377\377\377\003]\354\354[[\rs]]\3540[[2\rS_Alig]]\354\354[[\rs[\rs]]\354l[[2-.\r\r   [[  [[[]]\354\354[[[\rs]]\354n[[\r\r ]]\n\354[[Msg]]n[[\r\r ]]\354l[[Msg]]_7[[\rs]]\354\354[[2\r.\r\r   [[  [[[]]\354\354[[-S[[2ig]]_7[[\rs]]\354l[[2ig]]_7[[:s]]\nl[[2\r[.   [\r]  [[[]]\354\354[[[\rs]]\354n[[\r\r ]]\354\354[[Ms]]l\354[[2\rS_Alig]]\354\354\354[[2\r.\r\r   [[  [[[]]\354\354[[\rs]]\3542[[2\rS_Alig"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 8
                    expression: 8
                    message: "\242]]\354\354\354NN\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"(\"\"\"\"\"pecers_l\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"NNNNNNNNNNN\246NNNNNNNNNN\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"x0_Dec\"\"\"\"\"\"\"\"\"\"vo\"\"\"\"\"\"\"\"\333\335\335\335\"\"\"\"\"\"!\"\"\"\"\000\000\377\377\"\"\"\"\"\"lo\"\"(const\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"[[[[ers[cifiers_anpecifiers_and"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 8
                    expression: 8
                    message: "\242]]\354NN\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"(\"\"\"\"\"\"\"fie\"\"\"\"\"x0_Dec\"\"\"extern\"vo\"\"\"\"\"\"\"\"\333\335\335\335\"[[[[ers[cifier}\n        }\n      }\n    }\n  }\n  declarators_and_initializers {\n    declarators {\n      array_declarator {\n        keyword_static: 0\n        qualifiers_list {\n        }\n   specifiers_and_qualifiers_list {\n    specifiers_and_qualifiers_list {\n      specifiers_list {\n        specifiers_list {\n          type_specifier {\n            union_type {\n              struct_declaration_list {\n      }\n    }\n    declarators {\n      array_declarator {\n        keyword_stasiers_and"
                  }
                }
                struct_declaration_list {
                }
                struct_declaration_list {
                  bit_field {
                    width: 0
                  }
                }
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          storage_class_specifier {
            storage_class_thread_local_2: 0
          }
        }
      }
    }
  }
}
