declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 9
                    expression: 9
                    message: "?]]    function f()        function f() function f()r[[=3i^ype=n f() (u"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 9
                    message: "]_]             s
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 9
                    message: "?]]    function f()    fu[[]?]]    function f()        function f() function f() fu[[]?]]    function f()        function f() function f() function f()    fu[[]?]]    function f()        function f() function f()    function f()   u[[]?]]    function f()        function f() function f()    fur[[ f() (u"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 0
                    message: "]]ffi"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
