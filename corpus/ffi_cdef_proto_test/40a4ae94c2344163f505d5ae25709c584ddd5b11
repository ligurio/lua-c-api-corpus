declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      qualifiers_list {
        qualifiers_list {
          type_qualifier {
            keyword_const: 0
          }
        }
      }
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "?]]function f()u[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "U]] f ,x,mx.\n mx.\n ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,xmx.\n ffi,  ffi,\n fx.\n ffi, ffi, f ,x,ffi, ffi, f ,mx.\n ffi, ffi, ff ,x,ffi, ffi, f ,x,m,x,mx.\nfi, f ,x,mx.\n ffi,  ffi, ffi, f ,Ax,ffi, ffi, f ,x,mstatic, f ,x,mx.fi, f=fi, f ,Ax,ffifi,i -i"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      qualifiers_list {
        qualifiers_list {
          type_qualifier {
            keyword_const: 0
          }
        }
      }
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              attr_spec_seq {
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "?]]function f()u[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "U]] f ,x,mx.\n mx.\n ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,xmx.\n ffi,  ffi,\n fx.\n ffi, ffi, f ,x,ffi, ffi, f ,mx.\n ffi, ffi, ff ,x,ffi, ffi, f ,x,m,x,mx.\nfi, f ,x,mx.\n ffi,  ffi, ffi, f ,Ax,ffi, ffi, f ,x,mstatic, f ,x,mx.fi, f=fi, f ,Ax,ffifi,i -i"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
