declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            struct_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 4
                    message: "\242]]\354l\354x1_2ticonst\354\354else\354\354{\n \354\354\354\354z\354\354\354=\354\354\354\354\2272,\354\377\377\377s_list {\n      q\354=\354zzzz0{\ndo\354\354\354z\354\354\354=\354\354s02,\354\377\377\377s_ {\n      q\354=\354\3540\354\3541,q-2,Name0_list {\n      q\354=\354\354\354\354l {\n      q\354=\354\354\354\354\3541,\354Rst{\n      qd=\354\354\354\354z1fase2\377+s_list{\n        }\n      }\n  \n        }\n      }\n    }\n,{\354z\354\354\354=\354\344\354\354z1fase2\377_list   }\n      }\n  }\n    }\n[[[\354"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 4
                    message: "a]]Name0_l     {Name5=\3541,\354\377*_AliCCCCt {\354z\354nu=\354\354\354\354\2272,\377s_ers_and_qua {\354z\354nu=\354\354\354\354\2272,\354\377X\377s_list {typq\354=\3542ty\3540,s2t {\354z\354nu=\354l\354,st {\n      q\354=\3542ty\35410,s {\354q\354=\3542ty\35410,s2t,s {\354q\354=\3542tName2"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
