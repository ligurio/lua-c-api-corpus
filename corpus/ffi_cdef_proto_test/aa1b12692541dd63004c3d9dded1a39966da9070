declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            arithmetic_type {
              type_long_long_int_1: 0
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 3
                    message: "\242]]\3548[[\rs]]\354n[[\rs]]\354\354[[2\rS_Aligl]]\354n[[\r\r \r   [[  [[[]]\354\354[[\rs]]\354n[[\r\r ]]\354\354[[\rs]]\354\354[[\rs]]\354\354[[\r\r \r   [[  [[[]]\354\354[[\rs]]\354n[[#S ]]s0[[\rs]]\354\354[[2\rS_Alig]]_7[[\rs]]\354\354[[yype_  [[[]]\354l[[\rs]]\354n[[\rs ]]\354\354[[\rs]]\354\354[[2\rS_Aligl]]\354n[[\r\r \r   [[  [[[]]b\354[[\rs]]\354n[[\r\r ]]\354\354[[\rs]]\354\354[[1\rS_Aligl]]\354n[[  [[[]]\354\354[[\rs]]\354n[[\r\r ]]\354\354[[\rs]]\354\354[[2\rSOAlig]]\354\354[[\rs]]\354\354[[1ig]]_7[[\rs]]\354\354[[2\r\r\r   [[  [[[]]\354\354[[\rs]]\354\354[[ruct_dec"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              name {
                name: ""
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 0
                    message: "\242]]\354\354\354a\354\354=\354c\377<\377exter\377\377\377\377\377  or {}\n>   spe,A<\377er\377\n>   spe\377\377<\377er\377*\377\377\377>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377constor {}\n>\377\377\377\377<\377exe,\377goog\377\n>   spe\377\377<\377\n>   spe,\377<\377er\377\n>   spe\377\377<\377erz\254\377\377\377\377>   spe\377exter\377\377\377\377\377  or {}\n>   spe,\377\377  or {}\n>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377>   spe,\377<\377er\377\n>   spe/\377<\377or\377,\377.\377er\377\n>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377const\377\377va\354\354\354\354\377\377\377\377v\377/v\377\377\377\377<\377ext>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377{}\n>{}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377\377  or {}\n>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377\377v\377case\377\377<\377ext>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377{}\n>{}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377<\377er\377\n>   spez\377<\377er\377\377\377\377\377>   spe,\377<\377e>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377constor {}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377<\377\377>   spe,\377goog\377\n>   spe\377\377<\377er\377else  or {}\n>  exter\377\377const\377\377va\354\ns[[f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "]]e=3i^r[[]]ert,p=3i^r[[]]e=3i^r[[]r[[]]ertyp=3i^r[[]]e=3i^r[[]]ert\343p=3i^r[[[["
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
declarations {
  declarators_and_initializers {
    initializers {
    }
  }
}
