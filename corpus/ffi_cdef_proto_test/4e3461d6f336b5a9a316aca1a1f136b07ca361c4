declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 0
                    message: "?z]]Name8i4=\354exc,not not exc,not not [[_]$_Dla]]\354_Deci4=x,not not [[lexlex]?z]]i4=x,not not [[lexlex]?z]]l_Deci4=#-not not [[_]$_Dlas]]\354_Deci4=xo,not not [[lassx]?z]]l_Deci4=#-noto,not not [[lass_spes"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "?z]]Name8i4=\354exc,not not [[_]$_Dla]]T_Deci4=x,not not [[z]]A0Deci4=\354exc,not not [[_]$_Dla]]\354_Deci4=x,not not [[lexlex]?z]]i4=x,not not [[lexlex]?z]]l_Deci4=#-not not [[_]$_Dlas]]\354_Deci4=xo,not not [[lassx]?z]]l_Deci4=#-noto,not not [[lass_spes"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "?z]]Name8i4=\354exc,not not exc,not not [[_]$_Dla]]\354_Deci4=x,not not [[lexlex]?z]]i4=x,not not [[lexlex]?z]]l_Deci4=#-not not [[_]$_Dlas]]\354_Deci4=xo,not not [[lassx]?z]]l_Deci4=#-noto,not not [[lass_spes"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "?z]]Name8i4=\354exc,not not exc,not not [[_]$_Dla]]\354_Deci4=x,not not [[lexlex]?z]]i4=x,not not [[lexlex]?z]]l_Deci4=#-not not [[_]$_Dlas]]\354_Deci4=xo,not not [[lassx]?z]]l_Deci4=#-noto,not not [[lass_spes"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 6
                    expression: 6
                    message: "\242]]\354_4(\354ou0,not l,n_eci4(\354ou0,not l,noti4(\354ou0,not l,u0,not l,noti4(\354ou0,not l,n_eci4(lou0,not l,noti4(\354ou0,not l,not  oDec_eci4(\354ou0,not l,not l,u0,not l,noti4(\354ou0,not l,n_eci4(lou0,not l,noti4(\354ou0,not l,not  oDec_eci4(\354ou0,not l,noti4(\354ou0,not l,n_eci4(\354ou0,not l,noti(\354ou0,not l,u0,not ec_eci4(\354ou0,not l,not l,u0,not l,noti4(\354ou0,not l,n_eci4(lou0,not l,noti4(\354ti4(\354ou0,not l,not  oDec_eci4(\354ou0,not l,not l,u0,not l,noti4(\354ou0,not l,n_eci4(lou0,not l,noti4(\354ou0,not l,not  oDec_eci4(\354ou0,not l,noti4(\354ou0,not l,n_eci4(\354ou0,not l,noti(\354ou0,not l,u0,not l,noti4(\354ou0,not l,n_eci4(\354ou0,not l,noti4(\354ouoti4(\354ou0,not l,not l,noti4(\354ou0,not l,u0,not l,noti4(\354ou0,not l,n_eci4(lou0,not l,noti4(\354ou0,not l,not  oDec_eci4(\354ou0,not l,not0,not l,not l,noti4(\354ou0,not l,u0,not l,noti4(\354ou0,not l,n_eci4(lou0,not l,noti4(\354ou0,not l,not  oDec_eci4(\354ou0,not l,not\354ou0,not l,noti(\354ou0,not l,u0,not l,noti4(\354ou0,not l,n_eci4(\354ou0,not l,noti4(\354ouoti4(\354ou0,not l,not l,noti4(\354ou0,not l,u0,not l,noti4(\354ou0,not l,n_eci4(lou0,not l,noti4(\354ou0,not l,not  oDec_eci4(\354ou0,not l,not0,not l,not l,noti4(\354ou0,not l,u0,not l,noti4(\354ou0,not l,n_eci4(lou0,not l,noti4(\354ou0,not l,not  oDec_eci4(\354ou0,not l,not0,not l,n_eci4(\354ou0,not l,noti(\354ou0,not l,0,not l,noti4(\354ou0,not l,n_eci4t l,noti4(\354ou0,not l,not  ot     es"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
