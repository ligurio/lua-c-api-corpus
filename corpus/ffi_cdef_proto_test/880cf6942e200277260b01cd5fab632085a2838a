declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 3
                    message: "\242]]\354l\354\354\354st {\n       #qrq_list {false\n    }{\n       #ers_list {fal}\n      }\n    }\n    spato[[[[[[[[[     l\354"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 0
                    message: "&]]Naconst0=3i^[[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 788529152
                    expression: 0
                    message: "tttttttttttttttttt"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 3
                    message: "\242]]\354\354\354Name3\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354{\n  specifiers_and_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\' {ist {\n    specifiers_and_qualifiers_\'\'\'\'\'\'\'\'\'\'\'\'\'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifaliers_and_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'#\'\'\'\'\'\'\'\'\'\'\' {\n  specifiers_and_qu+alifalifiers_list {\n    spnd_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\' {ist {\n    specifiers_and_qualifiers_\'\'\'\'\'\'\'\'\'\'\'\'\'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifaliers_and_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'#\'\'\'\'\'\'\'\'\'\'\' {\n  specifiers_and_qu+alifalifiers_and_qu+alifalifiers_list {\n    specifiers_aEEEEEEEEEEEEE    \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'lifaliers_and_qu+a\'\'\'\'\'\'\'\'\'\'\'\'\'\'#\'\'\'\'\'\'\'\'\'\'\' {\n  specifiers_and_qu_Alifalifiers_list {\n    specifieecifiers_aEEEEEEEEEEEEE    \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'A0\'\'\'\'\'\'\'\'\'\'g\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'cifiers_and_qualifiers_!\'\'\'\'\'\'\'\'\'\'\'\'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii54[[2\\rS_Alig[[  [[[]]\\35\'\'\'\'\'      "
                  }
                }
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            enum_type {
              enum_name {
                name: ""
                num: 0
              }
              constant {
                name: ""
                num: 16646144
              }
              constant {
                name: ""
                num: 4
              }
              constant {
                name: ""
                num: 1
              }
              constant {
                name: ""
                num: 7
              }
              constant {
                name: ""
                num: 3
              }
              constant {
                name: ""
                num: 1593835520
              }
              constant {
                name: ""
                num: 9
              }
            }
          }
        }
      }
    }
  }
}
