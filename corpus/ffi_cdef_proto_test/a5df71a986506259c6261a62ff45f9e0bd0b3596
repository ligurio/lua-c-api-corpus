declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      qualifiers_list {
        qualifiers_list {
          type_qualifier {
          }
        }
      }
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 3
                    message: "]]V[N[{[x]={[_N[x]]="
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "\"]][nst{[\242]=lnst{[\242]=lisuconst  }\n  [{[econst{[\242]=lnst{[b]=lisuconst  }\n  [{[\242]=t{[\242]=lisuconst  }\n  [{[econst{[\242]=lnst{[\242]=lisucons}\n  [{[econst{[\242]=lnst{[\242]=lisuconst  }\n  [{[\242]=t{[\242]=lisuconst  }\n  [{econst{[\242]=lnst{[\242]=lisucost  }\n  [{[\242]= csuconst{[\242]=lnst{[\242]=lisuconst  }\n  [{[econst{[\242goo]=lisuconstt  }\n  [{[econst{[\242]=lnst{[\242]=lisuconst  }\n  [{[r]=t{[\242]=lisuconst  }\n  [{[econst{[\242]=lnst{[\242]=lisucons}\n  [{[econst{[\242]=lnst{[\242]=lisuconst  }\n  [{[\242]=t{[\242]=lisuconst  }\n  [{econst{[\242]=lnst{[\242]=lisuconst  }\n  [{[\242]= csuconst{[\242]=ln specifiers_list 1 ifie"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
