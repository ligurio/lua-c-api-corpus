declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            struct_type {
              name {
                name: "unsigned"
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 16776963
                    expression: 3
                    message: "\242]]goiidXXXXXX\354l\354\354\354{\n \354do0z\354\354\354=z\354\354\354\2272,\354\377\377\377s_list {\n      q\354=\354H\354\35421{\n  q\354=\354pecerx0ex,\354\377\377\377s_list {     q\354=\354pecers\35422,\354\377\37721{\n     \n       q\354=\354pecers2\2272,\354\377\377\377s_list {     q\354=\354pecers\354\2272,\354\377\377\377      }\n  \n        }\n      }\n    }\n,LtN{\354z0\354\354=G\344\354\354\2272,\354\377uns_list {\n      q\354=\354.\377\377\3770,\354\377tst {\n      q\354       }\n      }\n  \n      }\n      }\n    }\n[[[\354"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 2
                    expression: 2
                    message: "\242]]\354\354\354\374\354\354itia\354\354\354\354\354\354____\354\354\354\354\354\354\354\354_and_qualifiers_list {\n   #####\n                    message: \"]]s {\\n orsconst    rator {\\n  dector {\\n  dece: \\\"/ s {\\\\n  specifi\\\\\\\"\\\\\\\"\\\\\\\"\\f\\\"\\\\\\\"\\\\\\\"\\\\\\\"\\\\\\2\\\\\\2\\\\\\\"\\\\\\\"br\\\"\\\\\\\"\\\\\\\"\\\\\\\"\\\\\\\"\\\\\\\"\\\\\\6\\\\\\\"\\\\\\\"\\\\\\\"X\\\\036\\\\\\\"\\\\\\\"\\\\extern\\\\005\\\\\\\"\\\\\\\"\\a\\\"\\\\\\\"\\\\ece: \\\"/]]ions {\\\\\\\\\\\"\\\\\\\"\\\\  #         _Alig              [[[[[[[[[[ors {\\n     rator goog de_Noreturnflo  _Alignasspecifcifi\\\\\\\"\\\\\\\"\\\\\\\"\\\\\\\"\"\\\\\\\"L\\\\\"\\Z\\\"\\@S||\\\\03fiers_000"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
