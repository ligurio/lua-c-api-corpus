declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 7
                    expression: 7
                    message: "]]l=ty<f and[[f]]l=ty<f and[[f]]l=ty<P and[[]]l=ty<f and[[f]]l=ty<f and[[f]]l=ty<P and[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "]]l=ty<f and[[f]]l=t<P and[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 7
                    message: "]]l=ty<f and[[f]]l=ty<f and[[f]]l=ty<P and[[]]l=ty<f and[[f]]l=ty<f and[[f]]l=ty<P and[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 7
                    message: "]]l=ty<f and[[f]]l=ty<f and[[f]]l=ty<P and[[]]l=ty<f and[[f]]l=ty<f and[[f]]l=ty<P and[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 7
                    expression: 7
                    message: "]]l=ty<f and[[f]]l=ty<f and[[f]]l=ty<P and[[]]l=ty<f and[[f]]l=ty<f and[[f]]l=ty<P and[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 7
                    expression: 7
                    message: "]]l=ty<f and[[f]]l=ty<f and[[f]]l=ty<P and[[]]l=ty<f and[[f]]l=ty<f and[[f]]l=ty<P and[["
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
