declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 0
                    message: "?z]]\354_Deci4=\354exa,not not [[_]$_Dlas]]\354_Deci4=x-al,not not [[las_while]?z]]l_Deci4=\354-\275a,not not [[_]$_Dlas]]\354_Deci4=x-al,no,not not [[lass_spes"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 0
                    message: "?z]]\354_Deci4=\354exa,not not [[_]$_Dlas]]\354_Deci4=x-al,not not [[las_while]?z]]l_Deci4=\354-\275a,not not [[_]$_Dlas]]\354_Deci4=x-al,no,not not [[lass_spes"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 0
                    message: "?z]]\354_Deci4=\354exa,not not [[_]$_Dlas]]\354_Deci4=x-al,not not [[las_while]?z]]l_Deci4=\354-\275a,not not [[_]$_Dlas]]\354_Deci4=x-al,no,not not [[lass_spes"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 3
                    message: "?z]]\354_Deci4=\354exa,not not [[_]$_Dlas]]\354_Deci4=x-al,not not [[las_while]?z]]l_Deci4=\354-\275a,not not [[_]$_Dlas]]\354_Deci4=x-al,no,not not [[lass_spes"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 3
                    message: "?z]]\354_Deci4=\354exa,not not [[_]$_Dlas]]\354_Deci4=x-al,not not [[las_while]?z]]l_Deci4=\354-\275a,not not [[_]$_Dlas]]\354_Deci4=x-al,no,not not [[lass_spes"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 0
                    message: "?z]]\354_Deci4=\354exa,not not [[_]$_Dlas]]\354_Deci4=x-al,not not [[las_while]?z]]l_Deci4=\354-\275a,not not [[_]$_Dlas]]\354_Deci4=x-al,no,not not [[lass_spes"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 0
                    message: "?z]]\354_Deci4=\354exa,not not [[_]$_Dlas]]\354_Deci4=x-al,not not [[las_while]?z]]l_Deci4=\354-\275a,not not [[_]$_Dlas]]\354_Deci4=x-al,no,not not [[lass_spes"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 0
                    message: "r]declarations {\n  declarators_and_initialize     struct_declaration_list {\n                struct_declaration_list {\n   {\n        }\n        parameters_list {\n          keyword_void: 0\n        }\n   ]l\354\354=\354 goto\n i1    "
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
    initializers {
    }
  }
}
