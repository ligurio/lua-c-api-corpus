declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "AA]]Ce=\377\377:L[[A]]B\377=\377:A[[[]]\377\n=\377:\377[[[t[[[]]\377\n=k:\377[[[ti]]\377x4=\377:\377[[[]]\377\n=\377:\377[[[[]]x4=\377:\377[[[]]x4=\377:\377[[[ti"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    expression: 8
                    message: "g[[][]]A,z,u=g[[]]A,z,u=[[]]A,j,u=[[]]A,z,u=g[[]]A,zz,u=[[]]A,j,u=[[]]A,z,u=g[[]]A,z,u=[[]]A,j,u=[[]]A,j,_=[[g[[]]A,z,u=[[][]]A,z,u=g[[]]A,z,u=[[]]A,j,u=[[]]A,z,u=g[[]]A,zz,u=[[]]A,j,u=[[]]A,z,u=g[[]]A,z,u=[[]]A,j,u=[[]]A,j,_=[[g[[]]A,z,u=[[]]A,j,u=[[g[[]]A,z,u=[[]]A,j,u=[[]]A,j,_=[[ ]]A,J=[[ []]A,j,u=[[g[[]]A,z,u=[[]]A,j,u=[[]]A,j,_=[[ ]]A,J=[[  "
                  }
                }
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 3
                    message: "]]l=not not[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 1
                    expression: 0
                    message: "]]and[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 3
                    message: "]]l=not not[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 1
                    expression: 0
                    message: "]]and"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
