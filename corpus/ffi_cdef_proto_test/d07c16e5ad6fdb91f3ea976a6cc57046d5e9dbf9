declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 0
                    message: "[]]local function f()t0[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 4
                    message: "?]]   function f()   fu[[]?]]    function f()    funcdeclarations {\n  specifiers_and_qualifiers_list {\n    specifiers_and_qualifiers_list {\n      specifiers_list {\n        specifiers_list {\n          type_specifier {\n            union_type {\n              struct_declaration_list {\n                struct_declaration_list {\n                  static_assertion {\n                    static_assert_2: 0\n                    expression: 4\n                    message: \"\\242]]onst{[\\242]=lnslisuconst  }\\n  [{[\\242]=t{[\\242]=lisuconst  }\\n  [{[econst{[\\242]=l\\n  [{[econ\\242]=l\\n  [{[econst{[\\242]=lnst,[\\242]=lisuconst  }\\n  [{[d]=t{[\\242]=lition f() function f(suconst  }\\n  [{[\\372\\372\\372onst{[\\242]=lnst{[\\242]=lisuconst  }\\n  [{[econst{[\\242]=lnst,[\\242]=lisuconst  }\\n  [{[\\242]=t{[2]=lisuconst  }\\n  [{[ecost{[\\242]=lnst,[\\242]=lisuconst  }\\n  [{[\\242]=t{[\\242]=li{[\\242]=lisuconst  }\\n  [{[econst{[\\242]=void[{[econst{[\\242]=lnst,[\\242]=lisuconst  }\\n  [{[d]=t{[\\242]=lisuconst  }\\n  [{[\\372\\372\\372onst{[\\242]=lnst{[\\242]=lisuconst  }\\n  [{[econst{[\\242]=lnst,[\\242]=lisuconst  }\\n  [{[\\242]=t{[\\242]=lisuconst  }\\n  [{[\\372\\372\\372\\372\\372\\372ruet{[\\242]=lisuations {\\n  specifiers_and_qualifiers_list {\\n   nst  }\\n  }\\n  [{[econst{[\\242]=l\\n  [{[econ [{[econst{[\\242]=lnst,[\\242]=lisuconst  }\\n  [{[\\242]=t{[\\242]=\\372\\372\\372\\372;\\372\\372econStonst{[\\242]=ln)    fst{[\\242]=lisuconst  }\\n  [{[econst{[\\242]=lnst,[\\242]=lisuconst  }\\n  [{[\\242]=t{[2]=ecifier {\\nion_type {\\n              struct_declaration_list {list {  }\\n  [{[econst{[0]=l\\n  [{[e  [{[econst{[\\242]=l\\n  [{[econst{[\\242]=lnst,[\\242]=lisuconst  }\\n  [{[d]=t{[\\242]=lisuconst  }\\n  [{[_Aligst{[\\242]=lnspecifiers_and_qualinst{[\\242]=uconst  }\\n  [{[econst{[0]=\\242]=l\\n  [{[econur[ [{[econ   tt{\"\n                  }\n                }\n              }\n       [     }\n          }\n        }\n      }\n    }\n  }\n}\n"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "]]end end end end e[["
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
