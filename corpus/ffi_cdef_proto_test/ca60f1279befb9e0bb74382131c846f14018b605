declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 67109118
                    expression: 3
                    message: "\242]]\354\354[[\rs]]\354n[[\rs]]\354\354[[2\rS_Aligl]]\354n[[\rregister\377\377\377\003]\354\354[[\rs]]\3540[[2\rS_Alig]]\354\354[[\rs[\rs]]\354l[[2-.\r\r   [[  [[[]]\354\354[[[\rs]]\354n[[\r\r ]]\n\354[[Msg]]n[[\r\r ]]\354l[[Msg]]_7[[\rs]]\354\354[[2\r.\r\r   [[  [[[]]\354\354[[-S[[2ig]]_7[[\rs]]\354l[[2ig]]_7[[:s]]\nl[[2\r.\r]   [[  [[[]]\354\354[[[\rs]]\354n[[\r\r ]]\354\354[[Ms]]l\354[[2\rS_Alig]]\354\354\354[[2\r.\r\r   [[  [[[]]\354\354[[\rs]]\3542[[2\rS_Alig"
                  }
                }
                struct_declaration_list {
                  bit_field {
                    name {
                      name: ""
                      num: 0
                    }
                    width: 0
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 9
                    message: "\242]]\354\354\354a\354\354=\354c\377<\377exter\377\377\377\377\377  or {}\n>   spe,A<\377er\377\n>   spe\377\377<\377er\377*\377\377\377>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377constor {}\n>\377\377\377\377<\377exe,\377goog\377\n>   spe\377\377<\377\n>   spe,\377<\377er\377\n>   spe\377\377<\377erz\254\377\377\377\377>   spe\377exter\377\377\377\377\377  or {}\n>   spe,\377\377  or {}\n>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377>   spe,\377<\377er\377\n>   spe/\377<\377or\377,\377.\377er\377\n>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377const\377\377va\354\354\354\354\377\377\377\377v\377/v\377\377\377\377<\377ext>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377{}\n>{}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377\377  or {}\n>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377\377v\377case\377\377<\377ext>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377{}\n>{}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377<\377er\377\n>   spez\377<\377er\377\377\377\377\377>   spe,\377<\377e>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377constor {}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377<\377\377>   spe,\377goog\377\n>   spe\377\377<\377er\377else  or {}\n>  ex\377\n>   spe,\377<\377e\354\ns[[f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 3
                    message: "]]c=l,not t[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 3
                    message: "]]e=3i^r[[]]err[     i^r[[[["
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
  }
  attr_spec_seq {
    keyword_maybe_unused: 0
  }
}
