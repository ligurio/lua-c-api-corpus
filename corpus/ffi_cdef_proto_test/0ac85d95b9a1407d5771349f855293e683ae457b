declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "BBB]]g=#i>t[[]]go=#i>s[[f]]go=#i>st[[]]go=#i>st[[B]]g=#i>t[[]]go=#i>s[[f]]go=#i>st[[]]go=#i>st[[f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "\242]]\354\354\354\354\354\354\354\354r(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((s_list {\n          type_sxpecif((((((((((((((((((((((\354\354\354nspecifier {\ntl\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354\354ons {\n  specifiersconstqualifiers_list {\n    specifier\354\354\354\354\354\354\354((((((((((s_list {\n go(((((((((((((((((((((((((((((((((((((((((((((((((((((((((s_list {\n googeclarations {\n  specifiersconstqualifis_list {\n      specifiers_list {\niers_list {\n          r {\n            struct_typed_qualifiers_list {- EEEEEEEype {\nE        ist {- EEEEEEEype {\nE           "
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
