declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 1
                    expression: 3
                    message: "\242]]\354\354\354\354\354=r  or {}\n    or \377const or {}\n  or \377\377\377\377\377  or {}\n    or while0 or 0 or 0 or \377\377\377\377\377  or {}\n    or \377\3770 or \377\377\377\377\377  or {}or \377\377\377\377\377  or {}\n    or while0 or 0 or \377\377\377\377\377  or {}\n    or \377\3770 or \377\377\377h\377  or {}\n    or \377const or {}\n  or \377\377\377\377\377  or {}\n    or while0 or 0 or 0 or \377\377\377\377\377  or {}\n    or \377\377\377\377\n    or \377const or {}\n  or \377\377\377\377\377  or {}\n    or while0 or 0 or 0 or \377\377 _Aligr  [[[[[[f"
                  }
                }
                struct_declaration_list {
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 1
                    expression: 3
                    message: "\242]]\354\354\354\354\354=r  or {}\n    or \377const or {}\n  or \377\377\377\377\377  or {}\n    or while0 or 0 or 0 or \377\377\377\377\377  or {}\n    or \377\3770 or \377\377\377\377\377  or {}or \377\377\377\377\377  or {}\n    or while0 or 0 or \377\377\377\377\377  or {}\n    or \377\3770 or \377\377\377h\377  or {}\n    or \377const or {}\n  or \377\377\377\377\377  or {}\n    or while0 or 0 or 0 or \377\377\377\377\377  or {}\n    or \377\377\377\377\n    or \377const or {}\n  or \377\377\377\377\377  or {}\n    or while0 or 0 or 0 or \377\377 _Aligr  [[[[[[f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    expression: 3
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
