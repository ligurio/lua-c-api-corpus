declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      qualifiers_list {
      }
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 7
                    message: "J]]  while[[]] do g[[-"
                  }
                }
                struct_declaration_list {
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 7
                    expression: 7
                    message: "J]]  while[[]] do g[[-"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 6
                    expression: 4
                    message: "]]end g[["
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 7
                    message: "J]]  while[[]] do g[[-"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 7
                    expression: 7
                    message: "J]]  while[[]] do g[[-"
                  }
                }
                struct_declaration_list {
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 544145408
                    expression: 0
                    message: "]]end  end end  end e[[["
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
