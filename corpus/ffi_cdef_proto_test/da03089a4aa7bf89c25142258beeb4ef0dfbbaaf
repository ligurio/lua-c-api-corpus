declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            struct_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 0
                    message: "c]]\354Name3itia\354\354:lifiers_list {\n   ############\377j\377:\377ier{\n   #############################fier*s_l+ist {\n  }\n      }\n    }\n    speci[[[[[[    }\n           }\na\nF"
                  }
                }
                struct_declaration_list {
                  bit_field {
                    width: 33554432
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 0
                    message: "\242]]\356\354\354a\354\354=\354c\377<\377exter\377\377\377\377\377  or {}\n>   sp_Aliger\377\n\n>   spe,\377<\377er\377\n>   spe\377\377const\254\377\377\377\377>   spe\377_Noreturn\377  or {}\n>   spe,\377\377  or {}\n>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377 or {}\n>  exter\377\377const>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377<\377\377> _Alignasoog\377\n>   spe\377\377<\377er\377else\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377\377  or {}\n>   spe,\377<\377er\377\n>   spe\377\377<\377er\377\377\377\377\377\377v\377case\377\377<\377ext>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377{}\n>{}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377<\377er\377\n>   spez\377<\377er\377\377\377\377\377>   spe,\377<\377e>   spe\377\377<\377er\377\377\377\377\377  or {}\n>  exter\377\377constor {}\n>\377\377\377\377<\377exter\377\377\377\377\377  or {}\n>   spe,\377<\377\377>   spe,\377goog\377\n>   spe\377\377<\377er\377else  or {}\n>  exter\377\377const\377\377va\354\ns[[f"
                  }
                }
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            struct_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndeclarations {\n  specifiers_and_qualifiers_list {\n    specifiers_and_qualifiers_list {\n      specifiers_list {\n        specifiers_list {\n          type\n\n\n_Aligna_specifier {\n         s\n\n\n\n   uni\n\n"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
  }
}
