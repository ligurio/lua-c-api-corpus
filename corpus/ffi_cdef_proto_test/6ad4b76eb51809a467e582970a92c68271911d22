declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 3
                    message: "sa[ta[tr]gotr]] goto[[sa[ter]] goto[[sa[ter]] goto[[ster]] goto[[sa[ter]] goto[[sa[tr]r]] goto[[sa[tr]]goto[[sa[ter]] goto[[sa[tr]r]] goto[[sa[tr]]\354ato[[sia[]] goto[[saer]]o[[sa[ter]] goto[[sa[ter]] goto[[ster]] goto[[sa[ter]] goto[[sa[tr]r]] goto[[sa[tr]]goto[[sa[ter]] goto[[ssi"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "\000\000\000 f()        function f() funct f() function f()         function f() function f() function f()    fu[[]?]]    function f()        function f() function f()    fur[[=3i^ype=n f()?]]    function f()        function f() function f() function f()    fu[[]?]]    function f()        function f() fr[[=3i^ype=n f()?]]    function f()        function f() function f() function f()         function f() function f() function f()    fu[[]?]]    function f()        function f() function f()    fur[[=3i^ype=n f()?]]    func() function f()    fu[[]?]]    function f()        function f() function f()    fur[[=3i^yp fu[[ (u"
                  }
                }
                struct_declaration_list {
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 8
                    expression: 0
                    message: "[]]local    function f()    fu[[]]e=3i^r[[3i^yt0[[]0"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
    initializers {
    }
  }
}
