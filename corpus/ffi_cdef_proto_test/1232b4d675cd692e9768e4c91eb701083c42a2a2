declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              name {
                name: ""
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "J]]while[[A"
                  }
                }
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              attr_spec_seq {
                keyword_nodiscard_reason: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 4
                    message: "]]or 8 and[[]]or[[f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 4
                    message: "]]or 8 and[[]]or[[f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 4
                    message: "]]or 8 and[[]list {\n    specifiers_and_qualifiers_list {\n      specifiers_list {\n        specifiers_list {\n          type_specifier {\n            union_type {\n              struct_declaration_list {\n                struct_declaration_list {\n                  static_assertion {\n                    static_assert_2: 7\n                    expression: 7\n                    message: \"]]l=ty<f and[[f`]]l=ty<P and[[\"\n                  }\n                }\n                struct_declaration_list {\n                  static_assertion {\n                    static_assert_1: 0\n                    expression: 7\n                    message: \"]]l=ty<f and[[f`]]l=ty<P and[[\"\n                  }\n                }\n                struct_declaration_list {\n                  static_assertion {\n                    static_assert_2: 7\n                    expression: 7\n                    message: \"]]l=ty<f and[[f`]]l=ty<P and[[\"\n                  }\n                }\n                struct_declaration_list {\n                  static_assertion {\n                    static_assert_1: 0\n                    expression: 7\n                    message: \"]]l=ty<f and[[f`]]l=ty<P and[[\"\n                  }\n                }\n              }\n            }\n          }\n        }\n ]or[[f"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 4
                    message: "]]or 8 and[[]]or[[f"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "]]do "
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
