declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 1
                    expression: 1
                    message: "]]local c = t0[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 4
                    message: "]]~=[["
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 6
                    message: "]]and[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 3
                    message: "_]]goto l got[[&"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 6
                    expression: 0
                    message: "]]c=not o[[6"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 0
                    message: "]]and[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 4
                    message: "]] goto gn["
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
