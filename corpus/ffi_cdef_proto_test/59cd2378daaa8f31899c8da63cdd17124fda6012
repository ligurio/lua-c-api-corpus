declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              name {
                name: ""
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "?z]]Name8i4=\354exc,not not [[_]$_Dla]]T_Deci4=x,not not [[z]]A0Deci4=\354exc,not not [[_]$_Dla]]\354_Deci4=x,not not [[lexlex]?z]]i4=x,not not [[lexlex]?z]]l_Deci4=#-not not [[_]$_Dlas]]\354_Deci4=xo,not not [[lassx]?z]]l_Deci4=#-noto,not not [[lass_spes"
                  }
                }
                struct_declaration_list {
                }
                struct_declaration_list {
                  bit_field {
                    width: 0
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "]]e=3i^6i^r[[]]e=3i^r[[]]ertype=-3i^r[[]]e=3i^r[[]]ertyp=3i^r[[[]]eerte=3i^r[[]]ertype=2i^r[[r[[]]e=3i^r[[]]rtyp=4i^r[[]i^r[[]]ertyp=3i^r[[=3i^r[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "]]e=3i^6i^r[[]]e=3i^r[[]]ertype=-3i^r[[]]e=3i^r[[]]ertyp=3i^r[[[]]eerte=3i^r[[]]ertype=2i^r[[r[[]]e=3i^r[[]]rtyp=4i^r[[]i^r[[]]ertyp=3i^r[[=3i^r[["
                  }
                }
              }
            }
          }
        }
        specifiers_list {
        }
      }
    }
  }
}
