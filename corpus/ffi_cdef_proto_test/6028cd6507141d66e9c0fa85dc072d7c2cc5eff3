declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      qualifiers_list {
        qualifiers_list {
          type_qualifier {
            keyword_atomic: 538968064
          }
        }
      }
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "\242]]\354_intSltygouLis\354constO{\n  declarators_ane..n..ors_and..nnnnnnnnntializeiniti/lize..n..ors_and..nnnnnnnnntializnnnnnninitiaators_anninitialize..n..o..nnnnnnnnnt..ors_and.nn..n..ors_and.innnnnnninitialize..n..ors_and..nnnnnnnnntializnnnnDninitialize..nntialize..0000}12}*"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 8
                    expression: 0
                    message: "g]]\"`\\\nM\\\n\\\n\\\n\\\nM\\\n\\\n\\\nM\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\nM\\\n\\\n\\\nM\\\n\\\n\\\nM\\\n\\\n\\\n\\\n\\\n\\\n"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
    initializers {
    }
  }
}
declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 8
                    expression: 0
                    message: "g]]\"`\\\nM\\\n\\\n\\\n\\\nM\\\n\\\n\\\nM\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\nM\\\n\\\n\\\nM\\\n\\\n\\\nM\\\n\\\n\\\n\\\n\\\n\\\n"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarators_and_initializers {
    initializers {
    }
  }
}
