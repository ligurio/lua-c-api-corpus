declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 3
                    expression: 3
                    message: "h][[sa[ter]] [[a[ter]] goto[[sa[ter]] goto[[sagto[[sia[ter]] goto[[sa[tr]goto[[sa[ter]] goto[[ster]] goto[[sa[ter_Complex]] goto[[sa[tr]]\354int[[siar]] goto[[r]goto[[sa[ter]] goto[h][[sa[ter]] [[a[ter]] goto[[sa[r]] goto[[sagto[[sia[ter]] goto[[sa[tr]goto[[sa[ter]] go[[ster]] goto[[sa[ter]] goto[[sa[tr]]\354inoto[[r]goto[[sa[ter]] goto[[ster]] goto[[sa[ter]] goto[[sa[tr]] goto[[sf$$]]go=#i>=#ii>#i>=#i>i>=#i>#h>=#i>[[f]]go=#i>=#i>#i>=[[f$$]]go=#i>=#i>#i>=#i>[[f$]>#i>=#i>[[f$]]go=#i>=#i>#i>=#i>i>=#i>#i>=#i>[[f\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\ndeclarations {\n  specifiers_and_qualifiers_list {\n    specifiers_and_qualifiers_list {\n      specifiers_list {\n        specifiers_list {\n        }\n        specifiers_list {\n          type_specifier {\n            union_type {\n $            struct_declaration_list {\n                struct_declaration_list {\n                  static_assertion {\n                    static_assert_2: 0\n                    expression: 0\n                    message: \"]]go=#i>=#i>#i>=[[f$$]]go=##i>=#i>#i>=[[fter]] goto[[sa[ter]] goto[[satr]]\354int[[tr]]\354\354to[[[ster]] goto[[sa[ter]] goto[[sa[trer]] goto[[ster]] goto[[sa[ter]] goto[[sa[tra[tert[[tr]]\354\354to[[si"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 6
                    message: ";]]\"\\\"6\217\217\217\217\217\217\217\217\217\217\217\217\217\217pp\217\217\217\217\217\217\217\217\217z5defaultj\217;{\217\217\217\217\217\217\217\217\217\217\217\217\217\217\217\217\217\217\217~:\217U\217\217\217\217\217\217\217\217{qp\217pppp\204\\u{ddddd}_s_A\217\217\217\217\217\217\217\217\217\217\217\217\217lp)\217\217\217{wp\217\217\217\217\217long\217\217\217A\217U|\217\217\217\217\217\217\217{\217\217p\217\217\217\217s\\u{ddddd}ddddd}_s u{d}_s\\u{dd}{d}\217\217\217\217\217\217\217    pecifiers_and_qualifiers_list {J      specifi\000\217\217\217\217\217\217\217\217\217\217\217\217\217\217U\217\217\217\217\217\217\217\217{\217\217p(\000\217\217s\\u{ddddd}_s u{constu{{\n    specifiers_and_qualifiers_list {J      specifiu{dd}_s nCeu{_s"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
