declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              name {
                name: ""
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "]]c=_ and[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 4
                    message: "]]or c and[[]] or c and[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 0
                    message: ";]]or ec and[[]]or e["
                  }
                }
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 5
                    message: "U]] f ,x,mx.\n mx.\n ffi, ffi. f ,x,mx.\n ffi, ffi, fffi, ffi. f ,x,mx.\n ffi, ffi ,x, f ,x,mx.\n mx.\n ffi, ffi. f ,x,mx.\n ffi, ffi, fffi, ffi. f ,x,mx.\n ffi, ffi ,x,mx.\n ffi, ffi, fffi, ffi. f ,x, mx.\n ffi, ffi, f ,x, f ,x,mx.\n ffi, ffi ,x,mx.\n mfi, ffi, f ,x,ffi, ffi. f , f ,x,mx.\n fmx.\n ffi, ffi, f ,x,ffi, ffi. f , f , ffi, ffi ,x, f ,x,mx.\n mx.\n ffi, ffi. f ,x,mx.\n ffi, ffi, fffi, ffi. f ,x,mx.\n ffi, ffi ,x,mx.\n ffi, ffi, fffi, ffi. f ,x, mx.\n ffi, ffi, f ,x, f ,x,mx.\n ffi, ffi ,x,mx.\n mfi, ff ,x,mx.\n mfi, ffi, f ,x,ffi, ffi. f , f ,x,mx.\n fmx.\n ffi, ffi, f ,x,ffi, ffi. f , f , ffi, ffi ,x, f ,x,mx.\n mx.\n ffi, ffi. f ,x,mx.\n ffi, ffi, fffi, ffi. f ,x,mx.\n ffi, ffi ,x,mx.\n ffi, ffi, fffi, ffi. f ,x, mx.\n ffi, ffi, f ,x, f ,x,mx.\n ffi, ffi ,x,mx.\n mfi, ffi, f ,x,ffi, ffi. f , f ,x,mx.\n fmx.\n ffi, ffi, f ,x,ffi, ffi. f , f ,x,mx.\n ffi,  ffmx.\n mx.\n ffi, ffi, f ,x, f ,x,mx.\n ffi, ffi ,x -i"
                  }
                }
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 5
                    message: "U]] f ,x,mx.\n mx.\n ffi, ffi. f ,x,mx.\n ffi, ffi, fffi, ffi. f ,x,mx.\n ffi, ffi ,x, f ,x,mx.\n mx.\n ffi, ffi. f ,x,mx.\n ffi, ffi, fffi, ffi. f ,x,mx.\n ffi, ffi ,x,mx.\n ffi, ffi, fffi, ffi. f ,x, mx.\n ffi, ffi, f ,x, f ,x,mx.\n ffi, ffi ,x,mx.\n mfi, ffi, f ,x,ffi, ffi. f , f ,x,mx.\n fmx.\n ffi, ffi, f ,x,ffi, ffi. f , f , ffi, ffi ,x, f ,x,mx.\n mx.\n ffi, ffi. f ,x,mx.\n ffi, ffi, fffi, ffi. f ,x,mx.\n ffi, ffi ,x,mx.\n ffi, ffi, fffi, ffi. f ,x, mx.\n ffi, ffi, f ,x, f ,x,mx.\n ffi, ffi ,x,mx.\n mfi, ff ,x,mx.\n mfi, ffi, f ,x,ffi, ffi. f , f ,x,mx.\n fmx.\n ffi, ffi, f ,x,ffi, ffi. f , f , ffi, ffi ,x, f ,x,mx.\n mx.\n ffi, ffi. f ,x,mx.\n ffi, ffi, fffi, ffi. f ,x,mx.\n ffi, ffi ,x,mx.\n ffi, ffi, fffi, ffi. f ,x, mx.\n ffi, ffi, f ,x, f ,x,mx.\n ffi, ffi ,x,mx.\n mfi, ffi, f ,x,ffi, ffi. f , f ,x,mx.\n fmx.\n ffi, ffi, f ,x,ffi, ffi. f , f ,x,mx.\n ffi,  ffmx.\n mx.\n ffi, ffi, f ,x, f ,x,mx.\n ffi, ffi ,x -i"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
declarations {
  attr_spec_seq {
    keyword_nodiscard_reason: 512
  }
}
