declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 7
                    expression: 7
                    message: "J]]  while[[]] do g[[-"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 7
                    expression: 7
                    message: "J]]  while[[]] do g[[-"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              name {
                name: ""
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    expression: 4
                    message: "]]en\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000dist {\n          type_specifier {\n            enum_type {\n              enum_name {\n                name: \"\"\n                num: 1\n              }\n              constant {\n                name: \"\"\n                num: 1\n              }\n              constant {\n                name: \"OOOOOOOOOOOOOOO\"\n                num: 0\n              }\n            }\n          }\n        }\n        specifiers_list {\n          type_specifier {\n            enum_type {\n              enum_name {\n                name: \"\"\n                num: 0\n              }\n              constant {\n                name: \"\"\n   \000\000\000\000["
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
