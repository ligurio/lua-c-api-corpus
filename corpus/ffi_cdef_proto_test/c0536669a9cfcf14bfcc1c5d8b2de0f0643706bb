declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 6
                    expression: 0
                    message: "H]]t,n,_,o=l[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 0
                    message: "`]]De82,lA\377,v,\354A,\222t=l[[ "
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 1
                    expression: 0
                    message: "]]_,stoton\n  ,\354\354\337,constonl_\377,\354,con=lo\377[[[ \354[ "
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              name {
                name: "\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252\252"
                num: 0
              }
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 5
                    message: "?]]    function cdef.SpecifiersListf()    fu[[]?unction f(u"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 5
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
