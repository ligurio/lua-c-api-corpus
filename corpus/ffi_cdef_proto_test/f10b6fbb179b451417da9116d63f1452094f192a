declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 3
                    message: "!!]];\354=0-\275a_a,{\n[[!!]];\354=_Aliga,{\n[[]];\354=0-Name0{\n[[!!]];\354=0-\275a_a,{\na_a,{\n[[!!]];\354=0-\275a_a,{\n[[[0E161]];l=0-\275,{\n[[[0955E161E161]];l=0-\275,{\n[[[05*0ers[0E161]];l=0-\275,{\n[[[0955E1]];l=0-\275,{\n[[[05*0ers61]];l=0-\275,{\n[[[0955E!161E161]];l=0-\275,{\n[[[05*0ers[0E16E161E161]];l=0-\275,{\n[[[05*0ers[0E1!!]];\354=0-\275a_a,{\n[[!!]];\354=0-\275a_a,{J[[[0E161]];l=0-\275,{\n[[[0955E161E161]];l=0-\275,{\n[[[05*0ers[0E161]];l=0-\275,{\n[[[0955E161E161]];l=0-\275,{\n[[[05*0ers61]];l=0-\275,{\n[[[0955E!161E161]];l=0-\275,{\n[[[05*0ers[0E161]];l=0-\275,{\n[[[0955E161E161]];l=0-\275,{\n[[[05*0ers"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 2
                    expression: 4
                    message: "]]0ll"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 2
                    expression: 4
                    message: "]]0ll"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          function_specifier {
            keyword_inline: 0
          }
        }
      }
    }
  }
}
