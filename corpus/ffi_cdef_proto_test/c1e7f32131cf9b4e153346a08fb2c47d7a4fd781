declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 3
                    message: "]]lc4= _A,not g,not g o[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 0
                    message: "A]]l=4i^r[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 9
                    expression: 0
                    message: "\242]]\354\354\354\354\354NNNNNNNNNNNNNNNNNNNNNNN\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"x0\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"(\"\"\"\"\"un\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\241\"\"NNNNNNNNNNNNNNNNNNNNNN\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"x0\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"*\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"(\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"[[[[ers[fifiers_anpecifiers_and"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 4
                    expression: 4
                    message: "A]]l=3i^r[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 4
                    message: "\242]]\354\354\354\354\354NNNNNNNNNNNNNNNNNNNNNNN\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"x0\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"(\"\"\"\"\"un\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\241\"\"NNNNNNNNNNNNNNNNNNNNNN\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"x0\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"*\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"(\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"[[[[ers[fifiers_anpecifiers_and"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
