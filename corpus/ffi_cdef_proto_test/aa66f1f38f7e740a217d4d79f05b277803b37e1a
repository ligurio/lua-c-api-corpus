declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 4
                    expression: 0
                    message: "J]]while o do while so do s[[A-"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "(]] goto\nl s_and_qualifiers_list {\n      specifiers_list {\n        specifiers_list {\n          type_specifier {\n            arithmetic_type {\n              type_float_complex: 0\n            }\n          }\n        }\n      }\n    }\n  }\n  declarators_and_initializers {\n    declarators {\n      pointer_declarator {\n        declarator {\n          declarator_attr {\n            name {\n              name: \"\"\n             t[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 1560281092
                    expression: 4
                    message: "[]]local function f()    f[[0"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 4
                    message: "]]end e[["
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          function_specifier {
          }
        }
      }
    }
  }
}
