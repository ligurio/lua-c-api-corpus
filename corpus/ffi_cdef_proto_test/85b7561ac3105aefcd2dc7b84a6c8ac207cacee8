declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 5
                    expression: 0
                    message: "U]] f ,x,m,x, f ,x,st {\n                struct_declarat, ffi. f , f.\n fmx.\n ffi, ffi, f ,x,ffi, ffi. f , f , ffi, ffi ,xx, f ,x,mx.\n mx.\n ffi, ffi. f ,x,mx.\n ffi, ffi, fffi, ffi. f ,x,mx.\n ffi, ffi ,x,mx.\n ffi, ffi, fffi, ffi. f ,xffi, ffi. f ,x,mtfi, ffi, fffi, ffi. f ,x,mx. f-i -i"
                  }
                }
                struct_declaration_list {
                  bit_field {
                    width: 8388608
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 5
                    expression: 0
                    message: "U]] f ,x,m,x, f ,x,st {\n                struct_declarat, ffi. f , f.\n fmx.\n ffi, ffi, f ,x,ffi, ffi. f , f , ffi, ffi ,xx, f ,x,mx.\n mx.\n ffi, ffi. f ,x,mx.\n ffi, ffi, fffi, ffi. f ,x,mx.\n ffi, ffi ,x,mx.\n ffi, ffi, fffi, ffi. f ,xffi, ffi. f ,x,mtfi, ffi, fffi, ffi. f ,x,mx. f-i -i"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
