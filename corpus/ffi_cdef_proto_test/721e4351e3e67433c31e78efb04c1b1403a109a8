declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 2
                    message: "\242]]onst{[\202]=lnst{[\242]=lisst{[T]=lnsst  {[ecoJ [ost{[H]=lnst{[U]=o{[H]=lnst{[U]=o\n [onst{[H]=lnst{[\242]=st{[nst{[H]=lnst{[U]=qualifiers_list {\n    specifiers_and_qualifiers_list {\n      specifiers_ltype]="
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 3
                    expression: 3
                    message: "]]e=3i^r[[r[[]]e=3i^r[[e=3i^r[[]]e=3i^r[[]3i^r[[]]ertype=3i^r[[]]eertyp=3i^r[[]]e=3i^r[[]]ert=6i^r[[]]e=3i^r[[]]ertyp=3i^r[[]]e=3i^r[[]]ertype=3i^ri^r[[]]e=3i^r[[]]rtyp=3i^r[[]]e=3i^r[[]]ertyp=3i^r[[=3i^r[["
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 2
                    message: "\242]]onst{[\202]=lnst{[\242]=lisst{[T]=lnsst  {[ecoJ [ost{[H]=lnst{[U]=o{[H]=lnst{[U]=o\n [onst{[H]=lnst{[\242]=st{[nst{[H]=lnst{[U]=qualifiers_list {\n    specifiers_and_qualifiers_list {\n      specifiers_ltype]="
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
