declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    expression: 3
                    message: "U]] f ,x,mx.\n mx.\n ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,ffi, ffi,i, ffi, f ,x,mx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mx.\n ff ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,mx.\n ff(i,  ffi,\n ffmx.\n ffi, ffi, f ,x,ffi, ffi, f ,mx.\n ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,mxfmx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,mx.\n ffi, x,mfi, ffi, f ,x,mffi,  ffi,\n ffmx.i,  ffi,\n i ,x,mx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,mx.\n ffi,  ffi,\n ffmx.\n ffi, ffi, f ,x,ffi, ffi, f ,mx.\n ffi, ffi, f ,x,mx.\n ffi, ffi.\n ff ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,mx.\n ffi,  ffi,\nfmx.\n ffi, ffi, f ,x,ffi, ffi, f ,mx.Y0ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mx.\n ffi, ffi, f ,x,mx.\n ffi,  ffi,\n ffmx.\n ffi, ffi, f ,x,ffi, ffi, f ,x,mName3fi, ffi, f ,x,mx.\n ffi, x,mfi, ffi, f ,x,mx.\n ffi,  fi, ffffmx.\n ff ffi -i -i"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "\242]]\354\354\354\354\354\354\354\354\354tions {\nand_qualifiers_list {\n   4674407370955161i*000000000800514407370955161i*000000040737095516100000000080000000000000000000000080000004674407370955161i*00000000615*00.0000000800000000000000000000020,00000000955161i*000000000000000801505682082758*00000000080000000000000000000955161i*000000000800000000000000000000020,000i*000000000800000000000000000000020,00000000000080000004674407370955161i*000000000800514407370955161i*0000*00.00000008000000000002082758666,000i*00000000080000000000007370955161i*0000*00.0000000800100000000000000000020,00000000955161i*000000000000000801505682082758666,000i*00000000080000000000000000000955161i*000000000800000000000000000000020,000i*0000000800514407370955161i*0000000008000000000000000000000200,615*00.0000000800000000000000000000020,00000000955161i*000000000000000801505682082758666,0000000000955161i*000000000000000801505682082758666,000i*00000000080000000000000000000955161i*000000000800000000000000000000020,000i*000000000800000000000000000000020,00000000000080000004674407370955161i*000000000800514407370955161i*0000*00.0000000800000000000000000000020,00000000955161i*000000000000000801505682082758666,000i*00000000080000000000000000000955161i*000000000800000000000000000000020,000i*000000000800000000000000000000020,0000000000080000000000000000000000080000004674407370955161i*000000000800514407370955161i*000000000800000000000000000000020,0000000000000000051615*615*00.0000000800000000000000000000020,00000000955161i*000000000000000801505682082758665,000i*000000000000020,00000000955161i*000000000000000801505682082758666,000i*00000000080000000000000000000955161i*000000000800000000000000000000020,000i*000000000800000000000000000000020,00000000000080000004674407370955161i*000000000800514407370955161i*0000*05682082758665,000i*000000000000020,00000000955161i*000000000000000801505682082758666,000i*00000000080000000000000000000955161i*000000000800000000000000000000020,000i*000000000800000080000004674407370955161i*000000000800514407370955161i*0000*00.0000000800100000000000000000020,00000000955161i*000000i*0000000000000008015056820827        t0ype_0sp"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
