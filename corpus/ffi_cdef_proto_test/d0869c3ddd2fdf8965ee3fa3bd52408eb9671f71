declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "\242]]\354\354\354\354\354\354\354onstlns {{\n  5*0000000000000==000000000==ns {\n{\n  5* {\n{\n  \354\3540\354\354\354\354\354tions {\n{\n  5*0000000000000==urGo1{\n  5*0000000000000==000000000==ns {000000000000000==ns {\n{(  5*0000000000000==00000000000000000==ns {\n000000000000000000000000000000000000==ns {\n{\n  5*0000000000000==000000000==ns {\n{\n 0000000000000==ns {\n{\n  5*0000000000000==000000000==ns {\n{\n  5* {\n{\n  \354\354\354\354\354\354\354\354tions {\n{\n  _Noreturn5*s {\n{\n  \354\354\354\354\354\354\354\354tions {\n{\n  5*0000000000000==ns {\n{\n  5*0000000000000==000000000==ns {\n{\n  5* {\n{\n  \354\3540\354\354\354\354\354tions {\n{\n  5*0000000000000==ns {\n{\n  5*0000000000000==000000000==ns {000000000000000==ns {\n{(  5*0000000000000==00000000000000000==ns {\n000000000000000000000==ns {\n{(  5*0000000000000==00000000000000000==ns {\n{\n  5*0000000000000==000000000==ns {\n{\n  5* {\n{\n  \354\3540\354\354\354\354\354tions {\n{\n  5*0000000000000==ns {\n{\n  5*0000000000000==000000000==ns {000000000000000==ns  000000==0000095516"
                  }
                }
              }
            }
          }
        }
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  bit_field {
                    width: 0
                  }
                }
              }
            }
          }
        }
      }
    }
    specifiers_and_qualifiers_list {
      qualifiers_list {
        qualifiers_list {
          type_qualifier {
            keyword_restrict: 738197504
          }
        }
      }
    }
  }
  attr_spec_seq {
    keyword_fallthrough: -738197504
  }
}
declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 9
                    message: "!!]];\354=0-\275a_a,{\n[[]];\354=0-\275a_a,{\n[[!!]];\354=0-\275a_a,{\n[[[0E161]];l=0-\275,{\n[[[0955E161E161]];l=0-\275,{\n[[[05*0ers[0E161]];l=0-\275,{\n[[[0955E161E161]];l=0-\275,{\n[[[05*!!]];\354=0-\275a_a,{\n[[[0E161]];l=0-\275,{\n[[[0E161]];l=0-\275,{\n[[[05*0ers[0E]];l=0-B,{\n[[=0-\275a_a,{\n[[]];\354=0-\275a_a,{\n[[!!]];\354=0-\275a_a,{\n[[[0E161]];l=0-\275,{\n[[[0955E161E161]];l=0-\275,{\n[[[05*0ers[0E161]];l=0-\275,{\n[[[0955E161E161]];l=0-\275,{\n[[[05*!!]];\354=0-\275a_a,{\n[[[0E161]];l=0-\275,{\n[[[0E161]];l=0-\275,{\n[[[05*0ers[0E]];l=0-\275,{\n[[[05*0er[05*0ers"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
