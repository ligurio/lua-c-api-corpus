declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            union_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 0
                    expression: 0
                    message: "[[[]]local c    t0[["
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 2
                    message: "?]] function f(g)r[[]"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "\005   ste: \"]]c=not t[[\"\n                 localc             }\n       }\n                }\n                expression: 4\n                    message: \"]]or[[\"\n                  }\n                }\n                struct_declaration_lisName0                 static_assertion { ]]c=not t[[\"      expression: 4\n                    message: )]]or[[#\n                  desage:      }{\n                    s"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 0
                    expression: 0
                    message: "\005   ste: \"]]c=not t[[\"\n                 localc             }\n       }\n                }\n                expression: 4\n                    message: \"]]or[[\"\n                  }\n                }\n                struct_declaration_lisName0                 static_assertion { ]]c=not t[[\"      expression: 4\n                    message: )]]or[[#\n                  desage:      }{\n                    s"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
