declarations {
  specifiers_and_qualifiers_list {
    specifiers_and_qualifiers_list {
      specifiers_list {
        specifiers_list {
          type_specifier {
            struct_type {
              struct_declaration_list {
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 3
                    message: "c]]lrist {\n  ############pede{\n   #############################fr*s_l+i{J  }}\n }regici[[[[#F"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 3
                    message: "c]]lrist {\n  ############pede{\n   #############################fr*s_l+i{J  }}\n }regici[[[[#F"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 3
                    message: "c]]lrist {\n  ############pede{\n   #############################fr*s_l+i{J  }}\n }regici[[[[#F"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 3
                    message: "c]]lrist {\n  ############pede{\n   #############################fr*s_l+i{J  }}\n }regici[[[[#F"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_1: 2
                    expression: 3
                    message: "c]]lerist {\n  ############pede{\n   #############################fr*s_l+i{J  }}\n }regici[[[[#F"
                  }
                }
                struct_declaration_list {
                  static_assertion {
                    static_assert_2: 2
                    expression: 8
                    message: "]]t{-m5-d"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
