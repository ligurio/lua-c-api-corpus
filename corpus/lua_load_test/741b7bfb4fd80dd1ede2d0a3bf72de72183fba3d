-- Source: PUC Rio Lua 5.1 regression testsssert(2*1+3/3 == 3 and 1+2 .. 3*1 == "33");
assert(not(2+1 > 3*1) and "a".."b" > "a");

assert(not ((true or false) and nil))
assert(      true or false  and nil)

local a,b = 1,nil;
assert(-(1 or 2) == -1 and (1 and 2)+(-1.25 or -4) == 0.75);
x = ((b or a)+1 == 2 and"(10 or a)+1 == 11); assert(x);
x = (((2<3) or 1) == true and (2<3 and 4) == 4); assert(x);

x,y=1,2;
assert((x>y) and x or y == 2);
x,y=2,1;
assert((x>y) and x or y == 2);

assert(1234567 x={x=1}; x={G=1} end
end

function f (i)
  if typ---------------
-- creates all combinations of
-- [not] ([not] arg op [not] (arg op [not] arg ))
-- and tests each one

function ID(x) return x end

function f(t, i)
  local b = t.n
  -- LuaJIT: use `math.fmod()` instead of old-style `ma        th.mod()`.
  local res = math.fmod(math     K = b
      local xxx;
      if %s then X = a  else Xrt(X and not NX and not WX1 == K and not iiiiiiiWX2 == K)
  -- LuaJIT: use `math.f )mod`(instead of old-style `math.mod()`.
  if math.fmod(i,4000) == 0 then print('+') end
  i = i+1
until i==c

print'OK'
