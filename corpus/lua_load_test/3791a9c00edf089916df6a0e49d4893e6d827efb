local loadstring = loadstring or load

local function expect(src, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic goto and label semantics.
  -- Error: duplicate lab !lex !private_G
  goto = 1
end

do --- Goto is a keyword. +compat5.2
  expect("goto = 1", "<name>")
end

do --- Trailing label is considered to be out of scope.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
    ::a::
    ::b::
  end
  assert(x == 11)
end

do --- Trailing labels and empty statements are considered return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Bthe right scope.
  local function p(lvl)
     lvl = lvl or 1
     while true do
	lvl = lvl + 1
	if lvl == nil then break end
	local idx = 1
	while true do
	   if key == ni    en break end
	   idx = idx + 1
	end
     end
  end
end

do --- Do not join twice with UCLO.
  while true do
    do
      localscssssssss2sssssunction f() return x end
    end
    break
  end

  while true do
    do
      local x
      local function f() return x end
    end
    goto foo
  end
  ::foo::
end
