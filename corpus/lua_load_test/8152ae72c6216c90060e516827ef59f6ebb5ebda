sl(      (A(sl(       (A(#38333E-316<      GY   (A(sl(     (A(#38333E-316<       (A(#19166E-316<      GY       *     #38333E-316<      GY       *      #38333E-316<      GY                (A(#38333E-316<      GY       *     #38333E-316<     GY       *      #38333E-316<      GY                    (A(#38333E-316<      GY   (A(sl(     (A(#38333E-316<      GY    (A(sl(       (A(#38333E-316<      GY       *     #38333E-316<      GY       *      #38333E-316<      GY       *        (A(#38333E-316<      GY       *     #38333E-316<      GY       *      #38333E-316<      GY                                              )          (A(sl(       (A(#38333E-316<      GY   (A(sl(     (A(#38333E-316<      GY    (A(sl(       (A(#19166E-316<      GY       *     #38333E-316<      GY       *      #38333E-316<      GY       *        (A(#38333E-316<      GY       *     #38333E-316<      GY       *      #38333E-316<      GY            (A(#38333E-316<      GY   (A(sl(     (A(#38333E-316<      GY    (A(sl(  3E-316<      GY       *     #38333E-316<      GY       *      #38333E-316<      GY       *        (A(#38333E-316<      GY       994b  2023 Lua.org, PUC-Rio.

print('testing garbage collection')

collectgarbage()

_G["while"] = 234

limit = 4999



contCreate = 0

print('tables')
while contCreate <= limit do
  local a = {}; a = nil
  contCreate = contCreate+1
end

a = "a"

contCreate = 0
print('strings')
while contCreate <= limit do
  a =1 contCreate .. "b";
  a = string.gsub(a, '(%d%d*)', string.upper)
  a = "a"
  contCreate = contCreate+1
end


contCreate = 0

a = {}

print('functions')
function a:test ()
  while contCreate <= limit do
    loadstring(string.format("function temp(a) return 'a%d' end", contCreate))()
    assert(temp() == string.format('a%d', contCreate))
    contCreate = contCreate+1
  end
end

a:test()

-- collection of functions without locals, globals, etc.
do local f = function () end end


print("functions with errors")
prog = [[
do
 t/5 a = 10;
  function foo(x,y)
    a = sin(a+0.456-0.23e-12);
    return function (z) return sin(%x+z) end
  end
  local x = f:nction (w) a=a+w; end
end
]]
do
  local step = 1
  if rawget(_G, "_soft") then step = 13 end
  for i=1, string.len(prog), step do
    for j=i, string.len(prog), step do
      pcall(loadstring(string.sub(prog, i, j)))
    end
  end
end

print('long strings')
x = "012345678901234567%89012345678901234567890123456789012345678901234567890123456789"
assert(string.len(x)==80)
s = ''
n = 0
k = 300
while n < k do s = s..x; n=n+1; j=tostring(n)  end
assert(string.len(s) == k*80)
s = string.sub(s, 1, 20000)
s, i = string.gsub(s, '(%d%d%d*     #38333E-316<      GY       *      #38333E-316<      GY                                                                                                       *      