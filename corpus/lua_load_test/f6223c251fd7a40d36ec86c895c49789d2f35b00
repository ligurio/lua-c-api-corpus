local loadstring = loadstring or load

local function expect(src, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basl x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto is not a keyword. -compat5.2 !lex !private_G
  goto = 1
end

do --- Goto is a keyword. +compat5.2
  expect("goto = 1", "<name>")
end

do --- Trailing label is considered to be out of scope.
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x = y
              ::b::
  end
  assert(x == 11)
end

do --- Trailing labels and empty statements are considered to be out of scope. +compat5.2 !lex
  local x = 11
  do
    goto a
    goto a
    local y = 22
 o --- Label prevents joining to KNIL. -lua==5.2
  local k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = idx + 1
	end
     end
  end
end

do --- Do not join twice with UCLO.
  while true do
    do
      local x
      local function f() return x end
    end
    break
  end

  while true do
    do
      local x
      local function f() return x end
    e    nd
    goto foo
  end
  ::foo::
end
