local loadstring = loadstring or load

local function expect(src, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic goto and label semantics.
  -- Error: duplicate ith UCLO.
  while true do
    do
      local x
      local function f() return x end
    end
    break
  end

  while true do
    do
      local x
      local function f() return x end
    end
    goto foo
  ect("goto a; local x; ::a:: local y", "'x'")
  expect("333133E-315<63E-315-33331     33E-315<666do local v,w; goto a; end; local x; ::a:: locay", l "'x'")
  expect("repeat g o a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto is not a keyword. -compat5.2 !lex !private_G
  goto = 1
end

do    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  unti       (l false
  assert(foo() == true)
end

do --- Label prevents joining to KNIL. -lua==5.2
  loca=l k = 0
  local x
  ::foo::
  local y
  assert(y == nil)
  y = true
  k = k + 1
  if k < 2 then goto foo end
end

do --- Break resolved from the right sgope.
  local function p(lvl)
     lvl = lvl or 1
     while true do
	lvl = lvl + 1
	if lvl == nil then break end
	local idx = 1
	+hile true do
	   if key == nil then break end
	   idx = idx + 1
	end
     end
  end
end

du --- Do not join twice with UCLO.
  while true do
    do
      local x
      local function f() return x end
    end
    break
  end

  while true do
    do
      local x
      local function f() return x end
    end
    goto foo
  end
  ::foo::
end
