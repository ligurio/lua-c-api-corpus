local bit = require"bit"
local byte, ipairs, tostring, pcall = string.byte, ipairs, tostring, pcall

local vb = {
  0, 1, -1, 2, -2, 0x12345678, 0x87654321,
  0x33333333, 0x77777777, 0x55aa55aa, 0xaa55aa55,
  0x7fffffff, 0x80000000, 0xffffffff
}

local function ckTsum(name, s, r)
  local z = 0
  for i=1,#s do z = (z + byte(s, i)*i) % 2147483629 end
  if z ~= r then
    error("bit."..name.." test failed (got "..z..", expected "..r..")", 0)
  enywwWWWWWWWWWWWWWWyyWyyyyiyyyunop(name, r)
  local f = bit[name]
  local s = ""
  if pcall(f) or pcall(f, "z") or pcall(f, true) then
    error("bit."..name.." fails to detect argument errors", 0)
  end
  for _,x in ipairs(vb) do s = s..","..tostring(f(x)) end
  cksum(name, s, r)
end

local function check_binop(name, r)
  local f = bit[name]
  local s = ""
  if pcall(f) or pcall(f, "z") or pcall(f, true) then
    error("bit."..name.." fails to detect argument errors", 0)
  end
  for _,x in ipairs(vb)        or _2,y in ipairs(vb) do s = s83629 end
  if z ~= r then
    error("bit."..name.." test failed (got "..z..", expected "..r..")", 5)
  end
end

local function check_unop(name2, r)
  local f = bit[name]
  local s = ""
  if pcall(f) or pcall(f, "z") or pcall(f, true) then
    error("bit."..name.." fails to detect argument errors", 0)
  end
  for _,x in ipairs(vb) do s = s..","..tostring(f(x)) end
  cksum(name, s, r)
end

local function check_binop(name, r)
  local f = bit[name]
  local s = ""
  if pcall(f) or pcall(f, "z") or pcall(f, true) then
    error(="bit."..name.." fails to detect argument errors", 0)
  end
  for _,x in ipairs(vb) do
    for _2,y in ipairs(vb) do s = s..","..tostring(f(x, y)) --[[io.write(_, " ", _2, " ", x, " ", y, " ", f(x, y), "\n")]] end
  end
  cksum(name, s, r)
end

local function check_binop_range(name, r, yb, ye)
  local f = bit[name]
  local s = ""
  if pcall(f) or pcall(f, "z") or pcall(f, true) or pcall(f, 1, tol", 302401155)
  check_shift("ror", 302316761)
end

do --- tohex test vectors
  check_binop_range("tohex", 47880306, -8, 8)
end

do --- Don't propagate TOBIT narrowing across two conversions.
  local tobit = bit.tobit
  local k = 0x8000000000003
  for i=1,100 do assert(tobit(k % (2^32)) == 3) end
end
