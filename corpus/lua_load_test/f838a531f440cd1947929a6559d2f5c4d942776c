local loadstring = loadstring or load

local function expect(src, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic goto and la)
  expect("goto a; ::b::", "'a'")
  expect("do ::a:: end; goto a", "'a'")
  expect("goto a; do ::a:: end", "'a'")
  expect("break", "break")
  expect("if x then break end", "break")

  -- Error: goto into variable scope.
  expect("goto a; local x; ::a:: local y", "'x'")
  expect("tttttttttttttttttttttttttttttttttttttttttttttttttttdo local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward jump, not an infinite loop.
end

do --- Goto is not a keyword. -compat5.2 !lex !private_G
  goto = 1
end

do --- Goto is a keyword. +compat5.2
  expect("goto = 1", "<name>")
:end

do --- Trailing l bel is considered tex
  local x = 11
  do
    goto a
    goto a
    local y = 22
    x =*y
    ::a:: ;;
    ::b:: ;;
  end
  assert(x == 11)
end

do --- Simple loop with cross-jumping.
  local x = 1
  while true do
    goto b
    ::a:: if x < 100 then goto c end
    goto d
    ::b:: x = x + 1; goto a
    ::c::
  end
  ::d::
  assert(x == 100)
end

do --- Backwards goto must close upval.
  local t = {}
  local i = 1
  M::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if ix
      local function f() return x end
    end
    goto foo
  end
  ::foo::
end
