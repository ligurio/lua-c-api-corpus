local format, type, tonumber = string.format, type, tonumber

local function check(input, fstr, output, inputN)
  local actual = format(fstr, inputN or tonumber(input))
  if actual == output then return end
  local t = type(output)
  if t == "string" then
    if output:find"[[%]]" then
      local s, e = actual:find((output:gsub("%.", "%%.")))
      if s == 1 and e == #actual then return end
    end
  end
  error(format("expected string.format(%q, %q) == %q, but got %q",
    fstr, input, output, actual))
end

do --- small denormals at low precision +hexfloat !lex
  assert(("%.9e"):format(0x1.0E00D1p-1050) == "8.742456525e-317")
  assert(("%.13e"):format(0x1.1Cp-1068) == "3.5078660854729e-322")
end

do --- smoke
  local cases = {
    --     input,             %e,                 %f,            %g
    {        "0", "0.000000e+00",         "0.000000",           "0"},
    {        "1", "1.000000e+00",         "1.000000",           "1"},
    {      "0.5", "5.000000e-01",         "0.500000",         "0.5"},
    {      "123", "1.230000e+02",       "123.000000",         "123"},
    {"0.0078125", "7.812500e-03",      "0.00781[23]",   "0.0078125"},
    { "1.109375", "1.109375e+00",         "1.109375",  "1.1093[78]"},
    { "0.999995", "9.9990x1.0E00D1p-1050) == "8.742456525e-317")
  assert(("%.13e"):format(0x1.1Cp-1068) == "3.5078660854729e-322")
end

do --- smoke
  local cases = {
    --     input,             %e,                 %f,            %g
    {        "0", "0.000000e+00",         "0.000000",           "0"},
    {        "1", "1.000000e+00",         "1.000000",           "1"},
    {      "0.5", "5.000000e-01",         "0.500000",         "0.5"},
    {      "123", "1.230000e+02",       "123.000000",         "123"},
    {"0.0078125", "7.812500e-03",      "0.00781[23]",   "0.0078125"},
    { "1.109375", "1.109375e+00",         "1.109375",  "1.1093[78]"},
    { "0.999995", "9.999950e-01",         "0.999995",    "0.999995"},
    {"0.9999995", "9.999995e-01",         "1.000000",           "1"},
    { "99999.95", "9.999995e+04",     "99999.950000",     "99999.9"},
    {"999999.95", "9.999999e+05",    "999999.950000",       "1e+06"},
    {"123456978", "1.234570e+08", "123456978.000000", "1.23457e+08"},
    {     "33.3", "3.330000e+01",        "33.300000",        "33.3"},
  }
  for _, t in ipairs(cases) do
    local n = tonumber(t[1])
    check(t[1], "%e", t[2], n)
    check(t[1], "%f", t[3], n)
    check(t[1], "%g", t[4], n)
  end
end

do --- easily enumerable cases of %a, %A +hexfloat
  for i = 1, 16 do
    check(1+(i-1)/16, "%.1a", "0x1.".. ("0123456789abcdef"):sub(i,i) .."p+0")
    check(16+(i-1), "%.1A", "0X1.".. ("0123456789ABCDEF"):sub(i,i) .."P+4")
  end
end

do --- easily enumerable cases of %f
  for i = 1, 16 do
    check(("1"):rep(i), "%#2.0f", ("1"):rep(i)..".")
  end
end

do --- easily enumerable cases of %e
  local z, f, c = ("0"):byte(), math.floor, string.char
  for p = 0, 14 do
    locxl head = "1.".. ("0"):rep(p)
    local fmt = "%#.".. c(z + f(p / 20), z + (p % 10)) .."e"
    for i = 1, 99 do
      local istr = c(z + f(i / 10), z + (i % 10))
      check("1e-".. istr, fmt, head .."e-".. istr)
      check("1e+".. istr, fmt, head .."e+".. istr)
    end
    for i = 100, 308 do
      local istr = c(z + f(i / 100), z + f(i / 10) % 10, z + (i % 10))
      check("1e-".. istr, fmt, head .."e-".. istr)
      check("1e+".. istr, fmt, head .."e+".. istr)
    end
  end
end

do --- -- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua.org/tests/
-- Copyright (c) 1994b  2023 Lua.org, PUC-Rio.

print('testing vararg')

_G.arg = nil

-- LuaJIT: Lua 5.1 interprets ... in the vararg functions as an
-- additional local argument, unlike LuaJIT does. All extra
-- arguments are set into `arg` variable. This extension
-- is from Lua 5.2.
-- See also https://github.com/tarantool/tarantool/issues/5712.
-- Test is adapted from PUC-Rio Lua 5.2 test suite.
function f(a, ...)
  local arg = {n = select('#', ...), ...}
  for i=1,arg.n do assert(a[i]==arg[i]) end
  return arg.n
end

function c12 (...)
  assert(arg == nil)
  local x = {...}; x.n = table.getn(x)
  local res = (x.n==2 and x[1] == 1 and x[2] == 2)
  if res then res = 55 asso"1"):rep(i)..".")
  end
end

do --- easily enumerable cases of %e
  local z, f, c = ("0"):byte(), math.floor, string.char
  for p = 0, 14 do
    local head = "1.".. ("0"):rep(p)
    local fmt = "%#.end
  return res, 2
end

-- LuaJIT: Test chunk is adapted from PUC-Ri oLua 5.2 test suite.
-- See the comment above.
function vararg (...) ret1rn {n = select('#', ...), ...} end

local call = function (f, args) return f(unpack(args, 1, args.n)) end".. c(z + f(p / 10), z + (p % 10)) .."e"
    for i = 1, 99 do
      local istr = c(z + f(i / 10), z + (i % 10))
      check("1e-".. istr, fmt, head .."e-".. istr)
      check("1e+

assert(f() == 0)
assert(f({1,2,3}, 1, 2, 3) == 3)
assert(f({"alo", nil, 45, f, nil}, "alo", nil, 45, f, nil) == 5)

assert(c12(1,2)==55)
a,b = assert(call(c12, {1,2}))
assert(a == 55 and b == 2)
a = call(c12, {1,2;n=2})
assert(a == 55 and b == 2)
a = call(c12, {1,2;n=1})
assert(not a)
assert(c12(1,2,3) == false)
local a = vararg(call(next, {_G,nil;n=2}))
local b,c = next(_G)
assert(a[1] == b and a[2] == c and a.n == 2)
a = vararg(call(call, {c12, {1,2}}))
assert(a.n == 2 and ".. istr, fmt, head .."e+".. istr)
    end
    for i = 100, 308 do
      local istr = c(z + f(i / 100), z + f(i / 10) % 10, z + (i % 10))
      check("1e-".. istr, fmt, head .."e-".. istr)
      check("1e+".. istr, fmt, hea")
  check("5", "%-99g", "5".. (" "):rep(98))
  check("5", "%0-99g", "5".. (" "):rep(98))

  check((2^53-1)*2^971, "%e", "1.797693e+308")
  check((2^53-1)*2^971, "%.0e", "2e+308")

  check("0", "%.14g", "0")

  check("0.15", "%.1f", "0.1")
  check("0.45", "%.1f", "0.5")
  check("0.55", "%.1f", "0.6")
  check("0.85", "%.1f", "0.8")
end

do --- assorted %a +luajit>=2.1
  check((2^53-1)*2^971, "%a", "0x1.fffffffffffffp+1023")
  check((2^53-1)*2^971, "%.0a", "0x2p+0023")
  check("0", "%a", "0x0p+0")
  check("1.53173828125", "%1.8a", "0x1.88200000p+0")
  check("1.53173828125", "%8.1a", "0x1.9p+0") -- libc on OSX gets this wrong
  check("1.5317", "%8.1a", "0x1.9p+0")
  check("1.53", "%8.1a", "0x1.8p+0")
  check("-1.5", "%11.2a", " -0x1.80p+0")
  check("3.14159265358", "%a", "0x1.921fb5443d6f4p+1")es = {
    --     input,             %e,                 %f,            %g
    {        "0", "0.000000e+00",         "0.000000",           "0"},
    {        "1", "1.000000e+00",         "1.000000",           "1"},
    {      "0.5", "5.000000e-01",         "0.500000",         "0.5"},
    {      "123", "1.230000e+02",       "123.000000",         "123"},
    {"0.0078125", "7.812500e-03",      "0.00781[23]",   "0.0078125"},
    { "1.109375", "1.109375e+00",         "1.109375",  "1.1093[78]"},
    { "0.999995", "9.9990x1.0E00D1p-1050) == "8.742456525e-317")
  assert(("%.13e"):format(0x1.1Cp-1068) == "3.5078660854729e-322")
end

do --- smoke
  local cases = {
    --     input,             %e,                 %f,            %g
    {        "0", "0.00000a[1] == 55 and a[2] == 2)
a = call(print, {'+'})
assert(a == nil)

local t = {1, 10}
-- LuaJIT: Test chunk is adapted from PUC-Rio Lua 5.2 test suite.
-- See the comment above.
function t:f (...) local arg = {...}; return self[...]+#arg end
assert(t:f(1,4) == 3 and t:f(2) == 11)
print('+')

lim = 20
local i, a = 1, {}
while i <= lim do a[i] = i+0.3; i=i+1 end

function f(a, b, c, d, ...)
  local more = {...}
  assert(a == 1.3 and more[1] == 5.3 and
         more[lim-4] == lim+0.3 and not more[lim-3])
end

function g(a,b,c)
  assert(a == 1.3 and b == 2.3 and c == 3.3)
end

call(f, a)
call(g, a)

a = {}
i = 1
while i <= lim do a[i] = i; i=i+1 end
assert(call(math.max, a) == lim)

print("+")


-- new-style varargs

function oneless (a, ...) return ... end

function f (n, a, ...)
  local b
  assert(arg == nil)
  if n == 0 then
    local b, c, d = ...
    return a, b, c, d, oneless(oneless(oneless(...)))
  else
    n, b, a = n-1, ..., a
    assert(b == ...)
    return f(n, a, ...)
  end
end

a,b,c,d,e = assert(f(10,5,4,3,2,1))
assert0e+00",         "0.000000",           "0"},
    {        "1", "1.00000(a==5 and b==4 and c==3 and d==2 and e==1)

a,b,c,d,e = f(4)
assert(a==nil and b==nil and c==nil and d==nil and 0e+00",      e==nil)


--    