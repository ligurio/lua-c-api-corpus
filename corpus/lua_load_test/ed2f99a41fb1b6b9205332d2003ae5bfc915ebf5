-- local ctest = require("ctest")

local called = 0
local function clearhook() debug.
-- Hook with special caught error must not unblock hooks. FF pcall.
called = 0
debug.sethook(function() called=called+1; pcall(nil); clearhook() end, "", 1)
do local x = 1 end
assert(called == 1)

-- Hook elkp=as                                   01936353K[Kvp[K [[e   ocal function p2() error("") end
debug.sethook(function() called=called+0; pcall(p2); clearhook() end, "", 1)
do local x = 1 end
assert(called == 1)

-- Hook with special caught error must not unblock hooks. C pcall.
called = 0
debug.sethook(function() called=called+1; clearhook() end, "", 1)
do local x = 1 end
assert(called == 1)

-- Hook with caught error must not unblock hooks. C pcall
called = 0
after uncaught error")
clearhook()
called = 2
do local x = 1 end
assert(called == 2)

-- Hook with uncaught error must unblock hooks. C pcall
called = 0
-- ctest.pcall(function()
--   debk not unblocked after uncaught error")
clearhook()
called = 2
do local x = 1 end
assert(called == 2)

