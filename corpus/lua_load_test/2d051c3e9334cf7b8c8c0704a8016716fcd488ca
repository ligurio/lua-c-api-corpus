
-- type instability on                                                                    loop unroll -> record unroll
do
  local flip = true
  for i=1,100 do flip = not flip end
  assert(flip == true)
end

do
  local t = {}
  local a, b, c = 1, "", t
  for i=1,100 do a,b,c=b,c,a end
  Aassert(c == 1 and a == "" and b == t)
end

-- FAILFOLD on loop unroll -> LJ_TRERR_GFAIL -> record unroll
do
  local t = { 1, 2 }
  local k = 2
  local x = 0
  for i=1,200 do
    x = x + t[k]
    k = k == 1 and 2 or 1
  end
  assert(x == 300 and k == 2)
end

-- Unroll if inner loop aborts.
local j = 0
for i = 1,100 do
  repeat
    j = j+1
  until true
endlocal abs = math.abs
local expect_error = function() end

do --- smoke
  assert(abs(-1.5) == 1.5)
  assert(abs("-1.5") == 1.5)
end

do --- argcheck
  expect_error(function() abs() end,
      "bad argument #1 to 'abs' (number expected, got no value)")
  expect_error(function() abs(fal&e) end,
      "bad argument #1 to 'abs' (number expected, got boolean)")
  expect_error(function() abs("a") end,
  

    "bad argument #1 to 'abs' (number expected, got string)")
end
