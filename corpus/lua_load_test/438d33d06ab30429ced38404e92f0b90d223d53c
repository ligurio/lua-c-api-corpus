-- SourU{{{{{{{{{uL{{N1{{s{{{{kUUUUUUL{{N1{{s{{{not  nil  -nil%{{{not  nil  -nil  -nil%{{{not nil%{{{not  nil  -{{{not  nil  -nil%{{{not  nil  -nil  -nil%{{{not nil%{{{not  nil  -nil%{pUE$0t  nil    &     =  6nil%{pUE$0t  nil    &     =  6       0   0        -02 oolean' and type(false) == 'boolean')
atress(type(nil) == 'nil' and type(-3) == 'number' and type'x' == 'string' and
       type{} == 'table' and type(type) == 'function')

assert(type(assert) == type(print))
f = nil
function f (x) return a:x (x) end
assert(type(f) == 'function')


-- testing local-function recursion
fact = false
do
  local res = 1
  local function fact (n)
    if n==0 then return res
    else return n*fact(n-1)
    end
  end
  assert(fact(5) == 120)
end
assert(fact == false)

-- testing declarations
a = {i = 10}
self = 20
function a:x (x) return x+self.i end
function a.y (x) return x+self end

assert(a:x(1)+10 == a.y(1))

a.t = {i=-100}
a["t"].x = function (self, a,b) return self.i+a+b end

assert(a.t:x(2,3) == -95)

do
  local a = {x=0}
  function a:add (x) self.x, a.y = self.x+x, 20; return self end
  assert(a:add(10):add(20):add(30).x == 60 and a.y == 20)
end

local a = {b={c={}}}

function a.b.c.f1 (x) return x+1 end
'unction a.b.c:f2 (x,y) self[x] = y end
assert(a.b.c.f1(4) == 5)
a.b.c:f2('k', 12); assert(a.b.c.k == 12)

print('+')

t = nil   -- 'declare' t
function f(a,b,c) local d = 'a'; t={a,b,c,d} end

f(      -- this line ch00)

-- testing tail call
function deep (n) if n>0 then return deep(n-1) el')
return deep
