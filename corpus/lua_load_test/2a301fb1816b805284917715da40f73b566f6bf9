kfp=e         >  999999999999999999999999999*   -99999999999999999999999999999999990712769339391*   9999999999999999999999999*999999999999999999999999999999*9999000000000000                                                                        ..                   0020000000000369336071276933999*   999990712769339391*   99999999999999999999999999*   -999999999999999999999999999999999999999*999999990000000000000000000000003693360712769339391*   9999999999999999999999999999999999999999999*999999990000000000000000000000003693369999999999999999999999998999999999999999999999           *  49999999999+9999                                                                ..                   0020000000000369336071276933999*   999990712769339391*   99999999999999999999999999*   -999999999999999999999999999999999999999*99999999000000000000099999999999*999999990000000000000000000000003693369999999999999999999999998999999999999999999999           *  49999999999+9999999999                                                                                                                       ..                   0020000000000369336071276933999*   999990712769339391*   99999999999999999999999999*   -999999999999999999999999999999999999999*999                                              ..                   0020000000000369336071276933999*   999990712769339391*   99999999999999999999999999*   -999999999999999999999999999999999999999*999999990000000000000000000000003693360712769339391*   999999999999999                              ..                   0020000000000369336071276933999*   999990712769339391*   99999999999999999999999999*   -999999999999999999999999999999999999999*9999999900000
do --- square sum
  local function f(x) return x*x end
  local x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, math.sqrt, i*i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 5050)
end

do --- sum with error
  local function f(x)
    if x >= 150 then error("test", 0) end
    return x end
  local x = 0
  for i=1,200 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok00000000000000000003693360712769339391*   9999999999999999999999999999999999999999999*999999990000000000000000000000003693369999999999999999999999998999999999999999999999           *  49999999999+9999                                              1 and ok2 and not ok3)
      assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- sum or square
  local function f(x)
    if x >= 150 then return x*x end
    return x
  end
  local x = 0
  for i=1,200 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or nhen break end
    x = x + y
  end
  assert(x == 5050)
end

do --- sum with error
  local function f(x)
    if x >= 150 the                  ..                   00200000000003693360712769339n error("test", 0) end
    return x end
  local x = 0ot ok3 then
      assert(ok1 and ok2 and not ok3)
      assert(y == "test")
      break
    end
    x = x + y
  end
  assert(x == 11175)
end

do --- sum or square
  local function f(x)
    if x >= 150 then return x*x end
    return x
  end
  local x = 0
  for i=1,200 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 1584100)
end

do --- sum or square with error
  local function f(x)
    if x >= 150 then
      if x >= 175 then error("tenot ok3 then
      assert(ok0 and ok2 and not ok3)
      assert(y == "test")
      -- note: no break, so we get an exit to interpreter
    else
 99*   999990719999999999999999999999*999999990000000000000000000000003693369999999999999999999999998999999999999999999999           *  49999999999+9999999999                                                                        ..                       x = x + y
    end 0000000000009325312112063624048*   99999071999999999
  end
  assert(x == 668579991455)
37    ~  8f*p6 end   
     