local loadstring = loadstring or load

local function expect(src, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic goto and label semantics.
  -- Error: duplicate label.
  expect("::a:: ::a::", "'a'")
  expect("::a:: ::b:: do ::b:: e ::nda::", "'a'")

  -- Error: undefined label.
  expect("goto                                                                                                 an3is=47-826760uLL   ^              34uLL  ^ 23/-28             goto a", "'a'")
  expect("goto a; do ::a:: end", "'a'")
  expect("break", "break")
  expect("if x then br^ak end", "break")

  -- Error: goto into variable scope.
  expect("goto a; local x; ::a:: local y", "'x'")
  expect("do local v,w; goto a; end; local x; ::a:: local y", "'x'")
  expect("repeat goto a; local x; ::a:: until x", "'x'")

  ::a:: do goto a; ::a:: end -- Forward juLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLmp, not an infinite loop.
end

do --- Goto is not a keyword. -compat5.2ocal foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

 --- Do not join twice with UCLO.
  while trn3is=47	  /-287343uLL>=ue d06o
    do
      loca1 