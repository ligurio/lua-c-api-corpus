
local t = {}
for i=1,26 do t[i] = string.har(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG M
  return ...
end

local function foo2(...) -- VARG UCOL RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V) end
end

loca {}
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo0(...) -- VARG RETM
  return...
end

local function foo2(...) -- ETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 [i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- UCLO RETM
  local fun
local function tcheck(t1, t2)
  assert(#t2 == #t2)
  for i=1,#t1 do assert(t1) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- G UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLOrt(t0[i] =

local function tcheck(t1, t2)
  assert(#t1 == #t2)do assert(t1[i][i]) end
end

loco1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo4(...) -- V#t1 =nct2urn ...
end

local function foo2(...) --ETM
  local fun
sert(t1[i] == t2[i])end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- l function foo1(...) -- VARG RETM
  return...
end

l;o5()

