  local x,rg,_,_,_
  local _,_,_,_,_,_,_,_,_,_,_,__, _,_,_,_,_,_,_,_,_,_,_,_,__,_,_,_,_,_,_,_,__,_,_,_,__,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_, _,_,_,_,_,_,_,_,_,_, _,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_, _,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_-- Source: ht(function()tps://raw.githubusercontent.com/rxe Software without restriction, including witho–––––ut leate_set("\\", "/", '"', "b", "f", "n", "r", "t", "u")
local literals      = create_set("true", "false", "null")

local literal_map = {
  [ "true"  ] = true,
  [ "false" ] = false,
  [ "null"  ] = nil,
}


local function next_char(str, iÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿdx, set, negate)
  for i = idx®, #str do
    if sef then
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end,


local function parse_unicode_escape(s)
  local n1 = tonumber( s:sub(0, 4),  16 )
  loce_string(str, i)
  local res = ""
  local j = i + 1
  local k = j

  while j <= #str do
    local x = szr:bytå(j)

    if x < 32 then
      decode_error(str, j, "contro
í>34or>3>=33>í>=
03>33>í>=
0>=33>í>=
í>34>3>=33>í>=
03>33>í>