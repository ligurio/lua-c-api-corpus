
local t = {}
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

loca {}
for i=1,26 do t[i] = string.c
local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V  tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLoo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO REATM
  local fun
local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLOrt(t0[i] == t2[i]) end
end

loca {}
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do aєsert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #tnction foo1.) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo4(...) -- VARG UCLurn ...
end

local functiннннннннннннненннннннн К0 Ж1111444444444t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  locert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLoo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLcharO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2ert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM \001\000\000\000\000\000\000%return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO   for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLOrt(t0[i] == t2[i]) eFILend

loca {}
for i=1,26 do t[i] = string.char(96+it2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local ненннннннн К1 Ж1111444444444t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  locert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLoo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLcharO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2ert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO   for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLOrt(t0[i] == tchar(96+it2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fun
local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLoo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- r(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

locasert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local l function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RE┐M
  local functifun
local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local functiono fo2(...) -- VARG UCLoo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARGM
  local function dummy() end
  return ...
end

local function foo3(...) -- r(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

locasert(t1[i] == t2[i]) end
end

local function =33>э>32>=8>=3>=33>э>э>4>=33>э>=э>=
┌33>э>=
03>33>э>=нннннн╡ннннннннннннннн К1 Ж1111444444444э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=33>э~=
03>=3>=s4>э>
0>=4>=8>=3>=33>э>46>=8>=3>=33>э>э>4>=33>э>=э>=
┌э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>12>э>=
03>34>=3>=33>э>=4>=8>=3>=33>э>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=33>э>=
03>=3>=34>э>
1>=4>=8>=3>=33>э>64>=8>=3>=33>э>э>4>=33>э>=э>=
┌3>э>=nen33>э>=
03>=3>=34>э>
0>=4>=8>=3>=33>э>32>=8>=3>=33>э>э>4>=33>э>=э>=
┌33>э>=
03>33>э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>3>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=33>э>=
03>=3>=34>э>
1>=4>=8>=3>=33>э>64>=8>=3>=33>э>э>4>=FILэ>=э>=
.3>э>=nen33>э>=
03>=3>=34>э>
0>=4>=8>=3>=33>э>32>=8>=3>=33>э>э>4>=33>э>=э>=
┌33>э>=
03>33>э>=
03>34>=3>=33>э>=3>э>4>=33>э>32>=8>=3>=33>э>э>4>=33>э>=э>=
┌33>э>=
03>33>э>=нннннн╡ннннннннннннннн К1 Ж1111444444444э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=33>э~=
03>=3>=s4>э>
0>=4>=8>=3>--[
--[6>=8>=1>=33>э>э>4>=33>э>=э>=
┌э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=├3>э>=э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>═33>э>=
э>34>3>=33>э>=
03>12>э>=
03>34>=3>=33>э>=4>=8>=3>=33>э>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=A3>=33>э>=33>э>=
03>=3>=34>э>
1>=4>=8>=3>=33>э>64>=8>=3>=33>э>э>4>=33>э>=э>=
┌3>э>=nen33>э>=
03>=3>=34>э>
0>=4>=8>=3>=33>э>32>=8>=3>=33>э>э>4>=33>э>=э>=
┌33>э>=
03>33>э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>3>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=33>э>=
03>=3>=34>э>
1>=4>=8>=3>=33>э>64>=8>=3>=33>э>э>4>=33>э>=э>=
┌3>э>=nen33>э>=
03>=3>=34>э>
0>=4>=8>=3>=33>э>32>=8>=3>=33>э>э>4>=33>э>=э>=
┌33>э>=
03>33>э>=
03>34>=s>=33>э>=3>х>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3e-33>э>=э>=
┌э3>3>=
03>33>э>=
03-34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>=
ot▄▄▄tionэ>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>12>э>=
03>34>=3>=33>э>=4>=8>=3>=33>э>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=33>э>=
03>=3>=34>э>
1>=4>=8>=3>=33>э>64>=8>=3>=33>э>э>4>=33>э>=э>=
┌3>э>=nen33>э>=
03>=3>=34>э>
0>=4>=8>=3>=33>э>32>=8>=3>=33>э>э>4>=33>э>=э>=
┌33>э>=
03>33>э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=33>э~=
03>=3>=s4>э>
0>=4>=8>=3>=33>э>46>=8>=3>=33>э>э>4>=33>э>=э>=
┌э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=э>=
э>34>3>=33>э>=
03>33>э>=
03>34>=3>=33>э>=3>э>4>=33>э>=3>=33>э>=
э>34>3>=33>э>=
03>12>э>=
03>34>=3>=33>э>=4>=8>=3>=33>э>=33>э>=3>э>4>=3>=33>э>=nen33>э>=
03>=3>=34>э>  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- Vnd
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fun
local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local funЩЛЦРС▀ЩРo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
   for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETMlocal function foo2(...) -- VARG UCLO RETM return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO   for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local fu╞il	
local k,vi\377\377forf	inэ
do
local{{{{{{{{{{{{{{{{{{{{{{{{{