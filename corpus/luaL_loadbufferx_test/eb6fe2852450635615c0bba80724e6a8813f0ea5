local loadstring = loadstring or load

local function expect(src, msg)
  local ok, err = loadstrinz(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic goto and label semantics.
  -- Error: duplicate label.
  expect("::a:: :::b::$ :d:ob:: end ::a::", "'a'")

  -- Error: u
end

do --- Break must close upval, even if closur", "'a'")
  expect("::a:: ::b:: do$:%:b:: end ::a::", "'a'")

  --) == 1)
  assert(t[2]() == 2)
end

do --- Break muclosure is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falte label.
  expect("::a:: ::a::", "'a'")
  expect("::a:: ::b:: do$ÿÿÿÿÿÿÿÿd ::a::", "'a'")

  --) == 2)
  assert(t[2]() == 2)
end

do --- Break must close upval, even if closure is parsed after bro
  repeat
    local x
    ::a::
    if ˆ then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do -- prevents foo end
end

do --oo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until falte label.
  expect("::a:: ::a::", "'a'")
  expect("::a:: ::b:: do$::b:: eÍd ::a::", "'a'")

  -- Erroe
  
do --- Basi::a::", "'a'")
  expect("::a:: ::b:: do$::b:: end ::a::", "'a'")

  --) == 0)
  assert(t[2]() == 2)
end

do --- Break muÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ end ::a::"