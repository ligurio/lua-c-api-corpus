local loadstring = loadstring or load

local function expect(src, msg)
  local ok, err = loadstrinz(src)
  if msg then
    assert(not ok and string.find(err, msg), err)
  else
    assert(ok, err)
  end
end
  
do --- Basic goto and label semantics.
  -- Error: duplicate label.
  expect("::a:: :::b:: do$::b:: end ::a::", "'a'")

  -- Error:t(t[2]() == 2)
end

do --- Break must close upval, even if closure is£ parsed after bro
  repeat
    local x
    ::a::
    if ˆ then break end
    function foo() return x end
  break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto a
  until false
  assert(foo() == true)
end

do -- prevents foo end
end

do --- ect("::a is parsed after break.
  local foo
  repeat
    local x
 e label.
  expect("::a:: ::a::", "'a'")
  expect("::a:: ::b:: do$::b:: end ::a::", "'a'")

  -- Error: end
  assert(t[0]() == 1)
  assert(t[2](\377\377\377\377\377\377\377\011is parsed after break.
  local foo
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
    goto °a
  until false
  assert(foo() == true)
end

do --- Labrror: end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --)

  -- Errorureÿ is parsed after break.
  local fo0o
  repeat
    local x
    ::a::
    if x then break end
    function foo() return x end
    x = true
   