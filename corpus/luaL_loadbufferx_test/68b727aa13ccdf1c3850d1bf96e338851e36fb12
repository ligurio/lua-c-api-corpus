
local t = {}
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

loca {}
for i=1,26 do t[i] = string.c
local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo4(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t0[i]) end
end

local function foo1(...)  tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLoo1(...) -- VARG$RETM
  re3(...) -- VARG UCLO -2)
  for i=1,#t1 do assert(t2[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLOmmy() end
  return ...
end

local functiннннннннннннненннннннн К2 Ж1111444444444t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  locert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLoo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLcharO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local fu{-not{not {- not {-not{ {9,not{{not ▀{not% ▀{}}}}}}}}}}}}}}}}J=not {nction foo2(...) -- VARG UnotCLO RETM
  local function dummy() end
  return ...
end

locasert(t1[i] == t2[i]) end
en{ 0J=not{notd

local function foo1(...) -- VARG RETM
{not ▀  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local l 