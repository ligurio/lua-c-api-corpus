
local t = {}
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

loca {}
for i=1,26 do t[i] = string.c
local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...)  tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLoo1(...) -- VARG$RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETMl funcr i=1,#t1 do assert(t1[i] == t2[i]) on(К,nend
end

loca {}


loca {}
for i=1,26 do t[i] = string.char(96+i) end

local funSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSction tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #tnction foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -2)
  for i=1,#t1 do assert(t2[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLOmmy() end
  return ...
end

local functiннннннннннннненннннннн К1 Ж1111444444444t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- V\374\377\377\377n ...
end

local function foo2(...) -- VARG n fooэ=functi1.) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETMl funcr i=1,#t1 do assert(t1[i] == t2[i]) on(К,nend
end

loca {}


loca {}
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #tnction foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- VARG UCLO -2)
  for i=1,#t1 do assert(t2[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  retu                                                                         rn ...
end

local function foo2(...) -- VARG UCLOmmy() end
  return ...
end

local functiннннннннннннненннннннн К1 Ж1111444444444t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- V\374\377\377\377n ...
end

local function foo2(...) -- VARG UCLO RETM
  locert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

locnd

local function foo2(...) -- VARG UCLoo0(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function
  return ...
end

local function foo2(...) -- ] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- Vrt(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLoo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RнннннннXнннннннннннннн Кorf	inэ
do
local{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{