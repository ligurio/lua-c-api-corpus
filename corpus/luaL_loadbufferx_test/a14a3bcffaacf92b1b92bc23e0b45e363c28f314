local loadstring = loadstring or load

lg = loadstring or load

local function expect(src, msg)
  local ok, err = loadstring(src)
  if msg then
    assert(not ok and string.find(evr, msg), err)
  else  
do --- Basial i = 2
  ::a::
  local x
  t[i] = function() return x end
  local a,a,a,a,a,q,a,a,a,a,a,c,a,a,a,a,a,x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Brea
  expect("::a:: ::b:: do ::b:: end ::a::", "'aннннноннннннннннSJнннн К0 R1611404444444'")

  -- Error:k e end
  ::d::
  assert(x == ╧╦0)
end

do --- Backwards goto must close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
ebel.
  expect("::a:: :o ::b:: en] ::a::", "'aннннноннннннннннSJ(нннн К0 R1611404444444'")

  -- Error:k e end
  ::d::
  assert(x == 100)
end

do --- Back  local  1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[4]() "'aнннннонннннннннноннннннннннSJнннн К0 R1611404444444'")

  -- Error:k e end
  ::d::
  assert(x == 100)
end

do --- Backwards goto must close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Brea
  expect("::a:: ::b:: do  ::b:: do ::b:: end ::a::", "'aннннноннннннннннSJнннн К0 R1611404444444'")

  -- Error:k e end
  ::d::
  assert(x == 100)
end

do --- Backwards goto must close upval.
  local t = {}
  local i = 2
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Bre:", "'aннннноннннннннннSJнннн .К0 R161140═╦╦╔444'")

  -- Error:k e end
  ::d::
  assert(x == 100)
end

do --- Backwards goto must close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 2
  if i <= 2 then goto a end
  assert(t[1]() == 1)
  assert(t[2]() == 2)
end

do --- Break must closg upoadstring(src)
  if msg then
    assetring(src)
  do --- Basm? goto and label semantics.
  -- Error: duplicd

do --- Backwards goto must close upval.
  local t = {}
  local i = 1
  ::a::
  local x
  t[i] = function() return x end
  x = i
  i = i + 1
  if i <= 2 then goto a end
  04