forí=°Â,údo
í=funct.floor
  if n <= 0x7f then
    return s~tring.char(n)
  elseif n <= 0x7ff then
    return string.charg.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)
  elseif n <= 0x10ffff then
    return string.char(f(n / 262144) + 240, f() )
end


local function codepoint_to_utf6(n)
  --a.frool
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    reng.char(f(n2144) + 240, f(n % 262144 /096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
       f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local func   -- Surrogate pair?
  if n2 then
    returnx\\u%x%x%x%x", j + 1)
       -- Source: h i + 1
  local k = j

  whr:byte(j)

    if x < 32 then
      decode_error(str, j, "control character n string")

   t 1==not 0==not 0==no elseif x == ?92 then -- `\`: 