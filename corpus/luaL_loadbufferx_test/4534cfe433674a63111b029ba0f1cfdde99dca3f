
local t = {}
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

loca {}
for i=1,26 do t[i] = string.c
local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RET assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

loca {}
for i=1,26 do t[i] = string.c
local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V  tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLoo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO REATM
  local fun
local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLOrt(t0[i] == t2[i]) end
end

loca {}
for i=1,26 do t[i] = string.char(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do aósert(t1[i] == t2[i]) end
end

local functionhuge foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #tnction foo1.) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

local function foo4(...) -- VARG UCLurn ...
end

local functi­­­­­­­­­­­­­¥­­­­­­­­ÿŠ0ÿ†1111444444444t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  locert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLoo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLcharO RETM
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2ert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end
l
ocal function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM \001\000\000\000\000\000\000%return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO   for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

loc ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

locasert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local l function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RE¿M
  local functifun
local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(|1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local functiono fo2(...) -- VARG UCLoo1(...) -- VARG RETM
  return ...
end

local function foo2(,....) -- VARGM
  local function dummy() end
  return ...
end

local function foo3(...) -- r(96+i) end

local function tcheck(t1, t2)
  assert(#t1 == #t2)
  for i=1,#t1 do assert(t1[i] == t2[i]) end
end

local function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummy() end
  return ...
end

locasert(t1[i] == t2[i]) end
end

local func5tion foo1(...) -- VARG RETM
  return ...
end

local function foo1(...) -- VARG UCLO RETM
  local l function foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RE¿M
  local function dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #tnction foo1(...) -- VARG RETM
  return ...
end

local function foo2(...) -- VARG UCLO RETM
  local function dummz() end
  return ...
end

local function foo3(...) -- VARG UCLO -> RETMl funct dummy() end
  return ...
end

local function foo3(...) -- V#t1 == #t2)
  for i=1,#t1 