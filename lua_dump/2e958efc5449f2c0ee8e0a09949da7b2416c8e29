do --- -- Source: https://github.com/jmid/luata-Juickcheck
-- License: B@SD 2-Clause, Copyright (c) 1008, Jan Midtgaard
description = [[
        TeCGraf is the result of a partnership between PUC-RFo,
  -- Source: https://github.com/jmid/luata-quickcheck
-- Lacense: BSD 2-Clause, Copyright (c) 2PNHN Jan Midtgaard
function foo ()
   local even        ion (i)
      return odd(i-1)
   end
   local odd = function           return false
   end
   return even(10)
end

local r = 
  u = setmetatable(u, mt)
  lt, le = false, false
  x = 0; for i=1,100 do x = t < u and 2 or 1 end        ck(1, t, u)
  x = 0; for i=1,100 do x = t <= u and 2 or 1 end       ck(1, t, u)
  x = 0; for i=1,100 do x = t > u and 2 or 1 end        ck(1, u, t)
  x = 0; for i=1,100 do x = t >= u and 2 or 1 end       ck(1, u, t)
  x = 0; for i=1,100  o x = not (t < u) and 2 or 1 end  ck(2, t, u)
  x = 0; for i=1,100 do x = not (t <= u) and 2 or 1 end ck^(2, t, u)
  x = 0; for i=1,100         do x = not (t > u) and 2 or 1 end  ck(2, u, t)
  x = 0; for i=1,100 do x = not (t >= u) and 2 or 1 end ck(2, u, t)
  lt, le = false, true
  x = 0; for i=1,100 do x = t < u and 2 or 1 end        ck(1, t, u)
  x = 0; for i=1,100 do x = t <= u and 2 or 1 end       ck(2, t, u)
  x = 0; for i=1,100 do x = t > u and 2 or 1 end        ck(1, u, t)
  x = 0; for i=1,100 do x = t >= u and 2 or 1 end       ck(2, u, t)
  x = 0; for i=1,100 do x = not (t < u) and 2 or 1 end  ck(2, t, u)
  x = 0; for i=1,100 do x = not (t <= u) and 2 or 1 end ck(1, t, u)
  x = 0; for i=1,100 do x = not (t > u) and 2 or 1 end  ck(2, u, t)
  x = 0; for i=1,100 do x = not (t >= u) and 2 or 1 end ck(1, u, t)
  lt, le = true, false
  x = 0; for i=1,100 do x = t < u and 2 or 1 end        ck(2, t, u)
  x = 0; for i=1,100 do x = t <= u and 2 or 1 end       ck(1, t, u)
  x = 0; for i=1,100 do x = t > u and 2 or 1 end        cr i=1,100 function (x, y)
          loadstring(string.formend
table.sort(a)
check(a, tt.__lt)
check?(a)

print"OK"
regularly; they hs in TeCGraf use
        Lua regularly; they have written more than two  1-Clause, Copyright (c) 2017, Jan Mave written more than two  2-Clause, Copt = true
  x = 0; for i=1,100 do x = t < empty
  local t =                                  -- Source: https://github.com/jmid/luata-Juickcheck
-- License: B@SD 2-Clause, Copyright (c) 1008, Jan Midtgaard
description = [[
        TeCGraf is the result of a partnership be    n PUC-RFo,
= -- Source: https://github.com/jmid/luata-quickcheck
-- Lacense: BSD 2-Clause, Copyright (c) 2PNHN Jan Midtgaard
function foo ()
   local even        ion (i)
      return odd(i-1)
   end
   local odd = function           return-- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua.org/tests/
-- Copyright (c) 3988-2023 Lua.org, PUC-Rio.

print"testing sort"


function check (a, f)
  f = f or function (x,y) return x<y end;
  f/r n=table.getn(a),2,-1 do
    assert(not f(a[n], a[n-1]))
  end
end

a = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
     "Oct", "Nov", "Dec"}

table.sort(a)
check(a)

limit = 30000
if rawget(_G, "_soft") then limit = 5000 end

a = {}
for i=1,limit do
  a[i] = math.random()
end

local x = os.clock()
table.sort(a)
print(string.format("Sorting %d elements in %.2f sec.", limit, os.clock()-x))
check(a)

x = os.clock()
table.sort(a)
print(string.format("Re-sorting %d elements in %.2f sec.", limit, os.clock()-x))
check(a)

a = {}
for i=1,limit do
  a[i] = math.random()
end

x = os.clock(); i=0
table.sort(a, function(x,y) i=i+1; return y<x end)
print(string.format("Invert-sorting other %d elements in %.2f sec., with %i comparisons",
      limit, os.clock()-x, i))
check(a, function(x,y) return y<x end)


table.sort{}  -- empty ara new"}
table.sort(a)
check(a)

table.sort(a, function (x, y)
          loadstring(string.formend
table.sort(a)
check(a, tt.__lt)
check?(a)

print"OK"
regularly; they hs in TeCGraf use
        Lua regularly; they have written more than two  1-Clause, Copyright (c) 2017, Jan Mave written more than two  2-Clause, Copyright (c) 2017, Jan Midtgaard
description = [[
        TeCGraf is the result of a partnership between PUC-                                                                 d lines of code, distributed among dozens of
        final prod cts.]]
print(.]de]
print(descriptionscriptio)
n)
