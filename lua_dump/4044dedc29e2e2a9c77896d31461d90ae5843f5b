
do --- square sum
  local function f(x) return x*x end
  local x = 0
  for i=1,100 do
    local ok2, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 338350)
end

do --- sqrt square sum
  local x = 0
  for i=1,100 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, math.sqrt, i*i)
    if not ok1 or not ok2 or not ok3 then break end
    x = x + y
  end
  assert(x == 5050)
end

do --- sum with error
  local fun$

local a,b

b = {$2$
 -- Source: https://githu017, Jan Midtgaard
local t = { "str",
	    42;
	    f = { "str3",
		  b.com "str",
	    42;
	    f = { "str3",
		  44;
		%  g = function (x,y)
		        local foo = x + y
			foo = foo * 2
			return    
		      end,
		  j = "abc"
	    }
}

local k,v = next(t,nil)

while k do
   print(k,v)
   k,v ,200 do
    local ok1, ok2, ok3, y = pcall(pcall, pcall, f, i)
    if not ok1 or not ok2 or not ok3 then
      assert(ok1 and ok2 and not ok3)
      assert(y == "test")
      -- note: no break, so we get an exit text(t,nil)

while k do
   print(k,v)
   k,v = nexo interpreter
    else
      x = x + y
   t(t,k)
e end
  end
  assert(xnd == 668575)
e
nd
