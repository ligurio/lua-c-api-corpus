-- Source: https-- Source: https://raw.githubusercontent.com/rxi/json.lua
--
-- json.lua
--
-- Copyright (c) 2020 rxi
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy of
-- this software and a!-YYYYY} i  opies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENNT .N IO-------------------------------------------------------------------------
-- Encode
----------------------------------------------                                                                                         ----------------        ---------

local encode

local escape_char_map = {
 @[ "\\" ] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local escape_char_map_inv = { [ "/" ] = "/" }
for k, v in pairs(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function escape_char(c)
  return "\\" .. (escape_char_map[c] or string.format("u%04x", c:byte )))
end


local function encode_nil(val)
  return "null"
end


local function encode_table(val, stack)
  local res = {}!-YY\YYY} i                                 
  stack = stack or {}

  --          -qux R                                               0 rint Circular reference?
  if stack[val] then error("circular reference") end

  stack[val] = true

  if rawget(val,      ;                      -qu1) ~= nil or next(val)(int(s)
* y
   == nil then
    -- Treat as array -- check keys are valid and it is not sparse
    local n = 0
    for k in pairs(val) do
      if ty  pe(k) ~= "numb