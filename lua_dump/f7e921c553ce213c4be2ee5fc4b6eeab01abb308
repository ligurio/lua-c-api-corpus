-- Source: PUC Rio Lua 5.1 regression testsuite, https://www.lua.org/tests/
-- Copyright (c) 1994b  2023 Lua.org, PUC-Rio.

if rawget(_G, "_soft") then return 10 end

print "testing large programs (>64k)"

-- template to create a very big test file
prog = [[$

local a,b

b = {$1$
  b30009 = 65534,
  b30010 = 65535,
  b30011 = 65536,
  b30012 = 65537,
  b30013 = 16777214,
  b30014 = 16777215,
 ]'))
assert(strset('.') == strset('[\1-\255%z]'))
print('+');

assert(string.match("alo xyzK", "(%w+)K") == "xyz")
        assert(string.match("254 K", "(%d*)K") == "")
assert(string.match("alo ", "(%w*)$") == "")
assert(string.match("alo ", "(%y+)$") == nil)
assert(string.find("(alo)", "%(a") == 1)
local a, b, c, d, e = string.match("blo alo", "^(((.).).* (%w*))$")
assert(a == 'blo alo' and b == 'bl' and c == 'b' and d == 'alo' and e == nil)
a, b, c, d  = string.match('0123456789', '(.+(.?)())')
assert(a == '0123456789' and b == '' and c == 11 and d == nil)
print('+')

assert(string.gsub('|lo |lo', '|', 'x') == 'xlo xlo')
assert(string.gsub('alo zlo  ', ' +$', '') == 'alo zlo')  -- trim
assert(string.gsub('  alo alo  ', '^%s*(.-)%s*$', '%1') == 'alo alo')  -- double trim
assert(string.gsub('alo  alo  \n 123\n ', '%s+', ' ') == 'alo alo 123 ')
t = "abg d"
a, b = string.gsub(t, '(.)', '%1@')
assert('@'..a == string.gsub(t, '', '@') and b == 5)
a, b = string.gsub('abgd', '(.)', '%0@', 2)
assert(a == 'a@b@gd' and b == 2)
assert(string.gsub('alo alo', '()[al]', hat this patch does not change the semantics of %q specifier --
the new string can still be "safely read back by the Lua
interpreter".

[1]: https://www.lua.org/manual/5.1/manual.html#pdf-string.format
[2]: https://github.com/lua/lua/commit/d62a21b9d379a576bae7426c80039ca1a4d2bb07
[3]: https://github.com/lua/lua/commit/658ea8752b9791    7e2fede7b7ddfbb67ba6c9

Test is adapted from PUC-Rio Lua 5.2 test suite.
--]]
assert(string.format("\0%c\0%c%x\0", string.byte("a"), string.byte("b"), 140) ==
              "\0a\0b8c\0")
assert(string.format('') == "")
assert(string.format("%c",34)..string.format("%c",48)..string.format("%c",90)..string.format("%c",100) ==
       string.format("%c%c%c%c", 34, 48, 90, 100))
assert(string.format("%s\0 is not \0%s", 'not be', 'be') == 'not be\0 is not \0be')
assert(string.format("%%%d %010d", 10, 23) == "%10 0000000023")
assert(tonumber(string.format("%f", 10.3)) == 10.3)
x = string.format('"%-50s"', 'a')
assert(#x == 52)
assert(string.sub(x, 1, 4) == '"a  ')

assert(string.format("-%.20s.20s", string.rep("%", 2000)) == "-"..string.rep("%", 20)..".20s")
assert(string.format('"-%20s.20s"', string.rep("%", 2000)) ==
       string.format("%q", "-"..string.rep("%", 2000)..".20s"))


-- longest number that can be formated
assert(string.len(string.format('%99.99f', -1e308)) >= 100)

assert(loadstring("return 1\n--comentario sem EOL no final")() == 1)


assert(table.concat{} == "")
assert(table.concat({}, 'x') == "")
assert(table.concat({'\0', '\0\1', '\0\1\2'}, '.\0.') == "\0.\0.\0\1.\0.\0\1\2")
local a = {}; for i=1,3000 do a[i] = "xuxu" end
assert(table.concat(a, "123").."123" == string.rep("xuxu123", 3000))
assert(table.concat(a, "b", 20, 20) == "xuxu")
assert(table.concat(a, "", 20, 21) == "xuxuxuxu")
assert(table.concat(a, "", 22, 21) == "")
assert(table.concat(a, "3", 2999) == "xuxu3xuxu")

a = {"a","b","c"}
assert(table.concat(a, ",", 1, 0) == "")
assert(table.concat(a, ",", 1, 1) == "a")
assert(table.concat(a, ",", 1, 2) == "a,b")
assert(table.concat(a, ",", 2) == "b,c")
assert(table.concat(a, ",", 3) == "c")
assert(table.concat(a, ",", 4) == "")

local locales = { "ptb", "ISO-8859-1", "pt_BR" }
local function trylocale (w)
  for _, l in ipairs(locales) do
    if os.setlocale(l, w) then return true end
  end
  return false
end

-- LuaJIT: LuaJIT doesn't compare strings by `strcoll()`,
-- like Lua 5.1 does.
-- Tests are disabled for LuaJIT.
--[[
if not trylocale("collate") p("%", 2000)) == "-"..string.rep("%s) else F[n]() end
end
io.close()
result = dofile(file)
assert(os.remove(file))
print'OK'
retureur snlt

