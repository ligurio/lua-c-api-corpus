luaL_findtable:
   84|  46.0k|{
   85|  46.0k|  const char *e;
   86|  46.0k|  lua_pushvalue(L, idx);
   87|  46.0k|  do {
   88|  46.0k|    e = strchr(fname, '.');
   89|  46.0k|    if (e == NULL) e = fname + strlen(fname);
  ------------------
  |  Branch (89:9): [True: 46.0k, False: 0]
  ------------------
   90|  46.0k|    lua_pushlstring(L, fname, (size_t)(e - fname));
   91|  46.0k|    lua_rawget(L, -2);
   92|  46.0k|    if (lua_isnil(L, -1)) {  /* no such field? */
  ------------------
  |  |  269|  46.0k|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|  46.0k|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 46.0k, False: 0]
  |  |  ------------------
  ------------------
   93|  46.0k|      lua_pop(L, 1);  /* remove this nil */
  ------------------
  |  |  256|  46.0k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   94|  46.0k|      lua_createtable(L, 0, (*e == '.' ? 1 : szhint)); /* new table for field */
  ------------------
  |  Branch (94:30): [True: 0, False: 46.0k]
  ------------------
   95|  46.0k|      lua_pushlstring(L, fname, (size_t)(e - fname));
   96|  46.0k|      lua_pushvalue(L, -2);
   97|  46.0k|      lua_settable(L, -4);  /* set new table into field */
   98|  46.0k|    } else if (!lua_istable(L, -1)) {  /* field has a non-table value? */
  ------------------
  |  |  267|      0|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|      0|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (98:16): [True: 0, False: 0]
  ------------------
   99|      0|      lua_pop(L, 2);  /* remove table and value */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  100|      0|      return fname;  /* return problematic part of the name */
  101|      0|    }
  102|  46.0k|    lua_remove(L, -2);  /* remove previous table */
  103|  46.0k|    fname = e + 1;
  104|  46.0k|  } while (*e == '.');
  ------------------
  |  Branch (104:12): [True: 0, False: 46.0k]
  ------------------
  105|  46.0k|  return NULL;
  106|  46.0k|}
luaL_newstate:
  371|  46.0k|{
  372|  46.0k|  lua_State *L;
  373|       |#if LJ_64 && !LJ_GC64
  374|       |  L = lj_state_newstate(LJ_ALLOCF_INTERNAL, NULL);
  375|       |#else
  376|  46.0k|  L = lua_newstate(LJ_ALLOCF_INTERNAL, NULL);
  ------------------
  |  |   36|  46.0k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  377|  46.0k|#endif
  378|  46.0k|  if (L) {
  ------------------
  |  Branch (378:7): [True: 46.0k, False: 0]
  ------------------
  379|  46.0k|    G(L)->panic = panic;
  ------------------
  |  |  705|  46.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  380|  46.0k|#ifndef LUAJIT_DISABLE_VMEVENT
  381|  46.0k|    luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   36|  46.0k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   12|  46.0k|#define LJ_VMEVENTS_REGKEY	"_VMEVENTS"
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   13|  46.0k|#define LJ_VMEVENTS_HSIZE	4
  ------------------
  382|  46.0k|    lua_pushcfunction(L, error_finalizer);
  ------------------
  |  |  262|  46.0k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  383|  46.0k|    lua_rawseti(L, -2, VMEVENT_HASH(LJ_VMEVENT_ERRFIN));
  ------------------
  |  |   16|  46.0k|#define VMEVENT_HASH(ev)	((int)(ev) & ~7)
  ------------------
  384|  46.0k|    G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |  705|  46.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |   15|  46.0k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  ------------------
  385|  46.0k|    L->top--;
  386|  46.0k|#endif
  387|  46.0k|  }
  388|  46.0k|  return L;
  389|  46.0k|}

luaopen_ffi:
  838|  5.60k|{
  839|  5.60k|  CTState *cts = lj_ctype_init(L);
  840|  5.60k|  settabV(L, L->top++, (cts->miscmap = lj_tab_new(L, 0, 1)));
  841|  5.60k|  LJ_LIB_REG(L, NULL, ffi_meta);
  ------------------
  |  |   92|  5.60k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  842|       |  /* NOBARRIER: basemt is a GC root. */
  843|  5.60k|  setgcref(basemt_it(G(L), LJ_TCDATA), obj2gco(tabV(L->top-1)));
  ------------------
  |  |   72|  11.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 5.60k, False: 0]
  |  |  ------------------
  ------------------
  844|  5.60k|  LJ_LIB_REG(L, NULL, ffi_clib);
  ------------------
  |  |   92|  5.60k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  845|  5.60k|  LJ_LIB_REG(L, NULL, ffi_callback);
  ------------------
  |  |   92|  5.60k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  846|       |  /* NOBARRIER: the key is new and lj_tab_newkey() handles the barrier. */
  847|  5.60k|  settabV(L, lj_tab_setstr(L, cts->miscmap, &cts->g->strempty), tabV(L->top-1));
  ------------------
  |  |  864|  5.60k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  5.60k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  5.60k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  5.60k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5.60k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  5.60k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  848|      0|  L->top--;
  849|  5.60k|  lj_clib_default(L, tabV(L->top-1));  /* Create ffi.C default namespace. */
  ------------------
  |  |  864|  5.60k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  5.60k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  5.60k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  5.60k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5.60k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  5.60k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  850|  5.60k|  lua_pushliteral(L, LJ_OS_NAME);
  ------------------
  |  |  276|  5.60k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  851|  5.60k|  lua_pushliteral(L, LJ_ARCH_NAME);
  ------------------
  |  |  276|  5.60k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  852|  5.60k|  LJ_LIB_REG(L, NULL, ffi);  /* Note: no global "ffi" created! */
  ------------------
  |  |   92|  5.60k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  853|  5.60k|  ffi_register_module(L);
  854|  5.60k|  return 1;
  855|  5.60k|}
lib_ffi.c:lj_cf_ffi_clib___gc:
  419|  5.60k|{
  420|  5.60k|  TValue *o = L->base;
  421|  11.2k|  if (o < L->top && tvisudata(o) && udataV(o)->udtype == UDTYPE_FFI_CLIB)
  ------------------
  |  |  801|  11.2k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|  5.60k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|  5.60k|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 5.60k, False: 0]
  |  |  ------------------
  ------------------
                if (o < L->top && tvisudata(o) && udataV(o)->udtype == UDTYPE_FFI_CLIB)
  ------------------
  |  |  865|  5.60k|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  5.60k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  5.60k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  5.60k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5.60k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  5.60k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (421:7): [True: 5.60k, False: 0]
  |  Branch (421:37): [True: 5.60k, False: 0]
  ------------------
  422|  5.60k|    lj_clib_unload((CLibrary *)uddata(udataV(o)));
  ------------------
  |  |  342|  11.2k|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 5.60k, False: 0]
  |  |  ------------------
  ------------------
  423|  5.60k|  return 0;
  424|  5.60k|}
lib_ffi.c:ffi_register_module:
  828|  5.60k|{
  829|  5.60k|  cTValue *tmp = lj_tab_getstr(tabV(registry(L)), lj_str_newlit(L, "_LOADED"));
  ------------------
  |  |  864|  5.60k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  5.60k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  5.60k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  5.60k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5.60k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  5.60k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                cTValue *tmp = lj_tab_getstr(tabV(registry(L)), lj_str_newlit(L, "_LOADED"));
  ------------------
  |  |   28|  5.60k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  830|  5.60k|  if (tmp && tvistab(tmp)) {
  ------------------
  |  |  800|      0|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|      0|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (830:7): [True: 0, False: 5.60k]
  ------------------
  831|      0|    GCtab *t = tabV(tmp);
  ------------------
  |  |  864|      0|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  832|      0|    copyTV(L, lj_tab_setstr(L, t, lj_str_newlit(L, LUA_FFILIBNAME)), L->top-1);
  ------------------
  |  |   28|      0|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  833|      0|    lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|      0|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  834|      0|  }
  835|  5.60k|}

lj_alloc_create:
 1227|  46.0k|{
 1228|  46.0k|  size_t tsize = DEFAULT_GRANULARITY;
  ------------------
  |  |   41|  46.0k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
 1229|  46.0k|  char *tbase;
 1230|  46.0k|  INIT_MMAP();
  ------------------
  |  |  379|  46.0k|#define INIT_MMAP()		((void)0)
  ------------------
 1231|  46.0k|  UNUSED(rs);
  ------------------
  |  |   91|  46.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1232|  46.0k|  tbase = (char *)(CALL_MMAP(rs, tsize));
  ------------------
  |  |  321|  46.0k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1233|  46.0k|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|  46.0k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  46.0k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  46.0k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1233:7): [True: 46.0k, False: 0]
  ------------------
 1234|  46.0k|    size_t msize = pad_request(sizeof(struct malloc_state));
  ------------------
  |  |  433|  46.0k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|  46.0k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  46.0k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1235|  46.0k|    mchunkptr mn;
 1236|  46.0k|    mchunkptr msp = align_as_chunk(tbase);
  ------------------
  |  |  425|  46.0k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  46.0k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  46.0k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1237|  46.0k|    mstate m = (mstate)(chunk2mem(msp));
  ------------------
  |  |  422|  46.0k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  46.0k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  46.0k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1238|  46.0k|    memset(m, 0, msize);
 1239|  46.0k|    msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  441|  46.0k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  442|  46.0k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|  46.0k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
 1240|  46.0k|    m->seg.base = tbase;
 1241|  46.0k|    m->seg.size = tsize;
 1242|  46.0k|    m->release_checks = MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|  46.0k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1243|  46.0k|    init_bins(m);
 1244|  46.0k|    mn = next_chunk(mem2chunk(m));
  ------------------
  |  |  461|  46.0k|#define next_chunk(p)	((mchunkptr)(((char *)(p)) + ((p)->head & ~INUSE_BITS)))
  |  |  ------------------
  |  |  |  |  443|  46.0k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  46.0k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  46.0k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  46.0k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1245|  46.0k|    init_top(m, mn, (size_t)((tbase + tsize) - (char *)mn) - TOP_FOOT_SIZE);
  ------------------
  |  |  600|  46.0k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  46.0k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  46.0k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|  46.0k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  46.0k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  46.0k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|  46.0k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  46.0k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1246|  46.0k|    return m;
 1247|  46.0k|  }
 1248|      0|  return NULL;
 1249|  46.0k|}
lj_alloc_setprng:
 1252|  46.0k|{
 1253|  46.0k|  mstate ms = (mstate)msp;
 1254|  46.0k|  ms->prng = rs;
 1255|  46.0k|}
lj_alloc_destroy:
 1258|  46.0k|{
 1259|  46.0k|  mstate ms = (mstate)msp;
 1260|  46.0k|  msegmentptr sp = &ms->seg;
 1261|  92.0k|  while (sp != 0) {
  ------------------
  |  Branch (1261:10): [True: 46.0k, False: 46.0k]
  ------------------
 1262|  46.0k|    char *base = sp->base;
 1263|  46.0k|    size_t size = sp->size;
 1264|  46.0k|    sp = sp->next;
 1265|  46.0k|    CALL_MUNMAP(base, size);
 1266|  46.0k|  }
 1267|  46.0k|}
lj_alloc_f:
 1474|  11.5M|{
 1475|  11.5M|  (void)osize;
 1476|  11.5M|  if (nsize == 0) {
  ------------------
  |  Branch (1476:7): [True: 5.76M, False: 5.82M]
  ------------------
 1477|  5.76M|    return lj_alloc_free(msp, ptr);
 1478|  5.82M|  } else if (ptr == NULL) {
  ------------------
  |  Branch (1478:14): [True: 5.53M, False: 287k]
  ------------------
 1479|  5.53M|    return lj_alloc_malloc(msp, nsize);
 1480|  5.53M|  } else {
 1481|   287k|    return lj_alloc_realloc(msp, ptr, nsize);
 1482|   287k|  }
 1483|  11.5M|}
lj_alloc.c:mmap_probe:
  234|  46.1k|{
  235|       |  /* Hint for next allocation. Doesn't need to be thread-safe. */
  236|  46.1k|  static uintptr_t hint_addr = 0;
  237|  46.1k|  int olderr = errno;
  238|  46.1k|  int retry;
  239|  46.1k|  for (retry = 0; retry < LJ_ALLOC_MMAP_PROBE_MAX; retry++) {
  ------------------
  |  |  228|  46.1k|#define LJ_ALLOC_MMAP_PROBE_MAX		30
  ------------------
  |  Branch (239:19): [True: 46.1k, False: 0]
  ------------------
  240|  46.1k|    void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  214|  46.1k|#define MMAP_PROT		(PROT_READ|PROT_WRITE)
  ------------------
                  void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  225|  46.1k|#define MMAP_FLAGS_PROBE	MMAP_FLAGS
  |  |  ------------------
  |  |  |  |  218|  46.1k|#define MMAP_FLAGS		(MAP_PRIVATE|MAP_ANONYMOUS)
  |  |  ------------------
  ------------------
  241|  46.1k|    uintptr_t addr = (uintptr_t)p;
  242|  46.1k|    if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  102|  46.1k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                  if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  231|  92.2k|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (242:9): [True: 46.1k, False: 0]
  |  Branch (242:42): [True: 46.1k, False: 0]
  ------------------
  243|  46.1k|	((addr + size) >> LJ_ALLOC_MBITS) == 0) {
  ------------------
  |  |  102|  46.1k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (243:2): [True: 46.1k, False: 0]
  ------------------
  244|       |      /* We got a suitable address. Bump the hint address. */
  245|  46.1k|      hint_addr = addr + size;
  246|  46.1k|      errno = olderr;
  247|  46.1k|      return p;
  248|  46.1k|    }
  249|      0|    if (p != MFAIL) {
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  |  Branch (249:9): [True: 0, False: 0]
  ------------------
  250|      0|      munmap(p, size);
  251|      0|    } else if (errno == ENOMEM) {
  ------------------
  |  Branch (251:16): [True: 0, False: 0]
  ------------------
  252|      0|      return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  253|      0|    }
  254|      0|    if (hint_addr) {
  ------------------
  |  Branch (254:9): [True: 0, False: 0]
  ------------------
  255|       |      /* First, try linear probing. */
  256|      0|      if (retry < LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (256:11): [True: 0, False: 0]
  ------------------
  257|      0|	hint_addr += 0x1000000;
  258|      0|	if (((hint_addr + size) >> LJ_ALLOC_MBITS) != 0)
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (258:6): [True: 0, False: 0]
  ------------------
  259|      0|	  hint_addr = 0;
  260|      0|	continue;
  261|      0|      } else if (retry == LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (261:18): [True: 0, False: 0]
  ------------------
  262|       |	/* Next, try a no-hint probe to get back an ASLR address. */
  263|      0|	hint_addr = 0;
  264|      0|	continue;
  265|      0|      }
  266|      0|    }
  267|       |    /* Finally, try pseudo-random probing. */
  268|      0|    do {
  269|      0|      hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                    hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  648|      0|#define LJ_PAGESIZE		4096
  ------------------
  270|      0|    } while (hint_addr < LJ_ALLOC_MMAP_PROBE_LOWER);
  ------------------
  |  |  231|      0|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (270:14): [True: 0, False: 0]
  ------------------
  271|      0|  }
  272|      0|  errno = olderr;
  273|      0|  return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  274|  46.1k|}
lj_alloc.c:init_bins:
  892|  46.0k|{
  893|       |  /* Establish circular links for smallbins */
  894|  46.0k|  bindex_t i;
  895|  1.51M|  for (i = 0; i < NSMALLBINS; i++) {
  ------------------
  |  |  521|  1.51M|#define NSMALLBINS		(32U)
  ------------------
  |  Branch (895:15): [True: 1.47M, False: 46.0k]
  ------------------
  896|  1.47M|    sbinptr bin = smallbin_at(m,i);
  ------------------
  |  |  610|  1.47M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
  897|  1.47M|    bin->fd = bin->bk = bin;
  898|  1.47M|  }
  899|  46.0k|}
lj_alloc.c:init_top:
  876|  46.0k|{
  877|       |  /* Ensure alignment */
  878|  46.0k|  size_t offset = align_offset(chunk2mem(p));
  ------------------
  |  |   66|  46.0k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 46.0k, False: 0]
  |  |  ------------------
  |  |   67|  46.0k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  879|  46.0k|  p = (mchunkptr)((char *)p + offset);
  880|  46.0k|  psize -= offset;
  881|       |
  882|  46.0k|  m->top = p;
  883|  46.0k|  m->topsize = psize;
  884|  46.0k|  p->head = psize | PINUSE_BIT;
  ------------------
  |  |  441|  46.0k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  885|       |  /* set size of fake trailing chunk holding overhead space only once */
  886|  46.0k|  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  457|  46.0k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  600|  46.0k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  46.0k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  46.0k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|  46.0k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  46.0k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  46.0k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|  46.0k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  46.0k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  46.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  46.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  887|  46.0k|  m->trim_check = DEFAULT_TRIM_THRESHOLD; /* reset on each update */
  ------------------
  |  |   42|  46.0k|#define DEFAULT_TRIM_THRESHOLD	((size_t)2U * (size_t)1024U * (size_t)1024U)
  ------------------
  888|  46.0k|}
lj_alloc.c:CALL_MUNMAP:
  348|  46.0k|{
  349|  46.0k|  int olderr = errno;
  350|  46.0k|  int ret = munmap(ptr, size);
  351|  46.0k|  errno = olderr;
  352|  46.0k|  return ret;
  353|  46.0k|}
lj_alloc.c:lj_alloc_free:
 1353|  6.00M|{
 1354|  6.00M|  if (ptr != 0) {
  ------------------
  |  Branch (1354:7): [True: 5.72M, False: 275k]
  ------------------
 1355|  5.72M|    mchunkptr p = mem2chunk(ptr);
  ------------------
  |  |  423|  5.72M|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  5.72M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  5.72M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1356|  5.72M|    mstate fm = (mstate)msp;
 1357|  5.72M|    size_t psize = chunksize(p);
  ------------------
  |  |  451|  5.72M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  5.72M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  5.72M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.72M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  5.72M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  5.72M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1358|  5.72M|    mchunkptr next = chunk_plus_offset(p, psize);
  ------------------
  |  |  457|  5.72M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1359|  5.72M|    if (!pinuse(p)) {
  ------------------
  |  |  450|  5.72M|#define pinuse(p)		((p)->head & PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  5.72M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.72M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1359:9): [True: 2.37M, False: 3.35M]
  ------------------
 1360|  2.37M|      size_t prevsize = p->prev_foot;
 1361|  2.37M|      if ((prevsize & IS_DIRECT_BIT) != 0) {
  ------------------
  |  |   74|  2.37M|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  2.37M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  |  Branch (1361:11): [True: 0, False: 2.37M]
  ------------------
 1362|      0|	prevsize &= ~IS_DIRECT_BIT;
  ------------------
  |  |   74|      0|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1363|      0|	psize += prevsize + DIRECT_FOOT_PAD;
  ------------------
  |  |  415|      0|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|      0|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1364|      0|	CALL_MUNMAP((char *)p - prevsize, psize);
 1365|      0|	return NULL;
 1366|  2.37M|      } else {
 1367|  2.37M|	mchunkptr prev = chunk_minus_offset(p, prevsize);
  ------------------
  |  |  458|  2.37M|#define chunk_minus_offset(p, s)	((mchunkptr)(((char *)(p)) - (s)))
  ------------------
 1368|  2.37M|	psize += prevsize;
 1369|  2.37M|	p = prev;
 1370|       |	/* consolidate backward */
 1371|  2.37M|	if (p != fm->dv) {
  ------------------
  |  Branch (1371:6): [True: 2.29M, False: 80.6k]
  ------------------
 1372|  2.29M|	  unlink_chunk(fm, p, prevsize);
  ------------------
  |  |  820|  2.29M|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|  2.29M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  2.29M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|  2.29M|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 1.51M, False: 776k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  690|  1.51M|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  691|  1.51M|  mchunkptr F = P->fd;\
  |  |  |  |  692|  1.51M|  mchunkptr B = P->bk;\
  |  |  |  |  693|  1.51M|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  1.51M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|  1.51M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  694|  1.51M|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (694:7): [True: 637k, False: 879k]
  |  |  |  |  ------------------
  |  |  |  |  695|   637k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|   637k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|   637k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  696|   879k|  } else {\
  |  |  |  |  697|   879k|    F->bk = B;\
  |  |  |  |  698|   879k|    B->fd = F;\
  |  |  |  |  699|   879k|  }\
  |  |  |  |  700|  1.51M|}
  |  |  ------------------
  |  |  821|  1.51M|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  767|   776k|#define unlink_large_chunk(M, X) {\
  |  |  |  |  768|   776k|  tchunkptr XP = X->parent;\
  |  |  |  |  769|   776k|  tchunkptr R;\
  |  |  |  |  770|   776k|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (770:7): [True: 35.8k, False: 740k]
  |  |  |  |  ------------------
  |  |  |  |  771|  35.8k|    tchunkptr F = X->fd;\
  |  |  |  |  772|  35.8k|    R = X->bk;\
  |  |  |  |  773|  35.8k|    F->bk = R;\
  |  |  |  |  774|  35.8k|    R->fd = F;\
  |  |  |  |  775|   740k|  } else {\
  |  |  |  |  776|   740k|    tchunkptr *RP;\
  |  |  |  |  777|   740k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (777:9): [True: 74.4k, False: 665k]
  |  |  |  |  ------------------
  |  |  |  |  778|   740k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (778:2): [True: 65.5k, False: 600k]
  |  |  |  |  ------------------
  |  |  |  |  779|   139k|      tchunkptr *CP;\
  |  |  |  |  780|   161k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (780:14): [True: 10.8k, False: 150k]
  |  |  |  |  ------------------
  |  |  |  |  781|   161k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (781:7): [True: 10.9k, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  782|  21.7k|	R = *(RP = CP);\
  |  |  |  |  783|  21.7k|      }\
  |  |  |  |  784|   139k|      *RP = 0;\
  |  |  |  |  785|   139k|    }\
  |  |  |  |  786|   740k|  }\
  |  |  |  |  787|   776k|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:7): [True: 756k, False: 19.7k]
  |  |  |  |  ------------------
  |  |  |  |  788|   756k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|   756k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  789|   756k|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (789:9): [True: 530k, False: 226k]
  |  |  |  |  ------------------
  |  |  |  |  790|   530k|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (790:11): [True: 410k, False: 119k]
  |  |  |  |  ------------------
  |  |  |  |  791|   530k|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  652|   410k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|   410k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  792|   530k|    } else {\
  |  |  |  |  793|   226k|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (793:11): [True: 126k, False: 99.7k]
  |  |  |  |  ------------------
  |  |  |  |  794|   226k|	XP->child[0] = R;\
  |  |  |  |  795|   226k|      else \
  |  |  |  |  796|   226k|	XP->child[1] = R;\
  |  |  |  |  797|   226k|    }\
  |  |  |  |  798|   756k|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:9): [True: 156k, False: 600k]
  |  |  |  |  ------------------
  |  |  |  |  799|   156k|      tchunkptr C0, C1;\
  |  |  |  |  800|   156k|      R->parent = XP;\
  |  |  |  |  801|   156k|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:11): [True: 38.7k, False: 117k]
  |  |  |  |  ------------------
  |  |  |  |  802|  38.7k|	R->child[0] = C0;\
  |  |  |  |  803|  38.7k|	C0->parent = R;\
  |  |  |  |  804|  38.7k|      }\
  |  |  |  |  805|   156k|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (805:11): [True: 14.2k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  806|  14.2k|	R->child[1] = C1;\
  |  |  |  |  807|  14.2k|	C1->parent = R;\
  |  |  |  |  808|  14.2k|      }\
  |  |  |  |  809|   156k|    }\
  |  |  |  |  810|   756k|  }\
  |  |  |  |  811|   776k|}
  |  |  ------------------
  ------------------
 1373|  2.29M|	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  443|  80.6k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  80.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  80.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|  80.6k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  80.6k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  443|  80.6k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  80.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  80.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|  80.6k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  80.6k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1373:13): [True: 44.3k, False: 36.2k]
  ------------------
 1374|  44.3k|	  fm->dvsize = psize;
 1375|  44.3k|	  set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  477|  44.3k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|  44.3k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  44.3k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  44.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|  44.3k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  44.3k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  44.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|  44.3k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1376|  44.3k|	  return NULL;
 1377|  44.3k|	}
 1378|  2.37M|      }
 1379|  2.37M|    }
 1380|  5.68M|    if (!cinuse(next)) {  /* consolidate forward */
  ------------------
  |  |  449|  5.68M|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|  5.68M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  5.68M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1380:9): [True: 3.05M, False: 2.63M]
  ------------------
 1381|  3.05M|      if (next == fm->top) {
  ------------------
  |  Branch (1381:11): [True: 207k, False: 2.84M]
  ------------------
 1382|   207k|	size_t tsize = fm->topsize += psize;
 1383|   207k|	fm->top = p;
 1384|   207k|	p->head = tsize | PINUSE_BIT;
  ------------------
  |  |  441|   207k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   207k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1385|   207k|	if (p == fm->dv) {
  ------------------
  |  Branch (1385:6): [True: 19.9k, False: 187k]
  ------------------
 1386|  19.9k|	  fm->dv = 0;
 1387|  19.9k|	  fm->dvsize = 0;
 1388|  19.9k|	}
 1389|   207k|	if (tsize > fm->trim_check)
  ------------------
  |  Branch (1389:6): [True: 0, False: 207k]
  ------------------
 1390|      0|	  alloc_trim(fm, 0);
 1391|   207k|	return NULL;
 1392|  2.84M|      } else if (next == fm->dv) {
  ------------------
  |  Branch (1392:18): [True: 56.1k, False: 2.78M]
  ------------------
 1393|  56.1k|	size_t dsize = fm->dvsize += psize;
 1394|  56.1k|	fm->dv = p;
 1395|  56.1k|	set_size_and_pinuse_of_free_chunk(p, dsize);
  ------------------
  |  |  473|  56.1k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|  56.1k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  56.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|  56.1k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1396|  56.1k|	return NULL;
 1397|  2.78M|      } else {
 1398|  2.78M|	size_t nsize = chunksize(next);
  ------------------
  |  |  451|  2.78M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  2.78M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  2.78M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.78M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  2.78M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  2.78M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1399|  2.78M|	psize += nsize;
 1400|  2.78M|	unlink_chunk(fm, next, nsize);
  ------------------
  |  |  820|  2.78M|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|  2.78M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  2.78M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|  2.78M|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 1.77M, False: 1.01M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  690|  1.77M|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  691|  1.77M|  mchunkptr F = P->fd;\
  |  |  |  |  692|  1.77M|  mchunkptr B = P->bk;\
  |  |  |  |  693|  1.77M|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  1.77M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|  1.77M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  694|  1.77M|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (694:7): [True: 879k, False: 897k]
  |  |  |  |  ------------------
  |  |  |  |  695|   879k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|   879k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|   879k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  696|   897k|  } else {\
  |  |  |  |  697|   897k|    F->bk = B;\
  |  |  |  |  698|   897k|    B->fd = F;\
  |  |  |  |  699|   897k|  }\
  |  |  |  |  700|  1.77M|}
  |  |  ------------------
  |  |  821|  1.77M|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  767|  1.01M|#define unlink_large_chunk(M, X) {\
  |  |  |  |  768|  1.01M|  tchunkptr XP = X->parent;\
  |  |  |  |  769|  1.01M|  tchunkptr R;\
  |  |  |  |  770|  1.01M|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (770:7): [True: 39.5k, False: 970k]
  |  |  |  |  ------------------
  |  |  |  |  771|  39.5k|    tchunkptr F = X->fd;\
  |  |  |  |  772|  39.5k|    R = X->bk;\
  |  |  |  |  773|  39.5k|    F->bk = R;\
  |  |  |  |  774|  39.5k|    R->fd = F;\
  |  |  |  |  775|   970k|  } else {\
  |  |  |  |  776|   970k|    tchunkptr *RP;\
  |  |  |  |  777|   970k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (777:9): [True: 67.6k, False: 903k]
  |  |  |  |  ------------------
  |  |  |  |  778|   970k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (778:2): [True: 62.0k, False: 841k]
  |  |  |  |  ------------------
  |  |  |  |  779|   129k|      tchunkptr *CP;\
  |  |  |  |  780|   149k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (780:14): [True: 9.87k, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  781|   149k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (781:7): [True: 10.4k, False: 129k]
  |  |  |  |  ------------------
  |  |  |  |  782|  20.2k|	R = *(RP = CP);\
  |  |  |  |  783|  20.2k|      }\
  |  |  |  |  784|   129k|      *RP = 0;\
  |  |  |  |  785|   129k|    }\
  |  |  |  |  786|   970k|  }\
  |  |  |  |  787|  1.01M|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:7): [True: 984k, False: 25.5k]
  |  |  |  |  ------------------
  |  |  |  |  788|   984k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|   984k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  789|   984k|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (789:9): [True: 668k, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  790|   668k|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (790:11): [True: 558k, False: 110k]
  |  |  |  |  ------------------
  |  |  |  |  791|   668k|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  652|   558k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|   558k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  792|   668k|    } else {\
  |  |  |  |  793|   315k|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (793:11): [True: 173k, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  794|   315k|	XP->child[0] = R;\
  |  |  |  |  795|   315k|      else \
  |  |  |  |  796|   315k|	XP->child[1] = R;\
  |  |  |  |  797|   315k|    }\
  |  |  |  |  798|   984k|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:9): [True: 143k, False: 841k]
  |  |  |  |  ------------------
  |  |  |  |  799|   143k|      tchunkptr C0, C1;\
  |  |  |  |  800|   143k|      R->parent = XP;\
  |  |  |  |  801|   143k|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:11): [True: 35.6k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  802|  35.6k|	R->child[0] = C0;\
  |  |  |  |  803|  35.6k|	C0->parent = R;\
  |  |  |  |  804|  35.6k|      }\
  |  |  |  |  805|   143k|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (805:11): [True: 13.2k, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  806|  13.2k|	R->child[1] = C1;\
  |  |  |  |  807|  13.2k|	C1->parent = R;\
  |  |  |  |  808|  13.2k|      }\
  |  |  |  |  809|   143k|    }\
  |  |  |  |  810|   984k|  }\
  |  |  |  |  811|  1.01M|}
  |  |  ------------------
  ------------------
 1401|  2.78M|	set_size_and_pinuse_of_free_chunk(p, psize);
  ------------------
  |  |  473|  2.78M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|  2.78M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.78M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|  2.78M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1402|  2.78M|	if (p == fm->dv) {
  ------------------
  |  Branch (1402:6): [True: 16.2k, False: 2.77M]
  ------------------
 1403|  16.2k|	  fm->dvsize = psize;
 1404|  16.2k|	  return NULL;
 1405|  16.2k|	}
 1406|  2.78M|      }
 1407|  3.05M|    } else {
 1408|  2.63M|      set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  477|  2.63M|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|  2.63M|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  2.63M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.63M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|  2.63M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  2.63M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.63M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|  2.63M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1409|  2.63M|    }
 1410|       |
 1411|  5.40M|    if (is_small(psize)) {
  ------------------
  |  |  604|  5.40M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  523|  5.40M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  521|  5.40M|#define NSMALLBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (604:22): [True: 3.55M, False: 1.84M]
  |  |  ------------------
  ------------------
 1412|  3.55M|      insert_small_chunk(fm, p, psize);
  ------------------
  |  |  675|  3.55M|#define insert_small_chunk(M, P, S) {\
  |  |  676|  3.55M|  bindex_t I = small_index(S);\
  |  |  ------------------
  |  |  |  |  605|  3.55M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  3.55M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  677|  3.55M|  mchunkptr B = smallbin_at(M, I);\
  |  |  ------------------
  |  |  |  |  610|  3.55M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  ------------------
  |  |  678|  3.55M|  mchunkptr F = B;\
  |  |  679|  3.55M|  if (!smallmap_is_marked(M, I))\
  |  |  ------------------
  |  |  |  |  649|  3.55M|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  3.55M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (679:7): [True: 1.73M, False: 1.82M]
  |  |  ------------------
  |  |  680|  3.55M|    mark_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  647|  1.73M|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  1.73M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  681|  3.55M|  else\
  |  |  682|  3.55M|    F = B->fd;\
  |  |  683|  3.55M|  B->fd = P;\
  |  |  684|  3.55M|  F->bk = P;\
  |  |  685|  3.55M|  P->fd = F;\
  |  |  686|  3.55M|  P->bk = B;\
  |  |  687|  3.55M|}
  ------------------
 1413|  3.55M|    } else {
 1414|  1.84M|      tchunkptr tp = (tchunkptr)p;
 1415|  1.84M|      insert_large_chunk(fm, tp, psize);
  ------------------
  |  |  728|  1.84M|#define insert_large_chunk(M, X, S) {\
  |  |  729|  1.84M|  tbinptr *H;\
  |  |  730|  1.84M|  bindex_t I;\
  |  |  731|  1.84M|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  614|  1.84M|#define compute_tree_index(S, I)\
  |  |  |  |  615|  1.84M|{\
  |  |  |  |  616|  1.84M|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|  1.84M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  617|  1.84M|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (617:7): [True: 0, False: 1.84M]
  |  |  |  |  ------------------
  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  619|  1.84M|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (619:14): [True: 0, False: 1.84M]
  |  |  |  |  ------------------
  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  621|  1.84M|  } else {\
  |  |  |  |  622|  1.84M|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  1.84M|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  623|  1.84M|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|  1.84M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  624|  1.84M|  }\
  |  |  |  |  625|  1.84M|}
  |  |  ------------------
  |  |  732|  1.84M|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  611|  1.84M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  733|  1.84M|  X->index = I;\
  |  |  734|  1.84M|  X->child[0] = X->child[1] = 0;\
  |  |  735|  1.84M|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  653|  1.84M|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  1.84M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (735:7): [True: 1.02M, False: 821k]
  |  |  ------------------
  |  |  736|  1.02M|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  651|  1.02M|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  1.02M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  737|  1.02M|    *H = X;\
  |  |  738|  1.02M|    X->parent = (tchunkptr)H;\
  |  |  739|  1.02M|    X->fd = X->bk = X;\
  |  |  740|  1.02M|  } else {\
  |  |  741|   821k|    tchunkptr T = *H;\
  |  |  742|   821k|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  633|   821k|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|   821k|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (633:5): [True: 0, False: 821k]
  |  |  |  |  ------------------
  |  |  |  |  634|   821k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|   821k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   821k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|   821k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  743|  1.08M|    for (;;) {\
  |  |  744|  1.08M|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  451|  1.08M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  443|  1.08M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  441|  1.08M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|  1.08M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  442|  1.08M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|  1.08M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (744:11): [True: 1.00M, False: 77.9k]
  |  |  ------------------
  |  |  745|  1.00M|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|  1.00M|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|  1.00M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  746|  1.00M|	K <<= 1;\
  |  |  747|  1.00M|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (747:6): [True: 263k, False: 743k]
  |  |  ------------------
  |  |  748|   263k|	  T = *C;\
  |  |  749|   743k|	} else {\
  |  |  750|   743k|	  *C = X;\
  |  |  751|   743k|	  X->parent = T;\
  |  |  752|   743k|	  X->fd = X->bk = X;\
  |  |  753|   743k|	  break;\
  |  |  754|   743k|	}\
  |  |  755|  1.00M|      } else {\
  |  |  756|  77.9k|	tchunkptr F = T->fd;\
  |  |  757|  77.9k|	T->fd = F->bk = X;\
  |  |  758|  77.9k|	X->fd = F;\
  |  |  759|  77.9k|	X->bk = T;\
  |  |  760|  77.9k|	X->parent = 0;\
  |  |  761|  77.9k|	break;\
  |  |  762|  77.9k|      }\
  |  |  763|  1.08M|    }\
  |  |  764|   821k|  }\
  |  |  765|  1.84M|}
  ------------------
 1416|  1.84M|      if (--fm->release_checks == 0)
  ------------------
  |  Branch (1416:11): [True: 527, False: 1.84M]
  ------------------
 1417|    527|	release_unused_segments(fm);
 1418|  1.84M|    }
 1419|  5.40M|  }
 1420|  5.67M|  return NULL;
 1421|  6.00M|}
lj_alloc.c:release_unused_segments:
 1046|    527|{
 1047|    527|  size_t released = 0;
 1048|    527|  size_t nsegs = 0;
 1049|    527|  msegmentptr pred = &m->seg;
 1050|    527|  msegmentptr sp = pred->next;
 1051|    527|  while (sp != 0) {
  ------------------
  |  Branch (1051:10): [True: 0, False: 527]
  ------------------
 1052|      0|    char *base = sp->base;
 1053|      0|    size_t size = sp->size;
 1054|      0|    msegmentptr next = sp->next;
 1055|      0|    nsegs++;
 1056|      0|    {
 1057|      0|      mchunkptr p = align_as_chunk(base);
  ------------------
  |  |  425|      0|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|      0| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|      0|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1058|      0|      size_t psize = chunksize(p);
  ------------------
  |  |  451|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1059|       |      /* Can unmap if first chunk holds entire segment and not pinned */
 1060|      0|      if (!cinuse(p) && (char *)p + psize == (char *)mem2chunk(sp)) {
  ------------------
  |  |  449|      0|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (!cinuse(p) && (char *)p + psize == (char *)mem2chunk(sp)) {
  ------------------
  |  |  423|      0|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1060:11): [True: 0, False: 0]
  |  Branch (1060:25): [True: 0, False: 0]
  ------------------
 1061|      0|	tchunkptr tp = (tchunkptr)p;
 1062|      0|	if (p == m->dv) {
  ------------------
  |  Branch (1062:6): [True: 0, False: 0]
  ------------------
 1063|      0|	  m->dv = 0;
 1064|      0|	  m->dvsize = 0;
 1065|      0|	} else {
 1066|      0|	  unlink_large_chunk(m, tp);
  ------------------
  |  |  767|      0|#define unlink_large_chunk(M, X) {\
  |  |  768|      0|  tchunkptr XP = X->parent;\
  |  |  769|      0|  tchunkptr R;\
  |  |  770|      0|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (770:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  771|      0|    tchunkptr F = X->fd;\
  |  |  772|      0|    R = X->bk;\
  |  |  773|      0|    F->bk = R;\
  |  |  774|      0|    R->fd = F;\
  |  |  775|      0|  } else {\
  |  |  776|      0|    tchunkptr *RP;\
  |  |  777|      0|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (777:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  778|      0|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (778:2): [True: 0, False: 0]
  |  |  ------------------
  |  |  779|      0|      tchunkptr *CP;\
  |  |  780|      0|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (780:14): [True: 0, False: 0]
  |  |  ------------------
  |  |  781|      0|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (781:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  782|      0|	R = *(RP = CP);\
  |  |  783|      0|      }\
  |  |  784|      0|      *RP = 0;\
  |  |  785|      0|    }\
  |  |  786|      0|  }\
  |  |  787|      0|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (787:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  788|      0|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  611|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  789|      0|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (789:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  790|      0|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (790:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  791|      0|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  652|      0|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  792|      0|    } else {\
  |  |  793|      0|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (793:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  794|      0|	XP->child[0] = R;\
  |  |  795|      0|      else \
  |  |  796|      0|	XP->child[1] = R;\
  |  |  797|      0|    }\
  |  |  798|      0|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (798:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  799|      0|      tchunkptr C0, C1;\
  |  |  800|      0|      R->parent = XP;\
  |  |  801|      0|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (801:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  802|      0|	R->child[0] = C0;\
  |  |  803|      0|	C0->parent = R;\
  |  |  804|      0|      }\
  |  |  805|      0|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (805:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  806|      0|	R->child[1] = C1;\
  |  |  807|      0|	C1->parent = R;\
  |  |  808|      0|      }\
  |  |  809|      0|    }\
  |  |  810|      0|  }\
  |  |  811|      0|}
  ------------------
 1067|      0|	}
 1068|      0|	if (CALL_MUNMAP(base, size) == 0) {
  ------------------
  |  Branch (1068:6): [True: 0, False: 0]
  ------------------
 1069|      0|	  released += size;
 1070|       |	  /* unlink obsoleted record */
 1071|      0|	  sp = pred;
 1072|      0|	  sp->next = next;
 1073|      0|	} else { /* back out if cannot unmap */
 1074|      0|	  insert_large_chunk(m, tp, psize);
  ------------------
  |  |  728|      0|#define insert_large_chunk(M, X, S) {\
  |  |  729|      0|  tbinptr *H;\
  |  |  730|      0|  bindex_t I;\
  |  |  731|      0|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  614|      0|#define compute_tree_index(S, I)\
  |  |  |  |  615|      0|{\
  |  |  |  |  616|      0|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  617|      0|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (617:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  619|      0|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (619:14): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  621|      0|  } else {\
  |  |  |  |  622|      0|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  623|      0|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  624|      0|  }\
  |  |  |  |  625|      0|}
  |  |  ------------------
  |  |  732|      0|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  611|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  733|      0|  X->index = I;\
  |  |  734|      0|  X->child[0] = X->child[1] = 0;\
  |  |  735|      0|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  653|      0|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (735:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  736|      0|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  651|      0|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  737|      0|    *H = X;\
  |  |  738|      0|    X->parent = (tchunkptr)H;\
  |  |  739|      0|    X->fd = X->bk = X;\
  |  |  740|      0|  } else {\
  |  |  741|      0|    tchunkptr T = *H;\
  |  |  742|      0|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  633|      0|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (633:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  634|      0|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  743|      0|    for (;;) {\
  |  |  744|      0|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  451|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (744:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  745|      0|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  746|      0|	K <<= 1;\
  |  |  747|      0|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (747:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  748|      0|	  T = *C;\
  |  |  749|      0|	} else {\
  |  |  750|      0|	  *C = X;\
  |  |  751|      0|	  X->parent = T;\
  |  |  752|      0|	  X->fd = X->bk = X;\
  |  |  753|      0|	  break;\
  |  |  754|      0|	}\
  |  |  755|      0|      } else {\
  |  |  756|      0|	tchunkptr F = T->fd;\
  |  |  757|      0|	T->fd = F->bk = X;\
  |  |  758|      0|	X->fd = F;\
  |  |  759|      0|	X->bk = T;\
  |  |  760|      0|	X->parent = 0;\
  |  |  761|      0|	break;\
  |  |  762|      0|      }\
  |  |  763|      0|    }\
  |  |  764|      0|  }\
  |  |  765|      0|}
  ------------------
 1075|      0|	}
 1076|      0|      }
 1077|      0|    }
 1078|      0|    pred = sp;
 1079|      0|    sp = next;
 1080|      0|  }
 1081|       |  /* Reset check counter */
 1082|    527|  m->release_checks = nsegs > MAX_RELEASE_CHECK_RATE ?
  ------------------
  |  |   44|    527|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
  |  Branch (1082:23): [True: 0, False: 527]
  ------------------
 1083|    527|		      nsegs : MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|  1.05k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1084|    527|  return released;
 1085|    527|}
lj_alloc.c:lj_alloc_malloc:
 1270|  5.77M|{
 1271|  5.77M|  mstate ms = (mstate)msp;
 1272|  5.77M|  void *mem;
 1273|  5.77M|  size_t nb;
 1274|  5.77M|  if (nsize <= MAX_SMALL_REQUEST) {
  ------------------
  |  |  528|  5.77M|#define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  527|  5.77M|#define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  526|  5.77M|#define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.77M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|  5.77M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.77M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |   62|  5.77M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.77M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.77M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  410|  5.77M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  5.77M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1274:7): [True: 5.41M, False: 360k]
  ------------------
 1275|  5.41M|    bindex_t idx;
 1276|  5.41M|    binmap_t smallbits;
 1277|  5.41M|    nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  429|  5.41M|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  419|  5.41M|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  5.41M|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  5.41M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  5.41M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.41M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  5.41M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  5.41M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.41M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  410|  5.41M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  5.41M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  5.41M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  419|  2.24k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|  2.24k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  2.24k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  2.24k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.24k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  2.24k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  2.24k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.24k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  433|  10.8M|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|  5.41M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  5.41M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  5.41M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.41M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.41M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  5.41M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.41M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.41M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1277:10): [True: 2.24k, False: 5.41M]
  ------------------
 1278|  5.41M|    idx = small_index(nb);
  ------------------
  |  |  605|  5.41M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  523|  5.41M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1279|  5.41M|    smallbits = ms->smallmap >> idx;
 1280|       |
 1281|  5.41M|    if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
  ------------------
  |  Branch (1281:9): [True: 162k, False: 5.24M]
  ------------------
 1282|   162k|      mchunkptr b, p;
 1283|   162k|      idx += ~smallbits & 1;       /* Uses next bin if idx empty */
 1284|   162k|      b = smallbin_at(ms, idx);
  ------------------
  |  |  610|   162k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1285|   162k|      p = b->fd;
 1286|   162k|      unlink_first_small_chunk(ms, b, p, idx);
  ------------------
  |  |  703|   162k|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  704|   162k|  mchunkptr F = P->fd;\
  |  |  705|   162k|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (705:7): [True: 108k, False: 54.8k]
  |  |  ------------------
  |  |  706|   108k|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  648|   108k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|   108k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  707|   108k|  } else {\
  |  |  708|  54.8k|    B->fd = F;\
  |  |  709|  54.8k|    F->bk = B;\
  |  |  710|  54.8k|  }\
  |  |  711|   162k|}
  ------------------
 1287|   162k|      set_inuse_and_pinuse(ms, p, small_index2size(idx));
  ------------------
  |  |  665|   162k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|   162k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   162k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|   162k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   162k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|   162k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|   162k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   162k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1288|   162k|      mem = chunk2mem(p);
  ------------------
  |  |  422|   162k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   162k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   162k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1289|   162k|      return mem;
 1290|  5.24M|    } else if (nb > ms->dvsize) {
  ------------------
  |  Branch (1290:16): [True: 4.31M, False: 936k]
  ------------------
 1291|  4.31M|      if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
  ------------------
  |  Branch (1291:11): [True: 159k, False: 4.15M]
  ------------------
 1292|   159k|	mchunkptr b, p, r;
 1293|   159k|	size_t rsize;
 1294|   159k|	binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
  ------------------
  |  |  656|   159k|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1295|   159k|	bindex_t i = lj_ffs(leftbits);
  ------------------
  |  |  148|   159k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1296|   159k|	b = smallbin_at(ms, i);
  ------------------
  |  |  610|   159k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1297|   159k|	p = b->fd;
 1298|   159k|	unlink_first_small_chunk(ms, b, p, i);
  ------------------
  |  |  703|   159k|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  704|   159k|  mchunkptr F = P->fd;\
  |  |  705|   159k|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (705:7): [True: 152k, False: 6.88k]
  |  |  ------------------
  |  |  706|   152k|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  648|   152k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|   152k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  707|   152k|  } else {\
  |  |  708|  6.88k|    B->fd = F;\
  |  |  709|  6.88k|    F->bk = B;\
  |  |  710|  6.88k|  }\
  |  |  711|   159k|}
  ------------------
 1299|   159k|	rsize = small_index2size(i) - nb;
  ------------------
  |  |  606|   159k|#define small_index2size(i)	((i)  << SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  523|   159k|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1300|       |	/* Fit here cannot be remainderless if 4byte sizes */
 1301|   159k|	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |   49|   159k|#define SIZE_T_SIZE		(sizeof(size_t))
  ------------------
              	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|   159k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|   159k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   159k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   159k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   159k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   159k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   159k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   159k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1301:6): [Folded - Ignored]
  |  Branch (1301:26): [True: 52.7k, False: 106k]
  ------------------
 1302|  52.7k|	  set_inuse_and_pinuse(ms, p, small_index2size(i));
  ------------------
  |  |  665|  52.7k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|  52.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  52.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|  52.7k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  52.7k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|  52.7k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  52.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  52.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1303|   106k|	} else {
 1304|   106k|	  set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|   106k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|   106k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   106k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|   106k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   106k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1305|   106k|	  r = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|   106k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1306|   106k|	  set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|   106k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|   106k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   106k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|   106k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1307|   106k|	  replace_dv(ms, r, rsize);
  ------------------
  |  |  715|   106k|#define replace_dv(M, P, S) {\
  |  |  716|   106k|  size_t DVS = M->dvsize;\
  |  |  717|   106k|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (717:7): [True: 35.1k, False: 71.2k]
  |  |  ------------------
  |  |  718|  35.1k|    mchunkptr DV = M->dv;\
  |  |  719|  35.1k|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  675|  35.1k|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|  35.1k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  35.1k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|  35.1k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|  35.1k|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|  35.1k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|  35.1k|  mchunkptr F = B;\
  |  |  |  |  679|  35.1k|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|  35.1k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  35.1k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 26.5k, False: 8.58k]
  |  |  |  |  ------------------
  |  |  |  |  680|  35.1k|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|  26.5k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  26.5k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|  35.1k|  else\
  |  |  |  |  682|  35.1k|    F = B->fd;\
  |  |  |  |  683|  35.1k|  B->fd = P;\
  |  |  |  |  684|  35.1k|  F->bk = P;\
  |  |  |  |  685|  35.1k|  P->fd = F;\
  |  |  |  |  686|  35.1k|  P->bk = B;\
  |  |  |  |  687|  35.1k|}
  |  |  ------------------
  |  |  720|  35.1k|  }\
  |  |  721|   106k|  M->dvsize = S;\
  |  |  722|   106k|  M->dv = P;\
  |  |  723|   106k|}
  ------------------
 1308|   106k|	}
 1309|   159k|	mem = chunk2mem(p);
  ------------------
  |  |  422|   159k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   159k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   159k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1310|   159k|	return mem;
 1311|  4.15M|      } else if (ms->treemap != 0 && (mem = tmalloc_small(ms, nb)) != 0) {
  ------------------
  |  Branch (1311:18): [True: 53.1k, False: 4.10M]
  |  Branch (1311:38): [True: 53.1k, False: 0]
  ------------------
 1312|  53.1k|	return mem;
 1313|  53.1k|      }
 1314|  4.31M|    }
 1315|  5.41M|  } else if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  428|   360k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  419|   360k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|   360k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   360k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   360k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   360k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   360k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   360k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   360k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1315:14): [True: 0, False: 360k]
  ------------------
 1316|      0|    nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
  ------------------
  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  ------------------
 1317|   360k|  } else {
 1318|   360k|    nb = pad_request(nsize);
  ------------------
  |  |  433|   360k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|   360k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   360k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   360k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   360k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   360k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   360k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   360k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   360k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1319|   360k|    if (ms->treemap != 0 && (mem = tmalloc_large(ms, nb)) != 0) {
  ------------------
  |  Branch (1319:9): [True: 36.4k, False: 324k]
  |  Branch (1319:29): [True: 12.7k, False: 23.7k]
  ------------------
 1320|  12.7k|      return mem;
 1321|  12.7k|    }
 1322|   360k|  }
 1323|       |
 1324|  5.38M|  if (nb <= ms->dvsize) {
  ------------------
  |  Branch (1324:7): [True: 947k, False: 4.43M]
  ------------------
 1325|   947k|    size_t rsize = ms->dvsize - nb;
 1326|   947k|    mchunkptr p = ms->dv;
 1327|   947k|    if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
  ------------------
  |  |  419|   947k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|   947k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   947k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   947k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   947k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   947k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   947k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   947k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1327:9): [True: 862k, False: 84.4k]
  ------------------
 1328|   862k|      mchunkptr r = ms->dv = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|   862k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1329|   862k|      ms->dvsize = rsize;
 1330|   862k|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|   862k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|   862k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   862k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|   862k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1331|   862k|      set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|   862k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|   862k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   862k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|   862k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   862k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1332|   862k|    } else { /* exhaust dv */
 1333|  84.4k|      size_t dvs = ms->dvsize;
 1334|  84.4k|      ms->dvsize = 0;
 1335|  84.4k|      ms->dv = 0;
 1336|  84.4k|      set_inuse_and_pinuse(ms, p, dvs);
  ------------------
  |  |  665|  84.4k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|  84.4k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  84.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|  84.4k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  84.4k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|  84.4k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  84.4k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  84.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1337|  84.4k|    }
 1338|   947k|    mem = chunk2mem(p);
  ------------------
  |  |  422|   947k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   947k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   947k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1339|   947k|    return mem;
 1340|  4.43M|  } else if (nb < ms->topsize) { /* Split top */
  ------------------
  |  Branch (1340:14): [True: 4.43M, False: 102]
  ------------------
 1341|  4.43M|    size_t rsize = ms->topsize -= nb;
 1342|  4.43M|    mchunkptr p = ms->top;
 1343|  4.43M|    mchunkptr r = ms->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|  4.43M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1344|  4.43M|    r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  441|  4.43M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  4.43M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1345|  4.43M|    set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|  4.43M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  4.43M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  4.43M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  4.43M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  4.43M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1346|  4.43M|    mem = chunk2mem(p);
  ------------------
  |  |  422|  4.43M|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  4.43M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  4.43M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1347|  4.43M|    return mem;
 1348|  4.43M|  }
 1349|    102|  return alloc_sys(ms, nb);
 1350|  5.38M|}
lj_alloc.c:tmalloc_small:
 1195|  53.1k|{
 1196|  53.1k|  tchunkptr t, v;
 1197|  53.1k|  mchunkptr r;
 1198|  53.1k|  size_t rsize;
 1199|  53.1k|  bindex_t i = lj_ffs(m->treemap);
  ------------------
  |  |  148|  53.1k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1200|       |
 1201|  53.1k|  v = t = *treebin_at(m, i);
  ------------------
  |  |  611|  53.1k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1202|  53.1k|  rsize = chunksize(t) - nb;
  ------------------
  |  |  451|  53.1k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  53.1k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  53.1k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  53.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  53.1k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  53.1k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1203|       |
 1204|  55.1k|  while ((t = leftmost_child(t)) != 0) {
  ------------------
  |  |  505|  55.1k|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (505:28): [True: 1.48k, False: 53.6k]
  |  |  ------------------
  ------------------
  |  Branch (1204:10): [True: 2.01k, False: 53.1k]
  ------------------
 1205|  2.01k|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  451|  2.01k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  2.01k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  2.01k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.01k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  2.01k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  2.01k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1206|  2.01k|    if (trem < rsize) {
  ------------------
  |  Branch (1206:9): [True: 991, False: 1.02k]
  ------------------
 1207|    991|      rsize = trem;
 1208|    991|      v = t;
 1209|    991|    }
 1210|  2.01k|  }
 1211|       |
 1212|  53.1k|  r = chunk_plus_offset(v, nb);
  ------------------
  |  |  457|  53.1k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1213|  53.1k|  unlink_large_chunk(m, v);
  ------------------
  |  |  767|  53.1k|#define unlink_large_chunk(M, X) {\
  |  |  768|  53.1k|  tchunkptr XP = X->parent;\
  |  |  769|  53.1k|  tchunkptr R;\
  |  |  770|  53.1k|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (770:7): [True: 1.69k, False: 51.4k]
  |  |  ------------------
  |  |  771|  1.69k|    tchunkptr F = X->fd;\
  |  |  772|  1.69k|    R = X->bk;\
  |  |  773|  1.69k|    F->bk = R;\
  |  |  774|  1.69k|    R->fd = F;\
  |  |  775|  51.4k|  } else {\
  |  |  776|  51.4k|    tchunkptr *RP;\
  |  |  777|  51.4k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (777:9): [True: 306, False: 51.1k]
  |  |  ------------------
  |  |  778|  51.4k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (778:2): [True: 308, False: 50.8k]
  |  |  ------------------
  |  |  779|    614|      tchunkptr *CP;\
  |  |  780|    726|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (780:14): [True: 58, False: 668]
  |  |  ------------------
  |  |  781|    726|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (781:7): [True: 54, False: 614]
  |  |  ------------------
  |  |  782|    112|	R = *(RP = CP);\
  |  |  783|    112|      }\
  |  |  784|    614|      *RP = 0;\
  |  |  785|    614|    }\
  |  |  786|  51.4k|  }\
  |  |  787|  53.1k|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (787:7): [True: 53.1k, False: 0]
  |  |  ------------------
  |  |  788|  53.1k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  611|  53.1k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  789|  53.1k|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (789:9): [True: 52.2k, False: 872]
  |  |  ------------------
  |  |  790|  52.2k|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (790:11): [True: 50.1k, False: 2.14k]
  |  |  ------------------
  |  |  791|  52.2k|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  652|  50.1k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  50.1k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  792|  52.2k|    } else {\
  |  |  793|    872|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (793:11): [True: 762, False: 110]
  |  |  ------------------
  |  |  794|    872|	XP->child[0] = R;\
  |  |  795|    872|      else \
  |  |  796|    872|	XP->child[1] = R;\
  |  |  797|    872|    }\
  |  |  798|  53.1k|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (798:9): [True: 2.30k, False: 50.8k]
  |  |  ------------------
  |  |  799|  2.30k|      tchunkptr C0, C1;\
  |  |  800|  2.30k|      R->parent = XP;\
  |  |  801|  2.30k|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (801:11): [True: 195, False: 2.11k]
  |  |  ------------------
  |  |  802|    195|	R->child[0] = C0;\
  |  |  803|    195|	C0->parent = R;\
  |  |  804|    195|      }\
  |  |  805|  2.30k|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (805:11): [True: 172, False: 2.13k]
  |  |  ------------------
  |  |  806|    172|	R->child[1] = C1;\
  |  |  807|    172|	C1->parent = R;\
  |  |  808|    172|      }\
  |  |  809|  2.30k|    }\
  |  |  810|  53.1k|  }\
  |  |  811|  53.1k|}
  ------------------
 1214|  53.1k|  if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|  53.1k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|  53.1k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  53.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  53.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  53.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  53.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  53.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  53.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1214:7): [True: 25, False: 53.1k]
  ------------------
 1215|     25|    set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  665|     25|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|     25|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     25|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|     25|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|     25|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|     25|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|     25|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     25|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1216|  53.1k|  } else {
 1217|  53.1k|    set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  670|  53.1k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  53.1k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  53.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  53.1k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  53.1k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1218|  53.1k|    set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|  53.1k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|  53.1k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  53.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|  53.1k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1219|  53.1k|    replace_dv(m, r, rsize);
  ------------------
  |  |  715|  53.1k|#define replace_dv(M, P, S) {\
  |  |  716|  53.1k|  size_t DVS = M->dvsize;\
  |  |  717|  53.1k|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (717:7): [True: 19.9k, False: 33.1k]
  |  |  ------------------
  |  |  718|  19.9k|    mchunkptr DV = M->dv;\
  |  |  719|  19.9k|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  675|  19.9k|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|  19.9k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  19.9k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|  19.9k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|  19.9k|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|  19.9k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|  19.9k|  mchunkptr F = B;\
  |  |  |  |  679|  19.9k|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|  19.9k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  19.9k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 15.9k, False: 4.02k]
  |  |  |  |  ------------------
  |  |  |  |  680|  19.9k|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|  15.9k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  15.9k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|  19.9k|  else\
  |  |  |  |  682|  19.9k|    F = B->fd;\
  |  |  |  |  683|  19.9k|  B->fd = P;\
  |  |  |  |  684|  19.9k|  F->bk = P;\
  |  |  |  |  685|  19.9k|  P->fd = F;\
  |  |  |  |  686|  19.9k|  P->bk = B;\
  |  |  |  |  687|  19.9k|}
  |  |  ------------------
  |  |  720|  19.9k|  }\
  |  |  721|  53.1k|  M->dvsize = S;\
  |  |  722|  53.1k|  M->dv = P;\
  |  |  723|  53.1k|}
  ------------------
 1220|  53.1k|  }
 1221|  53.1k|  return chunk2mem(v);
  ------------------
  |  |  422|  53.1k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  53.1k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  53.1k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1222|  53.1k|}
lj_alloc.c:tmalloc_large:
 1131|  36.4k|{
 1132|  36.4k|  tchunkptr v = 0;
 1133|  36.4k|  size_t rsize = ~nb+1; /* Unsigned negation */
 1134|  36.4k|  tchunkptr t;
 1135|  36.4k|  bindex_t idx;
 1136|  36.4k|  compute_tree_index(nb, idx);
  ------------------
  |  |  614|  36.4k|#define compute_tree_index(S, I)\
  |  |  615|  36.4k|{\
  |  |  616|  36.4k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  ------------------
  |  |  |  |  525|  36.4k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  617|  36.4k|  if (X == 0) {\
  |  |  ------------------
  |  |  |  Branch (617:7): [True: 0, False: 36.4k]
  |  |  ------------------
  |  |  618|      0|    I = 0;\
  |  |  619|  36.4k|  } else if (X > 0xFFFF) {\
  |  |  ------------------
  |  |  |  Branch (619:14): [True: 0, False: 36.4k]
  |  |  ------------------
  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  ------------------
  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  621|  36.4k|  } else {\
  |  |  622|  36.4k|    unsigned int K = lj_fls(X);\
  |  |  ------------------
  |  |  |  |  149|  36.4k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  623|  36.4k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  ------------------
  |  |  |  |  525|  36.4k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  624|  36.4k|  }\
  |  |  625|  36.4k|}
  ------------------
 1137|       |
 1138|  36.4k|  if ((t = *treebin_at(m, idx)) != 0) {
  ------------------
  |  |  611|  36.4k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
  |  Branch (1138:7): [True: 6.61k, False: 29.8k]
  ------------------
 1139|       |    /* Traverse tree for this bin looking for node with size == nb */
 1140|  6.61k|    size_t sizebits = nb << leftshift_for_tree_index(idx);
  ------------------
  |  |  633|  6.61k|   ((i == NTREEBINS-1)? 0 : \
  |  |  ------------------
  |  |  |  |  522|  6.61k|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (633:5): [True: 0, False: 6.61k]
  |  |  ------------------
  |  |  634|  6.61k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   50|  6.61k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   55|  6.61k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |  525|  6.61k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  ------------------
 1141|  6.61k|    tchunkptr rst = 0;  /* The deepest untaken right subtree */
 1142|  7.85k|    for (;;) {
 1143|  7.85k|      tchunkptr rt;
 1144|  7.85k|      size_t trem = chunksize(t) - nb;
  ------------------
  |  |  451|  7.85k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  7.85k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  7.85k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  7.85k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  7.85k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  7.85k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1145|  7.85k|      if (trem < rsize) {
  ------------------
  |  Branch (1145:11): [True: 6.55k, False: 1.29k]
  ------------------
 1146|  6.55k|	v = t;
 1147|  6.55k|	if ((rsize = trem) == 0)
  ------------------
  |  Branch (1147:6): [True: 2.91k, False: 3.64k]
  ------------------
 1148|  2.91k|	  break;
 1149|  6.55k|      }
 1150|  4.93k|      rt = t->child[1];
 1151|  4.93k|      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   50|  4.93k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  ------------------
                    t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   55|  4.93k|#define SIZE_T_ONE		((size_t)1)
  ------------------
 1152|  4.93k|      if (rt != 0 && rt != t)
  ------------------
  |  Branch (1152:11): [True: 787, False: 4.14k]
  |  Branch (1152:22): [True: 678, False: 109]
  ------------------
 1153|    678|	rst = rt;
 1154|  4.93k|      if (t == 0) {
  ------------------
  |  Branch (1154:11): [True: 3.69k, False: 1.23k]
  ------------------
 1155|  3.69k|	t = rst; /* set t to least subtree holding sizes > nb */
 1156|  3.69k|	break;
 1157|  3.69k|      }
 1158|  1.23k|      sizebits <<= 1;
 1159|  1.23k|    }
 1160|  6.61k|  }
 1161|       |
 1162|  36.4k|  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
  ------------------
  |  Branch (1162:7): [True: 33.2k, False: 3.27k]
  |  Branch (1162:17): [True: 30.7k, False: 2.46k]
  ------------------
 1163|  30.7k|    binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
  ------------------
  |  |  656|  30.7k|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1164|  30.7k|    if (leftbits != 0)
  ------------------
  |  Branch (1164:9): [True: 7.93k, False: 22.8k]
  ------------------
 1165|  7.93k|      t = *treebin_at(m, lj_ffs(leftbits));
  ------------------
  |  |  611|  7.93k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1166|  30.7k|  }
 1167|       |
 1168|  49.3k|  while (t != 0) { /* find smallest of tree or subtree */
  ------------------
  |  Branch (1168:10): [True: 12.8k, False: 36.4k]
  ------------------
 1169|  12.8k|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  451|  12.8k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  12.8k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  12.8k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  12.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  12.8k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  12.8k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1170|  12.8k|    if (trem < rsize) {
  ------------------
  |  Branch (1170:9): [True: 8.10k, False: 4.78k]
  ------------------
 1171|  8.10k|      rsize = trem;
 1172|  8.10k|      v = t;
 1173|  8.10k|    }
 1174|  12.8k|    t = leftmost_child(t);
  ------------------
  |  |  505|  12.8k|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (505:28): [True: 1.12k, False: 11.7k]
  |  |  ------------------
  ------------------
 1175|  12.8k|  }
 1176|       |
 1177|       |  /*  If dv is a better fit, return NULL so malloc will use it */
 1178|  36.4k|  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
  ------------------
  |  Branch (1178:7): [True: 13.6k, False: 22.8k]
  |  Branch (1178:17): [True: 12.7k, False: 939]
  ------------------
 1179|  12.7k|    mchunkptr r = chunk_plus_offset(v, nb);
  ------------------
  |  |  457|  12.7k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1180|  12.7k|    unlink_large_chunk(m, v);
  ------------------
  |  |  767|  12.7k|#define unlink_large_chunk(M, X) {\
  |  |  768|  12.7k|  tchunkptr XP = X->parent;\
  |  |  769|  12.7k|  tchunkptr R;\
  |  |  770|  12.7k|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (770:7): [True: 995, False: 11.7k]
  |  |  ------------------
  |  |  771|    995|    tchunkptr F = X->fd;\
  |  |  772|    995|    R = X->bk;\
  |  |  773|    995|    F->bk = R;\
  |  |  774|    995|    R->fd = F;\
  |  |  775|  11.7k|  } else {\
  |  |  776|  11.7k|    tchunkptr *RP;\
  |  |  777|  11.7k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (777:9): [True: 319, False: 11.4k]
  |  |  ------------------
  |  |  778|  11.7k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (778:2): [True: 337, False: 11.0k]
  |  |  ------------------
  |  |  779|    656|      tchunkptr *CP;\
  |  |  780|    774|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (780:14): [True: 65, False: 709]
  |  |  ------------------
  |  |  781|    774|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (781:7): [True: 53, False: 656]
  |  |  ------------------
  |  |  782|    118|	R = *(RP = CP);\
  |  |  783|    118|      }\
  |  |  784|    656|      *RP = 0;\
  |  |  785|    656|    }\
  |  |  786|  11.7k|  }\
  |  |  787|  12.7k|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (787:7): [True: 12.7k, False: 0]
  |  |  ------------------
  |  |  788|  12.7k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  611|  12.7k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  789|  12.7k|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (789:9): [True: 11.8k, False: 917]
  |  |  ------------------
  |  |  790|  11.8k|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (790:11): [True: 10.6k, False: 1.21k]
  |  |  ------------------
  |  |  791|  11.8k|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  652|  10.6k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  10.6k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  792|  11.8k|    } else {\
  |  |  793|    917|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (793:11): [True: 754, False: 163]
  |  |  ------------------
  |  |  794|    917|	XP->child[0] = R;\
  |  |  795|    917|      else \
  |  |  796|    917|	XP->child[1] = R;\
  |  |  797|    917|    }\
  |  |  798|  12.7k|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (798:9): [True: 1.65k, False: 11.0k]
  |  |  ------------------
  |  |  799|  1.65k|      tchunkptr C0, C1;\
  |  |  800|  1.65k|      R->parent = XP;\
  |  |  801|  1.65k|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (801:11): [True: 501, False: 1.15k]
  |  |  ------------------
  |  |  802|    501|	R->child[0] = C0;\
  |  |  803|    501|	C0->parent = R;\
  |  |  804|    501|      }\
  |  |  805|  1.65k|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (805:11): [True: 496, False: 1.15k]
  |  |  ------------------
  |  |  806|    496|	R->child[1] = C1;\
  |  |  807|    496|	C1->parent = R;\
  |  |  808|    496|      }\
  |  |  809|  1.65k|    }\
  |  |  810|  12.7k|  }\
  |  |  811|  12.7k|}
  ------------------
 1181|  12.7k|    if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|  12.7k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|  12.7k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  12.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  12.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  12.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  12.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1181:9): [True: 3.83k, False: 8.91k]
  ------------------
 1182|  3.83k|      set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  665|  3.83k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|  3.83k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.83k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|  3.83k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  3.83k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|  3.83k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  3.83k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.83k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  8.91k|    } else {
 1184|  8.91k|      set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  670|  8.91k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  8.91k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  8.91k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  8.91k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  8.91k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1185|  8.91k|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|  8.91k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|  8.91k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  8.91k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|  8.91k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1186|  8.91k|      insert_chunk(m, r, rsize);
  ------------------
  |  |  816|  8.91k|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|  8.91k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  8.91k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|  8.91k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 3.64k, False: 5.27k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  675|  3.64k|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|  3.64k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  3.64k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|  3.64k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|  3.64k|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|  3.64k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|  3.64k|  mchunkptr F = B;\
  |  |  |  |  679|  3.64k|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|  3.64k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  3.64k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 3.21k, False: 430]
  |  |  |  |  ------------------
  |  |  |  |  680|  3.64k|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|  3.21k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  3.21k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|  3.64k|  else\
  |  |  |  |  682|  3.64k|    F = B->fd;\
  |  |  |  |  683|  3.64k|  B->fd = P;\
  |  |  |  |  684|  3.64k|  F->bk = P;\
  |  |  |  |  685|  3.64k|  P->fd = F;\
  |  |  |  |  686|  3.64k|  P->bk = B;\
  |  |  |  |  687|  3.64k|}
  |  |  ------------------
  |  |  817|  5.27k|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  728|  5.27k|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  729|  5.27k|  tbinptr *H;\
  |  |  |  |  730|  5.27k|  bindex_t I;\
  |  |  |  |  731|  5.27k|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  614|  5.27k|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  615|  5.27k|{\
  |  |  |  |  |  |  616|  5.27k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|  5.27k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  617|  5.27k|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (617:7): [True: 0, False: 5.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  |  |  619|  5.27k|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (619:14): [True: 0, False: 5.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  621|  5.27k|  } else {\
  |  |  |  |  |  |  622|  5.27k|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  5.27k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  623|  5.27k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|  5.27k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  624|  5.27k|  }\
  |  |  |  |  |  |  625|  5.27k|}
  |  |  |  |  ------------------
  |  |  |  |  732|  5.27k|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|  5.27k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  733|  5.27k|  X->index = I;\
  |  |  |  |  734|  5.27k|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  735|  5.27k|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  653|  5.27k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  5.27k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (735:7): [True: 4.87k, False: 397]
  |  |  |  |  ------------------
  |  |  |  |  736|  4.87k|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  651|  4.87k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  4.87k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  737|  4.87k|    *H = X;\
  |  |  |  |  738|  4.87k|    X->parent = (tchunkptr)H;\
  |  |  |  |  739|  4.87k|    X->fd = X->bk = X;\
  |  |  |  |  740|  4.87k|  } else {\
  |  |  |  |  741|    397|    tchunkptr T = *H;\
  |  |  |  |  742|    397|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  633|    397|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|    397|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (633:5): [True: 0, False: 397]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  634|    397|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|    397|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    397|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|    397|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  743|    456|    for (;;) {\
  |  |  |  |  744|    456|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  451|    456|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  443|    456|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  441|    456|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|    456|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  442|    456|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|    456|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (744:11): [True: 389, False: 67]
  |  |  |  |  ------------------
  |  |  |  |  745|    389|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|    389|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    389|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  746|    389|	K <<= 1;\
  |  |  |  |  747|    389|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (747:6): [True: 59, False: 330]
  |  |  |  |  ------------------
  |  |  |  |  748|     59|	  T = *C;\
  |  |  |  |  749|    330|	} else {\
  |  |  |  |  750|    330|	  *C = X;\
  |  |  |  |  751|    330|	  X->parent = T;\
  |  |  |  |  752|    330|	  X->fd = X->bk = X;\
  |  |  |  |  753|    330|	  break;\
  |  |  |  |  754|    330|	}\
  |  |  |  |  755|    389|      } else {\
  |  |  |  |  756|     67|	tchunkptr F = T->fd;\
  |  |  |  |  757|     67|	T->fd = F->bk = X;\
  |  |  |  |  758|     67|	X->fd = F;\
  |  |  |  |  759|     67|	X->bk = T;\
  |  |  |  |  760|     67|	X->parent = 0;\
  |  |  |  |  761|     67|	break;\
  |  |  |  |  762|     67|      }\
  |  |  |  |  763|    456|    }\
  |  |  |  |  764|    397|  }\
  |  |  |  |  765|  5.27k|}
  |  |  ------------------
  ------------------
 1187|  8.91k|    }
 1188|  12.7k|    return chunk2mem(v);
  ------------------
  |  |  422|  12.7k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  12.7k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  12.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1189|  12.7k|  }
 1190|  23.7k|  return NULL;
 1191|  36.4k|}
lj_alloc.c:alloc_sys:
  984|    102|{
  985|    102|  char *tbase = CMFAIL;
  ------------------
  |  |   72|    102|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|    102|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|    102|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  986|    102|  size_t tsize = 0;
  987|       |
  988|       |  /* Directly map large chunks */
  989|    102|  if (LJ_UNLIKELY(nb >= DEFAULT_MMAP_THRESHOLD)) {
  ------------------
  |  |  146|    102|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 102]
  |  |  ------------------
  ------------------
  990|      0|    void *mem = direct_alloc(m, nb);
  991|      0|    if (mem != 0)
  ------------------
  |  Branch (991:9): [True: 0, False: 0]
  ------------------
  992|      0|      return mem;
  993|      0|  }
  994|       |
  995|    102|  {
  996|    102|    size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
  ------------------
  |  |  600|    102|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|    102| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    102|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    102|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|    102|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|    102|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|    102|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|    102|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    102|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    102|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    102|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    102|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|    102|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|    102|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    102|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    102|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    102|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    102|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
  ------------------
  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  ------------------
  997|    102|    size_t rsize = granularity_align(req);
  ------------------
  |  |  557|    102|  (((S) + (DEFAULT_GRANULARITY - SIZE_T_ONE))\
  |  |  ------------------
  |  |  |  |   41|    102|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  |  |  ------------------
  |  |                 (((S) + (DEFAULT_GRANULARITY - SIZE_T_ONE))\
  |  |  ------------------
  |  |  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  558|    102|   & ~(DEFAULT_GRANULARITY - SIZE_T_ONE))
  |  |  ------------------
  |  |  |  |   41|    102|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  |  |  ------------------
  |  |                  & ~(DEFAULT_GRANULARITY - SIZE_T_ONE))
  |  |  ------------------
  |  |  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  998|    102|    if (LJ_LIKELY(rsize > nb)) { /* Fail if wraps around zero */
  ------------------
  |  |  145|    102|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 102, False: 0]
  |  |  ------------------
  ------------------
  999|    102|      char *mp = (char *)(CALL_MMAP(m->prng, rsize));
  ------------------
  |  |  321|    102|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1000|    102|      if (mp != CMFAIL) {
  ------------------
  |  |   72|    102|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|    102|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|    102|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1000:11): [True: 102, False: 0]
  ------------------
 1001|    102|	tbase = mp;
 1002|    102|	tsize = rsize;
 1003|    102|      }
 1004|    102|    }
 1005|    102|  }
 1006|       |
 1007|    102|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|    102|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|    102|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|    102|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1007:7): [True: 102, False: 0]
  ------------------
 1008|    102|    msegmentptr sp = &m->seg;
 1009|       |    /* Try to merge with an existing segment */
 1010|    204|    while (sp != 0 && tbase != sp->base + sp->size)
  ------------------
  |  Branch (1010:12): [True: 102, False: 102]
  |  Branch (1010:23): [True: 102, False: 0]
  ------------------
 1011|    102|      sp = sp->next;
 1012|    102|    if (sp != 0 && segment_holds(sp, m->top)) { /* append */
  ------------------
  |  |  568|      0|  ((char *)(A) >= S->base && (char *)(A) < S->base + S->size)
  |  |  ------------------
  |  |  |  Branch (568:4): [True: 0, False: 0]
  |  |  |  Branch (568:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1012:9): [True: 0, False: 102]
  ------------------
 1013|      0|      sp->size += tsize;
 1014|      0|      init_top(m, m->top, m->topsize + tsize);
 1015|    102|    } else {
 1016|    102|      sp = &m->seg;
 1017|    102|      while (sp != 0 && sp->base != tbase + tsize)
  ------------------
  |  Branch (1017:14): [True: 102, False: 0]
  |  Branch (1017:25): [True: 0, False: 102]
  ------------------
 1018|      0|	sp = sp->next;
 1019|    102|      if (sp != 0) {
  ------------------
  |  Branch (1019:11): [True: 102, False: 0]
  ------------------
 1020|    102|	char *oldbase = sp->base;
 1021|    102|	sp->base = tbase;
 1022|    102|	sp->size += tsize;
 1023|    102|	return prepend_alloc(m, tbase, oldbase, nb);
 1024|    102|      } else {
 1025|      0|	add_segment(m, tbase, tsize);
 1026|      0|      }
 1027|    102|    }
 1028|       |
 1029|      0|    if (nb < m->topsize) { /* Allocate from new or extended top space */
  ------------------
  |  Branch (1029:9): [True: 0, False: 0]
  ------------------
 1030|      0|      size_t rsize = m->topsize -= nb;
 1031|      0|      mchunkptr p = m->top;
 1032|      0|      mchunkptr r = m->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1033|      0|      r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1034|      0|      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
  ------------------
  |  |  670|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1035|      0|      return chunk2mem(p);
  ------------------
  |  |  422|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1036|      0|    }
 1037|      0|  }
 1038|       |
 1039|      0|  return NULL;
 1040|    102|}
lj_alloc.c:prepend_alloc:
  903|    102|{
  904|    102|  mchunkptr p = align_as_chunk(newbase);
  ------------------
  |  |  425|    102|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|    102| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    102|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    102|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 102, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|    102|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  905|    102|  mchunkptr oldfirst = align_as_chunk(oldbase);
  ------------------
  |  |  425|    102|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|    102| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    102|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    102|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 102, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|    102|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  906|    102|  size_t psize = (size_t)((char *)oldfirst - (char *)p);
  907|    102|  mchunkptr q = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|    102|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
  908|    102|  size_t qsize = psize - nb;
  909|    102|  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
  ------------------
  |  |  670|    102|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|    102|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|    102|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    102|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  910|       |
  911|       |  /* consolidate remainder with first chunk of old base */
  912|    102|  if (oldfirst == m->top) {
  ------------------
  |  Branch (912:7): [True: 0, False: 102]
  ------------------
  913|      0|    size_t tsize = m->topsize += qsize;
  914|      0|    m->top = q;
  915|      0|    q->head = tsize | PINUSE_BIT;
  ------------------
  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  916|    102|  } else if (oldfirst == m->dv) {
  ------------------
  |  Branch (916:14): [True: 0, False: 102]
  ------------------
  917|      0|    size_t dsize = m->dvsize += qsize;
  918|      0|    m->dv = q;
  919|      0|    set_size_and_pinuse_of_free_chunk(q, dsize);
  ------------------
  |  |  473|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
  920|    102|  } else {
  921|    102|    if (!cinuse(oldfirst)) {
  ------------------
  |  |  449|    102|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|    102|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    102|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (921:9): [True: 0, False: 102]
  ------------------
  922|      0|      size_t nsize = chunksize(oldfirst);
  ------------------
  |  |  451|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  923|      0|      unlink_chunk(m, oldfirst, nsize);
  ------------------
  |  |  820|      0|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|      0|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|      0|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  690|      0|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  691|      0|  mchunkptr F = P->fd;\
  |  |  |  |  692|      0|  mchunkptr B = P->bk;\
  |  |  |  |  693|      0|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|      0|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  694|      0|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (694:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  695|      0|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|      0|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  696|      0|  } else {\
  |  |  |  |  697|      0|    F->bk = B;\
  |  |  |  |  698|      0|    B->fd = F;\
  |  |  |  |  699|      0|  }\
  |  |  |  |  700|      0|}
  |  |  ------------------
  |  |  821|      0|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  767|      0|#define unlink_large_chunk(M, X) {\
  |  |  |  |  768|      0|  tchunkptr XP = X->parent;\
  |  |  |  |  769|      0|  tchunkptr R;\
  |  |  |  |  770|      0|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (770:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  771|      0|    tchunkptr F = X->fd;\
  |  |  |  |  772|      0|    R = X->bk;\
  |  |  |  |  773|      0|    F->bk = R;\
  |  |  |  |  774|      0|    R->fd = F;\
  |  |  |  |  775|      0|  } else {\
  |  |  |  |  776|      0|    tchunkptr *RP;\
  |  |  |  |  777|      0|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (777:9): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  778|      0|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (778:2): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  779|      0|      tchunkptr *CP;\
  |  |  |  |  780|      0|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (780:14): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  781|      0|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (781:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  782|      0|	R = *(RP = CP);\
  |  |  |  |  783|      0|      }\
  |  |  |  |  784|      0|      *RP = 0;\
  |  |  |  |  785|      0|    }\
  |  |  |  |  786|      0|  }\
  |  |  |  |  787|      0|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  788|      0|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  789|      0|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (789:9): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  790|      0|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (790:11): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  791|      0|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  652|      0|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  792|      0|    } else {\
  |  |  |  |  793|      0|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (793:11): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  794|      0|	XP->child[0] = R;\
  |  |  |  |  795|      0|      else \
  |  |  |  |  796|      0|	XP->child[1] = R;\
  |  |  |  |  797|      0|    }\
  |  |  |  |  798|      0|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:9): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  799|      0|      tchunkptr C0, C1;\
  |  |  |  |  800|      0|      R->parent = XP;\
  |  |  |  |  801|      0|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:11): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  802|      0|	R->child[0] = C0;\
  |  |  |  |  803|      0|	C0->parent = R;\
  |  |  |  |  804|      0|      }\
  |  |  |  |  805|      0|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (805:11): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  806|      0|	R->child[1] = C1;\
  |  |  |  |  807|      0|	C1->parent = R;\
  |  |  |  |  808|      0|      }\
  |  |  |  |  809|      0|    }\
  |  |  |  |  810|      0|  }\
  |  |  |  |  811|      0|}
  |  |  ------------------
  ------------------
  924|      0|      oldfirst = chunk_plus_offset(oldfirst, nsize);
  ------------------
  |  |  457|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
  925|      0|      qsize += nsize;
  926|      0|    }
  927|    102|    set_free_with_pinuse(q, qsize, oldfirst);
  ------------------
  |  |  477|    102|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|    102|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|    102|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|    102|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|    102|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    102|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|    102|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  928|    102|    insert_chunk(m, q, qsize);
  ------------------
  |  |  816|    102|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|    102|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|    102|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|    102|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 0, False: 102]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  675|      0|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|      0|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|      0|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|      0|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|      0|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|      0|  mchunkptr F = B;\
  |  |  |  |  679|      0|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|      0|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  680|      0|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|      0|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|      0|  else\
  |  |  |  |  682|      0|    F = B->fd;\
  |  |  |  |  683|      0|  B->fd = P;\
  |  |  |  |  684|      0|  F->bk = P;\
  |  |  |  |  685|      0|  P->fd = F;\
  |  |  |  |  686|      0|  P->bk = B;\
  |  |  |  |  687|      0|}
  |  |  ------------------
  |  |  817|    102|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  728|    102|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  729|    102|  tbinptr *H;\
  |  |  |  |  730|    102|  bindex_t I;\
  |  |  |  |  731|    102|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  614|    102|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  615|    102|{\
  |  |  |  |  |  |  616|    102|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|    102|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  617|    102|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (617:7): [True: 0, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  |  |  619|    102|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (619:14): [True: 0, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  621|    102|  } else {\
  |  |  |  |  |  |  622|    102|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    102|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  623|    102|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|    102|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  624|    102|  }\
  |  |  |  |  |  |  625|    102|}
  |  |  |  |  ------------------
  |  |  |  |  732|    102|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|    102|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  733|    102|  X->index = I;\
  |  |  |  |  734|    102|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  735|    102|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  653|    102|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|    102|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (735:7): [True: 102, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  736|    102|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  651|    102|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|    102|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  737|    102|    *H = X;\
  |  |  |  |  738|    102|    X->parent = (tchunkptr)H;\
  |  |  |  |  739|    102|    X->fd = X->bk = X;\
  |  |  |  |  740|    102|  } else {\
  |  |  |  |  741|      0|    tchunkptr T = *H;\
  |  |  |  |  742|      0|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  633|      0|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (633:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  634|      0|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  743|      0|    for (;;) {\
  |  |  |  |  744|      0|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  451|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (744:11): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  745|      0|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  746|      0|	K <<= 1;\
  |  |  |  |  747|      0|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (747:6): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  748|      0|	  T = *C;\
  |  |  |  |  749|      0|	} else {\
  |  |  |  |  750|      0|	  *C = X;\
  |  |  |  |  751|      0|	  X->parent = T;\
  |  |  |  |  752|      0|	  X->fd = X->bk = X;\
  |  |  |  |  753|      0|	  break;\
  |  |  |  |  754|      0|	}\
  |  |  |  |  755|      0|      } else {\
  |  |  |  |  756|      0|	tchunkptr F = T->fd;\
  |  |  |  |  757|      0|	T->fd = F->bk = X;\
  |  |  |  |  758|      0|	X->fd = F;\
  |  |  |  |  759|      0|	X->bk = T;\
  |  |  |  |  760|      0|	X->parent = 0;\
  |  |  |  |  761|      0|	break;\
  |  |  |  |  762|      0|      }\
  |  |  |  |  763|      0|    }\
  |  |  |  |  764|      0|  }\
  |  |  |  |  765|    102|}
  |  |  ------------------
  ------------------
  929|    102|  }
  930|       |
  931|    102|  return chunk2mem(p);
  ------------------
  |  |  422|    102|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|    102|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|    102|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  932|    102|}
lj_alloc.c:lj_alloc_realloc:
 1424|   287k|{
 1425|   287k|  if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  428|   287k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  419|   287k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|   287k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   287k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   287k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   287k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   287k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   287k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   287k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1425:7): [True: 0, False: 287k]
  ------------------
 1426|      0|    return NULL;
 1427|   287k|  } else {
 1428|   287k|    mstate m = (mstate)msp;
 1429|   287k|    mchunkptr oldp = mem2chunk(ptr);
  ------------------
  |  |  423|   287k|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   287k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   287k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1430|   287k|    size_t oldsize = chunksize(oldp);
  ------------------
  |  |  451|   287k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|   287k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|   287k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   287k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|   287k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   287k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1431|   287k|    mchunkptr next = chunk_plus_offset(oldp, oldsize);
  ------------------
  |  |  457|   287k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1432|   287k|    mchunkptr newp = 0;
 1433|   287k|    size_t nb = request2size(nsize);
  ------------------
  |  |  437|   287k|  (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  429|   287k|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  419|   287k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  408|   287k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   287k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|   287k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|   287k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   287k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|   287k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|   287k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|   287k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|   287k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   287k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  433|   287k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|   287k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|   287k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   287k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   287k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   287k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   287k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   287k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   287k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (437:4): [True: 0, False: 287k]
  |  |  ------------------
  ------------------
 1434|       |
 1435|       |    /* Try to either shrink or extend into top. Else malloc-copy-free */
 1436|   287k|    if (is_direct(oldp)) {
  ------------------
  |  |  480|   287k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |  441|   287k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   287k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |   74|  39.7k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  39.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (480:4): [True: 39.7k, False: 247k]
  |  |  |  Branch (480:33): [True: 0, False: 39.7k]
  |  |  ------------------
  ------------------
 1437|      0|      newp = direct_resize(oldp, nb);  /* this may return NULL. */
 1438|   287k|    } else if (oldsize >= nb) { /* already big enough */
  ------------------
  |  Branch (1438:16): [True: 3.80k, False: 283k]
  ------------------
 1439|  3.80k|      size_t rsize = oldsize - nb;
 1440|  3.80k|      newp = oldp;
 1441|  3.80k|      if (rsize >= MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|  3.80k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|  3.80k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  3.80k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  3.80k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.80k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  3.80k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  3.80k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.80k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1441:11): [True: 1, False: 3.80k]
  ------------------
 1442|      1|	mchunkptr rem = chunk_plus_offset(newp, nb);
  ------------------
  |  |  457|      1|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1443|      1|	set_inuse(m, newp, nb);
  ------------------
  |  |  660|      1|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      1|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      1|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      1|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      1|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|      1|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      1|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      1|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1444|      1|	set_inuse(m, rem, rsize);
  ------------------
  |  |  660|      1|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      1|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      1|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      1|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      1|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|      1|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      1|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      1|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1445|      1|	lj_alloc_free(m, chunk2mem(rem));
  ------------------
  |  |  422|      1|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      1|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      1|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1446|      1|      }
 1447|   283k|    } else if (next == m->top && oldsize + m->topsize > nb) {
  ------------------
  |  Branch (1447:16): [True: 44.3k, False: 239k]
  |  Branch (1447:34): [True: 44.3k, False: 0]
  ------------------
 1448|       |      /* Expand into top */
 1449|  44.3k|      size_t newsize = oldsize + m->topsize;
 1450|  44.3k|      size_t newtopsize = newsize - nb;
 1451|  44.3k|      mchunkptr newtop = chunk_plus_offset(oldp, nb);
  ------------------
  |  |  457|  44.3k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1452|  44.3k|      set_inuse(m, oldp, nb);
  ------------------
  |  |  660|  44.3k|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|  44.3k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  44.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|  44.3k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  44.3k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|  44.3k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  44.3k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  44.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1453|  44.3k|      newtop->head = newtopsize |PINUSE_BIT;
  ------------------
  |  |  441|  44.3k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  44.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1454|  44.3k|      m->top = newtop;
 1455|  44.3k|      m->topsize = newtopsize;
 1456|  44.3k|      newp = oldp;
 1457|  44.3k|    }
 1458|       |
 1459|   287k|    if (newp != 0) {
  ------------------
  |  Branch (1459:9): [True: 48.1k, False: 239k]
  ------------------
 1460|  48.1k|      return chunk2mem(newp);
  ------------------
  |  |  422|  48.1k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  48.1k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  48.1k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1461|   239k|    } else {
 1462|   239k|      void *newmem = lj_alloc_malloc(m, nsize);
 1463|   239k|      if (newmem != 0) {
  ------------------
  |  Branch (1463:11): [True: 239k, False: 0]
  ------------------
 1464|   239k|	size_t oc = oldsize - overhead_for(oldp);
  ------------------
  |  |  484|   239k| (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  480|   239k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|   239k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   239k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|  35.4k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  35.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (480:4): [True: 35.4k, False: 204k]
  |  |  |  |  |  Branch (480:33): [True: 0, False: 35.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  413|      0|#define DIRECT_CHUNK_OVERHEAD	(TWO_SIZE_T_SIZES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  410|   239k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   239k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1465|   239k|	memcpy(newmem, ptr, oc < nsize ? oc : nsize);
  ------------------
  |  Branch (1465:22): [True: 239k, False: 0]
  ------------------
 1466|   239k|	lj_alloc_free(m, ptr);
 1467|   239k|      }
 1468|   239k|      return newmem;
 1469|   239k|    }
 1470|   287k|  }
 1471|   287k|}

lua_settop:
  151|  92.0k|{
  152|  92.0k|  if (idx >= 0) {
  ------------------
  |  Branch (152:7): [True: 46.0k, False: 46.0k]
  ------------------
  153|  46.0k|    lj_checkapi(idx <= tvref(L->maxstack) - L->base, "bad stack slot %d", idx);
  ------------------
  |  |  357|  46.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  154|  46.0k|    if (L->base + idx > L->top) {
  ------------------
  |  Branch (154:9): [True: 0, False: 46.0k]
  ------------------
  155|      0|      if (L->base + idx >= tvref(L->maxstack))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (155:11): [True: 0, False: 0]
  ------------------
  156|      0|	lj_state_growstack(L, (MSize)idx - (MSize)(L->top - L->base));
  157|      0|      do { setnilV(L->top++); } while (L->top < L->base + idx);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  |  Branch (157:40): [True: 0, False: 0]
  ------------------
  158|  46.0k|    } else {
  159|  46.0k|      L->top = L->base + idx;
  160|  46.0k|    }
  161|  46.0k|  } else {
  162|  46.0k|    lj_checkapi(-(idx+1) <= (L->top - L->base), "bad stack slot %d", idx);
  ------------------
  |  |  357|  46.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  163|  46.0k|    L->top += idx+1;  /* Shrinks top (idx < 0). */
  164|  46.0k|  }
  165|  92.0k|}
lua_remove:
  168|  46.0k|{
  169|  46.0k|  TValue *p = index2adr_stack(L, idx);
  170|  92.0k|  while (++p < L->top) copyTV(L, p-1, p);
  ------------------
  |  Branch (170:10): [True: 46.0k, False: 46.0k]
  ------------------
  171|  46.0k|  L->top--;
  172|  46.0k|}
lua_pushvalue:
  215|  92.0k|{
  216|  92.0k|  copyTV(L, L->top, index2adr(L, idx));
  217|  92.0k|  incr_top(L);
  ------------------
  |  |   12|  92.0k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   184k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  92.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 92.0k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  218|  92.0k|}
lua_type:
  223|  46.0k|{
  224|  46.0k|  cTValue *o = index2adr(L, idx);
  225|  46.0k|  if (tvisnumber(o)) {
  ------------------
  |  |  802|  46.0k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  46.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  46.0k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  46.0k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 46.0k]
  |  |  ------------------
  ------------------
  226|      0|    return LUA_TNUMBER;
  ------------------
  |  |   78|      0|#define LUA_TNUMBER		3
  ------------------
  227|       |#if LJ_64 && !LJ_GC64
  228|       |  } else if (tvislightud(o)) {
  229|       |    return LUA_TLIGHTUSERDATA;
  230|       |#endif
  231|  46.0k|  } else if (o == niltv(L)) {
  ------------------
  |  |  667|  46.0k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  46.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  46.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (231:14): [True: 0, False: 46.0k]
  ------------------
  232|      0|    return LUA_TNONE;
  ------------------
  |  |   73|      0|#define LUA_TNONE		(-1)
  ------------------
  233|  46.0k|  } else {  /* Magic internal/external tag conversion. ORDER LJ_T */
  234|  46.0k|    uint32_t t = ~itype(o);
  ------------------
  |  |  781|  46.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  235|  46.0k|#if LJ_64
  236|  46.0k|    int tt = (int)((U64x(75a06,98042110) >> 4*t) & 15u);
  ------------------
  |  |   94|  46.0k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  237|       |#else
  238|       |    int tt = (int)(((t < 8 ? 0x98042110u : 0x75a06u) >> 4*(t&7)) & 15u);
  239|       |#endif
  240|  46.0k|    lj_assertL(tt != LUA_TNIL || tvisnil(o), "bad tag conversion");
  ------------------
  |  |  365|  46.0k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  92.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 46.0k]
  |  |  |  |  |  Branch (355:5): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  241|  46.0k|    return tt;
  242|  46.0k|  }
  243|  46.0k|}
lua_pushlstring:
  655|   103k|{
  656|   103k|  GCstr *s;
  657|   103k|  lj_gc_check(L);
  ------------------
  |  |   66|   103k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   103k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 423, False: 102k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   103k|      lj_gc_step(L); }
  ------------------
  658|   103k|  s = lj_str_new(L, str, len);
  659|   103k|  setstrV(L, L->top, s);
  660|   103k|  incr_top(L);
  ------------------
  |  |   12|   103k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   206k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   103k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 15, False: 103k]
  |  |  |  Branch (12:38): [True: 0, False: 15]
  |  |  ------------------
  ------------------
  661|   103k|}
lua_pushcclosure:
  695|  46.0k|{
  696|  46.0k|  GCfunc *fn;
  697|  46.0k|  lj_gc_check(L);
  ------------------
  |  |   66|  46.0k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  46.0k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 46.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  46.0k|      lj_gc_step(L); }
  ------------------
  698|  46.0k|  lj_checkapi_slot(n);
  ------------------
  |  |   32|  46.0k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  46.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  699|  46.0k|  fn = lj_func_newC(L, (MSize)n, getcurrenv(L));
  700|  46.0k|  fn->c.f = f;
  701|  46.0k|  L->top -= n;
  702|  46.0k|  while (n--)
  ------------------
  |  Branch (702:10): [True: 0, False: 46.0k]
  ------------------
  703|      0|    copyTV(L, &fn->c.upvalue[n], L->top+n);
  704|  46.0k|  setfuncV(L, L->top, fn);
  705|  46.0k|  lj_assertL(iswhite(obj2gco(fn)), "new GC object is not white");
  ------------------
  |  |  365|  46.0k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  706|  46.0k|  incr_top(L);
  ------------------
  |  |   12|  46.0k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  92.0k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 46.0k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  707|  46.0k|}
lua_createtable:
  725|  68.4k|{
  726|  68.4k|  lj_gc_check(L);
  ------------------
  |  |   66|  68.4k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  68.4k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 1.18k, False: 67.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  68.4k|      lj_gc_step(L); }
  ------------------
  727|  68.4k|  settabV(L, L->top, lj_tab_new_ah(L, narray, nrec));
  728|  68.4k|  incr_top(L);
  ------------------
  |  |   12|  68.4k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   136k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  68.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 8, False: 68.4k]
  |  |  |  Branch (12:38): [True: 0, False: 8]
  |  |  ------------------
  ------------------
  729|  68.4k|}
lua_rawget:
  832|  46.0k|{
  833|  46.0k|  cTValue *t = index2adr(L, idx);
  834|  46.0k|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|  46.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  835|  46.0k|  copyTV(L, L->top-1, lj_tab_get(L, tabV(t), L->top-1));
  ------------------
  |  |  864|  46.0k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  46.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  46.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  836|  46.0k|}
lua_settable:
  968|  46.0k|{
  969|  46.0k|  TValue *o;
  970|  46.0k|  cTValue *t = index2adr_check(L, idx);
  971|  46.0k|  lj_checkapi_slot(2);
  ------------------
  |  |   32|  46.0k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  46.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  972|  46.0k|  o = lj_meta_tset(L, t, L->top-2);
  973|  46.0k|  if (o) {
  ------------------
  |  Branch (973:7): [True: 46.0k, False: 0]
  ------------------
  974|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  975|  46.0k|    L->top -= 2;
  976|  46.0k|    copyTV(L, o, L->top+1);
  977|  46.0k|  } else {
  978|      0|    TValue *base = L->top;
  979|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  980|      0|    L->top = base+3;
  981|      0|    lj_vm_call(L, base, 0+1);
  982|      0|    L->top -= 3+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  983|      0|  }
  984|  46.0k|}
lua_rawseti:
 1019|  46.0k|{
 1020|  46.0k|  GCtab *t = tabV(index2adr(L, idx));
  ------------------
  |  |  864|  46.0k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  46.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  46.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1021|      0|  TValue *dst, *src;
 1022|  46.0k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|  46.0k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  46.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1023|  46.0k|  dst = lj_tab_setint(L, t, n);
  ------------------
  |  |   87|  46.0k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   82|  46.0k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 46.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|  46.0k|  src = L->top-1;
 1025|  46.0k|  copyTV(L, dst, src);
 1026|  46.0k|  lj_gc_barriert(L, t, dst);
  ------------------
  |  |   97|  46.0k|  { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   35|  92.0k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  92.0k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  46.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  46.0k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  46.0k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  46.0k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  46.0k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  46.0k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 46.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  92.0k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  46.0k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  46.0k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  46.0k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 46.0k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 46.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|  46.0k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  46.0k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 46.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   98|  46.0k|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1027|  46.0k|  L->top = src;
 1028|  46.0k|}
lj_api.c:index2adr_stack:
   72|  46.0k|{
   73|  46.0k|  if (idx > 0) {
  ------------------
  |  Branch (73:7): [True: 0, False: 46.0k]
  ------------------
   74|      0|    TValue *o = L->base + (idx - 1);
   75|      0|    if (o < L->top) {
  ------------------
  |  Branch (75:9): [True: 0, False: 0]
  ------------------
   76|      0|      return o;
   77|      0|    } else {
   78|      0|      lj_checkapi(0, "invalid stack slot %d", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|      return niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    }
   81|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (81:12): [True: 0, False: 0]
  ------------------
   82|  46.0k|  } else {
   83|  46.0k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|  46.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  92.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 46.0k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|  46.0k|		"invalid stack slot %d", idx);
   85|  46.0k|    return L->top + idx;
   86|  46.0k|  }
   87|  46.0k|}
lj_api.c:index2adr:
   35|   322k|{
   36|   322k|  if (idx > 0) {
  ------------------
  |  Branch (36:7): [True: 0, False: 322k]
  ------------------
   37|      0|    TValue *o = L->base + (idx - 1);
   38|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (38:12): [True: 0, False: 0]
  ------------------
   39|   322k|  } else if (idx > LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|   322k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (39:14): [True: 276k, False: 46.0k]
  ------------------
   40|   276k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|   276k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   552k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 276k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 276k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   276k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   41|   276k|		"bad stack slot %d", idx);
   42|   276k|    return L->top + idx;
   43|   276k|  } else if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|  46.0k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (43:14): [True: 0, False: 46.0k]
  ------------------
   44|      0|    TValue *o = &G(L)->tmptv;
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   45|      0|    settabV(L, o, tabref(L->env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   46|      0|    return o;
   47|  46.0k|  } else if (idx == LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|  46.0k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (47:14): [True: 46.0k, False: 0]
  ------------------
   48|  46.0k|    return registry(L);
  ------------------
  |  |  706|  46.0k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  705|  46.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   49|  46.0k|  } else {
   50|      0|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|      0|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   51|      0|    lj_checkapi(fn->c.gct == ~LJ_TFUNC && !isluafunc(fn),
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   52|      0|		"calling frame is not a C function");
   53|      0|    if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|      0|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (53:9): [True: 0, False: 0]
  ------------------
   54|      0|      TValue *o = &G(L)->tmptv;
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   55|      0|      settabV(L, o, tabref(fn->c.env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   56|      0|      return o;
   57|      0|    } else {
   58|      0|      idx = LUA_GLOBALSINDEX - idx;
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
   59|      0|      return idx <= fn->c.nupvalues ? &fn->c.upvalue[idx-1] : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (59:14): [True: 0, False: 0]
  ------------------
   60|      0|    }
   61|      0|  }
   62|   322k|}
lj_api.c:getcurrenv:
   90|  46.0k|{
   91|  46.0k|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|  46.0k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|  46.0k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  46.0k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  46.0k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   92|  46.0k|  return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  268|  46.0k|#define LJ_TFUNC		(~8u)
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|  46.0k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  46.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (92:10): [True: 0, False: 46.0k]
  ------------------
   93|  46.0k|}
lj_api.c:index2adr_check:
   65|  46.0k|{
   66|  46.0k|  TValue *o = index2adr(L, idx);
   67|  46.0k|  lj_checkapi(o != niltv(L), "invalid stack slot %d", idx);
  ------------------
  |  |  357|  46.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  92.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   68|  46.0k|  return o;
   69|  46.0k|}

lj_buf_more2:
   61|   158k|{
   62|   158k|  if (sbufisext(sb)) {
  ------------------
  |  |   56|   158k|#define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   55|   158k|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|   158k|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   43|   158k|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  |  |  ------------------
  |  |  |  Branch (56:24): [True: 0, False: 158k]
  |  |  ------------------
  ------------------
   63|      0|    SBufExt *sbx = (SBufExt *)sb;
   64|      0|    MSize len = sbufxlen(sbx);
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
   65|      0|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   66|      0|      lj_err_mem(sbufL(sbx));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    if (len + sz > sbufsz(sbx)) {  /* Must grow. */
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|      buf_grow((SBuf *)sbx, len + sz);
   69|      0|    } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   39|      0|#define sbufxslack(sbx)		((MSize)((sbx)->r - (sbx)->b))
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (69:33): [True: 0, False: 0]
  ------------------
   70|       |      /* Also grow to avoid excessive compactions, if slack < size/8. */
   71|      0|      buf_grow((SBuf *)sbx, sbuflen(sbx) + sz);  /* Not sbufxlen! */
  ------------------
  |  |   36|      0|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   72|      0|      return sbx->w;
   73|      0|    }
   74|      0|    if (sbx->r != sbx->b) {  /* Compact by moving down. */
  ------------------
  |  Branch (74:9): [True: 0, False: 0]
  ------------------
   75|      0|      memmove(sbx->b, sbx->r, len);
   76|      0|      sbx->r = sbx->b;
   77|      0|      sbx->w = sbx->b + len;
   78|      0|      lj_assertG_(G(sbufL(sbx)), len + sz <= sbufsz(sbx), "bad SBuf compact");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|    }
   80|   158k|  } else {
   81|   158k|    MSize len = sbuflen(sb);
  ------------------
  |  |   36|   158k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   82|   158k|    lj_assertG_(G(sbufL(sb)), sz > sbufleft(sb), "SBuf overflow");
  ------------------
  |  |  363|   158k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   158k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 158k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   158k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   83|   158k|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|   317k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 158k]
  |  |  |  Branch (146:44): [True: 0, False: 158k]
  |  |  |  Branch (146:44): [True: 0, False: 158k]
  |  |  ------------------
  ------------------
   84|      0|      lj_err_mem(sbufL(sb));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|   158k|    buf_grow(sb, len + sz);
   86|   158k|  }
   87|   158k|  return sb->w;
   88|   158k|}
lj_buf_shrink:
   91|  2.00k|{
   92|  2.00k|  char *b = sb->b;
   93|  2.00k|  MSize osz = (MSize)(sb->e - b);
   94|  2.00k|  if (osz > 2*LJ_MIN_SBUF) {
  ------------------
  |  |   80|  2.00k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (94:7): [True: 1, False: 2.00k]
  ------------------
   95|      1|    b = lj_mem_realloc(L, b, osz, (osz >> 1));
   96|      1|    sb->w = sb->b = b;  /* Not supposed to keep data across shrinks. */
   97|      1|    sb->e = b + (osz >> 1);
   98|      1|  }
   99|  2.00k|  lj_assertG_(G(sbufL(sb)), !sbufisext(sb), "YAGNI shrink SBufExt");
  ------------------
  |  |  363|  2.00k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.00k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.00k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.00k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  100|  2.00k|}
lj_buf_putmem:
  131|   438k|{
  132|   438k|  char *w = lj_buf_more(sb, len);
  133|   438k|  w = lj_buf_wmem(w, q, len);
  134|   438k|  sb->w = w;
  135|   438k|  return sb;
  136|   438k|}
lj_buf.c:buf_grow:
   20|   158k|{
   21|   158k|  MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   35|   158k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
                MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   36|   158k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   22|   158k|  char *b;
   23|   158k|  GCSize flag;
   24|   158k|  if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|   158k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
                if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|  88.5k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (24:7): [True: 88.5k, False: 70.1k]
  ------------------
   25|   230k|  while (nsz < sz) nsz += nsz;
  ------------------
  |  Branch (25:10): [True: 71.8k, False: 158k]
  ------------------
   26|   158k|  flag = sbufflag(sb);
  ------------------
  |  |   55|   158k|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  ------------------
  |  |  |  |   37|   158k|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  ------------------
   27|   158k|  if ((flag & SBUF_FLAG_COW)) {  /* Copy-on-write semantics. */
  ------------------
  |  |   44|   158k|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  ------------------
  |  Branch (27:7): [True: 0, False: 158k]
  ------------------
   28|      0|    lj_assertG_(G(sbufL(sb)), sb->w == sb->e, "bad SBuf COW");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   29|      0|    b = (char *)lj_mem_new(sbufL(sb), nsz);
  ------------------
  |  |  117|      0|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  ------------------
   30|      0|    setsbufflag(sb, flag & ~(GCSize)SBUF_FLAG_COW);
  ------------------
  |  |   62|      0|#define setsbufflag(sb, flag)	(setmrefu((sb)->L, (flag)))
  |  |  ------------------
  |  |  |  |   40|      0|#define setmrefu(r, u)	((r).ptr64 = (uint64_t)(u))
  |  |  ------------------
  ------------------
   31|      0|    setgcrefnull(sbufX(sb)->cowref);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  |  |  ------------------
  |  |  |  Branch (76:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   32|      0|    memcpy(b, sb->b, osz);
   33|   158k|  } else {
   34|   158k|    b = (char *)lj_mem_realloc(sbufL(sb), sb->b, osz, nsz);
  ------------------
  |  |   48|   158k|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|   158k|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|   158k|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|   158k|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   35|   158k|  }
   36|   158k|  if ((flag & SBUF_FLAG_EXT)) {
  ------------------
  |  |   43|   158k|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  ------------------
  |  Branch (36:7): [True: 0, False: 158k]
  ------------------
   37|      0|    sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|      0|  }
   39|       |  /* Adjust buffer pointers. */
   40|   158k|  sb->b = b;
   41|   158k|  sb->w = b + len;
   42|   158k|  sb->e = b + nsz;
   43|   158k|  if ((flag & SBUF_FLAG_BORROW)) {  /* Adjust borrowed buffer pointers. */
  ------------------
  |  |   45|   158k|#define SBUF_FLAG_BORROW	4	/* Borrowed string buffer. */
  ------------------
  |  Branch (43:7): [True: 0, False: 158k]
  ------------------
   44|      0|    SBuf *bsb = mref(sbufX(sb)->bsb, SBuf);
  ------------------
  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   45|      0|    bsb->b = b;
   46|      0|    bsb->w = b + len;
   47|      0|    bsb->e = b + nsz;
   48|      0|  }
   49|   158k|}

lj_state.c:lj_buf_init:
   75|  46.0k|{
   76|  46.0k|  setsbufL(sb, L);
  ------------------
  |  |   49|  46.0k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  46.0k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  46.0k|  sb->w = sb->e = sb->b = NULL;
   78|  46.0k|}
lj_state.c:lj_buf_free:
   94|  46.0k|{
   95|  46.0k|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  46.0k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  46.0k|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  46.0k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  46.0k|}
lj_lex.c:lj_buf_free:
   94|  46.0k|{
   95|  46.0k|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  46.0k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  46.0k|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  46.0k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  46.0k|}
lj_lex.c:lj_buf_reset:
   81|  8.40M|{
   82|  8.40M|  sb->w = sb->b;
   83|  8.40M|}
lj_lex.c:lj_buf_putb:
  181|  16.4M|{
  182|  16.4M|  char *w = lj_buf_more(sb, 1);
  183|  16.4M|  *w++ = (char)c;
  184|  16.4M|  sb->w = w;
  185|  16.4M|}
lj_lex.c:lj_buf_more:
  107|  16.4M|{
  108|  16.4M|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  16.4M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 67.4k, False: 16.4M]
  |  |  ------------------
  ------------------
  109|  67.4k|    return lj_buf_more2(sb, sz);
  110|  16.4M|  return sb->w;
  111|  16.4M|}
lj_parse.c:lj_buf_reset:
   81|  23.2k|{
   82|  23.2k|  sb->w = sb->b;
   83|  23.2k|}
lj_parse.c:lj_buf_more:
  107|  71.0k|{
  108|  71.0k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  71.0k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 652, False: 70.3k]
  |  |  ------------------
  ------------------
  109|    652|    return lj_buf_more2(sb, sz);
  110|  70.3k|  return sb->w;
  111|  71.0k|}
lj_parse.c:lj_buf_wmem:
  176|  44.7k|{
  177|  44.7k|  return (char *)memcpy(p, q, len) + len;
  178|  44.7k|}
lj_parse.c:lj_buf_putb:
  181|  23.2k|{
  182|  23.2k|  char *w = lj_buf_more(sb, 1);
  183|  23.2k|  *w++ = (char)c;
  184|  23.2k|  sb->w = w;
  185|  23.2k|}
lj_load.c:lj_buf_init:
   75|  46.0k|{
   76|  46.0k|  setsbufL(sb, L);
  ------------------
  |  |   49|  46.0k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  46.0k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  46.0k|  sb->w = sb->e = sb->b = NULL;
   78|  46.0k|}
lj_buf.c:lj_buf_more:
  107|   438k|{
  108|   438k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|   438k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 64.3k, False: 374k]
  |  |  ------------------
  ------------------
  109|  64.3k|    return lj_buf_more2(sb, sz);
  110|   374k|  return sb->w;
  111|   438k|}
lj_buf.c:lj_buf_wmem:
  176|   438k|{
  177|   438k|  return (char *)memcpy(p, q, len) + len;
  178|   438k|}
lj_strfmt.c:lj_buf_tmp_:
   86|   163k|{
   87|   163k|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|   163k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   163k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|   163k|  setsbufL(sb, L);
  ------------------
  |  |   49|   163k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|   163k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|   163k|  lj_buf_reset(sb);
   90|   163k|  return sb;
   91|   163k|}
lj_strfmt.c:lj_buf_reset:
   81|   163k|{
   82|   163k|  sb->w = sb->b;
   83|   163k|}
lj_strfmt.c:lj_buf_more:
  107|  83.5k|{
  108|  83.5k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  83.5k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 26.3k, False: 57.1k]
  |  |  ------------------
  ------------------
  109|  26.3k|    return lj_buf_more2(sb, sz);
  110|  57.1k|  return sb->w;
  111|  83.5k|}
lj_strfmt.c:lj_buf_putb:
  181|  34.8k|{
  182|  34.8k|  char *w = lj_buf_more(sb, 1);
  183|  34.8k|  *w++ = (char)c;
  184|  34.8k|  sb->w = w;
  185|  34.8k|}
lj_strfmt.c:lj_buf_str:
  201|   163k|{
  202|   163k|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|   163k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  203|   163k|}

lj_ccallback_mcode_free:
  305|  5.60k|{
  306|  5.60k|  size_t sz = (size_t)CALLBACK_MCODE_SIZE;
  ------------------
  |  |   26|  5.60k|#define CALLBACK_MCODE_SIZE	(LJ_PAGESIZE * LJ_NUM_CBPAGE)
  |  |  ------------------
  |  |  |  |  648|  5.60k|#define LJ_PAGESIZE		4096
  |  |  ------------------
  |  |               #define CALLBACK_MCODE_SIZE	(LJ_PAGESIZE * LJ_NUM_CBPAGE)
  |  |  ------------------
  |  |  |  |   74|  5.60k|#define LJ_NUM_CBPAGE	1		/* Number of FFI callback pages. */
  |  |  ------------------
  ------------------
  307|  5.60k|  void *p = cts->cb.mcode;
  308|  5.60k|  if (p == NULL) return;
  ------------------
  |  Branch (308:7): [True: 5.60k, False: 0]
  ------------------
  309|       |#if LJ_TARGET_WINDOWS
  310|       |  VirtualFree(p, 0, MEM_RELEASE);
  311|       |  UNUSED(sz);
  312|       |#elif LJ_TARGET_POSIX
  313|      0|  munmap(p, sz);
  314|       |#else
  315|       |  lj_mem_free(cts->g, p, sz);
  316|       |#endif
  317|      0|}

lj_cdata_free:
   63|  31.8k|{
   64|  31.8k|  if (LJ_UNLIKELY(cd->marked & LJ_GC_CDATA_FIN)) {
  ------------------
  |  |  146|  31.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 31.8k]
  |  |  ------------------
  ------------------
   65|      0|    GCobj *root;
   66|      0|    makewhite(g, obj2gco(cd));
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    markfinalized(obj2gco(cd));
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
   68|      0|    if ((root = gcref(g->gc.mmudata)) != NULL) {
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (68:9): [True: 0, False: 0]
  ------------------
   69|      0|      setgcrefr(cd->nextgc, root->gch.nextgc);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   70|      0|      setgcref(root->gch.nextgc, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   71|      0|      setgcref(g->gc.mmudata, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   72|      0|    } else {
   73|      0|      setgcref(cd->nextgc, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   74|      0|      setgcref(g->gc.mmudata, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   75|      0|    }
   76|  31.8k|  } else if (LJ_LIKELY(!cdataisv(cd))) {
  ------------------
  |  |  145|  31.8k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 31.8k, False: 0]
  |  |  ------------------
  ------------------
   77|  31.8k|    CType *ct = ctype_raw(ctype_ctsG(g), cd->ctypeid);
  ------------------
  |  |  384|  31.8k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  31.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   78|  31.8k|    CTSize sz = ctype_hassize(ct->info) ? ct->size : CTSIZE_PTR;
  ------------------
  |  |  214|  31.8k|#define ctype_hassize(info)	(ctype_type((info)) <= CT_HASSIZE)
  |  |  ------------------
  |  |  |  |  189|  31.8k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  31.8k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (214:29): [True: 31.8k, False: 0]
  |  |  ------------------
  ------------------
                  CTSize sz = ctype_hassize(ct->info) ? ct->size : CTSIZE_PTR;
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
   79|  31.8k|    lj_assertG(ctype_hassize(ct->info) || ctype_isfunc(ct->info) ||
  ------------------
  |  |  364|  31.8k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  63.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 31.8k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  31.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   80|  31.8k|	       ctype_isextern(ct->info), "free of ctype without a size");
   81|  31.8k|    lj_mem_free(g, cd, sizeof(GCcdata) + sz);
   82|  31.8k|  } else {
   83|      0|    lj_mem_free(g, memcdatav(cd), sizecdatav(cd));
  ------------------
  |  |  365|      0|#define memcdatav(cd)	((void *)((char *)(cd) - cdatav(cd)->offset))
  |  |  ------------------
  |  |  |  |  362|      0|#define cdatav(cd)	((GCcdataVar *)((char *)(cd) - sizeof(GCcdataVar)))
  |  |  ------------------
  ------------------
                  lj_mem_free(g, memcdatav(cd), sizecdatav(cd));
  ------------------
  |  |  364|      0|#define sizecdatav(cd)	(cdatavlen(cd) + cdatav(cd)->extra)
  |  |  ------------------
  |  |  |  |  363|      0|#define cdatavlen(cd)	check_exp(cdataisv(cd), cdatav(cd)->len)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sizecdatav(cd)	(cdatavlen(cd) + cdatav(cd)->extra)
  |  |  ------------------
  |  |  |  |  362|      0|#define cdatav(cd)	((GCcdataVar *)((char *)(cd) - sizeof(GCcdataVar)))
  |  |  ------------------
  ------------------
   84|      0|  }
   85|  31.8k|}

lj_lex.c:lj_cdata_new_:
   54|  31.8k|{
   55|  31.8k|  GCcdata *cd = (GCcdata *)lj_mem_newgco(L, sizeof(GCcdata) + sz);
   56|  31.8k|  cd->gct = ~LJ_TCDATA;
  ------------------
  |  |  270|  31.8k|#define LJ_TCDATA		(~10u)
  ------------------
   57|  31.8k|  cd->ctypeid = id;
   58|  31.8k|  return cd;
   59|  31.8k|}

lj_clib_unload:
  422|  5.60k|{
  423|  5.60k|  clib_unloadlib(cl);
  424|  5.60k|  cl->handle = NULL;
  425|  5.60k|}
lj_clib_default:
  429|  5.60k|{
  430|  5.60k|  CLibrary *cl = clib_new(L, mt);
  431|  5.60k|  cl->handle = CLIB_DEFHANDLE;
  ------------------
  |  |   33|  5.60k|#define CLIB_DEFHANDLE	NULL
  ------------------
  432|  5.60k|}
lj_clib.c:clib_new:
  400|  5.60k|{
  401|  5.60k|  GCtab *t = lj_tab_new(L, 0, 0);
  402|  5.60k|  GCudata *ud = lj_udata_new(L, sizeof(CLibrary), t);
  403|  5.60k|  CLibrary *cl = (CLibrary *)uddata(ud);
  ------------------
  |  |  342|  5.60k|#define uddata(u)	((void *)((u)+1))
  ------------------
  404|  5.60k|  cl->cache = t;
  405|  5.60k|  ud->udtype = UDTYPE_FFI_CLIB;
  406|       |  /* NOBARRIER: The GCudata is new (marked white). */
  407|  5.60k|  setgcref(ud->metatable, obj2gco(mt));
  ------------------
  |  |   72|  5.60k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  408|  5.60k|  setudataV(L, L->top++, ud);
  409|  5.60k|  return cl;
  410|  5.60k|}
lj_clib.c:clib_unloadlib:
  135|  5.60k|{
  136|  5.60k|  if (cl->handle && cl->handle != CLIB_DEFHANDLE)
  ------------------
  |  |   33|      0|#define CLIB_DEFHANDLE	NULL
  ------------------
  |  Branch (136:7): [True: 0, False: 5.60k]
  |  Branch (136:21): [True: 0, False: 0]
  ------------------
  137|      0|    dlclose(cl->handle);
  138|  5.60k|}

lj_ctype_addname:
  229|   414k|{
  230|   414k|  uint32_t h = ct_hashname(gcref(ct->name));
  ------------------
  |  |  149|   414k|  (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   96|   414k|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   96|   414k|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   12|   414k|#define HASH_BIAS	(-0x04c11db7)
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |  152|   414k|#define CTHASH_MASK	(CTHASH_SIZE-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  151|   414k|#define CTHASH_SIZE	128	/* Number of hash anchors. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   414k|  ct->next = cts->hash[h];
  232|   414k|  cts->hash[h] = (CTypeID1)id;
  233|   414k|}
lj_ctype_init:
  614|  5.60k|{
  615|  5.60k|  CTState *cts = lj_mem_newt(L, sizeof(CTState), CTState);
  ------------------
  |  |  133|  5.60k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  5.60k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  616|  5.60k|  CType *ct = lj_mem_newvec(L, CTTYPETAB_MIN, CType);
  ------------------
  |  |  125|  5.60k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  5.60k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  617|  5.60k|  const char *name = lj_ctype_typenames;
  618|  5.60k|  CTypeID id;
  619|  5.60k|  memset(cts, 0, sizeof(CTState));
  620|  5.60k|  cts->tab = ct;
  621|  5.60k|  cts->sizetab = CTTYPETAB_MIN;
  ------------------
  |  |  142|  5.60k|#define CTTYPETAB_MIN		128
  ------------------
  622|  5.60k|  cts->top = CTTYPEINFO_NUM;
  ------------------
  |  |  138|  5.60k|#define CTTYPEINFO_NUM		(sizeof(lj_ctype_typeinfo)/sizeof(CTInfo)-1)
  ------------------
  623|  5.60k|  cts->L = NULL;
  624|  5.60k|  cts->g = G(L);
  ------------------
  |  |  705|  5.60k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  5.60k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  625|   548k|  for (id = 0; id < CTTYPEINFO_NUM; id++, ct++) {
  ------------------
  |  |  138|   548k|#define CTTYPEINFO_NUM		(sizeof(lj_ctype_typeinfo)/sizeof(CTInfo)-1)
  ------------------
  |  Branch (625:16): [True: 543k, False: 5.60k]
  ------------------
  626|   543k|    CTInfo info = lj_ctype_typeinfo[id];
  627|   543k|    ct->size = (CTSize)((int32_t)(info << 16) >> 26);
  628|   543k|    ct->info = info & 0xffff03ffu;
  629|   543k|    ct->sib = 0;
  630|   543k|    if (ctype_type(info) == CT_KW || ctype_istypedef(info)) {
  ------------------
  |  |  189|   543k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|   543k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
                  if (ctype_type(info) == CT_KW || ctype_istypedef(info)) {
  ------------------
  |  |  208|   224k|#define ctype_istypedef(info)	(ctype_type((info)) == CT_TYPEDEF)
  |  |  ------------------
  |  |  |  |  189|   224k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|   224k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (208:31): [True: 95.2k, False: 128k]
  |  |  ------------------
  ------------------
  |  Branch (630:9): [True: 319k, False: 224k]
  ------------------
  631|   414k|      size_t len = strlen(name);
  632|   414k|      GCstr *str = lj_str_new(L, name, len);
  633|   414k|      ctype_setname(ct, str);
  634|   414k|      name += len+1;
  635|   414k|      lj_ctype_addname(cts, ct, id);
  636|   414k|    } else {
  637|   128k|      setgcrefnull(ct->name);
  ------------------
  |  |   76|   128k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  638|   128k|      ct->next = 0;
  639|   128k|      if (!ctype_isenum(info)) ctype_addtype(cts, ct, id);
  ------------------
  |  |  207|   128k|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|   128k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|   128k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (639:11): [True: 123k, False: 5.60k]
  ------------------
  640|   128k|    }
  641|   543k|  }
  642|  5.60k|  setmref(G(L)->ctype_state, cts);
  ------------------
  |  |   39|  5.60k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  643|  5.60k|  return cts;
  644|  5.60k|}
lj_ctype_initfin:
  648|  46.0k|{
  649|       |  /* NOBARRIER: The table is new (marked white). */
  650|  46.0k|  GCtab *t = lj_tab_new(L, 0, 1);
  651|  46.0k|  setgcref(t->metatable, obj2gco(t));
  ------------------
  |  |   72|  46.0k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  652|  46.0k|  setstrV(L, lj_tab_setstr(L, t, lj_str_newlit(L, "__mode")),
  ------------------
  |  |   28|  46.0k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  653|  46.0k|	  lj_str_newlit(L, "k"));
  ------------------
  |  |   28|  46.0k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  654|  46.0k|  t->nomm = (uint8_t)(~(1u<<MM_mode));
  655|  46.0k|  setgcref(G(L)->gcroot[GCROOT_FFI_FIN], obj2gco(t));
  ------------------
  |  |   72|  46.0k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  656|  46.0k|}
lj_ctype_freestate:
  660|  46.0k|{
  661|  46.0k|  CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  384|  46.0k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  662|  46.0k|  if (cts) {
  ------------------
  |  Branch (662:7): [True: 5.60k, False: 40.4k]
  ------------------
  663|  5.60k|    lj_ccallback_mcode_free(cts);
  664|  5.60k|    lj_mem_freevec(g, cts->tab, cts->sizetab, CType);
  ------------------
  |  |  130|  5.60k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  665|  5.60k|    lj_mem_freevec(g, cts->cb.cbid, cts->cb.sizeid, CTypeID1);
  ------------------
  |  |  130|  5.60k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  666|  5.60k|    lj_mem_freet(g, cts);
  ------------------
  |  |  134|  5.60k|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  667|  5.60k|  }
  668|  46.0k|}
lj_ctype.c:ctype_addtype:
  221|   123k|{
  222|   123k|  uint32_t h = ct_hashtype(ct->info, ct->size);
  ------------------
  |  |  147|   123k|#define ct_hashtype(info, size)	(hashrot(info, size) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |  152|   123k|#define CTHASH_MASK	(CTHASH_SIZE-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  151|   123k|#define CTHASH_SIZE	128	/* Number of hash anchors. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  223|   123k|  ct->next = cts->hash[h];
  224|   123k|  cts->hash[h] = (CTypeID1)id;
  225|   123k|}

lj_ctype.c:ctype_setname:
  453|   414k|{
  454|       |  /* NOBARRIER: mark string as fixed -- the C type table is never collected. */
  455|   414k|  fixstring(s);
  ------------------
  |  |   45|   414k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|   414k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  456|   414k|  setgcref(ct->name, obj2gco(s));
  ------------------
  |  |   72|   414k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  457|   414k|}
lj_cdata.c:ctype_check:
  412|  31.8k|{
  413|  31.8k|  UNUSED(cts);
  ------------------
  |  |   91|  31.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  414|  31.8k|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|  31.8k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  31.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  63.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 31.8k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 31.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  31.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  415|  31.8k|  return id;
  416|  31.8k|}
lj_cdata.c:ctype_raw:
  438|  31.8k|{
  439|  31.8k|  CType *ct = ctype_get(cts, id);
  440|  31.8k|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|  31.8k|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|  31.8k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  31.8k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 31.8k]
  |  |  ------------------
  ------------------
  441|  31.8k|  return ct;
  442|  31.8k|}
lj_cdata.c:ctype_get:
  420|  31.8k|{
  421|  31.8k|  return &cts->tab[ctype_check(cts, id)];
  422|  31.8k|}

lj_debug_shortname:
  329|  42.8k|{
  330|  42.8k|  const char *src = strdata(str);
  ------------------
  |  |  316|  42.8k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  331|  42.8k|  if (*src == '=') {
  ------------------
  |  Branch (331:7): [True: 0, False: 42.8k]
  ------------------
  332|      0|    strncpy(out, src+1, LUA_IDSIZE);  /* Remove first char. */
  ------------------
  |  |  105|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  333|      0|    out[LUA_IDSIZE-1] = '\0';  /* Ensures null termination. */
  ------------------
  |  |  105|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  334|  42.8k|  } else if (*src == '@') {  /* Output "source", or "...source". */
  ------------------
  |  Branch (334:14): [True: 0, False: 42.8k]
  ------------------
  335|      0|    size_t len = str->len-1;
  336|      0|    src++;  /* Skip the `@' */
  337|      0|    if (len >= LUA_IDSIZE) {
  ------------------
  |  |  105|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  |  Branch (337:9): [True: 0, False: 0]
  ------------------
  338|      0|      src += len-(LUA_IDSIZE-4);  /* Get last part of file name. */
  ------------------
  |  |  105|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  339|      0|      *out++ = '.'; *out++ = '.'; *out++ = '.';
  340|      0|    }
  341|      0|    strcpy(out, src);
  342|  42.8k|  } else {  /* Output [string "string"] or [builtin:name]. */
  343|  42.8k|    size_t len;  /* Length, up to first control char. */
  344|   214k|    for (len = 0; len < LUA_IDSIZE-12; len++)
  ------------------
  |  |  105|   214k|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  |  Branch (344:19): [True: 214k, False: 0]
  ------------------
  345|   214k|      if (((const unsigned char *)src)[len] < ' ') break;
  ------------------
  |  Branch (345:11): [True: 42.8k, False: 171k]
  ------------------
  346|  42.8k|    strcpy(out, line == ~(BCLine)0 ? "[builtin:" : "[string \""); out += 9;
  ------------------
  |  Branch (346:17): [True: 0, False: 42.8k]
  ------------------
  347|  42.8k|    if (src[len] != '\0') {  /* Must truncate? */
  ------------------
  |  Branch (347:9): [True: 0, False: 42.8k]
  ------------------
  348|      0|      if (len > LUA_IDSIZE-15) len = LUA_IDSIZE-15;
  ------------------
  |  |  105|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
                    if (len > LUA_IDSIZE-15) len = LUA_IDSIZE-15;
  ------------------
  |  |  105|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  |  Branch (348:11): [True: 0, False: 0]
  ------------------
  349|      0|      strncpy(out, src, len); out += len;
  350|      0|      strcpy(out, "..."); out += 3;
  351|  42.8k|    } else {
  352|  42.8k|      strcpy(out, src); out += len;
  353|  42.8k|    }
  354|  42.8k|    strcpy(out, line == ~(BCLine)0 ? "]" : "\"]");
  ------------------
  |  Branch (354:17): [True: 0, False: 42.8k]
  ------------------
  355|  42.8k|  }
  356|  42.8k|}

lj_str.c:lj_bswap:
  181|  27.4k|{
  182|  27.4k|  return (uint32_t)__builtin_bswap32((int32_t)x);
  183|  27.4k|}
lj_str.c:lj_getu32:
  237|  13.5M|{
  238|  13.5M|  return ((const Unaligned32 *)p)->u;
  239|  13.5M|}

lj_dispatch_init:
   61|  46.0k|{
   62|  46.0k|  uint32_t i;
   63|  46.0k|  ASMFunction *disp = GG->dispatch;
   64|  4.14M|  for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|  4.14M|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (64:15): [True: 4.09M, False: 46.0k]
  ------------------
   65|  4.09M|    disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |   84|  4.09M|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  4.09M|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
                  disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  4.09M|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  4.09M|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   66|  3.03M|  for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|  46.0k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
                for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|  3.03M|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  3.03M|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (66:26): [True: 2.99M, False: 46.0k]
  ------------------
   67|  2.99M|    disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  2.99M|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  2.99M|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   68|       |  /* The JIT engine is off by default. luaopen_jit() turns it on. */
   69|  46.0k|  disp[BC_FORL] = disp[BC_IFORL];
   70|  46.0k|  disp[BC_ITERL] = disp[BC_IITERL];
   71|       |  /* Workaround for stable v2.1 bytecode. TODO: Replace with BC_IITERN. */
   72|  46.0k|  disp[BC_ITERN] = &lj_vm_IITERN;
   73|  46.0k|  disp[BC_LOOP] = disp[BC_ILOOP];
   74|  46.0k|  disp[BC_FUNCF] = disp[BC_IFUNCF];
   75|  46.0k|  disp[BC_FUNCV] = disp[BC_IFUNCV];
   76|  46.0k|  GG->g.bc_cfunc_ext = GG->g.bc_cfunc_int = BCINS_AD(BC_FUNCC, LUA_MINSTACK, 0);
  ------------------
  |  |   56|  46.0k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   77|  2.66M|  for (i = 0; i < GG_NUM_ASMFF; i++)
  ------------------
  |  |   82|  2.66M|#define GG_NUM_ASMFF	57
  ------------------
  |  Branch (77:15): [True: 2.62M, False: 46.0k]
  ------------------
   78|  2.62M|    GG->bcff[i] = BCINS_AD(BC__MAX+i, 0, 0);
  ------------------
  |  |   56|  2.62M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   79|       |#if LJ_TARGET_MIPS
   80|       |  memcpy(GG->got, dispatch_got, LJ_GOT__MAX*sizeof(ASMFunction *));
   81|       |#endif
   82|  46.0k|}
lj_dispatch_update:
  107|  46.0k|{
  108|  46.0k|  uint8_t oldmode = g->dispatchmode;
  109|  46.0k|  uint8_t mode = 0;
  110|  46.0k|#if LJ_HASJIT
  111|  46.0k|  mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  116|  46.0k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  46.0k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  46.0k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |   16|  46.0k|#define JIT_F_ON		0x00000001
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (111:11): [True: 0, False: 46.0k]
  ------------------
  112|  46.0k|  mode |= G2J(g)->state != LJ_TRACE_IDLE ?
  ------------------
  |  |  116|  46.0k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  46.0k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  46.0k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (112:11): [True: 0, False: 46.0k]
  ------------------
  113|  46.0k|	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  114|  46.0k|#endif
  115|  46.0k|#if LJ_HASPROFILE
  116|  46.0k|  mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  677|  46.0k|#define HOOK_PROFILE		0x80
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (116:11): [True: 0, False: 46.0k]
  ------------------
  117|  46.0k|#endif
  118|  46.0k|  mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  325|  46.0k|#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
  |  |  ------------------
  |  |  |  |  315|  46.0k|#define LUA_HOOKLINE	2
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  326|  46.0k|#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
  |  |  ------------------
  |  |  |  |  316|  46.0k|#define LUA_HOOKCOUNT	3
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (118:11): [True: 0, False: 46.0k]
  ------------------
  119|  46.0k|  mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |  323|  46.0k|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|  46.0k|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (119:11): [True: 0, False: 46.0k]
  ------------------
  120|  46.0k|  mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |  324|  46.0k|#define LUA_MASKRET	(1 << LUA_HOOKRET)
  |  |  ------------------
  |  |  |  |  314|  46.0k|#define LUA_HOOKRET	1
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (120:11): [True: 0, False: 46.0k]
  ------------------
  121|  46.0k|  if (oldmode != mode) {  /* Mode changed? */
  ------------------
  |  Branch (121:7): [True: 0, False: 46.0k]
  ------------------
  122|      0|    ASMFunction *disp = G2GG(g)->dispatch;
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  123|      0|    ASMFunction f_forl, f_iterl, f_itern, f_loop, f_funcf, f_funcv;
  124|      0|    g->dispatchmode = mode;
  125|       |
  126|       |    /* Hotcount if JIT is on, but not while recording. */
  127|      0|    if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (127:9): [True: 0, False: 0]
  ------------------
  128|      0|      f_forl = makeasmfunc(lj_bc_ofs[BC_FORL]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  129|      0|      f_iterl = makeasmfunc(lj_bc_ofs[BC_ITERL]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  130|      0|      f_itern = makeasmfunc(lj_bc_ofs[BC_ITERN]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  131|      0|      f_loop = makeasmfunc(lj_bc_ofs[BC_LOOP]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  132|      0|      f_funcf = makeasmfunc(lj_bc_ofs[BC_FUNCF]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  133|      0|      f_funcv = makeasmfunc(lj_bc_ofs[BC_FUNCV]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  134|      0|    } else {  /* Otherwise use the non-hotcounting instructions. */
  135|      0|      f_forl = disp[GG_LEN_DDISP+BC_IFORL];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  136|      0|      f_iterl = disp[GG_LEN_DDISP+BC_IITERL];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  137|      0|      f_itern = &lj_vm_IITERN;
  138|      0|      f_loop = disp[GG_LEN_DDISP+BC_ILOOP];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  139|      0|      f_funcf = makeasmfunc(lj_bc_ofs[BC_IFUNCF]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  140|      0|      f_funcv = makeasmfunc(lj_bc_ofs[BC_IFUNCV]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  141|      0|    }
  142|       |    /* Init static counting instruction dispatch first (may be copied below). */
  143|      0|    disp[GG_LEN_DDISP+BC_FORL] = f_forl;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  144|      0|    disp[GG_LEN_DDISP+BC_ITERL] = f_iterl;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  145|      0|    disp[GG_LEN_DDISP+BC_ITERN] = f_itern;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  146|      0|    disp[GG_LEN_DDISP+BC_LOOP] = f_loop;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  147|       |
  148|       |    /* Set dynamic instruction dispatch. */
  149|      0|    if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (149:9): [True: 0, False: 0]
  ------------------
  150|       |      /* Need to update the whole table. */
  151|      0|      if (!(mode & DISPMODE_INS)) {  /* No ins dispatch? */
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (151:11): [True: 0, False: 0]
  ------------------
  152|       |	/* Copy static dispatch table to dynamic dispatch table. */
  153|      0|	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
              	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  154|       |	/* Overwrite with dynamic return dispatch. */
  155|      0|	if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (155:6): [True: 0, False: 0]
  ------------------
  156|      0|	  disp[BC_RETM] = lj_vm_rethook;
  157|      0|	  disp[BC_RET] = lj_vm_rethook;
  158|      0|	  disp[BC_RET0] = lj_vm_rethook;
  159|      0|	  disp[BC_RET1] = lj_vm_rethook;
  160|      0|	}
  161|      0|      } else {
  162|       |	/* The recording dispatch also checks for hooks. */
  163|      0|	ASMFunction f = (mode & DISPMODE_PROF) ? lj_vm_profhook :
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
  |  Branch (163:18): [True: 0, False: 0]
  ------------------
  164|      0|			(mode & DISPMODE_REC) ? lj_vm_record : lj_vm_inshook;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
  |  Branch (164:4): [True: 0, False: 0]
  ------------------
  165|      0|	uint32_t i;
  166|      0|	for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (166:14): [True: 0, False: 0]
  ------------------
  167|      0|	  disp[i] = f;
  168|      0|      }
  169|      0|    } else if (!(mode & DISPMODE_INS)) {
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (169:16): [True: 0, False: 0]
  ------------------
  170|       |      /* Otherwise set dynamic counting ins. */
  171|      0|      disp[BC_FORL] = f_forl;
  172|      0|      disp[BC_ITERL] = f_iterl;
  173|      0|      disp[BC_ITERN] = f_itern;
  174|      0|      disp[BC_LOOP] = f_loop;
  175|       |      /* Set dynamic return dispatch. */
  176|      0|      if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (176:11): [True: 0, False: 0]
  ------------------
  177|      0|	disp[BC_RETM] = lj_vm_rethook;
  178|      0|	disp[BC_RET] = lj_vm_rethook;
  179|      0|	disp[BC_RET0] = lj_vm_rethook;
  180|      0|	disp[BC_RET1] = lj_vm_rethook;
  181|      0|      } else {
  182|      0|	disp[BC_RETM] = disp[GG_LEN_DDISP+BC_RETM];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  183|      0|	disp[BC_RET] = disp[GG_LEN_DDISP+BC_RET];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  184|      0|	disp[BC_RET0] = disp[GG_LEN_DDISP+BC_RET0];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  185|      0|	disp[BC_RET1] = disp[GG_LEN_DDISP+BC_RET1];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  186|      0|      }
  187|      0|    }
  188|       |
  189|       |    /* Set dynamic call dispatch. */
  190|      0|    if ((oldmode ^ mode) & DISPMODE_CALL) {  /* Update the whole table? */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (190:9): [True: 0, False: 0]
  ------------------
  191|      0|      uint32_t i;
  192|      0|      if ((mode & DISPMODE_CALL) == 0) {  /* No call hooks? */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (192:11): [True: 0, False: 0]
  ------------------
  193|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (193:25): [True: 0, False: 0]
  ------------------
  194|      0|	  disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  195|      0|      } else {
  196|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (196:25): [True: 0, False: 0]
  ------------------
  197|      0|	  disp[i] = lj_vm_callhook;
  198|      0|      }
  199|      0|    }
  200|      0|    if (!(mode & DISPMODE_CALL)) {  /* Overwrite dynamic counting ins. */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (200:9): [True: 0, False: 0]
  ------------------
  201|      0|      disp[BC_FUNCF] = f_funcf;
  202|      0|      disp[BC_FUNCV] = f_funcv;
  203|      0|    }
  204|       |
  205|      0|#if LJ_HASJIT
  206|       |    /* Reset hotcounts for JIT off to on transition. */
  207|      0|    if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (207:9): [True: 0, False: 0]
  |  Branch (207:34): [True: 0, False: 0]
  ------------------
  208|      0|      lj_dispatch_init_hotcount(g);
  209|      0|#endif
  210|      0|  }
  211|  46.0k|}

lj_err_unwind_dwarf:
  445|  85.6k|{
  446|  85.6k|  void *cf;
  447|  85.6k|  lua_State *L;
  448|  85.6k|  if (version != 1)
  ------------------
  |  Branch (448:7): [True: 0, False: 85.6k]
  ------------------
  449|      0|    return _URC_FATAL_PHASE1_ERROR;
  ------------------
  |  |  409|      0|#define _URC_FATAL_PHASE1_ERROR	3
  ------------------
  450|  85.6k|  cf = (void *)_Unwind_GetCFA(ctx);
  451|  85.6k|  L = cframe_L(cf);
  ------------------
  |  |  285|  85.6k|  (&gcref(*(GCRef *)(((char *)(cf))+CFRAME_OFS_L))->th)
  |  |  ------------------
  |  |  |  |   67|  85.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  452|  85.6k|  if ((actions & _UA_SEARCH_PHASE)) {
  ------------------
  |  |  437|  85.6k|#define _UA_SEARCH_PHASE	1
  ------------------
  |  Branch (452:7): [True: 42.8k, False: 42.8k]
  ------------------
  453|  42.8k|#if LJ_UNWIND_EXT
  454|  42.8k|    if (err_unwind(L, cf, 0) == NULL)
  ------------------
  |  Branch (454:9): [True: 0, False: 42.8k]
  ------------------
  455|      0|      return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  412|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  456|  42.8k|#endif
  457|  42.8k|    if (!LJ_UEXCLASS_CHECK(uexclass)) {
  ------------------
  |  |  417|  42.8k|#define LJ_UEXCLASS_CHECK(cl)	(((cl) ^ LJ_UEXCLASS) <= 0xff)
  |  |  ------------------
  |  |  |  |  415|  42.8k|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  ------------------
  |  Branch (457:9): [True: 0, False: 42.8k]
  ------------------
  458|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_ERRCPP));
  459|      0|    }
  460|  42.8k|    return _URC_HANDLER_FOUND;
  ------------------
  |  |  410|  42.8k|#define _URC_HANDLER_FOUND	6
  ------------------
  461|  42.8k|  }
  462|  42.8k|  if ((actions & _UA_CLEANUP_PHASE)) {
  ------------------
  |  |  438|  42.8k|#define _UA_CLEANUP_PHASE	2
  ------------------
  |  Branch (462:7): [True: 42.8k, False: 0]
  ------------------
  463|  42.8k|    int errcode;
  464|  42.8k|    if (LJ_UEXCLASS_CHECK(uexclass)) {
  ------------------
  |  |  417|  42.8k|#define LJ_UEXCLASS_CHECK(cl)	(((cl) ^ LJ_UEXCLASS) <= 0xff)
  |  |  ------------------
  |  |  |  |  415|  42.8k|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  |  |  |  Branch (417:31): [True: 42.8k, False: 0]
  |  |  ------------------
  ------------------
  465|  42.8k|      errcode = LJ_UEXCLASS_ERRCODE(uexclass);
  ------------------
  |  |  418|  42.8k|#define LJ_UEXCLASS_ERRCODE(cl)	((int)((cl) & 0xff))
  ------------------
  466|  42.8k|    } else {
  467|      0|      if ((actions & _UA_HANDLER_FRAME))
  ------------------
  |  |  439|      0|#define _UA_HANDLER_FRAME	4
  ------------------
  |  Branch (467:11): [True: 0, False: 0]
  ------------------
  468|      0|	_Unwind_DeleteException(uex);
  469|      0|      errcode = LUA_ERRRUN;
  ------------------
  |  |   45|      0|#define LUA_ERRRUN	2
  ------------------
  470|      0|    }
  471|  42.8k|#if LJ_UNWIND_EXT
  472|  42.8k|    cf = err_unwind(L, cf, errcode);
  473|  42.8k|    if ((actions & _UA_FORCE_UNWIND)) {
  ------------------
  |  |  440|  42.8k|#define _UA_FORCE_UNWIND	8
  ------------------
  |  Branch (473:9): [True: 0, False: 42.8k]
  ------------------
  474|      0|      return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  412|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  475|  42.8k|    } else if (cf) {
  ------------------
  |  Branch (475:16): [True: 42.8k, False: 0]
  ------------------
  476|  42.8k|      ASMFunction ip;
  477|  42.8k|      _Unwind_SetGR(ctx, LJ_TARGET_EHRETREG, errcode);
  ------------------
  |  |  206|  42.8k|#define LJ_TARGET_EHRETREG	0
  ------------------
  478|  42.8k|      ip = cframe_unwind_ff(cf) ? lj_vm_unwind_ff_eh : lj_vm_unwind_c_eh;
  ------------------
  |  |  293|  42.8k|#define cframe_unwind_ff(cf)	((intptr_t)(cf) & CFRAME_UNWIND_FF)
  |  |  ------------------
  |  |  |  |  276|  42.8k|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  ------------------
  |  |  |  Branch (293:30): [True: 0, False: 42.8k]
  |  |  ------------------
  ------------------
  479|  42.8k|      _Unwind_SetIP(ctx, (uintptr_t)lj_ptr_strip(ip));
  ------------------
  |  | 1059|  42.8k|#define lj_ptr_strip(ptr) (ptr)
  ------------------
  480|  42.8k|      return _URC_INSTALL_CONTEXT;
  ------------------
  |  |  411|  42.8k|#define _URC_INSTALL_CONTEXT	7
  ------------------
  481|  42.8k|    }
  482|      0|#if LJ_TARGET_X86ORX64
  483|      0|    else if ((actions & _UA_HANDLER_FRAME)) {
  ------------------
  |  |  439|      0|#define _UA_HANDLER_FRAME	4
  ------------------
  |  Branch (483:14): [True: 0, False: 0]
  ------------------
  484|       |      /* Workaround for ancient libgcc bug. Still present in RHEL 5.5. :-/
  485|       |      ** Real fix: http://gcc.gnu.org/viewcvs/trunk/gcc/unwind-dw2.c?r1=121165&r2=124837&pathrev=153877&diff_format=h
  486|       |      */
  487|      0|      _Unwind_SetGR(ctx, LJ_TARGET_EHRETREG, errcode);
  ------------------
  |  |  206|      0|#define LJ_TARGET_EHRETREG	0
  ------------------
  488|      0|      _Unwind_SetIP(ctx, (uintptr_t)lj_vm_unwind_rethrow);
  489|      0|      return _URC_INSTALL_CONTEXT;
  ------------------
  |  |  411|      0|#define _URC_INSTALL_CONTEXT	7
  ------------------
  490|      0|    }
  491|  42.8k|#endif
  492|       |#else
  493|       |    /* This is not the proper way to escape from the unwinder. We get away with
  494|       |    ** it on non-x64 because the interpreter restores all callee-saved regs.
  495|       |    */
  496|       |    lj_err_throw(L, errcode);
  497|       |#if LJ_TARGET_X64
  498|       |#error "Broken build system -- only use the provided Makefiles!"
  499|       |#endif
  500|       |#endif
  501|  42.8k|  }
  502|      0|  return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  412|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  503|  42.8k|}
lj_err_verify:
  511|  46.0k|{
  512|  46.0k|#if !LJ_TARGET_OSX
  513|       |  /* Check disabled on MacOS due to brilliant software engineering at Apple. */
  514|  46.0k|  struct dwarf_eh_bases ehb;
  515|  46.0k|  lj_assertX(_Unwind_Find_FDE((void *)lj_err_throw, &ehb), "broken build: external frame unwinding enabled, but missing -funwind-tables");
  ------------------
  |  |  366|  46.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  516|  46.0k|#endif
  517|       |  /* Check disabled, because of broken Fedora/ARM64. See #722.
  518|       |  lj_assertX(_Unwind_Find_FDE((void *)_Unwind_RaiseException, &ehb), "broken build: external frame unwinding enabled, but system libraries have no unwind tables");
  519|       |  */
  520|  46.0k|}
lj_err_throw:
  775|  42.8k|{
  776|  42.8k|  global_State *g = G(L);
  ------------------
  |  |  705|  42.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  42.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  777|  42.8k|  lj_trace_abort(g);
  ------------------
  |  |   45|  42.8k|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|  42.8k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  42.8k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  42.8k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  778|  42.8k|  L->status = LUA_OK;
  ------------------
  |  |   43|  42.8k|#define LUA_OK		0
  ------------------
  779|  42.8k|#if LJ_UNWIND_EXT
  780|  42.8k|  err_raise_ext(g, errcode);
  781|       |  /*
  782|       |  ** A return from this function signals a corrupt C stack that cannot be
  783|       |  ** unwound. We have no choice but to call the panic function and exit.
  784|       |  **
  785|       |  ** Usually this is caused by a C function without unwind information.
  786|       |  ** This may happen if you've manually enabled LUAJIT_UNWIND_EXTERNAL
  787|       |  ** and forgot to recompile *every* non-C++ file with -funwind-tables.
  788|       |  */
  789|  42.8k|  if (G(L)->panic)
  ------------------
  |  |  705|  42.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  42.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (789:7): [True: 0, False: 42.8k]
  ------------------
  790|      0|    G(L)->panic(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  791|       |#else
  792|       |#if LJ_HASJIT
  793|       |  setmref(g->jit_base, NULL);
  794|       |#endif
  795|       |  {
  796|       |    void *cf = err_unwind(L, NULL, errcode);
  797|       |    if (cframe_unwind_ff(cf))
  798|       |      lj_vm_unwind_ff(cframe_raw(cf));
  799|       |    else
  800|       |      lj_vm_unwind_c(cframe_raw(cf), errcode);
  801|       |  }
  802|       |#endif
  803|  42.8k|  exit(EXIT_FAILURE);
  804|  42.8k|}
lj_err_str:
  808|  46.0k|{
  809|  46.0k|  return lj_str_newz(L, err2msg(em));
  ------------------
  |  |   27|  46.0k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  810|  46.0k|}
lj_err_lex:
  952|  42.8k|{
  953|  42.8k|  char buff[LUA_IDSIZE];
  954|  42.8k|  const char *msg;
  955|  42.8k|  lj_debug_shortname(buff, src, line);
  956|  42.8k|  msg = lj_strfmt_pushvf(L, err2msg(em), argp);
  ------------------
  |  |   21|  42.8k|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  957|  42.8k|  msg = lj_strfmt_pushf(L, "%s:%d: %s", buff, line, msg);
  958|  42.8k|  if (tok)
  ------------------
  |  Branch (958:7): [True: 41.1k, False: 1.72k]
  ------------------
  959|  41.1k|    lj_strfmt_pushf(L, err2msg(LJ_ERR_XNEAR), msg, tok);
  ------------------
  |  |   21|  41.1k|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  960|  42.8k|  lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|  42.8k|#define LUA_ERRSYNTAX	3
  ------------------
  961|  42.8k|}
lj_err.c:err_unwind:
  110|  85.6k|{
  111|  85.6k|  TValue *frame = L->base-1;
  112|  85.6k|  void *cf = L->cframe;
  113|  85.6k|  while (cf) {
  ------------------
  |  Branch (113:10): [True: 85.6k, False: 0]
  ------------------
  114|  85.6k|    int32_t nres = cframe_nres(cframe_raw(cf));
  ------------------
  |  |  280|  85.6k|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|  85.6k|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
  115|  85.6k|    if (nres < 0) {  /* C frame without Lua frame? */
  ------------------
  |  Branch (115:9): [True: 85.6k, False: 0]
  ------------------
  116|  85.6k|      TValue *top = restorestack(L, -nres);
  ------------------
  |  |   15|  85.6k|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|  85.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  117|  85.6k|      if (frame < top) {  /* Frame reached? */
  ------------------
  |  Branch (117:11): [True: 85.6k, False: 0]
  ------------------
  118|  85.6k|	if (errcode) {
  ------------------
  |  Branch (118:6): [True: 42.8k, False: 42.8k]
  ------------------
  119|  42.8k|	  L->base = frame+1;
  120|  42.8k|	  L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|  42.8k|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|  42.8k|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  121|  42.8k|	  unwindstack(L, top);
  122|  42.8k|	}
  123|  85.6k|	return cf;
  124|  85.6k|      }
  125|  85.6k|    }
  126|      0|    if (frame <= tvref(L->stack)+LJ_FR2)
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  if (frame <= tvref(L->stack)+LJ_FR2)
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  |  Branch (126:9): [True: 0, False: 0]
  ------------------
  127|      0|      break;
  128|      0|    switch (frame_typep(frame)) {
  ------------------
  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (76:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  129|      0|    case FRAME_LUA:  /* Lua frame. */
  ------------------
  |  Branch (129:5): [True: 0, False: 0]
  ------------------
  130|      0|    case FRAME_LUAP:
  ------------------
  |  Branch (130:5): [True: 0, False: 0]
  ------------------
  131|      0|      frame = frame_prevl(frame);
  ------------------
  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
  132|      0|      break;
  133|      0|    case FRAME_C:  /* C frame. */
  ------------------
  |  Branch (133:5): [True: 0, False: 0]
  ------------------
  134|      0|    unwind_c:
  135|      0|#if LJ_UNWIND_EXT
  136|      0|      if (errcode) {
  ------------------
  |  Branch (136:11): [True: 0, False: 0]
  ------------------
  137|      0|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|      0|	L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  139|      0|	unwindstack(L, frame - LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  140|      0|      } else if (cf != stopcf) {
  ------------------
  |  Branch (140:18): [True: 0, False: 0]
  ------------------
  141|      0|	cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  142|      0|	frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  143|      0|	break;
  144|      0|      }
  145|      0|      return NULL;  /* Continue unwinding. */
  146|       |#else
  147|       |      UNUSED(stopcf);
  148|       |      cf = cframe_prev(cf);
  149|       |      frame = frame_prevd(frame);
  150|       |      break;
  151|       |#endif
  152|      0|    case FRAME_CP:  /* Protected C frame. */
  ------------------
  |  Branch (152:5): [True: 0, False: 0]
  ------------------
  153|      0|      if (cframe_canyield(cf)) {  /* Resume? */
  ------------------
  |  |  292|      0|#define cframe_canyield(cf)	((intptr_t)(cf) & CFRAME_RESUME)
  |  |  ------------------
  |  |  |  |  275|      0|#define CFRAME_RESUME		1
  |  |  ------------------
  |  |  |  Branch (292:29): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  154|      0|	if (errcode) {
  ------------------
  |  Branch (154:6): [True: 0, False: 0]
  ------------------
  155|      0|	  hook_leave(G(L));  /* Assumes nobody uses coroutines inside hooks. */
  ------------------
  |  |  683|      0|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|      0|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  156|      0|	  L->cframe = NULL;
  157|      0|	  L->status = (uint8_t)errcode;
  158|      0|	}
  159|      0|	return cf;
  160|      0|      }
  161|      0|      if (errcode) {
  ------------------
  |  Branch (161:11): [True: 0, False: 0]
  ------------------
  162|      0|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  163|      0|	L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  164|      0|	unwindstack(L, frame - LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  165|      0|      }
  166|      0|      return cf;
  167|      0|    case FRAME_CONT:  /* Continuation frame. */
  ------------------
  |  Branch (167:5): [True: 0, False: 0]
  ------------------
  168|      0|      if (frame_iscont_fficb(frame))
  ------------------
  |  |  106|      0|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|      0|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|      0|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  169|      0|	goto unwind_c;
  170|       |      /* fallthrough */
  171|      0|    case FRAME_VARG:  /* Vararg frame. */
  ------------------
  |  Branch (171:5): [True: 0, False: 0]
  ------------------
  172|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|      0|      break;
  174|      0|    case FRAME_PCALL:  /* FF pcall() frame. */
  ------------------
  |  Branch (174:5): [True: 0, False: 0]
  ------------------
  175|      0|    case FRAME_PCALLH:  /* FF pcall() frame inside hook. */
  ------------------
  |  Branch (175:5): [True: 0, False: 0]
  ------------------
  176|      0|      if (errcode) {
  ------------------
  |  Branch (176:11): [True: 0, False: 0]
  ------------------
  177|      0|	global_State *g;
  178|      0|	if (errcode == LUA_YIELD) {
  ------------------
  |  |   44|      0|#define LUA_YIELD	1
  ------------------
  |  Branch (178:6): [True: 0, False: 0]
  ------------------
  179|      0|	  frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  180|      0|	  break;
  181|      0|	}
  182|      0|	g = G(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  183|      0|	setgcref(g->cur_L, obj2gco(L));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  184|      0|	if (frame_typep(frame) == FRAME_PCALL)
  ------------------
  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (184:6): [True: 0, False: 0]
  ------------------
  185|      0|	  hook_leave(g);
  ------------------
  |  |  683|      0|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|      0|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  186|      0|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  187|      0|	L->cframe = cf;
  188|      0|	unwindstack(L, L->base);
  189|      0|      }
  190|      0|      return (void *)((intptr_t)cf | CFRAME_UNWIND_FF);
  ------------------
  |  |  276|      0|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  ------------------
  191|      0|    }
  192|      0|  }
  193|       |  /* No C frame. */
  194|      0|  if (errcode) {
  ------------------
  |  Branch (194:7): [True: 0, False: 0]
  ------------------
  195|      0|    L->base = tvref(L->stack)+1+LJ_FR2;
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = tvref(L->stack)+1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  196|      0|    L->cframe = NULL;
  197|      0|    unwindstack(L, L->base);
  198|      0|    if (G(L)->panic)
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (198:9): [True: 0, False: 0]
  ------------------
  199|      0|      G(L)->panic(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  200|      0|    exit(EXIT_FAILURE);
  201|      0|  }
  202|      0|  return L;  /* Anything non-NULL will do. */
  203|      0|}
lj_err.c:unwindstack:
   99|  42.8k|{
  100|  42.8k|  lj_func_closeuv(L, top);
  101|  42.8k|  if (top < L->top-1) {
  ------------------
  |  Branch (101:7): [True: 42.8k, False: 4]
  ------------------
  102|  42.8k|    copyTV(L, top, L->top-1);
  103|  42.8k|    L->top = top+1;
  104|  42.8k|  }
  105|  42.8k|  lj_state_relimitstack(L);
  106|  42.8k|}
lj_err.c:err_raise_ext:
  760|  42.8k|{
  761|  42.8k|  memset(&static_uex, 0, sizeof(static_uex));
  762|  42.8k|  static_uex.ex.exclass = LJ_UEXCLASS_MAKE(errcode);
  ------------------
  |  |  416|  42.8k|#define LJ_UEXCLASS_MAKE(c)	(LJ_UEXCLASS | (uint64_t)(c))
  |  |  ------------------
  |  |  |  |  415|  42.8k|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  ------------------
  763|  42.8k|  static_uex.g = g;
  764|  42.8k|  _Unwind_RaiseException(&static_uex.ex);
  765|  42.8k|}

lj_func_freeproto:
   21|  23.2k|{
   22|  23.2k|  lj_mem_free(g, pt, pt->sizept);
   23|  23.2k|}
lj_func_closeuv:
   84|   134k|{
   85|   134k|  GCupval *uv;
   86|   134k|  global_State *g = G(L);
  ------------------
  |  |  705|   134k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   134k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   87|   134k|  while (gcref(L->openupval) != NULL &&
  ------------------
  |  |   67|   134k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (87:10): [True: 0, False: 134k]
  ------------------
   88|   134k|	 uvval((uv = gco2uv(gcref(L->openupval)))) >= level) {
  ------------------
  |  |  449|      0|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (88:3): [True: 0, False: 0]
  ------------------
   89|      0|    GCobj *o = obj2gco(uv);
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   90|      0|    lj_assertG(!isblack(o), "bad black upvalue");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   91|      0|    lj_assertG(!uv->closed && uvval(uv) != &uv->tv, "closed upvalue in chain");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   92|      0|    setgcrefr(L->openupval, uv->nextgc);  /* No longer in open list. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   93|      0|    if (isdead(g, o)) {
  ------------------
  |  |   37|      0|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|      0|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   94|      0|      lj_func_freeuv(g, uv);
   95|      0|    } else {
   96|      0|      unlinkuv(g, uv);
   97|      0|      lj_gc_closeuv(g, uv);
   98|      0|    }
   99|      0|  }
  100|   134k|}
lj_func_newC:
  112|   270k|{
  113|   270k|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeCfunc(nelems));
  ------------------
  |  |  481|   270k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  114|   270k|  fn->c.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|   270k|#define LJ_TFUNC		(~8u)
  ------------------
  115|   270k|  fn->c.ffid = FF_C;
  ------------------
  |  |  475|   270k|#define FF_C		1
  ------------------
  116|   270k|  fn->c.nupvalues = (uint8_t)nelems;
  117|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  118|   270k|  setmref(fn->c.pc, &G(L)->bc_cfunc_ext);
  ------------------
  |  |   39|   270k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  119|   270k|  setgcref(fn->c.env, obj2gco(env));
  ------------------
  |  |   72|   270k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  120|   270k|  return fn;
  121|   270k|}
lj_func_newL_empty:
  141|  3.17k|{
  142|  3.17k|  GCfunc *fn = func_newL(L, pt, env);
  143|  3.17k|  MSize i, nuv = pt->sizeuv;
  144|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  145|  3.17k|  for (i = 0; i < nuv; i++) {
  ------------------
  |  Branch (145:15): [True: 0, False: 3.17k]
  ------------------
  146|      0|    GCupval *uv = func_emptyuv(L);
  147|      0|    int32_t v = proto_uv(pt)[i];
  ------------------
  |  |  422|      0|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  148|      0|    uv->immutable = ((v / PROTO_UV_IMMUTABLE) & 1);
  ------------------
  |  |  413|      0|#define PROTO_UV_IMMUTABLE	0x4000	/* Immutable upvalue. */
  ------------------
  149|      0|    uv->dhash = (uint32_t)(uintptr_t)pt ^ (v << 24);
  150|      0|    setgcref(fn->l.uvptr[i], obj2gco(uv));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  151|      0|  }
  152|  3.17k|  fn->l.nupvalues = (uint8_t)nuv;
  153|  3.17k|  return fn;
  154|  3.17k|}
lj_func_free:
  186|   273k|{
  187|   273k|  MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|   273k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|   273k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 3.17k, False: 270k]
  |  |  ------------------
  ------------------
                MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|  3.17k|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  188|   273k|			       sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|   543k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  189|   273k|  lj_mem_free(g, fn, size);
  190|   273k|}
lj_func.c:func_newL:
  124|  3.17k|{
  125|  3.17k|  uint32_t count;
  126|  3.17k|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeLfunc((MSize)pt->sizeuv));
  ------------------
  |  |  482|  3.17k|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  127|  3.17k|  fn->l.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|  3.17k|#define LJ_TFUNC		(~8u)
  ------------------
  128|  3.17k|  fn->l.ffid = FF_LUA;
  ------------------
  |  |  474|  3.17k|#define FF_LUA		0
  ------------------
  129|  3.17k|  fn->l.nupvalues = 0;  /* Set to zero until upvalues are initialized. */
  130|       |  /* NOBARRIER: Really a setgcref. But the GCfunc is new (marked white). */
  131|  3.17k|  setmref(fn->l.pc, proto_bc(pt));
  ------------------
  |  |   39|  3.17k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  132|  3.17k|  setgcref(fn->l.env, obj2gco(env));
  ------------------
  |  |   72|  3.17k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  133|       |  /* Saturating 3 bit counter (0..7) for created closures. */
  134|  3.17k|  count = (uint32_t)pt->flags + PROTO_CLCOUNT;
  ------------------
  |  |  408|  3.17k|#define PROTO_CLCOUNT		0x20	/* Base of saturating 3 bit counter. */
  ------------------
  135|  3.17k|  pt->flags = (uint8_t)(count - ((count >> PROTO_CLC_BITS) & PROTO_CLCOUNT));
  ------------------
  |  |  409|  3.17k|#define PROTO_CLC_BITS		3
  ------------------
                pt->flags = (uint8_t)(count - ((count >> PROTO_CLC_BITS) & PROTO_CLCOUNT));
  ------------------
  |  |  408|  3.17k|#define PROTO_CLCOUNT		0x20	/* Base of saturating 3 bit counter. */
  ------------------
  136|  3.17k|  return fn;
  137|  3.17k|}

lj_gc_separateudata:
  142|  94.0k|{
  143|  94.0k|  size_t m = 0;
  144|  94.0k|  GCRef *p = &mainthread(g)->nextgc;
  ------------------
  |  |  665|  94.0k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  94.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  145|  94.0k|  GCobj *o;
  146|   106k|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|   106k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (146:10): [True: 12.2k, False: 94.0k]
  ------------------
  147|  12.2k|    if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   32|  24.4k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  12.2k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  12.2k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  12.2k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 12.0k, False: 145]
  |  |  ------------------
  ------------------
                  if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   40|  24.2k|#define isfinalized(u)		((u)->marked & LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|  12.1k|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  |  |  |  Branch (40:25): [True: 6.54k, False: 5.60k]
  |  |  |  Branch (40:27): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (147:25): [True: 59, False: 86]
  ------------------
  148|  6.63k|      p = &o->gch.nextgc;  /* Nothing to do. */
  149|  6.63k|    } else if (!lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc)) {
  ------------------
  |  |   20|  11.2k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 0, False: 5.60k]
  |  |  |  Branch (20:5): [True: 5.60k, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 5.60k]
  |  |  |  Branch (20:28): [True: 5.60k, False: 0]
  |  |  ------------------
  |  |   21|  11.2k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|  5.60k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|  5.60k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|  5.60k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 5.60k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (149:16): [True: 0, False: 5.60k]
  ------------------
  150|      0|      markfinalized(o);  /* Done, as there's no __gc metamethod. */
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  151|      0|      p = &o->gch.nextgc;
  152|  5.60k|    } else {  /* Otherwise move userdata to be finalized to mmudata list. */
  153|  5.60k|      m += sizeudata(gco2ud(o));
  ------------------
  |  |  343|  11.2k|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  |  |  ------------------
  |  |  |  Branch (343:47): [True: 5.60k, False: 0]
  |  |  ------------------
  ------------------
  154|  5.60k|      markfinalized(o);
  ------------------
  |  |   46|  5.60k|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|  5.60k|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  155|  5.60k|      *p = o->gch.nextgc;
  156|  5.60k|      if (gcref(g->gc.mmudata)) {  /* Link to end of mmudata list. */
  ------------------
  |  |   67|  5.60k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 5.60k]
  |  |  ------------------
  ------------------
  157|      0|	GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  158|      0|	setgcrefr(o->gch.nextgc, root->gch.nextgc);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  159|      0|	setgcref(root->gch.nextgc, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  160|      0|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  161|  5.60k|      } else {  /* Create circular list. */
  162|  5.60k|	setgcref(o->gch.nextgc, o);
  ------------------
  |  |   72|  5.60k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  163|  5.60k|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|  5.60k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  164|  5.60k|      }
  165|  5.60k|    }
  166|  12.2k|  }
  167|  94.0k|  return m;
  168|  94.0k|}
lj_gc_finalize_udata:
  577|  46.0k|{
  578|  50.6k|  while (gcref(G(L)->gc.mmudata) != NULL)
  ------------------
  |  |   67|  50.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (578:10): [True: 4.65k, False: 46.0k]
  ------------------
  579|  4.65k|    gc_finalize(L);
  580|  46.0k|}
lj_gc_finalize_cdata:
  585|  46.0k|{
  586|  46.0k|  global_State *g = G(L);
  ------------------
  |  |  705|  46.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  587|  46.0k|  GCtab *t = tabref(g->gcroot[GCROOT_FFI_FIN]);
  ------------------
  |  |  514|  46.0k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  46.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  588|  46.0k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|  46.0k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  589|  46.0k|  ptrdiff_t i;
  590|  46.0k|  setgcrefnull(t->metatable);  /* Mark finalizer table as disabled. */
  ------------------
  |  |   76|  46.0k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  591|   138k|  for (i = (ptrdiff_t)t->hmask; i >= 0; i--)
  ------------------
  |  Branch (591:33): [True: 92.0k, False: 46.0k]
  ------------------
  592|  92.0k|    if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  782|   184k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
                  if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  799|  46.0k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  46.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  46.0k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 46.0k]
  |  |  ------------------
  ------------------
  |  Branch (592:9): [True: 46.0k, False: 46.0k]
  ------------------
  593|      0|      GCobj *o = gcV(&node[i].key);
  ------------------
  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  594|      0|      TValue tmp;
  595|      0|      makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  596|      0|      o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  597|      0|      copyTV(L, &tmp, &node[i].val);
  598|      0|      setnilV(&node[i].val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  599|      0|      gc_call_finalizer(g, L, &tmp, o);
  600|      0|    }
  601|  46.0k|}
lj_gc_freeall:
  606|  46.0k|{
  607|  46.0k|  MSize i, strmask;
  608|       |  /* Free everything, except super-fixed objects (the main thread). */
  609|  46.0k|  g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   27|  46.0k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  46.0k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  46.0k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
                g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   25|  46.0k|#define LJ_GC_SFIXED	0x40
  ------------------
  610|  46.0k|  gc_fullsweep(g, &g->gc.root);
  ------------------
  |  |  401|  46.0k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  ------------------
  611|  46.0k|  strmask = g->str.mask;
  612|  11.9M|  for (i = 0; i <= strmask; i++)  /* Free all string hash chains. */
  ------------------
  |  Branch (612:15): [True: 11.9M, False: 46.0k]
  ------------------
  613|  11.9M|    gc_sweepstr(g, &g->str.tab[i]);
  614|  46.0k|}
lj_gc_step:
  729|  17.3k|{
  730|  17.3k|  global_State *g = G(L);
  ------------------
  |  |  705|  17.3k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.3k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  731|  17.3k|  GCSize lim;
  732|  17.3k|  int32_t ostate = g->vmstate;
  733|  17.3k|  setvmstate(g, GC);
  ------------------
  |  |  539|  17.3k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  734|  17.3k|  lim = (GCSTEPSIZE/100) * g->gc.stepmul;
  ------------------
  |  |   32|  17.3k|#define GCSTEPSIZE	1024u
  ------------------
  735|  17.3k|  if (lim == 0)
  ------------------
  |  Branch (735:7): [True: 0, False: 17.3k]
  ------------------
  736|      0|    lim = LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  737|  17.3k|  if (g->gc.total > g->gc.threshold)
  ------------------
  |  Branch (737:7): [True: 13.3k, False: 3.97k]
  ------------------
  738|  13.3k|    g->gc.debt += g->gc.total - g->gc.threshold;
  739|   641k|  do {
  740|   641k|    lim -= (GCSize)gc_onestep(L);
  741|   641k|    if (g->gc.state == GCSpause) {
  ------------------
  |  Branch (741:9): [True: 1.41k, False: 640k]
  ------------------
  742|  1.41k|      g->gc.threshold = (g->gc.estimate/100) * g->gc.pause;
  743|  1.41k|      g->vmstate = ostate;
  744|  1.41k|      return 1;  /* Finished a GC cycle. */
  745|  1.41k|    }
  746|   641k|  } while (sizeof(lim) == 8 ? ((int64_t)lim > 0) : ((int32_t)lim > 0));
  ------------------
  |  Branch (746:12): [Folded - Ignored]
  |  Branch (746:12): [True: 624k, False: 15.9k]
  ------------------
  747|  15.9k|  if (g->gc.debt < GCSTEPSIZE) {
  ------------------
  |  |   32|  15.9k|#define GCSTEPSIZE	1024u
  ------------------
  |  Branch (747:7): [True: 7.31k, False: 8.62k]
  ------------------
  748|  7.31k|    g->gc.threshold = g->gc.total + GCSTEPSIZE;
  ------------------
  |  |   32|  7.31k|#define GCSTEPSIZE	1024u
  ------------------
  749|  7.31k|    g->vmstate = ostate;
  750|  7.31k|    return -1;
  751|  8.62k|  } else {
  752|  8.62k|    g->gc.debt -= GCSTEPSIZE;
  ------------------
  |  |   32|  8.62k|#define GCSTEPSIZE	1024u
  ------------------
  753|  8.62k|    g->gc.threshold = g->gc.total;
  754|  8.62k|    g->vmstate = ostate;
  755|  8.62k|    return 0;
  756|  8.62k|  }
  757|  15.9k|}
lj_mem_realloc:
  870|  4.88M|{
  871|  4.88M|  global_State *g = G(L);
  ------------------
  |  |  705|  4.88M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  4.88M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  872|  4.88M|  lj_assertG((osz == 0) == (p == NULL), "realloc API violation");
  ------------------
  |  |  364|  4.88M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.88M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.88M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.88M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  873|  4.88M|  p = g->allocf(g->allocd, p, osz, nsz);
  874|  4.88M|  if (p == NULL && nsz > 0)
  ------------------
  |  Branch (874:7): [True: 650, False: 4.88M]
  |  Branch (874:20): [True: 0, False: 650]
  ------------------
  875|      0|    lj_err_mem(L);
  876|  4.88M|  lj_assertG((nsz == 0) == (p == NULL), "allocf API violation");
  ------------------
  |  |  364|  4.88M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.88M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.88M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.88M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  877|  4.88M|  lj_assertG(checkptrGC(p),
  ------------------
  |  |  364|  4.88M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.77M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.88M, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.88M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  878|  4.88M|	     "allocated memory address %p outside required range", p);
  879|  4.88M|  g->gc.total = (g->gc.total - osz) + nsz;
  880|  4.88M|  return p;
  881|  4.88M|}
lj_mem_newgco:
  885|   889k|{
  886|   889k|  global_State *g = G(L);
  ------------------
  |  |  705|   889k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   889k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  887|   889k|  GCobj *o = (GCobj *)g->allocf(g->allocd, NULL, 0, size);
  888|   889k|  if (o == NULL)
  ------------------
  |  Branch (888:7): [True: 0, False: 889k]
  ------------------
  889|      0|    lj_err_mem(L);
  890|   889k|  lj_assertG(checkptrGC(o),
  ------------------
  |  |  364|   889k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.77M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 889k, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|   889k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  891|   889k|	     "allocated memory address %p outside required range", o);
  892|   889k|  g->gc.total += size;
  893|   889k|  setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|   889k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  894|   889k|  setgcref(g->gc.root, o);
  ------------------
  |  |   72|   889k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  895|   889k|  newwhite(g, o);
  ------------------
  |  |   40|   889k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|   889k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   889k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   889k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   889k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   889k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  896|   889k|  return o;
  897|   889k|}
lj_mem_grow:
  901|   173k|{
  902|   173k|  MSize sz = (*szp) << 1;
  903|   173k|  if (sz < LJ_MIN_VECSZ)
  ------------------
  |  |   81|   173k|#define LJ_MIN_VECSZ	8		/* Min. size for growable vectors. */
  ------------------
  |  Branch (903:7): [True: 55.5k, False: 117k]
  ------------------
  904|  55.5k|    sz = LJ_MIN_VECSZ;
  ------------------
  |  |   81|  55.5k|#define LJ_MIN_VECSZ	8		/* Min. size for growable vectors. */
  ------------------
  905|   173k|  if (sz > lim)
  ------------------
  |  Branch (905:7): [True: 0, False: 173k]
  ------------------
  906|      0|    sz = lim;
  907|   173k|  p = lj_mem_realloc(L, p, (*szp)*esz, sz*esz);
  908|   173k|  *szp = sz;
  909|   173k|  return p;
  910|   173k|}
lj_gc.c:gc_finalize:
  535|  5.60k|{
  536|  5.60k|  global_State *g = G(L);
  ------------------
  |  |  705|  5.60k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  5.60k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  537|  5.60k|  GCobj *o = gcnext(gcref(g->gc.mmudata));
  ------------------
  |  |   90|  5.60k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  5.60k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  538|  5.60k|  cTValue *mo;
  539|  5.60k|  lj_assertG(tvref(g->jit_base) == NULL, "finalizer called on trace");
  ------------------
  |  |  364|  5.60k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  5.60k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 5.60k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.60k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  540|       |  /* Unchain from list of userdata to be finalized. */
  541|  5.60k|  if (o == gcref(g->gc.mmudata))
  ------------------
  |  |   67|  5.60k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (541:7): [True: 5.60k, False: 0]
  ------------------
  542|  5.60k|    setgcrefnull(g->gc.mmudata);
  ------------------
  |  |   76|  5.60k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  543|      0|  else
  544|      0|    setgcrefr(gcref(g->gc.mmudata)->gch.nextgc, o->gch.nextgc);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  545|  5.60k|#if LJ_HASFFI
  546|  5.60k|  if (o->gch.gct == ~LJ_TCDATA) {
  ------------------
  |  |  270|  5.60k|#define LJ_TCDATA		(~10u)
  ------------------
  |  Branch (546:7): [True: 0, False: 5.60k]
  ------------------
  547|      0|    TValue tmp, *tv;
  548|       |    /* Add cdata back to the GC list and make it white. */
  549|      0|    setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  550|      0|    setgcref(g->gc.root, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  551|      0|    makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  552|      0|    o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  553|       |    /* Resolve finalizer. */
  554|      0|    setcdataV(L, &tmp, gco2cd(o));
  ------------------
  |  |  770|      0|#define gco2cd(o)	check_exp((o)->gch.gct == ~LJ_TCDATA, &(o)->cd)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  555|      0|    tv = lj_tab_set(L, tabref(g->gcroot[GCROOT_FFI_FIN]), &tmp);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  556|      0|    if (!tvisnil(tv)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (556:9): [True: 0, False: 0]
  ------------------
  557|      0|      g->gc.nocdatafin = 0;
  558|      0|      copyTV(L, &tmp, tv);
  559|      0|      setnilV(tv);  /* Clear entry in finalizer table. */
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  560|      0|      gc_call_finalizer(g, L, &tmp, o);
  561|      0|    }
  562|      0|    return;
  563|      0|  }
  564|  5.60k|#endif
  565|       |  /* Add userdata back to the main userdata list and make it white. */
  566|  5.60k|  setgcrefr(o->gch.nextgc, mainthread(g)->nextgc);
  ------------------
  |  |   77|  5.60k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  567|  5.60k|  setgcref(mainthread(g)->nextgc, o);
  ------------------
  |  |   72|  5.60k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  568|  5.60k|  makewhite(g, o);
  ------------------
  |  |   42|  5.60k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|  5.60k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  5.60k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  5.60k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  5.60k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  5.60k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  5.60k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  5.60k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  5.60k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  5.60k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  569|       |  /* Resolve the __gc metamethod. */
  570|  5.60k|  mo = lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc);
  ------------------
  |  |   20|  11.2k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 0, False: 5.60k]
  |  |  |  Branch (20:5): [True: 5.60k, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 5.60k]
  |  |  |  Branch (20:28): [True: 5.60k, False: 0]
  |  |  ------------------
  |  |   21|  11.2k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|  5.60k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|  5.60k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|  5.60k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 5.60k, False: 0]
  |  |  ------------------
  ------------------
  571|  5.60k|  if (mo)
  ------------------
  |  Branch (571:7): [True: 5.60k, False: 0]
  ------------------
  572|  5.60k|    gc_call_finalizer(g, L, mo, o);
  573|  5.60k|}
lj_gc.c:gc_call_finalizer:
  505|  5.60k|{
  506|       |  /* Save and restore lots of state around the __gc callback. */
  507|  5.60k|  uint8_t oldh = hook_save(g);
  ------------------
  |  |  684|  5.60k|#define hook_save(g)		((g)->hookmask & ~HOOK_EVENTMASK)
  |  |  ------------------
  |  |  |  |  672|  5.60k|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  508|  5.60k|  GCSize oldt = g->gc.threshold;
  509|  5.60k|  int errcode;
  510|  5.60k|  TValue *top;
  511|  5.60k|  lj_trace_abort(g);
  ------------------
  |  |   45|  5.60k|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|  5.60k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  5.60k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  5.60k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  512|  5.60k|  hook_entergc(g);  /* Disable hooks and new traces during __gc. */
  ------------------
  |  |  681|  5.60k|  ((g)->hookmask = ((g)->hookmask | (HOOK_ACTIVE|HOOK_GC)) & ~HOOK_PROFILE)
  |  |  ------------------
  |  |  |  |  673|  5.60k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  |  |                 ((g)->hookmask = ((g)->hookmask | (HOOK_ACTIVE|HOOK_GC)) & ~HOOK_PROFILE)
  |  |  ------------------
  |  |  |  |  676|  5.60k|#define HOOK_GC			0x40
  |  |  ------------------
  |  |                 ((g)->hookmask = ((g)->hookmask | (HOOK_ACTIVE|HOOK_GC)) & ~HOOK_PROFILE)
  |  |  ------------------
  |  |  |  |  677|  5.60k|#define HOOK_PROFILE		0x80
  |  |  ------------------
  ------------------
  513|  5.60k|  if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  598|  11.2k|#define LJ_HASPROFILE		1
  |  |  ------------------
  |  |  |  Branch (598:24): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  677|  5.60k|#define HOOK_PROFILE		0x80
  ------------------
  |  Branch (513:24): [True: 0, False: 5.60k]
  ------------------
  514|  5.60k|  g->gc.threshold = LJ_MAX_MEM;  /* Prevent GC steps. */
  ------------------
  |  |   52|  5.60k|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|  5.60k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|  5.60k|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  515|  5.60k|  top = L->top;
  516|  5.60k|  copyTV(L, top++, mo);
  517|  5.60k|  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|  5.60k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|  5.60k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  518|  5.60k|  setgcV(L, top, o, ~o->gch.gct);
  519|  5.60k|  L->top = top+1;
  520|  5.60k|  errcode = lj_vm_pcall(L, top, 1+0, -1);  /* Stack: |mo|o| -> | */
  521|  5.60k|  hook_restore(g, oldh);
  ------------------
  |  |  686|  5.60k|  ((g)->hookmask = ((g)->hookmask & HOOK_EVENTMASK) | (h))
  |  |  ------------------
  |  |  |  |  672|  5.60k|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  522|  5.60k|  if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  598|  11.2k|#define LJ_HASPROFILE		1
  |  |  ------------------
  |  |  |  Branch (598:24): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  677|  5.60k|#define HOOK_PROFILE		0x80
  ------------------
  |  Branch (522:24): [True: 0, False: 5.60k]
  ------------------
  523|  5.60k|  g->gc.threshold = oldt;  /* Restore GC threshold. */
  524|  5.60k|  if (errcode) {
  ------------------
  |  Branch (524:7): [True: 0, False: 5.60k]
  ------------------
  525|      0|    ptrdiff_t errobj = savestack(L, L->top-1);  /* Stack may be resized. */
  ------------------
  |  |   14|      0|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  526|      0|    lj_vmevent_send(L, ERRFIN,
  ------------------
  |  |   39|      0|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|      0|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 0]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
  527|      0|      copyTV(L, L->top++, restorestack(L, errobj));
  528|      0|    );
  529|      0|    L->top--;
  530|      0|  }
  531|  5.60k|}
lj_gc.c:gc_sweep:
  405|  97.9k|{
  406|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  407|  97.9k|  int ow = otherwhite(g);
  ------------------
  |  |   36|  97.9k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  97.9k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  97.9k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  97.9k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  408|  97.9k|  GCobj *o;
  409|  1.15M|  while ((o = gcref(*p)) != NULL && lim-- > 0) {
  ------------------
  |  |   67|  1.15M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (409:10): [True: 1.06M, False: 94.9k]
  |  Branch (409:37): [True: 1.06M, False: 3.08k]
  ------------------
  410|  1.06M|    if (o->gch.gct == ~LJ_TTHREAD)  /* Need to sweep open upvalues, too. */
  ------------------
  |  |  266|  1.06M|#define LJ_TTHREAD		(~6u)
  ------------------
  |  Branch (410:9): [True: 47.4k, False: 1.01M]
  ------------------
  411|  47.4k|      gc_fullsweep(g, &gco2th(o)->openupval);
  ------------------
  |  |  401|  94.9k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  |  |  ------------------
  |  |  |  Branch (401:41): [True: 47.4k, False: 0]
  |  |  ------------------
  ------------------
  412|  1.06M|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|  1.06M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  1.06M|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  1.06M|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (412:9): [True: 167k, False: 894k]
  ------------------
  413|   167k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|   167k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   167k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 167k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   167k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  414|   167k|		 "sweep of undead object");
  415|   167k|      makewhite(g, o);  /* Value is alive, change to the current white. */
  ------------------
  |  |   42|   167k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|   167k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   167k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   167k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   167k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|   167k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   167k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   167k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   167k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   167k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  416|   167k|      p = &o->gch.nextgc;
  417|   894k|    } else {  /* Otherwise value is dead, free it. */
  418|   894k|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|   894k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.75M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 30.1k, False: 864k]
  |  |  |  |  |  Branch (355:5): [True: 864k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   894k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  419|   894k|		 "sweep of unlive object");
  420|   894k|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|   894k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  421|   894k|      if (o == gcref(g->gc.root))
  ------------------
  |  |   67|   894k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (421:11): [True: 0, False: 894k]
  ------------------
  422|      0|	setgcrefr(g->gc.root, o->gch.nextgc);  /* Adjust list anchor. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  423|   894k|      gc_freefunc[o->gch.gct - ~LJ_TSTR](g, o);
  ------------------
  |  |  264|   894k|#define LJ_TSTR			(~4u)
  ------------------
  424|   894k|    }
  425|  1.06M|  }
  426|  97.9k|  return p;
  427|  97.9k|}
lj_gc.c:gc_sweepstr:
  431|  12.3M|{
  432|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  433|  12.3M|  int ow = otherwhite(g);
  ------------------
  |  |   36|  12.3M|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  12.3M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  12.3M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  12.3M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  434|  12.3M|  uintptr_t u = gcrefu(*chain);
  ------------------
  |  |   69|  12.3M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  435|  12.3M|  GCRef q;
  436|  12.3M|  GCRef *p = &q;
  437|  12.3M|  GCobj *o;
  438|  12.3M|  setgcrefp(q, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  12.3M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  439|  16.2M|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  16.2M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (439:10): [True: 3.83M, False: 12.3M]
  ------------------
  440|  3.83M|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|  3.83M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  3.83M|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  3.83M|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (440:9): [True: 276k, False: 3.55M]
  ------------------
  441|   276k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|   276k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   413k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 139k, False: 136k]
  |  |  |  |  |  Branch (355:5): [True: 136k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   276k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  442|   276k|		 "sweep of undead string");
  443|   276k|      makewhite(g, o);  /* String is alive, change to the current white. */
  ------------------
  |  |   42|   276k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|   276k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   276k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   276k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   276k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|   276k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   276k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   276k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   276k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   276k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  444|   276k|      p = &o->gch.nextgc;
  445|  3.55M|    } else {  /* Otherwise string is dead, free it. */
  446|  3.55M|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|  3.55M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  7.08M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 28.5k, False: 3.52M]
  |  |  |  |  |  Branch (355:5): [True: 3.52M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.55M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  447|  3.55M|		 "sweep of unlive string");
  448|  3.55M|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|  3.55M|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  449|  3.55M|      lj_str_free(g, gco2str(o));
  ------------------
  |  |  765|  3.55M|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  3.55M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.55M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.55M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.55M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.55M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  450|  3.55M|    }
  451|  3.83M|  }
  452|  12.3M|  setgcrefp(*chain, (gcrefu(q) | (u & 1)));
  ------------------
  |  |   75|  12.3M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  453|  12.3M|}
lj_gc.c:gc_onestep:
  656|   641k|{
  657|   641k|  global_State *g = G(L);
  ------------------
  |  |  705|   641k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   641k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  658|   641k|  switch (g->gc.state) {
  659|  2.98k|  case GCSpause:
  ------------------
  |  Branch (659:3): [True: 2.98k, False: 638k]
  ------------------
  660|  2.98k|    gc_mark_start(g);  /* Start a new GC cycle by marking all GC roots. */
  661|  2.98k|    return 0;
  662|   164k|  case GCSpropagate:
  ------------------
  |  Branch (662:3): [True: 164k, False: 477k]
  ------------------
  663|   164k|    if (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|   164k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (663:9): [True: 162k, False: 2.00k]
  ------------------
  664|   162k|      return propagatemark(g);  /* Propagate one gray object. */
  665|  2.00k|    g->gc.state = GCSatomic;  /* End of mark phase. */
  666|  2.00k|    return 0;
  667|  2.00k|  case GCSatomic:
  ------------------
  |  Branch (667:3): [True: 2.00k, False: 639k]
  ------------------
  668|  2.00k|    if (tvref(g->jit_base))  /* Don't run atomic phase on trace. */
  ------------------
  |  |  217|  2.00k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  2.00k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 2.00k]
  |  |  ------------------
  ------------------
  669|      0|      return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  670|  2.00k|    atomic(g, L);
  671|  2.00k|    g->gc.state = GCSsweepstring;  /* Start of sweep phase. */
  672|  2.00k|    g->gc.sweepstr = 0;
  673|  2.00k|    return 0;
  674|   465k|  case GCSsweepstring: {
  ------------------
  |  Branch (674:3): [True: 465k, False: 175k]
  ------------------
  675|   465k|    GCSize old = g->gc.total;
  676|   465k|    gc_sweepstr(g, &g->str.tab[g->gc.sweepstr++]);  /* Sweep one chain. */
  677|   465k|    if (g->gc.sweepstr > g->str.mask)
  ------------------
  |  Branch (677:9): [True: 1.52k, False: 464k]
  ------------------
  678|  1.52k|      g->gc.state = GCSsweep;  /* All string hash chains sweeped. */
  679|   465k|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|   465k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   465k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 465k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   465k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  680|   465k|    g->gc.estimate -= old - g->gc.total;
  681|   465k|    return GCSWEEPCOST;
  ------------------
  |  |   34|   465k|#define GCSWEEPCOST	10
  ------------------
  682|   465k|    }
  683|  4.52k|  case GCSsweep: {
  ------------------
  |  Branch (683:3): [True: 4.52k, False: 637k]
  ------------------
  684|  4.52k|    GCSize old = g->gc.total;
  685|  4.52k|    setmref(g->gc.sweep, gc_sweep(g, mref(g->gc.sweep, GCRef), GCSWEEPMAX));
  ------------------
  |  |   39|  4.52k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  686|  4.52k|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|  4.52k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.52k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.52k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.52k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  687|  4.52k|    g->gc.estimate -= old - g->gc.total;
  688|  4.52k|    if (gcref(*mref(g->gc.sweep, GCRef)) == NULL) {
  ------------------
  |  |   67|  4.52k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (688:9): [True: 1.43k, False: 3.08k]
  ------------------
  689|  1.43k|      if (g->str.num <= (g->str.mask >> 2) && g->str.mask > LJ_MIN_STRTAB*2-1)
  ------------------
  |  |   79|      8|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  |  Branch (689:11): [True: 8, False: 1.43k]
  |  Branch (689:47): [True: 0, False: 8]
  ------------------
  690|      0|	lj_str_resize(L, g->str.mask >> 1);  /* Shrink string table. */
  691|  1.43k|      if (gcref(g->gc.mmudata)) {  /* Need any finalizations? */
  ------------------
  |  |   67|  1.43k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 964, False: 474]
  |  |  ------------------
  ------------------
  692|    964|	g->gc.state = GCSfinalize;
  693|    964|#if LJ_HASFFI
  694|    964|	g->gc.nocdatafin = 1;
  695|    964|#endif
  696|    964|      } else {  /* Otherwise skip this phase to help the JIT. */
  697|    474|	g->gc.state = GCSpause;  /* End of GC cycle. */
  698|    474|	g->gc.debt = 0;
  699|    474|      }
  700|  1.43k|    }
  701|  4.52k|    return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   33|  4.52k|#define GCSWEEPMAX	40
  ------------------
                  return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   34|  4.52k|#define GCSWEEPCOST	10
  ------------------
  702|  4.52k|    }
  703|  1.88k|  case GCSfinalize:
  ------------------
  |  Branch (703:3): [True: 1.88k, False: 639k]
  ------------------
  704|  1.88k|    if (gcref(g->gc.mmudata) != NULL) {
  ------------------
  |  |   67|  1.88k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (704:9): [True: 947, False: 940]
  ------------------
  705|    947|      GCSize old = g->gc.total;
  706|    947|      if (tvref(g->jit_base))  /* Don't call finalizers on trace. */
  ------------------
  |  |  217|    947|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    947|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 947]
  |  |  ------------------
  ------------------
  707|      0|	return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  708|    947|      gc_finalize(L);  /* Finalize one userdata object. */
  709|    947|      if (old >= g->gc.total && g->gc.estimate > old - g->gc.total)
  ------------------
  |  Branch (709:11): [True: 878, False: 69]
  |  Branch (709:33): [True: 878, False: 0]
  ------------------
  710|    878|	g->gc.estimate -= old - g->gc.total;
  711|    947|      if (g->gc.estimate > GCFINALIZECOST)
  ------------------
  |  |   35|    947|#define GCFINALIZECOST	100
  ------------------
  |  Branch (711:11): [True: 947, False: 0]
  ------------------
  712|    947|	g->gc.estimate -= GCFINALIZECOST;
  ------------------
  |  |   35|    947|#define GCFINALIZECOST	100
  ------------------
  713|    947|      return GCFINALIZECOST;
  ------------------
  |  |   35|    947|#define GCFINALIZECOST	100
  ------------------
  714|    947|    }
  715|    940|#if LJ_HASFFI
  716|    940|    if (!g->gc.nocdatafin) lj_tab_rehash(L, tabref(g->gcroot[GCROOT_FFI_FIN]));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (716:9): [True: 0, False: 940]
  ------------------
  717|    940|#endif
  718|    940|    g->gc.state = GCSpause;  /* End of GC cycle. */
  719|    940|    g->gc.debt = 0;
  720|    940|    return 0;
  721|      0|  default:
  ------------------
  |  Branch (721:3): [True: 0, False: 641k]
  ------------------
  722|      0|    lj_assertG(0, "bad GC state");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  723|      0|    return 0;
  724|   641k|  }
  725|   641k|}
lj_gc.c:gc_mark_start:
  103|  2.98k|{
  104|  2.98k|  setgcrefnull(g->gc.gray);
  ------------------
  |  |   76|  2.98k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  105|  2.98k|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|  2.98k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  106|  2.98k|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|  2.98k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  107|  2.98k|  gc_markobj(g, mainthread(g));
  ------------------
  |  |   52|  2.98k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  2.98k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  2.98k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  2.98k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  2.98k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 2.98k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  2.98k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  108|  2.98k|  gc_markobj(g, tabref(mainthread(g)->env));
  ------------------
  |  |   52|  2.98k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  2.98k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  2.98k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  2.98k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  2.98k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 2.98k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  2.98k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  109|  2.98k|  gc_marktv(g, &g->registrytv);
  ------------------
  |  |   46|  2.98k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  2.98k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  5.96k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 2.98k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 2.98k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.98k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  2.98k|	       "TValue and GC type mismatch"); \
  |  |   48|  2.98k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  2.98k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  5.96k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  2.98k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  2.98k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  2.98k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  2.98k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  2.98k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  2.98k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 2.98k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  5.96k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  2.98k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  2.98k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  2.98k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 2.98k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 2.98k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  2.98k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  2.98k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  2.98k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  2.98k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.98k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  2.98k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  110|  2.98k|  gc_mark_gcroot(g);
  111|  2.98k|  g->gc.state = GCSpropagate;
  112|  2.98k|}
lj_gc.c:gc_mark_gcroot:
   94|  4.99k|{
   95|  4.99k|  ptrdiff_t i;
   96|   199k|  for (i = 0; i < GCROOT_MAX; i++)
  ------------------
  |  Branch (96:15): [True: 194k, False: 4.99k]
  ------------------
   97|   194k|    if (gcref(g->gcroot[i]) != NULL)
  ------------------
  |  |   67|   194k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (97:9): [True: 118k, False: 76.1k]
  ------------------
   98|   118k|      gc_markobj(g, gcref(g->gcroot[i]));
  ------------------
  |  |   52|   118k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   118k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   118k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   118k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   118k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 70.8k, False: 47.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  70.8k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   99|  4.99k|}
lj_gc.c:propagatemark:
  324|   194k|{
  325|   194k|  GCobj *o = gcref(g->gc.gray);
  ------------------
  |  |   67|   194k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  326|   194k|  int gct = o->gch.gct;
  327|   194k|  lj_assertG(isgray(o), "propagation of non-gray object");
  ------------------
  |  |  364|   194k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   194k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 194k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   194k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  328|   194k|  gray2black(o);
  ------------------
  |  |   39|   194k|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|   194k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  329|   194k|  setgcrefr(g->gc.gray, o->gch.gclist);  /* Remove from gray list. */
  ------------------
  |  |   77|   194k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  330|   194k|  if (LJ_LIKELY(gct == ~LJ_TTAB)) {
  ------------------
  |  |  145|   194k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 129k, False: 65.5k]
  |  |  ------------------
  ------------------
  331|   129k|    GCtab *t = gco2tab(o);
  ------------------
  |  |  771|   129k|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   129k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   129k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   129k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 129k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   129k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  332|   129k|    if (gc_traverse_tab(g, t) > 0)
  ------------------
  |  Branch (332:9): [True: 0, False: 129k]
  ------------------
  333|      0|      black2gray(o);  /* Keep weak tables gray. */
  ------------------
  |  |   44|      0|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  334|   129k|    return sizeof(GCtab) + sizeof(TValue) * t->asize +
  335|   129k|			   (t->hmask ? sizeof(Node) * (t->hmask + 1) : 0);
  ------------------
  |  Branch (335:8): [True: 33.9k, False: 95.1k]
  ------------------
  336|   129k|  } else if (LJ_LIKELY(gct == ~LJ_TFUNC)) {
  ------------------
  |  |  145|  65.5k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 51.0k, False: 14.4k]
  |  |  ------------------
  ------------------
  337|  51.0k|    GCfunc *fn = gco2func(o);
  ------------------
  |  |  769|  51.0k|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  ------------------
  |  |  |  |  367|  51.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  51.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  51.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 51.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  51.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  338|      0|    gc_traverse_func(g, fn);
  339|  51.0k|    return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|  51.0k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  51.0k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 51.0k]
  |  |  ------------------
  ------------------
                  return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|      0|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  340|  51.0k|			   sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|  51.0k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  341|  51.0k|  } else if (LJ_LIKELY(gct == ~LJ_TPROTO)) {
  ------------------
  |  |  145|  14.4k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 9.65k, False: 4.82k]
  |  |  ------------------
  ------------------
  342|  9.65k|    GCproto *pt = gco2pt(o);
  ------------------
  |  |  768|  9.65k|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|  9.65k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  9.65k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  9.65k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 9.65k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  9.65k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  343|      0|    gc_traverse_proto(g, pt);
  344|  9.65k|    return pt->sizept;
  345|  9.65k|  } else if (LJ_LIKELY(gct == ~LJ_TTHREAD)) {
  ------------------
  |  |  145|  4.82k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 4.82k, False: 0]
  |  |  ------------------
  ------------------
  346|  4.82k|    lua_State *th = gco2th(o);
  ------------------
  |  |  767|  4.82k|#define gco2th(o)	check_exp((o)->gch.gct == ~LJ_TTHREAD, &(o)->th)
  |  |  ------------------
  |  |  |  |  367|  4.82k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  4.82k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  4.82k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4.82k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  4.82k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  347|  4.82k|    setgcrefr(th->gclist, g->gc.grayagain);
  ------------------
  |  |   77|  4.82k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  348|  4.82k|    setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|  4.82k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  349|  4.82k|    black2gray(o);  /* Threads are never black. */
  ------------------
  |  |   44|  4.82k|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  4.82k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  350|  4.82k|    gc_traverse_thread(g, th);
  351|  4.82k|    return sizeof(lua_State) + sizeof(TValue) * th->stacksize;
  352|  4.82k|  } else {
  353|      0|#if LJ_HASJIT
  354|      0|    GCtrace *T = gco2trace(o);
  ------------------
  |  |  296|      0|#define gco2trace(o)	check_exp((o)->gch.gct == ~LJ_TTRACE, (GCtrace *)(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  355|      0|    gc_traverse_trace(g, T);
  356|      0|    return ((sizeof(GCtrace)+7)&~7) + (T->nins-T->nk)*sizeof(IRIns) +
  357|      0|	   T->nsnap*sizeof(SnapShot) + T->nsnapmap*sizeof(SnapEntry);
  358|       |#else
  359|       |    lj_assertG(0, "bad GC type %d", gct);
  360|       |    return 0;
  361|       |#endif
  362|      0|  }
  363|   194k|}
lj_gc.c:gc_traverse_tab:
  174|   129k|{
  175|   129k|  int weak = 0;
  176|   129k|  cTValue *mode;
  177|   129k|  GCtab *mt = tabref(t->metatable);
  ------------------
  |  |  514|   129k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   129k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  178|   129k|  if (mt)
  ------------------
  |  Branch (178:7): [True: 2.98k, False: 126k]
  ------------------
  179|  2.98k|    gc_markobj(g, mt);
  ------------------
  |  |   52|  2.98k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  2.98k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  2.98k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  2.98k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  2.98k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 2.98k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  180|   129k|  mode = lj_meta_fastg(g, mt, MM_mode);
  ------------------
  |  |   20|   129k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 126k, False: 2.98k]
  |  |  |  Branch (20:26): [True: 0, False: 2.98k]
  |  |  ------------------
  |  |   21|  2.98k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|  2.98k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|  2.98k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|  2.98k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  181|   129k|  if (mode && tvisstr(mode)) {  /* Valid __mode field? */
  ------------------
  |  |  795|  2.98k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  2.98k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  2.98k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 2.98k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (181:7): [True: 2.98k, False: 126k]
  ------------------
  182|  2.98k|    const char *modestr = strVdata(mode);
  ------------------
  |  |  318|  2.98k|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|  5.96k|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 2.98k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|    int c;
  184|  5.96k|    while ((c = *modestr++)) {
  ------------------
  |  Branch (184:12): [True: 2.98k, False: 2.98k]
  ------------------
  185|  2.98k|      if (c == 'k') weak |= LJ_GC_WEAKKEY;
  ------------------
  |  |   21|  2.98k|#define LJ_GC_WEAKKEY	0x08
  ------------------
  |  Branch (185:11): [True: 2.98k, False: 0]
  ------------------
  186|      0|      else if (c == 'v') weak |= LJ_GC_WEAKVAL;
  ------------------
  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (186:16): [True: 0, False: 0]
  ------------------
  187|  2.98k|    }
  188|  2.98k|    if (weak) {  /* Weak tables are cleared in the atomic phase. */
  ------------------
  |  Branch (188:9): [True: 2.98k, False: 0]
  ------------------
  189|  2.98k|#if LJ_HASFFI
  190|  2.98k|      if (gcref(g->gcroot[GCROOT_FFI_FIN]) == obj2gco(t)) {
  ------------------
  |  |   67|  2.98k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                    if (gcref(g->gcroot[GCROOT_FFI_FIN]) == obj2gco(t)) {
  ------------------
  |  |  775|  2.98k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  |  Branch (190:11): [True: 2.98k, False: 0]
  ------------------
  191|  2.98k|	weak = (int)(~0u & ~LJ_GC_WEAKVAL);
  ------------------
  |  |   22|  2.98k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  192|  2.98k|      } else
  193|      0|#endif
  194|      0|      {
  195|      0|	t->marked = (uint8_t)((t->marked & ~LJ_GC_WEAK) | weak);
  ------------------
  |  |   29|      0|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|      0|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  196|      0|	setgcrefr(t->gclist, g->gc.weak);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  197|      0|	setgcref(g->gc.weak, obj2gco(t));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  198|      0|      }
  199|  2.98k|    }
  200|  2.98k|  }
  201|   129k|  if (weak == LJ_GC_WEAK)  /* Nothing to mark if both keys/values are weak. */
  ------------------
  |  |   29|   129k|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|   129k|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|   129k|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  |  Branch (201:7): [True: 0, False: 129k]
  ------------------
  202|      0|    return 1;
  203|   129k|  if (!(weak & LJ_GC_WEAKVAL)) {  /* Mark array part. */
  ------------------
  |  |   22|   129k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (203:7): [True: 129k, False: 0]
  ------------------
  204|   129k|    MSize i, asize = t->asize;
  205|   537k|    for (i = 0; i < asize; i++)
  ------------------
  |  Branch (205:17): [True: 408k, False: 129k]
  ------------------
  206|   408k|      gc_marktv(g, arrayslot(t, i));
  ------------------
  |  |   46|   408k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|   408k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   408k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 408k, False: 458]
  |  |  |  |  |  |  |  Branch (355:5): [True: 458, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   408k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|   408k|	       "TValue and GC type mismatch"); \
  |  |   48|   408k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|   408k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   816k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|   408k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   408k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   408k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|   408k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   408k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   408k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 458, False: 408k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|    916|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|    458|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|    458|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|    458|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 5, False: 453]
  |  |  |  |  |  |  |  Branch (32:22): [True: 458, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      5|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      5|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      5|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      5|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      5|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  207|   129k|  }
  208|   129k|  if (t->hmask > 0) {  /* Mark hash part. */
  ------------------
  |  Branch (208:7): [True: 33.9k, False: 95.1k]
  ------------------
  209|  33.9k|    Node *node = noderef(t->node);
  ------------------
  |  |  515|  33.9k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  33.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  210|  33.9k|    MSize i, hmask = t->hmask;
  211|  1.16M|    for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (211:17): [True: 1.12M, False: 33.9k]
  ------------------
  212|  1.12M|      Node *n = &node[i];
  213|  1.12M|      if (!tvisnil(&n->val)) {  /* Mark non-empty slot. */
  ------------------
  |  |  782|  1.12M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (213:11): [True: 585k, False: 543k]
  ------------------
  214|   585k|	lj_assertG(!tvisnil(&n->key), "mark of nil key in non-empty slot");
  ------------------
  |  |  364|   585k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   585k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 585k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   585k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  215|   585k|	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   21|   585k|#define LJ_GC_WEAKKEY	0x08
  ------------------
              	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   46|   582k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|   582k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.12M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 37.4k, False: 544k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 544k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   582k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|   582k|	       "TValue and GC type mismatch"); \
  |  |   48|   582k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|   582k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  1.16M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|   582k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   582k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   582k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|   582k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   582k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   582k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 544k, False: 37.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  1.08M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|   544k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|   544k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|   544k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 320k, False: 224k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 544k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|   320k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   320k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   320k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   320k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 320k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   320k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (215:6): [True: 582k, False: 2.98k]
  ------------------
  216|   585k|	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   22|   585k|#define LJ_GC_WEAKVAL	0x10
  ------------------
              	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   46|   585k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|   585k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   650k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 519k, False: 65.4k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 65.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   585k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|   585k|	       "TValue and GC type mismatch"); \
  |  |   48|   585k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|   585k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  1.17M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|   585k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   585k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   585k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|   585k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   585k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   585k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 65.4k, False: 519k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   130k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  65.4k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  65.4k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  65.4k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 59.6k, False: 5.80k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 65.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  59.6k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  59.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  59.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  59.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 59.6k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  59.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (216:6): [True: 585k, False: 0]
  ------------------
  217|   585k|      }
  218|  1.12M|    }
  219|  33.9k|  }
  220|   129k|  return weak;
  221|   129k|}
lj_gc.c:gc_traverse_func:
  225|  51.0k|{
  226|  51.0k|  gc_markobj(g, tabref(fn->c.env));
  ------------------
  |  |   52|  51.0k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  51.0k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  51.0k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  51.0k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  51.0k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 51.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  227|  51.0k|  if (isluafunc(fn)) {
  ------------------
  |  |  476|  51.0k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  51.0k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 51.0k]
  |  |  ------------------
  ------------------
  228|      0|    uint32_t i;
  229|      0|    lj_assertG(fn->l.nupvalues <= funcproto(fn)->sizeuv,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  230|      0|	       "function upvalues out of range");
  231|      0|    gc_markobj(g, funcproto(fn));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  232|      0|    for (i = 0; i < fn->l.nupvalues; i++)  /* Mark Lua function upvalues. */
  ------------------
  |  Branch (232:17): [True: 0, False: 0]
  ------------------
  233|      0|      gc_markobj(g, &gcref(fn->l.uvptr[i])->uv);
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  234|  51.0k|  } else {
  235|  51.0k|    uint32_t i;
  236|  51.0k|    for (i = 0; i < fn->c.nupvalues; i++)  /* Mark C function upvalues. */
  ------------------
  |  Branch (236:17): [True: 0, False: 51.0k]
  ------------------
  237|  51.0k|      gc_marktv(g, &fn->c.upvalue[i]);
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  238|  51.0k|  }
  239|  51.0k|}
lj_gc.c:gc_traverse_proto:
  280|  9.65k|{
  281|  9.65k|  ptrdiff_t i;
  282|  9.65k|  gc_mark_str(proto_chunkname(pt));
  ------------------
  |  |   55|  9.65k|#define gc_mark_str(s)		((s)->marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  9.65k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  9.65k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  9.65k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  283|  53.4k|  for (i = -(ptrdiff_t)pt->sizekgc; i < 0; i++)  /* Mark collectable consts. */
  ------------------
  |  Branch (283:37): [True: 43.7k, False: 9.65k]
  ------------------
  284|  43.7k|    gc_markobj(g, proto_kgc(pt, i));
  ------------------
  |  |   52|  43.7k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  87.5k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  43.7k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  43.7k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  43.7k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 11.5k, False: 32.1k]
  |  |  |  |  |  Branch (32:22): [True: 43.7k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  23.1k|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 11.5k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|  9.65k|#if LJ_HASJIT
  286|  9.65k|  if (pt->trace) gc_marktrace(g, pt->trace);
  ------------------
  |  Branch (286:7): [True: 0, False: 9.65k]
  ------------------
  287|  9.65k|#endif
  288|  9.65k|}
lj_gc.c:gc_traverse_thread:
  309|  4.82k|{
  310|  4.82k|  TValue *o, *top = th->top;
  311|  27.0k|  for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  217|  4.82k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  4.82k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  569|  4.82k|#define LJ_FR2			1
  ------------------
  |  Branch (311:39): [True: 22.2k, False: 4.82k]
  ------------------
  312|  22.2k|    gc_marktv(g, o);
  ------------------
  |  |   46|  22.2k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  22.2k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  44.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 22.2k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 22.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  22.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  22.2k|	       "TValue and GC type mismatch"); \
  |  |   48|  22.2k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  22.2k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  44.5k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  22.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  22.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  22.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  22.2k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  22.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  22.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 22.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  44.5k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  22.2k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  22.2k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  22.2k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 13.7k, False: 8.47k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 22.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  13.7k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  13.7k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  13.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  13.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 13.7k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  13.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  313|  4.82k|  if (g->gc.state == GCSatomic) {
  ------------------
  |  Branch (313:7): [True: 2.00k, False: 2.81k]
  ------------------
  314|  2.00k|    top = tvref(th->stack) + th->stacksize;
  ------------------
  |  |  217|  2.00k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  2.00k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  315|  85.5k|    for (; o < top; o++)  /* Clear unmarked slots. */
  ------------------
  |  Branch (315:12): [True: 83.5k, False: 2.00k]
  ------------------
  316|  83.5k|      setnilV(o);
  ------------------
  |  |  872|  83.5k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  317|  2.00k|  }
  318|  4.82k|  gc_markobj(g, tabref(th->env));
  ------------------
  |  |   52|  4.82k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  4.82k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  4.82k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  4.82k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  4.82k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 4.82k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  319|  4.82k|  lj_state_shrinkstack(th, gc_traverse_frames(g, th));
  320|  4.82k|}
lj_gc.c:gc_traverse_frames:
  292|  4.82k|{
  293|  4.82k|  TValue *frame, *top = th->top-1, *bot = tvref(th->stack);
  ------------------
  |  |  217|  4.82k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  4.82k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  294|       |  /* Note: extra vararg frame not skipped, marks function twice (harmless). */
  295|  4.82k|  for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  569|  4.82k|#define LJ_FR2			1
  ------------------
                for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  110|      0|#define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |   77|      0|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (295:28): [True: 0, False: 4.82k]
  ------------------
  296|      0|    GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|      0|    TValue *ftop = frame;
  298|      0|    if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  299|      0|    if (ftop > top) top = ftop;
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|    if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
                  if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (300:9): [Folded - Ignored]
  ------------------
  301|      0|  }
  302|  4.82k|  top++;  /* Correct bias of -1 (frame == base-1). */
  303|  4.82k|  if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|  4.82k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  4.82k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (303:7): [True: 0, False: 4.82k]
  ------------------
  304|  4.82k|  return (MSize)(top - bot);  /* Return minimum needed stack size. */
  305|  4.82k|}
lj_gc.c:gc_traverse_trace:
  256|  2.00k|{
  257|  2.00k|  IRRef ref;
  258|  2.00k|  if (T->traceno == 0) return;
  ------------------
  |  Branch (258:7): [True: 2.00k, False: 0]
  ------------------
  259|      0|  for (ref = T->nk; ref < REF_TRUE; ref++) {
  ------------------
  |  Branch (259:21): [True: 0, False: 0]
  ------------------
  260|      0|    IRIns *ir = &T->ir[ref];
  261|      0|    if (ir->o == IR_KGC)
  ------------------
  |  Branch (261:9): [True: 0, False: 0]
  ------------------
  262|      0|      gc_markobj(g, ir_kgc(ir));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  263|      0|    if (irt_is64(ir->t) && ir->o != IR_KNULL)
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (263:28): [True: 0, False: 0]
  ------------------
  264|      0|      ref++;
  265|      0|  }
  266|      0|  if (T->link) gc_marktrace(g, T->link);
  ------------------
  |  Branch (266:7): [True: 0, False: 0]
  ------------------
  267|      0|  if (T->nextroot) gc_marktrace(g, T->nextroot);
  ------------------
  |  Branch (267:7): [True: 0, False: 0]
  ------------------
  268|      0|  if (T->nextside) gc_marktrace(g, T->nextside);
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|  gc_markobj(g, gcref(T->startpt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  270|      0|}
lj_gc.c:atomic:
  620|  2.00k|{
  621|  2.00k|  size_t udsize;
  622|       |
  623|  2.00k|  gc_mark_uv(g);  /* Need to remark open upvalues (the thread may be dead). */
  624|  2.00k|  gc_propagate_gray(g);  /* Propagate any left-overs. */
  625|       |
  626|  2.00k|  setgcrefr(g->gc.gray, g->gc.weak);  /* Empty the list of weak tables. */
  ------------------
  |  |   77|  2.00k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  627|  2.00k|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|  2.00k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  628|  2.00k|  lj_assertG(!iswhite(obj2gco(mainthread(g))), "main thread turned white");
  ------------------
  |  |  364|  2.00k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.00k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.00k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.00k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  629|  2.00k|  gc_markobj(g, L);  /* Mark running thread. */
  ------------------
  |  |   52|  2.00k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  2.00k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  2.00k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  2.00k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  2.00k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 2.00k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  630|  2.00k|  gc_traverse_curtrace(g);  /* Traverse current trace. */
  ------------------
  |  |  273|  2.00k|#define gc_traverse_curtrace(g)	gc_traverse_trace(g, &G2J(g)->cur)
  |  |  ------------------
  |  |  |  |  116|  2.00k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  2.00k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  2.00k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  631|  2.00k|  gc_mark_gcroot(g);  /* Mark GC roots (again). */
  632|  2.00k|  gc_propagate_gray(g);  /* Propagate all of the above. */
  633|       |
  634|  2.00k|  setgcrefr(g->gc.gray, g->gc.grayagain);  /* Empty the 2nd chance list. */
  ------------------
  |  |   77|  2.00k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  635|  2.00k|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|  2.00k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  636|  2.00k|  gc_propagate_gray(g);  /* Propagate it. */
  637|       |
  638|  2.00k|  udsize = lj_gc_separateudata(g, 0);  /* Separate userdata to be finalized. */
  639|  2.00k|  gc_mark_mmudata(g);  /* Mark them. */
  640|  2.00k|  udsize += gc_propagate_gray(g);  /* And propagate the marks. */
  641|       |
  642|       |  /* All marking done, clear weak tables. */
  643|  2.00k|  gc_clearweak(g, gcref(g->gc.weak));
  ------------------
  |  |   67|  2.00k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  644|       |
  645|  2.00k|  lj_buf_shrink(L, &g->tmpbuf);  /* Shrink temp buffer. */
  646|       |
  647|       |  /* Prepare for sweep phase. */
  648|  2.00k|  g->gc.currentwhite = (uint8_t)otherwhite(g);  /* Flip current white. */
  ------------------
  |  |   36|  2.00k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  2.00k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  2.00k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  2.00k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  649|  2.00k|  g->strempty.marked = g->gc.currentwhite;
  650|  2.00k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|  2.00k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  651|  2.00k|  g->gc.estimate = g->gc.total - (GCSize)udsize;  /* Initial estimate. */
  652|  2.00k|}
lj_gc.c:gc_mark_uv:
  116|  2.00k|{
  117|  2.00k|  GCupval *uv;
  118|  2.00k|  for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|  2.00k|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|  2.00k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|      0|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (118:33): [True: 0, False: 2.00k]
  ------------------
  119|      0|    lj_assertG(uvprev(uvnext(uv)) == uv && uvnext(uvprev(uv)) == uv,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  120|      0|	       "broken upvalue chain");
  121|      0|    if (isgray(obj2gco(uv)))
  ------------------
  |  |   34|      0|#define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  |  |               #define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (34:19): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  122|      0|      gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  123|      0|  }
  124|  2.00k|}
lj_gc.c:gc_propagate_gray:
  367|  8.03k|{
  368|  8.03k|  size_t m = 0;
  369|  40.3k|  while (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|  40.3k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (369:10): [True: 32.3k, False: 8.03k]
  ------------------
  370|  32.3k|    m += propagatemark(g);
  371|  8.03k|  return m;
  372|  8.03k|}
lj_gc.c:gc_mark_mmudata:
  128|  2.00k|{
  129|  2.00k|  GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|  2.00k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  130|  2.00k|  GCobj *u = root;
  131|  2.00k|  if (u) {
  ------------------
  |  Branch (131:7): [True: 1.42k, False: 582]
  ------------------
  132|  1.42k|    do {
  133|  1.42k|      u = gcnext(u);
  ------------------
  |  |   90|  1.42k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  1.42k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  134|  1.42k|      makewhite(g, u);  /* Could be from previous GC. */
  ------------------
  |  |   42|  1.42k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|  1.42k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  1.42k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  1.42k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  1.42k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  1.42k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  1.42k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  1.42k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  1.42k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  1.42k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  135|  1.42k|      gc_mark(g, u);
  136|  1.42k|    } while (u != root);
  ------------------
  |  Branch (136:14): [True: 0, False: 1.42k]
  ------------------
  137|  1.42k|  }
  138|  2.00k|}
lj_gc.c:gc_clearweak:
  473|  2.00k|{
  474|  2.00k|  UNUSED(g);
  ------------------
  |  |   91|  2.00k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  475|  2.00k|  while (o) {
  ------------------
  |  Branch (475:10): [True: 0, False: 2.00k]
  ------------------
  476|      0|    GCtab *t = gco2tab(o);
  ------------------
  |  |  771|      0|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  477|      0|    lj_assertG((t->marked & LJ_GC_WEAK), "clear of non-weak table");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  478|      0|    if ((t->marked & LJ_GC_WEAKVAL)) {
  ------------------
  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (478:9): [True: 0, False: 0]
  ------------------
  479|      0|      MSize i, asize = t->asize;
  480|      0|      for (i = 0; i < asize; i++) {
  ------------------
  |  Branch (480:19): [True: 0, False: 0]
  ------------------
  481|       |	/* Clear array slot when value is about to be collected. */
  482|      0|	TValue *tv = arrayslot(t, i);
  ------------------
  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  483|      0|	if (gc_mayclear(tv, 1))
  ------------------
  |  Branch (483:6): [True: 0, False: 0]
  ------------------
  484|      0|	  setnilV(tv);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  485|      0|      }
  486|      0|    }
  487|      0|    if (t->hmask > 0) {
  ------------------
  |  Branch (487:9): [True: 0, False: 0]
  ------------------
  488|      0|      Node *node = noderef(t->node);
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  489|      0|      MSize i, hmask = t->hmask;
  490|      0|      for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (490:19): [True: 0, False: 0]
  ------------------
  491|      0|	Node *n = &node[i];
  492|       |	/* Clear hash slot when key or value is about to be collected. */
  493|      0|	if (!tvisnil(&n->val) && (gc_mayclear(&n->key, 0) ||
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (493:6): [True: 0, False: 0]
  |  Branch (493:28): [True: 0, False: 0]
  ------------------
  494|      0|				  gc_mayclear(&n->val, 1)))
  ------------------
  |  Branch (494:7): [True: 0, False: 0]
  ------------------
  495|      0|	  setnilV(&n->val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  496|      0|      }
  497|      0|    }
  498|      0|    o = gcref(t->gclist);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  499|      0|  }
  500|  2.00k|}
lj_gc.c:gc_mark:
   59|   489k|{
   60|   489k|  int gct = o->gch.gct;
   61|   489k|  lj_assertG(iswhite(o), "mark of non-white object");
  ------------------
  |  |  364|   489k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   489k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 489k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   489k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   62|   489k|  lj_assertG(!isdead(g, o), "mark of dead object");
  ------------------
  |  |  364|   489k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   489k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 489k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   489k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|   489k|  white2gray(o);
  ------------------
  |  |   38|   489k|#define white2gray(x)		((x)->gch.marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   489k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   489k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   489k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|   489k|  if (LJ_UNLIKELY(gct == ~LJ_TUDATA)) {
  ------------------
  |  |  146|   489k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.51k, False: 487k]
  |  |  ------------------
  ------------------
   65|  1.51k|    GCtab *mt = tabref(gco2ud(o)->metatable);
  ------------------
  |  |  514|  1.51k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  3.03k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 1.51k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   66|  1.51k|    gray2black(o);  /* Userdata are never gray. */
  ------------------
  |  |   39|  1.51k|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  1.51k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   67|  1.51k|    if (mt) gc_markobj(g, mt);
  ------------------
  |  |   52|  1.51k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  1.51k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  1.51k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  1.51k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  1.51k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 1.42k, False: 95]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  1.42k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (67:9): [True: 1.51k, False: 0]
  ------------------
   68|  1.51k|    gc_markobj(g, tabref(gco2ud(o)->env));
  ------------------
  |  |   52|  1.51k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  3.03k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  1.51k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  1.51k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  1.51k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 1.51k, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 1.51k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  3.03k|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 1.51k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   69|  3.03k|    if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  592|  3.03k|#define LJ_HASBUFFER		1
  |  |  ------------------
  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  772|  1.51k|#define gco2ud(o)	check_exp((o)->gch.gct == ~LJ_TUDATA, &(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  1.51k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.51k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.51k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.51k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.51k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (69:25): [True: 0, False: 1.51k]
  ------------------
   70|      0|      SBufExt *sbx = (SBufExt *)uddata(gco2ud(o));
  ------------------
  |  |  342|      0|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   71|      0|      if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   72|      0|	gc_markobj(g, gcref(sbx->cowref));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   73|      0|      if (gcref(sbx->dict_str))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   74|      0|	gc_markobj(g, gcref(sbx->dict_str));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   75|      0|      if (gcref(sbx->dict_mt))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   76|      0|	gc_markobj(g, gcref(sbx->dict_mt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   77|      0|    }
   78|   487k|  } else if (LJ_UNLIKELY(gct == ~LJ_TUPVAL)) {
  ------------------
  |  |  146|   487k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 487k]
  |  |  ------------------
  ------------------
   79|      0|    GCupval *uv = gco2uv(o);
  ------------------
  |  |  766|      0|#define gco2uv(o)	check_exp((o)->gch.gct == ~LJ_TUPVAL, &(o)->uv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   81|      0|    if (uv->closed)
  ------------------
  |  Branch (81:9): [True: 0, False: 0]
  ------------------
   82|      0|      gray2black(o);  /* Closed upvalues are never gray. */
  ------------------
  |  |   39|      0|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   83|   487k|  } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  264|   975k|#define LJ_TSTR			(~4u)
  ------------------
                } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  270|   255k|#define LJ_TCDATA		(~10u)
  ------------------
  |  Branch (83:14): [True: 255k, False: 231k]
  |  Branch (83:33): [True: 241k, False: 14.2k]
  ------------------
   84|   241k|    lj_assertG(gct == ~LJ_TFUNC || gct == ~LJ_TTAB ||
  ------------------
  |  |  364|   241k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.17M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 51.1k, False: 190k]
  |  |  |  |  |  Branch (355:5): [True: 177k, False: 12.7k]
  |  |  |  |  |  Branch (355:5): [True: 2.98k, False: 9.81k]
  |  |  |  |  |  Branch (355:5): [True: 9.81k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   241k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|   241k|	       gct == ~LJ_TTHREAD || gct == ~LJ_TPROTO || gct == ~LJ_TTRACE,
   86|   241k|	       "bad GC type %d", gct);
   87|   241k|    setgcrefr(o->gch.gclist, g->gc.gray);
  ------------------
  |  |   77|   241k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   88|   241k|    setgcref(g->gc.gray, o);
  ------------------
  |  |   72|   241k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   89|   241k|  }
   90|   489k|}

lj_state.c:lj_mem_free:
  120|   138k|{
  121|   138k|  g->gc.total -= (GCSize)osize;
  122|   138k|  g->allocf(g->allocd, p, osize, 0);
  123|   138k|}
lj_lex.c:lj_mem_free:
  120|   138k|{
  121|   138k|  g->gc.total -= (GCSize)osize;
  122|   138k|  g->allocf(g->allocd, p, osize, 0);
  123|   138k|}
lj_parse.c:lj_gc_barrierback:
   82|    110|{
   83|    110|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|    110|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|    110|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|    110|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    220|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 110, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 110, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    110|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|    110|	     "bad object states for backward barrier");
   86|    110|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|    110|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    220|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 110, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 110, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    110|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|    110|	     "bad GC state");
   88|    110|  black2gray(o);
  ------------------
  |  |   44|    110|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|    110|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|    110|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|    110|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|    110|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|    110|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|    110|}
lj_trace.c:lj_mem_free:
  120|   184k|{
  121|   184k|  g->gc.total -= (GCSize)osize;
  122|   184k|  g->allocf(g->allocd, p, osize, 0);
  123|   184k|}
lj_ctype.c:lj_mem_free:
  120|  16.8k|{
  121|  16.8k|  g->gc.total -= (GCSize)osize;
  122|  16.8k|  g->allocf(g->allocd, p, osize, 0);
  123|  16.8k|}
lj_str.c:lj_mem_free:
  120|  3.60M|{
  121|  3.60M|  g->gc.total -= (GCSize)osize;
  122|  3.60M|  g->allocf(g->allocd, p, osize, 0);
  123|  3.60M|}
lj_tab.c:lj_mem_free:
  120|  1.34M|{
  121|  1.34M|  g->gc.total -= (GCSize)osize;
  122|  1.34M|  g->allocf(g->allocd, p, osize, 0);
  123|  1.34M|}
lj_tab.c:lj_gc_barrierback:
   82|  3.49k|{
   83|  3.49k|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|  3.49k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|  3.49k|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|  3.49k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.99k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 3.49k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 3.49k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.49k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|  3.49k|	     "bad object states for backward barrier");
   86|  3.49k|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|  3.49k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.99k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 3.49k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 3.49k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.49k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|  3.49k|	     "bad GC state");
   88|  3.49k|  black2gray(o);
  ------------------
  |  |   44|  3.49k|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  3.49k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|  3.49k|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|  3.49k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|  3.49k|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|  3.49k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|  3.49k|}
lj_func.c:lj_mem_free:
  120|   296k|{
  121|   296k|  g->gc.total -= (GCSize)osize;
  122|   296k|  g->allocf(g->allocd, p, osize, 0);
  123|   296k|}
lj_udata.c:lj_mem_free:
  120|  5.60k|{
  121|  5.60k|  g->gc.total -= (GCSize)osize;
  122|  5.60k|  g->allocf(g->allocd, p, osize, 0);
  123|  5.60k|}
lj_cdata.c:lj_mem_free:
  120|  31.8k|{
  121|  31.8k|  g->gc.total -= (GCSize)osize;
  122|  31.8k|  g->allocf(g->allocd, p, osize, 0);
  123|  31.8k|}

lj_lex_setup:
  399|  46.0k|{
  400|  46.0k|  int header = 0;
  401|  46.0k|  ls->L = L;
  402|  46.0k|  ls->fs = NULL;
  403|  46.0k|  ls->pe = ls->p = NULL;
  404|  46.0k|  ls->vstack = NULL;
  405|  46.0k|  ls->sizevstack = 0;
  406|  46.0k|  ls->vtop = 0;
  407|  46.0k|  ls->bcstack = NULL;
  408|  46.0k|  ls->sizebcstack = 0;
  409|  46.0k|  ls->tok = 0;
  410|  46.0k|  ls->lookahead = TK_eof;  /* No look-ahead token. */
  411|  46.0k|  ls->linenumber = 1;
  412|  46.0k|  ls->lastline = 1;
  413|  46.0k|  ls->endmark = 0;
  414|  46.0k|  ls->fr2 = LJ_FR2;  /* Generate native bytecode by default. */
  ------------------
  |  |  569|  46.0k|#define LJ_FR2			1
  ------------------
  415|  46.0k|  lex_next(ls);  /* Read-ahead first char. */
  416|  46.0k|  if (ls->c == 0xef && ls->p + 2 <= ls->pe && (uint8_t)ls->p[0] == 0xbb &&
  ------------------
  |  Branch (416:7): [True: 257, False: 45.7k]
  |  Branch (416:24): [True: 254, False: 3]
  |  Branch (416:47): [True: 15, False: 239]
  ------------------
  417|  46.0k|      (uint8_t)ls->p[1] == 0xbf) {  /* Skip UTF-8 BOM (if buffered). */
  ------------------
  |  Branch (417:7): [True: 2, False: 13]
  ------------------
  418|      2|    ls->p += 2;
  419|      2|    lex_next(ls);
  420|      2|    header = 1;
  421|      2|  }
  422|  46.0k|  if (ls->c == '#') {  /* Skip POSIX #! header line. */
  ------------------
  |  Branch (422:7): [True: 15, False: 45.9k]
  ------------------
  423|    237|    do {
  424|    237|      lex_next(ls);
  425|    237|      if (ls->c == LEX_EOF) return 0;
  ------------------
  |  |   42|    237|#define LEX_EOF			(-1)
  ------------------
  |  Branch (425:11): [True: 12, False: 225]
  ------------------
  426|    237|    } while (!lex_iseol(ls));
  ------------------
  |  |   43|    225|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 2, False: 223]
  |  |  |  Branch (43:42): [True: 1, False: 222]
  |  |  ------------------
  ------------------
  427|      3|    lex_newline(ls);
  428|      3|    header = 1;
  429|      3|  }
  430|  45.9k|  if (ls->c == LUA_SIGNATURE[0]) {  /* Bytecode dump. */
  ------------------
  |  |   27|  45.9k|#define	LUA_SIGNATURE	"\033Lua"
  ------------------
  |  Branch (430:7): [True: 4, False: 45.9k]
  ------------------
  431|      4|    if (header) {
  ------------------
  |  Branch (431:9): [True: 1, False: 3]
  ------------------
  432|       |      /*
  433|       |      ** Loading bytecode with an extra header is disabled for security
  434|       |      ** reasons. This may circumvent the usual check for bytecode vs.
  435|       |      ** Lua code by looking at the first char. Since this is a potential
  436|       |      ** security violation no attempt is made to echo the chunkname either.
  437|       |      */
  438|      1|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_BCBAD));
  439|      1|      lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|      1|#define LUA_ERRSYNTAX	3
  ------------------
  440|      1|    }
  441|      3|    return 1;
  442|      4|  }
  443|  45.9k|  return 0;
  444|  45.9k|}
lj_lex_cleanup:
  448|  46.0k|{
  449|  46.0k|  global_State *g = G(L);
  ------------------
  |  |  705|  46.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  450|  46.0k|  lj_mem_freevec(g, ls->bcstack, ls->sizebcstack, BCInsLine);
  ------------------
  |  |  130|  46.0k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  451|  46.0k|  lj_mem_freevec(g, ls->vstack, ls->sizevstack, VarInfo);
  ------------------
  |  |  130|  46.0k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  452|  46.0k|  lj_buf_free(g, &ls->sb);
  453|  46.0k|}
lj_lex_next:
  457|  8.39M|{
  458|  8.39M|  ls->lastline = ls->linenumber;
  459|  8.39M|  if (LJ_LIKELY(ls->lookahead == TK_eof)) {  /* No lookahead token? */
  ------------------
  |  |  145|  8.39M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 7.69M, False: 706k]
  |  |  ------------------
  ------------------
  460|  7.69M|    ls->tok = lex_scan(ls, &ls->tokval);  /* Get next token. */
  461|  7.69M|  } else {  /* Otherwise return lookahead token. */
  462|   706k|    ls->tok = ls->lookahead;
  463|   706k|    ls->lookahead = TK_eof;
  464|   706k|    ls->tokval = ls->lookaheadval;
  465|   706k|  }
  466|  8.39M|}
lj_lex_lookahead:
  470|   706k|{
  471|   706k|  lj_assertLS(ls->lookahead == TK_eof, "double lookahead");
  ------------------
  |  |   89|   706k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   706k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   706k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 706k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   706k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  472|   706k|  ls->lookahead = lex_scan(ls, &ls->lookaheadval);
  473|   706k|  return ls->lookahead;
  474|   706k|}
lj_lex_token2str:
  478|  55.1k|{
  479|  55.1k|  if (tok > TK_OFS)
  ------------------
  |  Branch (479:7): [True: 18.3k, False: 36.8k]
  ------------------
  480|  18.3k|    return tokennames[tok-TK_OFS-1];
  481|  36.8k|  else if (!lj_char_iscntrl(tok))
  ------------------
  |  |   25|  36.8k|#define lj_char_iscntrl(c)	lj_char_isa((c), LJ_CHAR_CNTRL)
  |  |  ------------------
  |  |  |  |   24|  36.8k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (481:12): [True: 34.8k, False: 1.95k]
  ------------------
  482|  34.8k|    return lj_strfmt_pushf(ls->L, "%c", tok);
  483|  1.95k|  else
  484|  1.95k|    return lj_strfmt_pushf(ls->L, "char(%d)", tok);
  485|  55.1k|}
lj_lex_error:
  489|  42.8k|{
  490|  42.8k|  const char *tokstr;
  491|  42.8k|  va_list argp;
  492|  42.8k|  if (tok == 0) {
  ------------------
  |  Branch (492:7): [True: 1.72k, False: 41.1k]
  ------------------
  493|  1.72k|    tokstr = NULL;
  494|  41.1k|  } else if (tok == TK_name || tok == TK_string || tok == TK_number) {
  ------------------
  |  Branch (494:14): [True: 3.72k, False: 37.3k]
  |  Branch (494:32): [True: 1.20k, False: 36.1k]
  |  Branch (494:52): [True: 7.22k, False: 28.9k]
  ------------------
  495|  12.1k|    lex_save(ls, '\0');
  496|  12.1k|    tokstr = ls->sb.b;
  497|  28.9k|  } else {
  498|  28.9k|    tokstr = lj_lex_token2str(ls, tok);
  499|  28.9k|  }
  500|  42.8k|  va_start(argp, em);
  501|  42.8k|  lj_err_lex(ls->L, ls->chunkname, tokstr, ls->linenumber, em, argp);
  502|      0|  va_end(argp);
  503|      0|}
lj_lex_init:
  507|  46.0k|{
  508|  46.0k|  uint32_t i;
  509|  1.05M|  for (i = 0; i < TK_RESERVED; i++) {
  ------------------
  |  Branch (509:15): [True: 1.01M, False: 46.0k]
  ------------------
  510|  1.01M|    GCstr *s = lj_str_newz(L, tokennames[i]);
  ------------------
  |  |   27|  1.01M|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  511|  1.01M|    fixstring(s);  /* Reserved words are never collected. */
  ------------------
  |  |   45|  1.01M|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  1.01M|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  512|  1.01M|    s->reserved = (uint8_t)(i+1);
  513|  1.01M|  }
  514|  46.0k|}
lj_lex.c:lex_next:
   64|  21.2M|{
   65|  21.2M|  return (ls->c = ls->p < ls->pe ? (LexChar)(uint8_t)*ls->p++ : lex_more(ls));
  ------------------
  |  Branch (65:19): [True: 21.1M, False: 67.2k]
  ------------------
   66|  21.2M|}
lj_lex.c:lex_more:
   47|  67.2k|{
   48|  67.2k|  size_t sz;
   49|  67.2k|  const char *p = ls->rfunc(ls->L, ls->rdata, &sz);
   50|  67.2k|  if (p == NULL || sz == 0) return LEX_EOF;
  ------------------
  |  |   42|  21.2k|#define LEX_EOF			(-1)
  ------------------
  |  Branch (50:7): [True: 21.2k, False: 46.0k]
  |  Branch (50:20): [True: 0, False: 46.0k]
  ------------------
   51|  46.0k|  if (sz >= LJ_MAX_BUF) {
  ------------------
  |  |   55|  46.0k|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|  46.0k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 0, False: 46.0k]
  ------------------
   52|      0|    if (sz != ~(size_t)0) lj_err_mem(ls->L);
  ------------------
  |  Branch (52:9): [True: 0, False: 0]
  ------------------
   53|      0|    sz = ~(uintptr_t)0 - (uintptr_t)p;
   54|      0|    if (sz >= LJ_MAX_BUF) sz = LJ_MAX_BUF-1;
  ------------------
  |  |   55|      0|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
                  if (sz >= LJ_MAX_BUF) sz = LJ_MAX_BUF-1;
  ------------------
  |  |   55|      0|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (54:9): [True: 0, False: 0]
  ------------------
   55|      0|    ls->endmark = 1;
   56|      0|  }
   57|  46.0k|  ls->pe = p + sz;
   58|  46.0k|  ls->p = p + 1;
   59|  46.0k|  return (LexChar)(uint8_t)p[0];
   60|  46.0k|}
lj_lex.c:lex_newline:
   83|  1.09M|{
   84|  1.09M|  LexChar old = ls->c;
   85|  1.09M|  lj_assertLS(lex_iseol(ls), "bad usage");
  ------------------
  |  |   89|  1.09M|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.09M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.36M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 819k, False: 270k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 270k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.09M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   86|  1.09M|  lex_next(ls);  /* Skip "\n" or "\r". */
   87|  1.09M|  if (lex_iseol(ls) && ls->c != old) lex_next(ls);  /* Skip "\n\r" or "\r\n". */
  ------------------
  |  |   43|  2.18M|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 458k, False: 631k]
  |  |  |  Branch (43:42): [True: 60.9k, False: 570k]
  |  |  ------------------
  ------------------
  |  Branch (87:24): [True: 29.5k, False: 490k]
  ------------------
   88|  1.09M|  if (++ls->linenumber >= LJ_MAX_LINE)
  ------------------
  |  |   64|  1.09M|#define LJ_MAX_LINE	LJ_MAX_MEM32	/* Max. source code line number. */
  |  |  ------------------
  |  |  |  |   49|  1.09M|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (88:7): [True: 0, False: 1.09M]
  ------------------
   89|      0|    lj_lex_error(ls, ls->tok, LJ_ERR_XLINES);
   90|  1.09M|}
lj_lex.c:lex_scan:
  292|  8.39M|{
  293|  8.39M|  lj_buf_reset(&ls->sb);
  294|  9.82M|  for (;;) {
  295|  9.82M|    if (lj_char_isident(ls->c)) {
  ------------------
  |  |   32|  9.82M|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|  9.82M|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 4.07M, False: 5.75M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  296|  4.07M|      GCstr *s;
  297|  4.07M|      if (lj_char_isdigit(ls->c)) {  /* Numeric literal. */
  ------------------
  |  |   28|  4.07M|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  4.07M|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 1.30M, False: 2.76M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  298|  1.30M|	lex_number(ls, tv);
  299|  1.30M|	return TK_number;
  300|  1.30M|      }
  301|       |      /* Identifier or reserved word. */
  302|  9.61M|      do {
  303|  9.61M|	lex_savenext(ls);
  304|  9.61M|      } while (lj_char_isident(ls->c));
  ------------------
  |  |   32|  9.61M|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|  9.61M|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 6.84M, False: 2.76M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  2.76M|      s = lj_parse_keepstr(ls, ls->sb.b, sbuflen(&ls->sb));
  ------------------
  |  |   36|  2.76M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  306|  2.76M|      setstrV(ls->L, tv, s);
  307|  2.76M|      if (s->reserved > 0)  /* Reserved word? */
  ------------------
  |  Branch (307:11): [True: 602k, False: 2.16M]
  ------------------
  308|   602k|	return TK_OFS + s->reserved;
  309|  2.16M|      return TK_name;
  310|  2.76M|    }
  311|  5.75M|    switch (ls->c) {
  312|   571k|    case '\n':
  ------------------
  |  Branch (312:5): [True: 571k, False: 5.18M]
  ------------------
  313|   839k|    case '\r':
  ------------------
  |  Branch (313:5): [True: 267k, False: 5.48M]
  ------------------
  314|   839k|      lex_newline(ls);
  315|   839k|      continue;
  316|   219k|    case ' ':
  ------------------
  |  Branch (316:5): [True: 219k, False: 5.53M]
  ------------------
  317|   244k|    case '\t':
  ------------------
  |  Branch (317:5): [True: 24.9k, False: 5.73M]
  ------------------
  318|   484k|    case '\v':
  ------------------
  |  Branch (318:5): [True: 239k, False: 5.51M]
  ------------------
  319|   583k|    case '\f':
  ------------------
  |  Branch (319:5): [True: 98.7k, False: 5.65M]
  ------------------
  320|   583k|      lex_next(ls);
  321|   583k|      continue;
  322|   189k|    case '-':
  ------------------
  |  Branch (322:5): [True: 189k, False: 5.56M]
  ------------------
  323|   189k|      lex_next(ls);
  324|   189k|      if (ls->c != '-') return '-';
  ------------------
  |  Branch (324:11): [True: 180k, False: 8.24k]
  ------------------
  325|  8.24k|      lex_next(ls);
  326|  8.24k|      if (ls->c == '[') {  /* Long comment "--[=*[...]=*]". */
  ------------------
  |  Branch (326:11): [True: 1.00k, False: 7.24k]
  ------------------
  327|  1.00k|	int sep = lex_skipeq(ls);
  328|  1.00k|	lj_buf_reset(&ls->sb);  /* `lex_skipeq' may dirty the buffer */
  329|  1.00k|	if (sep >= 0) {
  ------------------
  |  Branch (329:6): [True: 273, False: 729]
  ------------------
  330|    273|	  lex_longstring(ls, NULL, sep);
  331|    273|	  lj_buf_reset(&ls->sb);
  332|    273|	  continue;
  333|    273|	}
  334|  1.00k|      }
  335|       |      /* Short comment "--.*\n". */
  336|  67.1k|      while (!lex_iseol(ls) && ls->c != LEX_EOF)
  ------------------
  |  |   43|   134k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 5.46k, False: 61.6k]
  |  |  |  Branch (43:42): [True: 2.04k, False: 59.6k]
  |  |  ------------------
  ------------------
                    while (!lex_iseol(ls) && ls->c != LEX_EOF)
  ------------------
  |  |   42|  59.6k|#define LEX_EOF			(-1)
  ------------------
  |  Branch (336:32): [True: 59.1k, False: 465]
  ------------------
  337|  59.1k|	lex_next(ls);
  338|  7.97k|      continue;
  339|  42.4k|    case '[': {
  ------------------
  |  Branch (339:5): [True: 42.4k, False: 5.71M]
  ------------------
  340|  42.4k|      int sep = lex_skipeq(ls);
  341|  42.4k|      if (sep >= 0) {
  ------------------
  |  Branch (341:11): [True: 1.95k, False: 40.5k]
  ------------------
  342|  1.95k|	lex_longstring(ls, tv, sep);
  343|  1.95k|	return TK_string;
  344|  40.5k|      } else if (sep == -1) {
  ------------------
  |  Branch (344:18): [True: 40.3k, False: 166]
  ------------------
  345|  40.3k|	return '[';
  346|  40.3k|      } else {
  347|    166|	lj_lex_error(ls, TK_string, LJ_ERR_XLDELIM);
  348|      0|	continue;
  349|    166|      }
  350|  42.4k|      }
  351|   411k|    case '=':
  ------------------
  |  Branch (351:5): [True: 411k, False: 5.34M]
  ------------------
  352|   411k|      lex_next(ls);
  353|   411k|      if (ls->c != '=') return '='; else { lex_next(ls); return TK_eq; }
  ------------------
  |  Branch (353:11): [True: 325k, False: 86.3k]
  ------------------
  354|  73.1k|    case '<':
  ------------------
  |  Branch (354:5): [True: 73.1k, False: 5.68M]
  ------------------
  355|  73.1k|      lex_next(ls);
  356|  73.1k|      if (ls->c != '=') return '<'; else { lex_next(ls); return TK_le; }
  ------------------
  |  Branch (356:11): [True: 62.9k, False: 10.2k]
  ------------------
  357|   612k|    case '>':
  ------------------
  |  Branch (357:5): [True: 612k, False: 5.14M]
  ------------------
  358|   612k|      lex_next(ls);
  359|   612k|      if (ls->c != '=') return '>'; else { lex_next(ls); return TK_ge; }
  ------------------
  |  Branch (359:11): [True: 376k, False: 235k]
  ------------------
  360|  16.6k|    case '~':
  ------------------
  |  Branch (360:5): [True: 16.6k, False: 5.74M]
  ------------------
  361|  16.6k|      lex_next(ls);
  362|  16.6k|      if (ls->c != '=') return '~'; else { lex_next(ls); return TK_ne; }
  ------------------
  |  Branch (362:11): [True: 352, False: 16.3k]
  ------------------
  363|  42.6k|    case ':':
  ------------------
  |  Branch (363:5): [True: 42.6k, False: 5.71M]
  ------------------
  364|  42.6k|      lex_next(ls);
  365|  42.6k|      if (ls->c != ':') return ':'; else { lex_next(ls); return TK_label; }
  ------------------
  |  Branch (365:11): [True: 7.12k, False: 35.5k]
  ------------------
  366|    925|    case '"':
  ------------------
  |  Branch (366:5): [True: 925, False: 5.75M]
  ------------------
  367|   195k|    case '\'':
  ------------------
  |  Branch (367:5): [True: 194k, False: 5.56M]
  ------------------
  368|   195k|      lex_string(ls, tv);
  369|   195k|      return TK_string;
  370|  54.2k|    case '.':
  ------------------
  |  Branch (370:5): [True: 54.2k, False: 5.70M]
  ------------------
  371|  54.2k|      if (lex_savenext(ls) == '.') {
  ------------------
  |  Branch (371:11): [True: 11.3k, False: 42.8k]
  ------------------
  372|  11.3k|	lex_next(ls);
  373|  11.3k|	if (ls->c == '.') {
  ------------------
  |  Branch (373:6): [True: 2.83k, False: 8.51k]
  ------------------
  374|  2.83k|	  lex_next(ls);
  375|  2.83k|	  return TK_dots;   /* ... */
  376|  2.83k|	}
  377|  8.51k|	return TK_concat;   /* .. */
  378|  42.8k|      } else if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|  42.8k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  42.8k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (378:18): [True: 30.0k, False: 12.7k]
  ------------------
  379|  30.0k|	return '.';
  380|  30.0k|      } else {
  381|  12.7k|	lex_number(ls, tv);
  382|  12.7k|	return TK_number;
  383|  12.7k|      }
  384|  14.6k|    case LEX_EOF:
  ------------------
  |  |   42|  14.6k|#define LEX_EOF			(-1)
  ------------------
  |  Branch (384:5): [True: 14.6k, False: 5.74M]
  ------------------
  385|  14.6k|      return TK_eof;
  386|  2.68M|    default: {
  ------------------
  |  Branch (386:5): [True: 2.68M, False: 3.07M]
  ------------------
  387|  2.68M|      LexChar c = ls->c;
  388|  2.68M|      lex_next(ls);
  389|  2.68M|      return c;  /* Single-char tokens (+ - / ...). */
  390|  54.2k|    }
  391|  5.75M|    }
  392|  5.75M|  }
  393|  8.39M|}
lj_lex.c:lex_number:
   96|  1.31M|{
   97|  1.31M|  StrScanFmt fmt;
   98|  1.31M|  LexChar c, xp = 'e';
   99|  1.31M|  lj_assertLS(lj_char_isdigit(ls->c), "bad usage");
  ------------------
  |  |   89|  1.31M|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.31M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.31M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.31M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.31M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  100|  1.31M|  if ((c = ls->c) == '0' && (lex_savenext(ls) | 0x20) == 'x')
  ------------------
  |  Branch (100:7): [True: 677k, False: 637k]
  |  Branch (100:29): [True: 14.9k, False: 662k]
  ------------------
  101|  14.9k|    xp = 'p';
  102|  4.57M|  while (lj_char_isident(ls->c) || ls->c == '.' ||
  ------------------
  |  |   32|  4.57M|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|  9.14M|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 3.18M, False: 1.39M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (102:36): [True: 25.6k, False: 1.36M]
  ------------------
  103|  4.57M|	 ((ls->c == '-' || ls->c == '+') && (c | 0x20) == xp)) {
  ------------------
  |  Branch (103:5): [True: 90.6k, False: 1.27M]
  |  Branch (103:21): [True: 8.63k, False: 1.26M]
  |  Branch (103:38): [True: 52.8k, False: 46.4k]
  ------------------
  104|  3.25M|    c = ls->c;
  105|  3.25M|    lex_savenext(ls);
  106|  3.25M|  }
  107|  1.31M|  lex_save(ls, '\0');
  108|  1.31M|  fmt = lj_strscan_scan((const uint8_t *)ls->sb.b, sbuflen(&ls->sb)-1, tv,
  ------------------
  |  |   36|  1.31M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  109|  1.31M|	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |  549|  1.31M|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |   12|      0|#define STRSCAN_OPT_TOINT	0x01  /* Convert to int32_t, if possible. */
  ------------------
              	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |   13|  1.31M|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  110|  1.31M|	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |  585|  1.31M|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |   15|  1.31M|#define STRSCAN_OPT_LL		0x08
  ------------------
              	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |   14|  1.31M|#define STRSCAN_OPT_IMAG	0x04
  ------------------
  111|  1.31M|  if (LJ_DUALNUM && fmt == STRSCAN_INT) {
  ------------------
  |  |  549|  2.63M|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (111:21): [True: 0, False: 0]
  ------------------
  112|      0|    setitype(tv, LJ_TISNUM);
  ------------------
  |  |  871|      0|#define setitype(o, i)		((o)->it = ((i) << 15))
  ------------------
  113|  1.31M|  } else if (fmt == STRSCAN_NUM) {
  ------------------
  |  Branch (113:14): [True: 1.27M, False: 35.7k]
  ------------------
  114|       |    /* Already in correct format. */
  115|  1.27M|#if LJ_HASFFI
  116|  1.27M|  } else if (fmt != STRSCAN_ERROR) {
  ------------------
  |  Branch (116:14): [True: 31.8k, False: 3.89k]
  ------------------
  117|  31.8k|    lua_State *L = ls->L;
  118|  31.8k|    GCcdata *cd;
  119|  31.8k|    lj_assertLS(fmt == STRSCAN_I64 || fmt == STRSCAN_U64 || fmt == STRSCAN_IMAG,
  ------------------
  |  |   89|  31.8k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  31.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   105k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 8.50k, False: 23.3k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 4.76k, False: 18.6k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 18.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  31.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  120|  31.8k|		"unexpected number format %d", fmt);
  121|  31.8k|    ctype_loadffi(L);
  ------------------
  |  |  396|  31.8k|  do { \
  |  |  397|  31.8k|    if (!ctype_ctsG(G(L))) { \
  |  |  ------------------
  |  |  |  |  384|  31.8k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  31.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (397:9): [True: 5.60k, False: 26.2k]
  |  |  ------------------
  |  |  398|  5.60k|      ptrdiff_t oldtop = (char *)L->top - mref(L->stack, char); \
  |  |  ------------------
  |  |  |  |   36|  5.60k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  399|  5.60k|      luaopen_ffi(L); \
  |  |  400|  5.60k|      L->top = (TValue *)(mref(L->stack, char) + oldtop); \
  |  |  ------------------
  |  |  |  |   36|  5.60k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  401|  5.60k|    } \
  |  |  402|  31.8k|  } while (0)
  |  |  ------------------
  |  |  |  Branch (402:12): [Folded - Ignored]
  |  |  ------------------
  ------------------
  122|  31.8k|    if (fmt == STRSCAN_IMAG) {
  ------------------
  |  Branch (122:9): [True: 18.6k, False: 13.2k]
  ------------------
  123|  18.6k|      cd = lj_cdata_new_(L, CTID_COMPLEX_DOUBLE, 2*sizeof(double));
  124|  18.6k|      ((double *)cdataptr(cd))[0] = 0;
  ------------------
  |  |  360|  18.6k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  125|  18.6k|      ((double *)cdataptr(cd))[1] = numV(tv);
  ------------------
  |  |  360|  18.6k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
                    ((double *)cdataptr(cd))[1] = numV(tv);
  ------------------
  |  |  866|  18.6k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  18.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  18.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  18.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 18.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  18.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  126|  18.6k|    } else {
  127|  13.2k|      cd = lj_cdata_new_(L, fmt==STRSCAN_I64 ? CTID_INT64 : CTID_UINT64, 8);
  ------------------
  |  Branch (127:29): [True: 8.50k, False: 4.76k]
  ------------------
  128|  13.2k|      *(uint64_t *)cdataptr(cd) = tv->u64;
  ------------------
  |  |  360|  13.2k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  129|  13.2k|    }
  130|  31.8k|    lj_parse_keepcdata(ls, tv, cd);
  131|  31.8k|#endif
  132|  31.8k|  } else {
  133|  3.89k|    lj_assertLS(fmt == STRSCAN_ERROR,
  ------------------
  |  |   89|  3.89k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  3.89k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.89k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3.89k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.89k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  134|  3.89k|		"unexpected number format %d", fmt);
  135|  3.89k|    lj_lex_error(ls, TK_number, LJ_ERR_XNUMBER);
  136|  3.89k|  }
  137|  1.31M|}
lj_lex.c:lex_savenext:
   76|  14.8M|{
   77|  14.8M|  lex_save(ls, ls->c);
   78|  14.8M|  return lex_next(ls);
   79|  14.8M|}
lj_lex.c:lex_skipeq:
  141|  47.9k|{
  142|  47.9k|  int count = 0;
  143|  47.9k|  LexChar s = ls->c;
  144|  47.9k|  lj_assertLS(s == '[' || s == ']', "bad usage");
  ------------------
  |  |   89|  47.9k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  47.9k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  52.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 43.4k, False: 4.46k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 4.46k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  47.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  145|   283k|  while (lex_savenext(ls) == '=' && count < 0x20000000)
  ------------------
  |  Branch (145:10): [True: 235k, False: 47.9k]
  |  Branch (145:37): [True: 235k, False: 0]
  ------------------
  146|   235k|    count++;
  147|  47.9k|  return (ls->c == s) ? count : (-count) - 1;
  ------------------
  |  Branch (147:10): [True: 4.50k, False: 43.4k]
  ------------------
  148|  47.9k|}
lj_lex.c:lex_longstring:
  152|  2.22k|{
  153|  2.22k|  lex_savenext(ls);  /* Skip second '['. */
  154|  2.22k|  if (lex_iseol(ls))  /* Skip initial newline. */
  ------------------
  |  |   43|  2.22k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 635, False: 1.59k]
  |  |  |  Branch (43:42): [True: 151, False: 1.44k]
  |  |  ------------------
  ------------------
  155|    786|    lex_newline(ls);
  156|   472k|  for (;;) {
  157|   472k|    switch (ls->c) {
  158|    406|    case LEX_EOF:
  ------------------
  |  |   42|    406|#define LEX_EOF			(-1)
  ------------------
  |  Branch (158:5): [True: 406, False: 471k]
  ------------------
  159|    406|      lj_lex_error(ls, TK_eof, tv ? LJ_ERR_XLSTR : LJ_ERR_XLCOM);
  ------------------
  |  Branch (159:32): [True: 361, False: 45]
  ------------------
  160|      0|      break;
  161|  4.46k|    case ']':
  ------------------
  |  Branch (161:5): [True: 4.46k, False: 467k]
  ------------------
  162|  4.46k|      if (lex_skipeq(ls) == sep) {
  ------------------
  |  Branch (162:11): [True: 1.82k, False: 2.64k]
  ------------------
  163|  1.82k|	lex_savenext(ls);  /* Skip second ']'. */
  164|  1.82k|	goto endloop;
  165|  1.82k|      }
  166|  2.64k|      break;
  167|   245k|    case '\n':
  ------------------
  |  Branch (167:5): [True: 245k, False: 226k]
  ------------------
  168|   247k|    case '\r':
  ------------------
  |  Branch (168:5): [True: 1.95k, False: 470k]
  ------------------
  169|   247k|      lex_save(ls, '\n');
  170|   247k|      lex_newline(ls);
  171|   247k|      if (!tv) lj_buf_reset(&ls->sb);  /* Don't waste space for comments. */
  ------------------
  |  Branch (171:11): [True: 1.84k, False: 245k]
  ------------------
  172|   247k|      break;
  173|   219k|    default:
  ------------------
  |  Branch (173:5): [True: 219k, False: 252k]
  ------------------
  174|   219k|      lex_savenext(ls);
  175|   219k|      break;
  176|   472k|    }
  177|   472k|  } endloop:
  178|  1.82k|  if (tv) {
  ------------------
  |  Branch (178:7): [True: 1.59k, False: 228]
  ------------------
  179|  1.59k|    GCstr *str = lj_parse_keepstr(ls, ls->sb.b + (2 + (MSize)sep),
  180|  1.59k|				      sbuflen(&ls->sb) - 2*(2 + (MSize)sep));
  ------------------
  |  |   36|  1.59k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  181|  1.59k|    setstrV(ls->L, tv, str);
  182|  1.59k|  }
  183|  1.82k|}
lj_lex.c:lex_string:
  187|   195k|{
  188|   195k|  LexChar delim = ls->c;  /* Delimiter is '\'' or '"'. */
  189|   195k|  lex_savenext(ls);
  190|   591k|  while (ls->c != delim) {
  ------------------
  |  Branch (190:10): [True: 398k, False: 193k]
  ------------------
  191|   398k|    switch (ls->c) {
  192|  1.19k|    case LEX_EOF:
  ------------------
  |  |   42|  1.19k|#define LEX_EOF			(-1)
  ------------------
  |  Branch (192:5): [True: 1.19k, False: 397k]
  ------------------
  193|  1.19k|      lj_lex_error(ls, TK_eof, LJ_ERR_XSTR);
  194|      0|      continue;
  195|    152|    case '\n':
  ------------------
  |  Branch (195:5): [True: 152, False: 398k]
  ------------------
  196|    198|    case '\r':
  ------------------
  |  Branch (196:5): [True: 46, False: 398k]
  ------------------
  197|    198|      lj_lex_error(ls, TK_string, LJ_ERR_XSTR);
  198|      0|      continue;
  199|  29.2k|    case '\\': {
  ------------------
  |  Branch (199:5): [True: 29.2k, False: 369k]
  ------------------
  200|  29.2k|      LexChar c = lex_next(ls);  /* Skip the '\\'. */
  201|  29.2k|      switch (c) {
  202|  1.48k|      case 'a': c = '\a'; break;
  ------------------
  |  Branch (202:7): [True: 1.48k, False: 27.7k]
  ------------------
  203|    208|      case 'b': c = '\b'; break;
  ------------------
  |  Branch (203:7): [True: 208, False: 29.0k]
  ------------------
  204|    197|      case 'f': c = '\f'; break;
  ------------------
  |  Branch (204:7): [True: 197, False: 29.0k]
  ------------------
  205|    322|      case 'n': c = '\n'; break;
  ------------------
  |  Branch (205:7): [True: 322, False: 28.8k]
  ------------------
  206|    363|      case 'r': c = '\r'; break;
  ------------------
  |  Branch (206:7): [True: 363, False: 28.8k]
  ------------------
  207|  1.04k|      case 't': c = '\t'; break;
  ------------------
  |  Branch (207:7): [True: 1.04k, False: 28.1k]
  ------------------
  208|    453|      case 'v': c = '\v'; break;
  ------------------
  |  Branch (208:7): [True: 453, False: 28.7k]
  ------------------
  209|    791|      case 'x':  /* Hexadecimal escape '\xXX'. */
  ------------------
  |  Branch (209:7): [True: 791, False: 28.4k]
  ------------------
  210|    791|	c = (lex_next(ls) & 15u) << 4;
  211|    791|	if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|    791|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    791|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (211:6): [True: 381, False: 410]
  ------------------
  212|    381|	  if (!lj_char_isxdigit(ls->c)) goto err_xesc;
  ------------------
  |  |   29|    381|#define lj_char_isxdigit(c)	lj_char_isa((c), LJ_CHAR_XDIGIT)
  |  |  ------------------
  |  |  |  |   24|    381|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (212:8): [True: 3, False: 378]
  ------------------
  213|    378|	  c += 9 << 4;
  214|    378|	}
  215|    788|	c += (lex_next(ls) & 15u);
  216|    788|	if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|    788|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    788|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (216:6): [True: 372, False: 416]
  ------------------
  217|    372|	  if (!lj_char_isxdigit(ls->c)) goto err_xesc;
  ------------------
  |  |   29|    372|#define lj_char_isxdigit(c)	lj_char_isa((c), LJ_CHAR_XDIGIT)
  |  |  ------------------
  |  |  |  |   24|    372|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (217:8): [True: 2, False: 370]
  ------------------
  218|    370|	  c += 9;
  219|    370|	}
  220|    786|	break;
  221|  9.72k|      case 'u':  /* Unicode escape '\u{XX...}'. */
  ------------------
  |  Branch (221:7): [True: 9.72k, False: 19.4k]
  ------------------
  222|  9.72k|	if (lex_next(ls) != '{') goto err_xesc;
  ------------------
  |  Branch (222:6): [True: 156, False: 9.56k]
  ------------------
  223|  9.56k|	lex_next(ls);
  224|  9.56k|	c = 0;
  225|  38.8k|	do {
  226|  38.8k|	  c = (c << 4) | (ls->c & 15u);
  227|  38.8k|	  if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|  38.8k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  38.8k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (227:8): [True: 4.73k, False: 34.0k]
  ------------------
  228|  4.73k|	    if (!lj_char_isxdigit(ls->c)) goto err_xesc;
  ------------------
  |  |   29|  4.73k|#define lj_char_isxdigit(c)	lj_char_isa((c), LJ_CHAR_XDIGIT)
  |  |  ------------------
  |  |  |  |   24|  4.73k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (228:10): [True: 213, False: 4.52k]
  ------------------
  229|  4.52k|	    c += 9;
  230|  4.52k|	  }
  231|  38.5k|	  if (c >= 0x110000) goto err_xesc;  /* Out of Unicode range. */
  ------------------
  |  Branch (231:8): [True: 57, False: 38.5k]
  ------------------
  232|  38.5k|	} while (lex_next(ls) != '}');
  ------------------
  |  Branch (232:11): [True: 29.2k, False: 9.29k]
  ------------------
  233|  9.29k|	if (c < 0x800) {
  ------------------
  |  Branch (233:6): [True: 4.94k, False: 4.35k]
  ------------------
  234|  4.94k|	  if (c < 0x80) break;
  ------------------
  |  Branch (234:8): [True: 1.79k, False: 3.15k]
  ------------------
  235|  3.15k|	  lex_save(ls, 0xc0 | (c >> 6));
  236|  4.35k|	} else {
  237|  4.35k|	  if (c >= 0x10000) {
  ------------------
  |  Branch (237:8): [True: 2.15k, False: 2.20k]
  ------------------
  238|  2.15k|	    lex_save(ls, 0xf0 | (c >> 18));
  239|  2.15k|	    lex_save(ls, 0x80 | ((c >> 12) & 0x3f));
  240|  2.20k|	  } else {
  241|  2.20k|	    if (c >= 0xd800 && c < 0xe000) goto err_xesc;  /* No surrogates. */
  ------------------
  |  Branch (241:10): [True: 1.00k, False: 1.19k]
  |  Branch (241:25): [True: 41, False: 966]
  ------------------
  242|  2.15k|	    lex_save(ls, 0xe0 | (c >> 12));
  243|  2.15k|	  }
  244|  4.30k|	  lex_save(ls, 0x80 | ((c >> 6) & 0x3f));
  245|  4.30k|	}
  246|  7.46k|	c = 0x80 | (c & 0x3f);
  247|  7.46k|	break;
  248|  1.05k|      case 'z':  /* Skip whitespace. */
  ------------------
  |  Branch (248:7): [True: 1.05k, False: 28.1k]
  ------------------
  249|  1.05k|	lex_next(ls);
  250|  1.05k|	while (lj_char_isspace(ls->c))
  251|    793|	  if (lex_iseol(ls)) lex_newline(ls); else lex_next(ls);
  ------------------
  |  |   43|    793|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 296, False: 497]
  |  |  |  Branch (43:42): [True: 218, False: 279]
  |  |  ------------------
  ------------------
  252|  1.05k|	continue;
  253|  2.06k|      case '\n': case '\r': lex_save(ls, '\n'); lex_newline(ls); continue;
  ------------------
  |  Branch (253:7): [True: 1.68k, False: 27.5k]
  |  Branch (253:18): [True: 378, False: 28.8k]
  ------------------
  254|  7.96k|      case '\\': case '\"': case '\'': break;
  ------------------
  |  Branch (254:7): [True: 6.78k, False: 22.4k]
  |  Branch (254:18): [True: 197, False: 29.0k]
  |  Branch (254:29): [True: 990, False: 28.2k]
  ------------------
  255|     38|      case LEX_EOF: continue;
  ------------------
  |  |   42|     38|#define LEX_EOF			(-1)
  ------------------
  |  Branch (255:7): [True: 38, False: 29.1k]
  ------------------
  256|  3.50k|      default:
  ------------------
  |  Branch (256:7): [True: 3.50k, False: 25.7k]
  ------------------
  257|  3.50k|	if (!lj_char_isdigit(c))
  ------------------
  |  |   28|  3.50k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  3.50k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (257:6): [True: 77, False: 3.42k]
  ------------------
  258|     77|	  goto err_xesc;
  259|  3.42k|	c -= '0';  /* Decimal escape '\ddd'. */
  260|  3.42k|	if (lj_char_isdigit(lex_next(ls))) {
  ------------------
  |  |   28|  3.42k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  3.42k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 2.47k, False: 953]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  261|  2.47k|	  c = c*10 + (ls->c - '0');
  262|  2.47k|	  if (lj_char_isdigit(lex_next(ls))) {
  ------------------
  |  |   28|  2.47k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  2.47k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 2.03k, False: 439]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  263|  2.03k|	    c = c*10 + (ls->c - '0');
  264|  2.03k|	    if (c > 255) {
  ------------------
  |  Branch (264:10): [True: 89, False: 1.94k]
  ------------------
  265|    638|	    err_xesc:
  266|    638|	      lj_lex_error(ls, TK_string, LJ_ERR_XESC);
  267|     89|	    }
  268|  1.94k|	    lex_next(ls);
  269|  1.94k|	  }
  270|  2.47k|	}
  271|  3.33k|	lex_save(ls, c);
  272|  3.33k|	continue;
  273|  29.2k|      }
  274|  22.0k|      lex_save(ls, c);
  275|  22.0k|      lex_next(ls);
  276|  22.0k|      continue;
  277|  29.2k|      }
  278|   367k|    default:
  ------------------
  |  Branch (278:5): [True: 367k, False: 30.6k]
  ------------------
  279|   367k|      lex_savenext(ls);
  280|   367k|      break;
  281|   398k|    }
  282|   398k|  }
  283|   193k|  lex_savenext(ls);  /* Skip trailing delimiter. */
  284|   193k|  setstrV(ls->L, tv,
  285|   193k|	  lj_parse_keepstr(ls, ls->sb.b+1, sbuflen(&ls->sb)-2));
  ------------------
  |  |   36|   193k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  286|   193k|}
lj_lex.c:lex_save:
   70|  16.4M|{
   71|  16.4M|  lj_buf_putb(&ls->sb, c);
   72|  16.4M|}

lj_lib_register:
   77|  22.4k|{
   78|  22.4k|  GCtab *env = tabref(L->env);
  ------------------
  |  |  514|  22.4k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  22.4k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   79|  22.4k|  GCfunc *ofn = NULL;
   80|  22.4k|  int ffid = *p++;
   81|  22.4k|  BCIns *bcff = &L2GG(L)->bcff[*p++];
  ------------------
  |  |  114|  22.4k|#define L2GG(L)		(G2GG(G(L)))
  |  |  ------------------
  |  |  |  |  112|  22.4k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  22.4k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   82|  22.4k|  GCtab *tab = lib_create_table(L, libname, *p++);
   83|  22.4k|  ptrdiff_t tpos = L->top - L->base;
   84|       |
   85|       |  /* Avoid barriers further down. */
   86|  22.4k|  lj_gc_anybarriert(L, tab);
  ------------------
  |  |   95|  22.4k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  22.4k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 22.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   87|  22.4k|  tab->nomm = 0;
   88|       |
   89|   364k|  for (;;) {
   90|   364k|    uint32_t tag = *p++;
   91|   364k|    MSize len = tag & LIBINIT_LENMASK;
  ------------------
  |  |  102|   364k|#define LIBINIT_LENMASK	0x3f
  ------------------
   92|   364k|    tag &= LIBINIT_TAGMASK;
  ------------------
  |  |  103|   364k|#define LIBINIT_TAGMASK	0xc0
  ------------------
   93|   364k|    if (tag != LIBINIT_STRING) {
  ------------------
  |  |  107|   364k|#define LIBINIT_STRING	0xc0
  ------------------
  |  Branch (93:9): [True: 224k, False: 140k]
  ------------------
   94|   224k|      const char *name;
   95|   224k|      MSize nuv = (MSize)(L->top - L->base - tpos);
   96|   224k|      GCfunc *fn = lj_func_newC(L, nuv, env);
   97|   224k|      if (nuv) {
  ------------------
  |  Branch (97:11): [True: 0, False: 224k]
  ------------------
   98|      0|	L->top = L->base + tpos;
   99|      0|	memcpy(fn->c.upvalue, L->top, sizeof(TValue)*nuv);
  100|      0|      }
  101|   224k|      fn->c.ffid = (uint8_t)(ffid++);
  102|   224k|      name = (const char *)p;
  103|   224k|      p += len;
  104|   224k|      if (tag == LIBINIT_CF)
  ------------------
  |  |  104|   224k|#define LIBINIT_CF	0x00
  ------------------
  |  Branch (104:11): [True: 224k, False: 0]
  ------------------
  105|   224k|	setmref(fn->c.pc, &G(L)->bc_cfunc_int);
  ------------------
  |  |   39|   224k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  106|      0|      else
  107|      0|	setmref(fn->c.pc, bcff++);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|   224k|      if (tag == LIBINIT_ASM_)
  ------------------
  |  |  106|   224k|#define LIBINIT_ASM_	0x80
  ------------------
  |  Branch (108:11): [True: 0, False: 224k]
  ------------------
  109|      0|	fn->c.f = ofn->c.f;  /* Copy handler from previous function. */
  110|   224k|      else
  111|   224k|	fn->c.f = *cf++;  /* Get cf or handler from C function table. */
  112|   224k|      if (len) {
  ------------------
  |  Branch (112:11): [True: 224k, False: 0]
  ------------------
  113|       |	/* NOBARRIER: See above for common barrier. */
  114|   224k|	setfuncV(L, lj_tab_setstr(L, tab, lj_str_new(L, name, len)), fn);
  115|   224k|      }
  116|   224k|      ofn = fn;
  117|   224k|    } else {
  118|   140k|      switch (tag | len) {
  119|      0|      case LIBINIT_LUA:
  ------------------
  |  |  109|      0|#define LIBINIT_LUA	0xf9
  ------------------
  |  Branch (119:7): [True: 0, False: 140k]
  ------------------
  120|      0|	p = lib_read_lfunc(L, p, tab);
  121|      0|	break;
  122|  39.2k|      case LIBINIT_SET:
  ------------------
  |  |  110|  39.2k|#define LIBINIT_SET	0xfa
  ------------------
  |  Branch (122:7): [True: 39.2k, False: 100k]
  ------------------
  123|  39.2k|	L->top -= 2;
  124|  78.4k|	if (tvisstr(L->top+1) && strV(L->top+1)->len == 0)
  ------------------
  |  |  795|  78.4k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  39.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  39.2k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 39.2k, False: 0]
  |  |  ------------------
  ------------------
              	if (tvisstr(L->top+1) && strV(L->top+1)->len == 0)
  ------------------
  |  |  859|  39.2k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  39.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  39.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  39.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 39.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  39.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (124:27): [True: 11.2k, False: 28.0k]
  ------------------
  125|  11.2k|	  env = tabV(L->top);
  ------------------
  |  |  864|  11.2k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  11.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  11.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  11.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 11.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  11.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  126|  28.0k|	else  /* NOBARRIER: See above for common barrier. */
  127|  28.0k|	  copyTV(L, lj_tab_set(L, tab, L->top+1), L->top);
  128|  39.2k|	break;
  129|  39.2k|      case LIBINIT_NUMBER:
  ------------------
  |  |  111|      0|#define LIBINIT_NUMBER	0xfb
  ------------------
  |  Branch (129:7): [True: 0, False: 140k]
  ------------------
  130|      0|	memcpy(&L->top->n, p, sizeof(double));
  131|      0|	L->top++;
  132|      0|	p += sizeof(double);
  133|      0|	break;
  134|  33.6k|      case LIBINIT_COPY:
  ------------------
  |  |  112|  33.6k|#define LIBINIT_COPY	0xfc
  ------------------
  |  Branch (134:7): [True: 33.6k, False: 106k]
  ------------------
  135|  33.6k|	copyTV(L, L->top, L->top - *p++);
  136|  33.6k|	L->top++;
  137|  33.6k|	break;
  138|      0|      case LIBINIT_LASTCL:
  ------------------
  |  |  113|      0|#define LIBINIT_LASTCL	0xfd
  ------------------
  |  Branch (138:7): [True: 0, False: 140k]
  ------------------
  139|      0|	setfuncV(L, L->top++, ofn);
  140|      0|	break;
  141|      0|      case LIBINIT_FFID:
  ------------------
  |  |  114|      0|#define LIBINIT_FFID	0xfe
  ------------------
  |  Branch (141:7): [True: 0, False: 140k]
  ------------------
  142|      0|	ffid++;
  143|      0|	break;
  144|  22.4k|      case LIBINIT_END:
  ------------------
  |  |  115|  22.4k|#define LIBINIT_END	0xff
  ------------------
  |  Branch (144:7): [True: 22.4k, False: 117k]
  ------------------
  145|  22.4k|	return;
  146|  44.8k|      default:
  ------------------
  |  Branch (146:7): [True: 44.8k, False: 95.2k]
  ------------------
  147|  44.8k|	setstrV(L, L->top++, lj_str_new(L, (const char *)p, len));
  148|  44.8k|	p += len;
  149|  44.8k|	break;
  150|   140k|      }
  151|   140k|    }
  152|   364k|  }
  153|  22.4k|}
lj_lib.c:lib_create_table:
   32|  22.4k|{
   33|  22.4k|  if (libname) {
  ------------------
  |  Branch (33:7): [True: 0, False: 22.4k]
  ------------------
   34|      0|    luaL_findtable(L, LUA_REGISTRYINDEX, "_LOADED", 16);
  ------------------
  |  |   36|      0|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
   35|      0|    lua_getfield(L, -1, libname);
   36|      0|    if (!tvistab(L->top-1)) {
  ------------------
  |  |  800|      0|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|      0|#define LJ_TTAB			(~11u)
  |  |  ------------------
  ------------------
  |  Branch (36:9): [True: 0, False: 0]
  ------------------
   37|      0|      L->top--;
   38|      0|      if (luaL_findtable(L, LUA_GLOBALSINDEX, libname, hsize) != NULL)
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (38:11): [True: 0, False: 0]
  ------------------
   39|      0|	lj_err_callerv(L, LJ_ERR_BADMODN, libname);
   40|      0|      settabV(L, L->top, tabV(L->top-1));
  ------------------
  |  |  864|      0|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   41|      0|      L->top++;
   42|      0|      lua_setfield(L, -3, libname);  /* _LOADED[libname] = new table */
   43|      0|    }
   44|      0|    L->top--;
   45|      0|    settabV(L, L->top-1, tabV(L->top));
  ------------------
  |  |  864|      0|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   46|  22.4k|  } else {
   47|  22.4k|    lua_createtable(L, 0, hsize);
   48|  22.4k|  }
   49|  22.4k|  return tabV(L->top-1);
  ------------------
  |  |  864|  22.4k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  22.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  22.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  22.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 22.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  22.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   50|  22.4k|}

lua_loadx:
   64|  46.0k|{
   65|  46.0k|  LexState ls;
   66|  46.0k|  int status;
   67|  46.0k|  ls.rfunc = reader;
   68|  46.0k|  ls.rdata = data;
   69|  46.0k|  ls.chunkarg = chunkname ? chunkname : "?";
  ------------------
  |  Branch (69:17): [True: 46.0k, False: 0]
  ------------------
   70|  46.0k|  ls.mode = mode;
   71|  46.0k|  lj_buf_init(L, &ls.sb);
   72|  46.0k|  status = lj_vm_cpcall(L, NULL, &ls, cpparser);
   73|  46.0k|  lj_lex_cleanup(L, &ls);
   74|  46.0k|  lj_gc_check(L);
  ------------------
  |  |   66|  46.0k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  46.0k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 21, False: 45.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  46.0k|      lj_gc_step(L); }
  ------------------
   75|  46.0k|  return status;
   76|  46.0k|}
luaL_loadbufferx:
  153|  46.0k|{
  154|  46.0k|  StringReaderCtx ctx;
  155|  46.0k|  ctx.str = buf;
  156|  46.0k|  ctx.size = size;
  157|  46.0k|  return lua_loadx(L, reader_string, &ctx, name, mode);
  158|  46.0k|}
lj_load.c:cpparser:
   29|  46.0k|{
   30|  46.0k|  LexState *ls = (LexState *)ud;
   31|  46.0k|  GCproto *pt;
   32|  46.0k|  GCfunc *fn;
   33|  46.0k|  int bc;
   34|  46.0k|  UNUSED(dummy);
  ------------------
  |  |   91|  46.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
   35|  46.0k|  cframe_errfunc(L->cframe) = -1;  /* Inherit error function. */
  ------------------
  |  |  279|  46.0k|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|  46.0k|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
   36|  46.0k|  bc = lj_lex_setup(L, ls);
   37|  46.0k|  if (ls->mode) {
  ------------------
  |  Branch (37:7): [True: 46.0k, False: 1]
  ------------------
   38|  46.0k|    int xmode = 1;
   39|  46.0k|    const char *mode = ls->mode;
   40|  46.0k|    char c;
   41|  92.0k|    while ((c = *mode++)) {
  ------------------
  |  Branch (41:12): [True: 46.0k, False: 46.0k]
  ------------------
   42|  46.0k|      if (c == (bc ? 'b' : 't')) xmode = 0;
  ------------------
  |  Branch (42:11): [True: 46.0k, False: 3]
  |  Branch (42:17): [True: 3, False: 46.0k]
  ------------------
   43|  46.0k|      if (c == (LJ_FR2 ? 'W' : 'X')) ls->fr2 = !LJ_FR2;
  ------------------
  |  |  569|  46.0k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (c == (LJ_FR2 ? 'W' : 'X')) ls->fr2 = !LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  |  Branch (43:11): [True: 0, False: 46.0k]
  ------------------
   44|  46.0k|    }
   45|  46.0k|    if (xmode) {
  ------------------
  |  Branch (45:9): [True: 3, False: 46.0k]
  ------------------
   46|      3|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_XMODE));
   47|      3|      lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|      3|#define LUA_ERRSYNTAX	3
  ------------------
   48|      3|    }
   49|  46.0k|  }
   50|  46.0k|  pt = bc ? lj_bcread(ls) : lj_parse(ls);
  ------------------
  |  Branch (50:8): [True: 0, False: 46.0k]
  ------------------
   51|  46.0k|  if (ls->fr2 == LJ_FR2) {
  ------------------
  |  |  569|  46.0k|#define LJ_FR2			1
  ------------------
  |  Branch (51:7): [True: 3.17k, False: 42.8k]
  ------------------
   52|  3.17k|    fn = lj_func_newL_empty(L, pt, tabref(L->env));
  ------------------
  |  |  514|  3.17k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  3.17k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   53|       |    /* Don't combine above/below into one statement. */
   54|  3.17k|    setfuncV(L, L->top++, fn);
   55|  42.8k|  } else {
   56|       |    /* Non-native generation returns a dumpable, but non-runnable prototype. */
   57|  42.8k|    setprotoV(L, L->top++, pt);
   58|  42.8k|  }
   59|  46.0k|  return NULL;
   60|  46.0k|}
lj_load.c:reader_string:
  142|  67.2k|{
  143|  67.2k|  StringReaderCtx *ctx = (StringReaderCtx *)ud;
  144|  67.2k|  UNUSED(L);
  ------------------
  |  |   91|  67.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  145|  67.2k|  if (ctx->size == 0) return NULL;
  ------------------
  |  Branch (145:7): [True: 21.2k, False: 46.0k]
  ------------------
  146|  46.0k|  *size = ctx->size;
  147|  46.0k|  ctx->size = 0;
  148|  46.0k|  return ctx->str;
  149|  67.2k|}

lj_mcode_free:
  287|  46.0k|{
  288|  46.0k|  MCode *mc = J->mcarea;
  289|  46.0k|  J->mcarea = NULL;
  290|  46.0k|  J->szallmcarea = 0;
  291|  46.0k|  while (mc) {
  ------------------
  |  Branch (291:10): [True: 0, False: 46.0k]
  ------------------
  292|      0|    MCode *next = ((MCLink *)mc)->next;
  293|      0|    size_t sz = ((MCLink *)mc)->size;
  294|      0|    lj_err_deregister_mcode(mc, sz, (uint8_t *)mc + sizeof(MCLink));
  295|      0|    mcode_free(J, mc, sz);
  296|      0|    mc = next;
  297|      0|  }
  298|  46.0k|}

lj_meta_init:
   30|  46.0k|{
   31|  46.0k|#define MMNAME(name)	"__" #name
   32|  46.0k|  const char *metanames = MMDEF(MMNAME);
  ------------------
  |  |  557|  46.0k|  _(index) _(newindex) _(gc) _(mode) _(eq) _(len) \
  |  |  ------------------
  |  |  |  |   32|  46.0k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|  46.0k|#define MMNAME(name)	"__" #name
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  558|  46.0k|  /* Only the above (fast) metamethods are negative cached (max. 8). */ \
  |  |  559|  46.0k|  _(lt) _(le) _(concat) _(call) \
  |  |  560|  46.0k|  /* The following must be in ORDER ARITH. */ \
  |  |  561|  46.0k|  _(add) _(sub) _(mul) _(div) _(mod) _(pow) _(unm) \
  |  |  562|  46.0k|  /* The following are used in the standard libraries. */ \
  |  |  563|  46.0k|  _(metatable) _(tostring) MMDEF_FFI(_) MMDEF_PAIRS(_)
  |  |  ------------------
  |  |  |  |  549|  46.0k|#define MMDEF_PAIRS(_) _(pairs) _(ipairs)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  46.0k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   31|  46.0k|#define MMNAME(name)	"__" #name
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   33|  46.0k|#undef MMNAME
   34|  46.0k|  global_State *g = G(L);
  ------------------
  |  |  705|  46.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   35|  46.0k|  const char *p, *q;
   36|  46.0k|  uint32_t mm;
   37|  1.05M|  for (mm = 0, p = metanames; *p; mm++, p = q) {
  ------------------
  |  Branch (37:31): [True: 1.01M, False: 46.0k]
  ------------------
   38|  1.01M|    GCstr *s;
   39|  5.15M|    for (q = p+2; *q && *q != '_'; q++) ;
  ------------------
  |  Branch (39:19): [True: 5.10M, False: 46.0k]
  |  Branch (39:25): [True: 4.14M, False: 966k]
  ------------------
   40|  1.01M|    s = lj_str_new(L, p, (size_t)(q-p));
   41|       |    /* NOBARRIER: g->gcroot[] is a GC root. */
   42|  1.01M|    setgcref(g->gcroot[GCROOT_MMNAME+mm], obj2gco(s));
  ------------------
  |  |   72|  1.01M|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   43|  1.01M|  }
   44|  46.0k|}
lj_meta_cache:
   48|  14.1k|{
   49|  14.1k|  cTValue *mo = lj_tab_getstr(mt, name);
   50|  14.1k|  lj_assertX(mm <= MM_FAST, "bad metamethod %d", mm);
  ------------------
  |  |  366|  14.1k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  14.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 14.1k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  14.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   51|  14.1k|  if (!mo || tvisnil(mo)) {  /* No metamethod? */
  ------------------
  |  |  782|  14.1k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 14.1k]
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 0, False: 14.1k]
  ------------------
   52|      0|    mt->nomm |= (uint8_t)(1u<<mm);  /* Set negative cache flag. */
   53|      0|    return NULL;
   54|      0|  }
   55|  14.1k|  return mo;
   56|  14.1k|}
lj_meta_tset:
  162|  46.0k|{
  163|  46.0k|  TValue tmp;
  164|  46.0k|  int loop;
  165|  46.0k|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|  46.0k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (165:18): [True: 46.0k, False: 0]
  ------------------
  166|  46.0k|    cTValue *mo;
  167|  46.0k|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|  46.0k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 46.0k, False: 0]
  |  |  ------------------
  ------------------
  168|  46.0k|      GCtab *t = tabV(o);
  ------------------
  |  |  864|  46.0k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  46.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  46.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  169|      0|      cTValue *tv = lj_tab_get(L, t, k);
  170|  46.0k|      if (LJ_LIKELY(!tvisnil(tv))) {
  ------------------
  |  |  145|  46.0k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 46.0k]
  |  |  ------------------
  ------------------
  171|      0|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  172|      0|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|      0|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|      0|	return (TValue *)tv;
  174|  46.0k|      } else if (!(mo = lj_meta_fast(L, tabref(t->metatable), MM_newindex))) {
  ------------------
  |  |   22|  46.0k|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|  46.0k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 46.0k, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (174:18): [True: 46.0k, False: 0]
  ------------------
  175|  46.0k|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  176|  46.0k|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|  46.0k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  46.0k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 46.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|  46.0k|	if (tv != niltv(L))
  ------------------
  |  |  667|  46.0k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  46.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  46.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (177:6): [True: 0, False: 46.0k]
  ------------------
  178|      0|	  return (TValue *)tv;
  179|  46.0k|	if (tvisnil(k)) lj_err_msg(L, LJ_ERR_NILIDX);
  ------------------
  |  |  782|  46.0k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 46.0k]
  |  |  ------------------
  ------------------
  180|  46.0k|	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  803|  46.0k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  92.0k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [Folded - Ignored]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  181|  46.0k|	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  804|  92.0k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  46.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  46.0k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  46.0k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 46.0k]
  |  |  ------------------
  ------------------
              	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  812|      0|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  182|  46.0k|	return lj_tab_newkey(L, t, k);
  183|  46.0k|      }
  184|  46.0k|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_newindex))) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  185|      0|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  186|      0|      return NULL;  /* unreachable */
  187|      0|    }
  188|      0|    if (tvisfunc(mo)) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  189|      0|      L->top = mmcall(L, lj_cont_nop, mo, o, k);
  190|       |      /* L->top+2 = v filled in by caller. */
  191|      0|      return NULL;  /* Trigger metamethod call. */
  192|      0|    }
  193|      0|    copyTV(L, &tmp, mo);
  194|      0|    o = &tmp;
  195|      0|  }
  196|      0|  lj_err_msg(L, LJ_ERR_SETLOOP);
  197|      0|  return NULL;  /* unreachable */
  198|  46.0k|}

lj_obj_equal:
   24|  2.11M|{
   25|  2.11M|  if (itype(o1) == itype(o2)) {
  ------------------
  |  |  781|  2.11M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
                if (itype(o1) == itype(o2)) {
  ------------------
  |  |  781|  2.11M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  |  Branch (25:7): [True: 1.53M, False: 580k]
  ------------------
   26|  1.53M|    if (tvispri(o1))
  ------------------
  |  |  807|  1.53M|#define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  781|  1.53M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  283|  1.53M|#define LJ_TISPRI		LJ_TTRUE
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|  1.53M|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (807:20): [True: 1.07k, False: 1.53M]
  |  |  ------------------
  ------------------
   27|  1.07k|      return 1;
   28|  1.53M|    if (!tvisnum(o1))
  ------------------
  |  |  804|  1.53M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  1.53M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.53M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.53M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (28:9): [True: 1.41M, False: 122k]
  ------------------
   29|  1.41M|      return gcrefeq(o1->gcr, o2->gcr);
  ------------------
  |  |   70|  1.41M|#define gcrefeq(r1, r2)	((r1).gcptr64 == (r2).gcptr64)
  ------------------
   30|  1.53M|  } else if (!tvisnumber(o1) || !tvisnumber(o2)) {
  ------------------
  |  |  802|  1.16M|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   580k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   580k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   580k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                } else if (!tvisnumber(o1) || !tvisnumber(o2)) {
  ------------------
  |  |  802|  50.0k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  50.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  50.0k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  50.0k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (30:14): [True: 530k, False: 50.0k]
  |  Branch (30:33): [True: 26.7k, False: 23.2k]
  ------------------
   31|   557k|    return 0;
   32|   557k|  }
   33|   146k|  return numberVnum(o1) == numberVnum(o2);
   34|  2.11M|}

lj_state.c:setgcVraw:
  918|  92.0k|{
  919|  92.0k|#if LJ_GC64
  920|  92.0k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  92.0k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  92.0k|}
lj_state.c:setgcV:
  927|  92.0k|{
  928|  92.0k|  setgcVraw(o, v, it);
  929|  92.0k|  checklivetv(L, o, "store to dead GC object");
  930|  92.0k|}
lj_state.c:checklivetv:
  904|  92.0k|{
  905|  92.0k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  92.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  92.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  92.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  92.0k|#if LUA_USE_ASSERT
  907|  92.0k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  92.0k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  92.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  92.0k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  92.0k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  92.0k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  92.0k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  92.0k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 92.0k, False: 0]
  |  |  ------------------
  ------------------
  908|  92.0k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  92.0k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  92.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 92.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  92.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  92.0k|	       "mismatch of TValue type %d vs GC type %d",
  910|  92.0k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  92.0k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  92.0k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  92.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 92.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  92.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  92.0k|  }
  914|  92.0k|#endif
  915|  92.0k|}
lj_state.c:settabV:
  933|  46.0k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  46.0k|{ \
  935|  46.0k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  46.0k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  46.0k|}
lj_state.c:setthreadV:
  933|  46.0k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  46.0k|{ \
  935|  46.0k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  46.0k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  46.0k|}
lj_api.c:copyTV:
  975|   276k|{
  976|   276k|  *o1 = *o2;
  977|   276k|  checklivetv(L, o1, "copy of dead GC object");
  978|   276k|}
lj_api.c:checklivetv:
  904|   493k|{
  905|   493k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   493k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   493k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   493k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   493k|#if LUA_USE_ASSERT
  907|   493k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   493k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   493k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   493k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   493k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   493k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   493k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   493k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 447k, False: 46.0k]
  |  |  ------------------
  ------------------
  908|   447k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   447k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   447k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 447k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   447k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   447k|	       "mismatch of TValue type %d vs GC type %d",
  910|   447k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   447k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   447k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   447k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 447k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   447k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   447k|  }
  914|   493k|#endif
  915|   493k|}
lj_api.c:setstrV:
  933|   103k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   103k|{ \
  935|   103k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   103k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   103k|}
lj_api.c:setgcV:
  927|   217k|{
  928|   217k|  setgcVraw(o, v, it);
  929|   217k|  checklivetv(L, o, "store to dead GC object");
  930|   217k|}
lj_api.c:setfuncV:
  933|  46.0k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  46.0k|{ \
  935|  46.0k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  46.0k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  46.0k|}
lj_api.c:settabV:
  933|  68.4k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  68.4k|{ \
  935|  68.4k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  68.4k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  68.4k|}
lj_api.c:setgcVraw:
  918|   217k|{
  919|   217k|#if LJ_GC64
  920|   217k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   217k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   217k|}
lj_lex.c:setstrV:
  933|  2.96M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  2.96M|{ \
  935|  2.96M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  2.96M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  2.96M|}
lj_lex.c:setgcV:
  927|  2.96M|{
  928|  2.96M|  setgcVraw(o, v, it);
  929|  2.96M|  checklivetv(L, o, "store to dead GC object");
  930|  2.96M|}
lj_lex.c:setgcVraw:
  918|  2.96M|{
  919|  2.96M|#if LJ_GC64
  920|  2.96M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  2.96M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  2.96M|}
lj_lex.c:checklivetv:
  904|  2.96M|{
  905|  2.96M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  2.96M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  2.96M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  2.96M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  2.96M|#if LUA_USE_ASSERT
  907|  2.96M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  2.96M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  2.96M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  2.96M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  2.96M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  2.96M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  2.96M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  2.96M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 2.96M, False: 0]
  |  |  ------------------
  ------------------
  908|  2.96M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  2.96M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.96M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.96M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.96M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  2.96M|	       "mismatch of TValue type %d vs GC type %d",
  910|  2.96M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  2.96M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  2.96M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.96M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.96M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.96M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  2.96M|  }
  914|  2.96M|#endif
  915|  2.96M|}
lj_parse.c:setcdataV:
  933|  31.8k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  31.8k|{ \
  935|  31.8k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  31.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  31.8k|}
lj_parse.c:setgcV:
  927|  2.46M|{
  928|  2.46M|  setgcVraw(o, v, it);
  929|  2.46M|  checklivetv(L, o, "store to dead GC object");
  930|  2.46M|}
lj_parse.c:setgcVraw:
  918|  2.50M|{
  919|  2.50M|#if LJ_GC64
  920|  2.50M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  2.50M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  2.50M|}
lj_parse.c:checklivetv:
  904|  3.77M|{
  905|  3.77M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.77M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.77M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.77M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  3.77M|#if LUA_USE_ASSERT
  907|  3.77M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  3.77M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  3.77M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.77M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.77M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  3.77M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.77M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.77M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 2.49M, False: 1.27M]
  |  |  ------------------
  ------------------
  908|  2.49M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  2.49M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.49M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.49M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.49M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  2.49M|	       "mismatch of TValue type %d vs GC type %d",
  910|  2.49M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  2.49M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  2.49M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.49M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.49M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.49M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  2.49M|  }
  914|  3.77M|#endif
  915|  3.77M|}
lj_parse.c:setstrV:
  933|  46.0k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  46.0k|{ \
  935|  46.0k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  46.0k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  46.0k|}
lj_parse.c:settabV:
  933|   118k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   118k|{ \
  935|   118k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   118k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   118k|}
lj_parse.c:copyTV:
  975|  1.30M|{
  976|  1.30M|  *o1 = *o2;
  977|  1.30M|  checklivetv(L, o1, "copy of dead GC object");
  978|  1.30M|}
lj_parse.c:numberVnum:
 1029|  1.44M|{
 1030|  1.44M|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|  1.44M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1031|  1.44M|    return (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1032|  1.44M|  else
 1033|  1.44M|    return numV(o);
  ------------------
  |  |  866|  1.44M|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  1.44M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.44M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.44M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.44M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.44M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1034|  1.44M|}
lj_parse.c:setintV:
  951|  1.31M|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|  1.31M|  o->n = (lua_Number)i;
  956|  1.31M|#endif
  957|  1.31M|}
lj_load.c:setstrV:
  933|      3|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|      3|{ \
  935|      3|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|      3|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|      3|}
lj_load.c:setgcV:
  927|  3.18k|{
  928|  3.18k|  setgcVraw(o, v, it);
  929|  3.18k|  checklivetv(L, o, "store to dead GC object");
  930|  3.18k|}
lj_load.c:setgcVraw:
  918|  3.18k|{
  919|  3.18k|#if LJ_GC64
  920|  3.18k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  3.18k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  3.18k|}
lj_load.c:checklivetv:
  904|  3.18k|{
  905|  3.18k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.18k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.18k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.18k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  3.18k|#if LUA_USE_ASSERT
  907|  3.18k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  3.18k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  3.18k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.18k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.18k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  3.18k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.18k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.18k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 3.18k, False: 0]
  |  |  ------------------
  ------------------
  908|  3.18k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  3.18k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.18k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.18k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.18k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  3.18k|	       "mismatch of TValue type %d vs GC type %d",
  910|  3.18k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  3.18k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  3.18k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.18k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.18k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.18k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  3.18k|  }
  914|  3.18k|#endif
  915|  3.18k|}
lj_load.c:setfuncV:
  933|  3.17k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  3.17k|{ \
  935|  3.17k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  3.17k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  3.17k|}
lj_ctype.c:setstrV:
  933|  46.0k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  46.0k|{ \
  935|  46.0k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  46.0k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  46.0k|}
lj_ctype.c:setgcV:
  927|  46.0k|{
  928|  46.0k|  setgcVraw(o, v, it);
  929|  46.0k|  checklivetv(L, o, "store to dead GC object");
  930|  46.0k|}
lj_ctype.c:setgcVraw:
  918|  46.0k|{
  919|  46.0k|#if LJ_GC64
  920|  46.0k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  46.0k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  46.0k|}
lj_ctype.c:checklivetv:
  904|  46.0k|{
  905|  46.0k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  46.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  46.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  46.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  46.0k|#if LUA_USE_ASSERT
  907|  46.0k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  46.0k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  46.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  46.0k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  46.0k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  46.0k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  46.0k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  46.0k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 46.0k, False: 0]
  |  |  ------------------
  ------------------
  908|  46.0k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  46.0k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  46.0k|	       "mismatch of TValue type %d vs GC type %d",
  910|  46.0k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  46.0k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  46.0k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  46.0k|  }
  914|  46.0k|#endif
  915|  46.0k|}
lib_ffi.c:settabV:
  933|  11.2k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  11.2k|{ \
  935|  11.2k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  11.2k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  11.2k|}
lib_ffi.c:setgcV:
  927|  11.2k|{
  928|  11.2k|  setgcVraw(o, v, it);
  929|  11.2k|  checklivetv(L, o, "store to dead GC object");
  930|  11.2k|}
lib_ffi.c:setgcVraw:
  918|  11.2k|{
  919|  11.2k|#if LJ_GC64
  920|  11.2k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  11.2k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  11.2k|}
lib_ffi.c:checklivetv:
  904|  11.2k|{
  905|  11.2k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  11.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  11.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  11.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  11.2k|#if LUA_USE_ASSERT
  907|  11.2k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  11.2k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  11.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  11.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  11.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  11.2k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  11.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  11.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 11.2k, False: 0]
  |  |  ------------------
  ------------------
  908|  11.2k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  11.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  11.2k|	       "mismatch of TValue type %d vs GC type %d",
  910|  11.2k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  11.2k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  11.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  11.2k|  }
  914|  11.2k|#endif
  915|  11.2k|}
lj_gc.c:setgcV:
  927|  5.60k|{
  928|  5.60k|  setgcVraw(o, v, it);
  929|  5.60k|  checklivetv(L, o, "store to dead GC object");
  930|  5.60k|}
lj_gc.c:setgcVraw:
  918|  5.60k|{
  919|  5.60k|#if LJ_GC64
  920|  5.60k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  5.60k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  5.60k|}
lj_gc.c:checklivetv:
  904|  11.2k|{
  905|  11.2k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  11.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  11.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  11.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  11.2k|#if LUA_USE_ASSERT
  907|  11.2k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  11.2k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  11.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  11.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  11.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  11.2k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  11.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  11.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 11.2k, False: 0]
  |  |  ------------------
  ------------------
  908|  11.2k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  11.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  11.2k|	       "mismatch of TValue type %d vs GC type %d",
  910|  11.2k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  11.2k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  11.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  11.2k|  }
  914|  11.2k|#endif
  915|  11.2k|}
lj_gc.c:copyTV:
  975|  5.60k|{
  976|  5.60k|  *o1 = *o2;
  977|  5.60k|  checklivetv(L, o1, "copy of dead GC object");
  978|  5.60k|}
lj_err.c:checklivetv:
  904|  42.8k|{
  905|  42.8k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  42.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  42.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  42.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  42.8k|#if LUA_USE_ASSERT
  907|  42.8k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  42.8k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  42.8k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  42.8k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  42.8k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  42.8k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  42.8k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  42.8k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 42.8k, False: 0]
  |  |  ------------------
  ------------------
  908|  42.8k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  42.8k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  42.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 42.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  42.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  42.8k|	       "mismatch of TValue type %d vs GC type %d",
  910|  42.8k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  42.8k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  42.8k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  42.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 42.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  42.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  42.8k|  }
  914|  42.8k|#endif
  915|  42.8k|}
lj_err.c:copyTV:
  975|  42.8k|{
  976|  42.8k|  *o1 = *o2;
  977|  42.8k|  checklivetv(L, o1, "copy of dead GC object");
  978|  42.8k|}
lj_obj.c:numberVnum:
 1029|   292k|{
 1030|   292k|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|   292k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1031|   292k|    return (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1032|   292k|  else
 1033|   292k|    return numV(o);
  ------------------
  |  |  866|   292k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|   292k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   292k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   292k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 292k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   292k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1034|   292k|}
lj_tab.c:copyTV:
  975|  2.68M|{
  976|  2.68M|  *o1 = *o2;
  977|  2.68M|  checklivetv(L, o1, "copy of dead GC object");
  978|  2.68M|}
lj_tab.c:checklivetv:
  904|  5.88M|{
  905|  5.88M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  5.88M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  5.88M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  5.88M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  5.88M|#if LUA_USE_ASSERT
  907|  5.88M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  5.88M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  5.88M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  5.88M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  5.88M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  5.88M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  5.88M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  5.88M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 3.23M, False: 2.65M]
  |  |  ------------------
  ------------------
  908|  3.23M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  3.23M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.23M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.23M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.23M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  3.23M|	       "mismatch of TValue type %d vs GC type %d",
  910|  3.23M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  3.23M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  3.23M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.23M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.23M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.23M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  3.23M|  }
  914|  5.88M|#endif
  915|  5.88M|}
lj_tab.c:setstrV:
  933|  3.20M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  3.20M|{ \
  935|  3.20M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  3.20M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  3.20M|}
lj_tab.c:setgcV:
  927|  3.20M|{
  928|  3.20M|  setgcVraw(o, v, it);
  929|  3.20M|  checklivetv(L, o, "store to dead GC object");
  930|  3.20M|}
lj_tab.c:setgcVraw:
  918|  3.20M|{
  919|  3.20M|#if LJ_GC64
  920|  3.20M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  3.20M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  3.20M|}
lj_strfmt.c:checklivetv:
  904|   163k|{
  905|   163k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   163k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   163k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   163k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   163k|#if LUA_USE_ASSERT
  907|   163k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   163k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   163k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   163k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   163k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   163k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   163k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   163k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 163k, False: 0]
  |  |  ------------------
  ------------------
  908|   163k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   163k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   163k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 163k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   163k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   163k|	       "mismatch of TValue type %d vs GC type %d",
  910|   163k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   163k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   163k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   163k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 163k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   163k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   163k|  }
  914|   163k|#endif
  915|   163k|}
lj_strfmt.c:setstrV:
  933|   163k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   163k|{ \
  935|   163k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   163k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   163k|}
lj_strfmt.c:setgcV:
  927|   163k|{
  928|   163k|  setgcVraw(o, v, it);
  929|   163k|  checklivetv(L, o, "store to dead GC object");
  930|   163k|}
lj_strfmt.c:setgcVraw:
  918|   163k|{
  919|   163k|#if LJ_GC64
  920|   163k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   163k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   163k|}
lj_clib.c:setgcV:
  927|  5.60k|{
  928|  5.60k|  setgcVraw(o, v, it);
  929|  5.60k|  checklivetv(L, o, "store to dead GC object");
  930|  5.60k|}
lj_clib.c:setgcVraw:
  918|  5.60k|{
  919|  5.60k|#if LJ_GC64
  920|  5.60k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  5.60k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  5.60k|}
lj_clib.c:checklivetv:
  904|  5.60k|{
  905|  5.60k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  5.60k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  5.60k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  5.60k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  5.60k|#if LUA_USE_ASSERT
  907|  5.60k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  5.60k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  5.60k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  5.60k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  5.60k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  5.60k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  5.60k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  5.60k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 5.60k, False: 0]
  |  |  ------------------
  ------------------
  908|  5.60k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  5.60k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  5.60k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 5.60k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.60k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  5.60k|	       "mismatch of TValue type %d vs GC type %d",
  910|  5.60k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  5.60k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  5.60k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  5.60k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 5.60k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.60k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  5.60k|  }
  914|  5.60k|#endif
  915|  5.60k|}
lj_clib.c:setudataV:
  933|  5.60k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  5.60k|{ \
  935|  5.60k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  5.60k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  5.60k|}
lj_lib.c:setgcV:
  927|   268k|{
  928|   268k|  setgcVraw(o, v, it);
  929|   268k|  checklivetv(L, o, "store to dead GC object");
  930|   268k|}
lj_lib.c:setgcVraw:
  918|   268k|{
  919|   268k|#if LJ_GC64
  920|   268k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   268k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   268k|}
lj_lib.c:checklivetv:
  904|   330k|{
  905|   330k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   330k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   330k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   330k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   330k|#if LUA_USE_ASSERT
  907|   330k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   330k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   330k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   330k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   330k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   330k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   330k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   330k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 330k, False: 0]
  |  |  ------------------
  ------------------
  908|   330k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   330k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   330k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 330k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   330k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   330k|	       "mismatch of TValue type %d vs GC type %d",
  910|   330k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   330k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   330k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   330k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 330k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   330k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   330k|  }
  914|   330k|#endif
  915|   330k|}
lj_lib.c:setfuncV:
  933|   224k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   224k|{ \
  935|   224k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   224k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   224k|}
lj_lib.c:copyTV:
  975|  61.6k|{
  976|  61.6k|  *o1 = *o2;
  977|  61.6k|  checklivetv(L, o1, "copy of dead GC object");
  978|  61.6k|}
lj_lib.c:setstrV:
  933|  44.8k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  44.8k|{ \
  935|  44.8k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  44.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  44.8k|}

lj_parse_keepstr:
  240|  2.96M|{
  241|       |  /* NOBARRIER: the key is new or kept alive. */
  242|  2.96M|  lua_State *L = ls->L;
  243|  2.96M|  GCstr *s = lj_str_new(L, str, len);
  244|  2.96M|  TValue *tv = lj_tab_setstr(L, ls->fs->kt, s);
  245|  2.96M|  if (tvisnil(tv)) setboolV(tv, 1);
  ------------------
  |  |  782|  2.96M|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 958k, False: 2.00M]
  |  |  ------------------
  ------------------
                if (tvisnil(tv)) setboolV(tv, 1);
  ------------------
  |  |  874|   958k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  246|  2.96M|  lj_gc_check(L);
  ------------------
  |  |   66|  2.96M|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  2.96M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 13.5k, False: 2.95M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  2.96M|      lj_gc_step(L); }
  ------------------
  247|  2.96M|  return s;
  248|  2.96M|}
lj_parse_keepcdata:
  253|  31.8k|{
  254|       |  /* NOBARRIER: the key is new or kept alive. */
  255|  31.8k|  lua_State *L = ls->L;
  256|  31.8k|  setcdataV(L, tv, cd);
  257|  31.8k|  setboolV(lj_tab_set(L, ls->fs->kt, tv), 1);
  ------------------
  |  |  874|  31.8k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  258|  31.8k|}
lj_parse:
 2730|  46.0k|{
 2731|  46.0k|  FuncState fs;
 2732|  46.0k|  FuncScope bl;
 2733|  46.0k|  GCproto *pt;
 2734|  46.0k|  lua_State *L = ls->L;
 2735|       |#ifdef LUAJIT_DISABLE_DEBUGINFO
 2736|       |  ls->chunkname = lj_str_newlit(L, "=");
 2737|       |#else
 2738|  46.0k|  ls->chunkname = lj_str_newz(L, ls->chunkarg);
  ------------------
  |  |   27|  46.0k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
 2739|  46.0k|#endif
 2740|  46.0k|  setstrV(L, L->top, ls->chunkname);  /* Anchor chunkname string. */
 2741|  46.0k|  incr_top(L);
  ------------------
  |  |   12|  46.0k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  92.0k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 46.0k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2742|  46.0k|  ls->level = 0;
 2743|  46.0k|  fs_init(ls, &fs);
 2744|  46.0k|  fs.linedefined = 0;
 2745|  46.0k|  fs.numparams = 0;
 2746|  46.0k|  fs.bcbase = NULL;
 2747|  46.0k|  fs.bclim = 0;
 2748|  46.0k|  fs.flags |= PROTO_VARARG;  /* Main chunk is always a vararg func. */
  ------------------
  |  |  400|  46.0k|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
 2749|  46.0k|  fscope_begin(&fs, &bl, 0);
 2750|  46.0k|  bcemit_AD(&fs, BC_FUNCV, 0, 0);  /* Placeholder. */
  ------------------
  |  |  435|  46.0k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  46.0k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2751|  46.0k|  lj_lex_next(ls);  /* Read-ahead first token. */
 2752|  46.0k|  parse_chunk(ls);
 2753|  46.0k|  if (ls->tok != TK_eof)
  ------------------
  |  Branch (2753:7): [True: 71, False: 45.9k]
  ------------------
 2754|     71|    err_token(ls, TK_eof);
 2755|  45.9k|  pt = fs_finish(ls, ls->linenumber);
 2756|  45.9k|  L->top--;  /* Drop chunkname. */
 2757|  45.9k|  lj_assertL(fs.prev == NULL && ls->fs == NULL, "mismatched frame nesting");
  ------------------
  |  |  365|  45.9k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  49.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 3.17k, False: 42.7k]
  |  |  |  |  |  Branch (355:5): [True: 3.17k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  45.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 2758|  3.17k|  lj_assertL(pt->sizeuv == 0, "toplevel proto has upvalues");
  ------------------
  |  |  365|  3.17k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.17k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.17k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.17k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 2759|  3.17k|  return pt;
 2760|  3.17k|}
lj_parse.c:fs_init:
 1626|  84.7k|{
 1627|  84.7k|  lua_State *L = ls->L;
 1628|  84.7k|  fs->prev = ls->fs; ls->fs = fs;  /* Append to list. */
 1629|  84.7k|  fs->ls = ls;
 1630|  84.7k|  fs->vbase = ls->vtop;
 1631|  84.7k|  fs->L = L;
 1632|  84.7k|  fs->pc = 0;
 1633|  84.7k|  fs->lasttarget = 0;
 1634|  84.7k|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|  84.7k|#define NO_JMP		(~(BCPos)0)
  ------------------
 1635|  84.7k|  fs->freereg = 0;
 1636|  84.7k|  fs->nkgc = 0;
 1637|  84.7k|  fs->nkn = 0;
 1638|  84.7k|  fs->nactvar = 0;
 1639|  84.7k|  fs->nuv = 0;
 1640|  84.7k|  fs->bl = NULL;
 1641|  84.7k|  fs->flags = 0;
 1642|  84.7k|  fs->framesize = 1;  /* Minimum frame size. */
 1643|  84.7k|  fs->kt = lj_tab_new(L, 0, 0);
 1644|       |  /* Anchor table of constants in stack to avoid being collected. */
 1645|  84.7k|  settabV(L, L->top, fs->kt);
 1646|  84.7k|  incr_top(L);
  ------------------
  |  |   12|  84.7k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   169k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  84.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 58, False: 84.7k]
  |  |  |  Branch (12:38): [True: 0, False: 58]
  |  |  ------------------
  ------------------
 1647|  84.7k|}
lj_parse.c:fscope_begin:
 1283|   201k|{
 1284|   201k|  bl->nactvar = (uint8_t)fs->nactvar;
 1285|   201k|  bl->flags = flags;
 1286|   201k|  bl->vstart = fs->ls->vtop;
 1287|   201k|  bl->prev = fs->bl;
 1288|   201k|  fs->bl = bl;
 1289|   201k|  lj_assertFS(fs->freereg == fs->nactvar, "bad regalloc");
  ------------------
  |  |  167|   201k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   201k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   201k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 201k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   201k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1290|   201k|}
lj_parse.c:bcemit_INS:
  416|  8.96M|{
  417|  8.96M|  BCPos pc = fs->pc;
  418|  8.96M|  LexState *ls = fs->ls;
  419|  8.96M|  jmp_patchval(fs, fs->jpc, pc, NO_REG, pc);
  ------------------
  |  |   30|  8.96M|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  8.96M|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  420|  8.96M|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|  8.96M|#define NO_JMP		(~(BCPos)0)
  ------------------
  421|  8.96M|  if (LJ_UNLIKELY(pc >= fs->bclim)) {
  ------------------
  |  |  146|  8.96M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 154k, False: 8.80M]
  |  |  ------------------
  ------------------
  422|   154k|    ptrdiff_t base = fs->bcbase - ls->bcstack;
  423|   154k|    checklimit(fs, ls->sizebcstack, LJ_MAX_BCINS, "bytecode instructions");
  ------------------
  |  |  192|   154k|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
  424|   154k|    lj_mem_growvec(fs->L, ls->bcstack, ls->sizebcstack, LJ_MAX_BCINS,BCInsLine);
  ------------------
  |  |  129|   154k|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
  425|   154k|    fs->bclim = (BCPos)(ls->sizebcstack - base);
  426|   154k|    fs->bcbase = ls->bcstack + base;
  427|   154k|  }
  428|  8.96M|  fs->bcbase[pc].ins = ins;
  429|  8.96M|  fs->bcbase[pc].line = ls->lastline;
  430|  8.96M|  fs->pc = pc+1;
  431|  8.96M|  return pc;
  432|  8.96M|}
lj_parse.c:jmp_patchval:
  347|  10.6M|{
  348|  11.5M|  while (list != NO_JMP) {
  ------------------
  |  |   31|  11.5M|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (348:10): [True: 933k, False: 10.6M]
  ------------------
  349|   933k|    BCPos next = jmp_next(fs, list);
  350|   933k|    if (jmp_patchtestreg(fs, list, reg))
  ------------------
  |  Branch (350:9): [True: 137k, False: 795k]
  ------------------
  351|   137k|      jmp_patchins(fs, list, vtarget);  /* Jump to target with value. */
  352|   795k|    else
  353|   795k|      jmp_patchins(fs, list, dtarget);  /* Jump to default target. */
  354|   933k|    list = next;
  355|   933k|  }
  356|  10.6M|}
lj_parse.c:jmp_next:
  265|  1.82M|{
  266|  1.82M|  ptrdiff_t delta = bc_j(fs->bcbase[pc].ins);
  ------------------
  |  |   39|  1.82M|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|  1.82M|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|  1.82M|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  267|  1.82M|  if ((BCPos)delta == NO_JMP)
  ------------------
  |  |   31|  1.82M|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (267:7): [True: 1.04M, False: 778k]
  ------------------
  268|  1.04M|    return NO_JMP;
  ------------------
  |  |   31|  1.04M|#define NO_JMP		(~(BCPos)0)
  ------------------
  269|   778k|  else
  270|   778k|    return (BCPos)(((ptrdiff_t)pc+1)+delta);
  271|  1.82M|}
lj_parse.c:jmp_patchtestreg:
  286|   966k|{
  287|   966k|  BCInsLine *ilp = &fs->bcbase[pc >= 1 ? pc-1 : pc];
  ------------------
  |  Branch (287:32): [True: 966k, False: 0]
  ------------------
  288|   966k|  BCOp op = bc_op(ilp->ins);
  ------------------
  |  |   34|   966k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  289|   966k|  if (op == BC_ISTC || op == BC_ISFC) {
  ------------------
  |  Branch (289:7): [True: 63.0k, False: 903k]
  |  Branch (289:24): [True: 34.9k, False: 868k]
  ------------------
  290|  97.9k|    if (reg != NO_REG && reg != bc_d(ilp->ins)) {
  ------------------
  |  |   30|  97.9k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|   195k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
                  if (reg != NO_REG && reg != bc_d(ilp->ins)) {
  ------------------
  |  |   38|  76.8k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (290:9): [True: 76.8k, False: 21.1k]
  |  Branch (290:26): [True: 4.10k, False: 72.7k]
  ------------------
  291|  4.10k|      setbc_a(&ilp->ins, reg);
  ------------------
  |  |   45|  4.10k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  4.10k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  4.10k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  292|  93.8k|    } else {  /* Nothing to store or already in the right register. */
  293|  93.8k|      setbc_op(&ilp->ins, op+(BC_IST-BC_ISTC));
  ------------------
  |  |   44|  93.8k|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|  93.8k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  93.8k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  294|  93.8k|      setbc_a(&ilp->ins, 0);
  ------------------
  |  |   45|  93.8k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  93.8k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  93.8k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  295|  93.8k|    }
  296|   868k|  } else if (bc_a(ilp->ins) == NO_REG) {
  ------------------
  |  |   35|   868k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                } else if (bc_a(ilp->ins) == NO_REG) {
  ------------------
  |  |   30|   868k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|   868k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  |  Branch (296:14): [True: 55.0k, False: 813k]
  ------------------
  297|  55.0k|    if (reg == NO_REG) {
  ------------------
  |  |   30|  55.0k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  55.0k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  |  Branch (297:9): [True: 6.79k, False: 48.2k]
  ------------------
  298|  6.79k|      ilp->ins = BCINS_AJ(BC_JMP, bc_a(fs->bcbase[pc].ins), 0);
  ------------------
  |  |   57|  6.79k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  ------------------
  |  |  |  |   56|  6.79k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  299|  48.2k|    } else {
  300|  48.2k|      setbc_a(&ilp->ins, reg);
  ------------------
  |  |   45|  48.2k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  48.2k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  48.2k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  301|  48.2k|      if (reg >= bc_a(ilp[1].ins))
  ------------------
  |  |   35|  48.2k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  |  Branch (301:11): [True: 42.2k, False: 6.02k]
  ------------------
  302|  48.2k|	setbc_a(&ilp[1].ins, reg+1);
  ------------------
  |  |   45|  42.2k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  42.2k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  42.2k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  303|  48.2k|    }
  304|   813k|  } else {
  305|   813k|    return 0;  /* Cannot patch other instructions. */
  306|   813k|  }
  307|   153k|  return 1;
  308|   966k|}
lj_parse.c:jmp_patchins:
  319|  1.02M|{
  320|  1.02M|  BCIns *jmp = &fs->bcbase[pc].ins;
  321|  1.02M|  BCPos offset = dest-(pc+1)+BCBIAS_J;
  ------------------
  |  |   29|  1.02M|#define BCBIAS_J	0x8000
  ------------------
  322|  1.02M|  lj_assertFS(dest != NO_JMP, "uninitialized jump target");
  ------------------
  |  |  167|  1.02M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.02M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.02M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.02M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.02M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  323|  1.02M|  if (offset > BCMAX_D)
  ------------------
  |  |   28|  1.02M|#define BCMAX_D		0xffff
  ------------------
  |  Branch (323:7): [True: 0, False: 1.02M]
  ------------------
  324|      0|    err_syntax(fs->ls, LJ_ERR_XJUMP);
  325|  1.02M|  setbc_d(jmp, offset);
  ------------------
  |  |   49|  1.02M|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|  1.02M|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  ------------------
  326|  1.02M|}
lj_parse.c:err_syntax:
  175|  13.7k|{
  176|  13.7k|  lj_lex_error(ls, ls->tok, em);
  177|  13.7k|}
lj_parse.c:err_limit:
  185|     61|{
  186|     61|  if (fs->linedefined == 0)
  ------------------
  |  Branch (186:7): [True: 25, False: 36]
  ------------------
  187|     25|    lj_lex_error(fs->ls, 0, LJ_ERR_XLIMM, limit, what);
  188|     36|  else
  189|     36|    lj_lex_error(fs->ls, 0, LJ_ERR_XLIMF, fs->linedefined, limit, what);
  190|     61|}
lj_parse.c:parse_chunk:
 2714|   144k|{
 2715|   144k|  int islast = 0;
 2716|   144k|  synlevel_begin(ls);
 2717|   432k|  while (!islast && !parse_isend(ls->tok)) {
  ------------------
  |  Branch (2717:10): [True: 432k, False: 6]
  |  Branch (2717:21): [True: 392k, False: 39.8k]
  ------------------
 2718|   392k|    islast = parse_stmt(ls);
 2719|   392k|    lex_opt(ls, ';');
 2720|   392k|    lj_assertLS(ls->fs->framesize >= ls->fs->freereg &&
  ------------------
  |  |   89|   392k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   392k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   680k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 287k, False: 104k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 287k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   392k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2721|   392k|		ls->fs->freereg >= ls->fs->nactvar,
 2722|   392k|		"bad regalloc");
 2723|   287k|    ls->fs->freereg = ls->fs->nactvar;  /* Free registers after each stmt. */
 2724|   287k|  }
 2725|  39.8k|  synlevel_end(ls);
  ------------------
  |  | 2052|  39.8k|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2726|  39.8k|}
lj_parse.c:synlevel_begin:
 2047|  3.69M|{
 2048|  3.69M|  if (++ls->level >= LJ_MAX_XLEVEL)
  ------------------
  |  |   65|  3.69M|#define LJ_MAX_XLEVEL	200		/* Max. syntactic nesting level. */
  ------------------
  |  Branch (2048:7): [True: 43, False: 3.69M]
  ------------------
 2049|     43|    lj_lex_error(ls, 0, LJ_ERR_XLEVELS);
 2050|  3.69M|}
lj_parse.c:parse_isend:
 2324|   449k|{
 2325|   449k|  switch (tok) {
 2326|  41.3k|  case TK_else: case TK_elseif: case TK_end: case TK_until: case TK_eof:
  ------------------
  |  Branch (2326:3): [True: 40, False: 449k]
  |  Branch (2326:17): [True: 18, False: 449k]
  |  Branch (2326:33): [True: 36.9k, False: 412k]
  |  Branch (2326:46): [True: 172, False: 449k]
  |  Branch (2326:61): [True: 4.19k, False: 445k]
  ------------------
 2327|  41.3k|    return 1;
 2328|   408k|  default:
  ------------------
  |  Branch (2328:3): [True: 408k, False: 41.3k]
  ------------------
 2329|   408k|    return 0;
 2330|   449k|  }
 2331|   449k|}
lj_parse.c:parse_stmt:
 2656|   392k|{
 2657|   392k|  BCLine line = ls->linenumber;
 2658|   392k|  switch (ls->tok) {
 2659|     65|  case TK_if:
  ------------------
  |  Branch (2659:3): [True: 65, False: 392k]
  ------------------
 2660|     65|    parse_if(ls, line);
 2661|     65|    break;
 2662|      0|  case TK_while:
  ------------------
  |  Branch (2662:3): [True: 0, False: 392k]
  ------------------
 2663|      0|    parse_while(ls, line);
 2664|      0|    break;
 2665|  36.4k|  case TK_do:
  ------------------
  |  Branch (2665:3): [True: 36.4k, False: 356k]
  ------------------
 2666|  36.4k|    lj_lex_next(ls);
 2667|  36.4k|    parse_block(ls);
 2668|  36.4k|    lex_match(ls, TK_end, TK_do, line);
 2669|  36.4k|    break;
 2670|  28.0k|  case TK_for:
  ------------------
  |  Branch (2670:3): [True: 28.0k, False: 364k]
  ------------------
 2671|  28.0k|    parse_for(ls, line);
 2672|  28.0k|    break;
 2673|      0|  case TK_repeat:
  ------------------
  |  Branch (2673:3): [True: 0, False: 392k]
  ------------------
 2674|      0|    parse_repeat(ls, line);
 2675|      0|    break;
 2676|  2.09k|  case TK_function:
  ------------------
  |  Branch (2676:3): [True: 2.09k, False: 390k]
  ------------------
 2677|  2.09k|    parse_func(ls, line);
 2678|  2.09k|    break;
 2679|      0|  case TK_local:
  ------------------
  |  Branch (2679:3): [True: 0, False: 392k]
  ------------------
 2680|      0|    lj_lex_next(ls);
 2681|      0|    parse_local(ls);
 2682|      0|    break;
 2683|      0|  case TK_return:
  ------------------
  |  Branch (2683:3): [True: 0, False: 392k]
  ------------------
 2684|      0|    parse_return(ls);
 2685|      0|    return 1;  /* Must be last. */
 2686|      0|  case TK_break:
  ------------------
  |  Branch (2686:3): [True: 0, False: 392k]
  ------------------
 2687|      0|    lj_lex_next(ls);
 2688|      0|    parse_break(ls);
 2689|      0|    return !LJ_52;  /* Must be last in Lua 5.1. */
  ------------------
  |  |  697|      0|#define LJ_52			0
  ------------------
 2690|       |#if LJ_52
 2691|       |  case ';':
 2692|       |    lj_lex_next(ls);
 2693|       |    break;
 2694|       |#endif
 2695|  15.6k|  case TK_label:
  ------------------
  |  Branch (2695:3): [True: 15.6k, False: 376k]
  ------------------
 2696|  15.6k|    parse_label(ls);
 2697|  15.6k|    break;
 2698|  10.3k|  case TK_goto:
  ------------------
  |  Branch (2698:3): [True: 10.3k, False: 382k]
  ------------------
 2699|  10.3k|    if (LJ_52 || lj_lex_lookahead(ls) == TK_name) {
  ------------------
  |  |  697|  20.6k|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (2699:18): [True: 10.1k, False: 129]
  ------------------
 2700|  10.1k|      lj_lex_next(ls);
 2701|  10.1k|      parse_goto(ls);
 2702|  10.1k|      break;
 2703|  10.1k|    }
 2704|       |    /* fallthrough */
 2705|   300k|  default:
  ------------------
  |  Branch (2705:3): [True: 300k, False: 92.5k]
  ------------------
 2706|   300k|    parse_call_assign(ls);
 2707|   300k|    break;
 2708|   392k|  }
 2709|   287k|  return 0;
 2710|   392k|}
lj_parse.c:parse_if:
 2630|     65|{
 2631|     65|  FuncState *fs = ls->fs;
 2632|     65|  BCPos flist;
 2633|     65|  BCPos escapelist = NO_JMP;
  ------------------
  |  |   31|     65|#define NO_JMP		(~(BCPos)0)
  ------------------
 2634|     65|  flist = parse_then(ls);
 2635|     65|  while (ls->tok == TK_elseif) {  /* Parse multiple 'elseif' blocks. */
  ------------------
  |  Branch (2635:10): [True: 0, False: 65]
  ------------------
 2636|      0|    jmp_append(fs, &escapelist, bcemit_jmp(fs));
 2637|      0|    jmp_tohere(fs, flist);
 2638|      0|    flist = parse_then(ls);
 2639|      0|  }
 2640|     65|  if (ls->tok == TK_else) {  /* Parse optional 'else' block. */
  ------------------
  |  Branch (2640:7): [True: 0, False: 65]
  ------------------
 2641|      0|    jmp_append(fs, &escapelist, bcemit_jmp(fs));
 2642|      0|    jmp_tohere(fs, flist);
 2643|      0|    lj_lex_next(ls);  /* Skip 'else'. */
 2644|      0|    parse_block(ls);
 2645|     65|  } else {
 2646|     65|    jmp_append(fs, &escapelist, flist);
 2647|     65|  }
 2648|     65|  jmp_tohere(fs, escapelist);
 2649|     65|  lex_match(ls, TK_end, TK_if, line);
 2650|     65|}
lj_parse.c:parse_then:
 2619|     65|{
 2620|     65|  BCPos condexit;
 2621|     65|  lj_lex_next(ls);  /* Skip 'if' or 'elseif'. */
 2622|     65|  condexit = expr_cond(ls);
 2623|     65|  lex_check(ls, TK_then);
 2624|     65|  parse_block(ls);
 2625|     65|  return condexit;
 2626|     65|}
lj_parse.c:expr_cond:
 2150|     65|{
 2151|     65|  ExpDesc v;
 2152|     65|  expr(ls, &v);
 2153|     65|  if (v.k == VKNIL) v.k = VKFALSE;
  ------------------
  |  Branch (2153:7): [True: 1, False: 64]
  ------------------
 2154|     65|  bcemit_branch_t(ls->fs, &v);
 2155|     65|  return v.f;
 2156|     65|}
lj_parse.c:expr:
 2136|  2.00M|{
 2137|  2.00M|  expr_binop(ls, v, 0);  /* Priority 0: parse whole expression. */
 2138|  2.00M|}
lj_parse.c:expr_binop:
 2115|  3.55M|{
 2116|  3.55M|  BinOpr op;
 2117|  3.55M|  synlevel_begin(ls);
 2118|  3.55M|  expr_unop(ls, v);
 2119|  3.55M|  op = token2binop(ls->tok);
 2120|  4.98M|  while (op != OPR_NOBINOPR && priority[op].left > limit) {
  ------------------
  |  Branch (2120:10): [True: 2.47M, False: 2.50M]
  |  Branch (2120:32): [True: 1.43M, False: 1.04M]
  ------------------
 2121|  1.43M|    ExpDesc v2;
 2122|  1.43M|    BinOpr nextop;
 2123|  1.43M|    lj_lex_next(ls);
 2124|  1.43M|    bcemit_binop_left(ls->fs, op, v);
 2125|       |    /* Parse binary expression with higher priority. */
 2126|  1.43M|    nextop = expr_binop(ls, &v2, priority[op].right);
 2127|  1.43M|    bcemit_binop(ls->fs, op, v, &v2);
 2128|  1.43M|    op = nextop;
 2129|  1.43M|  }
 2130|  3.55M|  synlevel_end(ls);
  ------------------
  |  | 2052|  3.55M|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2131|  3.55M|  return op;  /* Return unconsumed binary operator (if any). */
 2132|  3.55M|}
lj_parse.c:expr_unop:
 2096|  3.55M|{
 2097|  3.55M|  BCOp op;
 2098|  3.55M|  if (ls->tok == TK_not) {
  ------------------
  |  Branch (2098:7): [True: 41.2k, False: 3.51M]
  ------------------
 2099|  41.2k|    op = BC_NOT;
 2100|  3.51M|  } else if (ls->tok == '-') {
  ------------------
  |  Branch (2100:14): [True: 58.5k, False: 3.45M]
  ------------------
 2101|  58.5k|    op = BC_UNM;
 2102|  3.45M|  } else if (ls->tok == '#') {
  ------------------
  |  Branch (2102:14): [True: 12.7k, False: 3.44M]
  ------------------
 2103|  12.7k|    op = BC_LEN;
 2104|  3.44M|  } else {
 2105|  3.44M|    expr_simple(ls, v);
 2106|  3.44M|    return;
 2107|  3.44M|  }
 2108|   112k|  lj_lex_next(ls);
 2109|   112k|  expr_binop(ls, v, UNARY_PRIORITY);
  ------------------
  |  | 2089|   112k|#define UNARY_PRIORITY		8  /* Priority for unary operators. */
  ------------------
 2110|   112k|  bcemit_unop(ls->fs, op, v);
 2111|   112k|}
lj_parse.c:expr_simple:
 2002|  3.44M|{
 2003|  3.44M|  switch (ls->tok) {
 2004|  1.30M|  case TK_number:
  ------------------
  |  Branch (2004:3): [True: 1.30M, False: 2.13M]
  ------------------
 2005|  1.30M|    expr_init(v, (LJ_HASFFI && tviscdata(&ls->tokval)) ? VKCDATA : VKNUM, 0);
  ------------------
  |  |  585|  2.61M|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  expr_init(v, (LJ_HASFFI && tviscdata(&ls->tokval)) ? VKCDATA : VKNUM, 0);
  ------------------
  |  |  799|  1.30M|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  1.30M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  1.30M|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 31.8k, False: 1.27M]
  |  |  ------------------
  ------------------
 2006|  1.30M|    copyTV(ls->L, &v->u.nval, &ls->tokval);
 2007|  1.30M|    break;
 2008|  92.9k|  case TK_string:
  ------------------
  |  Branch (2008:3): [True: 92.9k, False: 3.34M]
  ------------------
 2009|  92.9k|    expr_init(v, VKSTR, 0);
 2010|  92.9k|    v->u.sval = strV(&ls->tokval);
  ------------------
  |  |  859|  92.9k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  92.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  92.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  92.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 92.9k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  92.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2011|      0|    break;
 2012|  9.38k|  case TK_nil:
  ------------------
  |  Branch (2012:3): [True: 9.38k, False: 3.43M]
  ------------------
 2013|  9.38k|    expr_init(v, VKNIL, 0);
 2014|  9.38k|    break;
 2015|   147k|  case TK_true:
  ------------------
  |  Branch (2015:3): [True: 147k, False: 3.29M]
  ------------------
 2016|   147k|    expr_init(v, VKTRUE, 0);
 2017|   147k|    break;
 2018|    157|  case TK_false:
  ------------------
  |  Branch (2018:3): [True: 157, False: 3.44M]
  ------------------
 2019|    157|    expr_init(v, VKFALSE, 0);
 2020|    157|    break;
 2021|  2.81k|  case TK_dots: {  /* Vararg. */
  ------------------
  |  Branch (2021:3): [True: 2.81k, False: 3.43M]
  ------------------
 2022|  2.81k|    FuncState *fs = ls->fs;
 2023|  2.81k|    BCReg base;
 2024|  2.81k|    checkcond(ls, fs->flags & PROTO_VARARG, LJ_ERR_XDOTS);
  ------------------
  |  |  194|  2.81k|#define checkcond(ls, c, em)		{ if (!(c)) err_syntax(ls, em); }
  |  |  ------------------
  |  |  |  Branch (194:37): [True: 1, False: 2.81k]
  |  |  ------------------
  ------------------
 2025|  2.81k|    bcreg_reserve(fs, 1);
 2026|  2.81k|    base = fs->freereg-1;
 2027|  2.81k|    expr_init(v, VCALL, bcemit_ABC(fs, BC_VARG, base, 2, fs->numparams));
  ------------------
  |  |  434|  2.81k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|  2.81k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
 2028|  2.81k|    v->u.s.aux = base;
 2029|  2.81k|    break;
 2030|  2.81k|  }
 2031|  99.2k|  case '{':  /* Table constructor. */
  ------------------
  |  Branch (2031:3): [True: 99.2k, False: 3.34M]
  ------------------
 2032|  99.2k|    expr_table(ls, v);
 2033|  99.2k|    return;
 2034|  36.8k|  case TK_function:
  ------------------
  |  Branch (2034:3): [True: 36.8k, False: 3.40M]
  ------------------
 2035|  36.8k|    lj_lex_next(ls);
 2036|  36.8k|    parse_body(ls, v, 0, ls->linenumber);
 2037|  36.8k|    return;
 2038|  1.74M|  default:
  ------------------
  |  Branch (2038:3): [True: 1.74M, False: 1.69M]
  ------------------
 2039|  1.74M|    expr_primary(ls, v);
 2040|  1.74M|    return;
 2041|  3.44M|  }
 2042|  1.56M|  lj_lex_next(ls);
 2043|  1.56M|}
lj_parse.c:expr_init:
   84|  5.98M|{
   85|  5.98M|  e->k = k;
   86|  5.98M|  e->u.s.info = info;
   87|  5.98M|  e->f = e->t = NO_JMP;
  ------------------
  |  |   31|  5.98M|#define NO_JMP		(~(BCPos)0)
  ------------------
   88|  5.98M|}
lj_parse.c:bcreg_reserve:
  391|  4.91M|{
  392|  4.91M|  bcreg_bump(fs, n);
  393|  4.91M|  fs->freereg += n;
  394|  4.91M|}
lj_parse.c:bcreg_bump:
  380|  4.92M|{
  381|  4.92M|  BCReg sz = fs->freereg + n;
  382|  4.92M|  if (sz > fs->framesize) {
  ------------------
  |  Branch (382:7): [True: 928k, False: 3.99M]
  ------------------
  383|   928k|    if (sz >= LJ_MAX_SLOTS)
  ------------------
  |  |   67|   928k|#define LJ_MAX_SLOTS	250		/* Max. # of slots in a Lua func. */
  ------------------
  |  Branch (383:9): [True: 106, False: 928k]
  ------------------
  384|    106|      err_syntax(fs->ls, LJ_ERR_XSLOTS);
  385|   928k|    fs->framesize = (uint8_t)sz;
  386|   928k|  }
  387|  4.92M|}
lj_parse.c:expr_table:
 1729|   429k|{
 1730|   429k|  FuncState *fs = ls->fs;
 1731|   429k|  BCLine line = ls->linenumber;
 1732|   429k|  GCtab *t = NULL;
 1733|   429k|  int vcall = 0, needarr = 0, fixt = 0;
 1734|   429k|  uint32_t narr = 1;  /* First array index. */
 1735|   429k|  uint32_t nhash = 0;  /* Number of hash entries. */
 1736|   429k|  BCReg freg = fs->freereg;
 1737|   429k|  BCPos pc = bcemit_AD(fs, BC_TNEW, freg, 0);
  ------------------
  |  |  435|   429k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|   429k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1738|   429k|  expr_init(e, VNONRELOC, freg);
 1739|   429k|  bcreg_reserve(fs, 1);
 1740|   429k|  freg++;
 1741|   429k|  lex_check(ls, '{');
 1742|  1.41M|  while (ls->tok != '}') {
  ------------------
  |  Branch (1742:10): [True: 1.36M, False: 43.6k]
  ------------------
 1743|  1.36M|    ExpDesc key, val;
 1744|  1.36M|    vcall = 0;
 1745|  1.36M|    if (ls->tok == '[') {
  ------------------
  |  Branch (1745:9): [True: 13.0k, False: 1.35M]
  ------------------
 1746|  13.0k|      expr_bracket(ls, &key);  /* Already calls expr_toval. */
 1747|  13.0k|      if (!expr_isk(&key)) expr_index(fs, e, &key);
  ------------------
  |  |   73|  13.0k|#define expr_isk(e)		((e)->k <= VKLAST)
  ------------------
  |  Branch (1747:11): [True: 6.02k, False: 7.05k]
  ------------------
 1748|  13.0k|      if (expr_isnumk(&key) && expr_numiszero(&key)) needarr = 1; else nhash++;
  ------------------
  |  |   75|  26.1k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 1.81k, False: 11.2k]
  |  |  ------------------
  ------------------
  |  Branch (1748:32): [True: 194, False: 1.62k]
  ------------------
 1749|  13.0k|      lex_check(ls, '=');
 1750|  1.35M|    } else if ((ls->tok == TK_name || (!LJ_52 && ls->tok == TK_goto)) &&
  ------------------
  |  |  697|  1.33M|#define LJ_52			0
  ------------------
  |  Branch (1750:17): [True: 689k, False: 665k]
  |  Branch (1750:40): [Folded - Ignored]
  |  Branch (1750:50): [True: 7.45k, False: 657k]
  ------------------
 1751|  1.35M|	       lj_lex_lookahead(ls) == '=') {
  ------------------
  |  Branch (1751:9): [True: 44.1k, False: 652k]
  ------------------
 1752|  44.1k|      expr_str(ls, &key);
 1753|  44.1k|      lex_check(ls, '=');
 1754|  44.1k|      nhash++;
 1755|  1.31M|    } else {
 1756|  1.31M|      expr_init(&key, VKNUM, 0);
 1757|  1.31M|      setintV(&key.u.nval, (int)narr);
 1758|  1.31M|      narr++;
 1759|  1.31M|      needarr = vcall = 1;
 1760|  1.31M|    }
 1761|  1.36M|    expr(ls, &val);
 1762|  1.36M|    if (expr_isk(&key) && key.k != VKNIL &&
  ------------------
  |  |   73|  2.73M|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 1.16M, False: 199k]
  |  |  ------------------
  ------------------
  |  Branch (1762:27): [True: 1.16M, False: 876]
  ------------------
 1763|  1.36M|	(key.k == VKSTR || expr_isk_nojump(&val))) {
  ------------------
  |  |   74|  1.12M|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|  2.25M|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 471k, False: 655k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|   471k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 465k, False: 6.63k]
  |  |  ------------------
  ------------------
  |  Branch (1763:3): [True: 39.7k, False: 1.12M]
  ------------------
 1764|   504k|      TValue k, *v;
 1765|   504k|      if (!t) {  /* Create template table on demand. */
  ------------------
  |  Branch (1765:11): [True: 258k, False: 246k]
  ------------------
 1766|   258k|	BCReg kidx;
 1767|   258k|	t = lj_tab_new(fs->L, needarr ? narr : 0, hsize2hbits(nhash));
  ------------------
  |  |   53|   258k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|    784|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 19.6k, False: 238k]
  |  |  |  Branch (53:32): [True: 18.8k, False: 784]
  |  |  ------------------
  ------------------
  |  Branch (1767:24): [True: 240k, False: 17.5k]
  ------------------
 1768|   258k|	kidx = const_gc(fs, obj2gco(t), LJ_TTAB);
  ------------------
  |  |  775|   258k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
              	kidx = const_gc(fs, obj2gco(t), LJ_TTAB);
  ------------------
  |  |  271|   258k|#define LJ_TTAB			(~11u)
  ------------------
 1769|   258k|	fs->bcbase[pc].ins = BCINS_AD(BC_TDUP, freg-1, kidx);
  ------------------
  |  |   56|   258k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1770|   258k|      }
 1771|   504k|      vcall = 0;
 1772|   504k|      expr_kvalue(fs, &k, &key);
 1773|   504k|      v = lj_tab_set(fs->L, t, &k);
 1774|   504k|      lj_gc_anybarriert(fs->L, t);
  ------------------
  |  |   95|   504k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|   504k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 110, False: 504k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|    110|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    110|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1775|   504k|      if (expr_isk_nojump(&val)) {  /* Add const key/value to template table. */
  ------------------
  |  |   74|   504k|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|  1.00M|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 470k, False: 33.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|   470k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 470k, False: 277]
  |  |  ------------------
  ------------------
 1776|   470k|	expr_kvalue(fs, v, &val);
 1777|   470k|      } else {  /* Otherwise create dummy string key (avoids lj_tab_newkey). */
 1778|  34.2k|	settabV(fs->L, v, t);  /* Preserve key with table itself as value. */
 1779|  34.2k|	fixt = 1;   /* Fix this later, after all resizes. */
 1780|  34.2k|	goto nonconst;
 1781|  34.2k|      }
 1782|   862k|    } else {
 1783|   862k|    nonconst:
 1784|   698k|      if (val.k != VCALL) { expr_toanyreg(fs, &val); vcall = 0; }
  ------------------
  |  Branch (1784:11): [True: 578k, False: 120k]
  ------------------
 1785|   698k|      if (expr_isk(&key)) expr_index(fs, e, &key);
  ------------------
  |  |   73|   698k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 696k, False: 1.44k]
  |  |  ------------------
  ------------------
 1786|   698k|      bcemit_store(fs, e, &val);
 1787|   698k|    }
 1788|  1.16M|    fs->freereg = freg;
 1789|  1.16M|    if (!lex_opt(ls, ',') && !lex_opt(ls, ';')) break;
  ------------------
  |  Branch (1789:9): [True: 421k, False: 747k]
  |  Branch (1789:30): [True: 187k, False: 234k]
  ------------------
 1790|  1.16M|  }
 1791|   230k|  lex_match(ls, '}', '{', line);
 1792|   230k|  if (vcall) {
  ------------------
  |  Branch (1792:7): [True: 111k, False: 118k]
  ------------------
 1793|   111k|    BCInsLine *ilp = &fs->bcbase[fs->pc-1];
 1794|   111k|    ExpDesc en;
 1795|   111k|    lj_assertFS(bc_a(ilp->ins) == freg &&
  ------------------
  |  |  167|   111k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   111k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   447k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 51, False: 111k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 111k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 111k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   111k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1796|   111k|		bc_op(ilp->ins) == (narr > 256 ? BC_TSETV : BC_TSETB),
 1797|   111k|		"bad CALL code generation");
 1798|   111k|    expr_init(&en, VKNUM, 0);
 1799|   111k|    en.u.nval.u32.lo = narr-1;
 1800|   111k|    en.u.nval.u32.hi = 0x43300000;  /* Biased integer to avoid denormals. */
 1801|   111k|    if (narr > 256) { fs->pc--; ilp--; }
  ------------------
  |  Branch (1801:9): [True: 51, False: 111k]
  ------------------
 1802|   111k|    ilp->ins = BCINS_AD(BC_TSETM, freg, const_num(fs, &en));
  ------------------
  |  |   56|   111k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1803|   111k|    setbc_b(&ilp[-1].ins, 0);
  ------------------
  |  |   46|   111k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|   111k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|   111k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1804|   111k|  }
 1805|   230k|  if (pc == fs->pc-1) {  /* Make expr relocable if possible. */
  ------------------
  |  Branch (1805:7): [True: 51.6k, False: 179k]
  ------------------
 1806|  51.6k|    e->u.s.info = pc;
 1807|  51.6k|    fs->freereg--;
 1808|  51.6k|    e->k = VRELOCABLE;
 1809|   179k|  } else {
 1810|   179k|    e->k = VNONRELOC;  /* May have been changed by expr_index. */
 1811|   179k|  }
 1812|   230k|  if (!t) {  /* Construct TNEW RD: hhhhhaaaaaaaaaaa. */
  ------------------
  |  Branch (1812:7): [True: 68.5k, False: 162k]
  ------------------
 1813|  68.5k|    BCIns *ip = &fs->bcbase[pc].ins;
 1814|  68.5k|    if (!needarr) narr = 0;
  ------------------
  |  Branch (1814:9): [True: 37.2k, False: 31.3k]
  ------------------
 1815|  31.3k|    else if (narr < 3) narr = 3;
  ------------------
  |  Branch (1815:14): [True: 28.4k, False: 2.90k]
  ------------------
 1816|  2.90k|    else if (narr > 0x7ff) narr = 0x7ff;
  ------------------
  |  Branch (1816:14): [True: 0, False: 2.90k]
  ------------------
 1817|  68.5k|    setbc_d(ip, narr|(hsize2hbits(nhash)<<11));
  ------------------
  |  |   49|   138k|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|  68.5k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  |  |  |  Branch (49:58): [True: 295, False: 163]
  |  |  |  Branch (49:58): [True: 458, False: 68.0k]
  |  |  ------------------
  ------------------
 1818|   162k|  } else {
 1819|   162k|    if (needarr && t->asize < narr)
  ------------------
  |  Branch (1819:9): [True: 144k, False: 17.6k]
  |  Branch (1819:20): [True: 125k, False: 19.1k]
  ------------------
 1820|   125k|      lj_tab_reasize(fs->L, t, narr-1);
 1821|   162k|    if (fixt) {  /* Fix value for dummy keys in template table. */
  ------------------
  |  Branch (1821:9): [True: 12.1k, False: 150k]
  ------------------
 1822|  12.1k|      Node *node = noderef(t->node);
  ------------------
  |  |  515|  12.1k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  12.1k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1823|  12.1k|      uint32_t i, hmask = t->hmask;
 1824|  45.4k|      for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (1824:19): [True: 33.3k, False: 12.1k]
  ------------------
 1825|  33.3k|	Node *n = &node[i];
 1826|  33.3k|	if (tvistab(&n->val)) {
  ------------------
  |  |  800|  33.3k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|  33.3k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|  33.3k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 14.3k, False: 19.0k]
  |  |  ------------------
  ------------------
 1827|  14.3k|	  lj_assertFS(tabV(&n->val) == t, "bad dummy key in template table");
  ------------------
  |  |  167|  14.3k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  14.3k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  28.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 14.3k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 14.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  14.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1828|  14.3k|	  setnilV(&n->val);  /* Turn value into nil. */
  ------------------
  |  |  872|  14.3k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
 1829|  14.3k|	}
 1830|  33.3k|      }
 1831|  12.1k|    }
 1832|   162k|    lj_gc_check(fs->L);
  ------------------
  |  |   66|   162k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   162k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 2.12k, False: 160k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   162k|      lj_gc_step(L); }
  ------------------
 1833|   162k|  }
 1834|   230k|}
lj_parse.c:expr_bracket:
 1706|  40.1k|{
 1707|  40.1k|  lj_lex_next(ls);  /* Skip '['. */
 1708|  40.1k|  expr(ls, v);
 1709|  40.1k|  expr_toval(ls->fs, v);
 1710|  40.1k|  lex_check(ls, ']');
 1711|  40.1k|}
lj_parse.c:expr_toval:
  614|  2.22M|{
  615|  2.22M|  if (expr_hasjump(e))
  ------------------
  |  |   71|  2.22M|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (71:26): [True: 39.6k, False: 2.18M]
  |  |  ------------------
  ------------------
  616|  39.6k|    expr_toanyreg(fs, e);
  617|  2.18M|  else
  618|  2.18M|    expr_discharge(fs, e);
  619|  2.22M|}
lj_parse.c:expr_discharge:
  444|  15.1M|{
  445|  15.1M|  BCIns ins;
  446|  15.1M|  if (e->k == VUPVAL) {
  ------------------
  |  Branch (446:7): [True: 8.94k, False: 15.1M]
  ------------------
  447|  8.94k|    ins = BCINS_AD(BC_UGET, 0, e->u.s.info);
  ------------------
  |  |   56|  8.94k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  448|  15.1M|  } else if (e->k == VGLOBAL) {
  ------------------
  |  Branch (448:14): [True: 1.52M, False: 13.5M]
  ------------------
  449|  1.52M|    ins = BCINS_AD(BC_GGET, 0, const_str(fs, e));
  ------------------
  |  |   56|  1.52M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  450|  13.5M|  } else if (e->k == VINDEXED) {
  ------------------
  |  Branch (450:14): [True: 29.3k, False: 13.5M]
  ------------------
  451|  29.3k|    BCReg rc = e->u.s.aux;
  452|  29.3k|    if ((int32_t)rc < 0) {
  ------------------
  |  Branch (452:9): [True: 17.1k, False: 12.2k]
  ------------------
  453|  17.1k|      ins = BCINS_ABC(BC_TGETS, 0, e->u.s.info, ~rc);
  ------------------
  |  |   54|  17.1k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  454|  17.1k|    } else if (rc > BCMAX_C) {
  ------------------
  |  |   27|  12.2k|#define BCMAX_C		0xff
  ------------------
  |  Branch (454:16): [True: 508, False: 11.7k]
  ------------------
  455|    508|      ins = BCINS_ABC(BC_TGETB, 0, e->u.s.info, rc-(BCMAX_C+1));
  ------------------
  |  |   54|    508|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  456|  11.7k|    } else {
  457|  11.7k|      bcreg_free(fs, rc);
  458|  11.7k|      ins = BCINS_ABC(BC_TGETV, 0, e->u.s.info, rc);
  ------------------
  |  |   54|  11.7k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  459|  11.7k|    }
  460|  29.3k|    bcreg_free(fs, e->u.s.info);
  461|  13.5M|  } else if (e->k == VCALL) {
  ------------------
  |  Branch (461:14): [True: 332k, False: 13.2M]
  ------------------
  462|   332k|    e->u.s.info = e->u.s.aux;
  463|   332k|    e->k = VNONRELOC;
  464|   332k|    return;
  465|  13.2M|  } else if (e->k == VLOCAL) {
  ------------------
  |  Branch (465:14): [True: 110k, False: 13.1M]
  ------------------
  466|   110k|    e->k = VNONRELOC;
  467|   110k|    return;
  468|  13.1M|  } else {
  469|  13.1M|    return;
  470|  13.1M|  }
  471|  1.56M|  e->u.s.info = bcemit_INS(fs, ins);
  472|  1.56M|  e->k = VRELOCABLE;
  473|  1.56M|}
lj_parse.c:const_str:
  233|  1.95M|{
  234|  1.95M|  lj_assertFS(expr_isstrk(e) || e->k == VGLOBAL, "bad usage");
  ------------------
  |  |  167|  1.95M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.95M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.65M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 264k, False: 1.69M]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.69M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.95M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  235|  1.95M|  return const_gc(fs, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  775|  1.95M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                return const_gc(fs, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  264|  1.95M|#define LJ_TSTR			(~4u)
  ------------------
  236|  1.95M|}
lj_parse.c:bcreg_free:
  398|  1.47M|{
  399|  1.47M|  if (reg >= fs->nactvar) {
  ------------------
  |  Branch (399:7): [True: 1.38M, False: 90.0k]
  ------------------
  400|  1.38M|    fs->freereg--;
  401|  1.38M|    lj_assertFS(reg == fs->freereg, "bad regfree");
  ------------------
  |  |  167|  1.38M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.38M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.38M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.38M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.38M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  402|  1.38M|  }
  403|  1.47M|}
lj_parse.c:expr_index:
 1663|   750k|{
 1664|       |  /* Already called: expr_toval(fs, e). */
 1665|   750k|  t->k = VINDEXED;
 1666|   750k|  if (expr_isnumk(e)) {
  ------------------
  |  |   75|   750k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 663k, False: 86.9k]
  |  |  ------------------
  ------------------
 1667|       |#if LJ_DUALNUM
 1668|       |    if (tvisint(expr_numtv(e))) {
 1669|       |      int32_t k = intV(expr_numtv(e));
 1670|       |      if (checku8(k)) {
 1671|       |	t->u.s.aux = BCMAX_C+1+(uint32_t)k;  /* 256..511: const byte key */
 1672|       |	return;
 1673|       |      }
 1674|       |    }
 1675|       |#else
 1676|   663k|    lua_Number n = expr_numberV(e);
  ------------------
  |  |   80|   663k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|   663k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   663k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   663k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   663k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 663k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   663k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1677|   663k|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|   663k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
 1678|   663k|    if (checku8(k) && n == (lua_Number)k) {
  ------------------
  |  |  102|  1.32M|#define checku8(x)	((x) == (int32_t)(uint8_t)(x))
  |  |  ------------------
  |  |  |  Branch (102:20): [True: 596k, False: 67.3k]
  |  |  ------------------
  ------------------
  |  Branch (1678:23): [True: 596k, False: 243]
  ------------------
 1679|   596k|      t->u.s.aux = BCMAX_C+1+(uint32_t)k;  /* 256..511: const byte key */
  ------------------
  |  |   27|   596k|#define BCMAX_C		0xff
  ------------------
 1680|   596k|      return;
 1681|   596k|    }
 1682|   663k|#endif
 1683|   663k|  } else if (expr_isstrk(e)) {
  ------------------
  |  |   77|  86.9k|#define expr_isstrk(e)		((e)->k == VKSTR)
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 65.8k, False: 21.1k]
  |  |  ------------------
  ------------------
 1684|  65.8k|    BCReg idx = const_str(fs, e);
 1685|  65.8k|    if (idx <= BCMAX_C) {
  ------------------
  |  |   27|  65.8k|#define BCMAX_C		0xff
  ------------------
  |  Branch (1685:9): [True: 64.5k, False: 1.28k]
  ------------------
 1686|  64.5k|      t->u.s.aux = ~idx;  /* -256..-1: const string key */
 1687|  64.5k|      return;
 1688|  64.5k|    }
 1689|  65.8k|  }
 1690|  90.0k|  t->u.s.aux = expr_toanyreg(fs, e);  /* 0..255: register */
 1691|  90.0k|}
lj_parse.c:expr_numiszero:
   92|  34.3k|{
   93|  34.3k|  TValue *o = expr_numtv(e);
  ------------------
  |  |   79|  34.3k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  ------------------
  |  |  |  |  367|  34.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  34.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  34.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 34.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  34.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   94|  34.3k|  return tvisint(o) ? (intV(o) == 0) : tviszero(o);
  ------------------
  |  |  803|  34.3k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  68.6k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                return tvisint(o) ? (intV(o) == 0) : tviszero(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                return tvisint(o) ? (intV(o) == 0) : tviszero(o);
  ------------------
  |  |  814|  34.3k|#define tviszero(o)	(((o)->u64 << 1) == 0)
  ------------------
   95|  34.3k|}
lj_parse.c:expr_str:
 1656|  80.9k|{
 1657|  80.9k|  expr_init(e, VKSTR, 0);
 1658|  80.9k|  e->u.sval = lex_str(ls);
 1659|  80.9k|}
lj_parse.c:lex_str:
 1039|  2.17M|{
 1040|  2.17M|  GCstr *s;
 1041|  2.17M|  if (ls->tok != TK_name && (LJ_52 || ls->tok != TK_goto))
  ------------------
  |  |  697|  25.4k|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (1041:7): [True: 12.7k, False: 2.16M]
  |  Branch (1041:39): [True: 852, False: 11.8k]
  ------------------
 1042|    852|    err_token(ls, TK_name);
 1043|  2.17M|  s = strV(&ls->tokval);
  ------------------
  |  |  859|  2.17M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  2.17M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.17M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.17M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.17M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.17M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1044|      0|  lj_lex_next(ls);
 1045|  2.17M|  return s;
 1046|  2.17M|}
lj_parse.c:const_gc:
  219|  2.26M|{
  220|  2.26M|  lua_State *L = fs->L;
  221|  2.26M|  TValue key, *o;
  222|  2.26M|  setgcV(L, &key, gc, itype);
  223|       |  /* NOBARRIER: the key is new or kept alive. */
  224|  2.26M|  o = lj_tab_set(L, fs->kt, &key);
  225|  2.26M|  if (tvhaskslot(o))
  ------------------
  |  |  201|  2.26M|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 1.24M, False: 1.02M]
  |  |  ------------------
  ------------------
  226|  1.24M|    return tvkslot(o);
  ------------------
  |  |  202|  1.24M|#define tvkslot(o)	((o)->u32.lo)
  ------------------
  227|  1.02M|  o->u64 = fs->nkgc;
  228|  1.02M|  return fs->nkgc++;
  229|  2.26M|}
lj_parse.c:expr_kvalue:
 1715|   975k|{
 1716|   975k|  UNUSED(fs);
  ------------------
  |  |   91|   975k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1717|   975k|  if (e->k <= VKTRUE) {
  ------------------
  |  Branch (1717:7): [True: 6.32k, False: 969k]
  ------------------
 1718|  6.32k|    setpriV(v, ~(uint32_t)e->k);
  ------------------
  |  |  873|  6.32k|#define setpriV(o, x)		((o)->it64 = (int64_t)~((uint64_t)~(x)<<47))
  ------------------
 1719|   969k|  } else if (e->k == VKSTR) {
  ------------------
  |  Branch (1719:14): [True: 41.7k, False: 927k]
  ------------------
 1720|  41.7k|    setgcVraw(v, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  775|  41.7k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                  setgcVraw(v, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  264|  41.7k|#define LJ_TSTR			(~4u)
  ------------------
 1721|   927k|  } else {
 1722|   927k|    lj_assertFS(tvisnumber(expr_numtv(e)), "bad number constant");
  ------------------
  |  |  167|   927k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   927k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.85M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 927k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 927k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   927k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1723|   927k|    *v = *expr_numtv(e);
  ------------------
  |  |   79|   927k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  ------------------
  |  |  |  |  367|   927k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   927k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   927k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 927k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   927k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1724|   927k|  }
 1725|   975k|}
lj_parse.c:expr_toanyreg:
  599|  4.69M|{
  600|  4.69M|  expr_discharge(fs, e);
  601|  4.69M|  if (e->k == VNONRELOC) {
  ------------------
  |  Branch (601:7): [True: 1.99M, False: 2.69M]
  ------------------
  602|  1.99M|    if (!expr_hasjump(e)) return e->u.s.info;  /* Already in a register. */
  ------------------
  |  |   71|  1.99M|#define expr_hasjump(e)		((e)->t != (e)->f)
  ------------------
  |  Branch (602:9): [True: 1.95M, False: 37.5k]
  ------------------
  603|  37.5k|    if (e->u.s.info >= fs->nactvar) {
  ------------------
  |  Branch (603:9): [True: 16.6k, False: 20.8k]
  ------------------
  604|  16.6k|      expr_toreg(fs, e, e->u.s.info);  /* Discharge to temp. register. */
  605|  16.6k|      return e->u.s.info;
  606|  16.6k|    }
  607|  37.5k|  }
  608|  2.71M|  expr_tonextreg(fs, e);  /* Discharge to next register. */
  609|  2.71M|  return e->u.s.info;
  610|  4.69M|}
lj_parse.c:expr_toreg:
  565|  3.79M|{
  566|  3.79M|  expr_toreg_nobranch(fs, e, reg);
  567|  3.79M|  if (e->k == VJMP)
  ------------------
  |  Branch (567:7): [True: 733k, False: 3.06M]
  ------------------
  568|   733k|    jmp_append(fs, &e->t, e->u.s.info);  /* Add it to the true jump list. */
  569|  3.79M|  if (expr_hasjump(e)) {  /* Discharge expression with branches. */
  ------------------
  |  |   71|  3.79M|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (71:26): [True: 833k, False: 2.96M]
  |  |  ------------------
  ------------------
  570|   833k|    BCPos jend, jfalse = NO_JMP, jtrue = NO_JMP;
  ------------------
  |  |   31|   833k|#define NO_JMP		(~(BCPos)0)
  ------------------
                  BCPos jend, jfalse = NO_JMP, jtrue = NO_JMP;
  ------------------
  |  |   31|   833k|#define NO_JMP		(~(BCPos)0)
  ------------------
  571|   833k|    if (jmp_novalue(fs, e->t) || jmp_novalue(fs, e->f)) {
  ------------------
  |  Branch (571:9): [True: 751k, False: 82.6k]
  |  Branch (571:34): [True: 4.04k, False: 78.6k]
  ------------------
  572|   755k|      BCPos jval = (e->k == VJMP) ? NO_JMP : bcemit_jmp(fs);
  ------------------
  |  |   31|   733k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (572:20): [True: 733k, False: 21.6k]
  ------------------
  573|   755k|      jfalse = bcemit_AD(fs, BC_KPRI, reg, VKFALSE);
  ------------------
  |  |  435|   755k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|   755k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  574|   755k|      bcemit_AJ(fs, BC_JMP, fs->freereg, 1);
  ------------------
  |  |  436|   755k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|   755k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   755k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  575|   755k|      jtrue = bcemit_AD(fs, BC_KPRI, reg, VKTRUE);
  ------------------
  |  |  435|   755k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|   755k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  576|   755k|      jmp_tohere(fs, jval);
  577|   755k|    }
  578|   833k|    jend = fs->pc;
  579|   833k|    fs->lasttarget = jend;
  580|   833k|    jmp_patchval(fs, e->f, jend, reg, jfalse);
  581|   833k|    jmp_patchval(fs, e->t, jend, reg, jtrue);
  582|   833k|  }
  583|  3.79M|  e->f = e->t = NO_JMP;
  ------------------
  |  |   31|  3.79M|#define NO_JMP		(~(BCPos)0)
  ------------------
  584|  3.79M|  e->u.s.info = reg;
  585|  3.79M|  e->k = VNONRELOC;
  586|  3.79M|}
lj_parse.c:expr_toreg_nobranch:
  513|  3.95M|{
  514|  3.95M|  BCIns ins;
  515|  3.95M|  expr_discharge(fs, e);
  516|  3.95M|  if (e->k == VKSTR) {
  ------------------
  |  Branch (516:7): [True: 192k, False: 3.75M]
  ------------------
  517|   192k|    ins = BCINS_AD(BC_KSTR, reg, const_str(fs, e));
  ------------------
  |  |   56|   192k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  518|  3.75M|  } else if (e->k == VKNUM) {
  ------------------
  |  Branch (518:14): [True: 507k, False: 3.25M]
  ------------------
  519|       |#if LJ_DUALNUM
  520|       |    cTValue *tv = expr_numtv(e);
  521|       |    if (tvisint(tv) && checki16(intV(tv)))
  522|       |      ins = BCINS_AD(BC_KSHORT, reg, (BCReg)(uint16_t)intV(tv));
  523|       |    else
  524|       |#else
  525|   507k|    lua_Number n = expr_numberV(e);
  ------------------
  |  |   80|   507k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|   507k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   507k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   507k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   507k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 507k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   507k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  526|   507k|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|   507k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  527|   507k|    if (checki16(k) && n == (lua_Number)k)
  ------------------
  |  |  103|  1.01M|#define checki16(x)	((x) == (int32_t)(int16_t)(x))
  |  |  ------------------
  |  |  |  Branch (103:21): [True: 494k, False: 12.8k]
  |  |  ------------------
  ------------------
  |  Branch (527:24): [True: 467k, False: 27.3k]
  ------------------
  528|   467k|      ins = BCINS_AD(BC_KSHORT, reg, (BCReg)(uint16_t)k);
  ------------------
  |  |   56|   467k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  529|  40.2k|    else
  530|  40.2k|#endif
  531|  40.2k|      ins = BCINS_AD(BC_KNUM, reg, const_num(fs, e));
  ------------------
  |  |   56|  40.2k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  532|   507k|#if LJ_HASFFI
  533|  3.25M|  } else if (e->k == VKCDATA) {
  ------------------
  |  Branch (533:14): [True: 29.1k, False: 3.22M]
  ------------------
  534|  29.1k|    fs->flags |= PROTO_FFI;
  ------------------
  |  |  401|  29.1k|#define PROTO_FFI		0x04	/* Uses BC_KCDATA for FFI datatypes. */
  ------------------
  535|  29.1k|    ins = BCINS_AD(BC_KCDATA, reg,
  ------------------
  |  |   56|  58.3k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 29.1k, False: 0]
  |  |  ------------------
  ------------------
  536|  29.1k|		   const_gc(fs, obj2gco(cdataV(&e->u.nval)), LJ_TCDATA));
  537|  29.1k|#endif
  538|  3.22M|  } else if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (538:14): [True: 2.03M, False: 1.18M]
  ------------------
  539|  2.03M|    setbc_a(bcptr(fs, e), reg);
  ------------------
  |  |   45|  2.03M|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  2.03M|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  2.03M|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  540|  2.03M|    goto noins;
  541|  2.03M|  } else if (e->k == VNONRELOC) {
  ------------------
  |  Branch (541:14): [True: 294k, False: 895k]
  ------------------
  542|   294k|    if (reg == e->u.s.info)
  ------------------
  |  Branch (542:9): [True: 237k, False: 56.3k]
  ------------------
  543|   237k|      goto noins;
  544|  56.3k|    ins = BCINS_AD(BC_MOV, reg, e->u.s.info);
  ------------------
  |  |   56|  56.3k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  545|   895k|  } else if (e->k == VKNIL) {
  ------------------
  |  Branch (545:14): [True: 8.48k, False: 887k]
  ------------------
  546|  8.48k|    bcemit_nil(fs, reg, 1);
  547|  8.48k|    goto noins;
  548|   887k|  } else if (e->k <= VKTRUE) {
  ------------------
  |  Branch (548:14): [True: 153k, False: 733k]
  ------------------
  549|   153k|    ins = BCINS_AD(BC_KPRI, reg, const_pri(e));
  ------------------
  |  |   56|   307k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 153k, False: 0]
  |  |  ------------------
  ------------------
  550|   733k|  } else {
  551|   733k|    lj_assertFS(e->k == VVOID || e->k == VJMP, "bad expr type %d", e->k);
  ------------------
  |  |  167|   733k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   733k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.46M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 733k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 733k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   733k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  552|   733k|    return;
  553|   733k|  }
  554|   939k|  bcemit_INS(fs, ins);
  555|  3.21M|noins:
  556|  3.21M|  e->u.s.info = reg;
  557|  3.21M|  e->k = VNONRELOC;
  558|  3.21M|}
lj_parse.c:bcemit_nil:
  477|  20.3k|{
  478|  20.3k|  if (fs->pc > fs->lasttarget) {  /* No jumps to current position? */
  ------------------
  |  Branch (478:7): [True: 19.2k, False: 1.08k]
  ------------------
  479|  19.2k|    BCIns *ip = &fs->bcbase[fs->pc-1].ins;
  480|  19.2k|    BCReg pto, pfrom = bc_a(*ip);
  ------------------
  |  |   35|  19.2k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  481|  19.2k|    switch (bc_op(*ip)) {  /* Try to merge with the previous instruction. */
  ------------------
  |  |   34|  19.2k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  482|  3.11k|    case BC_KPRI:
  ------------------
  |  Branch (482:5): [True: 3.11k, False: 16.1k]
  ------------------
  483|  3.11k|      if (bc_d(*ip) != ~LJ_TNIL) break;
  ------------------
  |  |   38|  3.11k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
                    if (bc_d(*ip) != ~LJ_TNIL) break;
  ------------------
  |  |  260|  3.11k|#define LJ_TNIL			(~0u)
  ------------------
  |  Branch (483:11): [True: 69, False: 3.04k]
  ------------------
  484|  3.04k|      if (from == pfrom) {
  ------------------
  |  Branch (484:11): [True: 118, False: 2.93k]
  ------------------
  485|    118|	if (n == 1) return;
  ------------------
  |  Branch (485:6): [True: 118, False: 0]
  ------------------
  486|  2.93k|      } else if (from == pfrom+1) {
  ------------------
  |  Branch (486:18): [True: 1.54k, False: 1.38k]
  ------------------
  487|  1.54k|	from = pfrom;
  488|  1.54k|	n++;
  489|  1.54k|      } else {
  490|  1.38k|	break;
  491|  1.38k|      }
  492|  1.54k|      *ip = BCINS_AD(BC_KNIL, from, from+n-1);  /* Replace KPRI. */
  ------------------
  |  |   56|  1.54k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  493|  1.54k|      return;
  494|  1.28k|    case BC_KNIL:
  ------------------
  |  Branch (494:5): [True: 1.28k, False: 17.9k]
  ------------------
  495|  1.28k|      pto = bc_d(*ip);
  ------------------
  |  |   38|  1.28k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  496|  1.28k|      if (pfrom <= from && from <= pto+1) {  /* Can we connect both ranges? */
  ------------------
  |  Branch (496:11): [True: 1.28k, False: 0]
  |  Branch (496:28): [True: 230, False: 1.05k]
  ------------------
  497|    230|	if (from+n-1 > pto)
  ------------------
  |  Branch (497:6): [True: 154, False: 76]
  ------------------
  498|    154|	  setbc_d(ip, from+n-1);  /* Patch previous instruction range. */
  ------------------
  |  |   49|    154|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|    154|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  ------------------
  499|    230|	return;
  500|    230|      }
  501|  1.05k|      break;
  502|  14.8k|    default:
  ------------------
  |  Branch (502:5): [True: 14.8k, False: 4.40k]
  ------------------
  503|  14.8k|      break;
  504|  19.2k|    }
  505|  19.2k|  }
  506|       |  /* Emit new instruction or replace old instruction. */
  507|  18.4k|  bcemit_INS(fs, n == 1 ? BCINS_AD(BC_KPRI, from, VKNIL) :
  ------------------
  |  |   56|  12.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  |  Branch (507:18): [True: 12.8k, False: 5.53k]
  ------------------
  508|  18.4k|			  BCINS_AD(BC_KNIL, from, from+n-1));
  ------------------
  |  |   56|  5.53k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  509|  18.4k|}
lj_parse.c:jmp_novalue:
  275|   916k|{
  276|  1.03M|  for (; list != NO_JMP; list = jmp_next(fs, list)) {
  ------------------
  |  |   31|  1.03M|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (276:10): [True: 874k, False: 161k]
  ------------------
  277|   874k|    BCIns p = fs->bcbase[list >= 1 ? list-1 : list].ins;
  ------------------
  |  Branch (277:26): [True: 874k, False: 0]
  ------------------
  278|   874k|    if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   34|   874k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
                  if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   34|   822k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
                  if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   35|   801k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                  if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   30|   801k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|   801k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  |  Branch (278:11): [True: 52.3k, False: 822k]
  |  Branch (278:34): [True: 20.9k, False: 801k]
  |  Branch (278:57): [True: 45.8k, False: 755k]
  ------------------
  279|   755k|      return 1;
  280|   874k|  }
  281|   161k|  return 0;
  282|   916k|}
lj_parse.c:expr_tonextreg:
  590|  3.74M|{
  591|  3.74M|  expr_discharge(fs, e);
  592|  3.74M|  expr_free(fs, e);
  593|  3.74M|  bcreg_reserve(fs, 1);
  594|  3.74M|  expr_toreg(fs, e, fs->freereg - 1);
  595|  3.74M|}
lj_parse.c:expr_free:
  407|  4.91M|{
  408|  4.91M|  if (e->k == VNONRELOC)
  ------------------
  |  Branch (408:7): [True: 1.38M, False: 3.52M]
  ------------------
  409|  1.38M|    bcreg_free(fs, e->u.s.info);
  410|  4.91M|}
lj_parse.c:bcemit_store:
  623|   971k|{
  624|   971k|  BCIns ins;
  625|   971k|  if (var->k == VLOCAL) {
  ------------------
  |  Branch (625:7): [True: 34.0k, False: 937k]
  ------------------
  626|  34.0k|    fs->ls->vstack[var->u.s.aux].info |= VSTACK_VAR_RW;
  ------------------
  |  |  118|  34.0k|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  627|  34.0k|    expr_free(fs, e);
  628|  34.0k|    expr_toreg(fs, e, var->u.s.info);
  629|  34.0k|    return;
  630|   937k|  } else if (var->k == VUPVAL) {
  ------------------
  |  Branch (630:14): [True: 59.7k, False: 877k]
  ------------------
  631|  59.7k|    fs->ls->vstack[var->u.s.aux].info |= VSTACK_VAR_RW;
  ------------------
  |  |  118|  59.7k|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  632|  59.7k|    expr_toval(fs, e);
  633|  59.7k|    if (e->k <= VKTRUE)
  ------------------
  |  Branch (633:9): [True: 156, False: 59.6k]
  ------------------
  634|    156|      ins = BCINS_AD(BC_USETP, var->u.s.info, const_pri(e));
  ------------------
  |  |   56|    312|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 156, False: 0]
  |  |  ------------------
  ------------------
  635|  59.6k|    else if (e->k == VKSTR)
  ------------------
  |  Branch (635:14): [True: 388, False: 59.2k]
  ------------------
  636|    388|      ins = BCINS_AD(BC_USETS, var->u.s.info, const_str(fs, e));
  ------------------
  |  |   56|    388|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  637|  59.2k|    else if (e->k == VKNUM)
  ------------------
  |  Branch (637:14): [True: 23.4k, False: 35.8k]
  ------------------
  638|  23.4k|      ins = BCINS_AD(BC_USETN, var->u.s.info, const_num(fs, e));
  ------------------
  |  |   56|  23.4k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  639|  35.8k|    else
  640|  35.8k|      ins = BCINS_AD(BC_USETV, var->u.s.info, expr_toanyreg(fs, e));
  ------------------
  |  |   56|  35.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  641|   877k|  } else if (var->k == VGLOBAL) {
  ------------------
  |  Branch (641:14): [True: 167k, False: 709k]
  ------------------
  642|   167k|    BCReg ra = expr_toanyreg(fs, e);
  643|   167k|    ins = BCINS_AD(BC_GSET, ra, const_str(fs, var));
  ------------------
  |  |   56|   167k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  644|   709k|  } else {
  645|   709k|    BCReg ra, rc;
  646|   709k|    lj_assertFS(var->k == VINDEXED, "bad expr type %d", var->k);
  ------------------
  |  |  167|   709k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   709k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   709k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 709k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   709k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  647|   709k|    ra = expr_toanyreg(fs, e);
  648|   709k|    rc = var->u.s.aux;
  649|   709k|    if ((int32_t)rc < 0) {
  ------------------
  |  Branch (649:9): [True: 43.9k, False: 665k]
  ------------------
  650|  43.9k|      ins = BCINS_ABC(BC_TSETS, ra, var->u.s.info, ~rc);
  ------------------
  |  |   54|  43.9k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  651|   665k|    } else if (rc > BCMAX_C) {
  ------------------
  |  |   27|   665k|#define BCMAX_C		0xff
  ------------------
  |  Branch (651:16): [True: 595k, False: 70.4k]
  ------------------
  652|   595k|      ins = BCINS_ABC(BC_TSETB, ra, var->u.s.info, rc-(BCMAX_C+1));
  ------------------
  |  |   54|   595k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  653|   595k|    } else {
  654|  70.4k|#ifdef LUA_USE_ASSERT
  655|       |      /* Free late alloced key reg to avoid assert on free of value reg. */
  656|       |      /* This can only happen when called from expr_table(). */
  657|  70.4k|      if (e->k == VNONRELOC && ra >= fs->nactvar && rc >= ra)
  ------------------
  |  Branch (657:11): [True: 70.4k, False: 0]
  |  Branch (657:32): [True: 49.7k, False: 20.6k]
  |  Branch (657:53): [True: 47.1k, False: 2.60k]
  ------------------
  658|  47.1k|	bcreg_free(fs, rc);
  659|  70.4k|#endif
  660|  70.4k|      ins = BCINS_ABC(BC_TSETV, ra, var->u.s.info, rc);
  ------------------
  |  |   54|  70.4k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  661|  70.4k|    }
  662|   709k|  }
  663|   937k|  bcemit_INS(fs, ins);
  664|   937k|  expr_free(fs, e);
  665|   937k|}
lj_parse.c:const_num:
  206|   432k|{
  207|   432k|  lua_State *L = fs->L;
  208|   432k|  TValue *o;
  209|   432k|  lj_assertFS(expr_isnumk(e), "bad usage");
  ------------------
  |  |  167|   432k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   432k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   432k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 432k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   432k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  210|   432k|  o = lj_tab_set(L, fs->kt, &e->u.nval);
  211|   432k|  if (tvhaskslot(o))
  ------------------
  |  |  201|   432k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 300k, False: 132k]
  |  |  ------------------
  ------------------
  212|   300k|    return tvkslot(o);
  ------------------
  |  |  202|   300k|#define tvkslot(o)	((o)->u32.lo)
  ------------------
  213|   132k|  o->u64 = fs->nkn;
  214|   132k|  return fs->nkn++;
  215|   432k|}
lj_parse.c:parse_body:
 1869|  38.7k|{
 1870|  38.7k|  FuncState fs, *pfs = ls->fs;
 1871|  38.7k|  FuncScope bl;
 1872|  38.7k|  GCproto *pt;
 1873|  38.7k|  ptrdiff_t oldbase = pfs->bcbase - ls->bcstack;
 1874|  38.7k|  fs_init(ls, &fs);
 1875|  38.7k|  fscope_begin(&fs, &bl, 0);
 1876|  38.7k|  fs.linedefined = line;
 1877|  38.7k|  fs.numparams = (uint8_t)parse_params(ls, needself);
 1878|  38.7k|  fs.bcbase = pfs->bcbase + pfs->pc;
 1879|  38.7k|  fs.bclim = pfs->bclim - pfs->pc;
 1880|  38.7k|  bcemit_AD(&fs, BC_FUNCF, 0, 0);  /* Placeholder. */
  ------------------
  |  |  435|  38.7k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  38.7k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1881|  38.7k|  parse_chunk(ls);
 1882|  38.7k|  if (ls->tok != TK_end) lex_match(ls, TK_end, TK_function, line);
  ------------------
  |  Branch (1882:7): [True: 228, False: 38.5k]
  ------------------
 1883|  38.7k|  pt = fs_finish(ls, (ls->lastline = ls->linenumber));
 1884|  38.7k|  pfs->bcbase = ls->bcstack + oldbase;  /* May have been reallocated. */
 1885|  38.7k|  pfs->bclim = (BCPos)(ls->sizebcstack - oldbase);
 1886|       |  /* Store new prototype in the constant array of the parent. */
 1887|  38.7k|  expr_init(e, VRELOCABLE,
 1888|  38.7k|	    bcemit_AD(pfs, BC_FNEW, 0, const_gc(pfs, obj2gco(pt), LJ_TPROTO)));
  ------------------
  |  |  435|  38.7k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  38.7k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1889|  38.7k|#if LJ_HASFFI
 1890|  38.7k|  pfs->flags |= (fs.flags & PROTO_FFI);
  ------------------
  |  |  401|  38.7k|#define PROTO_FFI		0x04	/* Uses BC_KCDATA for FFI datatypes. */
  ------------------
 1891|  38.7k|#endif
 1892|  38.7k|  if (!(pfs->flags & PROTO_CHILD)) {
  ------------------
  |  |  399|  38.7k|#define PROTO_CHILD		0x01	/* Has child prototypes. */
  ------------------
  |  Branch (1892:7): [True: 9.84k, False: 28.9k]
  ------------------
 1893|  9.84k|    if (pfs->flags & PROTO_HAS_RETURN)
  ------------------
  |  |  405|  9.84k|#define PROTO_HAS_RETURN	0x20	/* Already emitted a return. */
  ------------------
  |  Branch (1893:9): [True: 0, False: 9.84k]
  ------------------
 1894|      0|      pfs->flags |= PROTO_FIXUP_RETURN;
  ------------------
  |  |  406|      0|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
 1895|  9.84k|    pfs->flags |= PROTO_CHILD;
  ------------------
  |  |  399|  9.84k|#define PROTO_CHILD		0x01	/* Has child prototypes. */
  ------------------
 1896|  9.84k|  }
 1897|  38.7k|  lj_lex_next(ls);
 1898|  38.7k|}
lj_parse.c:parse_params:
 1838|  38.7k|{
 1839|  38.7k|  FuncState *fs = ls->fs;
 1840|  38.7k|  BCReg nparams = 0;
 1841|  38.7k|  lex_check(ls, '(');
 1842|  38.7k|  if (needself)
  ------------------
  |  Branch (1842:7): [True: 1.61k, False: 37.1k]
  ------------------
 1843|  1.61k|    var_new_lit(ls, nparams++, "self");
  ------------------
  |  | 1073|  1.61k|  var_new(ls, (n), lj_parse_keepstr(ls, "" v, sizeof(v)-1))
  ------------------
 1844|  38.7k|  if (ls->tok != ')') {
  ------------------
  |  Branch (1844:7): [True: 37.8k, False: 940]
  ------------------
 1845|  76.4k|    do {
 1846|  76.4k|      if (ls->tok == TK_name || (!LJ_52 && ls->tok == TK_goto)) {
  ------------------
  |  |  697|  1.48k|#define LJ_52			0
  ------------------
  |  Branch (1846:11): [True: 75.6k, False: 742]
  |  Branch (1846:34): [Folded - Ignored]
  |  Branch (1846:44): [True: 507, False: 235]
  ------------------
 1847|  76.1k|	var_new(ls, nparams++, lex_str(ls));
 1848|  76.1k|      } else if (ls->tok == TK_dots) {
  ------------------
  |  Branch (1848:18): [True: 1, False: 234]
  ------------------
 1849|      1|	lj_lex_next(ls);
 1850|      1|	fs->flags |= PROTO_VARARG;
  ------------------
  |  |  400|      1|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
 1851|      1|	break;
 1852|    234|      } else {
 1853|    234|	err_syntax(ls, LJ_ERR_XPARAM);
 1854|    234|      }
 1855|  76.4k|    } while (lex_opt(ls, ','));
  ------------------
  |  Branch (1855:14): [True: 38.5k, False: 37.5k]
  ------------------
 1856|  37.8k|  }
 1857|  38.5k|  var_add(ls, nparams);
 1858|  38.5k|  lj_assertFS(fs->nactvar == nparams, "bad regalloc");
  ------------------
  |  |  167|  38.5k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  38.5k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  38.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 38.3k, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  38.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1859|  38.3k|  bcreg_reserve(fs, nparams);
 1860|  38.3k|  lex_check(ls, ')');
 1861|  38.3k|  return nparams;
 1862|  38.5k|}
lj_parse.c:var_new:
 1054|   208k|{
 1055|   208k|  FuncState *fs = ls->fs;
 1056|   208k|  MSize vtop = ls->vtop;
 1057|   208k|  checklimit(fs, fs->nactvar+n, LJ_MAX_LOCVAR, "local variables");
  ------------------
  |  |  192|   208k|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 51, False: 208k]
  |  |  ------------------
  ------------------
 1058|   208k|  if (LJ_UNLIKELY(vtop >= ls->sizevstack)) {
  ------------------
  |  |  146|   208k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 15.6k, False: 193k]
  |  |  ------------------
  ------------------
 1059|  15.6k|    if (ls->sizevstack >= LJ_MAX_VSTACK)
  ------------------
  |  |  115|  15.6k|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|  15.6k|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1059:9): [True: 0, False: 15.6k]
  ------------------
 1060|      0|      lj_lex_error(ls, 0, LJ_ERR_XLIMC, LJ_MAX_VSTACK);
  ------------------
  |  |  115|      0|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|      0|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
 1061|  15.6k|    lj_mem_growvec(ls->L, ls->vstack, ls->sizevstack, LJ_MAX_VSTACK, VarInfo);
  ------------------
  |  |  129|  15.6k|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
 1062|  15.6k|  }
 1063|   208k|  lj_assertFS((uintptr_t)name < VARNAME__MAX ||
  ------------------
  |  |  167|   208k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   208k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   334k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 83.2k, False: 125k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 125k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   208k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1064|   208k|	      lj_tab_getstr(fs->kt, name) != NULL,
 1065|   208k|	      "unanchored variable name");
 1066|       |  /* NOBARRIER: name is anchored in fs->kt and ls->vstack is not a GCobj. */
 1067|   208k|  setgcref(ls->vstack[vtop].name, obj2gco(name));
  ------------------
  |  |   72|   208k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1068|   208k|  fs->varmap[fs->nactvar+n] = (uint16_t)vtop;
 1069|   208k|  ls->vtop = vtop+1;
 1070|   208k|}
lj_parse.c:var_add:
 1080|  91.0k|{
 1081|  91.0k|  FuncState *fs = ls->fs;
 1082|  91.0k|  BCReg nactvar = fs->nactvar;
 1083|   284k|  while (nvars--) {
  ------------------
  |  Branch (1083:10): [True: 193k, False: 91.0k]
  ------------------
 1084|   193k|    VarInfo *v = &var_get(ls, fs, nactvar);
  ------------------
  |  | 1050|   193k|#define var_get(ls, fs, i)	((ls)->vstack[(fs)->varmap[(i)]])
  ------------------
 1085|   193k|    v->startpc = fs->pc;
 1086|   193k|    v->slot = nactvar++;
 1087|   193k|    v->info = 0;
 1088|   193k|  }
 1089|  91.0k|  fs->nactvar = nactvar;
 1090|  91.0k|}
lj_parse.c:expr_primary:
 1962|  2.09M|{
 1963|  2.09M|  FuncState *fs = ls->fs;
 1964|       |  /* Parse prefix expression. */
 1965|  2.09M|  if (ls->tok == '(') {
  ------------------
  |  Branch (1965:7): [True: 146k, False: 1.95M]
  ------------------
 1966|   146k|    BCLine line = ls->linenumber;
 1967|   146k|    lj_lex_next(ls);
 1968|   146k|    expr(ls, v);
 1969|   146k|    lex_match(ls, ')', '(', line);
 1970|   146k|    expr_discharge(ls->fs, v);
 1971|  1.95M|  } else if (ls->tok == TK_name || (!LJ_52 && ls->tok == TK_goto)) {
  ------------------
  |  |  697|  40.8k|#define LJ_52			0
  ------------------
  |  Branch (1971:14): [True: 1.93M, False: 20.4k]
  |  Branch (1971:37): [Folded - Ignored]
  |  Branch (1971:47): [True: 7.90k, False: 12.5k]
  ------------------
 1972|  1.94M|    var_lookup(ls, v);
  ------------------
  |  | 1157|  1.94M|  var_lookup_((ls)->fs, lex_str(ls), (e), 1)
  ------------------
 1973|  1.94M|  } else {
 1974|  12.5k|    err_syntax(ls, LJ_ERR_XSYMBOL);
 1975|  12.5k|  }
 1976|  2.43M|  for (;;) {  /* Parse multiple expression suffixes. */
 1977|  2.43M|    if (ls->tok == '.') {
  ------------------
  |  Branch (1977:9): [True: 29.8k, False: 2.40M]
  ------------------
 1978|  29.8k|      expr_field(ls, v);
 1979|  2.40M|    } else if (ls->tok == '[') {
  ------------------
  |  Branch (1979:16): [True: 27.1k, False: 2.38M]
  ------------------
 1980|  27.1k|      ExpDesc key;
 1981|  27.1k|      expr_toanyreg(fs, v);
 1982|  27.1k|      expr_bracket(ls, &key);
 1983|  27.1k|      expr_index(fs, v, &key);
 1984|  2.38M|    } else if (ls->tok == ':') {
  ------------------
  |  Branch (1984:16): [True: 5.17k, False: 2.37M]
  ------------------
 1985|  5.17k|      ExpDesc key;
 1986|  5.17k|      lj_lex_next(ls);
 1987|  5.17k|      expr_str(ls, &key);
 1988|  5.17k|      bcemit_method(fs, v, &key);
 1989|  5.17k|      parse_args(ls, v);
 1990|  2.37M|    } else if (ls->tok == '(' || ls->tok == TK_string || ls->tok == '{') {
  ------------------
  |  Branch (1990:16): [True: 90.6k, False: 2.28M]
  |  Branch (1990:34): [True: 101k, False: 2.18M]
  |  Branch (1990:58): [True: 327k, False: 1.85M]
  ------------------
 1991|   519k|      expr_tonextreg(fs, v);
 1992|   519k|      if (ls->fr2) bcreg_reserve(fs, 1);
  ------------------
  |  Branch (1992:11): [True: 519k, False: 11]
  ------------------
 1993|   519k|      parse_args(ls, v);
 1994|  1.85M|    } else {
 1995|  1.85M|      break;
 1996|  1.85M|    }
 1997|  2.43M|  }
 1998|  2.08M|}
lj_parse.c:var_lookup_:
 1132|  6.07M|{
 1133|  6.07M|  if (fs) {
  ------------------
  |  Branch (1133:7): [True: 4.35M, False: 1.71M]
  ------------------
 1134|  4.35M|    BCReg reg = var_lookup_local(fs, name);
 1135|  4.35M|    if ((int32_t)reg >= 0) {  /* Local in this function? */
  ------------------
  |  Branch (1135:9): [True: 225k, False: 4.13M]
  ------------------
 1136|   225k|      expr_init(e, VLOCAL, reg);
 1137|   225k|      if (!first)
  ------------------
  |  Branch (1137:11): [True: 74.8k, False: 150k]
  ------------------
 1138|  74.8k|	fscope_uvmark(fs, reg);  /* Scope now has an upvalue. */
 1139|   225k|      return (MSize)(e->u.s.aux = (uint32_t)fs->varmap[reg]);
 1140|  4.13M|    } else {
 1141|  4.13M|      MSize vidx = var_lookup_(fs->prev, name, e, 0);  /* Var in outer func? */
 1142|  4.13M|      if ((int32_t)vidx >= 0) {  /* Yes, make it an upvalue here. */
  ------------------
  |  Branch (1142:11): [True: 411k, False: 3.72M]
  ------------------
 1143|   411k|	e->u.s.info = (uint8_t)var_lookup_uv(fs, vidx, e);
 1144|   411k|	e->k = VUPVAL;
 1145|   411k|	return vidx;
 1146|   411k|      }
 1147|  4.13M|    }
 1148|  4.35M|  } else {  /* Not found in any function, must be a global. */
 1149|  1.71M|    expr_init(e, VGLOBAL, 0);
 1150|  1.71M|    e->u.sval = name;
 1151|  1.71M|  }
 1152|  5.43M|  return (MSize)-1;  /* Global. */
 1153|  6.07M|}
lj_parse.c:var_lookup_local:
 1102|  4.35M|{
 1103|  4.35M|  int i;
 1104|  15.3M|  for (i = fs->nactvar-1; i >= 0; i--) {
  ------------------
  |  Branch (1104:27): [True: 11.2M, False: 4.13M]
  ------------------
 1105|  11.2M|    if (n == strref(var_get(fs->ls, fs, i).name))
  ------------------
  |  |  315|  11.2M|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  11.2M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (1105:9): [True: 225k, False: 11.0M]
  ------------------
 1106|   225k|      return (BCReg)i;
 1107|  11.2M|  }
 1108|  4.13M|  return (BCReg)-1;  /* Not found. */
 1109|  4.35M|}
lj_parse.c:fscope_uvmark:
 1320|  74.8k|{
 1321|  74.8k|  FuncScope *bl;
 1322|   168k|  for (bl = fs->bl; bl && bl->nactvar > level; bl = bl->prev)
  ------------------
  |  Branch (1322:21): [True: 168k, False: 0]
  |  Branch (1322:27): [True: 93.6k, False: 74.8k]
  ------------------
 1323|  93.6k|    ;
 1324|  74.8k|  if (bl)
  ------------------
  |  Branch (1324:7): [True: 74.8k, False: 0]
  ------------------
 1325|  74.8k|    bl->flags |= FSCOPE_UPVAL;
  ------------------
  |  |  108|  74.8k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
 1326|  74.8k|}
lj_parse.c:var_lookup_uv:
 1113|   411k|{
 1114|   411k|  MSize i, n = fs->nuv;
 1115|   442k|  for (i = 0; i < n; i++)
  ------------------
  |  Branch (1115:15): [True: 411k, False: 30.7k]
  ------------------
 1116|   411k|    if (fs->uvmap[i] == vidx)
  ------------------
  |  Branch (1116:9): [True: 380k, False: 31.0k]
  ------------------
 1117|   380k|      return i;  /* Already exists. */
 1118|       |  /* Otherwise create a new one. */
 1119|  30.7k|  checklimit(fs, fs->nuv, LJ_MAX_UPVAL, "upvalues");
  ------------------
  |  |  192|  30.7k|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 30.7k]
  |  |  ------------------
  ------------------
 1120|  30.7k|  lj_assertFS(e->k == VLOCAL || e->k == VUPVAL, "bad expr type %d", e->k);
  ------------------
  |  |  167|  30.7k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  30.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  53.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 7.83k, False: 22.9k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 22.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  30.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1121|  30.7k|  fs->uvmap[n] = (uint16_t)vidx;
 1122|  30.7k|  fs->uvtmp[n] = (uint16_t)(e->k == VLOCAL ? vidx : LJ_MAX_VSTACK+e->u.s.info);
  ------------------
  |  |  115|  22.9k|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|  22.9k|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1122:29): [True: 7.83k, False: 22.9k]
  ------------------
 1123|  30.7k|  fs->nuv = n+1;
 1124|  30.7k|  return n;
 1125|  30.7k|}
lj_parse.c:expr_field:
 1695|  31.5k|{
 1696|  31.5k|  FuncState *fs = ls->fs;
 1697|  31.5k|  ExpDesc key;
 1698|  31.5k|  expr_toanyreg(fs, v);
 1699|  31.5k|  lj_lex_next(ls);  /* Skip dot or colon. */
 1700|  31.5k|  expr_str(ls, &key);
 1701|  31.5k|  expr_index(fs, v, &key);
 1702|  31.5k|}
lj_parse.c:bcemit_method:
  669|  4.99k|{
  670|  4.99k|  BCReg idx, func, fr2, obj = expr_toanyreg(fs, e);
  671|  4.99k|  expr_free(fs, e);
  672|  4.99k|  func = fs->freereg;
  673|  4.99k|  fr2 = fs->ls->fr2;
  674|  4.99k|  bcemit_AD(fs, BC_MOV, func+1+fr2, obj);  /* Copy object to 1st argument. */
  ------------------
  |  |  435|  4.99k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  4.99k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  675|  4.99k|  lj_assertFS(expr_isstrk(key), "bad usage");
  ------------------
  |  |  167|  4.99k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  4.99k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  4.99k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 4.99k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  4.99k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  676|  4.99k|  idx = const_str(fs, key);
  677|  4.99k|  if (idx <= BCMAX_C) {
  ------------------
  |  |   27|  4.99k|#define BCMAX_C		0xff
  ------------------
  |  Branch (677:7): [True: 4.78k, False: 210]
  ------------------
  678|  4.78k|    bcreg_reserve(fs, 2+fr2);
  679|  4.78k|    bcemit_ABC(fs, BC_TGETS, func, obj, idx);
  ------------------
  |  |  434|  4.78k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|  4.78k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  680|  4.78k|  } else {
  681|    210|    bcreg_reserve(fs, 3+fr2);
  682|    210|    bcemit_AD(fs, BC_KSTR, func+2+fr2, idx);
  ------------------
  |  |  435|    210|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|    210|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  683|    210|    bcemit_ABC(fs, BC_TGETV, func, obj, func+2+fr2);
  ------------------
  |  |  434|    210|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|    210|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  684|    210|    fs->freereg--;
  685|    210|  }
  686|  4.99k|  e->u.s.info = func;
  687|  4.99k|  e->k = VNONRELOC;
  688|  4.99k|}
lj_parse.c:parse_args:
 1915|   524k|{
 1916|   524k|  FuncState *fs = ls->fs;
 1917|   524k|  ExpDesc args;
 1918|   524k|  BCIns ins;
 1919|   524k|  BCReg base;
 1920|   524k|  BCLine line = ls->linenumber;
 1921|   524k|  if (ls->tok == '(') {
  ------------------
  |  Branch (1921:7): [True: 92.0k, False: 432k]
  ------------------
 1922|  92.0k|#if !LJ_52
 1923|  92.0k|    if (line != ls->lastline)
  ------------------
  |  Branch (1923:9): [True: 193, False: 91.9k]
  ------------------
 1924|    193|      err_syntax(ls, LJ_ERR_XAMBIG);
 1925|  91.9k|#endif
 1926|  91.9k|    lj_lex_next(ls);
 1927|  91.9k|    if (ls->tok == ')') {  /* f(). */
  ------------------
  |  Branch (1927:9): [True: 4.76k, False: 87.1k]
  ------------------
 1928|  4.76k|      args.k = VVOID;
 1929|  87.1k|    } else {
 1930|  87.1k|      expr_list(ls, &args);
 1931|  87.1k|      if (args.k == VCALL)  /* f(a, b, g()) or f(a, b, ...). */
  ------------------
  |  Branch (1931:11): [True: 1.05k, False: 86.0k]
  ------------------
 1932|  87.1k|	setbc_b(bcptr(fs, &args), 0);  /* Pass on multiple results. */
  ------------------
  |  |   46|  1.05k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  1.05k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  1.05k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1933|  87.1k|    }
 1934|  91.9k|    lex_match(ls, ')', '(', line);
 1935|   432k|  } else if (ls->tok == '{') {
  ------------------
  |  Branch (1935:14): [True: 329k, False: 102k]
  ------------------
 1936|   329k|    expr_table(ls, &args);
 1937|   329k|  } else if (ls->tok == TK_string) {
  ------------------
  |  Branch (1937:14): [True: 101k, False: 339]
  ------------------
 1938|   101k|    expr_init(&args, VKSTR, 0);
 1939|   101k|    args.u.sval = strV(&ls->tokval);
  ------------------
  |  |  859|   101k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   101k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   101k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   101k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 101k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   101k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1940|      0|    lj_lex_next(ls);
 1941|   101k|  } else {
 1942|    339|    err_syntax(ls, LJ_ERR_XFUNARG);
 1943|      0|    return;  /* Silence compiler. */
 1944|    339|  }
 1945|   523k|  lj_assertFS(e->k == VNONRELOC, "bad expr type %d", e->k);
  ------------------
  |  |  167|   523k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   523k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   523k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 354k, False: 169k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   523k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1946|   354k|  base = e->u.s.info;  /* Base register for call. */
 1947|   354k|  if (args.k == VCALL) {
  ------------------
  |  Branch (1947:7): [True: 890, False: 353k]
  ------------------
 1948|    890|    ins = BCINS_ABC(BC_CALLM, base, 2, args.u.s.aux - base - 1 - ls->fr2);
  ------------------
  |  |   54|    890|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
 1949|   353k|  } else {
 1950|   353k|    if (args.k != VVOID)
  ------------------
  |  Branch (1950:9): [True: 348k, False: 4.76k]
  ------------------
 1951|   348k|      expr_tonextreg(fs, &args);
 1952|   353k|    ins = BCINS_ABC(BC_CALL, base, 2, fs->freereg - base - ls->fr2);
  ------------------
  |  |   54|   353k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
 1953|   353k|  }
 1954|   354k|  expr_init(e, VCALL, bcemit_INS(fs, ins));
 1955|   354k|  e->u.s.aux = base;
 1956|   354k|  fs->bcbase[fs->pc - 1].line = line;
 1957|   354k|  fs->freereg = base+1;  /* Leave one result by default. */
 1958|   354k|}
lj_parse.c:expr_list:
 1902|   345k|{
 1903|   345k|  BCReg n = 1;
 1904|   345k|  expr(ls, v);
 1905|   419k|  while (lex_opt(ls, ',')) {
  ------------------
  |  Branch (1905:10): [True: 74.3k, False: 345k]
  ------------------
 1906|  74.3k|    expr_tonextreg(ls->fs, v);
 1907|  74.3k|    expr(ls, v);
 1908|  74.3k|    n++;
 1909|  74.3k|  }
 1910|   345k|  return n;
 1911|   345k|}
lj_parse.c:bcemit_unop:
  943|   105k|{
  944|   105k|  if (op == BC_NOT) {
  ------------------
  |  Branch (944:7): [True: 35.5k, False: 69.6k]
  ------------------
  945|       |    /* Swap true and false lists. */
  946|  35.5k|    { BCPos temp = e->f; e->f = e->t; e->t = temp; }
  947|  35.5k|    jmp_dropval(fs, e->f);
  948|  35.5k|    jmp_dropval(fs, e->t);
  949|  35.5k|    expr_discharge(fs, e);
  950|  35.5k|    if (e->k == VKNIL || e->k == VKFALSE) {
  ------------------
  |  Branch (950:9): [True: 498, False: 35.0k]
  |  Branch (950:26): [True: 8.72k, False: 26.2k]
  ------------------
  951|  9.22k|      e->k = VKTRUE;
  952|  9.22k|      return;
  953|  26.2k|    } else if (expr_isk(e) || (LJ_HASFFI && e->k == VKCDATA)) {
  ------------------
  |  |   73|  52.5k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 13.7k, False: 12.5k]
  |  |  ------------------
  ------------------
                  } else if (expr_isk(e) || (LJ_HASFFI && e->k == VKCDATA)) {
  ------------------
  |  |  585|  25.1k|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (953:45): [True: 2.60k, False: 9.97k]
  ------------------
  954|  16.3k|      e->k = VKFALSE;
  955|  16.3k|      return;
  956|  16.3k|    } else if (e->k == VJMP) {
  ------------------
  |  Branch (956:16): [True: 677, False: 9.29k]
  ------------------
  957|    677|      invertcond(fs, e);
  958|    677|      return;
  959|  9.29k|    } else if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (959:16): [True: 8.32k, False: 977]
  ------------------
  960|  8.32k|      bcreg_reserve(fs, 1);
  961|  8.32k|      setbc_a(bcptr(fs, e), fs->freereg-1);
  ------------------
  |  |   45|  8.32k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  8.32k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  8.32k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  962|  8.32k|      e->u.s.info = fs->freereg-1;
  963|  8.32k|      e->k = VNONRELOC;
  964|  8.32k|    } else {
  965|    977|      lj_assertFS(e->k == VNONRELOC, "bad expr type %d", e->k);
  ------------------
  |  |  167|    977|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    977|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    977|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 977, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    977|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  966|    977|    }
  967|  69.6k|  } else {
  968|  69.6k|    lj_assertFS(op == BC_UNM || op == BC_LEN, "bad unop %d", op);
  ------------------
  |  |  167|  69.6k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  69.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  81.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 57.6k, False: 12.0k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 12.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  69.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  969|  69.6k|    if (op == BC_UNM && !expr_hasjump(e)) {  /* Constant-fold negations. */
  ------------------
  |  |   71|  57.6k|#define expr_hasjump(e)		((e)->t != (e)->f)
  ------------------
  |  Branch (969:9): [True: 57.6k, False: 12.0k]
  |  Branch (969:25): [True: 54.2k, False: 3.36k]
  ------------------
  970|  54.2k|#if LJ_HASFFI
  971|  54.2k|      if (e->k == VKCDATA) {  /* Fold in-place since cdata is not interned. */
  ------------------
  |  Branch (971:11): [True: 4.56k, False: 49.6k]
  ------------------
  972|  4.56k|	GCcdata *cd = cdataV(&e->u.nval);
  ------------------
  |  |  863|  4.56k|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|  4.56k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  4.56k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  4.56k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4.56k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  4.56k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  973|  4.56k|	uint64_t *p = (uint64_t *)cdataptr(cd);
  ------------------
  |  |  360|  4.56k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  974|  4.56k|	if (cd->ctypeid == CTID_COMPLEX_DOUBLE)
  ------------------
  |  Branch (974:6): [True: 1.27k, False: 3.28k]
  ------------------
  975|  1.27k|	  p[1] ^= U64x(80000000,00000000);
  ------------------
  |  |   94|  1.27k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  976|  3.28k|	else
  977|  3.28k|	  *p = ~*p+1u;
  978|  4.56k|	return;
  979|  4.56k|      } else
  980|  49.6k|#endif
  981|  49.6k|      if (expr_isnumk(e) && !expr_numiszero(e)) {  /* Avoid folding to -0. */
  ------------------
  |  |   75|  99.3k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 32.5k, False: 17.1k]
  |  |  ------------------
  ------------------
  |  Branch (981:29): [True: 16.4k, False: 16.0k]
  ------------------
  982|  16.4k|	TValue *o = expr_numtv(e);
  ------------------
  |  |   79|  16.4k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  ------------------
  |  |  |  |  367|  16.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  16.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  16.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 16.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  16.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  983|  16.4k|	if (tvisint(o)) {
  ------------------
  |  |  803|  16.4k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  32.9k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  984|      0|	  int32_t k = intV(o), negk = (int32_t)(~(uint32_t)k+1u);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  985|      0|	  if (k == negk)
  ------------------
  |  Branch (985:8): [True: 0, False: 0]
  ------------------
  986|      0|	    setnumV(o, -(lua_Number)k);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  987|      0|	  else
  988|      0|	    setintV(o, negk);
  989|      0|	  return;
  990|  16.4k|	} else {
  991|  16.4k|	  o->u64 ^= U64x(80000000,00000000);
  ------------------
  |  |   94|  16.4k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  992|  16.4k|	  return;
  993|  16.4k|	}
  994|  16.4k|      }
  995|  54.2k|    }
  996|  48.5k|    expr_toanyreg(fs, e);
  997|  48.5k|  }
  998|  57.8k|  expr_free(fs, e);
  999|  57.8k|  e->u.s.info = bcemit_AD(fs, op, 0, e->u.s.info);
  ------------------
  |  |  435|  57.8k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  57.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1000|  57.8k|  e->k = VRELOCABLE;
 1001|  57.8k|}
lj_parse.c:jmp_dropval:
  312|  71.0k|{
  313|   104k|  for (; list != NO_JMP; list = jmp_next(fs, list))
  ------------------
  |  |   31|   104k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (313:10): [True: 33.6k, False: 71.0k]
  ------------------
  314|  33.6k|    jmp_patchtestreg(fs, list, NO_REG);
  ------------------
  |  |   30|  33.6k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  33.6k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  315|  71.0k|}
lj_parse.c:invertcond:
  711|  7.24k|{
  712|  7.24k|  BCIns *ip = &fs->bcbase[e->u.s.info - 1].ins;
  713|  7.24k|  setbc_op(ip, bc_op(*ip)^1);
  ------------------
  |  |   44|  7.24k|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|  7.24k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  7.24k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  714|  7.24k|}
lj_parse.c:token2binop:
 2056|  3.25M|{
 2057|  3.25M|  switch (tok) {
 2058|  13.9k|  case '+':	return OPR_ADD;
  ------------------
  |  Branch (2058:3): [True: 13.9k, False: 3.23M]
  ------------------
 2059|   136k|  case '-':	return OPR_SUB;
  ------------------
  |  Branch (2059:3): [True: 136k, False: 3.11M]
  ------------------
 2060|  36.3k|  case '*':	return OPR_MUL;
  ------------------
  |  Branch (2060:3): [True: 36.3k, False: 3.21M]
  ------------------
 2061|   124k|  case '/':	return OPR_DIV;
  ------------------
  |  Branch (2061:3): [True: 124k, False: 3.12M]
  ------------------
 2062|   139k|  case '%':	return OPR_MOD;
  ------------------
  |  Branch (2062:3): [True: 139k, False: 3.11M]
  ------------------
 2063|  8.47k|  case '^':	return OPR_POW;
  ------------------
  |  Branch (2063:3): [True: 8.47k, False: 3.24M]
  ------------------
 2064|  8.63k|  case TK_concat: return OPR_CONCAT;
  ------------------
  |  Branch (2064:3): [True: 8.63k, False: 3.24M]
  ------------------
 2065|  16.9k|  case TK_ne:	return OPR_NE;
  ------------------
  |  Branch (2065:3): [True: 16.9k, False: 3.23M]
  ------------------
 2066|  86.8k|  case TK_eq:	return OPR_EQ;
  ------------------
  |  Branch (2066:3): [True: 86.8k, False: 3.16M]
  ------------------
 2067|  63.6k|  case '<':	return OPR_LT;
  ------------------
  |  Branch (2067:3): [True: 63.6k, False: 3.18M]
  ------------------
 2068|  11.6k|  case TK_le:	return OPR_LE;
  ------------------
  |  Branch (2068:3): [True: 11.6k, False: 3.23M]
  ------------------
 2069|   378k|  case '>':	return OPR_GT;
  ------------------
  |  Branch (2069:3): [True: 378k, False: 2.87M]
  ------------------
 2070|   242k|  case TK_ge:	return OPR_GE;
  ------------------
  |  Branch (2070:3): [True: 242k, False: 3.00M]
  ------------------
 2071|  61.6k|  case TK_and:	return OPR_AND;
  ------------------
  |  Branch (2071:3): [True: 61.6k, False: 3.18M]
  ------------------
 2072|   152k|  case TK_or:	return OPR_OR;
  ------------------
  |  Branch (2072:3): [True: 152k, False: 3.09M]
  ------------------
 2073|  1.76M|  default:	return OPR_NOBINOPR;
  ------------------
  |  Branch (2073:3): [True: 1.76M, False: 1.48M]
  ------------------
 2074|  3.25M|  }
 2075|  3.25M|}
lj_parse.c:bcemit_binop_left:
  884|  1.43M|{
  885|  1.43M|  if (op == OPR_AND) {
  ------------------
  |  Branch (885:7): [True: 60.5k, False: 1.37M]
  ------------------
  886|  60.5k|    bcemit_branch_t(fs, e);
  887|  1.37M|  } else if (op == OPR_OR) {
  ------------------
  |  Branch (887:14): [True: 145k, False: 1.22M]
  ------------------
  888|   145k|    bcemit_branch_f(fs, e);
  889|  1.22M|  } else if (op == OPR_CONCAT) {
  ------------------
  |  Branch (889:14): [True: 8.43k, False: 1.21M]
  ------------------
  890|  8.43k|    expr_tonextreg(fs, e);
  891|  1.21M|  } else if (op == OPR_EQ || op == OPR_NE) {
  ------------------
  |  Branch (891:14): [True: 86.1k, False: 1.13M]
  |  Branch (891:30): [True: 16.3k, False: 1.11M]
  ------------------
  892|   102k|    if (!expr_isk_nojump(e)) expr_toanyreg(fs, e);
  ------------------
  |  |   74|   102k|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|   204k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 6.08k, False: 96.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  6.08k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 5.83k, False: 244]
  |  |  ------------------
  ------------------
  893|  1.11M|  } else {
  894|  1.11M|    if (!expr_isnumk_nojump(e)) expr_toanyreg(fs, e);
  ------------------
  |  |   76|  1.11M|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|  2.22M|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 199k, False: 915k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|   199k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 198k, False: 356]
  |  |  ------------------
  ------------------
  895|  1.11M|  }
  896|  1.43M|}
lj_parse.c:bcemit_branch_f:
  757|   145k|{
  758|   145k|  BCPos pc;
  759|   145k|  expr_discharge(fs, e);
  760|   145k|  if (e->k == VKNIL || e->k == VKFALSE)
  ------------------
  |  Branch (760:7): [True: 77, False: 145k]
  |  Branch (760:24): [True: 2.06k, False: 143k]
  ------------------
  761|  2.14k|    pc = NO_JMP;  /* Never jump. */
  ------------------
  |  |   31|  2.14k|#define NO_JMP		(~(BCPos)0)
  ------------------
  762|   143k|  else if (e->k == VJMP)
  ------------------
  |  Branch (762:12): [True: 18.2k, False: 125k]
  ------------------
  763|  18.2k|    pc = e->u.s.info;
  764|   125k|  else if (e->k == VKSTR || e->k == VKNUM || e->k == VKTRUE)
  ------------------
  |  Branch (764:12): [True: 366, False: 125k]
  |  Branch (764:29): [True: 56.4k, False: 68.5k]
  |  Branch (764:46): [True: 88, False: 68.5k]
  ------------------
  765|  56.9k|    expr_toreg_nobranch(fs, e, NO_REG), pc = bcemit_jmp(fs);
  ------------------
  |  |   30|  56.9k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  56.9k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  766|  68.5k|  else
  767|  68.5k|    pc = bcemit_branch(fs, e, 1);
  768|   145k|  jmp_append(fs, &e->t, pc);
  769|   145k|  jmp_tohere(fs, e->f);
  770|   145k|  e->f = NO_JMP;
  ------------------
  |  |   31|   145k|#define NO_JMP		(~(BCPos)0)
  ------------------
  771|   145k|}
lj_parse.c:bcemit_branch:
  718|   118k|{
  719|   118k|  BCPos pc;
  720|   118k|  if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (720:7): [True: 95.2k, False: 22.8k]
  ------------------
  721|  95.2k|    BCIns *ip = bcptr(fs, e);
  ------------------
  |  |  438|  95.2k|#define bcptr(fs, e)			(&(fs)->bcbase[(e)->u.s.info].ins)
  ------------------
  722|  95.2k|    if (bc_op(*ip) == BC_NOT) {
  ------------------
  |  |   34|  95.2k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (722:9): [True: 350, False: 94.9k]
  ------------------
  723|    350|      *ip = BCINS_AD(cond ? BC_ISF : BC_IST, 0, bc_d(*ip));
  ------------------
  |  |   56|    700|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:13): [True: 348, False: 2]
  |  |  ------------------
  ------------------
  724|    350|      return bcemit_jmp(fs);
  725|    350|    }
  726|  95.2k|  }
  727|   117k|  if (e->k != VNONRELOC) {
  ------------------
  |  Branch (727:7): [True: 94.9k, False: 22.8k]
  ------------------
  728|  94.9k|    bcreg_reserve(fs, 1);
  729|  94.9k|    expr_toreg_nobranch(fs, e, fs->freereg-1);
  730|  94.9k|  }
  731|   117k|  bcemit_AD(fs, cond ? BC_ISTC : BC_ISFC, NO_REG, e->u.s.info);
  ------------------
  |  |  435|   117k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|   235k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (56:13): [True: 68.1k, False: 49.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  732|   117k|  pc = bcemit_jmp(fs);
  733|   117k|  expr_free(fs, e);
  734|   117k|  return pc;
  735|   118k|}
lj_parse.c:bcemit_binop:
  900|  1.36M|{
  901|  1.36M|  if (op <= OPR_POW) {
  ------------------
  |  Branch (901:7): [True: 404k, False: 964k]
  ------------------
  902|   404k|    bcemit_arith(fs, op, e1, e2);
  903|   964k|  } else if (op == OPR_AND) {
  ------------------
  |  Branch (903:14): [True: 56.3k, False: 907k]
  ------------------
  904|  56.3k|    lj_assertFS(e1->t == NO_JMP, "jump list not closed");
  ------------------
  |  |  167|  56.3k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  56.3k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  56.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 56.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  56.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  905|  56.3k|    expr_discharge(fs, e2);
  906|  56.3k|    jmp_append(fs, &e2->f, e1->f);
  907|  56.3k|    *e1 = *e2;
  908|   907k|  } else if (op == OPR_OR) {
  ------------------
  |  Branch (908:14): [True: 139k, False: 767k]
  ------------------
  909|   139k|    lj_assertFS(e1->f == NO_JMP, "jump list not closed");
  ------------------
  |  |  167|   139k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   139k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   139k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 139k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   139k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  910|   139k|    expr_discharge(fs, e2);
  911|   139k|    jmp_append(fs, &e2->t, e1->t);
  912|   139k|    *e1 = *e2;
  913|   767k|  } else if (op == OPR_CONCAT) {
  ------------------
  |  Branch (913:14): [True: 7.68k, False: 760k]
  ------------------
  914|  7.68k|    expr_toval(fs, e2);
  915|  7.68k|    if (e2->k == VRELOCABLE && bc_op(*bcptr(fs, e2)) == BC_CAT) {
  ------------------
  |  |   34|  2.01k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (915:9): [True: 2.01k, False: 5.67k]
  |  Branch (915:32): [True: 1.30k, False: 708]
  ------------------
  916|  1.30k|      lj_assertFS(e1->u.s.info == bc_b(*bcptr(fs, e2))-1,
  ------------------
  |  |  167|  1.30k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.30k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.30k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.30k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.30k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  917|  1.30k|		  "bad CAT stack layout");
  918|  1.30k|      expr_free(fs, e1);
  919|  1.30k|      setbc_b(bcptr(fs, e2), e1->u.s.info);
  ------------------
  |  |   46|  1.30k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  1.30k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  1.30k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  920|  1.30k|      e1->u.s.info = e2->u.s.info;
  921|  6.38k|    } else {
  922|  6.38k|      expr_tonextreg(fs, e2);
  923|  6.38k|      expr_free(fs, e2);
  924|  6.38k|      expr_free(fs, e1);
  925|  6.38k|      e1->u.s.info = bcemit_ABC(fs, BC_CAT, 0, e1->u.s.info, e2->u.s.info);
  ------------------
  |  |  434|  6.38k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|  6.38k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  926|  6.38k|    }
  927|  7.68k|    e1->k = VRELOCABLE;
  928|   760k|  } else {
  929|   760k|    lj_assertFS(op == OPR_NE || op == OPR_EQ ||
  ------------------
  |  |  167|   760k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   760k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  6.57M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 13.1k, False: 747k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 82.4k, False: 664k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 55.1k, False: 609k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 229k, False: 380k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 10.0k, False: 370k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 370k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   760k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  930|   760k|	       op == OPR_LT || op == OPR_GE || op == OPR_LE || op == OPR_GT,
  931|   760k|	       "bad binop %d", op);
  932|   760k|    bcemit_comp(fs, op, e1, e2);
  933|   760k|  }
  934|  1.36M|}
lj_parse.c:bcemit_arith:
  797|   404k|{
  798|   404k|  BCReg rb, rc, t;
  799|   404k|  uint32_t op;
  800|   404k|  if (foldarith(opr, e1, e2))
  ------------------
  |  Branch (800:7): [True: 62.5k, False: 342k]
  ------------------
  801|  62.5k|    return;
  802|   342k|  if (opr == OPR_POW) {
  ------------------
  |  Branch (802:7): [True: 6.72k, False: 335k]
  ------------------
  803|  6.72k|    op = BC_POW;
  804|  6.72k|    rc = expr_toanyreg(fs, e2);
  805|  6.72k|    rb = expr_toanyreg(fs, e1);
  806|   335k|  } else {
  807|   335k|    op = opr-OPR_ADD+BC_ADDVV;
  808|       |    /* Must discharge 2nd operand first since VINDEXED might free regs. */
  809|   335k|    expr_toval(fs, e2);
  810|   335k|    if (expr_isnumk(e2) && (rc = const_num(fs, e2)) <= BCMAX_C)
  ------------------
  |  |   75|   670k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 185k, False: 150k]
  |  |  ------------------
  ------------------
                  if (expr_isnumk(e2) && (rc = const_num(fs, e2)) <= BCMAX_C)
  ------------------
  |  |   27|   185k|#define BCMAX_C		0xff
  ------------------
  |  Branch (810:28): [True: 185k, False: 0]
  ------------------
  811|   185k|      op -= BC_ADDVV-BC_ADDVN;
  812|   150k|    else
  813|   150k|      rc = expr_toanyreg(fs, e2);
  814|       |    /* 1st operand discharged by bcemit_binop_left, but need KNUM/KSHORT. */
  815|   335k|    lj_assertFS(expr_isnumk(e1) || e1->k == VNONRELOC,
  ------------------
  |  |  167|   335k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   335k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   568k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 101k, False: 233k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 233k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   335k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  816|   335k|		"bad expr type %d", e1->k);
  817|   335k|    expr_toval(fs, e1);
  818|       |    /* Avoid two consts to satisfy bytecode constraints. */
  819|   335k|    if (expr_isnumk(e1) && !expr_isnumk(e2) &&
  ------------------
  |  |   75|   670k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 101k, False: 233k]
  |  |  ------------------
  ------------------
                  if (expr_isnumk(e1) && !expr_isnumk(e2) &&
  ------------------
  |  |   75|   437k|#define expr_isnumk(e)		((e)->k == VKNUM)
  ------------------
  |  Branch (819:28): [True: 26.2k, False: 75.6k]
  ------------------
  820|   335k|	(t = const_num(fs, e1)) <= BCMAX_B) {
  ------------------
  |  |   26|  26.2k|#define BCMAX_B		0xff
  ------------------
  |  Branch (820:2): [True: 26.2k, False: 0]
  ------------------
  821|  26.2k|      rb = rc; rc = t; op -= BC_ADDVV-BC_ADDNV;
  822|   309k|    } else {
  823|   309k|      rb = expr_toanyreg(fs, e1);
  824|   309k|    }
  825|   335k|  }
  826|       |  /* Using expr_free might cause asserts if the order is wrong. */
  827|   342k|  if (e1->k == VNONRELOC && e1->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (827:7): [True: 315k, False: 26.2k]
  |  Branch (827:29): [True: 315k, False: 480]
  ------------------
  828|   342k|  if (e2->k == VNONRELOC && e2->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (828:7): [True: 156k, False: 185k]
  |  Branch (828:29): [True: 156k, False: 601]
  ------------------
  829|   342k|  e1->u.s.info = bcemit_ABC(fs, op, 0, rb, rc);
  ------------------
  |  |  434|   342k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|   342k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  830|   342k|  e1->k = VRELOCABLE;
  831|   342k|}
lj_parse.c:foldarith:
  777|   404k|{
  778|   404k|  TValue o;
  779|   404k|  lua_Number n;
  780|   404k|  if (!expr_isnumk_nojump(e1) || !expr_isnumk_nojump(e2)) return 0;
  ------------------
  |  |   76|   809k|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|   809k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 165k, False: 239k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|   165k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 165k, False: 0]
  |  |  ------------------
  ------------------
                if (!expr_isnumk_nojump(e1) || !expr_isnumk_nojump(e2)) return 0;
  ------------------
  |  |   76|   165k|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|   330k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 138k, False: 26.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|   138k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 138k, False: 592]
  |  |  ------------------
  ------------------
  781|   138k|  n = lj_vm_foldarith(expr_numberV(e1), expr_numberV(e2), (int)opr-OPR_ADD);
  ------------------
  |  |   80|   138k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|   138k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   138k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   138k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   138k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 138k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   138k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                n = lj_vm_foldarith(expr_numberV(e1), expr_numberV(e2), (int)opr-OPR_ADD);
  ------------------
  |  |   80|   138k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|   138k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   138k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   138k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   138k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 138k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   138k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  782|   138k|  setnumV(&o, n);
  ------------------
  |  |  945|   138k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  783|   138k|  if (tvisnan(&o) || tvismzero(&o)) return 0;  /* Avoid NaN and -0 as consts. */
  ------------------
  |  |  812|   276k|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 73.5k, False: 64.5k]
  |  |  ------------------
  ------------------
                if (tvisnan(&o) || tvismzero(&o)) return 0;  /* Avoid NaN and -0 as consts. */
  ------------------
  |  |  819|  64.5k|#define tvismzero(o)	((o)->u64 == U64x(80000000,00000000))
  |  |  ------------------
  |  |  |  |   94|  64.5k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  |  |  |  Branch (819:22): [True: 2.06k, False: 62.5k]
  |  |  ------------------
  ------------------
  784|  62.5k|  if (LJ_DUALNUM) {
  ------------------
  |  |  549|  62.5k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  785|      0|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  786|      0|    if ((lua_Number)k == n) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      setintV(&e1->u.nval, k);
  788|      0|      return 1;
  789|      0|    }
  790|      0|  }
  791|  62.5k|  setnumV(&e1->u.nval, n);
  ------------------
  |  |  945|  62.5k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  792|  62.5k|  return 1;
  793|  62.5k|}
lj_parse.c:bcemit_comp:
  835|   760k|{
  836|   760k|  ExpDesc *eret = e1;
  837|   760k|  BCIns ins;
  838|   760k|  expr_toval(fs, e1);
  839|   760k|  if (opr == OPR_EQ || opr == OPR_NE) {
  ------------------
  |  Branch (839:7): [True: 82.4k, False: 677k]
  |  Branch (839:24): [True: 13.1k, False: 664k]
  ------------------
  840|  95.5k|    BCOp op = opr == OPR_EQ ? BC_ISEQV : BC_ISNEV;
  ------------------
  |  Branch (840:15): [True: 82.4k, False: 13.1k]
  ------------------
  841|  95.5k|    BCReg ra;
  842|  95.5k|    if (expr_isk(e1)) { e1 = e2; e2 = eret; }  /* Need constant in 2nd arg. */
  ------------------
  |  |   73|  95.5k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 5.50k, False: 90.0k]
  |  |  ------------------
  ------------------
  843|  95.5k|    ra = expr_toanyreg(fs, e1);  /* First arg must be in a reg. */
  844|  95.5k|    expr_toval(fs, e2);
  845|  95.5k|    switch (e2->k) {
  846|    506|    case VKNIL: case VKFALSE: case VKTRUE:
  ------------------
  |  Branch (846:5): [True: 130, False: 95.4k]
  |  Branch (846:17): [True: 234, False: 95.2k]
  |  Branch (846:31): [True: 142, False: 95.3k]
  ------------------
  847|    506|      ins = BCINS_AD(op+(BC_ISEQP-BC_ISEQV), ra, const_pri(e2));
  ------------------
  |  |   56|  1.01k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 506, False: 0]
  |  |  ------------------
  ------------------
  848|      0|      break;
  849|     74|    case VKSTR:
  ------------------
  |  Branch (849:5): [True: 74, False: 95.4k]
  ------------------
  850|     74|      ins = BCINS_AD(op+(BC_ISEQS-BC_ISEQV), ra, const_str(fs, e2));
  ------------------
  |  |   56|     74|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  851|     74|      break;
  852|  45.8k|    case VKNUM:
  ------------------
  |  Branch (852:5): [True: 45.8k, False: 49.6k]
  ------------------
  853|  45.8k|      ins = BCINS_AD(op+(BC_ISEQN-BC_ISEQV), ra, const_num(fs, e2));
  ------------------
  |  |   56|  45.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  854|  45.8k|      break;
  855|  49.1k|    default:
  ------------------
  |  Branch (855:5): [True: 49.1k, False: 46.4k]
  ------------------
  856|  49.1k|      ins = BCINS_AD(op, ra, expr_toanyreg(fs, e2));
  ------------------
  |  |   56|  49.1k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  857|  49.1k|      break;
  858|  95.5k|    }
  859|   664k|  } else {
  860|   664k|    uint32_t op = opr-OPR_LT+BC_ISLT;
  861|   664k|    BCReg ra, rd;
  862|   664k|    if ((op-BC_ISLT) & 1) {  /* GT -> LT, GE -> LE */
  ------------------
  |  Branch (862:9): [True: 599k, False: 65.1k]
  ------------------
  863|   599k|      e1 = e2; e2 = eret;  /* Swap operands. */
  864|   599k|      op = ((op-BC_ISLT)^3)+BC_ISLT;
  865|   599k|      expr_toval(fs, e1);
  866|   599k|      ra = expr_toanyreg(fs, e1);
  867|   599k|      rd = expr_toanyreg(fs, e2);
  868|   599k|    } else {
  869|  65.1k|      rd = expr_toanyreg(fs, e2);
  870|  65.1k|      ra = expr_toanyreg(fs, e1);
  871|  65.1k|    }
  872|   664k|    ins = BCINS_AD(op, ra, rd);
  ------------------
  |  |   56|   664k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  873|   664k|  }
  874|       |  /* Using expr_free might cause asserts if the order is wrong. */
  875|   760k|  if (e1->k == VNONRELOC && e1->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (875:7): [True: 760k, False: 2]
  |  Branch (875:29): [True: 755k, False: 4.56k]
  ------------------
  876|   760k|  if (e2->k == VNONRELOC && e2->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (876:7): [True: 713k, False: 46.4k]
  |  Branch (876:29): [True: 713k, False: 231]
  ------------------
  877|   760k|  bcemit_INS(fs, ins);
  878|   760k|  eret->u.s.info = bcemit_jmp(fs);
  879|   760k|  eret->k = VJMP;
  880|   760k|}
lj_parse.c:bcemit_branch_t:
  739|  60.5k|{
  740|  60.5k|  BCPos pc;
  741|  60.5k|  expr_discharge(fs, e);
  742|  60.5k|  if (e->k == VKSTR || e->k == VKNUM || e->k == VKTRUE)
  ------------------
  |  Branch (742:7): [True: 127, False: 60.4k]
  |  Branch (742:24): [True: 3.13k, False: 57.3k]
  |  Branch (742:41): [True: 272, False: 57.0k]
  ------------------
  743|  3.52k|    pc = NO_JMP;  /* Never jump. */
  ------------------
  |  |   31|  3.52k|#define NO_JMP		(~(BCPos)0)
  ------------------
  744|  57.0k|  else if (e->k == VJMP)
  ------------------
  |  Branch (744:12): [True: 6.56k, False: 50.4k]
  ------------------
  745|  6.56k|    invertcond(fs, e), pc = e->u.s.info;
  746|  50.4k|  else if (e->k == VKFALSE || e->k == VKNIL)
  ------------------
  |  Branch (746:12): [True: 218, False: 50.2k]
  |  Branch (746:31): [True: 625, False: 49.6k]
  ------------------
  747|    843|    expr_toreg_nobranch(fs, e, NO_REG), pc = bcemit_jmp(fs);
  ------------------
  |  |   30|    843|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|    843|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  748|  49.6k|  else
  749|  49.6k|    pc = bcemit_branch(fs, e, 0);
  750|  60.5k|  jmp_append(fs, &e->f, pc);
  751|  60.5k|  jmp_tohere(fs, e->t);
  752|  60.5k|  e->t = NO_JMP;
  ------------------
  |  |   31|  60.5k|#define NO_JMP		(~(BCPos)0)
  ------------------
  753|  60.5k|}
lj_parse.c:lex_check:
 1017|   934k|{
 1018|   934k|  if (ls->tok != tok)
  ------------------
  |  Branch (1018:7): [True: 6.99k, False: 927k]
  ------------------
 1019|  6.99k|    err_token(ls, tok);
 1020|   927k|  lj_lex_next(ls);
 1021|   927k|}
lj_parse.c:jmp_append:
  330|  3.06M|{
  331|  3.06M|  if (l2 == NO_JMP) {
  ------------------
  |  |   31|  3.06M|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (331:7): [True: 1.90M, False: 1.16M]
  ------------------
  332|  1.90M|    return;
  333|  1.90M|  } else if (*l1 == NO_JMP) {
  ------------------
  |  |   31|  1.16M|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (333:14): [True: 1.07M, False: 83.9k]
  ------------------
  334|  1.07M|    *l1 = l2;
  335|  1.07M|  } else {
  336|  83.9k|    BCPos list = *l1;
  337|  83.9k|    BCPos next;
  338|   739k|    while ((next = jmp_next(fs, list)) != NO_JMP)  /* Find last element. */
  ------------------
  |  |   31|   739k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (338:12): [True: 655k, False: 83.9k]
  ------------------
  339|   655k|      list = next;
  340|  83.9k|    jmp_patchins(fs, list, l2);
  341|  83.9k|  }
  342|  3.06M|}
lj_parse.c:bcemit_jmp:
  694|   967k|{
  695|   967k|  BCPos jpc = fs->jpc;
  696|   967k|  BCPos j = fs->pc - 1;
  697|   967k|  BCIns *ip = &fs->bcbase[j].ins;
  698|   967k|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|   967k|#define NO_JMP		(~(BCPos)0)
  ------------------
  699|   967k|  if ((int32_t)j >= (int32_t)fs->lasttarget && bc_op(*ip) == BC_UCLO) {
  ------------------
  |  |   34|   965k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (699:7): [True: 965k, False: 2.57k]
  |  Branch (699:48): [True: 0, False: 965k]
  ------------------
  700|      0|    setbc_j(ip, NO_JMP);
  ------------------
  |  |   50|      0|#define setbc_j(p, x)	setbc_d(p, (BCPos)((int32_t)(x)+BCBIAS_J))
  |  |  ------------------
  |  |  |  |   49|      0|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|      0|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  701|      0|    fs->lasttarget = j+1;
  702|   967k|  } else {
  703|   967k|    j = bcemit_AJ(fs, BC_JMP, fs->freereg, NO_JMP);
  ------------------
  |  |  436|   967k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|   967k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   967k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  704|   967k|  }
  705|   967k|  jmp_append(fs, &j, jpc);
  706|   967k|  return j;
  707|   967k|}
lj_parse.c:jmp_tohere:
  360|   965k|{
  361|   965k|  fs->lasttarget = fs->pc;
  362|   965k|  jmp_append(fs, &fs->jpc, list);
  363|   965k|}
lj_parse.c:jmp_patch:
  367|  5.49k|{
  368|  5.49k|  if (target == fs->pc) {
  ------------------
  |  Branch (368:7): [True: 3.26k, False: 2.22k]
  ------------------
  369|  3.26k|    jmp_tohere(fs, list);
  370|  3.26k|  } else {
  371|  2.22k|    lj_assertFS(target < fs->pc, "bad jump target");
  ------------------
  |  |  167|  2.22k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  2.22k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.22k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2.22k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.22k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  372|  2.22k|    jmp_patchval(fs, list, target, NO_REG, target);
  ------------------
  |  |   30|  2.22k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  2.22k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  373|  2.22k|  }
  374|  5.49k|}
lj_parse.c:fscope_end:
 1294|  48.2k|{
 1295|  48.2k|  FuncScope *bl = fs->bl;
 1296|  48.2k|  LexState *ls = fs->ls;
 1297|  48.2k|  fs->bl = bl->prev;
 1298|  48.2k|  var_remove(ls, bl->nactvar);
 1299|  48.2k|  fs->freereg = fs->nactvar;
 1300|  48.2k|  lj_assertFS(bl->nactvar == fs->nactvar, "bad regalloc");
  ------------------
  |  |  167|  48.2k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  48.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  48.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 48.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  48.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1301|  48.2k|  if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  108|  48.2k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
                if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  109|  48.2k|#define FSCOPE_NOCLOSE		0x10	/* Do not close upvalues. */
  ------------------
                if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  108|  48.2k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1301:7): [True: 765, False: 47.5k]
  ------------------
 1302|    765|    bcemit_AJ(fs, BC_UCLO, bl->nactvar, 0);
  ------------------
  |  |  436|    765|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|    765|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    765|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1303|  48.2k|  if ((bl->flags & FSCOPE_BREAK)) {
  ------------------
  |  |  106|  48.2k|#define FSCOPE_BREAK		0x02	/* Break used in scope. */
  ------------------
  |  Branch (1303:7): [True: 0, False: 48.2k]
  ------------------
 1304|      0|    if ((bl->flags & FSCOPE_LOOP)) {
  ------------------
  |  |  105|      0|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
  |  Branch (1304:9): [True: 0, False: 0]
  ------------------
 1305|      0|      MSize idx = gola_new(ls, NAME_BREAK, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  111|      0|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
                    MSize idx = gola_new(ls, NAME_BREAK, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  120|      0|#define VSTACK_LABEL		0x04	/* Label. */
  ------------------
 1306|      0|      ls->vtop = idx;  /* Drop break label immediately. */
 1307|      0|      gola_resolve(ls, bl, idx);
 1308|      0|    } else {  /* Need the fixup step to propagate the breaks. */
 1309|      0|      gola_fixup(ls, bl);
 1310|      0|      return;
 1311|      0|    }
 1312|      0|  }
 1313|  48.2k|  if ((bl->flags & FSCOPE_GOLA)) {
  ------------------
  |  |  107|  48.2k|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
  |  Branch (1313:7): [True: 12.7k, False: 35.4k]
  ------------------
 1314|  12.7k|    gola_fixup(ls, bl);
 1315|  12.7k|  }
 1316|  48.2k|}
lj_parse.c:var_remove:
 1094|  48.2k|{
 1095|  48.2k|  FuncState *fs = ls->fs;
 1096|  91.9k|  while (fs->nactvar > tolevel)
  ------------------
  |  Branch (1096:10): [True: 43.6k, False: 48.2k]
  ------------------
 1097|  43.6k|    var_get(ls, fs, --fs->nactvar).endpc = fs->pc;
  ------------------
  |  | 1050|  43.6k|#define var_get(ls, fs, i)	((ls)->vstack[(fs)->varmap[(i)]])
  ------------------
 1098|  48.2k|}
lj_parse.c:gola_new:
 1163|  27.9k|{
 1164|  27.9k|  FuncState *fs = ls->fs;
 1165|  27.9k|  MSize vtop = ls->vtop;
 1166|  27.9k|  if (LJ_UNLIKELY(vtop >= ls->sizevstack)) {
  ------------------
  |  |  146|  27.9k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 2.82k, False: 25.1k]
  |  |  ------------------
  ------------------
 1167|  2.82k|    if (ls->sizevstack >= LJ_MAX_VSTACK)
  ------------------
  |  |  115|  2.82k|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|  2.82k|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1167:9): [True: 0, False: 2.82k]
  ------------------
 1168|      0|      lj_lex_error(ls, 0, LJ_ERR_XLIMC, LJ_MAX_VSTACK);
  ------------------
  |  |  115|      0|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|      0|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
 1169|  2.82k|    lj_mem_growvec(ls->L, ls->vstack, ls->sizevstack, LJ_MAX_VSTACK, VarInfo);
  ------------------
  |  |  129|  2.82k|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
 1170|  2.82k|  }
 1171|  27.9k|  lj_assertFS(name == NAME_BREAK || lj_tab_getstr(fs->kt, name) != NULL,
  ------------------
  |  |  167|  27.9k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  27.9k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  55.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 27.9k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 27.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  27.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1172|  27.9k|	      "unanchored label name");
 1173|       |  /* NOBARRIER: name is anchored in fs->kt and ls->vstack is not a GCobj. */
 1174|  27.9k|  setgcref(ls->vstack[vtop].name, obj2gco(name));
  ------------------
  |  |   72|  27.9k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1175|  27.9k|  ls->vstack[vtop].startpc = pc;
 1176|  27.9k|  ls->vstack[vtop].slot = (uint8_t)fs->nactvar;
 1177|  27.9k|  ls->vstack[vtop].info = info;
 1178|  27.9k|  ls->vtop = vtop+1;
 1179|  27.9k|  return vtop;
 1180|  27.9k|}
lj_parse.c:gola_resolve:
 1216|  17.2k|{
 1217|  17.2k|  VarInfo *vg = ls->vstack + bl->vstart;
 1218|  17.2k|  VarInfo *vl = ls->vstack + idx;
 1219|  47.8k|  for (; vg < vl; vg++)
  ------------------
  |  Branch (1219:10): [True: 30.6k, False: 17.2k]
  ------------------
 1220|  30.6k|    if (gcrefeq(vg->name, vl->name) && gola_isgoto(vg)) {
  ------------------
  |  |   70|  61.2k|#define gcrefeq(r1, r2)	((r1).gcptr64 == (r2).gcptr64)
  |  |  ------------------
  |  |  |  Branch (70:25): [True: 3.76k, False: 26.8k]
  |  |  ------------------
  ------------------
                  if (gcrefeq(vg->name, vl->name) && gola_isgoto(vg)) {
  ------------------
  |  | 1182|  3.76k|#define gola_isgoto(v)		((v)->info & VSTACK_GOTO)
  |  |  ------------------
  |  |  |  |  119|  3.76k|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |  |  Branch (1182:25): [True: 3.26k, False: 493]
  |  |  ------------------
  ------------------
 1221|  3.26k|      if (vg->slot < vl->slot) {
  ------------------
  |  Branch (1221:11): [True: 0, False: 3.26k]
  ------------------
 1222|      0|	GCstr *name = strref(var_get(ls, ls->fs, vg->slot).name);
  ------------------
  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1223|      0|	lj_assertLS((uintptr_t)name >= VARNAME__MAX, "expected goto name");
  ------------------
  |  |   89|      0|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1224|      0|	ls->linenumber = ls->fs->bcbase[vg->startpc].line;
 1225|      0|	lj_assertLS(strref(vg->name) != NAME_BREAK, "unexpected break");
  ------------------
  |  |   89|      0|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1226|      0|	lj_lex_error(ls, 0, LJ_ERR_XGSCOPE,
 1227|      0|		     strdata(strref(vg->name)), strdata(name));
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
              		     strdata(strref(vg->name)), strdata(name));
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1228|      0|      }
 1229|  3.26k|      gola_patch(ls, vg, vl);
 1230|  3.26k|    }
 1231|  17.2k|}
lj_parse.c:gola_patch:
 1188|  4.30k|{
 1189|  4.30k|  FuncState *fs = ls->fs;
 1190|  4.30k|  BCPos pc = vg->startpc;
 1191|  4.30k|  setgcrefnull(vg->name);  /* Invalidate pending goto. */
  ------------------
  |  |   76|  4.30k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
 1192|  4.30k|  setbc_a(&fs->bcbase[pc].ins, vl->slot);
  ------------------
  |  |   45|  4.30k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  4.30k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  4.30k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1193|  4.30k|  jmp_patch(fs, pc, vl->startpc);
 1194|  4.30k|}
lj_parse.c:gola_fixup:
 1235|  12.7k|{
 1236|  12.7k|  VarInfo *v = ls->vstack + bl->vstart;
 1237|  12.7k|  VarInfo *ve = ls->vstack + ls->vtop;
 1238|  77.4k|  for (; v < ve; v++) {
  ------------------
  |  Branch (1238:10): [True: 64.7k, False: 12.7k]
  ------------------
 1239|  64.7k|    GCstr *name = strref(v->name);
  ------------------
  |  |  315|  64.7k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  64.7k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1240|  64.7k|    if (name != NULL) {  /* Only consider remaining valid gotos/labels. */
  ------------------
  |  Branch (1240:9): [True: 52.3k, False: 12.3k]
  ------------------
 1241|  52.3k|      if (gola_islabel(v)) {
  ------------------
  |  | 1183|  52.3k|#define gola_islabel(v)		((v)->info & VSTACK_LABEL)
  |  |  ------------------
  |  |  |  |  120|  52.3k|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  |  |  |  Branch (1183:26): [True: 11.8k, False: 40.4k]
  |  |  ------------------
  ------------------
 1242|  11.8k|	VarInfo *vg;
 1243|  11.8k|	setgcrefnull(v->name);  /* Invalidate label that goes out of scope. */
  ------------------
  |  |   76|  11.8k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
 1244|  35.2k|	for (vg = v+1; vg < ve; vg++)  /* Resolve pending backward gotos. */
  ------------------
  |  Branch (1244:17): [True: 23.3k, False: 11.8k]
  ------------------
 1245|  23.3k|	  if (strref(vg->name) == name && gola_isgoto(vg)) {
  ------------------
  |  |  315|  23.3k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  23.3k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
              	  if (strref(vg->name) == name && gola_isgoto(vg)) {
  ------------------
  |  | 1182|  2.25k|#define gola_isgoto(v)		((v)->info & VSTACK_GOTO)
  |  |  ------------------
  |  |  |  |  119|  2.25k|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |  |  Branch (1182:25): [True: 1.04k, False: 1.21k]
  |  |  ------------------
  ------------------
  |  Branch (1245:8): [True: 2.25k, False: 21.1k]
  ------------------
 1246|  1.04k|	    if ((bl->flags&FSCOPE_UPVAL) && vg->slot > v->slot)
  ------------------
  |  |  108|  1.04k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1246:10): [True: 320, False: 720]
  |  Branch (1246:38): [True: 0, False: 320]
  ------------------
 1247|      0|	      gola_close(ls, vg);
 1248|  1.04k|	    gola_patch(ls, vg, v);
 1249|  1.04k|	  }
 1250|  40.4k|      } else if (gola_isgoto(v)) {
  ------------------
  |  | 1182|  40.4k|#define gola_isgoto(v)		((v)->info & VSTACK_GOTO)
  |  |  ------------------
  |  |  |  |  119|  40.4k|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |  |  Branch (1182:25): [True: 14.1k, False: 26.3k]
  |  |  ------------------
  ------------------
 1251|  14.1k|	if (bl->prev) {  /* Propagate goto or break to outer scope. */
  ------------------
  |  Branch (1251:6): [True: 14.1k, False: 29]
  ------------------
 1252|  14.1k|	  bl->prev->flags |= name == NAME_BREAK ? FSCOPE_BREAK : FSCOPE_GOLA;
  ------------------
  |  |  111|  14.1k|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
              	  bl->prev->flags |= name == NAME_BREAK ? FSCOPE_BREAK : FSCOPE_GOLA;
  ------------------
  |  |  106|      0|#define FSCOPE_BREAK		0x02	/* Break used in scope. */
  ------------------
              	  bl->prev->flags |= name == NAME_BREAK ? FSCOPE_BREAK : FSCOPE_GOLA;
  ------------------
  |  |  107|  28.3k|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
  |  Branch (1252:23): [True: 0, False: 14.1k]
  ------------------
 1253|  14.1k|	  v->slot = bl->nactvar;
 1254|  14.1k|	  if ((bl->flags & FSCOPE_UPVAL))
  ------------------
  |  |  108|  14.1k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1254:8): [True: 3.05k, False: 11.0k]
  ------------------
 1255|  3.05k|	    gola_close(ls, v);
 1256|  14.1k|	} else {  /* No outer scope: undefined goto label or no loop. */
 1257|     29|	  ls->linenumber = ls->fs->bcbase[v->startpc].line;
 1258|     29|	  if (name == NAME_BREAK)
  ------------------
  |  |  111|     29|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
  |  Branch (1258:8): [True: 0, False: 29]
  ------------------
 1259|      0|	    lj_lex_error(ls, 0, LJ_ERR_XBREAK);
 1260|     29|	  else
 1261|     29|	    lj_lex_error(ls, 0, LJ_ERR_XLUNDEF, strdata(name));
  ------------------
  |  |  316|     29|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1262|     29|	}
 1263|  14.1k|      }
 1264|  52.3k|    }
 1265|  64.7k|  }
 1266|  12.7k|}
lj_parse.c:gola_close:
 1198|  3.05k|{
 1199|  3.05k|  FuncState *fs = ls->fs;
 1200|  3.05k|  BCPos pc = vg->startpc;
 1201|  3.05k|  BCIns *ip = &fs->bcbase[pc].ins;
 1202|  3.05k|  lj_assertFS(gola_isgoto(vg), "expected goto");
  ------------------
  |  |  167|  3.05k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  3.05k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.05k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3.05k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.05k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1203|  3.05k|  lj_assertFS(bc_op(*ip) == BC_JMP || bc_op(*ip) == BC_UCLO,
  ------------------
  |  |  167|  3.05k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  3.05k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.42k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 2.68k, False: 369]
  |  |  |  |  |  |  |  Branch (355:5): [True: 369, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.05k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1204|  3.05k|	      "bad bytecode op %d", bc_op(*ip));
 1205|  3.05k|  setbc_a(ip, vg->slot);
  ------------------
  |  |   45|  3.05k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  3.05k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  3.05k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1206|  3.05k|  if (bc_op(*ip) == BC_JMP) {
  ------------------
  |  |   34|  3.05k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (1206:7): [True: 2.68k, False: 369]
  ------------------
 1207|  2.68k|    BCPos next = jmp_next(fs, pc);
 1208|  2.68k|    if (next != NO_JMP) jmp_patch(fs, next, pc);  /* Jump to UCLO. */
  ------------------
  |  |   31|  2.68k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (1208:9): [True: 1.18k, False: 1.50k]
  ------------------
 1209|  2.68k|    setbc_op(ip, BC_UCLO);  /* Turn into UCLO. */
  ------------------
  |  |   44|  2.68k|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|  2.68k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  2.68k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1210|  2.68k|    setbc_j(ip, NO_JMP);
  ------------------
  |  |   50|  2.68k|#define setbc_j(p, x)	setbc_d(p, (BCPos)((int32_t)(x)+BCBIAS_J))
  |  |  ------------------
  |  |  |  |   49|  2.68k|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  2.68k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1211|  2.68k|  }
 1212|  3.05k|}
lj_parse.c:parse_block:
 2430|  62.4k|{
 2431|  62.4k|  FuncState *fs = ls->fs;
 2432|  62.4k|  FuncScope bl;
 2433|  62.4k|  fscope_begin(fs, &bl, 0);
 2434|  62.4k|  parse_chunk(ls);
 2435|  62.4k|  fscope_end(fs);
 2436|  62.4k|}
lj_parse.c:lex_match:
 1025|   411k|{
 1026|   411k|  if (!lex_opt(ls, what)) {
  ------------------
  |  Branch (1026:7): [True: 14.4k, False: 396k]
  ------------------
 1027|  14.4k|    if (line == ls->linenumber) {
  ------------------
  |  Branch (1027:9): [True: 10.7k, False: 3.78k]
  ------------------
 1028|  10.7k|      err_token(ls, what);
 1029|  10.7k|    } else {
 1030|  3.78k|      const char *swhat = lj_lex_token2str(ls, what);
 1031|  3.78k|      const char *swho = lj_lex_token2str(ls, who);
 1032|  3.78k|      lj_lex_error(ls, ls->tok, LJ_ERR_XMATCH, swhat, swho, line);
 1033|  3.78k|    }
 1034|  14.4k|  }
 1035|   411k|}
lj_parse.c:parse_for:
 2600|  28.0k|{
 2601|  28.0k|  FuncState *fs = ls->fs;
 2602|  28.0k|  GCstr *varname;
 2603|  28.0k|  FuncScope bl;
 2604|  28.0k|  fscope_begin(fs, &bl, FSCOPE_LOOP);
  ------------------
  |  |  105|  28.0k|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
 2605|  28.0k|  lj_lex_next(ls);  /* Skip 'for'. */
 2606|  28.0k|  varname = lex_str(ls);  /* Get first variable name. */
 2607|  28.0k|  if (ls->tok == '=')
  ------------------
  |  Branch (2607:7): [True: 18.9k, False: 9.13k]
  ------------------
 2608|  18.9k|    parse_for_num(ls, varname, line);
 2609|  9.13k|  else if (ls->tok == ',' || ls->tok == TK_in)
  ------------------
  |  Branch (2609:12): [True: 2.67k, False: 6.45k]
  |  Branch (2609:30): [True: 6.27k, False: 185]
  ------------------
 2610|  8.84k|    parse_for_iter(ls, varname);
 2611|    292|  else
 2612|    292|    err_syntax(ls, LJ_ERR_XFOR);
 2613|  27.7k|  lex_match(ls, TK_end, TK_for, line);
 2614|  27.7k|  fscope_end(fs);  /* Resolve break list. */
 2615|  27.7k|}
lj_parse.c:parse_for_num:
 2487|  18.9k|{
 2488|  18.9k|  FuncState *fs = ls->fs;
 2489|  18.9k|  BCReg base = fs->freereg;
 2490|  18.9k|  FuncScope bl;
 2491|  18.9k|  BCPos loop, loopend;
 2492|       |  /* Hidden control variables. */
 2493|  18.9k|  var_new_fixed(ls, FORL_IDX, VARNAME_FOR_IDX);
  ------------------
  |  | 1076|  18.9k|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2494|  18.9k|  var_new_fixed(ls, FORL_STOP, VARNAME_FOR_STOP);
  ------------------
  |  | 1076|  18.9k|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2495|  18.9k|  var_new_fixed(ls, FORL_STEP, VARNAME_FOR_STEP);
  ------------------
  |  | 1076|  18.9k|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2496|       |  /* Visible copy of index variable. */
 2497|  18.9k|  var_new(ls, FORL_EXT, varname);
 2498|  18.9k|  lex_check(ls, '=');
 2499|  18.9k|  expr_next(ls);
 2500|  18.9k|  lex_check(ls, ',');
 2501|  18.9k|  expr_next(ls);
 2502|  18.9k|  if (lex_opt(ls, ',')) {
  ------------------
  |  Branch (2502:7): [True: 326, False: 18.5k]
  ------------------
 2503|    326|    expr_next(ls);
 2504|  18.5k|  } else {
 2505|  18.5k|    bcemit_AD(fs, BC_KSHORT, fs->freereg, 1);  /* Default step is 1. */
  ------------------
  |  |  435|  18.5k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  18.5k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2506|  18.5k|    bcreg_reserve(fs, 1);
 2507|  18.5k|  }
 2508|  18.9k|  var_add(ls, 3);  /* Hidden control variables. */
 2509|  18.9k|  lex_check(ls, TK_do);
 2510|  18.9k|  loop = bcemit_AJ(fs, BC_FORI, base, NO_JMP);
  ------------------
  |  |  436|  18.9k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  18.9k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  18.9k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2511|  18.9k|  fscope_begin(fs, &bl, 0);  /* Scope for visible variables. */
 2512|  18.9k|  var_add(ls, 1);
 2513|  18.9k|  bcreg_reserve(fs, 1);
 2514|  18.9k|  parse_block(ls);
 2515|  18.9k|  fscope_end(fs);
 2516|       |  /* Perform loop inversion. Loop control instructions are at the end. */
 2517|  18.9k|  loopend = bcemit_AJ(fs, BC_FORL, base, NO_JMP);
  ------------------
  |  |  436|  18.9k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  18.9k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  18.9k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2518|  18.9k|  fs->bcbase[loopend].line = line;  /* Fix line for control ins. */
 2519|  18.9k|  jmp_patchins(fs, loopend, loop+1);
 2520|  18.9k|  jmp_patchins(fs, loop, fs->pc);
 2521|  18.9k|}
lj_parse.c:expr_next:
 2142|  37.9k|{
 2143|  37.9k|  ExpDesc e;
 2144|  37.9k|  expr(ls, &e);
 2145|  37.9k|  expr_tonextreg(ls->fs, &e);
 2146|  37.9k|}
lj_parse.c:parse_for_iter:
 2558|  8.84k|{
 2559|  8.84k|  FuncState *fs = ls->fs;
 2560|  8.84k|  ExpDesc e;
 2561|  8.84k|  BCReg nvars = 0;
 2562|  8.84k|  BCLine line;
 2563|  8.84k|  BCReg base = fs->freereg + 3;
 2564|  8.84k|  BCPos loop, loopend, exprpc = fs->pc;
 2565|  8.84k|  FuncScope bl;
 2566|  8.84k|  int isnext;
 2567|       |  /* Hidden control variables. */
 2568|  8.84k|  var_new_fixed(ls, nvars++, VARNAME_FOR_GEN);
  ------------------
  |  | 1076|  8.84k|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2569|  8.84k|  var_new_fixed(ls, nvars++, VARNAME_FOR_STATE);
  ------------------
  |  | 1076|  8.84k|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2570|  8.84k|  var_new_fixed(ls, nvars++, VARNAME_FOR_CTL);
  ------------------
  |  | 1076|  8.84k|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2571|       |  /* Visible variables returned from iterator. */
 2572|  8.84k|  var_new(ls, nvars++, indexname);
 2573|  29.1k|  while (lex_opt(ls, ','))
  ------------------
  |  Branch (2573:10): [True: 20.2k, False: 8.84k]
  ------------------
 2574|  20.2k|    var_new(ls, nvars++, lex_str(ls));
 2575|  8.84k|  lex_check(ls, TK_in);
 2576|  8.84k|  line = ls->linenumber;
 2577|  8.84k|  assign_adjust(ls, 3, expr_list(ls, &e), &e);
 2578|       |  /* The iterator needs another 3 [4] slots (func [pc] | state ctl). */
 2579|  8.84k|  bcreg_bump(fs, 3+ls->fr2);
 2580|  8.84k|  isnext = (nvars <= 5 && fs->pc > exprpc && predict_next(ls, fs, exprpc));
  ------------------
  |  Branch (2580:13): [True: 6.96k, False: 1.88k]
  |  Branch (2580:27): [True: 6.96k, False: 0]
  |  Branch (2580:46): [True: 588, False: 6.37k]
  ------------------
 2581|  8.84k|  var_add(ls, 3);  /* Hidden control variables. */
 2582|  8.84k|  lex_check(ls, TK_do);
 2583|  8.84k|  loop = bcemit_AJ(fs, isnext ? BC_ISNEXT : BC_JMP, base, NO_JMP);
  ------------------
  |  |  436|  8.84k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  8.84k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  17.6k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (56:13): [True: 557, False: 8.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2584|  8.84k|  fscope_begin(fs, &bl, 0);  /* Scope for visible variables. */
 2585|  8.84k|  var_add(ls, nvars-3);
 2586|  8.84k|  bcreg_reserve(fs, nvars-3);
 2587|  8.84k|  parse_block(ls);
 2588|  8.84k|  fscope_end(fs);
 2589|       |  /* Perform loop inversion. Loop control instructions are at the end. */
 2590|  8.84k|  jmp_patchins(fs, loop, fs->pc);
 2591|  8.84k|  bcemit_ABC(fs, isnext ? BC_ITERN : BC_ITERC, base, nvars-3+1, 2+1);
  ------------------
  |  |  434|  8.84k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|  17.6k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (54:13): [True: 0, False: 8.84k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2592|  8.84k|  loopend = bcemit_AJ(fs, BC_ITERL, base, NO_JMP);
  ------------------
  |  |  436|  8.84k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  8.84k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  8.84k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2593|  8.84k|  fs->bcbase[loopend-1].line = line;  /* Fix line for control ins. */
 2594|  8.84k|  fs->bcbase[loopend].line = line;
 2595|  8.84k|  jmp_patchins(fs, loopend, loop+1);
 2596|  8.84k|}
lj_parse.c:assign_adjust:
 2193|  36.4k|{
 2194|  36.4k|  FuncState *fs = ls->fs;
 2195|  36.4k|  int32_t extra = (int32_t)nvars - (int32_t)nexps;
 2196|  36.4k|  if (e->k == VCALL) {
  ------------------
  |  Branch (2196:7): [True: 1.14k, False: 35.3k]
  ------------------
 2197|  1.14k|    extra++;  /* Compensate for the VCALL itself. */
 2198|  1.14k|    if (extra < 0) extra = 0;
  ------------------
  |  Branch (2198:9): [True: 212, False: 934]
  ------------------
 2199|  1.14k|    setbc_b(bcptr(fs, e), extra+1);  /* Fixup call results. */
  ------------------
  |  |   46|  1.14k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  1.14k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  1.14k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2200|  1.14k|    if (extra > 1) bcreg_reserve(fs, (BCReg)extra-1);
  ------------------
  |  Branch (2200:9): [True: 241, False: 905]
  ------------------
 2201|  35.3k|  } else {
 2202|  35.3k|    if (e->k != VVOID)
  ------------------
  |  Branch (2202:9): [True: 35.3k, False: 0]
  ------------------
 2203|  35.3k|      expr_tonextreg(fs, e);  /* Close last expression. */
 2204|  35.3k|    if (extra > 0) {  /* Leftover LHS are set to nil. */
  ------------------
  |  Branch (2204:9): [True: 11.8k, False: 23.4k]
  ------------------
 2205|  11.8k|      BCReg reg = fs->freereg;
 2206|  11.8k|      bcreg_reserve(fs, (BCReg)extra);
 2207|  11.8k|      bcemit_nil(fs, reg, (BCReg)extra);
 2208|  11.8k|    }
 2209|  35.3k|  }
 2210|  36.4k|  if (nexps > nvars)
  ------------------
  |  Branch (2210:7): [True: 24.2k, False: 12.2k]
  ------------------
 2211|  24.2k|    ls->fs->freereg -= nexps - nvars;  /* Drop leftover regs. */
 2212|  36.4k|}
lj_parse.c:predict_next:
 2528|  6.96k|{
 2529|  6.96k|  BCIns ins = fs->bcbase[pc].ins;
 2530|  6.96k|  GCstr *name;
 2531|  6.96k|  cTValue *o;
 2532|  6.96k|  switch (bc_op(ins)) {
  ------------------
  |  |   34|  6.96k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
 2533|  2.73k|  case BC_MOV:
  ------------------
  |  Branch (2533:3): [True: 2.73k, False: 4.23k]
  ------------------
 2534|  2.73k|    if (bc_d(ins) >= fs->nactvar) return 0;
  ------------------
  |  |   38|  2.73k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (2534:9): [True: 0, False: 2.73k]
  ------------------
 2535|  2.73k|    name = gco2str(gcref(var_get(ls, fs, bc_d(ins)).name));
  ------------------
  |  |  765|  2.73k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  2.73k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.73k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.73k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.73k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.73k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2536|      0|    break;
 2537|    250|  case BC_UGET:
  ------------------
  |  Branch (2537:3): [True: 250, False: 6.71k]
  ------------------
 2538|    250|    name = gco2str(gcref(ls->vstack[fs->uvmap[bc_d(ins)]].name));
  ------------------
  |  |  765|    250|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|    250|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    250|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    250|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 250, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    250|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2539|      0|    break;
 2540|  3.30k|  case BC_GGET:
  ------------------
  |  Branch (2540:3): [True: 3.30k, False: 3.65k]
  ------------------
 2541|       |    /* There's no inverse index (yet), so lookup the strings. */
 2542|  3.30k|    o = lj_tab_getstr(fs->kt, lj_str_newlit(ls->L, "pairs"));
  ------------------
  |  |   28|  3.30k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
 2543|  3.30k|    if (o && tvhaskslot(o) && tvkslot(o) == bc_d(ins))
  ------------------
  |  |  201|  3.79k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 265, False: 229]
  |  |  ------------------
  ------------------
                  if (o && tvhaskslot(o) && tvkslot(o) == bc_d(ins))
  ------------------
  |  |  202|    265|#define tvkslot(o)	((o)->u32.lo)
  ------------------
                  if (o && tvhaskslot(o) && tvkslot(o) == bc_d(ins))
  ------------------
  |  |   38|    265|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (2543:9): [True: 494, False: 2.80k]
  |  Branch (2543:31): [True: 158, False: 107]
  ------------------
 2544|    158|      return 1;
 2545|  3.14k|    o = lj_tab_getstr(fs->kt, lj_str_newlit(ls->L, "next"));
  ------------------
  |  |   28|  3.14k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
 2546|  3.14k|    if (o && tvhaskslot(o) && tvkslot(o) == bc_d(ins))
  ------------------
  |  |  201|  3.86k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 557, False: 167]
  |  |  ------------------
  ------------------
                  if (o && tvhaskslot(o) && tvkslot(o) == bc_d(ins))
  ------------------
  |  |  202|    557|#define tvkslot(o)	((o)->u32.lo)
  ------------------
                  if (o && tvhaskslot(o) && tvkslot(o) == bc_d(ins))
  ------------------
  |  |   38|    557|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (2546:9): [True: 724, False: 2.42k]
  |  Branch (2546:31): [True: 70, False: 487]
  ------------------
 2547|     70|      return 1;
 2548|  3.07k|    return 0;
 2549|    679|  default:
  ------------------
  |  Branch (2549:3): [True: 679, False: 6.28k]
  ------------------
 2550|    679|    return 0;
 2551|  6.96k|  }
 2552|  2.98k|  return (name->len == 5 && !strcmp(strdata(name), "pairs")) ||
  ------------------
  |  |  316|    399|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (2552:11): [True: 399, False: 2.58k]
  |  Branch (2552:29): [True: 360, False: 39]
  ------------------
 2553|  2.98k|	 (name->len == 4 && !strcmp(strdata(name), "next"));
  ------------------
  |  |  316|     95|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (2553:4): [True: 95, False: 2.52k]
  |  Branch (2553:22): [True: 0, False: 95]
  ------------------
 2554|  6.96k|}
lj_parse.c:parse_func:
 2301|  2.09k|{
 2302|  2.09k|  FuncState *fs;
 2303|  2.09k|  ExpDesc v, b;
 2304|  2.09k|  int needself = 0;
 2305|  2.09k|  lj_lex_next(ls);  /* Skip 'function'. */
 2306|       |  /* Parse function name. */
 2307|  2.09k|  var_lookup(ls, &v);
  ------------------
  |  | 1157|  2.09k|  var_lookup_((ls)->fs, lex_str(ls), (e), 1)
  ------------------
 2308|  2.18k|  while (ls->tok == '.')  /* Multiple dot-separated fields. */
  ------------------
  |  Branch (2308:10): [True: 91, False: 2.09k]
  ------------------
 2309|     91|    expr_field(ls, &v);
 2310|  2.09k|  if (ls->tok == ':') {  /* Optional colon to signify method call. */
  ------------------
  |  Branch (2310:7): [True: 1.65k, False: 434]
  ------------------
 2311|  1.65k|    needself = 1;
 2312|  1.65k|    expr_field(ls, &v);
 2313|  1.65k|  }
 2314|  2.09k|  parse_body(ls, &b, needself, line);
 2315|  2.09k|  fs = ls->fs;
 2316|  2.09k|  bcemit_store(fs, &v, &b);
 2317|  2.09k|  fs->bcbase[fs->pc - 1].line = line;  /* Set line for the store. */
 2318|  2.09k|}
lj_parse.c:parse_label:
 2396|  17.8k|{
 2397|  17.8k|  FuncState *fs = ls->fs;
 2398|  17.8k|  GCstr *name;
 2399|  17.8k|  MSize idx;
 2400|  17.8k|  fs->lasttarget = fs->pc;
 2401|  17.8k|  fs->bl->flags |= FSCOPE_GOLA;
  ------------------
  |  |  107|  17.8k|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
 2402|  17.8k|  lj_lex_next(ls);  /* Skip '::'. */
 2403|  17.8k|  name = lex_str(ls);
 2404|  17.8k|  if (gola_findlabel(ls, name))
  ------------------
  |  Branch (2404:7): [True: 17, False: 17.8k]
  ------------------
 2405|     17|    lj_lex_error(ls, 0, LJ_ERR_XLDUP, strdata(name));
  ------------------
  |  |  316|     17|#define strdata(s)	((const char *)((s)+1))
  ------------------
 2406|  17.8k|  idx = gola_new(ls, name, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  120|  17.8k|#define VSTACK_LABEL		0x04	/* Label. */
  ------------------
 2407|  17.8k|  lex_check(ls, TK_label);
 2408|       |  /* Recursively parse trailing statements: labels and ';' (Lua 5.2 only). */
 2409|  19.5k|  for (;;) {
 2410|  19.5k|    if (ls->tok == TK_label) {
  ------------------
  |  Branch (2410:9): [True: 2.25k, False: 17.2k]
  ------------------
 2411|  2.25k|      synlevel_begin(ls);
 2412|  2.25k|      parse_label(ls);
 2413|  2.25k|      synlevel_end(ls);
  ------------------
  |  | 2052|  2.25k|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2414|  17.2k|    } else if (LJ_52 && ls->tok == ';') {
  ------------------
  |  |  697|  34.5k|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (2414:25): [True: 0, False: 0]
  ------------------
 2415|      0|      lj_lex_next(ls);
 2416|  17.2k|    } else {
 2417|  17.2k|      break;
 2418|  17.2k|    }
 2419|  19.5k|  }
 2420|       |  /* Trailing label is considered to be outside of scope. */
 2421|  17.8k|  if (parse_isend(ls->tok) && ls->tok != TK_until)
  ------------------
  |  Branch (2421:7): [True: 1.48k, False: 16.3k]
  |  Branch (2421:31): [True: 1.38k, False: 105]
  ------------------
 2422|  1.38k|    ls->vstack[idx].slot = fs->bl->nactvar;
 2423|  17.8k|  gola_resolve(ls, fs->bl, idx);
 2424|  17.8k|}
lj_parse.c:gola_findlabel:
 1270|  27.9k|{
 1271|  27.9k|  VarInfo *v = ls->vstack + ls->fs->bl->vstart;
 1272|  27.9k|  VarInfo *ve = ls->vstack + ls->vtop;
 1273|   197k|  for (; v < ve; v++)
  ------------------
  |  Branch (1273:10): [True: 170k, False: 27.1k]
  ------------------
 1274|   170k|    if (strref(v->name) == name && gola_islabel(v))
  ------------------
  |  |  315|   170k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|   170k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                  if (strref(v->name) == name && gola_islabel(v))
  ------------------
  |  | 1183|  77.7k|#define gola_islabel(v)		((v)->info & VSTACK_LABEL)
  |  |  ------------------
  |  |  |  |  120|  77.7k|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  |  |  |  Branch (1183:26): [True: 818, False: 76.9k]
  |  |  ------------------
  ------------------
  |  Branch (1274:9): [True: 77.7k, False: 92.4k]
  ------------------
 1275|    818|      return v;
 1276|  27.1k|  return NULL;
 1277|  27.9k|}
lj_parse.c:parse_goto:
 2384|  10.1k|{
 2385|  10.1k|  FuncState *fs = ls->fs;
 2386|  10.1k|  GCstr *name = lex_str(ls);
 2387|  10.1k|  VarInfo *vl = gola_findlabel(ls, name);
 2388|  10.1k|  if (vl)  /* Treat backwards goto within same scope like a loop. */
  ------------------
  |  Branch (2388:7): [True: 801, False: 9.37k]
  ------------------
 2389|    801|    bcemit_AJ(fs, BC_LOOP, vl->slot, -1);  /* No BC range check. */
  ------------------
  |  |  436|    801|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|    801|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    801|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|  10.1k|  fs->bl->flags |= FSCOPE_GOLA;
  ------------------
  |  |  107|  10.1k|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
 2391|  10.1k|  gola_new(ls, name, VSTACK_GOTO, bcemit_jmp(fs));
  ------------------
  |  |  119|  10.1k|#define VSTACK_GOTO		0x02	/* Pending goto. */
  ------------------
 2392|  10.1k|}
lj_parse.c:parse_call_assign:
 2253|   300k|{
 2254|   300k|  FuncState *fs = ls->fs;
 2255|   300k|  LHSVarList vl;
 2256|   300k|  expr_primary(ls, &vl.v);
 2257|   300k|  if (vl.v.k == VCALL) {  /* Function call statement. */
  ------------------
  |  Branch (2257:7): [True: 14.0k, False: 286k]
  ------------------
 2258|  14.0k|    setbc_b(bcptr(fs, &vl.v), 1);  /* No results. */
  ------------------
  |  |   46|  14.0k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  14.0k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  14.0k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2259|   286k|  } else {  /* Start of an assignment. */
 2260|   286k|    vl.prev = NULL;
 2261|   286k|    parse_assignment(ls, &vl, 1);
 2262|   286k|  }
 2263|   300k|}
lj_parse.c:parse_assignment:
 2216|   309k|{
 2217|   309k|  ExpDesc e;
 2218|   309k|  checkcond(ls, VLOCAL <= lh->v.k && lh->v.k <= VINDEXED, LJ_ERR_XSYNTAX);
  ------------------
  |  |  194|   618k|#define checkcond(ls, c, em)		{ if (!(c)) err_syntax(ls, em); }
  |  |  ------------------
  |  |  |  Branch (194:39): [True: 309k, False: 25]
  |  |  |  Branch (194:39): [True: 308k, False: 165]
  |  |  ------------------
  ------------------
 2219|   308k|  if (lex_opt(ls, ',')) {  /* Collect LHS list and recurse upwards. */
  ------------------
  |  Branch (2219:7): [True: 56.0k, False: 252k]
  ------------------
 2220|  56.0k|    LHSVarList vl;
 2221|  56.0k|    vl.prev = lh;
 2222|  56.0k|    expr_primary(ls, &vl.v);
 2223|  56.0k|    if (vl.v.k == VLOCAL)
  ------------------
  |  Branch (2223:9): [True: 12.9k, False: 43.1k]
  ------------------
 2224|  12.9k|      assign_hazard(ls, lh, &vl.v);
 2225|  56.0k|    checklimit(ls->fs, ls->level + nvars, LJ_MAX_XLEVEL, "variable names");
  ------------------
  |  |  192|  56.0k|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 10, False: 56.0k]
  |  |  ------------------
  ------------------
 2226|  56.0k|    parse_assignment(ls, &vl, nvars+1);
 2227|   252k|  } else {  /* Parse RHS. */
 2228|   252k|    BCReg nexps;
 2229|   252k|    lex_check(ls, '=');
 2230|   252k|    nexps = expr_list(ls, &e);
 2231|   252k|    if (nexps == nvars) {
  ------------------
  |  Branch (2231:9): [True: 203k, False: 48.7k]
  ------------------
 2232|   203k|      if (e.k == VCALL) {
  ------------------
  |  Branch (2232:11): [True: 7.90k, False: 196k]
  ------------------
 2233|  7.90k|	if (bc_op(*bcptr(ls->fs, &e)) == BC_VARG) {  /* Vararg assignment. */
  ------------------
  |  |   34|  7.90k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2233:6): [True: 69, False: 7.83k]
  ------------------
 2234|     69|	  ls->fs->freereg--;
 2235|     69|	  e.k = VRELOCABLE;
 2236|  7.83k|	} else {  /* Multiple call results. */
 2237|  7.83k|	  e.u.s.info = e.u.s.aux;  /* Base of call is not relocatable. */
 2238|  7.83k|	  e.k = VNONRELOC;
 2239|  7.83k|	}
 2240|  7.90k|      }
 2241|   203k|      bcemit_store(ls->fs, &lh->v, &e);
 2242|   203k|      return;
 2243|   203k|    }
 2244|  48.7k|    assign_adjust(ls, nvars, nexps, &e);
 2245|  48.7k|  }
 2246|       |  /* Assign RHS to LHS and recurse downwards. */
 2247|   104k|  expr_init(&e, VNONRELOC, ls->fs->freereg-1);
 2248|   104k|  bcemit_store(ls->fs, &lh->v, &e);
 2249|   104k|}
lj_parse.c:assign_hazard:
 2168|  12.9k|{
 2169|  12.9k|  FuncState *fs = ls->fs;
 2170|  12.9k|  BCReg reg = v->u.s.info;  /* Check against this variable. */
 2171|  12.9k|  BCReg tmp = fs->freereg;  /* Rename to this temp. register (if needed). */
 2172|  12.9k|  int hazard = 0;
 2173|   765k|  for (; lh; lh = lh->prev) {
  ------------------
  |  Branch (2173:10): [True: 752k, False: 12.9k]
  ------------------
 2174|   752k|    if (lh->v.k == VINDEXED) {
  ------------------
  |  Branch (2174:9): [True: 203k, False: 548k]
  ------------------
 2175|   203k|      if (lh->v.u.s.info == reg) {  /* t[i], t = 1, 2 */
  ------------------
  |  Branch (2175:11): [True: 10.6k, False: 193k]
  ------------------
 2176|  10.6k|	hazard = 1;
 2177|  10.6k|	lh->v.u.s.info = tmp;
 2178|  10.6k|      }
 2179|   203k|      if (lh->v.u.s.aux == reg) {  /* t[i], i = 1, 2 */
  ------------------
  |  Branch (2179:11): [True: 2.94k, False: 200k]
  ------------------
 2180|  2.94k|	hazard = 1;
 2181|  2.94k|	lh->v.u.s.aux = tmp;
 2182|  2.94k|      }
 2183|   203k|    }
 2184|   752k|  }
 2185|  12.9k|  if (hazard) {
  ------------------
  |  Branch (2185:7): [True: 9.02k, False: 3.94k]
  ------------------
 2186|  9.02k|    bcemit_AD(fs, BC_MOV, tmp, reg);  /* Rename conflicting variable. */
  ------------------
  |  |  435|  9.02k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  9.02k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2187|  9.02k|    bcreg_reserve(fs, 1);
 2188|  9.02k|  }
 2189|  12.9k|}
lj_parse.c:lex_opt:
 1007|  3.09M|{
 1008|  3.09M|  if (ls->tok == tok) {
  ------------------
  |  Branch (1008:7): [True: 1.57M, False: 1.52M]
  ------------------
 1009|  1.57M|    lj_lex_next(ls);
 1010|  1.57M|    return 1;
 1011|  1.57M|  }
 1012|  1.52M|  return 0;
 1013|  3.09M|}
lj_parse.c:err_token:
  180|  18.6k|{
  181|  18.6k|  lj_lex_error(ls, ls->tok, LJ_ERR_XTOKEN, lj_lex_token2str(ls, tok));
  182|  18.6k|}
lj_parse.c:fs_finish:
 1577|  23.2k|{
 1578|  23.2k|  lua_State *L = ls->L;
 1579|  23.2k|  FuncState *fs = ls->fs;
 1580|  23.2k|  BCLine numline = line - fs->linedefined;
 1581|  23.2k|  size_t sizept, ofsk, ofsuv, ofsli, ofsdbg, ofsvar;
 1582|  23.2k|  GCproto *pt;
 1583|       |
 1584|       |  /* Apply final fixups. */
 1585|  23.2k|  fs_fixup_ret(fs);
 1586|       |
 1587|       |  /* Calculate total size of prototype including all colocated arrays. */
 1588|  23.2k|  sizept = sizeof(GCproto) + fs->pc*sizeof(BCIns) + fs->nkgc*sizeof(GCRef);
 1589|  23.2k|  sizept = (sizept + sizeof(TValue)-1) & ~(sizeof(TValue)-1);
 1590|  23.2k|  ofsk = sizept; sizept += fs->nkn*sizeof(TValue);
 1591|  23.2k|  ofsuv = sizept; sizept += ((fs->nuv+1)&~1)*2;
 1592|  23.2k|  ofsli = sizept; sizept += fs_prep_line(fs, numline);
 1593|  23.2k|  ofsdbg = sizept; sizept += fs_prep_var(ls, fs, &ofsvar);
 1594|       |
 1595|       |  /* Allocate prototype and initialize its fields. */
 1596|  23.2k|  pt = (GCproto *)lj_mem_newgco(L, (MSize)sizept);
 1597|  23.2k|  pt->gct = ~LJ_TPROTO;
  ------------------
  |  |  267|  23.2k|#define LJ_TPROTO		(~7u)
  ------------------
 1598|  23.2k|  pt->sizept = (MSize)sizept;
 1599|  23.2k|  pt->trace = 0;
 1600|  23.2k|  pt->flags = (uint8_t)(fs->flags & ~(PROTO_HAS_RETURN|PROTO_FIXUP_RETURN));
  ------------------
  |  |  405|  23.2k|#define PROTO_HAS_RETURN	0x20	/* Already emitted a return. */
  ------------------
                pt->flags = (uint8_t)(fs->flags & ~(PROTO_HAS_RETURN|PROTO_FIXUP_RETURN));
  ------------------
  |  |  406|  23.2k|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
 1601|  23.2k|  pt->numparams = fs->numparams;
 1602|  23.2k|  pt->framesize = fs->framesize;
 1603|  23.2k|  setgcref(pt->chunkname, obj2gco(ls->chunkname));
  ------------------
  |  |   72|  23.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1604|       |
 1605|       |  /* Close potentially uninitialized gap between bc and kgc. */
 1606|  23.2k|  *(uint32_t *)((char *)pt + ofsk - sizeof(GCRef)*(fs->nkgc+1)) = 0;
 1607|  23.2k|  fs_fixup_bc(fs, pt, (BCIns *)((char *)pt + sizeof(GCproto)), fs->pc);
 1608|  23.2k|  fs_fixup_k(fs, pt, (void *)((char *)pt + ofsk));
 1609|  23.2k|  fs_fixup_uv1(fs, pt, (uint16_t *)((char *)pt + ofsuv));
 1610|  23.2k|  fs_fixup_line(fs, pt, (void *)((char *)pt + ofsli), numline);
 1611|  23.2k|  fs_fixup_var(ls, pt, (uint8_t *)((char *)pt + ofsdbg), ofsvar);
 1612|       |
 1613|  23.2k|  lj_vmevent_send(L, BC,
  ------------------
  |  |   39|  23.2k|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|  23.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  23.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|  23.2k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 23.2k]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
 1614|  23.2k|    setprotoV(L, L->top++, pt);
 1615|  23.2k|  );
 1616|       |
 1617|  23.2k|  L->top--;  /* Pop table of constants. */
 1618|  23.2k|  ls->vtop = fs->vbase;  /* Reset variable stack. */
 1619|  23.2k|  ls->fs = fs->prev;
 1620|  23.2k|  lj_assertL(ls->fs != NULL || ls->tok == TK_eof, "bad parser state");
  ------------------
  |  |  365|  23.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  26.4k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 20.1k, False: 3.17k]
  |  |  |  |  |  Branch (355:5): [True: 3.17k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  23.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1621|  23.2k|  return pt;
 1622|  23.2k|}
lj_parse.c:fs_fixup_ret:
 1539|  23.2k|{
 1540|  23.2k|  BCPos lastpc = fs->pc;
 1541|  23.2k|  if (lastpc <= fs->lasttarget || !bcopisret(bc_op(fs->bcbase[lastpc-1].ins))) {
  ------------------
  |  |   34|  22.7k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (1541:7): [True: 586, False: 22.7k]
  |  Branch (1541:35): [True: 22.7k, False: 0]
  ------------------
 1542|  23.2k|    if ((fs->bl->flags & FSCOPE_UPVAL))
  ------------------
  |  |  108|  23.2k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1542:9): [True: 882, False: 22.4k]
  ------------------
 1543|    882|      bcemit_AJ(fs, BC_UCLO, 0, 0);
  ------------------
  |  |  436|    882|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|    882|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    882|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1544|  23.2k|    bcemit_AD(fs, BC_RET0, 0, 1);  /* Need final return. */
  ------------------
  |  |  435|  23.2k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  23.2k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1545|  23.2k|  }
 1546|  23.2k|  fs->bl->flags |= FSCOPE_NOCLOSE;  /* Handled above. */
  ------------------
  |  |  109|  23.2k|#define FSCOPE_NOCLOSE		0x10	/* Do not close upvalues. */
  ------------------
 1547|  23.2k|  fscope_end(fs);
 1548|  23.2k|  lj_assertFS(fs->bl == NULL, "bad scope nesting");
  ------------------
  |  |  167|  23.2k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  23.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  23.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 23.2k, False: 29]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  23.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1549|       |  /* May need to fixup returns encoded before first function was created. */
 1550|  23.2k|  if (fs->flags & PROTO_FIXUP_RETURN) {
  ------------------
  |  |  406|  23.2k|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
  |  Branch (1550:7): [True: 0, False: 23.2k]
  ------------------
 1551|      0|    BCPos pc;
 1552|      0|    for (pc = 1; pc < lastpc; pc++) {
  ------------------
  |  Branch (1552:18): [True: 0, False: 0]
  ------------------
 1553|      0|      BCIns ins = fs->bcbase[pc].ins;
 1554|      0|      BCPos offset;
 1555|      0|      switch (bc_op(ins)) {
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
 1556|      0|      case BC_CALLMT: case BC_CALLT:
  ------------------
  |  Branch (1556:7): [True: 0, False: 0]
  |  Branch (1556:23): [True: 0, False: 0]
  ------------------
 1557|      0|      case BC_RETM: case BC_RET: case BC_RET0: case BC_RET1:
  ------------------
  |  Branch (1557:7): [True: 0, False: 0]
  |  Branch (1557:21): [True: 0, False: 0]
  |  Branch (1557:34): [True: 0, False: 0]
  |  Branch (1557:48): [True: 0, False: 0]
  ------------------
 1558|      0|	offset = bcemit_INS(fs, ins);  /* Copy original instruction. */
 1559|      0|	fs->bcbase[offset].line = fs->bcbase[pc].line;
 1560|      0|	offset = offset-(pc+1)+BCBIAS_J;
  ------------------
  |  |   29|      0|#define BCBIAS_J	0x8000
  ------------------
 1561|      0|	if (offset > BCMAX_D)
  ------------------
  |  |   28|      0|#define BCMAX_D		0xffff
  ------------------
  |  Branch (1561:6): [True: 0, False: 0]
  ------------------
 1562|      0|	  err_syntax(fs->ls, LJ_ERR_XFIXUP);
 1563|       |	/* Replace with UCLO plus branch. */
 1564|      0|	fs->bcbase[pc].ins = BCINS_AD(BC_UCLO, 0, offset);
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1565|      0|	break;
 1566|      0|      case BC_FNEW:
  ------------------
  |  Branch (1566:7): [True: 0, False: 0]
  ------------------
 1567|      0|	return;  /* We're done. */
 1568|      0|      default:
  ------------------
  |  Branch (1568:7): [True: 0, False: 0]
  ------------------
 1569|      0|	break;
 1570|      0|      }
 1571|      0|    }
 1572|      0|  }
 1573|  23.2k|}
lj_parse.c:bcopisret:
 1527|  22.7k|{
 1528|  22.7k|  switch (op) {
 1529|      0|  case BC_CALLMT: case BC_CALLT:
  ------------------
  |  Branch (1529:3): [True: 0, False: 22.7k]
  |  Branch (1529:19): [True: 0, False: 22.7k]
  ------------------
 1530|      0|  case BC_RETM: case BC_RET: case BC_RET0: case BC_RET1:
  ------------------
  |  Branch (1530:3): [True: 0, False: 22.7k]
  |  Branch (1530:17): [True: 0, False: 22.7k]
  |  Branch (1530:30): [True: 0, False: 22.7k]
  |  Branch (1530:44): [True: 0, False: 22.7k]
  ------------------
 1531|      0|    return 1;
 1532|  22.7k|  default:
  ------------------
  |  Branch (1532:3): [True: 22.7k, False: 0]
  ------------------
 1533|  22.7k|    return 0;
 1534|  22.7k|  }
 1535|  22.7k|}
lj_parse.c:fs_prep_line:
 1426|  23.2k|{
 1427|  23.2k|  return (fs->pc-1) << (numline < 256 ? 0 : numline < 65536 ? 1 : 2);
  ------------------
  |  Branch (1427:25): [True: 22.9k, False: 276]
  |  Branch (1427:45): [True: 276, False: 0]
  ------------------
 1428|  23.2k|}
lj_parse.c:fs_prep_var:
 1466|  23.2k|{
 1467|  23.2k|  VarInfo *vs =ls->vstack, *ve;
 1468|  23.2k|  MSize i, n;
 1469|  23.2k|  BCPos lastpc;
 1470|  23.2k|  lj_buf_reset(&ls->sb);  /* Copy to temp. string buffer. */
 1471|       |  /* Store upvalue names. */
 1472|  41.2k|  for (i = 0, n = fs->nuv; i < n; i++) {
  ------------------
  |  Branch (1472:28): [True: 17.9k, False: 23.2k]
  ------------------
 1473|  17.9k|    GCstr *s = strref(vs[fs->uvmap[i]].name);
  ------------------
  |  |  315|  17.9k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  17.9k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1474|  17.9k|    MSize len = s->len+1;
 1475|  17.9k|    char *p = lj_buf_more(&ls->sb, len);
 1476|  17.9k|    p = lj_buf_wmem(p, strdata(s), len);
  ------------------
  |  |  316|  17.9k|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1477|  17.9k|    ls->sb.w = p;
 1478|  17.9k|  }
 1479|  23.2k|  *ofsvar = sbuflen(&ls->sb);
  ------------------
  |  |   36|  23.2k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1480|  23.2k|  lastpc = 0;
 1481|       |  /* Store local variable names and compressed ranges. */
 1482|  65.9k|  for (ve = vs + ls->vtop, vs += fs->vbase; vs < ve; vs++) {
  ------------------
  |  Branch (1482:45): [True: 42.7k, False: 23.2k]
  ------------------
 1483|  42.7k|    if (!gola_isgotolabel(vs)) {
  ------------------
  |  | 1184|  42.7k|#define gola_isgotolabel(v)	((v)->info & (VSTACK_GOTO|VSTACK_LABEL))
  |  |  ------------------
  |  |  |  |  119|  42.7k|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |               #define gola_isgotolabel(v)	((v)->info & (VSTACK_GOTO|VSTACK_LABEL))
  |  |  ------------------
  |  |  |  |  120|  42.7k|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  ------------------
  |  Branch (1483:9): [True: 29.7k, False: 12.9k]
  ------------------
 1484|  29.7k|      GCstr *s = strref(vs->name);
  ------------------
  |  |  315|  29.7k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  29.7k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1485|  29.7k|      BCPos startpc;
 1486|  29.7k|      char *p;
 1487|  29.7k|      if ((uintptr_t)s < VARNAME__MAX) {
  ------------------
  |  Branch (1487:11): [True: 2.96k, False: 26.8k]
  ------------------
 1488|  2.96k|	p = lj_buf_more(&ls->sb, 1 + 2*5);
 1489|  2.96k|	*p++ = (char)(uintptr_t)s;
 1490|  26.8k|      } else {
 1491|  26.8k|	MSize len = s->len+1;
 1492|  26.8k|	p = lj_buf_more(&ls->sb, len + 2*5);
 1493|  26.8k|	p = lj_buf_wmem(p, strdata(s), len);
  ------------------
  |  |  316|  26.8k|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1494|  26.8k|      }
 1495|  29.7k|      startpc = vs->startpc;
 1496|  29.7k|      p = lj_strfmt_wuleb128(p, startpc-lastpc);
 1497|  29.7k|      p = lj_strfmt_wuleb128(p, vs->endpc-startpc);
 1498|  29.7k|      ls->sb.w = p;
 1499|  29.7k|      lastpc = startpc;
 1500|  29.7k|    }
 1501|  42.7k|  }
 1502|  23.2k|  lj_buf_putb(&ls->sb, '\0');  /* Terminator for varinfo. */
 1503|  23.2k|  return sbuflen(&ls->sb);
  ------------------
  |  |   36|  23.2k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1504|  23.2k|}
lj_parse.c:fs_fixup_bc:
 1332|  23.2k|{
 1333|  23.2k|  BCInsLine *base = fs->bcbase;
 1334|  23.2k|  MSize i;
 1335|  23.2k|  BCIns op;
 1336|  23.2k|  pt->sizebc = n;
 1337|  23.2k|  if (fs->ls->fr2 != LJ_FR2) op = BC_NOT;  /* Mark non-native prototype. */
  ------------------
  |  |  569|  23.2k|#define LJ_FR2			1
  ------------------
  |  Branch (1337:7): [True: 0, False: 23.2k]
  ------------------
 1338|  23.2k|  else if ((fs->flags & PROTO_VARARG)) op = BC_FUNCV;
  ------------------
  |  |  400|  23.2k|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
  |  Branch (1338:12): [True: 3.17k, False: 20.0k]
  ------------------
 1339|  20.0k|  else op = BC_FUNCF;
 1340|  23.2k|  bc[0] = BCINS_AD(op, fs->framesize, 0);
  ------------------
  |  |   56|  23.2k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1341|  1.05M|  for (i = 1; i < n; i++)
  ------------------
  |  Branch (1341:15): [True: 1.02M, False: 23.2k]
  ------------------
 1342|  1.02M|    bc[i] = base[i].ins;
 1343|  23.2k|}
lj_parse.c:fs_fixup_k:
 1364|  23.2k|{
 1365|  23.2k|  GCtab *kt;
 1366|  23.2k|  TValue *array;
 1367|  23.2k|  Node *node;
 1368|  23.2k|  MSize i, hmask;
 1369|  23.2k|  checklimitgt(fs, fs->nkn, BCMAX_D+1, "constants");
  ------------------
  |  |  193|  23.2k|#define checklimitgt(fs, v, l, m)	if ((v) > (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (193:39): [True: 0, False: 23.2k]
  |  |  ------------------
  ------------------
 1370|  23.2k|  checklimitgt(fs, fs->nkgc, BCMAX_D+1, "constants");
  ------------------
  |  |  193|  23.2k|#define checklimitgt(fs, v, l, m)	if ((v) > (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (193:39): [True: 0, False: 23.2k]
  |  |  ------------------
  ------------------
 1371|  23.2k|  setmref(pt->k, kptr);
  ------------------
  |  |   39|  23.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1372|  23.2k|  pt->sizekn = fs->nkn;
 1373|  23.2k|  pt->sizekgc = fs->nkgc;
 1374|  23.2k|  kt = fs->kt;
 1375|  23.2k|  array = tvref(kt->array);
  ------------------
  |  |  217|  23.2k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  23.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1376|  59.2k|  for (i = 0; i < kt->asize; i++)
  ------------------
  |  Branch (1376:15): [True: 36.0k, False: 23.2k]
  ------------------
 1377|  36.0k|    if (tvhaskslot(&array[i])) {
  ------------------
  |  |  201|  36.0k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 12.1k, False: 23.9k]
  |  |  ------------------
  ------------------
 1378|  12.1k|      TValue *tv = &((TValue *)kptr)[tvkslot(&array[i])];
  ------------------
  |  |  202|  12.1k|#define tvkslot(o)	((o)->u32.lo)
  ------------------
 1379|  12.1k|      if (LJ_DUALNUM)
  ------------------
  |  |  549|  12.1k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1380|      0|	setintV(tv, (int32_t)i);
 1381|  12.1k|      else
 1382|  12.1k|	setnumV(tv, (lua_Number)i);
  ------------------
  |  |  945|  12.1k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
 1383|  12.1k|    }
 1384|  23.2k|  node = noderef(kt->node);
  ------------------
  |  |  515|  23.2k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  23.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1385|  23.2k|  hmask = kt->hmask;
 1386|   309k|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (1386:15): [True: 286k, False: 23.2k]
  ------------------
 1387|   286k|    Node *n = &node[i];
 1388|   286k|    if (tvhaskslot(&n->val)) {
  ------------------
  |  |  201|   286k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 118k, False: 167k]
  |  |  ------------------
  ------------------
 1389|   118k|      ptrdiff_t kidx = (ptrdiff_t)tvkslot(&n->val);
  ------------------
  |  |  202|   118k|#define tvkslot(o)	((o)->u32.lo)
  ------------------
 1390|   118k|      lj_assertFS(!tvisint(&n->key), "unexpected integer key");
  ------------------
  |  |  167|   118k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   118k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   118k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   118k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1391|   118k|      if (tvisnum(&n->key)) {
  ------------------
  |  |  804|   118k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   118k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   118k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   118k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 5.70k, False: 113k]
  |  |  ------------------
  ------------------
 1392|  5.70k|	TValue *tv = &((TValue *)kptr)[kidx];
 1393|  5.70k|	if (LJ_DUALNUM) {
  ------------------
  |  |  549|  5.70k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1394|      0|	  lua_Number nn = numV(&n->key);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1395|      0|	  int32_t k = lj_num2int(nn);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
 1396|      0|	  lj_assertFS(!tvismzero(&n->key), "unexpected -0 key");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1397|      0|	  if ((lua_Number)k == nn)
  ------------------
  |  Branch (1397:8): [True: 0, False: 0]
  ------------------
 1398|      0|	    setintV(tv, k);
 1399|      0|	  else
 1400|      0|	    *tv = n->key;
 1401|  5.70k|	} else {
 1402|  5.70k|	  *tv = n->key;
 1403|  5.70k|	}
 1404|   113k|      } else {
 1405|   113k|	GCobj *o = gcV(&n->key);
  ------------------
  |  |  858|   113k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|   113k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   113k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   113k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 113k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   113k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1406|   113k|	setgcref(((GCRef *)kptr)[~kidx], o);
  ------------------
  |  |   72|   113k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1407|   113k|	lj_gc_objbarrier(fs->L, pt, o);
  ------------------
  |  |  108|   113k|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   32|   226k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   113k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   113k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   113k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 106k, False: 7.11k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|   106k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|   106k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 106k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  109|   113k|      lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
 1408|   113k|	if (tvisproto(&n->key))
  ------------------
  |  |  798|   113k|#define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  781|   113k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  267|   113k|#define LJ_TPROTO		(~7u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 5.83k, False: 107k]
  |  |  ------------------
  ------------------
 1409|  5.83k|	  fs_fixup_uv2(fs, gco2pt(o));
  ------------------
  |  |  768|  5.83k|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|  5.83k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  5.83k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  5.83k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5.83k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  5.83k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1410|   113k|      }
 1411|   118k|    }
 1412|   286k|  }
 1413|  23.2k|}
lj_parse.c:fs_fixup_uv2:
 1347|  5.83k|{
 1348|  5.83k|  VarInfo *vstack = fs->ls->vstack;
 1349|  5.83k|  uint16_t *uv = proto_uv(pt);
  ------------------
  |  |  422|  5.83k|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|  5.83k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1350|  5.83k|  MSize i, n = pt->sizeuv;
 1351|  11.0k|  for (i = 0; i < n; i++) {
  ------------------
  |  Branch (1351:15): [True: 5.26k, False: 5.83k]
  ------------------
 1352|  5.26k|    VarIndex vidx = uv[i];
 1353|  5.26k|    if (vidx >= LJ_MAX_VSTACK)
  ------------------
  |  |  115|  5.26k|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|  5.26k|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1353:9): [True: 3.81k, False: 1.44k]
  ------------------
 1354|  3.81k|      uv[i] = vidx - LJ_MAX_VSTACK;
  ------------------
  |  |  115|  3.81k|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|  3.81k|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
 1355|  1.44k|    else if ((vstack[vidx].info & VSTACK_VAR_RW))
  ------------------
  |  |  118|  1.44k|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  |  Branch (1355:14): [True: 378, False: 1.07k]
  ------------------
 1356|    378|      uv[i] = vstack[vidx].slot | PROTO_UV_LOCAL;
  ------------------
  |  |  412|    378|#define PROTO_UV_LOCAL		0x8000	/* Upvalue for local slot. */
  ------------------
 1357|  1.07k|    else
 1358|  1.07k|      uv[i] = vstack[vidx].slot | PROTO_UV_LOCAL | PROTO_UV_IMMUTABLE;
  ------------------
  |  |  412|  1.07k|#define PROTO_UV_LOCAL		0x8000	/* Upvalue for local slot. */
  ------------------
                    uv[i] = vstack[vidx].slot | PROTO_UV_LOCAL | PROTO_UV_IMMUTABLE;
  ------------------
  |  |  413|  1.07k|#define PROTO_UV_IMMUTABLE	0x4000	/* Immutable upvalue. */
  ------------------
 1359|  5.26k|  }
 1360|  5.83k|}
lj_parse.c:fs_fixup_uv1:
 1417|  23.2k|{
 1418|  23.2k|  setmref(pt->uv, uv);
  ------------------
  |  |   39|  23.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1419|  23.2k|  pt->sizeuv = fs->nuv;
 1420|  23.2k|  memcpy(uv, fs->uvtmp, fs->nuv*sizeof(VarIndex));
 1421|  23.2k|}
lj_parse.c:fs_fixup_line:
 1433|  23.2k|{
 1434|  23.2k|  BCInsLine *base = fs->bcbase + 1;
 1435|  23.2k|  BCLine first = fs->linedefined;
 1436|  23.2k|  MSize i = 0, n = fs->pc-1;
 1437|  23.2k|  pt->firstline = fs->linedefined;
 1438|  23.2k|  pt->numline = numline;
 1439|  23.2k|  setmref(pt->lineinfo, lineinfo);
  ------------------
  |  |   39|  23.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1440|  23.2k|  if (LJ_LIKELY(numline < 256)) {
  ------------------
  |  |  145|  23.2k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 22.9k, False: 276]
  |  |  ------------------
  ------------------
 1441|  22.9k|    uint8_t *li = (uint8_t *)lineinfo;
 1442|   983k|    do {
 1443|   983k|      BCLine delta = base[i].line - first;
 1444|   983k|      lj_assertFS(delta >= 0 && delta < 256, "bad line delta");
  ------------------
  |  |  167|   983k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   983k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.96M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 983k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 983k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   983k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1445|   983k|      li[i] = (uint8_t)delta;
 1446|   983k|    } while (++i < n);
  ------------------
  |  Branch (1446:14): [True: 960k, False: 22.9k]
  ------------------
 1447|  22.9k|  } else if (LJ_LIKELY(numline < 65536)) {
  ------------------
  |  |  145|    276|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 276, False: 0]
  |  |  ------------------
  ------------------
 1448|    276|    uint16_t *li = (uint16_t *)lineinfo;
 1449|  45.7k|    do {
 1450|  45.7k|      BCLine delta = base[i].line - first;
 1451|  45.7k|      lj_assertFS(delta >= 0 && delta < 65536, "bad line delta");
  ------------------
  |  |  167|  45.7k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  45.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  91.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 45.7k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 45.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  45.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1452|  45.7k|      li[i] = (uint16_t)delta;
 1453|  45.7k|    } while (++i < n);
  ------------------
  |  Branch (1453:14): [True: 45.4k, False: 276]
  ------------------
 1454|    276|  } else {
 1455|      0|    uint32_t *li = (uint32_t *)lineinfo;
 1456|      0|    do {
 1457|      0|      BCLine delta = base[i].line - first;
 1458|      0|      lj_assertFS(delta >= 0, "bad line delta");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1459|      0|      li[i] = (uint32_t)delta;
 1460|      0|    } while (++i < n);
  ------------------
  |  Branch (1460:14): [True: 0, False: 0]
  ------------------
 1461|      0|  }
 1462|  23.2k|}
lj_parse.c:fs_fixup_var:
 1508|  23.2k|{
 1509|  23.2k|  setmref(pt->uvinfo, p);
  ------------------
  |  |   39|  23.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1510|  23.2k|  setmref(pt->varinfo, (char *)p + ofsvar);
  ------------------
  |  |   39|  23.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1511|  23.2k|  memcpy(p, ls->sb.b, sbuflen(&ls->sb));  /* Copy from temp. buffer. */
  ------------------
  |  |   36|  23.2k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1512|  23.2k|}

lj_prng_u64:
   48|   155k|{
   49|   155k|  uint64_t z, r = 0;
   50|   155k|  TW223_STEP(rs, z, r)
  ------------------
  |  |   41|   155k|  TW223_GEN(rs, z, r, 0, 63, 31, 18) \
  |  |  ------------------
  |  |  |  |   36|   155k|  z = rs->u[i]; \
  |  |  |  |   37|   155k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|   155k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   42|   155k|  TW223_GEN(rs, z, r, 1, 58, 19, 28) \
  |  |  ------------------
  |  |  |  |   36|   155k|  z = rs->u[i]; \
  |  |  |  |   37|   155k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|   155k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   43|   155k|  TW223_GEN(rs, z, r, 2, 55, 24,  7) \
  |  |  ------------------
  |  |  |  |   36|   155k|  z = rs->u[i]; \
  |  |  |  |   37|   155k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|   155k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   44|   155k|  TW223_GEN(rs, z, r, 3, 47, 21,  8)
  |  |  ------------------
  |  |  |  |   36|   155k|  z = rs->u[i]; \
  |  |  |  |   37|   155k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|   155k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  ------------------
   51|   155k|  return r;
   52|   155k|}
lj_prng_seed_secure:
  167|  46.0k|{
  168|       |#if LJ_TARGET_XBOX360
  169|       |
  170|       |  if (XNetRandom(rs->u, (unsigned int)sizeof(rs->u)) == 0)
  171|       |    goto ok;
  172|       |
  173|       |#elif LJ_TARGET_PS3
  174|       |
  175|       |  if (sys_get_random_number(rs->u, sizeof(rs->u)) == 0)
  176|       |    goto ok;
  177|       |
  178|       |#elif LJ_TARGET_PS4 || LJ_TARGET_PS5 || LJ_TARGET_PSVITA
  179|       |
  180|       |  if (sceRandomGetRandomNumber(rs->u, sizeof(rs->u)) == 0)
  181|       |    goto ok;
  182|       |
  183|       |#elif LJ_TARGET_NX
  184|       |
  185|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  186|       |    goto ok;
  187|       |
  188|       |#elif LJ_TARGET_UWP || LJ_TARGET_XBOXONE
  189|       |
  190|       |  if (BCryptGenRandom(NULL, (PUCHAR)(rs->u), (ULONG)sizeof(rs->u),
  191|       |		      BCRYPT_USE_SYSTEM_PREFERRED_RNG) >= 0)
  192|       |    goto ok;
  193|       |
  194|       |#elif LJ_TARGET_WINDOWS
  195|       |
  196|       |  /* Keep the library loaded in case multiple VMs are started. */
  197|       |  if (!libfunc_rgr) {
  198|       |    HMODULE lib = LJ_WIN_LOADLIBA("advapi32.dll");
  199|       |    if (!lib) return 0;
  200|       |    libfunc_rgr = (PRGR)GetProcAddress(lib, "SystemFunction036");
  201|       |    if (!libfunc_rgr) return 0;
  202|       |  }
  203|       |  if (libfunc_rgr(rs->u, (ULONG)sizeof(rs->u)))
  204|       |    goto ok;
  205|       |
  206|       |#elif LJ_TARGET_POSIX
  207|       |
  208|  46.0k|#if LJ_TARGET_LINUX && defined(SYS_getrandom)
  209|       |
  210|  46.0k|  if (syscall(SYS_getrandom, rs->u, sizeof(rs->u), 0) == (long)sizeof(rs->u))
  ------------------
  |  Branch (210:7): [True: 46.0k, False: 0]
  ------------------
  211|  46.0k|    goto ok;
  212|       |
  213|       |#elif LJ_TARGET_HAS_GETENTROPY
  214|       |
  215|       |#ifdef __ELF__
  216|       |  if (&getentropy && getentropy(rs->u, sizeof(rs->u)) == 0)
  217|       |    goto ok;
  218|       |#else
  219|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  220|       |    goto ok;
  221|       |#endif
  222|       |
  223|       |#endif
  224|       |
  225|       |  /* Fallback to /dev/urandom. This may fail if the device is not
  226|       |  ** existent or accessible in a chroot or container, or if the process
  227|       |  ** or the OS ran out of file descriptors.
  228|       |  */
  229|      0|  {
  230|      0|    int fd = open("/dev/urandom", O_RDONLY|O_CLOEXEC);
  231|      0|    if (fd != -1) {
  ------------------
  |  Branch (231:9): [True: 0, False: 0]
  ------------------
  232|      0|      ssize_t n = read(fd, rs->u, sizeof(rs->u));
  233|      0|      (void)close(fd);
  234|      0|      if (n == (ssize_t)sizeof(rs->u))
  ------------------
  |  Branch (234:11): [True: 0, False: 0]
  ------------------
  235|      0|	goto ok;
  236|      0|    }
  237|      0|  }
  238|       |
  239|       |#else
  240|       |
  241|       |  /* Add an elif above for your OS with a secure PRNG seed.
  242|       |  ** Note that fiddling around with rand(), getpid(), time() or coercing
  243|       |  ** ASLR to yield a few bits of randomness is not helpful.
  244|       |  ** If you don't want any security, then don't pretend you have any
  245|       |  ** and simply define LUAJIT_SECURITY_PRNG=0 for the build.
  246|       |  */
  247|       |#error "Missing secure PRNG seed for this OS"
  248|       |
  249|       |#endif
  250|      0|  return 0;  /* Fail. */
  251|       |
  252|  46.0k|ok:
  253|  46.0k|  lj_prng_condition(rs);
  254|  46.0k|  (void)lj_prng_u64(rs);
  255|  46.0k|  return 1;  /* Success. */
  256|      0|}
lj_prng.c:lj_prng_condition:
   65|  46.0k|{
   66|  46.0k|  if (rs->u[0] < (1u << 1)) rs->u[0] += (1u << 1);
  ------------------
  |  Branch (66:7): [True: 0, False: 46.0k]
  ------------------
   67|  46.0k|  if (rs->u[1] < (1u << 6)) rs->u[1] += (1u << 6);
  ------------------
  |  Branch (67:7): [True: 0, False: 46.0k]
  ------------------
   68|  46.0k|  if (rs->u[2] < (1u << 9)) rs->u[2] += (1u << 9);
  ------------------
  |  Branch (68:7): [True: 0, False: 46.0k]
  ------------------
   69|  46.0k|  if (rs->u[3] < (1u << 17)) rs->u[3] += (1u << 17);
  ------------------
  |  Branch (69:7): [True: 0, False: 46.0k]
  ------------------
   70|  46.0k|}

luaJIT_profile_stop:
  341|  46.0k|{
  342|  46.0k|  ProfileState *ps = &profile_state;
  343|  46.0k|  global_State *g = ps->g;
  344|  46.0k|  if (G(L) == g) {  /* Only stop profiler if started by this VM. */
  ------------------
  |  |  705|  46.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (344:7): [True: 0, False: 46.0k]
  ------------------
  345|      0|    profile_timer_stop(ps);
  346|      0|    g->hookmask &= ~HOOK_PROFILE;
  ------------------
  |  |  677|      0|#define HOOK_PROFILE		0x80
  ------------------
  347|      0|    lj_dispatch_update(g);
  348|      0|#if LJ_HASJIT
  349|      0|    G2J(g)->prof_mode = 0;
  ------------------
  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  350|      0|    lj_trace_flushall(L);
  351|      0|#endif
  352|      0|    lj_buf_free(g, &ps->sb);
  353|      0|    ps->sb.w = ps->sb.e = NULL;
  354|      0|    ps->g = NULL;
  355|      0|  }
  356|  46.0k|}

lj_state_relimitstack:
   85|  42.8k|{
   86|  42.8k|  if (L->stacksize > LJ_STACK_MAXEX && L->top-tvref(L->stack) < LJ_STACK_MAX-1)
  ------------------
  |  |   39|  85.6k|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|  42.8k|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   89|  42.8k|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|  42.8k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|  42.8k|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if (L->stacksize > LJ_STACK_MAXEX && L->top-tvref(L->stack) < LJ_STACK_MAX-1)
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (L->stacksize > LJ_STACK_MAXEX && L->top-tvref(L->stack) < LJ_STACK_MAX-1)
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   89|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  |  Branch (86:7): [True: 0, False: 42.8k]
  |  Branch (86:40): [True: 0, False: 0]
  ------------------
   87|      0|    resizestack(L, LJ_STACK_MAX);
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   89|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
   88|  42.8k|}
lj_state_shrinkstack:
   92|  4.82k|{
   93|  4.82k|  if (L->stacksize > LJ_STACK_MAXEX)
  ------------------
  |  |   39|  4.82k|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|  4.82k|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   89|  4.82k|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|  4.82k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|  4.82k|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (93:7): [True: 0, False: 4.82k]
  ------------------
   94|      0|    return;  /* Avoid stack shrinking while handling stack overflow. */
   95|  4.82k|  if (4*used < L->stacksize &&
  ------------------
  |  Branch (95:7): [True: 4.37k, False: 453]
  ------------------
   96|  4.82k|      2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   38|  4.37k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  4.37k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  4.37k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   72|  4.37k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  4.37k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  |  Branch (96:7): [True: 0, False: 4.37k]
  ------------------
   97|       |      /* Don't shrink stack of live trace. */
   98|  4.82k|      (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (98:8): [True: 0, False: 0]
  |  Branch (98:41): [True: 0, False: 0]
  ------------------
   99|      0|    resizestack(L, L->stacksize >> 1);
  100|  4.82k|}
lj_state_growstack:
  104|    185|{
  105|    185|  MSize n = L->stacksize + need;
  106|    185|  if (LJ_LIKELY(n < LJ_STACK_MAX)) {  /* The stack can grow as requested. */
  ------------------
  |  |  145|    185|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 185, False: 0]
  |  |  ------------------
  ------------------
  107|    185|    if (n < 2 * L->stacksize) {  /* Try to double the size. */
  ------------------
  |  Branch (107:9): [True: 185, False: 0]
  ------------------
  108|    185|      n = 2 * L->stacksize;
  109|    185|      if (n > LJ_STACK_MAX)
  ------------------
  |  |   37|    185|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   89|    185|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  |  Branch (109:11): [True: 0, False: 185]
  ------------------
  110|      0|	n = LJ_STACK_MAX;
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   89|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  111|    185|    }
  112|    185|    resizestack(L, n);
  113|    185|  } else {  /* Request would overflow. Raise a stack overflow error. */
  114|      0|    if (LJ_HASJIT) {
  ------------------
  |  |  578|      0|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  115|      0|      TValue *base = tvref(G(L)->jit_base);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  116|      0|      if (base) L->base = base;
  ------------------
  |  Branch (116:11): [True: 0, False: 0]
  ------------------
  117|      0|    }
  118|      0|    if (curr_funcisL(L)) {
  ------------------
  |  |  716|      0|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  119|      0|      L->top = curr_topL(L);
  ------------------
  |  |  718|      0|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|      0|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  120|      0|      if (L->top > tvref(L->maxstack)) {
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|       |	/* The current Lua frame violates the stack, so replace it with a
  122|       |	** dummy. This can happen when BC_IFUNCF is trying to grow the stack.
  123|       |	*/
  124|      0|	L->top = L->base;
  125|      0|	setframe_gc(L->base - 1 - LJ_FR2, obj2gco(L), LJ_TTHREAD);
  ------------------
  |  |   49|      0|#define setframe_gc(f, p, tp)	(setgcVraw((f), (p), (tp)))
  ------------------
  126|      0|      }
  127|      0|    }
  128|      0|    if (L->stacksize <= LJ_STACK_MAXEX) {
  ------------------
  |  |   39|      0|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   89|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|      0|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (128:9): [True: 0, False: 0]
  ------------------
  129|       |      /* An error handler might want to inspect the stack overflow error, but
  130|       |      ** will need some stack space to run in. We give it a stack size beyond
  131|       |      ** the normal limit in order to do so, then rely on lj_state_relimitstack
  132|       |      ** calls during unwinding to bring us back to a convential stack size.
  133|       |      ** The + 1 is space for the error message, and 2 * LUA_MINSTACK is for
  134|       |      ** the lj_state_checkstack() call in lj_err_run().
  135|       |      */
  136|      0|      resizestack(L, LJ_STACK_MAX + 1 + 2 * LUA_MINSTACK);
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   89|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
                    resizestack(L, LJ_STACK_MAX + 1 + 2 * LUA_MINSTACK);
  ------------------
  |  |   88|      0|#define LUA_MINSTACK	20
  ------------------
  137|      0|      lj_err_stkov(L);  /* May invoke an error handler. */
  138|      0|    } else {
  139|       |      /* If we're here, then the stack overflow error handler is requesting
  140|       |      ** to grow the stack even further. We have no choice but to abort the
  141|       |      ** error handler.
  142|       |      */
  143|      0|      GCstr *em = lj_err_str(L, LJ_ERR_STKOV);  /* Might OOM. */
  144|      0|      setstrV(L, L->top++, em);  /* There is always space to push an error. */
  145|      0|      lj_err_throw(L, LUA_ERRERR);  /* Does not invoke an error handler. */
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  146|      0|    }
  147|      0|  }
  148|    185|}
lj_state_growstack1:
  151|    116|{
  152|    116|  lj_state_growstack(L, 1);
  153|    116|}
lua_newstate:
  244|  46.0k|{
  245|  46.0k|  PRNGState prng;
  246|  46.0k|  GG_State *GG;
  247|  46.0k|  lua_State *L;
  248|  46.0k|  global_State *g;
  249|       |  /* We need the PRNG for the memory allocator, so initialize this first. */
  250|  46.0k|  if (!lj_prng_seed_secure(&prng)) {
  ------------------
  |  Branch (250:7): [True: 0, False: 46.0k]
  ------------------
  251|      0|    lj_assertX(0, "secure PRNG seeding failed");
  ------------------
  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  252|       |    /* Can only return NULL here, so this errors with "not enough memory". */
  253|      0|    return NULL;
  254|      0|  }
  255|  46.0k|#ifndef LUAJIT_USE_SYSMALLOC
  256|  46.0k|  if (allocf == LJ_ALLOCF_INTERNAL) {
  ------------------
  |  |   36|  46.0k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  |  Branch (256:7): [True: 46.0k, False: 0]
  ------------------
  257|  46.0k|    allocd = lj_alloc_create(&prng);
  258|  46.0k|    if (!allocd) return NULL;
  ------------------
  |  Branch (258:9): [True: 0, False: 46.0k]
  ------------------
  259|  46.0k|    allocf = lj_alloc_f;
  260|  46.0k|  }
  261|  46.0k|#endif
  262|  46.0k|  GG = (GG_State *)allocf(allocd, NULL, 0, sizeof(GG_State));
  263|  46.0k|  if (GG == NULL || !checkptrGC(GG)) return NULL;
  ------------------
  |  |  110|  46.0k|#define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  562|  46.0k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  109|  46.0k|#define checkptr47(x)	(((uint64_t)(uintptr_t)(x) >> 47) == 0)
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  640|      0|#define LJ_64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  107|      0|#define checkptr31(x)	(((uint64_t)(uintptr_t)(x) >> 31) == 0)
  |  |  ------------------
  ------------------
  |  Branch (263:7): [True: 0, False: 46.0k]
  |  Branch (263:21): [True: 0, False: 46.0k]
  ------------------
  264|  46.0k|  memset(GG, 0, sizeof(GG_State));
  265|  46.0k|  L = &GG->L;
  266|  46.0k|  g = &GG->g;
  267|  46.0k|  L->gct = ~LJ_TTHREAD;
  ------------------
  |  |  266|  46.0k|#define LJ_TTHREAD		(~6u)
  ------------------
  268|  46.0k|  L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   17|  46.0k|#define LJ_GC_WHITE0	0x01
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   24|  46.0k|#define LJ_GC_FIXED	0x20
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   25|  46.0k|#define LJ_GC_SFIXED	0x40
  ------------------
  269|  46.0k|  L->dummy_ffid = FF_C;
  ------------------
  |  |  475|  46.0k|#define FF_C		1
  ------------------
  270|  46.0k|  setmref(L->glref, g);
  ------------------
  |  |   39|  46.0k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  271|  46.0k|  g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   17|  46.0k|#define LJ_GC_WHITE0	0x01
  ------------------
                g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   24|  46.0k|#define LJ_GC_FIXED	0x20
  ------------------
  272|  46.0k|  g->strempty.marked = LJ_GC_WHITE0;
  ------------------
  |  |   17|  46.0k|#define LJ_GC_WHITE0	0x01
  ------------------
  273|  46.0k|  g->strempty.gct = ~LJ_TSTR;
  ------------------
  |  |  264|  46.0k|#define LJ_TSTR			(~4u)
  ------------------
  274|  46.0k|  g->allocf = allocf;
  275|  46.0k|  g->allocd = allocd;
  276|  46.0k|  g->prng = prng;
  277|  46.0k|#ifndef LUAJIT_USE_SYSMALLOC
  278|  46.0k|  if (allocf == lj_alloc_f) {
  ------------------
  |  Branch (278:7): [True: 46.0k, False: 0]
  ------------------
  279|  46.0k|    lj_alloc_setprng(allocd, &g->prng);
  280|  46.0k|  }
  281|  46.0k|#endif
  282|  46.0k|  setgcref(g->mainthref, obj2gco(L));
  ------------------
  |  |   72|  46.0k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  283|  46.0k|  setgcref(g->uvhead.prev, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  46.0k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  284|  46.0k|  setgcref(g->uvhead.next, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  46.0k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  285|  46.0k|  g->str.mask = ~(MSize)0;
  286|  46.0k|  setnilV(registry(L));
  ------------------
  |  |  872|  46.0k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  287|  46.0k|  setnilV(&g->nilnode.val);
  ------------------
  |  |  872|  46.0k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  288|  46.0k|  setnilV(&g->nilnode.key);
  ------------------
  |  |  872|  46.0k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  289|       |#if !LJ_GC64
  290|       |  setmref(g->nilnode.freetop, &g->nilnode);
  291|       |#endif
  292|  46.0k|  lj_buf_init(NULL, &g->tmpbuf);
  293|  46.0k|  g->gc.state = GCSpause;
  294|  46.0k|  setgcref(g->gc.root, obj2gco(L));
  ------------------
  |  |   72|  46.0k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  295|  46.0k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|  46.0k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  296|  46.0k|  g->gc.total = sizeof(GG_State);
  297|  46.0k|  g->gc.pause = LUAI_GCPAUSE;
  ------------------
  |  |   91|  46.0k|#define LUAI_GCPAUSE	200	/* Pause GC until memory is at 200%. */
  ------------------
  298|  46.0k|  g->gc.stepmul = LUAI_GCMUL;
  ------------------
  |  |   92|  46.0k|#define LUAI_GCMUL	200	/* Run GC at 200% of allocation speed. */
  ------------------
  299|  46.0k|  lj_dispatch_init((GG_State *)L);
  300|  46.0k|  L->status = LUA_ERRERR+1;  /* Avoid touching the stack upon memory error. */
  ------------------
  |  |   48|  46.0k|#define LUA_ERRERR	5
  ------------------
  301|  46.0k|  if (lj_vm_cpcall(L, NULL, NULL, cpluaopen) != 0) {
  ------------------
  |  Branch (301:7): [True: 0, False: 46.0k]
  ------------------
  302|       |    /* Memory allocation error: free partial state. */
  303|      0|    close_state(L);
  304|      0|    return NULL;
  305|      0|  }
  306|  46.0k|  L->status = LUA_OK;
  ------------------
  |  |   43|  46.0k|#define LUA_OK		0
  ------------------
  307|  46.0k|  return L;
  308|  46.0k|}
lua_close:
  321|  46.0k|{
  322|  46.0k|  global_State *g = G(L);
  ------------------
  |  |  705|  46.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  323|  46.0k|  int i;
  324|  46.0k|  L = mainthread(g);  /* Only the main thread can be closed. */
  ------------------
  |  |  665|  46.0k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  46.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  325|  46.0k|#if LJ_HASPROFILE
  326|  46.0k|  luaJIT_profile_stop(L);
  327|  46.0k|#endif
  328|  46.0k|  setgcrefnull(g->cur_L);
  ------------------
  |  |   76|  46.0k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  329|  46.0k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  46.0k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  330|  46.0k|  lj_gc_separateudata(g, 1);  /* Separate udata which have GC metamethods. */
  331|  46.0k|#if LJ_HASJIT
  332|  46.0k|  G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |  116|  46.0k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  46.0k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  46.0k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |   16|  46.0k|#define JIT_F_ON		0x00000001
  ------------------
  333|  46.0k|  G2J(g)->state = LJ_TRACE_IDLE;
  ------------------
  |  |  116|  46.0k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  46.0k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  46.0k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  334|  46.0k|  lj_dispatch_update(g);
  335|  46.0k|#endif
  336|  46.0k|  for (i = 0;;) {
  337|  46.0k|    hook_enter(g);
  ------------------
  |  |  679|  46.0k|#define hook_enter(g)		((g)->hookmask |= HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|  46.0k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  338|  46.0k|    L->status = LUA_OK;
  ------------------
  |  |   43|  46.0k|#define LUA_OK		0
  ------------------
  339|  46.0k|    L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  217|  46.0k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  569|  46.0k|#define LJ_FR2			1
  ------------------
  340|  46.0k|    L->cframe = NULL;
  341|  46.0k|    if (lj_vm_cpcall(L, NULL, NULL, cpfinalize) == LUA_OK) {
  ------------------
  |  |   43|  46.0k|#define LUA_OK		0
  ------------------
  |  Branch (341:9): [True: 46.0k, False: 0]
  ------------------
  342|  46.0k|      if (++i >= 10) break;
  ------------------
  |  Branch (342:11): [True: 0, False: 46.0k]
  ------------------
  343|  46.0k|      lj_gc_separateudata(g, 1);  /* Separate udata again. */
  344|  46.0k|      if (gcref(g->gc.mmudata) == NULL)  /* Until nothing is left to do. */
  ------------------
  |  |   67|  46.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (344:11): [True: 46.0k, False: 0]
  ------------------
  345|  46.0k|	break;
  346|  46.0k|    }
  347|  46.0k|  }
  348|  46.0k|  close_state(L);
  349|  46.0k|}
lj_state.c:resizestack:
   58|    185|{
   59|    185|  TValue *st, *oldst = tvref(L->stack);
  ------------------
  |  |  217|    185|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    185|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   60|    185|  ptrdiff_t delta;
   61|    185|  MSize oldsize = L->stacksize;
   62|    185|  MSize realsize = n + 1 + LJ_STACK_EXTRA;
  ------------------
  |  |   72|    185|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|    185|#define LJ_FR2			1
  |  |  ------------------
  ------------------
   63|    185|  GCobj *up;
   64|    185|  lj_assertL((MSize)(tvref(L->maxstack)-oldst) == L->stacksize-LJ_STACK_EXTRA-1,
  ------------------
  |  |  365|    185|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    185|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 185, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    185|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   65|    185|	     "inconsistent stack size");
   66|    185|  st = (TValue *)lj_mem_realloc(L, tvref(L->stack),
  ------------------
  |  |  217|    185|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    185|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   67|    185|				(MSize)(oldsize*sizeof(TValue)),
   68|    185|				(MSize)(realsize*sizeof(TValue)));
   69|    185|  setmref(L->stack, st);
  ------------------
  |  |   39|    185|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   70|    185|  delta = (char *)st - (char *)oldst;
   71|    185|  setmref(L->maxstack, st + n);
  ------------------
  |  |   39|    185|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   72|  10.7k|  while (oldsize < realsize)  /* Clear new slots. */
  ------------------
  |  Branch (72:10): [True: 10.5k, False: 185]
  ------------------
   73|  10.5k|    setnilV(st + oldsize++);
  ------------------
  |  |  872|  10.7k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   74|    185|  L->stacksize = realsize;
   75|    185|  if ((size_t)(mref(G(L)->jit_base, char) - (char *)oldst) < oldsize)
  ------------------
  |  |   36|    185|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (75:7): [True: 0, False: 185]
  ------------------
   76|      0|    setmref(G(L)->jit_base, mref(G(L)->jit_base, char) + delta);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   77|    185|  L->base = (TValue *)((char *)L->base + delta);
   78|    185|  L->top = (TValue *)((char *)L->top + delta);
   79|    185|  for (up = gcref(L->openupval); up != NULL; up = gcnext(up))
  ------------------
  |  |   67|    185|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                for (up = gcref(L->openupval); up != NULL; up = gcnext(up))
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (79:34): [True: 0, False: 185]
  ------------------
   80|      0|    setmref(gco2uv(up)->v, (TValue *)((char *)uvval(gco2uv(up)) + delta));
  ------------------
  |  |   39|    185|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  |  Branch (39:55): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   81|    185|}
lj_state.c:cpluaopen:
  186|  46.0k|{
  187|  46.0k|  global_State *g = G(L);
  ------------------
  |  |  705|  46.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  188|  46.0k|  UNUSED(dummy);
  ------------------
  |  |   91|  46.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  189|  46.0k|  UNUSED(ud);
  ------------------
  |  |   91|  46.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  190|  46.0k|  stack_init(L, L);
  191|       |  /* NOBARRIER: State initialization, all objects are white. */
  192|  46.0k|  setgcref(L->env, obj2gco(lj_tab_new(L, 0, LJ_MIN_GLOBAL)));
  ------------------
  |  |   72|  46.0k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  193|  46.0k|  settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |  706|  46.0k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  705|  46.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |   78|  46.0k|#define LJ_MIN_REGISTRY	2		/* Min. registry size (hbits). */
  ------------------
  194|  46.0k|  lj_str_init(L);
  195|  46.0k|  lj_meta_init(L);
  196|  46.0k|  lj_lex_init(L);
  197|  46.0k|  fixstring(lj_err_str(L, LJ_ERR_ERRMEM));  /* Preallocate memory error msg. */
  ------------------
  |  |   45|  46.0k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  46.0k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  198|  46.0k|  g->gc.threshold = 4*g->gc.total;
  199|  46.0k|#if LJ_HASFFI
  200|  46.0k|  lj_ctype_initfin(L);
  201|  46.0k|#endif
  202|  46.0k|  lj_trace_initstate(g);
  203|  46.0k|  lj_err_verify();
  204|  46.0k|  return NULL;
  205|  46.0k|}
lj_state.c:close_state:
  208|  46.0k|{
  209|  46.0k|  global_State *g = G(L);
  ------------------
  |  |  705|  46.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  210|  46.0k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  46.0k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  211|  46.0k|  lj_gc_freeall(g);
  212|  46.0k|  lj_assertG(gcref(g->gc.root) == obj2gco(L),
  ------------------
  |  |  364|  46.0k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  213|  46.0k|	     "main thread is not first GC object");
  214|  46.0k|  lj_assertG(g->str.num == 0, "leaked %d strings", g->str.num);
  ------------------
  |  |  364|  46.0k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  215|  46.0k|  lj_trace_freestate(g);
  216|  46.0k|#if LJ_HASFFI
  217|  46.0k|  lj_ctype_freestate(g);
  218|  46.0k|#endif
  219|  46.0k|  lj_str_freetab(g);
  ------------------
  |  |   25|  46.0k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  46.0k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  220|  46.0k|  lj_buf_free(g, &g->tmpbuf);
  221|  46.0k|  lj_mem_freevec(g, tvref(L->stack), L->stacksize, TValue);
  ------------------
  |  |  130|  46.0k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  222|  46.0k|#if LJ_64
  223|  46.0k|  if (mref(g->gc.lightudseg, uint32_t)) {
  ------------------
  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:20): [True: 0, False: 46.0k]
  |  |  ------------------
  ------------------
  224|      0|    MSize segnum = g->gc.lightudnum ? (2 << lj_fls(g->gc.lightudnum)) : 2;
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (224:20): [True: 0, False: 0]
  ------------------
  225|      0|    lj_mem_freevec(g, mref(g->gc.lightudseg, uint32_t), segnum, uint32_t);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  226|      0|  }
  227|  46.0k|#endif
  228|  46.0k|  lj_assertG(g->gc.total == sizeof(GG_State),
  ------------------
  |  |  364|  46.0k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  46.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  46.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  229|  46.0k|	     "memory leak of %lld bytes",
  230|  46.0k|	     (long long)(g->gc.total - sizeof(GG_State)));
  231|  46.0k|#ifndef LUAJIT_USE_SYSMALLOC
  232|  46.0k|  if (g->allocf == lj_alloc_f)
  ------------------
  |  Branch (232:7): [True: 46.0k, False: 0]
  ------------------
  233|  46.0k|    lj_alloc_destroy(g->allocd);
  234|      0|  else
  235|      0|#endif
  236|      0|    g->allocf(g->allocd, G2GG(g), sizeof(GG_State), 0);
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  237|  46.0k|}
lj_state.c:cpfinalize:
  311|  46.0k|{
  312|  46.0k|  UNUSED(dummy);
  ------------------
  |  |   91|  46.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  313|  46.0k|  UNUSED(ud);
  ------------------
  |  |   91|  46.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  314|  46.0k|  lj_gc_finalize_cdata(L);
  315|  46.0k|  lj_gc_finalize_udata(L);
  316|       |  /* Frame pop omitted. */
  317|  46.0k|  return NULL;
  318|  46.0k|}
lj_state.c:stack_init:
  169|  46.0k|{
  170|  46.0k|  TValue *stend, *st = lj_mem_newvec(L, LJ_STACK_START+LJ_STACK_EXTRA, TValue);
  ------------------
  |  |  125|  46.0k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  46.0k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  171|  46.0k|  setmref(L1->stack, st);
  ------------------
  |  |   39|  46.0k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  172|  46.0k|  L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   38|  46.0k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  46.0k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   72|  46.0k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  46.0k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  173|  46.0k|  stend = st + L1->stacksize;
  174|  46.0k|  setmref(L1->maxstack, stend - LJ_STACK_EXTRA - 1);
  ------------------
  |  |   39|  46.0k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  175|  46.0k|  setthreadV(L1, st++, L1);  /* Needed for curr_funcisL() on empty stack. */
  176|  46.0k|  if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  569|  46.0k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  872|  46.0k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  177|  46.0k|  L1->base = L1->top = st;
  178|  2.16M|  while (st < stend)  /* Clear new slots. */
  ------------------
  |  Branch (178:10): [True: 2.11M, False: 46.0k]
  ------------------
  179|  2.11M|    setnilV(st++);
  ------------------
  |  |  872|  2.11M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  180|  46.0k|}

lj_str_resize:
  139|  47.3k|{
  140|  47.3k|  global_State *g = G(L);
  ------------------
  |  |  705|  47.3k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  47.3k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  141|  47.3k|  GCRef *newtab, *oldtab = g->str.tab;
  142|  47.3k|  MSize i;
  143|       |
  144|       |  /* No resizing during GC traversal or if already too big. */
  145|  47.3k|  if (g->gc.state == GCSsweepstring || newmask >= LJ_MAX_STRTAB-1)
  ------------------
  |  |   58|  46.5k|#define LJ_MAX_STRTAB	(1<<26)		/* Max. string table size. */
  ------------------
  |  Branch (145:7): [True: 736, False: 46.5k]
  |  Branch (145:40): [True: 0, False: 46.5k]
  ------------------
  146|    736|    return;
  147|       |
  148|  46.5k|  newtab = lj_mem_newvec(L, newmask+1, GCRef);
  ------------------
  |  |  125|  46.5k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  46.5k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  149|  46.5k|  memset(newtab, 0, (newmask+1)*sizeof(GCRef));
  150|       |
  151|  46.5k|#if LUAJIT_SECURITY_STRHASH
  152|       |  /* Check which chains need secondary hashes. */
  153|  46.5k|  if (g->str.second) {
  ------------------
  |  Branch (153:7): [True: 293, False: 46.2k]
  ------------------
  154|    293|    int newsecond = 0;
  155|       |    /* Compute primary chain lengths. */
  156|  75.3k|    for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (156:27): [True: 75.0k, False: 293]
  ------------------
  157|  75.0k|      GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|  75.0k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  158|   150k|      while (o) {
  ------------------
  |  Branch (158:14): [True: 75.3k, False: 75.0k]
  ------------------
  159|  75.3k|	GCstr *s = gco2str(o);
  ------------------
  |  |  765|  75.3k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  75.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  75.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  75.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 75.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  75.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  160|  75.3k|	MSize hash = s->hashalg ? hash_sparse(g->str.seed, strdata(s), s->len) :
  ------------------
  |  |  316|  9.05k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (160:15): [True: 9.05k, False: 66.2k]
  ------------------
  161|  75.3k|				  s->hash;
  162|  75.3k|	hash &= newmask;
  163|  75.3k|	setgcrefp(newtab[hash], gcrefu(newtab[hash]) + 1);
  ------------------
  |  |   75|  75.3k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  164|  75.3k|	o = gcnext(o);
  ------------------
  |  |   90|  75.3k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  75.3k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  165|  75.3k|      }
  166|  75.0k|    }
  167|       |    /* Mark secondary chains. */
  168|   150k|    for (i = newmask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (168:23): [True: 150k, False: 293]
  ------------------
  169|   150k|      int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |   69|   150k|#define gcrefu(r)	((r).gcptr64)
  ------------------
                    int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |  135|   150k|#define LJ_STR_MAXCOLL		32
  ------------------
  170|   150k|      newsecond |= secondary;
  171|   150k|      setgcrefp(newtab[i], secondary);
  ------------------
  |  |   75|   150k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  172|   150k|    }
  173|    293|    g->str.second = newsecond;
  174|    293|  }
  175|  46.5k|#endif
  176|       |
  177|       |  /* Reinsert all strings from the old table into the new table. */
  178|   194k|  for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (178:25): [True: 147k, False: 46.5k]
  ------------------
  179|   147k|    GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|   147k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  180|   296k|    while (o) {
  ------------------
  |  Branch (180:12): [True: 148k, False: 147k]
  ------------------
  181|   148k|      GCobj *next = gcnext(o);
  ------------------
  |  |   90|   148k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|   148k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  182|   148k|      GCstr *s = gco2str(o);
  ------------------
  |  |  765|   148k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|   148k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   148k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   148k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 148k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   148k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|      MSize hash = s->hash;
  184|   148k|#if LUAJIT_SECURITY_STRHASH
  185|   148k|      uintptr_t u;
  186|   148k|      if (LJ_LIKELY(!s->hashalg)) {  /* String hashed with primary hash. */
  ------------------
  |  |  145|   148k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 139k, False: 9.05k]
  |  |  ------------------
  ------------------
  187|   139k|	hash &= newmask;
  188|   139k|	u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|   139k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  189|   139k|	if (LJ_UNLIKELY(u & 1)) {  /* Switch string to secondary hash. */
  ------------------
  |  |  146|   139k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
  190|      0|	  s->hash = hash = hash_dense(g->str.seed, s->hash, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  191|      0|	  s->hashalg = 1;
  192|      0|	  hash &= newmask;
  193|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  194|      0|	}
  195|   139k|      } else {  /* String hashed with secondary hash. */
  196|  9.05k|	MSize shash = hash_sparse(g->str.seed, strdata(s), s->len);
  ------------------
  |  |  316|  9.05k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  197|  9.05k|	u = gcrefu(newtab[shash & newmask]);
  ------------------
  |  |   69|  9.05k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  198|  9.05k|	if (u & 1) {
  ------------------
  |  Branch (198:6): [True: 1.26k, False: 7.78k]
  ------------------
  199|  1.26k|	  hash &= newmask;
  200|  1.26k|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|  1.26k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  201|  7.78k|	} else {  /* Revert string back to primary hash. */
  202|  7.78k|	  s->hash = shash;
  203|  7.78k|	  s->hashalg = 0;
  204|  7.78k|	  hash = (shash & newmask);
  205|  7.78k|	}
  206|  9.05k|      }
  207|       |      /* NOBARRIER: The string table is a GC root. */
  208|   148k|      setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|   148k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  209|   148k|      setgcrefp(newtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|   148k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  210|       |#else
  211|       |      hash &= newmask;
  212|       |      /* NOBARRIER: The string table is a GC root. */
  213|       |      setgcrefr(o->gch.nextgc, newtab[hash]);
  214|       |      setgcref(newtab[hash], o);
  215|       |#endif
  216|   148k|      o = next;
  217|   148k|    }
  218|   147k|  }
  219|       |
  220|       |  /* Free old table and replace with new table. */
  221|  46.5k|  lj_str_freetab(g);
  ------------------
  |  |   25|  46.5k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  46.5k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  222|  46.5k|  g->str.tab = newtab;
  223|  46.5k|  g->str.mask = newmask;
  224|  46.5k|}
lj_str_new:
  324|  6.13M|{
  325|  6.13M|  global_State *g = G(L);
  ------------------
  |  |  705|  6.13M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  6.13M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  326|  6.13M|  if (lenx-1 < LJ_MAX_STR-1) {
  ------------------
  |  |   54|  6.13M|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|  6.13M|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (326:7): [True: 5.94M, False: 194k]
  ------------------
  327|  5.94M|    MSize len = (MSize)lenx;
  328|  5.94M|    StrHash hash = hash_sparse(g->str.seed, str, len);
  329|  5.94M|    MSize coll = 0;
  330|  5.94M|    int hashalg = 0;
  331|       |    /* Check if the string has already been interned. */
  332|  5.94M|    GCobj *o = gcref(g->str.tab[hash & g->str.mask]);
  ------------------
  |  |   67|  5.94M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  333|  5.94M|#if LUAJIT_SECURITY_STRHASH
  334|  5.94M|    if (LJ_UNLIKELY((uintptr_t)o & 1)) {  /* Secondary hash for this chain? */
  ------------------
  |  |  146|  5.94M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 11.0k, False: 5.93M]
  |  |  ------------------
  ------------------
  335|  11.0k|      hashalg = 1;
  336|  11.0k|      hash = hash_dense(g->str.seed, hash, str, len);
  337|  11.0k|      o = (GCobj *)(gcrefu(g->str.tab[hash & g->str.mask]) & ~(uintptr_t)1);
  ------------------
  |  |   69|  11.0k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  338|  11.0k|    }
  339|  5.94M|#endif
  340|  7.21M|    while (o != NULL) {
  ------------------
  |  Branch (340:12): [True: 3.65M, False: 3.55M]
  ------------------
  341|  3.65M|      GCstr *sx = gco2str(o);
  ------------------
  |  |  765|  3.65M|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  3.65M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.65M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.65M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.65M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.65M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  342|  3.65M|      if (sx->hash == hash && sx->len == len) {
  ------------------
  |  Branch (342:11): [True: 2.54M, False: 1.11M]
  |  Branch (342:31): [True: 2.50M, False: 40.8k]
  ------------------
  343|  2.50M|	if (memcmp(str, strdata(sx), len) == 0) {
  ------------------
  |  |  316|  2.50M|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (343:6): [True: 2.38M, False: 118k]
  ------------------
  344|  2.38M|	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   37|  2.38M|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|  2.38M|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  2.38M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  2.38M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  2.38M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  2.38M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  2.38M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  2.38M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 107, False: 2.38M]
  |  |  ------------------
  ------------------
              	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   43|    107|#define flipwhite(x)	((x)->gch.marked ^= LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|    107|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|    107|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|    107|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  345|  2.38M|	  return sx;  /* Return existing string. */
  346|  2.38M|	}
  347|   118k|	coll++;
  348|   118k|      }
  349|  1.27M|      coll++;
  350|  1.27M|      o = gcnext(o);
  ------------------
  |  |   90|  1.27M|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  1.27M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  351|  1.27M|    }
  352|  3.55M|#if LUAJIT_SECURITY_STRHASH
  353|       |    /* Rehash chain if there are too many collisions. */
  354|  3.55M|    if (LJ_UNLIKELY(coll > LJ_STR_MAXCOLL) && !hashalg) {
  ------------------
  |  |  146|  7.11M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 789, False: 3.55M]
  |  |  ------------------
  ------------------
  |  Branch (354:47): [True: 789, False: 0]
  ------------------
  355|    789|      return lj_str_rehash_chain(L, hash, str, len);
  356|    789|    }
  357|  3.55M|#endif
  358|       |    /* Otherwise allocate a new string. */
  359|  3.55M|    return lj_str_alloc(L, str, len, hash, hashalg);
  360|  3.55M|  } else {
  361|   194k|    if (lenx)
  ------------------
  |  Branch (361:9): [True: 0, False: 194k]
  ------------------
  362|      0|      lj_err_msg(L, LJ_ERR_STROV);
  363|   194k|    return &g->strempty;
  364|   194k|  }
  365|  6.13M|}
lj_str_free:
  368|  3.55M|{
  369|  3.55M|  g->str.num--;
  370|  3.55M|  lj_mem_free(g, s, lj_str_size(s->len));
  ------------------
  |  |   29|  3.55M|#define lj_str_size(len)	(sizeof(GCstr) + (((len)+4) & ~(MSize)3))
  ------------------
  371|  3.55M|}
lj_str_init:
  374|  46.0k|{
  375|  46.0k|  global_State *g = G(L);
  ------------------
  |  |  705|  46.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  46.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  376|  46.0k|  g->str.seed = lj_prng_u64(&g->prng);
  377|  46.0k|  lj_str_resize(L, LJ_MIN_STRTAB-1);
  ------------------
  |  |   79|  46.0k|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  378|  46.0k|}
lj_str.c:hash_sparse:
   86|  5.96M|{
   87|       |  /* Constants taken from lookup3 hash by Bob Jenkins. */
   88|  5.96M|  StrHash a, b, h = len ^ (StrHash)seed;
   89|  5.96M|  if (len >= 4) {  /* Caveat: unaligned access! */
  ------------------
  |  Branch (89:7): [True: 3.30M, False: 2.65M]
  ------------------
   90|  3.30M|    a = lj_getu32(str);
   91|  3.30M|    h ^= lj_getu32(str+len-4);
   92|  3.30M|    b = lj_getu32(str+(len>>1)-2);
   93|  3.30M|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  3.30M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   94|  3.30M|    b += lj_getu32(str+(len>>2)-1);
   95|  3.30M|  } else {
   96|  2.65M|    a = *(const uint8_t *)str;
   97|  2.65M|    h ^= *(const uint8_t *)(str+len-1);
   98|  2.65M|    b = *(const uint8_t *)(str+(len>>1));
   99|  2.65M|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  2.65M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  100|  2.65M|  }
  101|  5.96M|  a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|  5.96M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  102|  5.96M|  b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|  5.96M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  103|  5.96M|  h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|  5.96M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  104|  5.96M|  return h;
  105|  5.96M|}
lj_str.c:hash_dense:
  111|  27.4k|{
  112|  27.4k|  StrHash b = lj_bswap(lj_rol(h ^ (StrHash)(seed >> 32), 4));
  ------------------
  |  |  113|  27.4k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  113|  27.4k|  if (len > 12) {
  ------------------
  |  Branch (113:7): [True: 26.9k, False: 510]
  ------------------
  114|  26.9k|    StrHash a = (StrHash)seed;
  115|  26.9k|    const char *pe = str+len-12, *p = pe, *q = str;
  116|   107k|    do {
  117|   107k|      a += lj_getu32(p);
  118|   107k|      b += lj_getu32(p+4);
  119|   107k|      h += lj_getu32(p+8);
  120|   107k|      p = q; q += 12;
  121|   107k|      h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|   107k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  122|   107k|      a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|   107k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  123|   107k|      b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|   107k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  124|   107k|    } while (p < pe);
  ------------------
  |  Branch (124:14): [True: 80.7k, False: 26.9k]
  ------------------
  125|  26.9k|    h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|  26.9k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  126|  26.9k|    a ^= h; a -= lj_rol(h, 4);
  ------------------
  |  |  113|  26.9k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  127|  26.9k|    b ^= a; b -= lj_rol(a, 14);
  ------------------
  |  |  113|  26.9k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  128|  26.9k|  }
  129|  27.4k|  return b;
  130|  27.4k|}
lj_str.c:lj_str_rehash_chain:
  230|    789|{
  231|    789|  global_State *g = G(L);
  ------------------
  |  |  705|    789|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    789|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  232|    789|  int ow = g->gc.state == GCSsweepstring ? otherwhite(g) : 0;  /* Sweeping? */
  ------------------
  |  |   36|     23|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|     23|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|     23|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|     23|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (232:12): [True: 23, False: 766]
  ------------------
  233|    789|  GCRef *strtab = g->str.tab;
  234|    789|  MSize strmask = g->str.mask;
  235|    789|  GCobj *o = gcref(strtab[hashc & strmask]);
  ------------------
  |  |   67|    789|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  236|    789|  setgcrefp(strtab[hashc & strmask], (void *)((uintptr_t)1));
  ------------------
  |  |   75|    789|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  237|    789|  g->str.second = 1;
  238|  17.2k|  while (o) {
  ------------------
  |  Branch (238:10): [True: 16.4k, False: 789]
  ------------------
  239|  16.4k|    uintptr_t u;
  240|  16.4k|    GCobj *next = gcnext(o);
  ------------------
  |  |   90|  16.4k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  16.4k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  241|  16.4k|    GCstr *s = gco2str(o);
  ------------------
  |  |  765|  16.4k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  16.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  16.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  16.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 16.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  16.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  242|      0|    StrHash hash;
  243|  16.4k|    if (ow) {  /* Must sweep while rechaining. */
  ------------------
  |  Branch (243:9): [True: 399, False: 16.0k]
  ------------------
  244|    399|      if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* String alive? */
  ------------------
  |  |   27|    399|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|    399|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|    399|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (244:11): [True: 397, False: 2]
  ------------------
  245|    397|	lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|    397|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    411|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 383, False: 14]
  |  |  |  |  |  Branch (355:5): [True: 14, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    397|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  246|    397|		   "sweep of undead string");
  247|    397|	makewhite(g, o);
  ------------------
  |  |   42|    397|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|    397|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    397|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    397|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    397|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|    397|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|    397|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    397|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    397|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    397|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|    397|      } else {  /* Free dead string. */
  249|      2|	lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|      2|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 2, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  250|      2|		   "sweep of unlive string");
  251|      2|	lj_str_free(g, s);
  252|      2|	o = next;
  253|      2|	continue;
  254|      2|      }
  255|    399|    }
  256|  16.4k|    hash = s->hash;
  257|  16.4k|    if (!s->hashalg) {  /* Rehash with secondary hash. */
  ------------------
  |  Branch (257:9): [True: 16.4k, False: 0]
  ------------------
  258|  16.4k|      hash = hash_dense(g->str.seed, hash, strdata(s), s->len);
  ------------------
  |  |  316|  16.4k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  259|  16.4k|      s->hash = hash;
  260|  16.4k|      s->hashalg = 1;
  261|  16.4k|    }
  262|       |    /* Rechain. */
  263|  16.4k|    hash &= strmask;
  264|  16.4k|    u = gcrefu(strtab[hash]);
  ------------------
  |  |   69|  16.4k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  265|  16.4k|    setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  16.4k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  266|  16.4k|    setgcrefp(strtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|  16.4k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  267|  16.4k|    o = next;
  268|  16.4k|  }
  269|       |  /* Try to insert the pending string again. */
  270|    789|  return lj_str_new(L, str, len);
  271|    789|}
lj_str.c:lj_str_alloc:
  286|  3.55M|{
  287|  3.55M|  GCstr *s = lj_mem_newt(L, lj_str_size(len), GCstr);
  ------------------
  |  |  133|  3.55M|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  3.55M|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  288|  3.55M|  global_State *g = G(L);
  ------------------
  |  |  705|  3.55M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.55M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|  3.55M|  uintptr_t u;
  290|  3.55M|  newwhite(g, s);
  ------------------
  |  |   40|  3.55M|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|  3.55M|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  3.55M|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  3.55M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  3.55M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  3.55M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  291|  3.55M|  s->gct = ~LJ_TSTR;
  ------------------
  |  |  264|  3.55M|#define LJ_TSTR			(~4u)
  ------------------
  292|  3.55M|  s->len = len;
  293|  3.55M|  s->hash = hash;
  294|       |#ifndef STRID_RESEED_INTERVAL
  295|       |  s->sid = g->str.id++;
  296|       |#elif STRID_RESEED_INTERVAL
  297|  3.55M|  if (!g->str.idreseed--) {
  ------------------
  |  Branch (297:7): [True: 63.1k, False: 3.49M]
  ------------------
  298|  63.1k|    uint64_t r = lj_prng_u64(&g->prng);
  299|  63.1k|    g->str.id = (StrID)r;
  300|  63.1k|    g->str.idreseed = (uint8_t)(r >> (64 - STRID_RESEED_INTERVAL));
  ------------------
  |  |  276|  63.1k|#define STRID_RESEED_INTERVAL	8
  ------------------
  301|  63.1k|  }
  302|  3.55M|  s->sid = g->str.id++;
  303|       |#else
  304|       |  s->sid = (StrID)lj_prng_u64(&g->prng);
  305|       |#endif
  306|  3.55M|  s->reserved = 0;
  307|  3.55M|  s->hashalg = (uint8_t)hashalg;
  308|       |  /* Clear last 4 bytes of allocated memory. Implies zero-termination, too. */
  309|  3.55M|  *(uint32_t *)(strdatawr(s)+(len & ~(MSize)3)) = 0;
  ------------------
  |  |  317|  3.55M|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  310|  3.55M|  memcpy(strdatawr(s), str, len);
  ------------------
  |  |  317|  3.55M|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  311|       |  /* Add to string hash table. */
  312|  3.55M|  hash &= g->str.mask;
  313|  3.55M|  u = gcrefu(g->str.tab[hash]);
  ------------------
  |  |   69|  3.55M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  314|  3.55M|  setgcrefp(s->nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  3.55M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  315|       |  /* NOBARRIER: The string table is a GC root. */
  316|  3.55M|  setgcrefp(g->str.tab[hash], ((uintptr_t)s | (u & 1)));
  ------------------
  |  |   75|  3.55M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  317|  3.55M|  if (g->str.num++ > g->str.mask)  /* Allow a 100% load factor. */
  ------------------
  |  Branch (317:7): [True: 1.31k, False: 3.55M]
  ------------------
  318|  1.31k|    lj_str_resize(L, (g->str.mask<<1)+1);  /* Grow string table. */
  319|  3.55M|  return s;  /* Return newly interned string. */
  320|  3.55M|}

lj_strfmt_parse:
   35|   685k|{
   36|   685k|  const uint8_t *p = fs->p, *e = fs->e;
   37|   685k|  fs->str = (const char *)p;
   38|  1.85M|  for (; p < e; p++) {
  ------------------
  |  Branch (38:10): [True: 1.60M, False: 249k]
  ------------------
   39|  1.60M|    if (*p == '%') {  /* Escape char? */
  ------------------
  |  Branch (39:9): [True: 436k, False: 1.16M]
  ------------------
   40|   436k|      if (p[1] == '%') {  /* '%%'? */
  ------------------
  |  Branch (40:11): [True: 0, False: 436k]
  ------------------
   41|      0|	fs->p = ++p+1;
   42|      0|	goto retlit;
   43|   436k|      } else {
   44|   436k|	SFormat sf = 0;
   45|   436k|	uint32_t c;
   46|   436k|	if (p != (const uint8_t *)fs->str)
  ------------------
  |  Branch (46:6): [True: 158k, False: 277k]
  ------------------
   47|   158k|	  break;
   48|   277k|	for (p++; (uint32_t)*p - ' ' <= (uint32_t)('0' - ' '); p++) {
  ------------------
  |  Branch (48:12): [True: 0, False: 277k]
  ------------------
   49|       |	  /* Parse flags. */
   50|      0|	  if (*p == '-') sf |= STRFMT_F_LEFT;
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (50:8): [True: 0, False: 0]
  ------------------
   51|      0|	  else if (*p == '+') sf |= STRFMT_F_PLUS;
  ------------------
  |  |   38|      0|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (51:13): [True: 0, False: 0]
  ------------------
   52|      0|	  else if (*p == '0') sf |= STRFMT_F_ZERO;
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (52:13): [True: 0, False: 0]
  ------------------
   53|      0|	  else if (*p == ' ') sf |= STRFMT_F_SPACE;
  ------------------
  |  |   40|      0|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (53:13): [True: 0, False: 0]
  ------------------
   54|      0|	  else if (*p == '#') sf |= STRFMT_F_ALT;
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (54:13): [True: 0, False: 0]
  ------------------
   55|      0|	  else break;
   56|      0|	}
   57|   277k|	if ((uint32_t)*p - '0' < 10) {  /* Parse width. */
  ------------------
  |  Branch (57:6): [True: 0, False: 277k]
  ------------------
   58|      0|	  uint32_t width = (uint32_t)*p++ - '0';
   59|      0|	  if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (59:8): [True: 0, False: 0]
  ------------------
   60|      0|	    width = (uint32_t)*p++ - '0' + width*10;
   61|      0|	  sf |= (width << STRFMT_SH_WIDTH);
  ------------------
  |  |   45|      0|#define STRFMT_SH_WIDTH	16
  ------------------
   62|      0|	}
   63|   277k|	if (*p == '.') {  /* Parse precision. */
  ------------------
  |  Branch (63:6): [True: 0, False: 277k]
  ------------------
   64|      0|	  uint32_t prec = 0;
   65|      0|	  p++;
   66|      0|	  if ((uint32_t)*p - '0' < 10) {
  ------------------
  |  Branch (66:8): [True: 0, False: 0]
  ------------------
   67|      0|	    prec = (uint32_t)*p++ - '0';
   68|      0|	    if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (68:10): [True: 0, False: 0]
  ------------------
   69|      0|	      prec = (uint32_t)*p++ - '0' + prec*10;
   70|      0|	  }
   71|      0|	  sf |= ((prec+1) << STRFMT_SH_PREC);
  ------------------
  |  |   46|      0|#define STRFMT_SH_PREC	24
  ------------------
   72|      0|	}
   73|       |	/* Parse conversion. */
   74|   277k|	c = (uint32_t)*p - 'A';
   75|   277k|	if (LJ_LIKELY(c <= (uint32_t)('x' - 'A'))) {
  ------------------
  |  |  145|   277k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 277k, False: 0]
  |  |  ------------------
  ------------------
   76|   277k|	  uint32_t sx = strfmt_map[c];
   77|   277k|	  if (sx) {
  ------------------
  |  Branch (77:8): [True: 277k, False: 0]
  ------------------
   78|   277k|	    fs->p = p+1;
   79|   277k|	    return (sf | sx | ((c & 0x20) ? 0 : STRFMT_F_UPPER));
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (79:25): [True: 277k, False: 0]
  ------------------
   80|   277k|	  }
   81|   277k|	}
   82|       |	/* Return error location. */
   83|      0|	if (*p >= 32) p++;
  ------------------
  |  Branch (83:6): [True: 0, False: 0]
  ------------------
   84|      0|	fs->len = (MSize)(p - (const uint8_t *)fs->str);
   85|      0|	fs->p = fs->e;
   86|      0|	return STRFMT_ERR;
   87|   277k|      }
   88|   436k|    }
   89|  1.60M|  }
   90|   408k|  fs->p = p;
   91|   408k|retlit:
   92|   408k|  fs->len = (MSize)(p - (const uint8_t *)fs->str);
   93|   408k|  return fs->len ? STRFMT_LIT : STRFMT_EOF;
  ------------------
  |  Branch (93:10): [True: 244k, False: 163k]
  ------------------
   94|   408k|}
lj_strfmt_wuleb128:
  161|  59.5k|{
  162|  60.8k|  for (; v >= 0x80; v >>= 7)
  ------------------
  |  Branch (162:10): [True: 1.29k, False: 59.5k]
  ------------------
  163|  1.29k|    *p++ = (char)((v & 0x7f) | 0x80);
  164|  59.5k|  *p++ = (char)v;
  165|  59.5k|  return p;
  166|  59.5k|}
lj_strfmt_putfxint:
  285|  48.6k|{
  286|  48.6k|  char buf[STRFMT_MAXBUF_XINT], *q = buf + sizeof(buf), *w;
  287|  48.6k|#ifdef LUA_USE_ASSERT
  288|  48.6k|  char *ws;
  289|  48.6k|#endif
  290|  48.6k|  MSize prefix = 0, len, prec, pprec, width, need;
  291|       |
  292|       |  /* Figure out signed prefixes. */
  293|  48.6k|  if (STRFMT_TYPE(sf) == STRFMT_INT) {
  ------------------
  |  |   48|  48.6k|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  |  Branch (293:7): [True: 48.6k, False: 0]
  ------------------
  294|  48.6k|    if ((int64_t)k < 0) {
  ------------------
  |  Branch (294:9): [True: 0, False: 48.6k]
  ------------------
  295|      0|      k = ~k+1u;
  296|      0|      prefix = 256 + '-';
  297|  48.6k|    } else if ((sf & STRFMT_F_PLUS)) {
  ------------------
  |  |   38|  48.6k|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (297:16): [True: 0, False: 48.6k]
  ------------------
  298|      0|      prefix = 256 + '+';
  299|  48.6k|    } else if ((sf & STRFMT_F_SPACE)) {
  ------------------
  |  |   40|  48.6k|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (299:16): [True: 0, False: 48.6k]
  ------------------
  300|      0|      prefix = 256 + ' ';
  301|      0|    }
  302|  48.6k|  }
  303|       |
  304|       |  /* Convert number and store to fixed-size buffer in reverse order. */
  305|  48.6k|  prec = STRFMT_PREC(sf);
  ------------------
  |  |   50|  48.6k|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|  48.6k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  306|  48.6k|  if ((int32_t)prec >= 0) sf &= ~STRFMT_F_ZERO;
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (306:7): [True: 0, False: 48.6k]
  ------------------
  307|  48.6k|  if (k == 0) {  /* Special-case zero argument. */
  ------------------
  |  Branch (307:7): [True: 0, False: 48.6k]
  ------------------
  308|      0|    if (prec != 0 ||
  ------------------
  |  Branch (308:9): [True: 0, False: 0]
  ------------------
  309|      0|	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   29|      0|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   29|      0|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (309:2): [True: 0, False: 0]
  ------------------
  310|      0|      *--q = '0';
  311|  48.6k|  } else if (!(sf & (STRFMT_T_HEX|STRFMT_T_OCT))) {  /* Decimal. */
  ------------------
  |  |   28|  48.6k|#define STRFMT_T_HEX	0x0010	/* STRFMT_UINT */
  ------------------
                } else if (!(sf & (STRFMT_T_HEX|STRFMT_T_OCT))) {  /* Decimal. */
  ------------------
  |  |   29|  48.6k|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
  |  Branch (311:14): [True: 48.6k, False: 0]
  ------------------
  312|  48.6k|    uint32_t k2;
  313|  48.6k|    while ((k >> 32)) { *--q = (char)('0' + k % 10); k /= 10; }
  ------------------
  |  Branch (313:12): [True: 0, False: 48.6k]
  ------------------
  314|  48.6k|    k2 = (uint32_t)k;
  315|  63.2k|    do { *--q = (char)('0' + k2 % 10); k2 /= 10; } while (k2);
  ------------------
  |  Branch (315:59): [True: 14.6k, False: 48.6k]
  ------------------
  316|  48.6k|  } else if ((sf & STRFMT_T_HEX)) {  /* Hex. */
  ------------------
  |  |   28|      0|#define STRFMT_T_HEX	0x0010	/* STRFMT_UINT */
  ------------------
  |  Branch (316:14): [True: 0, False: 0]
  ------------------
  317|      0|    const char *hexdig = (sf & STRFMT_F_UPPER) ? "0123456789ABCDEF" :
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (317:26): [True: 0, False: 0]
  ------------------
  318|      0|						 "0123456789abcdef";
  319|      0|    do { *--q = hexdig[(k & 15)]; k >>= 4; } while (k);
  ------------------
  |  Branch (319:53): [True: 0, False: 0]
  ------------------
  320|      0|    if ((sf & STRFMT_F_ALT)) prefix = 512 + ((sf & STRFMT_F_UPPER) ? 'X' : 'x');
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
                  if ((sf & STRFMT_F_ALT)) prefix = 512 + ((sf & STRFMT_F_UPPER) ? 'X' : 'x');
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (320:9): [True: 0, False: 0]
  |  Branch (320:46): [True: 0, False: 0]
  ------------------
  321|      0|  } else {  /* Octal. */
  322|      0|    do { *--q = (char)('0' + (uint32_t)(k & 7)); k >>= 3; } while (k);
  ------------------
  |  Branch (322:68): [True: 0, False: 0]
  ------------------
  323|      0|    if ((sf & STRFMT_F_ALT)) *--q = '0';
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (323:9): [True: 0, False: 0]
  ------------------
  324|      0|  }
  325|       |
  326|       |  /* Calculate sizes. */
  327|  48.6k|  len = (MSize)(buf + sizeof(buf) - q);
  328|  48.6k|  if ((int32_t)len >= (int32_t)prec) prec = len;
  ------------------
  |  Branch (328:7): [True: 48.6k, False: 0]
  ------------------
  329|  48.6k|  width = STRFMT_WIDTH(sf);
  ------------------
  |  |   49|  48.6k|#define STRFMT_WIDTH(sf)	(((sf) >> STRFMT_SH_WIDTH) & 255u)
  |  |  ------------------
  |  |  |  |   45|  48.6k|#define STRFMT_SH_WIDTH	16
  |  |  ------------------
  ------------------
  330|  48.6k|  pprec = prec + (prefix >> 8);
  331|  48.6k|  need = width > pprec ? width : pprec;
  ------------------
  |  Branch (331:10): [True: 0, False: 48.6k]
  ------------------
  332|  48.6k|  w = lj_buf_more(sb, need);
  333|  48.6k|#ifdef LUA_USE_ASSERT
  334|  48.6k|  ws = w;
  335|  48.6k|#endif
  336|       |
  337|       |  /* Format number with leading/trailing whitespace and zeros. */
  338|  48.6k|  if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == 0)
  ------------------
  |  |   37|  48.6k|#define STRFMT_F_LEFT	0x0100
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == 0)
  ------------------
  |  |   39|  48.6k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (338:7): [True: 48.6k, False: 0]
  ------------------
  339|  48.6k|    while (width-- > pprec) *w++ = ' ';
  ------------------
  |  Branch (339:12): [True: 0, False: 48.6k]
  ------------------
  340|  48.6k|  if (prefix) {
  ------------------
  |  Branch (340:7): [True: 0, False: 48.6k]
  ------------------
  341|      0|    if ((char)prefix >= 'X') *w++ = '0';
  ------------------
  |  Branch (341:9): [True: 0, False: 0]
  ------------------
  342|      0|    *w++ = (char)prefix;
  343|      0|  }
  344|  48.6k|  if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   37|  48.6k|#define STRFMT_F_LEFT	0x0100
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   39|  48.6k|#define STRFMT_F_ZERO	0x0400
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   39|  48.6k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (344:7): [True: 0, False: 48.6k]
  ------------------
  345|      0|    while (width-- > pprec) *w++ = '0';
  ------------------
  |  Branch (345:12): [True: 0, False: 0]
  ------------------
  346|  48.6k|  while (prec-- > len) *w++ = '0';
  ------------------
  |  Branch (346:10): [True: 0, False: 48.6k]
  ------------------
  347|   111k|  while (q < buf + sizeof(buf)) *w++ = *q++;  /* Add number itself. */
  ------------------
  |  Branch (347:10): [True: 63.2k, False: 48.6k]
  ------------------
  348|  48.6k|  if ((sf & STRFMT_F_LEFT))
  ------------------
  |  |   37|  48.6k|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (348:7): [True: 0, False: 48.6k]
  ------------------
  349|      0|    while (width-- > pprec) *w++ = ' ';
  ------------------
  |  Branch (349:12): [True: 0, False: 0]
  ------------------
  350|       |
  351|  48.6k|  lj_assertX(need == (MSize)(w - ws), "miscalculated format size");
  ------------------
  |  |  366|  48.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  48.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 48.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  48.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  352|  48.6k|  sb->w = w;
  353|  48.6k|  return sb;
  354|  48.6k|}
lj_strfmt_pushvf:
  556|   163k|{
  557|   163k|  SBuf *sb = lj_buf_tmp_(L);
  558|   163k|  FormatState fs;
  559|   163k|  SFormat sf;
  560|   163k|  GCstr *str;
  561|   163k|  lj_strfmt_init(&fs, fmt, (MSize)strlen(fmt));
  562|   685k|  while ((sf = lj_strfmt_parse(&fs)) != STRFMT_EOF) {
  ------------------
  |  Branch (562:10): [True: 522k, False: 163k]
  ------------------
  563|   522k|    switch (STRFMT_TYPE(sf)) {
  ------------------
  |  |   48|   522k|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  564|   244k|    case STRFMT_LIT:
  ------------------
  |  Branch (564:5): [True: 244k, False: 277k]
  ------------------
  565|   244k|      lj_buf_putmem(sb, fs.str, fs.len);
  566|   244k|      break;
  567|  48.6k|    case STRFMT_INT:
  ------------------
  |  Branch (567:5): [True: 48.6k, False: 473k]
  ------------------
  568|  48.6k|      lj_strfmt_putfxint(sb, sf, va_arg(argp, int32_t));
  569|  48.6k|      break;
  570|      0|    case STRFMT_UINT:
  ------------------
  |  Branch (570:5): [True: 0, False: 522k]
  ------------------
  571|      0|      lj_strfmt_putfxint(sb, sf, va_arg(argp, uint32_t));
  572|      0|      break;
  573|      0|    case STRFMT_NUM:
  ------------------
  |  Branch (573:5): [True: 0, False: 522k]
  ------------------
  574|      0|      lj_strfmt_putfnum(sb, STRFMT_G14, va_arg(argp, lua_Number));
  ------------------
  |  |   67|      0|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|      0|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      0|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  575|      0|      break;
  576|   194k|    case STRFMT_STR: {
  ------------------
  |  Branch (576:5): [True: 194k, False: 328k]
  ------------------
  577|   194k|      const char *s = va_arg(argp, char *);
  578|   194k|      if (s == NULL) s = "(null)";
  ------------------
  |  Branch (578:11): [True: 0, False: 194k]
  ------------------
  579|   194k|      lj_buf_putmem(sb, s, (MSize)strlen(s));
  580|   194k|      break;
  581|      0|      }
  582|  34.8k|    case STRFMT_CHAR:
  ------------------
  |  Branch (582:5): [True: 34.8k, False: 487k]
  ------------------
  583|  34.8k|      lj_buf_putb(sb, va_arg(argp, int));
  584|  34.8k|      break;
  585|      0|    case STRFMT_PTR:
  ------------------
  |  Branch (585:5): [True: 0, False: 522k]
  ------------------
  586|      0|      lj_strfmt_putptr(sb, va_arg(argp, void *));
  587|      0|      break;
  588|      0|    case STRFMT_ERR:
  ------------------
  |  Branch (588:5): [True: 0, False: 522k]
  ------------------
  589|      0|    default:
  ------------------
  |  Branch (589:5): [True: 0, False: 522k]
  ------------------
  590|      0|      lj_buf_putb(sb, '?');
  591|      0|      lj_assertL(0, "bad string format near offset %d", fs.len);
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  592|      0|      break;
  593|   522k|    }
  594|   522k|  }
  595|   163k|  str = lj_buf_str(L, sb);
  596|   163k|  setstrV(L, L->top, str);
  597|   163k|  incr_top(L);
  ------------------
  |  |   12|   163k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   327k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   163k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 35, False: 163k]
  |  |  |  Branch (12:38): [True: 0, False: 35]
  |  |  ------------------
  ------------------
  598|   163k|  return strdata(str);
  ------------------
  |  |  316|   163k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  599|   163k|}
lj_strfmt_pushf:
  603|   120k|{
  604|   120k|  const char *msg;
  605|   120k|  va_list argp;
  606|   120k|  va_start(argp, fmt);
  607|   120k|  msg = lj_strfmt_pushvf(L, fmt, argp);
  608|   120k|  va_end(argp);
  609|   120k|  return msg;
  610|   120k|}

lj_strfmt.c:lj_strfmt_init:
   79|   163k|{
   80|   163k|  fs->p = (const uint8_t *)p;
   81|   163k|  fs->e = (const uint8_t *)p + len;
   82|       |  /* Must be NUL-terminated. May have NULs inside, too. */
   83|   163k|  lj_assertX(*fs->e == 0, "format not NUL-terminated");
  ------------------
  |  |  366|   163k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   163k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 163k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   163k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|   163k|}

lj_strscan_scan:
  377|  1.31M|{
  378|  1.31M|  int32_t neg = 0;
  379|  1.31M|  const uint8_t *pe = p + len;
  380|       |
  381|       |  /* Remove leading space, parse sign and non-numbers. */
  382|  1.31M|  if (LJ_UNLIKELY(!lj_char_isdigit(*p))) {
  ------------------
  |  |  146|  1.31M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 12.7k, False: 1.30M]
  |  |  ------------------
  ------------------
  383|  12.7k|    while (lj_char_isspace(*p)) p++;
  384|  12.7k|    if (*p == '+' || *p == '-') neg = (*p++ == '-');
  ------------------
  |  Branch (384:9): [True: 0, False: 12.7k]
  |  Branch (384:22): [True: 0, False: 12.7k]
  ------------------
  385|  12.7k|    if (LJ_UNLIKELY(*p >= 'A')) {  /* Parse "inf", "infinity" or "nan". */
  ------------------
  |  |  146|  12.7k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 12.7k]
  |  |  ------------------
  ------------------
  386|      0|      TValue tmp;
  387|      0|      setnanV(&tmp);
  ------------------
  |  |  946|      0|#define setnanV(o)		((o)->u64 = U64x(fff80000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  388|      0|      if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  389|      0|	if (neg) setminfV(&tmp); else setpinfV(&tmp);
  ------------------
  |  |  948|      0|#define setminfV(o)		((o)->u64 = U64x(fff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
              	if (neg) setminfV(&tmp); else setpinfV(&tmp);
  ------------------
  |  |  947|      0|#define setpinfV(o)		((o)->u64 = U64x(7ff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (389:6): [True: 0, False: 0]
  ------------------
  390|      0|	p += 3;
  391|      0|	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  392|      0|	    casecmp(p[3],'t') && casecmp(p[4],'y')) p += 5;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	    casecmp(p[3],'t') && casecmp(p[4],'y')) p += 5;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  393|      0|      } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  394|      0|	p += 3;
  395|      0|      }
  396|      0|      while (lj_char_isspace(*p)) p++;
  397|      0|      if (*p || p < pe) return STRSCAN_ERROR;
  ------------------
  |  Branch (397:11): [True: 0, False: 0]
  |  Branch (397:17): [True: 0, False: 0]
  ------------------
  398|      0|      o->u64 = tmp.u64;
  399|      0|      return STRSCAN_NUM;
  400|      0|    }
  401|  12.7k|  }
  402|       |
  403|       |  /* Parse regular number. */
  404|  1.31M|  {
  405|  1.31M|    StrScanFmt fmt = STRSCAN_INT;
  406|  1.31M|    int cmask = LJ_CHAR_DIGIT;
  ------------------
  |  |   14|  1.31M|#define LJ_CHAR_DIGIT	0x08
  ------------------
  407|  1.31M|    int base = (opt & STRSCAN_OPT_C) && *p == '0' ? 0 : 10;
  ------------------
  |  |   16|  1.31M|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (407:16): [True: 0, False: 1.31M]
  |  Branch (407:41): [True: 0, False: 0]
  ------------------
  408|  1.31M|    const uint8_t *sp, *dp = NULL;
  409|  1.31M|    uint32_t dig = 0, hasdig = 0, x = 0;
  410|  1.31M|    int32_t ex = 0;
  411|       |
  412|       |    /* Determine base and skip leading zeros. */
  413|  1.31M|    if (LJ_UNLIKELY(*p <= '0')) {
  ------------------
  |  |  146|  1.31M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 683k, False: 632k]
  |  |  ------------------
  ------------------
  414|   683k|      if (*p == '0') {
  ------------------
  |  Branch (414:11): [True: 670k, False: 12.7k]
  ------------------
  415|   670k|	if (casecmp(p[1], 'x'))
  ------------------
  |  |   73|   670k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 14.9k, False: 655k]
  |  |  ------------------
  ------------------
  416|  14.9k|	  base = 16, cmask = LJ_CHAR_XDIGIT, p += 2;
  ------------------
  |  |   15|  14.9k|#define LJ_CHAR_XDIGIT	0x10
  ------------------
  417|   655k|	else if (casecmp(p[1], 'b'))
  ------------------
  |  |   73|   655k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 29.9k, False: 625k]
  |  |  ------------------
  ------------------
  418|  29.9k|	  base = 2, cmask = LJ_CHAR_DIGIT, p += 2;
  ------------------
  |  |   14|  29.9k|#define LJ_CHAR_DIGIT	0x08
  ------------------
  419|   670k|      }
  420|  1.71M|      for ( ; ; p++) {
  421|  1.71M|	if (*p == '0') {
  ------------------
  |  Branch (421:6): [True: 1.01M, False: 703k]
  ------------------
  422|  1.01M|	  hasdig = 1;
  423|  1.01M|	} else if (*p == '.') {
  ------------------
  |  Branch (423:13): [True: 20.0k, False: 683k]
  ------------------
  424|  20.0k|	  if (dp) return STRSCAN_ERROR;
  ------------------
  |  Branch (424:8): [True: 2, False: 20.0k]
  ------------------
  425|  20.0k|	  dp = p;
  426|   683k|	} else {
  427|   683k|	  break;
  428|   683k|	}
  429|  1.71M|      }
  430|   683k|    }
  431|       |
  432|       |    /* Preliminary digit and decimal point scan. */
  433|  3.65M|    for (sp = p; ; p++) {
  434|  3.65M|      if (LJ_LIKELY(lj_char_isa(*p, cmask))) {
  ------------------
  |  |  145|  3.65M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 2.31M, False: 1.33M]
  |  |  ------------------
  ------------------
  435|  2.31M|	x = x * 10 + (*p & 15);  /* For fast path below. */
  436|  2.31M|	dig++;
  437|  2.31M|      } else if (*p == '.') {
  ------------------
  |  Branch (437:18): [True: 18.1k, False: 1.31M]
  ------------------
  438|  18.1k|	if (dp) return STRSCAN_ERROR;
  ------------------
  |  Branch (438:6): [True: 15, False: 18.1k]
  ------------------
  439|  18.1k|	dp = p;
  440|  1.31M|      } else {
  441|  1.31M|	break;
  442|  1.31M|      }
  443|  3.65M|    }
  444|  1.31M|    if (!(hasdig | dig)) return STRSCAN_ERROR;
  ------------------
  |  Branch (444:9): [True: 289, False: 1.31M]
  ------------------
  445|       |
  446|       |    /* Handle decimal point. */
  447|  1.31M|    if (dp) {
  ------------------
  |  Branch (447:9): [True: 38.1k, False: 1.27M]
  ------------------
  448|  38.1k|      if (base == 2) return STRSCAN_ERROR;
  ------------------
  |  Branch (448:11): [True: 1, False: 38.1k]
  ------------------
  449|  38.1k|      fmt = STRSCAN_NUM;
  450|  38.1k|      if (dig) {
  ------------------
  |  Branch (450:11): [True: 27.3k, False: 10.7k]
  ------------------
  451|  27.3k|	ex = (int32_t)(dp-(p-1)); dp = p-1;
  452|  64.3k|	while (ex < 0 && *dp-- == '0') ex++, dig--;  /* Skip trailing zeros. */
  ------------------
  |  Branch (452:9): [True: 57.0k, False: 7.36k]
  |  Branch (452:19): [True: 37.0k, False: 20.0k]
  ------------------
  453|  27.3k|	if (ex <= -STRSCAN_MAXEXP) return STRSCAN_ERROR;
  ------------------
  |  |   66|  27.3k|#define STRSCAN_MAXEXP	(1 << 20)
  ------------------
  |  Branch (453:6): [True: 0, False: 27.3k]
  ------------------
  454|  27.3k|	if (base == 16) ex *= 4;
  ------------------
  |  Branch (454:6): [True: 3.39k, False: 23.9k]
  ------------------
  455|  27.3k|      }
  456|  38.1k|    }
  457|       |
  458|       |    /* Parse exponent. */
  459|  1.31M|    if (base >= 10 && casecmp(*p, (uint32_t)(base == 16 ? 'p' : 'e'))) {
  ------------------
  |  |   73|  2.57M|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 71.4k, False: 1.21M]
  |  |  |  Branch (73:40): [True: 14.6k, False: 1.27M]
  |  |  ------------------
  ------------------
  |  Branch (459:9): [True: 1.28M, False: 29.9k]
  ------------------
  460|  71.4k|      uint32_t xx;
  461|  71.4k|      int negx = 0;
  462|  71.4k|      fmt = STRSCAN_NUM; p++;
  463|  71.4k|      if (*p == '+' || *p == '-') negx = (*p++ == '-');
  ------------------
  |  Branch (463:11): [True: 1.41k, False: 70.0k]
  |  Branch (463:24): [True: 49.6k, False: 20.4k]
  ------------------
  464|  71.4k|      if (!lj_char_isdigit(*p)) return STRSCAN_ERROR;
  ------------------
  |  |   28|  71.4k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  71.4k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (464:11): [True: 605, False: 70.8k]
  ------------------
  465|  70.8k|      xx = (*p++ & 15);
  466|   128k|      while (lj_char_isdigit(*p)) {
  467|   128k|	xx = xx * 10 + (*p & 15);
  468|   128k|	if (xx >= STRSCAN_MAXEXP) return STRSCAN_ERROR;
  ------------------
  |  |   66|   128k|#define STRSCAN_MAXEXP	(1 << 20)
  ------------------
  |  Branch (468:6): [True: 14, False: 128k]
  ------------------
  469|   128k|	p++;
  470|   128k|      }
  471|  70.8k|      ex += negx ? (int32_t)(~xx+1u) : (int32_t)xx;
  ------------------
  |  Branch (471:13): [True: 49.4k, False: 21.4k]
  ------------------
  472|  70.8k|    }
  473|       |
  474|       |    /* Parse suffix. */
  475|  1.31M|    if (*p) {
  ------------------
  |  Branch (475:9): [True: 34.7k, False: 1.28M]
  ------------------
  476|       |      /* I (IMAG), U (U32), LL (I64), ULL/LLU (U64), L (long), UL/LU (ulong). */
  477|       |      /* NYI: f (float). Not needed until cp_number() handles non-integers. */
  478|  34.7k|      if (casecmp(*p, 'i')) {
  ------------------
  |  |   73|  34.7k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 18.7k, False: 16.0k]
  |  |  ------------------
  ------------------
  479|  18.7k|	if (!(opt & STRSCAN_OPT_IMAG)) return STRSCAN_ERROR;
  ------------------
  |  |   14|  18.7k|#define STRSCAN_OPT_IMAG	0x04
  ------------------
  |  Branch (479:6): [True: 0, False: 18.7k]
  ------------------
  480|  18.7k|	p++; fmt = STRSCAN_IMAG;
  481|  18.7k|      } else if (fmt == STRSCAN_INT) {
  ------------------
  |  Branch (481:18): [True: 15.6k, False: 435]
  ------------------
  482|  15.6k|	if (casecmp(*p, 'u')) p++, fmt = STRSCAN_U32;
  ------------------
  |  |   73|  15.6k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 2.60k, False: 13.0k]
  |  |  ------------------
  ------------------
  483|  15.6k|	if (casecmp(*p, 'l')) {
  ------------------
  |  |   73|  15.6k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 13.4k, False: 2.20k]
  |  |  ------------------
  ------------------
  484|  13.4k|	  p++;
  485|  13.4k|	  if (casecmp(*p, 'l')) p++, fmt += STRSCAN_I64 - STRSCAN_INT;
  ------------------
  |  |   73|  13.4k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 13.3k, False: 136]
  |  |  ------------------
  ------------------
  486|    136|	  else if (!(opt & STRSCAN_OPT_C)) return STRSCAN_ERROR;
  ------------------
  |  |   16|    136|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (486:13): [True: 136, False: 0]
  ------------------
  487|      0|	  else if (sizeof(long) == 8) fmt += STRSCAN_I64 - STRSCAN_INT;
  ------------------
  |  Branch (487:13): [Folded - Ignored]
  ------------------
  488|  13.4k|	}
  489|  15.5k|	if (casecmp(*p, 'u') && (fmt == STRSCAN_INT || fmt == STRSCAN_I64))
  ------------------
  |  |   73|  31.0k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 2.24k, False: 13.2k]
  |  |  ------------------
  ------------------
  |  Branch (489:27): [True: 0, False: 2.24k]
  |  Branch (489:49): [True: 2.22k, False: 14]
  ------------------
  490|  2.22k|	  p++, fmt += STRSCAN_U32 - STRSCAN_INT;
  491|  15.5k|	if ((fmt == STRSCAN_U32 && !(opt & STRSCAN_OPT_C)) ||
  ------------------
  |  |   16|     32|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (491:7): [True: 32, False: 15.4k]
  |  Branch (491:29): [True: 32, False: 0]
  ------------------
  492|  15.5k|	    (fmt >= STRSCAN_I64 && !(opt & STRSCAN_OPT_LL)))
  ------------------
  |  |   15|  13.3k|#define STRSCAN_OPT_LL		0x08
  ------------------
  |  Branch (492:7): [True: 13.3k, False: 2.16k]
  |  Branch (492:29): [True: 0, False: 13.3k]
  ------------------
  493|     32|	  return STRSCAN_ERROR;
  494|  15.5k|      }
  495|  34.6k|      while (lj_char_isspace(*p)) p++;
  496|  34.6k|      if (*p) return STRSCAN_ERROR;
  ------------------
  |  Branch (496:11): [True: 2.70k, False: 31.9k]
  ------------------
  497|  34.6k|    }
  498|  1.31M|    if (p < pe) return STRSCAN_ERROR;
  ------------------
  |  Branch (498:9): [True: 0, False: 1.31M]
  ------------------
  499|       |
  500|       |    /* Fast path for decimal 32 bit integers. */
  501|  1.31M|    if (fmt == STRSCAN_INT && base == 10 &&
  ------------------
  |  Branch (501:9): [True: 1.17M, False: 137k]
  |  Branch (501:31): [True: 1.15M, False: 22.6k]
  ------------------
  502|  1.31M|	(dig < 10 || (dig == 10 && *sp <= '2' && x < 0x80000000u+neg))) {
  ------------------
  |  Branch (502:3): [True: 1.13M, False: 13.9k]
  |  Branch (502:16): [True: 4.79k, False: 9.17k]
  |  Branch (502:29): [True: 2.86k, False: 1.93k]
  |  Branch (502:43): [True: 2.29k, False: 561]
  ------------------
  503|  1.13M|      if ((opt & STRSCAN_OPT_TONUM)) {
  ------------------
  |  |   13|  1.13M|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (503:11): [True: 1.13M, False: 0]
  ------------------
  504|  1.13M|	o->n = neg ? -(double)x : (double)x;
  ------------------
  |  Branch (504:9): [True: 0, False: 1.13M]
  ------------------
  505|  1.13M|	return STRSCAN_NUM;
  506|  1.13M|      } else if (x == 0 && neg) {
  ------------------
  |  Branch (506:18): [True: 0, False: 0]
  |  Branch (506:28): [True: 0, False: 0]
  ------------------
  507|      0|	o->n = -0.0;
  508|      0|	return STRSCAN_NUM;
  509|      0|      } else {
  510|      0|	o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (510:9): [True: 0, False: 0]
  ------------------
  511|      0|	return STRSCAN_INT;
  512|      0|      }
  513|  1.13M|    }
  514|       |
  515|       |    /* Dispatch to base-specific parser. */
  516|   172k|    if (base == 0 && !(fmt == STRSCAN_NUM || fmt == STRSCAN_IMAG))
  ------------------
  |  Branch (516:9): [True: 0, False: 172k]
  |  Branch (516:24): [True: 0, False: 0]
  |  Branch (516:46): [True: 0, False: 0]
  ------------------
  517|      0|      return strscan_oct(sp, o, fmt, neg, dig);
  518|   172k|    if (base == 16)
  ------------------
  |  Branch (518:9): [True: 14.5k, False: 157k]
  ------------------
  519|  14.5k|      fmt = strscan_hex(sp, o, fmt, opt, ex, neg, dig);
  520|   157k|    else if (base == 2)
  ------------------
  |  Branch (520:14): [True: 29.7k, False: 127k]
  ------------------
  521|  29.7k|      fmt = strscan_bin(sp, o, fmt, opt, ex, neg, dig);
  522|   127k|    else
  523|   127k|      fmt = strscan_dec(sp, o, fmt, opt, ex, neg, dig);
  524|       |
  525|       |    /* Try to convert number to integer, if requested. */
  526|   172k|    if (fmt == STRSCAN_NUM && (opt & STRSCAN_OPT_TOINT) && !tvismzero(o)) {
  ------------------
  |  |   12|   140k|#define STRSCAN_OPT_TOINT	0x01  /* Convert to int32_t, if possible. */
  ------------------
                  if (fmt == STRSCAN_NUM && (opt & STRSCAN_OPT_TOINT) && !tvismzero(o)) {
  ------------------
  |  |  819|      0|#define tvismzero(o)	((o)->u64 == U64x(80000000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (526:9): [True: 140k, False: 31.9k]
  |  Branch (526:31): [True: 0, False: 140k]
  |  Branch (526:60): [True: 0, False: 0]
  ------------------
  527|      0|      double n = o->n;
  528|      0|      int32_t i = lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  529|      0|      if (n == (lua_Number)i) { o->i = i; return STRSCAN_INT; }
  ------------------
  |  Branch (529:11): [True: 0, False: 0]
  ------------------
  530|      0|    }
  531|   172k|    return fmt;
  532|   172k|  }
  533|   172k|}
lj_strscan.c:strscan_hex:
  108|  14.5k|{
  109|  14.5k|  uint64_t x = 0;
  110|  14.5k|  uint32_t i;
  111|       |
  112|       |  /* Scan hex digits. */
  113|  92.9k|  for (i = dig > 16 ? 16 : dig ; i; i--, p++) {
  ------------------
  |  Branch (113:12): [True: 1.58k, False: 12.9k]
  |  Branch (113:34): [True: 78.4k, False: 14.5k]
  ------------------
  114|  78.4k|    uint32_t d = (*p != '.' ? *p : *++p); if (d > '9') d += 9;
  ------------------
  |  Branch (114:19): [True: 78.2k, False: 123]
  |  Branch (114:47): [True: 40.4k, False: 38.0k]
  ------------------
  115|  78.4k|    x = (x << 4) + (d & 15);
  116|  78.4k|  }
  117|       |
  118|       |  /* Summarize rounding-effect of excess digits. */
  119|  58.8k|  for (i = 16; i < dig; i++, p++)
  ------------------
  |  Branch (119:16): [True: 44.3k, False: 14.5k]
  ------------------
  120|  44.3k|    x |= ((*p != '.' ? *p : *++p) != '0'), ex2 += 4;
  ------------------
  |  Branch (120:12): [True: 44.1k, False: 148]
  ------------------
  121|       |
  122|       |  /* Format-specific handling. */
  123|  14.5k|  switch (fmt) {
  124|  6.44k|  case STRSCAN_INT:
  ------------------
  |  Branch (124:3): [True: 6.44k, False: 8.10k]
  ------------------
  125|  6.44k|    if (!(opt & STRSCAN_OPT_TONUM) && x < 0x80000000u+neg &&
  ------------------
  |  |   13|  6.44k|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (125:9): [True: 0, False: 6.44k]
  |  Branch (125:39): [True: 0, False: 0]
  ------------------
  126|  6.44k|	!(x == 0 && neg)) {
  ------------------
  |  Branch (126:4): [True: 0, False: 0]
  |  Branch (126:14): [True: 0, False: 0]
  ------------------
  127|      0|      o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (127:14): [True: 0, False: 0]
  ------------------
  128|      0|      return STRSCAN_INT;  /* Fast path for 32 bit integers. */
  129|      0|    }
  130|  6.44k|    if (!(opt & STRSCAN_OPT_C)) { fmt = STRSCAN_NUM; break; }
  ------------------
  |  |   16|  6.44k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (130:9): [True: 6.44k, False: 0]
  ------------------
  131|       |    /* fallthrough */
  132|      0|  case STRSCAN_U32:
  ------------------
  |  Branch (132:3): [True: 0, False: 14.5k]
  ------------------
  133|      0|    if (dig > 8) return STRSCAN_ERROR;
  ------------------
  |  Branch (133:9): [True: 0, False: 0]
  ------------------
  134|      0|    o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (134:12): [True: 0, False: 0]
  ------------------
  135|      0|    return STRSCAN_U32;
  136|    367|  case STRSCAN_I64:
  ------------------
  |  Branch (136:3): [True: 367, False: 14.1k]
  ------------------
  137|  2.89k|  case STRSCAN_U64:
  ------------------
  |  Branch (137:3): [True: 2.53k, False: 12.0k]
  ------------------
  138|  2.89k|    if (dig > 16) return STRSCAN_ERROR;
  ------------------
  |  Branch (138:9): [True: 1, False: 2.89k]
  ------------------
  139|  2.89k|    o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (139:14): [True: 0, False: 2.89k]
  ------------------
  140|  2.89k|    return fmt;
  141|  5.20k|  default:
  ------------------
  |  Branch (141:3): [True: 5.20k, False: 9.34k]
  ------------------
  142|  5.20k|    break;
  143|  14.5k|  }
  144|       |
  145|       |  /* Reduce range, then convert to double. */
  146|  11.6k|  if ((x & U64x(c0000000,0000000))) { x = (x >> 2) | (x & 3); ex2 += 2; }
  ------------------
  |  |   94|  11.6k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (146:7): [True: 1.33k, False: 10.3k]
  ------------------
  147|  11.6k|  strscan_double(x, o, ex2, neg);
  148|  11.6k|  return fmt;
  149|  14.5k|}
lj_strscan.c:strscan_double:
   77|   107k|{
   78|   107k|  double n;
   79|       |
   80|       |  /* Avoid double rounding for denormals. */
   81|   107k|  if (LJ_UNLIKELY(ex2 <= -1075 && x != 0)) {
  ------------------
  |  |  146|   147k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 40.1k, False: 67.0k]
  |  |  |  Branch (146:44): [True: 40.1k, False: 67.0k]
  |  |  |  Branch (146:44): [True: 40.1k, False: 1]
  |  |  ------------------
  ------------------
   82|       |    /* NYI: all of this generates way too much code on 32 bit CPUs. */
   83|  40.1k|#if (defined(__GNUC__) || defined(__clang__)) && LJ_64
   84|  40.1k|    int32_t b = (int32_t)(__builtin_clzll(x)^63);
   85|       |#else
   86|       |    int32_t b = (x>>32) ? 32+(int32_t)lj_fls((uint32_t)(x>>32)) :
   87|       |			  (int32_t)lj_fls((uint32_t)x);
   88|       |#endif
   89|  40.1k|    if ((int32_t)b + ex2 <= -1023 && (int32_t)b + ex2 >= -1075) {
  ------------------
  |  Branch (89:9): [True: 38.8k, False: 1.37k]
  |  Branch (89:38): [True: 34.4k, False: 4.39k]
  ------------------
   90|  34.4k|      uint64_t rb = (uint64_t)1 << (-1075-ex2);
   91|  34.4k|      if ((x & rb) && ((x & (rb+rb+rb-1)))) x += rb+rb;
  ------------------
  |  Branch (91:11): [True: 15.9k, False: 18.5k]
  |  Branch (91:23): [True: 15.8k, False: 34]
  ------------------
   92|  34.4k|      x = (x & ~(rb+rb-1));
   93|  34.4k|    }
   94|  40.1k|  }
   95|       |
   96|       |  /* Convert to double using a signed int64_t conversion, then rescale. */
   97|   107k|  lj_assertX((int64_t)x >= 0, "bad double conversion");
  ------------------
  |  |  366|   107k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   107k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 107k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   107k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   98|   107k|  n = (double)(int64_t)x;
   99|   107k|  if (neg) n = -n;
  ------------------
  |  Branch (99:7): [True: 0, False: 107k]
  ------------------
  100|   107k|  if (ex2) n = ldexp(n, ex2);
  ------------------
  |  Branch (100:7): [True: 80.0k, False: 27.1k]
  ------------------
  101|   107k|  o->n = n;
  102|   107k|}
lj_strscan.c:strscan_bin:
  335|  29.7k|{
  336|  29.7k|  uint64_t x = 0;
  337|  29.7k|  uint32_t i;
  338|       |
  339|  29.7k|  if (ex2 || dig > 64) return STRSCAN_ERROR;
  ------------------
  |  Branch (339:7): [True: 0, False: 29.7k]
  |  Branch (339:14): [True: 23, False: 29.7k]
  ------------------
  340|       |
  341|       |  /* Scan binary digits. */
  342|   204k|  for (i = dig; i; i--, p++) {
  ------------------
  |  Branch (342:17): [True: 175k, False: 29.6k]
  ------------------
  343|   175k|    if ((*p & ~1) != '0') return STRSCAN_ERROR;
  ------------------
  |  Branch (343:9): [True: 68, False: 175k]
  ------------------
  344|   175k|    x = (x << 1) | (*p & 1);
  345|   175k|  }
  346|       |
  347|       |  /* Format-specific handling. */
  348|  29.6k|  switch (fmt) {
  349|  16.1k|  case STRSCAN_INT:
  ------------------
  |  Branch (349:3): [True: 16.1k, False: 13.5k]
  ------------------
  350|  16.1k|    if (!(opt & STRSCAN_OPT_TONUM) && x < 0x80000000u+neg) {
  ------------------
  |  |   13|  16.1k|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (350:9): [True: 0, False: 16.1k]
  |  Branch (350:39): [True: 0, False: 0]
  ------------------
  351|      0|      o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (351:14): [True: 0, False: 0]
  ------------------
  352|      0|      return STRSCAN_INT;  /* Fast path for 32 bit integers. */
  353|      0|    }
  354|  16.1k|    if (!(opt & STRSCAN_OPT_C)) { fmt = STRSCAN_NUM; break; }
  ------------------
  |  |   16|  16.1k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (354:9): [True: 16.1k, False: 0]
  ------------------
  355|       |    /* fallthrough */
  356|      0|  case STRSCAN_U32:
  ------------------
  |  Branch (356:3): [True: 0, False: 29.6k]
  ------------------
  357|      0|    if (dig > 32) return STRSCAN_ERROR;
  ------------------
  |  Branch (357:9): [True: 0, False: 0]
  ------------------
  358|      0|    o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (358:12): [True: 0, False: 0]
  ------------------
  359|      0|    return STRSCAN_U32;
  360|  7.40k|  case STRSCAN_I64:
  ------------------
  |  Branch (360:3): [True: 7.40k, False: 22.2k]
  ------------------
  361|  8.30k|  case STRSCAN_U64:
  ------------------
  |  Branch (361:3): [True: 894, False: 28.8k]
  ------------------
  362|  8.30k|    o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (362:14): [True: 0, False: 8.30k]
  ------------------
  363|  8.30k|    return fmt;
  364|  5.25k|  default:
  ------------------
  |  Branch (364:3): [True: 5.25k, False: 24.4k]
  ------------------
  365|  5.25k|    break;
  366|  29.6k|  }
  367|       |
  368|       |  /* Reduce range, then convert to double. */
  369|  21.3k|  if ((x & U64x(c0000000,0000000))) { x = (x >> 2) | (x & 3); ex2 += 2; }
  ------------------
  |  |   94|  21.3k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (369:7): [True: 1.11k, False: 20.2k]
  ------------------
  370|  21.3k|  strscan_double(x, o, ex2, neg);
  371|  21.3k|  return fmt;
  372|  29.6k|}
lj_strscan.c:strscan_dec:
  186|   127k|{
  187|   127k|  uint8_t xi[STRSCAN_DDIG], *xip = xi;
  188|       |
  189|   127k|  if (dig) {
  ------------------
  |  Branch (189:7): [True: 115k, False: 11.8k]
  ------------------
  190|   115k|    uint32_t i = dig;
  191|   115k|    if (i > STRSCAN_MAXDIG) {
  ------------------
  |  |   63|   115k|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  |  Branch (191:9): [True: 127, False: 115k]
  ------------------
  192|    127|      ex10 += (int32_t)(i - STRSCAN_MAXDIG);
  ------------------
  |  |   63|    127|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  193|    127|      i = STRSCAN_MAXDIG;
  ------------------
  |  |   63|    127|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  194|    127|    }
  195|       |    /* Scan unaligned leading digit. */
  196|   115k|    if (((ex10^i) & 1))
  ------------------
  |  Branch (196:9): [True: 60.9k, False: 54.9k]
  ------------------
  197|  60.9k|      *xip++ = ((*p != '.' ? *p : *++p) & 15), i--, p++;
  ------------------
  |  Branch (197:18): [True: 60.9k, False: 0]
  ------------------
  198|       |    /* Scan aligned double-digits. */
  199|   434k|    for ( ; i > 1; i -= 2) {
  ------------------
  |  Branch (199:13): [True: 318k, False: 115k]
  ------------------
  200|   318k|      uint32_t d = 10 * ((*p != '.' ? *p : *++p) & 15); p++;
  ------------------
  |  Branch (200:27): [True: 317k, False: 816]
  ------------------
  201|   318k|      *xip++ = d + ((*p != '.' ? *p : *++p) & 15); p++;
  ------------------
  |  Branch (201:22): [True: 317k, False: 1.16k]
  ------------------
  202|   318k|    }
  203|       |    /* Scan and realign trailing digit. */
  204|   115k|    if (i) *xip++ = 10 * ((*p != '.' ? *p : *++p) & 15), ex10--, dig++, p++;
  ------------------
  |  Branch (204:9): [True: 32.1k, False: 83.7k]
  |  Branch (204:28): [True: 23.7k, False: 8.48k]
  ------------------
  205|       |
  206|       |    /* Summarize rounding-effect of excess digits. */
  207|   115k|    if (dig > STRSCAN_MAXDIG) {
  ------------------
  |  |   63|   115k|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  |  Branch (207:9): [True: 128, False: 115k]
  ------------------
  208|  18.6k|      do {
  209|  18.6k|	if ((*p != '.' ? *p : *++p) != '0') { xip[-1] |= 1; break; }
  ------------------
  |  Branch (209:6): [True: 86, False: 18.5k]
  |  Branch (209:7): [True: 18.5k, False: 32]
  ------------------
  210|  18.5k|	p++;
  211|  18.5k|      } while (--dig > STRSCAN_MAXDIG);
  ------------------
  |  |   63|  18.5k|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  |  Branch (211:16): [True: 18.4k, False: 42]
  ------------------
  212|    128|      dig = STRSCAN_MAXDIG;
  ------------------
  |  |   63|    128|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  213|   115k|    } else {  /* Simplify exponent. */
  214|   231k|      while (ex10 > 0 && dig <= 18) *xip++ = 0, ex10 -= 2, dig += 2;
  ------------------
  |  Branch (214:14): [True: 128k, False: 103k]
  |  Branch (214:26): [True: 115k, False: 12.6k]
  ------------------
  215|   115k|    }
  216|   115k|  } else {  /* Only got zeros. */
  217|  11.8k|    ex10 = 0;
  218|  11.8k|    xi[0] = 0;
  219|  11.8k|  }
  220|       |
  221|       |  /* Fast path for numbers in integer format (but handles e.g. 1e6, too). */
  222|   127k|  if (dig <= 20 && ex10 == 0) {
  ------------------
  |  Branch (222:7): [True: 125k, False: 1.89k]
  |  Branch (222:20): [True: 51.1k, False: 74.7k]
  ------------------
  223|  51.1k|    uint8_t *xis;
  224|  51.1k|    uint64_t x = xi[0];
  225|  51.1k|    double n;
  226|   146k|    for (xis = xi+1; xis < xip; xis++) x = x * 100 + *xis;
  ------------------
  |  Branch (226:22): [True: 95.3k, False: 51.1k]
  ------------------
  227|  51.1k|    if (!(dig == 20 && (xi[0] > 18 || (int64_t)x >= 0))) {  /* No overflow? */
  ------------------
  |  Branch (227:11): [True: 3.63k, False: 47.4k]
  |  Branch (227:25): [True: 1.46k, False: 2.16k]
  |  Branch (227:39): [True: 794, False: 1.37k]
  ------------------
  228|       |      /* Format-specific handling. */
  229|  48.8k|      switch (fmt) {
  230|  8.02k|      case STRSCAN_INT:
  ------------------
  |  Branch (230:7): [True: 8.02k, False: 40.8k]
  ------------------
  231|  8.02k|	if (!(opt & STRSCAN_OPT_TONUM) && x < 0x80000000u+neg) {
  ------------------
  |  |   13|  8.02k|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (231:6): [True: 0, False: 8.02k]
  |  Branch (231:36): [True: 0, False: 0]
  ------------------
  232|      0|	  o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (232:11): [True: 0, False: 0]
  ------------------
  233|      0|	  return STRSCAN_INT;  /* Fast path for 32 bit integers. */
  234|      0|	}
  235|  8.02k|	if (!(opt & STRSCAN_OPT_C)) { fmt = STRSCAN_NUM; goto plainnumber; }
  ------------------
  |  |   16|  8.02k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (235:6): [True: 8.02k, False: 0]
  ------------------
  236|       |	/* fallthrough */
  237|      0|      case STRSCAN_U32:
  ------------------
  |  Branch (237:7): [True: 0, False: 48.8k]
  ------------------
  238|      0|	if ((x >> 32) != 0) return STRSCAN_ERROR;
  ------------------
  |  Branch (238:6): [True: 0, False: 0]
  ------------------
  239|      0|	o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (239:9): [True: 0, False: 0]
  ------------------
  240|      0|	return STRSCAN_U32;
  241|    728|      case STRSCAN_I64:
  ------------------
  |  Branch (241:7): [True: 728, False: 48.1k]
  ------------------
  242|  2.06k|      case STRSCAN_U64:
  ------------------
  |  Branch (242:7): [True: 1.33k, False: 47.5k]
  ------------------
  243|  2.06k|	o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (243:11): [True: 0, False: 2.06k]
  ------------------
  244|  2.06k|	return fmt;
  245|  38.7k|      default:
  ------------------
  |  Branch (245:7): [True: 38.7k, False: 10.0k]
  ------------------
  246|  46.7k|      plainnumber:  /* Fast path for plain numbers < 2^63. */
  247|  46.7k|	if ((int64_t)x < 0) break;
  ------------------
  |  Branch (247:6): [True: 1.40k, False: 45.3k]
  ------------------
  248|  45.3k|	n = (double)(int64_t)x;
  249|  45.3k|	if (neg) n = -n;
  ------------------
  |  Branch (249:6): [True: 0, False: 45.3k]
  ------------------
  250|  45.3k|	o->n = n;
  251|  45.3k|	return fmt;
  252|  48.8k|      }
  253|  48.8k|    }
  254|  51.1k|  }
  255|       |
  256|       |  /* Slow non-integer path. */
  257|  80.3k|  if (fmt == STRSCAN_INT) {
  ------------------
  |  Branch (257:7): [True: 3.64k, False: 76.6k]
  ------------------
  258|  3.64k|    if ((opt & STRSCAN_OPT_C)) return STRSCAN_ERROR;
  ------------------
  |  |   16|  3.64k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (258:9): [True: 0, False: 3.64k]
  ------------------
  259|  3.64k|    fmt = STRSCAN_NUM;
  260|  76.6k|  } else if (fmt > STRSCAN_INT) {
  ------------------
  |  Branch (260:14): [True: 1, False: 76.6k]
  ------------------
  261|      1|    return STRSCAN_ERROR;
  262|      1|  }
  263|  80.3k|  {
  264|  80.3k|    uint32_t hi = 0, lo = (uint32_t)(xip-xi);
  265|  80.3k|    int32_t ex2 = 0, idig = (int32_t)lo + (ex10 >> 1);
  266|       |
  267|  80.3k|    lj_assertX(lo > 0 && (ex10 & 1) == 0, "bad lo %d ex10 %d", lo, ex10);
  ------------------
  |  |  366|  80.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   160k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 80.3k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 80.3k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  80.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  268|       |
  269|       |    /* Handle simple overflow/underflow. */
  270|  80.3k|    if (idig > 310/2) { if (neg) setminfV(o); else setpinfV(o); return fmt; }
  ------------------
  |  |  948|      0|#define setminfV(o)		((o)->u64 = U64x(fff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
                  if (idig > 310/2) { if (neg) setminfV(o); else setpinfV(o); return fmt; }
  ------------------
  |  |  947|  1.16k|#define setpinfV(o)		((o)->u64 = U64x(7ff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|  1.16k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (270:9): [True: 1.16k, False: 79.1k]
  |  Branch (270:29): [True: 0, False: 1.16k]
  ------------------
  271|  79.1k|    else if (idig < -326/2) { o->n = neg ? -0.0 : 0.0; return fmt; }
  ------------------
  |  Branch (271:14): [True: 4.97k, False: 74.1k]
  |  Branch (271:38): [True: 0, False: 4.97k]
  ------------------
  272|       |
  273|       |    /* Scale up until we have at least 17 or 18 integer part digits. */
  274|  7.44M|    while (idig < 9 && idig < DLEN(lo, hi)) {
  ------------------
  |  |   71|  7.36M|#define DLEN(lo, hi)	((int32_t)(((lo)-(hi)) & STRSCAN_DMASK))
  |  |  ------------------
  |  |  |  |   65|  7.36M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  7.36M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.36M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (274:12): [True: 7.36M, False: 73.9k]
  |  Branch (274:24): [True: 7.36M, False: 225]
  ------------------
  275|  7.36M|      uint32_t i, cy = 0;
  276|  7.36M|      ex2 -= 6;
  277|   598M|      for (i = DPREV(lo); ; i = DPREV(i)) {
  ------------------
  |  |   70|  7.36M|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  7.36M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  7.36M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.36M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    for (i = DPREV(lo); ; i = DPREV(i)) {
  ------------------
  |  |   70|   591M|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   591M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   591M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   591M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  278|   598M|	uint32_t d = (xi[i] << 6) + cy;
  279|   598M|	cy = (((d >> 2) * 5243) >> 17); d = d - cy * 100;  /* Div/mod 100. */
  280|   598M|	xi[i] = (uint8_t)d;
  281|   598M|	if (i == hi) break;
  ------------------
  |  Branch (281:6): [True: 7.36M, False: 591M]
  ------------------
  282|   591M|	if (d == 0 && i == DPREV(lo)) lo = i;
  ------------------
  |  |   70|  7.66M|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  7.66M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  7.66M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.66M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (282:6): [True: 7.66M, False: 583M]
  |  Branch (282:16): [True: 853, False: 7.66M]
  ------------------
  283|   591M|      }
  284|  7.36M|      if (cy) {
  ------------------
  |  Branch (284:11): [True: 6.65M, False: 714k]
  ------------------
  285|  6.65M|	hi = DPREV(hi);
  ------------------
  |  |   70|  6.65M|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  6.65M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  6.65M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.65M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  286|  6.65M|	if (xi[DPREV(lo)] == 0) lo = DPREV(lo);
  ------------------
  |  |   70|  6.65M|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  6.65M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  6.65M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.65M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	if (xi[DPREV(lo)] == 0) lo = DPREV(lo);
  ------------------
  |  |   70|    593|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|    593|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|    593|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    593|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (286:6): [True: 593, False: 6.65M]
  ------------------
  287|  6.65M|	else if (hi == lo) { lo = DPREV(lo); xi[DPREV(lo)] |= xi[lo]; }
  ------------------
  |  |   70|    234|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|    234|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|    234|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    234|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	else if (hi == lo) { lo = DPREV(lo); xi[DPREV(lo)] |= xi[lo]; }
  ------------------
  |  |   70|    234|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|    234|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|    234|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    234|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (287:11): [True: 234, False: 6.65M]
  ------------------
  288|  6.65M|	xi[hi] = (uint8_t)cy; idig++;
  289|  6.65M|      }
  290|  7.36M|    }
  291|       |
  292|       |    /* Scale down until no more than 17 or 18 integer part digits remain. */
  293|   890k|    while (idig > 9) {
  ------------------
  |  Branch (293:12): [True: 816k, False: 74.1k]
  ------------------
  294|   816k|      uint32_t i = hi, cy = 0;
  295|   816k|      ex2 += 6;
  296|   123M|      do {
  297|   123M|	cy += xi[i];
  298|   123M|	xi[i] = (cy >> 6);
  299|   123M|	cy = 100 * (cy & 0x3f);
  300|   123M|	if (xi[i] == 0 && i == hi) hi = DNEXT(hi), idig--;
  ------------------
  |  |   69|   740k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   740k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   740k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   740k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (300:6): [True: 2.37M, False: 121M]
  |  Branch (300:20): [True: 740k, False: 1.63M]
  ------------------
  301|   123M|	i = DNEXT(i);
  ------------------
  |  |   69|   123M|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   123M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   123M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   123M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  302|   123M|      } while (i != lo);
  ------------------
  |  Branch (302:16): [True: 122M, False: 816k]
  ------------------
  303|  3.16M|      while (cy) {
  ------------------
  |  Branch (303:14): [True: 2.34M, False: 815k]
  ------------------
  304|  2.34M|	if (hi == lo) { xi[DPREV(lo)] |= 1; break; }
  ------------------
  |  |   70|    806|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|    806|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|    806|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    806|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (304:6): [True: 806, False: 2.34M]
  ------------------
  305|  2.34M|	xi[lo] = (cy >> 6); lo = DNEXT(lo);
  ------------------
  |  |   69|  2.34M|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  2.34M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  2.34M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.34M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  306|  2.34M|	cy = 100 * (cy & 0x3f);
  307|  2.34M|      }
  308|   816k|    }
  309|       |
  310|       |    /* Collect integer part digits and convert to rescaled double. */
  311|  74.1k|    {
  312|  74.1k|      uint64_t x = xi[hi];
  313|  74.1k|      uint32_t i;
  314|   660k|      for (i = DNEXT(hi); --idig > 0 && i != lo; i = DNEXT(i))
  ------------------
  |  |   69|  74.1k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  74.1k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  74.1k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  74.1k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    for (i = DNEXT(hi); --idig > 0 && i != lo; i = DNEXT(i))
  ------------------
  |  |   69|   586k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   586k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   586k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   586k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (314:27): [True: 591k, False: 69.2k]
  |  Branch (314:41): [True: 586k, False: 4.95k]
  ------------------
  315|   586k|	x = x * 100 + xi[i];
  316|  74.1k|      if (i == lo) {
  ------------------
  |  Branch (316:11): [True: 5.22k, False: 68.9k]
  ------------------
  317|  10.8k|	while (--idig >= 0) x = x * 100;
  ------------------
  |  Branch (317:9): [True: 5.65k, False: 5.22k]
  ------------------
  318|  68.9k|      } else {  /* Gather round bit from remaining digits. */
  319|  68.9k|	x <<= 1; ex2--;
  320|  74.9k|	do {
  321|  74.9k|	  if (xi[i]) { x |= 1; break; }
  ------------------
  |  Branch (321:8): [True: 68.7k, False: 6.19k]
  ------------------
  322|  6.19k|	  i = DNEXT(i);
  ------------------
  |  |   69|  6.19k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  6.19k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  6.19k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.19k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  323|  6.19k|	} while (i != lo);
  ------------------
  |  Branch (323:11): [True: 6.00k, False: 189]
  ------------------
  324|  68.9k|      }
  325|      0|      strscan_double(x, o, ex2, neg);
  326|  74.1k|    }
  327|  74.1k|  }
  328|      0|  return fmt;
  329|  80.3k|}

lj_tab_new:
  140|   560k|{
  141|   560k|  GCtab *t = newtab(L, asize, hbits);
  142|   560k|  clearapart(t);
  143|   560k|  if (t->hmask > 0) clearhpart(t);
  ------------------
  |  Branch (143:7): [True: 231k, False: 329k]
  ------------------
  144|   560k|  return t;
  145|   560k|}
lj_tab_new_ah:
  149|  68.4k|{
  150|  68.4k|  return lj_tab_new(L, (uint32_t)(a > 0 ? a+1 : 0), hsize2hbits(h));
  ------------------
  |  |   53|  68.4k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|  68.4k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 68.4k, False: 0]
  |  |  |  Branch (53:32): [True: 0, False: 68.4k]
  |  |  ------------------
  ------------------
  |  Branch (150:35): [True: 0, False: 68.4k]
  ------------------
  151|  68.4k|}
lj_tab_free:
  216|   560k|{
  217|   560k|  if (t->hmask > 0)
  ------------------
  |  Branch (217:7): [True: 324k, False: 236k]
  ------------------
  218|   324k|    lj_mem_freevec(g, noderef(t->node), t->hmask+1, Node);
  ------------------
  |  |  130|   324k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  219|   560k|  if (t->asize > 0 && LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|   266k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (219:7): [True: 266k, False: 294k]
  |  Branch (219:23): [Folded - Ignored]
  |  Branch (219:47): [True: 211k, False: 55.7k]
  ------------------
  220|   211k|    lj_mem_freevec(g, tvref(t->array), t->asize, TValue);
  ------------------
  |  |  130|   211k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  221|   560k|  if (LJ_MAX_COLOSIZE != 0 && t->colo)
  ------------------
  |  |   62|   560k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (221:7): [Folded - Ignored]
  |  Branch (221:31): [True: 239k, False: 320k]
  ------------------
  222|   239k|    lj_mem_free(g, t, sizetabcolo((uint32_t)t->colo & 0x7f));
  ------------------
  |  |  513|   239k|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
  223|   320k|  else
  224|   320k|    lj_mem_freet(g, t);
  ------------------
  |  |  134|   320k|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  225|   560k|}
lj_tab_resize:
  231|   611k|{
  232|   611k|  Node *oldnode = noderef(t->node);
  ------------------
  |  |  515|   611k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   611k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  233|   611k|  uint32_t oldasize = t->asize;
  234|   611k|  uint32_t oldhmask = t->hmask;
  235|   611k|  if (asize > oldasize) {  /* Array part grows? */
  ------------------
  |  Branch (235:7): [True: 310k, False: 301k]
  ------------------
  236|   310k|    TValue *array;
  237|   310k|    uint32_t i;
  238|   310k|    if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|   310k|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|   310k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (238:9): [True: 0, False: 310k]
  ------------------
  239|      0|      lj_err_msg(L, LJ_ERR_TABOV);
  240|   310k|    if (LJ_MAX_COLOSIZE != 0 && t->colo > 0) {
  ------------------
  |  |   62|   310k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (240:9): [Folded - Ignored]
  |  Branch (240:33): [True: 180k, False: 129k]
  ------------------
  241|       |      /* A colocated array must be separated and copied. */
  242|   180k|      TValue *oarray = tvref(t->array);
  ------------------
  |  |  217|   180k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   180k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  243|   180k|      array = lj_mem_newvec(L, asize, TValue);
  ------------------
  |  |  125|   180k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|   180k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  244|   180k|      t->colo = (int8_t)(t->colo | 0x80);  /* Mark as separated (colo < 0). */
  245|   554k|      for (i = 0; i < oldasize; i++)
  ------------------
  |  Branch (245:19): [True: 373k, False: 180k]
  ------------------
  246|   373k|	copyTV(L, &array[i], &oarray[i]);
  247|   180k|    } else {
  248|   129k|      array = (TValue *)lj_mem_realloc(L, tvref(t->array),
  ------------------
  |  |  217|   129k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   129k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  249|   129k|			  oldasize*sizeof(TValue), asize*sizeof(TValue));
  250|   129k|    }
  251|   310k|    setmref(t->array, array);
  ------------------
  |  |   39|   310k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  252|   310k|    t->asize = asize;
  253|   967k|    for (i = oldasize; i < asize; i++)  /* Clear newly allocated slots. */
  ------------------
  |  Branch (253:24): [True: 656k, False: 310k]
  ------------------
  254|   656k|      setnilV(&array[i]);
  ------------------
  |  |  872|   967k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  255|   310k|  }
  256|       |  /* Create new (empty) hash part. */
  257|   611k|  if (hbits) {
  ------------------
  |  Branch (257:7): [True: 344k, False: 266k]
  ------------------
  258|   344k|    newhpart(L, t, hbits);
  259|   344k|    clearhpart(t);
  260|   344k|  } else {
  261|   266k|    global_State *g = G(L);
  ------------------
  |  |  705|   266k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   266k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  262|   266k|    setmref(t->node, &g->nilnode);
  ------------------
  |  |   39|   266k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  263|   266k|#if LJ_GC64
  264|   266k|    setmref(t->freetop, &g->nilnode);
  ------------------
  |  |   39|   266k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  265|   266k|#endif
  266|   266k|    t->hmask = 0;
  267|   266k|  }
  268|   611k|  if (asize < oldasize) {  /* Array part shrinks? */
  ------------------
  |  Branch (268:7): [True: 5.85k, False: 605k]
  ------------------
  269|  5.85k|    TValue *array = tvref(t->array);
  ------------------
  |  |  217|  5.85k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  5.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  270|  5.85k|    uint32_t i;
  271|  5.85k|    t->asize = asize;  /* Note: This 'shrinks' even colocated arrays. */
  272|  87.5k|    for (i = asize; i < oldasize; i++)  /* Reinsert old array values. */
  ------------------
  |  Branch (272:21): [True: 81.6k, False: 5.85k]
  ------------------
  273|  81.6k|      if (!tvisnil(&array[i]))
  ------------------
  |  |  782|  81.6k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (273:11): [True: 5.36k, False: 76.3k]
  ------------------
  274|  5.36k|	copyTV(L, lj_tab_setinth(L, t, (int32_t)i), &array[i]);
  275|       |    /* Physically shrink only separated arrays. */
  276|  5.85k|    if (LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|  5.85k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (276:9): [Folded - Ignored]
  |  Branch (276:33): [True: 650, False: 5.20k]
  ------------------
  277|    650|      setmref(t->array, lj_mem_realloc(L, array,
  ------------------
  |  |   39|    650|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  278|  5.85k|	      oldasize*sizeof(TValue), asize*sizeof(TValue)));
  279|  5.85k|  }
  280|   611k|  if (oldhmask > 0) {  /* Reinsert pairs from old hash part. */
  ------------------
  |  Branch (280:7): [True: 252k, False: 359k]
  ------------------
  281|   252k|    global_State *g;
  282|   252k|    uint32_t i;
  283|  2.56M|    for (i = 0; i <= oldhmask; i++) {
  ------------------
  |  Branch (283:17): [True: 2.31M, False: 252k]
  ------------------
  284|  2.31M|      Node *n = &oldnode[i];
  285|  2.31M|      if (!tvisnil(&n->val))
  ------------------
  |  |  782|  2.31M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (285:11): [True: 2.30M, False: 7.75k]
  ------------------
  286|  2.30M|	copyTV(L, lj_tab_set(L, t, &n->key), &n->val);
  287|  2.31M|    }
  288|   252k|    g = G(L);
  ------------------
  |  |  705|   252k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   252k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|   252k|    lj_mem_freevec(g, oldnode, oldhmask+1, Node);
  ------------------
  |  |  130|   252k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  290|   252k|  }
  291|   611k|}
lj_tab_reasize:
  378|   125k|{
  379|   125k|  lj_tab_resize(L, t, nasize+1, t->hmask > 0 ? lj_fls(t->hmask)+1 : 0);
  ------------------
  |  |  149|  5.72k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (379:33): [True: 5.72k, False: 119k]
  ------------------
  380|   125k|}
lj_tab_getstr:
  398|   271k|{
  399|   271k|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|   271k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  400|   292k|  do {
  401|   386k|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  795|   585k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   292k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   292k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 193k, False: 99.7k]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  859|   193k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   193k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   193k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   193k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 193k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   193k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (401:29): [True: 168k, False: 24.2k]
  ------------------
  402|   168k|      return &n->val;
  403|   292k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|   124k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   124k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (403:12): [True: 21.2k, False: 102k]
  ------------------
  404|   102k|  return NULL;
  405|   271k|}
lj_tab_get:
  408|  92.0k|{
  409|  92.0k|  if (tvisstr(key)) {
  ------------------
  |  |  795|  92.0k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  92.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  92.0k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 92.0k, False: 0]
  |  |  ------------------
  ------------------
  410|  92.0k|    cTValue *tv = lj_tab_getstr(t, strV(key));
  ------------------
  |  |  859|  92.0k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  92.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  92.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  92.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 92.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  92.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  411|  92.0k|    if (tv)
  ------------------
  |  Branch (411:9): [True: 0, False: 92.0k]
  ------------------
  412|      0|      return tv;
  413|  92.0k|  } else if (tvisint(key)) {
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  414|      0|    cTValue *tv = lj_tab_getint(t, intV(key));
  ------------------
  |  |   85|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   82|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (82:35): [Folded - Ignored]
  |  |  |  |  |  Branch (82:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (83:47): [Folded - Ignored]
  |  |  |  |  |  Branch (83:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (85:71): [Folded - Ignored]
  |  |  |  Branch (85:71): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  415|      0|    if (tv)
  ------------------
  |  Branch (415:9): [True: 0, False: 0]
  ------------------
  416|      0|      return tv;
  417|      0|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|      0|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  418|      0|    lua_Number nk = numV(key);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  419|      0|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  420|      0|    if (nk == (lua_Number)k) {
  ------------------
  |  Branch (420:9): [True: 0, False: 0]
  ------------------
  421|      0|      cTValue *tv = lj_tab_getint(t, k);
  ------------------
  |  |   85|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   82|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  422|      0|      if (tv)
  ------------------
  |  Branch (422:11): [True: 0, False: 0]
  ------------------
  423|      0|	return tv;
  424|      0|    } else {
  425|      0|      goto genlookup;  /* Else use the generic lookup. */
  426|      0|    }
  427|      0|  } else if (!tvisnil(key)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (427:14): [True: 0, False: 0]
  ------------------
  428|      0|    Node *n;
  429|      0|  genlookup:
  430|      0|    n = hashkey(t, key);
  431|      0|    do {
  432|      0|      if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (432:11): [True: 0, False: 0]
  ------------------
  433|      0|	return &n->val;
  434|      0|    } while ((n = nextnode(n)));
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (434:14): [True: 0, False: 0]
  ------------------
  435|      0|  }
  436|  92.0k|  return niltv(L);
  ------------------
  |  |  667|  92.0k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  92.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  92.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  92.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 92.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  92.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  437|  92.0k|}
lj_tab_newkey:
  443|  4.61M|{
  444|  4.61M|  Node *n = hashkey(t, key);
  445|  4.61M|  if (!tvisnil(&n->val) || t->hmask == 0) {
  ------------------
  |  |  782|  9.22M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (445:7): [True: 1.60M, False: 3.00M]
  |  Branch (445:28): [True: 239k, False: 2.76M]
  ------------------
  446|  1.84M|    Node *nodebase = noderef(t->node);
  ------------------
  |  |  515|  1.84M|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  1.84M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  447|  1.84M|    Node *collide, *freenode = getfreetop(t, nodebase);
  ------------------
  |  |  518|  1.84M|#define getfreetop(t, n)	(noderef((t)->freetop))
  |  |  ------------------
  |  |  |  |  515|  1.84M|#define noderef(r)	(mref((r), Node))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.84M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  448|  1.84M|    lj_assertL(freenode >= nodebase && freenode <= nodebase+t->hmask+1,
  ------------------
  |  |  365|  1.84M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.69M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 1.84M, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1.84M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.84M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  449|  1.84M|	       "bad freenode");
  450|  3.53M|    do {
  451|  3.53M|      if (freenode == nodebase) {  /* No free node found? */
  ------------------
  |  Branch (451:11): [True: 486k, False: 3.05M]
  ------------------
  452|   486k|	rehashtab(L, t, key);  /* Rehash table. */
  453|   486k|	return lj_tab_set(L, t, key);  /* Retry key insertion. */
  454|   486k|      }
  455|  3.53M|    } while (!tvisnil(&(--freenode)->key));
  ------------------
  |  |  782|  3.05M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (455:14): [True: 1.69M, False: 1.35M]
  ------------------
  456|  1.35M|    setfreetop(t, nodebase, freenode);
  ------------------
  |  |  519|  1.35M|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|  1.35M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  457|  1.35M|    lj_assertL(freenode != &G(L)->nilnode, "store to fallback hash");
  ------------------
  |  |  365|  1.35M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.35M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.35M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.35M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  458|  1.35M|    collide = hashkey(t, &n->key);
  459|  1.35M|    if (collide != n) {  /* Colliding node not the main node? */
  ------------------
  |  Branch (459:9): [True: 254k, False: 1.10M]
  ------------------
  460|   383k|      while (noderef(collide->next) != n)  /* Find predecessor. */
  ------------------
  |  |  515|   383k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   383k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (460:14): [True: 128k, False: 254k]
  ------------------
  461|   128k|	collide = nextnode(collide);
  ------------------
  |  |  516|   128k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   128k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  462|   254k|      setmref(collide->next, freenode);  /* Relink chain. */
  ------------------
  |  |   39|   254k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  463|       |      /* Copy colliding node into free node and free main node. */
  464|   254k|      freenode->val = n->val;
  465|   254k|      freenode->key = n->key;
  466|   254k|      freenode->next = n->next;
  467|   254k|      setmref(n->next, NULL);
  ------------------
  |  |   39|   254k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  468|   254k|      setnilV(&n->val);
  ------------------
  |  |  872|   254k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  469|       |      /* Rechain pseudo-resurrected string keys with colliding hashes. */
  470|   363k|      while (nextnode(freenode)) {
  ------------------
  |  |  516|   363k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   363k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (516:21): [True: 109k, False: 254k]
  |  |  ------------------
  ------------------
  471|   109k|	Node *nn = nextnode(freenode);
  ------------------
  |  |  516|   109k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   109k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  472|   109k|	if (!tvisnil(&nn->val) && hashkey(t, &nn->key) == n) {
  ------------------
  |  |  782|   218k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (472:6): [True: 109k, False: 0]
  |  Branch (472:28): [True: 0, False: 109k]
  ------------------
  473|      0|	  freenode->next = nn->next;
  474|      0|	  nn->next = n->next;
  475|      0|	  setmref(n->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  476|       |	  /*
  477|       |	  ** Rechaining a resurrected string key creates a new dilemma:
  478|       |	  ** Another string key may have originally been resurrected via
  479|       |	  ** _any_ of the previous nodes as a chain anchor. Including
  480|       |	  ** a node that had to be moved, which makes them unreachable.
  481|       |	  ** It's not feasible to check for all previous nodes, so rechain
  482|       |	  ** any string key that's currently in a non-main positions.
  483|       |	  */
  484|      0|	  while ((nn = nextnode(freenode))) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (484:11): [True: 0, False: 0]
  ------------------
  485|      0|	    if (!tvisnil(&nn->val)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (485:10): [True: 0, False: 0]
  ------------------
  486|      0|	      Node *mn = hashkey(t, &nn->key);
  487|      0|	      if (mn != freenode && mn != nn) {
  ------------------
  |  Branch (487:12): [True: 0, False: 0]
  |  Branch (487:30): [True: 0, False: 0]
  ------------------
  488|      0|		freenode->next = nn->next;
  489|      0|		nn->next = mn->next;
  490|      0|		setmref(mn->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  491|      0|	      } else {
  492|      0|		freenode = nn;
  493|      0|	      }
  494|      0|	    } else {
  495|      0|	      freenode = nn;
  496|      0|	    }
  497|      0|	  }
  498|      0|	  break;
  499|   109k|	} else {
  500|   109k|	  freenode = nn;
  501|   109k|	}
  502|   109k|      }
  503|  1.10M|    } else {  /* Otherwise use free node. */
  504|  1.10M|      setmrefr(freenode->next, n->next);  /* Insert into chain. */
  ------------------
  |  |   41|  1.10M|#define setmrefr(r, v)	((r).ptr64 = (v).ptr64)
  ------------------
  505|  1.10M|      setmref(n->next, freenode);
  ------------------
  |  |   39|  1.10M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  506|  1.10M|      n = freenode;
  507|  1.10M|    }
  508|  1.35M|  }
  509|  4.12M|  n->key.u64 = key->u64;
  510|  4.12M|  if (LJ_UNLIKELY(tvismzero(&n->key)))
  ------------------
  |  |  146|  4.12M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 4.12M]
  |  |  ------------------
  ------------------
  511|      0|    n->key.u64 = 0;
  512|  4.12M|  lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|  4.12M|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  4.12M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 3.49k, False: 4.12M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|  3.49k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  3.49k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  513|  4.12M|  lj_assertL(tvisnil(&n->val), "new hash slot is not empty");
  ------------------
  |  |  365|  4.12M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.12M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.12M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.12M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  514|  4.12M|  return &n->val;
  515|  4.12M|}
lj_tab_setinth:
  518|   527k|{
  519|   527k|  TValue k;
  520|   527k|  Node *n;
  521|   527k|  k.n = (lua_Number)key;
  522|   527k|  n = hashnum(t, &k);
  ------------------
  |  |   45|   527k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|   527k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  523|   586k|  do {
  524|   586k|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  804|  1.17M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   586k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   586k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   586k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 127k, False: 458k]
  |  |  ------------------
  ------------------
  |  Branch (524:29): [True: 53.8k, False: 74.1k]
  ------------------
  525|  53.8k|      return &n->val;
  526|   586k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|   532k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   532k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (526:12): [True: 59.5k, False: 473k]
  ------------------
  527|   473k|  return lj_tab_newkey(L, t, &k);
  528|   527k|}
lj_tab_setstr:
  531|  7.17M|{
  532|  7.17M|  TValue k;
  533|  7.17M|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|  7.17M|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  534|  8.02M|  do {
  535|  10.0M|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  795|  16.0M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  8.02M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  8.02M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 5.03M, False: 2.99M]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  859|  5.03M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  5.03M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  5.03M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  5.03M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5.03M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  5.03M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (535:29): [True: 3.96M, False: 1.06M]
  ------------------
  536|  3.96M|      return &n->val;
  537|  8.02M|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  4.05M|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  4.05M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (537:12): [True: 850k, False: 3.20M]
  ------------------
  538|  3.20M|  setstrV(L, &k, key);
  539|  3.20M|  return lj_tab_newkey(L, t, &k);
  540|  7.17M|}
lj_tab_set:
  543|  6.05M|{
  544|  6.05M|  Node *n;
  545|  6.05M|  t->nomm = 0;  /* Invalidate negative metamethod cache. */
  546|  6.05M|  if (tvisstr(key)) {
  ------------------
  |  |  795|  6.05M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  6.05M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  6.05M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 3.93M, False: 2.12M]
  |  |  ------------------
  ------------------
  547|  3.93M|    return lj_tab_setstr(L, t, strV(key));
  ------------------
  |  |  859|  3.93M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  3.93M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.93M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.93M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.93M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.93M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  548|  3.93M|  } else if (tvisint(key)) {
  ------------------
  |  |  803|  2.12M|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  4.24M|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  549|      0|    return lj_tab_setint(L, t, intV(key));
  ------------------
  |  |   87|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   82|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (82:35): [Folded - Ignored]
  |  |  |  |  |  Branch (82:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (83:47): [Folded - Ignored]
  |  |  |  |  |  Branch (83:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (87:74): [Folded - Ignored]
  |  |  |  Branch (87:74): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  550|  2.12M|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|  2.12M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  2.12M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  2.12M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  2.12M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 1.31M, False: 805k]
  |  |  ------------------
  ------------------
  551|  1.31M|    lua_Number nk = numV(key);
  ------------------
  |  |  866|  1.31M|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  1.31M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.31M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.31M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.31M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.31M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  552|  1.31M|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|  1.31M|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  553|  1.31M|    if (nk == (lua_Number)k)
  ------------------
  |  Branch (553:9): [True: 1.08M, False: 231k]
  ------------------
  554|  1.08M|      return lj_tab_setint(L, t, k);
  ------------------
  |  |   87|  1.08M|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   82|  1.08M|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 608k, False: 475k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   83|   608k|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|   608k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|   608k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  555|   231k|    if (tvisnan(key))
  ------------------
  |  |  812|   231k|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 0, False: 231k]
  |  |  ------------------
  ------------------
  556|      0|      lj_err_msg(L, LJ_ERR_NANIDX);
  557|       |    /* Else use the generic lookup. */
  558|   805k|  } else if (tvisnil(key)) {
  ------------------
  |  |  782|   805k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 805k]
  |  |  ------------------
  ------------------
  559|      0|    lj_err_msg(L, LJ_ERR_NILIDX);
  560|      0|  }
  561|  1.03M|  n = hashkey(t, key);
  562|  2.11M|  do {
  563|  2.11M|    if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (563:9): [True: 152k, False: 1.96M]
  ------------------
  564|   152k|      return &n->val;
  565|  2.11M|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  1.96M|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  1.96M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (565:12): [True: 1.07M, False: 884k]
  ------------------
  566|   884k|  return lj_tab_newkey(L, t, key);
  567|  1.03M|}
lj_tab.c:newtab:
   82|   560k|{
   83|   560k|  GCtab *t;
   84|       |  /* First try to colocate the array part. */
   85|   560k|  if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|   560k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
                if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|   240k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (85:7): [Folded - Ignored]
  |  Branch (85:31): [True: 240k, False: 319k]
  |  Branch (85:44): [True: 239k, False: 952]
  ------------------
   86|   239k|    Node *nilnode;
   87|   239k|    lj_assertL((sizeof(GCtab) & 7) == 0, "bad GCtab size");
  ------------------
  |  |  365|   239k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   239k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|   239k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   88|   239k|    t = (GCtab *)lj_mem_newgco(L, sizetabcolo(asize));
  ------------------
  |  |  513|   239k|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
   89|   239k|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|   239k|#define LJ_TTAB			(~11u)
  ------------------
   90|   239k|    t->nomm = (uint8_t)~0;
   91|   239k|    t->colo = (int8_t)asize;
   92|   239k|    setmref(t->array, (TValue *)((char *)t + sizeof(GCtab)));
  ------------------
  |  |   39|   239k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   93|   239k|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|   239k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   94|   239k|    t->asize = asize;
   95|   239k|    t->hmask = 0;
   96|   239k|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  705|   239k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   239k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   97|   239k|    setmref(t->node, nilnode);
  ------------------
  |  |   39|   239k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   98|   239k|#if LJ_GC64
   99|   239k|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|   239k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  100|   239k|#endif
  101|   320k|  } else {  /* Otherwise separately allocate the array part. */
  102|   320k|    Node *nilnode;
  103|   320k|    t = lj_mem_newobj(L, GCtab);
  ------------------
  |  |  132|   320k|#define lj_mem_newobj(L, t)	((t *)lj_mem_newgco(L, sizeof(t)))
  ------------------
  104|   320k|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|   320k|#define LJ_TTAB			(~11u)
  ------------------
  105|   320k|    t->nomm = (uint8_t)~0;
  106|   320k|    t->colo = 0;
  107|   320k|    setmref(t->array, NULL);
  ------------------
  |  |   39|   320k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|   320k|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|   320k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  109|   320k|    t->asize = 0;  /* In case the array allocation fails. */
  110|   320k|    t->hmask = 0;
  111|   320k|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  705|   320k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   320k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  112|   320k|    setmref(t->node, nilnode);
  ------------------
  |  |   39|   320k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  113|   320k|#if LJ_GC64
  114|   320k|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|   320k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  115|   320k|#endif
  116|   320k|    if (asize > 0) {
  ------------------
  |  Branch (116:9): [True: 952, False: 319k]
  ------------------
  117|    952|      if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|    952|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|    952|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (117:11): [True: 0, False: 952]
  ------------------
  118|      0|	lj_err_msg(L, LJ_ERR_TABOV);
  119|    952|      setmref(t->array, lj_mem_newvec(L, asize, TValue));
  ------------------
  |  |   39|    952|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  120|    952|      t->asize = asize;
  121|    952|    }
  122|   320k|  }
  123|   560k|  if (hbits)
  ------------------
  |  Branch (123:7): [True: 231k, False: 329k]
  ------------------
  124|   231k|    newhpart(L, t, hbits);
  125|   560k|  return t;
  126|   560k|}
lj_tab.c:clearapart:
   73|   560k|{
   74|   560k|  uint32_t i, asize = t->asize;
   75|   560k|  TValue *array = tvref(t->array);
  ------------------
  |  |  217|   560k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   560k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   76|  1.15M|  for (i = 0; i < asize; i++)
  ------------------
  |  Branch (76:15): [True: 592k, False: 560k]
  ------------------
   77|   592k|    setnilV(&array[i]);
  ------------------
  |  |  872|   592k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   78|   560k|}
lj_tab.c:clearhpart:
   59|   576k|{
   60|   576k|  uint32_t i, hmask = t->hmask;
   61|   576k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|   576k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   576k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   62|   576k|  lj_assertX(t->hmask != 0, "empty hash part");
  ------------------
  |  |  366|   576k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   576k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 576k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   576k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|  8.80M|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (63:15): [True: 8.22M, False: 576k]
  ------------------
   64|  8.22M|    Node *n = &node[i];
   65|  8.22M|    setmref(n->next, NULL);
  ------------------
  |  |   39|  8.22M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   66|  8.22M|    setnilV(&n->key);
  ------------------
  |  |  872|  8.22M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   67|  8.22M|    setnilV(&n->val);
  ------------------
  |  |  872|  8.22M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   68|  8.22M|  }
   69|   576k|}
lj_tab.c:newhpart:
   38|   576k|{
   39|   576k|  uint32_t hsize;
   40|   576k|  Node *node;
   41|   576k|  lj_assertL(hbits != 0, "zero hash size");
  ------------------
  |  |  365|   576k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   576k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 576k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   576k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   42|   576k|  if (hbits > LJ_MAX_HBITS)
  ------------------
  |  |   59|   576k|#define LJ_MAX_HBITS	26		/* Max. hash bits. */
  ------------------
  |  Branch (42:7): [True: 0, False: 576k]
  ------------------
   43|      0|    lj_err_msg(L, LJ_ERR_TABOV);
   44|   576k|  hsize = 1u << hbits;
   45|   576k|  node = lj_mem_newvec(L, hsize, Node);
  ------------------
  |  |  125|   576k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|   576k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   46|   576k|  setmref(t->node, node);
  ------------------
  |  |   39|   576k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   47|   576k|  setfreetop(t, node, &node[hsize]);
  ------------------
  |  |  519|   576k|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|   576k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   48|   576k|  t->hmask = hsize-1;
   49|   576k|}
lj_tab.c:rehashtab:
  357|   486k|{
  358|   486k|  uint32_t bins[LJ_MAX_ABITS];
  359|   486k|  uint32_t total, asize, na, i;
  360|  14.0M|  for (i = 0; i < LJ_MAX_ABITS; i++) bins[i] = 0;
  ------------------
  |  |   60|  14.0M|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  ------------------
  |  Branch (360:15): [True: 13.6M, False: 486k]
  ------------------
  361|   486k|  asize = countarray(t, bins);
  362|   486k|  total = 1 + asize;
  363|   486k|  total += counthash(t, bins, &asize);
  364|   486k|  asize += countint(ek, bins);
  365|   486k|  na = bestasize(bins, &asize);
  366|   486k|  total -= na;
  367|   486k|  lj_tab_resize(L, t, asize, hsize2hbits(total));
  ------------------
  |  |   53|   486k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|   243k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 338k, False: 147k]
  |  |  |  Branch (53:32): [True: 95.0k, False: 243k]
  |  |  ------------------
  ------------------
  368|   486k|}
lj_tab.c:countarray:
  308|   486k|{
  309|   486k|  uint32_t na, b, i;
  310|   486k|  if (t->asize == 0) return 0;
  ------------------
  |  Branch (310:7): [True: 270k, False: 215k]
  ------------------
  311|   473k|  for (na = i = b = 0; b < LJ_MAX_ABITS; b++) {
  ------------------
  |  |   60|   473k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  ------------------
  |  Branch (311:24): [True: 473k, False: 0]
  ------------------
  312|   473k|    uint32_t n, top = 2u << b;
  313|   473k|    TValue *array;
  314|   473k|    if (top >= t->asize) {
  ------------------
  |  Branch (314:9): [True: 336k, False: 137k]
  ------------------
  315|   336k|      top = t->asize-1;
  316|   336k|      if (i > top)
  ------------------
  |  Branch (316:11): [True: 215k, False: 120k]
  ------------------
  317|   215k|	break;
  318|   336k|    }
  319|   258k|    array = tvref(t->array);
  ------------------
  |  |  217|   258k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   258k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  320|  1.04M|    for (n = 0; i <= top; i++)
  ------------------
  |  Branch (320:17): [True: 788k, False: 258k]
  ------------------
  321|   788k|      if (!tvisnil(&array[i]))
  ------------------
  |  |  782|   788k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (321:11): [True: 351k, False: 437k]
  ------------------
  322|   351k|	n++;
  323|   258k|    bins[b] += n;
  324|   258k|    na += n;
  325|   258k|  }
  326|   215k|  return na;
  327|   486k|}
lj_tab.c:counthash:
  330|   486k|{
  331|   486k|  uint32_t total, na, i, hmask = t->hmask;
  332|   486k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|   486k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   486k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  333|  3.01M|  for (total = na = 0, i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (333:31): [True: 2.52M, False: 486k]
  ------------------
  334|  2.52M|    Node *n = &node[i];
  335|  2.52M|    if (!tvisnil(&n->val)) {
  ------------------
  |  |  782|  2.52M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (335:9): [True: 2.28M, False: 239k]
  ------------------
  336|  2.28M|      na += countint(&n->key, bins);
  337|  2.28M|      total++;
  338|  2.28M|    }
  339|  2.52M|  }
  340|   486k|  *narray += na;
  341|   486k|  return total;
  342|   486k|}
lj_tab.c:countint:
  294|  2.77M|{
  295|  2.77M|  lj_assertX(!tvisint(key), "bad integer key");
  ------------------
  |  |  366|  2.77M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.77M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.77M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  296|  2.77M|  if (tvisnum(key)) {
  ------------------
  |  |  804|  2.77M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  2.77M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  2.77M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  2.77M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 410k, False: 2.36M]
  |  |  ------------------
  ------------------
  297|   410k|    lua_Number nk = numV(key);
  ------------------
  |  |  866|   410k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|   410k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   410k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   410k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 410k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   410k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  298|   410k|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|   410k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  299|   410k|    if ((uint32_t)k < LJ_MAX_ASIZE && nk == (lua_Number)k) {
  ------------------
  |  |   61|   820k|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|   410k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (299:9): [True: 370k, False: 39.8k]
  |  Branch (299:39): [True: 340k, False: 29.7k]
  ------------------
  300|   340k|      bins[(k > 2 ? lj_fls((uint32_t)(k-1)) : 0)]++;
  ------------------
  |  |  149|   202k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (300:13): [True: 202k, False: 138k]
  ------------------
  301|   340k|      return 1;
  302|   340k|    }
  303|   410k|  }
  304|  2.43M|  return 0;
  305|  2.77M|}
lj_tab.c:bestasize:
  345|   486k|{
  346|   486k|  uint32_t b, sum, na = 0, sz = 0, nn = *narray;
  347|   893k|  for (b = 0, sum = 0; 2*nn > (1u<<b) && sum != nn; b++)
  ------------------
  |  Branch (347:24): [True: 555k, False: 337k]
  |  Branch (347:42): [True: 407k, False: 148k]
  ------------------
  348|   407k|    if (bins[b] > 0 && 2*(sum += bins[b]) > (1u<<b)) {
  ------------------
  |  Branch (348:9): [True: 330k, False: 76.2k]
  |  Branch (348:24): [True: 312k, False: 18.1k]
  ------------------
  349|   312k|      sz = (2u<<b)+1;
  350|   312k|      na = sum;
  351|   312k|    }
  352|   486k|  *narray = sz;
  353|   486k|  return na;
  354|   486k|}
lj_tab.c:hashkey:
   21|  7.11M|{
   22|  7.11M|  lj_assertX(!tvisint(key), "attempt to hash integer");
  ------------------
  |  |  366|  7.11M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  7.11M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.11M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   23|  7.11M|  if (tvisstr(key))
  ------------------
  |  |  795|  7.11M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  7.11M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  7.11M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 3.88M, False: 3.23M]
  |  |  ------------------
  ------------------
   24|  7.11M|    return hashstr(t, strV(key));
  ------------------
  |  |   42|  7.76M|#define hashstr(t, s)		hashmask(t, (s)->sid)
  |  |  ------------------
  |  |  |  Branch (42:37): [True: 3.88M, False: 0]
  |  |  ------------------
  ------------------
   25|  3.23M|  else if (tvisnum(key))
  ------------------
  |  |  804|  3.23M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  3.23M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  3.23M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  3.23M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 944k, False: 2.28M]
  |  |  ------------------
  ------------------
   26|   944k|    return hashnum(t, key);
  ------------------
  |  |   45|   944k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|   944k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   27|  2.28M|  else if (tvisbool(key))
  ------------------
  |  |  789|  2.28M|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|  4.57M|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  2.28M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|  2.28M|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 3.23k, False: 2.28M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|  2.28M|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  2.28M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|  2.28M|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 460, False: 2.28M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   28|  3.69k|    return hashmask(t, boolV(key));
  ------------------
  |  |  837|  3.69k|#define boolV(o)	check_exp(tvisbool(o), (LJ_TFALSE - itype(o)))
  |  |  ------------------
  |  |  |  |  367|  3.69k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.69k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  4.15k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 3.23k, False: 460]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 460, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.69k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   29|  2.28M|  else
   30|  2.28M|    return hashgcref(t, key->gcr);
  ------------------
  |  |   48|  2.28M|  hashlohi((t), (uint32_t)gcrefu(r), (uint32_t)(gcrefu(r) >> 32))
  |  |  ------------------
  |  |  |  |   44|  2.28M|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   31|       |  /* Only hash 32 bits of lightuserdata on a 64 bit CPU. Good enough? */
   32|  7.11M|}

lj_ctype.c:hashrot:
   19|   537k|{
   20|   537k|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|   537k|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|   537k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|   537k|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|   537k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|   537k|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|   537k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|   537k|  return hi;
   32|   537k|}
lj_tab.c:hashmask:
   36|  15.0M|{
   37|  15.0M|  Node *n = noderef(t->node);
  ------------------
  |  |  515|  15.0M|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  15.0M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   38|  15.0M|  return &n[hash & t->hmask];
   39|  15.0M|}
lj_tab.c:hashrot:
   19|  3.75M|{
   20|  3.75M|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|  3.75M|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|  3.75M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|  3.75M|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|  3.75M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|  3.75M|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|  3.75M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|  3.75M|  return hi;
   32|  3.75M|}

lj_trace_initstate:
  314|  46.0k|{
  315|  46.0k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  46.0k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  46.0k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  46.0k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  316|  46.0k|  TValue *tv;
  317|       |
  318|       |  /* Initialize aligned SIMD constants. */
  319|  46.0k|  tv = LJ_KSIMD(J, LJ_KSIMD_ABS);
  ------------------
  |  |  403|  46.0k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  320|  46.0k|  tv[0].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  46.0k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  321|  46.0k|  tv[1].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  46.0k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  322|  46.0k|  tv = LJ_KSIMD(J, LJ_KSIMD_NEG);
  ------------------
  |  |  403|  46.0k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  323|  46.0k|  tv[0].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  46.0k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  324|  46.0k|  tv[1].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  46.0k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  325|       |
  326|       |  /* Initialize 32/64 bit constants. */
  327|  46.0k|#if LJ_TARGET_X86ORX64
  328|  46.0k|  J->k64[LJ_K64_TOBIT].u64 = U64x(43380000,00000000);
  ------------------
  |  |   94|  46.0k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  329|       |#if LJ_32
  330|       |  J->k64[LJ_K64_M2P64_31].u64 = U64x(c1e00000,00000000);
  331|       |#endif
  332|  46.0k|  J->k64[LJ_K64_2P64].u64 = U64x(43f00000,00000000);
  ------------------
  |  |   94|  46.0k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  333|  46.0k|  J->k32[LJ_K32_M2P64_31] = LJ_64 ? 0xdf800000 : 0xcf000000;
  ------------------
  |  |  640|  46.0k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  334|  46.0k|#endif
  335|  46.0k|#if LJ_TARGET_X86ORX64 || LJ_TARGET_MIPS64
  336|  46.0k|  J->k64[LJ_K64_M2P64].u64 = U64x(c3f00000,00000000);
  ------------------
  |  |   94|  46.0k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  337|  46.0k|#endif
  338|       |#if LJ_TARGET_PPC
  339|       |  J->k32[LJ_K32_2P52_2P31] = 0x59800004;
  340|       |  J->k32[LJ_K32_2P52] = 0x59800000;
  341|       |#endif
  342|       |#if LJ_TARGET_PPC || LJ_TARGET_MIPS
  343|       |  J->k32[LJ_K32_2P31] = 0x4f000000;
  344|       |#endif
  345|       |#if LJ_TARGET_MIPS
  346|       |  J->k64[LJ_K64_2P31].u64 = U64x(41e00000,00000000);
  347|       |#if LJ_64
  348|       |  J->k64[LJ_K64_2P63].u64 = U64x(43e00000,00000000);
  349|       |  J->k32[LJ_K32_2P63] = 0x5f000000;
  350|       |  J->k32[LJ_K32_M2P64] = 0xdf800000;
  351|       |#endif
  352|       |#endif
  353|  46.0k|}
lj_trace_freestate:
  357|  46.0k|{
  358|  46.0k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  46.0k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  46.0k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  46.0k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  359|  46.0k|#ifdef LUA_USE_ASSERT
  360|  46.0k|  {  /* This assumes all traces have already been freed. */
  361|  46.0k|    ptrdiff_t i;
  362|  46.0k|    for (i = 1; i < (ptrdiff_t)J->sizetrace; i++)
  ------------------
  |  Branch (362:17): [True: 0, False: 46.0k]
  ------------------
  363|  46.0k|      lj_assertG(i == (ptrdiff_t)J->cur.traceno || traceref(J, i) == NULL,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  364|  46.0k|		 "trace still allocated");
  365|  46.0k|  }
  366|  46.0k|#endif
  367|  46.0k|  lj_mcode_free(J);
  368|  46.0k|  lj_mem_freevec(g, J->snapmapbuf, J->sizesnapmap, SnapEntry);
  ------------------
  |  |  130|  46.0k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  369|  46.0k|  lj_mem_freevec(g, J->snapbuf, J->sizesnap, SnapShot);
  ------------------
  |  |  130|  46.0k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  370|  46.0k|  lj_mem_freevec(g, J->irbuf + J->irbotlim, J->irtoplim - J->irbotlim, IRIns);
  ------------------
  |  |  130|  46.0k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  371|  46.0k|  lj_mem_freevec(g, J->trace, J->sizetrace, GCRef);
  ------------------
  |  |  130|  46.0k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  372|  46.0k|}

lj_udata_new:
   15|  5.60k|{
   16|  5.60k|  GCudata *ud = lj_mem_newt(L, sizeof(GCudata) + sz, GCudata);
  ------------------
  |  |  133|  5.60k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  5.60k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   17|  5.60k|  global_State *g = G(L);
  ------------------
  |  |  705|  5.60k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  5.60k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   18|  5.60k|  newwhite(g, ud);  /* Not finalized. */
  ------------------
  |  |   40|  5.60k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|  5.60k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  5.60k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  5.60k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  5.60k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  5.60k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   19|  5.60k|  ud->gct = ~LJ_TUDATA;
  ------------------
  |  |  272|  5.60k|#define LJ_TUDATA		(~12u)
  ------------------
   20|  5.60k|  ud->udtype = UDTYPE_USERDATA;
   21|  5.60k|  ud->len = sz;
   22|       |  /* NOBARRIER: The GCudata is new (marked white). */
   23|  5.60k|  setgcrefnull(ud->metatable);
  ------------------
  |  |   76|  5.60k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   24|  5.60k|  setgcref(ud->env, obj2gco(env));
  ------------------
  |  |   72|  5.60k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   25|       |  /* Chain to userdata list (after main thread). */
   26|  5.60k|  setgcrefr(ud->nextgc, mainthread(g)->nextgc);
  ------------------
  |  |   77|  5.60k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   27|  5.60k|  setgcref(mainthread(g)->nextgc, obj2gco(ud));
  ------------------
  |  |   72|  5.60k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   28|  5.60k|  return ud;
   29|  5.60k|}
lj_udata_free:
   32|  5.60k|{
   33|  5.60k|  lj_mem_free(g, ud, sizeudata(ud));
  ------------------
  |  |  343|  5.60k|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  ------------------
   34|  5.60k|}

lj_vm_foldarith:
   51|   138k|{
   52|   138k|  switch (op) {
   53|  1.50k|  case IR_ADD - IR_ADD: return x+y; break;
  ------------------
  |  Branch (53:3): [True: 1.50k, False: 136k]
  ------------------
   54|  27.6k|  case IR_SUB - IR_ADD: return x-y; break;
  ------------------
  |  Branch (54:3): [True: 27.6k, False: 110k]
  ------------------
   55|  4.23k|  case IR_MUL - IR_ADD: return x*y; break;
  ------------------
  |  Branch (55:3): [True: 4.23k, False: 133k]
  ------------------
   56|  17.7k|  case IR_DIV - IR_ADD: return x/y; break;
  ------------------
  |  Branch (56:3): [True: 17.7k, False: 120k]
  ------------------
   57|  86.7k|  case IR_MOD - IR_ADD: return x-lj_vm_floormul(x, y); break;
  ------------------
  |  Branch (57:3): [True: 86.7k, False: 51.3k]
  ------------------
   58|    231|  case IR_POW - IR_ADD: return pow(x, y); break;
  ------------------
  |  Branch (58:3): [True: 231, False: 137k]
  ------------------
   59|      0|  case IR_NEG - IR_ADD: return -x; break;
  ------------------
  |  Branch (59:3): [True: 0, False: 138k]
  ------------------
   60|      0|  case IR_ABS - IR_ADD: return fabs(x); break;
  ------------------
  |  Branch (60:3): [True: 0, False: 138k]
  ------------------
   61|      0|#if LJ_HASJIT
   62|      0|  case IR_LDEXP - IR_ADD: return ldexp(x, (int)y); break;
  ------------------
  |  Branch (62:3): [True: 0, False: 138k]
  ------------------
   63|      0|  case IR_MIN - IR_ADD: return x < y ? x : y; break;
  ------------------
  |  Branch (63:3): [True: 0, False: 138k]
  |  Branch (63:32): [True: 0, False: 0]
  ------------------
   64|      0|  case IR_MAX - IR_ADD: return x > y ? x : y; break;
  ------------------
  |  Branch (64:3): [True: 0, False: 138k]
  |  Branch (64:32): [True: 0, False: 0]
  ------------------
   65|      0|#endif
   66|      0|  default: return x;
  ------------------
  |  Branch (66:3): [True: 0, False: 138k]
  ------------------
   67|   138k|  }
   68|   138k|}
lj_vmmath.c:lj_vm_floormul:
   46|  86.7k|{
   47|  86.7k|  return lj_vm_floor(x / y) * y;
   48|  86.7k|}

LLVMFuzzerTestOneInput:
   22|  46.0k|{
   23|  46.0k|	lua_State *L = luaL_newstate();
   24|  46.0k|	if (L == NULL)
  ------------------
  |  Branch (24:6): [True: 0, False: 46.0k]
  ------------------
   25|      0|		return 0;
   26|       |
   27|       |	/*
   28|       |	 * The string "mode" controls whether the chunk can be text or binary
   29|       |	 * (that is, a precompiled chunk). It may be the string "b" (only binary
   30|       |	 * chunks), "t" (only text chunks), or "bt" (both binary and text). The
   31|       |	 * default is "bt".
   32|       |	 * Lua runtime (at least PUC Rio Lua and LuaJIT) has bytecode and Lua
   33|       |	 * parsers. It is desired to test both parsers, however, in LuaJIT
   34|       |	 * bytecode parser failed with assertion:
   35|       |	 *
   36|       |	 * LuaJIT ASSERT lj_bcread.c:123: bcread_byte: buffer read overflow
   37|       |	 *
   38|       |	 * so in LuaJIT only text mode is used and therefore only text parser is
   39|       |	 * tested.
   40|       |	 */
   41|  46.0k|#ifdef LUAJIT
   42|  46.0k|	const char *mode = "t";
   43|       |#else
   44|       |	const char *mode = "bt";
   45|       |#endif /* LUAJIT */
   46|  46.0k|	luaL_loadbufferx(L, (const char *)data, size, "fuzz", mode);
   47|       |
   48|  46.0k|	lua_settop(L, 0);
   49|  46.0k|	lua_close(L);
   50|       |
   51|  46.0k|	return 0;
   52|  46.0k|}

