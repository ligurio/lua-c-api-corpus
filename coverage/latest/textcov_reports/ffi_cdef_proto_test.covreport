luaL_findtable:
   84|   588k|{
   85|   588k|  const char *e;
   86|   588k|  lua_pushvalue(L, idx);
   87|   606k|  do {
   88|   606k|    e = strchr(fname, '.');
   89|   606k|    if (e == NULL) e = fname + strlen(fname);
  ------------------
  |  Branch (89:9): [True: 588k, False: 17.8k]
  ------------------
   90|   606k|    lua_pushlstring(L, fname, (size_t)(e - fname));
   91|   606k|    lua_rawget(L, -2);
   92|   606k|    if (lua_isnil(L, -1)) {  /* no such field? */
  ------------------
  |  |  269|   606k|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|   606k|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 249k, False: 356k]
  |  |  ------------------
  ------------------
   93|   249k|      lua_pop(L, 1);  /* remove this nil */
  ------------------
  |  |  256|   249k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   94|   249k|      lua_createtable(L, 0, (*e == '.' ? 1 : szhint)); /* new table for field */
  ------------------
  |  Branch (94:30): [True: 0, False: 249k]
  ------------------
   95|   249k|      lua_pushlstring(L, fname, (size_t)(e - fname));
   96|   249k|      lua_pushvalue(L, -2);
   97|   249k|      lua_settable(L, -4);  /* set new table into field */
   98|   356k|    } else if (!lua_istable(L, -1)) {  /* field has a non-table value? */
  ------------------
  |  |  267|   356k|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|   356k|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (98:16): [True: 0, False: 356k]
  ------------------
   99|      0|      lua_pop(L, 2);  /* remove table and value */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  100|      0|      return fname;  /* return problematic part of the name */
  101|      0|    }
  102|   606k|    lua_remove(L, -2);  /* remove previous table */
  103|   606k|    fname = e + 1;
  104|   606k|  } while (*e == '.');
  ------------------
  |  Branch (104:12): [True: 17.8k, False: 588k]
  ------------------
  105|   588k|  return NULL;
  106|   588k|}
luaL_pushmodule:
  116|  17.8k|{
  117|  17.8k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_LOADED", 16);
  ------------------
  |  |   36|  17.8k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  118|  17.8k|  lua_getfield(L, -1, modname);
  119|  17.8k|  if (!lua_istable(L, -1)) {
  ------------------
  |  |  267|  17.8k|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|  17.8k|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (119:7): [True: 17.8k, False: 0]
  ------------------
  120|  17.8k|    lua_pop(L, 1);
  ------------------
  |  |  256|  17.8k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  121|  17.8k|    if (luaL_findtable(L, LUA_GLOBALSINDEX, modname, sizehint) != NULL)
  ------------------
  |  |   38|  17.8k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (121:9): [True: 0, False: 17.8k]
  ------------------
  122|      0|      lj_err_callerv(L, LJ_ERR_BADMODN, modname);
  123|  17.8k|    lua_pushvalue(L, -1);
  124|  17.8k|    lua_setfield(L, -3, modname);  /* _LOADED[modname] = new table. */
  125|  17.8k|  }
  126|  17.8k|  lua_remove(L, -2);  /* Remove _LOADED table. */
  127|  17.8k|}
luaL_openlib:
  131|  35.6k|{
  132|  35.6k|  lj_lib_checkfpu(L);
  ------------------
  |  |   74|  35.6k|#define lj_lib_checkfpu(L)	UNUSED(L)
  |  |  ------------------
  |  |  |  |   91|  35.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  133|  35.6k|  if (libname) {
  ------------------
  |  Branch (133:7): [True: 17.8k, False: 17.8k]
  ------------------
  134|  17.8k|    luaL_pushmodule(L, libname, libsize(l));
  135|  17.8k|    lua_insert(L, -(nup + 1));  /* Move module table below upvalues. */
  136|  17.8k|  }
  137|  35.6k|  if (l)
  ------------------
  |  Branch (137:7): [True: 35.6k, False: 0]
  ------------------
  138|  35.6k|    luaL_setfuncs(L, l, nup);
  139|      0|  else
  140|      0|    lua_pop(L, nup);  /* Remove upvalues. */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  141|  35.6k|}
luaL_register:
  145|  35.6k|{
  146|  35.6k|  luaL_openlib(L, libname, l, 0);
  147|  35.6k|}
luaL_setfuncs:
  150|  35.6k|{
  151|  35.6k|  luaL_checkstack(L, nup, "too many upvalues");
  152|   124k|  for (; l->name; l++) {
  ------------------
  |  Branch (152:10): [True: 89.1k, False: 35.6k]
  ------------------
  153|  89.1k|    int i;
  154|  89.1k|    for (i = 0; i < nup; i++)  /* Copy upvalues to the top. */
  ------------------
  |  Branch (154:17): [True: 0, False: 89.1k]
  ------------------
  155|      0|      lua_pushvalue(L, -nup);
  156|  89.1k|    lua_pushcclosure(L, l->func, nup);
  157|  89.1k|    lua_setfield(L, -(nup + 2), l->name);
  158|  89.1k|  }
  159|  35.6k|  lua_pop(L, nup);  /* Remove upvalues. */
  ------------------
  |  |  256|  35.6k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  160|  35.6k|}
luaL_newstate:
  371|  17.8k|{
  372|  17.8k|  lua_State *L;
  373|       |#if LJ_64 && !LJ_GC64
  374|       |  L = lj_state_newstate(LJ_ALLOCF_INTERNAL, NULL);
  375|       |#else
  376|  17.8k|  L = lua_newstate(LJ_ALLOCF_INTERNAL, NULL);
  ------------------
  |  |   36|  17.8k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  377|  17.8k|#endif
  378|  17.8k|  if (L) {
  ------------------
  |  Branch (378:7): [True: 17.8k, False: 0]
  ------------------
  379|  17.8k|    G(L)->panic = panic;
  ------------------
  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  380|  17.8k|#ifndef LUAJIT_DISABLE_VMEVENT
  381|  17.8k|    luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   36|  17.8k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   12|  17.8k|#define LJ_VMEVENTS_REGKEY	"_VMEVENTS"
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   13|  17.8k|#define LJ_VMEVENTS_HSIZE	4
  ------------------
  382|  17.8k|    lua_pushcfunction(L, error_finalizer);
  ------------------
  |  |  262|  17.8k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  383|  17.8k|    lua_rawseti(L, -2, VMEVENT_HASH(LJ_VMEVENT_ERRFIN));
  ------------------
  |  |   16|  17.8k|#define VMEVENT_HASH(ev)	((int)(ev) & ~7)
  ------------------
  384|  17.8k|    G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |   15|  17.8k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  ------------------
  385|  17.8k|    L->top--;
  386|  17.8k|#endif
  387|  17.8k|  }
  388|  17.8k|  return L;
  389|  17.8k|}
lib_aux.c:libsize:
  109|  17.8k|{
  110|  17.8k|  int size = 0;
  111|  71.3k|  for (; l && l->name; l++) size++;
  ------------------
  |  Branch (111:10): [True: 71.3k, False: 0]
  |  Branch (111:15): [True: 53.5k, False: 17.8k]
  ------------------
  112|  17.8k|  return size;
  113|  17.8k|}

luaopen_base:
  697|  17.8k|{
  698|       |  /* NOBARRIER: Table and value are the same. */
  699|  17.8k|  GCtab *env = tabref(L->env);
  ------------------
  |  |  514|  17.8k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  17.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  700|  17.8k|  settabV(L, lj_tab_setstr(L, env, lj_str_newlit(L, "_G")), env);
  ------------------
  |  |   28|  17.8k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  701|  17.8k|  lua_pushliteral(L, LUA_VERSION);  /* top-3. */
  ------------------
  |  |  276|  17.8k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  702|  17.8k|  newproxy_weaktable(L);  /* top-2. */
  703|  17.8k|  LJ_LIB_REG(L, "_G", base);
  ------------------
  |  |   92|  17.8k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  704|  17.8k|  LJ_LIB_REG(L, LUA_COLIBNAME, coroutine);
  ------------------
  |  |   92|  17.8k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  705|  17.8k|  return 2;
  706|  17.8k|}
lib_base.c:newproxy_weaktable:
  686|  17.8k|{
  687|       |  /* NOBARRIER: The table is new (marked white). */
  688|  17.8k|  GCtab *t = lj_tab_new(L, 0, 1);
  689|  17.8k|  settabV(L, L->top++, t);
  690|  17.8k|  setgcref(t->metatable, obj2gco(t));
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  691|  17.8k|  setstrV(L, lj_tab_setstr(L, t, lj_str_newlit(L, "__mode")),
  ------------------
  |  |   28|  17.8k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  692|  17.8k|	    lj_str_newlit(L, "kv"));
  ------------------
  |  |   28|  17.8k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  693|  17.8k|  t->nomm = (uint8_t)(~(1u<<MM_mode));
  694|  17.8k|}

luaopen_bit:
  177|  17.8k|{
  178|  17.8k|  LJ_LIB_REG(L, LUA_BITLIBNAME, bit);
  ------------------
  |  |   92|  17.8k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  179|  17.8k|  return 1;
  180|  17.8k|}

luaopen_debug:
  402|  17.8k|{
  403|  17.8k|  LJ_LIB_REG(L, LUA_DBLIBNAME, debug);
  ------------------
  |  |   92|  17.8k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  404|  17.8k|  return 1;
  405|  17.8k|}

luaopen_ffi:
  838|  13.5k|{
  839|  13.5k|  CTState *cts = lj_ctype_init(L);
  840|  13.5k|  settabV(L, L->top++, (cts->miscmap = lj_tab_new(L, 0, 1)));
  841|  13.5k|  LJ_LIB_REG(L, NULL, ffi_meta);
  ------------------
  |  |   92|  13.5k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  842|       |  /* NOBARRIER: basemt is a GC root. */
  843|  13.5k|  setgcref(basemt_it(G(L), LJ_TCDATA), obj2gco(tabV(L->top-1)));
  ------------------
  |  |   72|  27.1k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 13.5k, False: 0]
  |  |  ------------------
  ------------------
  844|  13.5k|  LJ_LIB_REG(L, NULL, ffi_clib);
  ------------------
  |  |   92|  13.5k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  845|  13.5k|  LJ_LIB_REG(L, NULL, ffi_callback);
  ------------------
  |  |   92|  13.5k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  846|       |  /* NOBARRIER: the key is new and lj_tab_newkey() handles the barrier. */
  847|  13.5k|  settabV(L, lj_tab_setstr(L, cts->miscmap, &cts->g->strempty), tabV(L->top-1));
  ------------------
  |  |  864|  13.5k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  13.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  13.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  13.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 13.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  13.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  848|      0|  L->top--;
  849|  13.5k|  lj_clib_default(L, tabV(L->top-1));  /* Create ffi.C default namespace. */
  ------------------
  |  |  864|  13.5k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  13.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  13.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  13.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 13.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  13.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  850|  13.5k|  lua_pushliteral(L, LJ_OS_NAME);
  ------------------
  |  |  276|  13.5k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  851|  13.5k|  lua_pushliteral(L, LJ_ARCH_NAME);
  ------------------
  |  |  276|  13.5k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  852|  13.5k|  LJ_LIB_REG(L, NULL, ffi);  /* Note: no global "ffi" created! */
  ------------------
  |  |   92|  13.5k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  853|  13.5k|  ffi_register_module(L);
  854|  13.5k|  return 1;
  855|  13.5k|}
lib_ffi.c:lj_cf_ffi_clib___gc:
  419|  13.5k|{
  420|  13.5k|  TValue *o = L->base;
  421|  27.1k|  if (o < L->top && tvisudata(o) && udataV(o)->udtype == UDTYPE_FFI_CLIB)
  ------------------
  |  |  801|  27.1k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|  13.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|  13.5k|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 13.5k, False: 0]
  |  |  ------------------
  ------------------
                if (o < L->top && tvisudata(o) && udataV(o)->udtype == UDTYPE_FFI_CLIB)
  ------------------
  |  |  865|  13.5k|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  13.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  13.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  13.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 13.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  13.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (421:7): [True: 13.5k, False: 0]
  |  Branch (421:37): [True: 13.5k, False: 0]
  ------------------
  422|  13.5k|    lj_clib_unload((CLibrary *)uddata(udataV(o)));
  ------------------
  |  |  342|  27.1k|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 13.5k, False: 0]
  |  |  ------------------
  ------------------
  423|  13.5k|  return 0;
  424|  13.5k|}
lib_ffi.c:lj_cf_ffi_cdef:
  477|  11.0k|{
  478|  11.0k|  GCstr *s = lj_lib_checkstr(L, 1);
  479|  11.0k|  CPState cp;
  480|  11.0k|  int errcode;
  481|  11.0k|  cp.L = L;
  482|  11.0k|  cp.cts = ctype_cts(L);
  483|  11.0k|  cp.srcname = strdata(s);
  ------------------
  |  |  316|  11.0k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  484|  11.0k|  cp.p = strdata(s);
  ------------------
  |  |  316|  11.0k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  485|  11.0k|  cp.param = L->base+1;
  486|  11.0k|  cp.mode = CPARSE_MODE_MULTI|CPARSE_MODE_DIRECT;
  ------------------
  |  |   21|  11.0k|#define CPARSE_MODE_MULTI	1	/* Process multiple declarations. */
  ------------------
                cp.mode = CPARSE_MODE_MULTI|CPARSE_MODE_DIRECT;
  ------------------
  |  |   23|  11.0k|#define CPARSE_MODE_DIRECT	4	/* Accept direct declarators. */
  ------------------
  487|  11.0k|  errcode = lj_cparse(&cp);
  488|  11.0k|  if (errcode) lj_err_throw(L, errcode);  /* Propagate errors. */
  ------------------
  |  Branch (488:7): [True: 7.26k, False: 3.82k]
  ------------------
  489|  3.82k|  lj_gc_check(L);
  ------------------
  |  |   66|  3.82k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  3.82k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 3.82k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  3.82k|      lj_gc_step(L); }
  ------------------
  490|  3.82k|  return 0;
  491|  11.0k|}
lib_ffi.c:ffi_register_module:
  828|  13.5k|{
  829|  13.5k|  cTValue *tmp = lj_tab_getstr(tabV(registry(L)), lj_str_newlit(L, "_LOADED"));
  ------------------
  |  |  864|  13.5k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  13.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  13.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  13.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 13.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  13.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                cTValue *tmp = lj_tab_getstr(tabV(registry(L)), lj_str_newlit(L, "_LOADED"));
  ------------------
  |  |   28|  13.5k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  830|  13.5k|  if (tmp && tvistab(tmp)) {
  ------------------
  |  |  800|  13.5k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|  13.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|  13.5k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 13.5k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (830:7): [True: 13.5k, False: 0]
  ------------------
  831|  13.5k|    GCtab *t = tabV(tmp);
  ------------------
  |  |  864|  13.5k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  13.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  13.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  13.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 13.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  13.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  832|  13.5k|    copyTV(L, lj_tab_setstr(L, t, lj_str_newlit(L, LUA_FFILIBNAME)), L->top-1);
  ------------------
  |  |   28|  13.5k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  833|  13.5k|    lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|  13.5k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  13.5k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 324, False: 13.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|    324|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    324|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  834|  13.5k|  }
  835|  13.5k|}

luaL_openlibs:
   40|  17.8k|{
   41|  17.8k|  const luaL_Reg *lib;
   42|   196k|  for (lib = lj_lib_load; lib->func; lib++) {
  ------------------
  |  Branch (42:27): [True: 178k, False: 17.8k]
  ------------------
   43|   178k|    lua_pushcfunction(L, lib->func);
  ------------------
  |  |  262|   178k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
   44|   178k|    lua_pushstring(L, lib->name);
   45|   178k|    lua_call(L, 1, 0);
   46|   178k|  }
   47|  17.8k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_PRELOAD",
  ------------------
  |  |   36|  17.8k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
   48|  17.8k|		 sizeof(lj_lib_preload)/sizeof(lj_lib_preload[0])-1);
   49|  35.6k|  for (lib = lj_lib_preload; lib->func; lib++) {
  ------------------
  |  Branch (49:30): [True: 17.8k, False: 17.8k]
  ------------------
   50|  17.8k|    lua_pushcfunction(L, lib->func);
  ------------------
  |  |  262|  17.8k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
   51|  17.8k|    lua_setfield(L, -2, lib->name);
   52|  17.8k|  }
   53|  17.8k|  lua_pop(L, 1);
  ------------------
  |  |  256|  17.8k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   54|  17.8k|}

luaopen_io:
  543|  17.8k|{
  544|  17.8k|  LJ_LIB_REG(L, NULL, io_method);
  ------------------
  |  |   92|  17.8k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  545|  17.8k|  copyTV(L, L->top, L->top-1); L->top++;
  546|  17.8k|  lua_setfield(L, LUA_REGISTRYINDEX, LUA_FILEHANDLE);
  ------------------
  |  |   36|  17.8k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
                lua_setfield(L, LUA_REGISTRYINDEX, LUA_FILEHANDLE);
  ------------------
  |  |   11|  17.8k|#define LUA_FILEHANDLE	"FILE*"
  ------------------
  547|  17.8k|  LJ_LIB_REG(L, LUA_IOLIBNAME, io);
  ------------------
  |  |   92|  17.8k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  548|  17.8k|  setgcref(G(L)->gcroot[GCROOT_IO_INPUT], io_std_new(L, stdin, "stdin"));
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  549|  17.8k|  setgcref(G(L)->gcroot[GCROOT_IO_OUTPUT], io_std_new(L, stdout, "stdout"));
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  550|  17.8k|  io_std_new(L, stderr, "stderr");
  551|  17.8k|  return 1;
  552|  17.8k|}
lib_io.c:io_tofilep:
   49|  53.5k|{
   50|  53.5k|  if (!(L->base < L->top && tvisudata(L->base) &&
  ------------------
  |  |  801|   107k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|  53.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|  53.5k|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 53.5k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (50:9): [True: 53.5k, False: 0]
  ------------------
   51|   107k|	udataV(L->base)->udtype == UDTYPE_IO_FILE))
  ------------------
  |  |  865|  53.5k|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  53.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  53.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  53.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 53.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  53.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (51:2): [True: 53.5k, False: 0]
  ------------------
   52|      0|    lj_err_argtype(L, 1, "FILE*");
   53|  53.5k|  return (IOFileUD *)uddata(udataV(L->base));
  ------------------
  |  |  342|   107k|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 53.5k, False: 0]
  |  |  ------------------
  ------------------
   54|  53.5k|}
lib_io.c:lj_cf_io_method___gc:
  384|  53.5k|{
  385|  53.5k|  IOFileUD *iof = io_tofilep(L);
  386|  53.5k|  if (iof->fp != NULL && (iof->type & IOFILE_TYPE_MASK) != IOFILE_TYPE_STDF)
  ------------------
  |  |   39|  53.5k|#define IOFILE_TYPE_MASK	3
  ------------------
                if (iof->fp != NULL && (iof->type & IOFILE_TYPE_MASK) != IOFILE_TYPE_STDF)
  ------------------
  |  |   38|  53.5k|#define IOFILE_TYPE_STDF	2	/* Standard file handle. */
  ------------------
  |  Branch (386:7): [True: 53.5k, False: 0]
  |  Branch (386:26): [True: 0, False: 53.5k]
  ------------------
  387|      0|    io_file_close(L, iof);
  388|  53.5k|  return 0;
  389|  53.5k|}
lib_io.c:io_std_new:
  530|  53.5k|{
  531|  53.5k|  IOFileUD *iof = (IOFileUD *)lua_newuserdata(L, sizeof(IOFileUD));
  532|  53.5k|  GCudata *ud = udataV(L->top-1);
  ------------------
  |  |  865|  53.5k|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  53.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  53.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  53.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 53.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  53.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  533|      0|  ud->udtype = UDTYPE_IO_FILE;
  534|       |  /* NOBARRIER: The GCudata is new (marked white). */
  535|  53.5k|  setgcref(ud->metatable, gcV(L->top-3));
  ------------------
  |  |   72|   107k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 53.5k, False: 0]
  |  |  ------------------
  ------------------
  536|      0|  iof->fp = fp;
  537|  53.5k|  iof->type = IOFILE_TYPE_STDF;
  ------------------
  |  |   38|  53.5k|#define IOFILE_TYPE_STDF	2	/* Standard file handle. */
  ------------------
  538|  53.5k|  lua_setfield(L, -2, name);
  539|  53.5k|  return obj2gco(ud);
  ------------------
  |  |  775|  53.5k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  540|  53.5k|}

luaopen_jit:
  722|  17.8k|{
  723|  17.8k|#if LJ_HASJIT
  724|  17.8k|  jit_init(L);
  725|  17.8k|#endif
  726|  17.8k|  lua_pushliteral(L, LJ_OS_NAME);
  ------------------
  |  |  276|  17.8k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  727|  17.8k|  lua_pushliteral(L, LJ_ARCH_NAME);
  ------------------
  |  |  276|  17.8k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  728|  17.8k|  lua_pushinteger(L, LUAJIT_VERSION_NUM);  /* Deprecated. */
  ------------------
  |  |   34|  17.8k|#define LUAJIT_VERSION_NUM	20199  /* Deprecated. */
  ------------------
  729|  17.8k|  lua_pushliteral(L, LUAJIT_VERSION);
  ------------------
  |  |  276|  17.8k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  730|  17.8k|  LJ_LIB_REG(L, LUA_JITLIBNAME, jit);
  ------------------
  |  |   92|  17.8k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  731|  17.8k|#if LJ_HASPROFILE
  732|  17.8k|  lj_lib_prereg(L, LUA_JITLIBNAME ".profile", luaopen_jit_profile,
  ------------------
  |  |   22|  17.8k|#define LUA_JITLIBNAME	"jit"
  ------------------
  733|  17.8k|		tabref(L->env));
  ------------------
  |  |  514|  17.8k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  17.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  734|  17.8k|#endif
  735|  17.8k|#ifndef LUAJIT_DISABLE_JITUTIL
  736|  17.8k|  lj_lib_prereg(L, LUA_JITLIBNAME ".util", luaopen_jit_util, tabref(L->env));
  ------------------
  |  |   22|  17.8k|#define LUA_JITLIBNAME	"jit"
  ------------------
                lj_lib_prereg(L, LUA_JITLIBNAME ".util", luaopen_jit_util, tabref(L->env));
  ------------------
  |  |  514|  17.8k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  17.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  737|  17.8k|#endif
  738|  17.8k|#if LJ_HASJIT
  739|  17.8k|  LJ_LIB_REG(L, "jit.opt", jit_opt);
  ------------------
  |  |   92|  17.8k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  740|  17.8k|#endif
  741|  17.8k|  L->top -= 2;
  742|  17.8k|  return 1;
  743|  17.8k|}
lib_jit.c:jit_init:
  713|  17.8k|{
  714|  17.8k|  jit_State *J = L2J(L);
  ------------------
  |  |  117|  17.8k|#define L2J(L)		(&L2GG(L)->J)
  |  |  ------------------
  |  |  |  |  114|  17.8k|#define L2GG(L)		(G2GG(G(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  17.8k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  17.8k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  715|  17.8k|  J->flags = jit_cpudetect() | JIT_F_ON | JIT_F_OPT_DEFAULT;
  ------------------
  |  |   16|  17.8k|#define JIT_F_ON		0x00000001
  ------------------
                J->flags = jit_cpudetect() | JIT_F_ON | JIT_F_OPT_DEFAULT;
  ------------------
  |  |  102|  17.8k|#define JIT_F_OPT_DEFAULT	JIT_F_OPT_3
  |  |  ------------------
  |  |  |  |  100|  17.8k|#define JIT_F_OPT_3	(JIT_F_OPT_2|\
  |  |  |  |  ------------------
  |  |  |  |  |  |   99|  17.8k|#define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   98|  17.8k|#define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   80|  17.8k|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   77|  17.8k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   81|  17.8k|#define JIT_F_OPT_CSE		(JIT_F_OPT << 1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   77|  17.8k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   82|  17.8k|#define JIT_F_OPT_DCE		(JIT_F_OPT << 2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   77|  17.8k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   85|  17.8k|#define JIT_F_OPT_NARROW	(JIT_F_OPT << 5)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   77|  17.8k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   86|  17.8k|#define JIT_F_OPT_LOOP		(JIT_F_OPT << 6)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   77|  17.8k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  101|  17.8k|  JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   83|  17.8k|#define JIT_F_OPT_FWD		(JIT_F_OPT << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  17.8k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   84|  17.8k|#define JIT_F_OPT_DSE		(JIT_F_OPT << 4)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  17.8k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   87|  17.8k|#define JIT_F_OPT_ABC		(JIT_F_OPT << 7)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  17.8k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  17.8k|#define JIT_F_OPT_SINK		(JIT_F_OPT << 8)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  17.8k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   89|  17.8k|#define JIT_F_OPT_FUSE		(JIT_F_OPT << 9)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  17.8k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  716|  17.8k|  memcpy(J->param, jit_param_default, sizeof(J->param));
  717|  17.8k|  lj_dispatch_update(G(L));
  ------------------
  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  718|  17.8k|}
lib_jit.c:jit_cpudetect:
  636|  17.8k|{
  637|  17.8k|  uint32_t flags = 0;
  638|  17.8k|#if LJ_TARGET_X86ORX64
  639|       |
  640|  17.8k|  uint32_t vendor[4];
  641|  17.8k|  uint32_t features[4];
  642|  17.8k|  if (lj_vm_cpuid(0, vendor) && lj_vm_cpuid(1, features)) {
  ------------------
  |  Branch (642:7): [True: 17.8k, False: 0]
  |  Branch (642:33): [True: 17.8k, False: 0]
  ------------------
  643|  17.8k|    flags |= ((features[2] >> 0)&1) * JIT_F_SSE3;
  ------------------
  |  |   23|  17.8k|#define JIT_F_SSE3		(JIT_F_CPU << 0)
  |  |  ------------------
  |  |  |  |   19|  17.8k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  644|  17.8k|    flags |= ((features[2] >> 19)&1) * JIT_F_SSE4_1;
  ------------------
  |  |   24|  17.8k|#define JIT_F_SSE4_1		(JIT_F_CPU << 1)
  |  |  ------------------
  |  |  |  |   19|  17.8k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  645|  17.8k|    if (vendor[0] >= 7) {
  ------------------
  |  Branch (645:9): [True: 17.8k, False: 0]
  ------------------
  646|  17.8k|      uint32_t xfeatures[4];
  647|  17.8k|      lj_vm_cpuid(7, xfeatures);
  648|  17.8k|      flags |= ((xfeatures[1] >> 8)&1) * JIT_F_BMI2;
  ------------------
  |  |   25|  17.8k|#define JIT_F_BMI2		(JIT_F_CPU << 2)
  |  |  ------------------
  |  |  |  |   19|  17.8k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  649|  17.8k|    }
  650|  17.8k|  }
  651|       |  /* Don't bother checking for SSE2 -- the VM will crash before getting here. */
  652|       |
  653|       |#elif LJ_TARGET_ARM
  654|       |
  655|       |  int ver = LJ_ARCH_VERSION;  /* Compile-time ARM CPU detection. */
  656|       |#if LJ_TARGET_LINUX
  657|       |  if (ver < 70) {  /* Runtime ARM CPU detection. */
  658|       |    struct utsname ut;
  659|       |    uname(&ut);
  660|       |    if (strncmp(ut.machine, "armv", 4) == 0) {
  661|       |      if (ut.machine[4] >= '8') ver = 80;
  662|       |      else if (ut.machine[4] == '7') ver = 70;
  663|       |      else if (ut.machine[4] == '6') ver = 60;
  664|       |    }
  665|       |  }
  666|       |#endif
  667|       |  flags |= ver >= 70 ? JIT_F_ARMV7 :
  668|       |	   ver >= 61 ? JIT_F_ARMV6T2_ :
  669|       |	   ver >= 60 ? JIT_F_ARMV6_ : 0;
  670|       |  flags |= LJ_ARCH_HASFPU == 0 ? 0 : ver >= 70 ? JIT_F_VFPV3 : JIT_F_VFPV2;
  671|       |
  672|       |#elif LJ_TARGET_ARM64
  673|       |
  674|       |  /* No optional CPU features to detect (for now). */
  675|       |
  676|       |#elif LJ_TARGET_PPC
  677|       |
  678|       |#if LJ_ARCH_SQRT
  679|       |  flags |= JIT_F_SQRT;
  680|       |#endif
  681|       |#if LJ_ARCH_ROUND
  682|       |  flags |= JIT_F_ROUND;
  683|       |#endif
  684|       |
  685|       |#elif LJ_TARGET_MIPS
  686|       |
  687|       |  /* Compile-time MIPS CPU detection. */
  688|       |#if LJ_ARCH_VERSION >= 20
  689|       |  flags |= JIT_F_MIPSXXR2;
  690|       |#endif
  691|       |  /* Runtime MIPS CPU detection. */
  692|       |#if defined(__GNUC__)
  693|       |  if (!(flags & JIT_F_MIPSXXR2)) {
  694|       |    int x;
  695|       |#ifdef __mips16
  696|       |    x = 0;  /* Runtime detection is difficult. Ensure optimal -march flags. */
  697|       |#else
  698|       |    /* On MIPS32R1 rotr is treated as srl. rotr r2,r2,1 -> srl r2,r2,1. */
  699|       |    __asm__("li $2, 1\n\t.long 0x00221042\n\tmove %0, $2" : "=r"(x) : : "$2");
  700|       |#endif
  701|       |    if (x) flags |= JIT_F_MIPSXXR2;  /* Either 0x80000000 (R2) or 0 (R1). */
  702|       |  }
  703|       |#endif
  704|       |
  705|       |#else
  706|       |#error "Missing CPU detection for this architecture"
  707|       |#endif
  708|  17.8k|  return flags;
  709|  17.8k|}

luaopen_math:
  199|  17.8k|{
  200|  17.8k|  PRNGState *rs = (PRNGState *)lua_newuserdata(L, sizeof(PRNGState));
  201|  17.8k|  lj_prng_seed_fixed(rs);
  202|  17.8k|  LJ_LIB_REG(L, LUA_MATHLIBNAME, math);
  ------------------
  |  |   92|  17.8k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  203|  17.8k|  return 1;
  204|  17.8k|}

luaopen_os:
  288|  17.8k|{
  289|  17.8k|  LJ_LIB_REG(L, LUA_OSLIBNAME, os);
  ------------------
  |  |   92|  17.8k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  290|  17.8k|  return 1;
  291|  17.8k|}

luaopen_package:
  594|  17.8k|{
  595|  17.8k|  int i;
  596|  17.8k|  int noenv;
  597|  17.8k|  luaL_newmetatable(L, "_LOADLIB");
  598|  17.8k|  lj_lib_pushcf(L, lj_cf_package_unloadlib, 1);
  ------------------
  |  |   78|  17.8k|#define lj_lib_pushcf(L, fn, id)	(lj_lib_pushcc(L, (fn), (id), 0))
  ------------------
  599|  17.8k|  lua_setfield(L, -2, "__gc");
  600|  17.8k|  luaL_register(L, LUA_LOADLIBNAME, package_lib);
  ------------------
  |  |   19|  17.8k|#define LUA_LOADLIBNAME	"package"
  ------------------
  601|  17.8k|  lua_copy(L, -1, LUA_ENVIRONINDEX);
  ------------------
  |  |   37|  17.8k|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  602|  17.8k|  lua_createtable(L, sizeof(package_loaders)/sizeof(package_loaders[0])-1, 0);
  603|  89.1k|  for (i = 0; package_loaders[i] != NULL; i++) {
  ------------------
  |  Branch (603:15): [True: 71.3k, False: 17.8k]
  ------------------
  604|  71.3k|    lj_lib_pushcf(L, package_loaders[i], 1);
  ------------------
  |  |   78|  71.3k|#define lj_lib_pushcf(L, fn, id)	(lj_lib_pushcc(L, (fn), (id), 0))
  ------------------
  605|  71.3k|    lua_rawseti(L, -2, i+1);
  606|  71.3k|  }
  607|       |#if LJ_52
  608|       |  lua_pushvalue(L, -1);
  609|       |  lua_setfield(L, -3, "searchers");
  610|       |#endif
  611|  17.8k|  lua_setfield(L, -2, "loaders");
  612|  17.8k|  lua_getfield(L, LUA_REGISTRYINDEX, "LUA_NOENV");
  ------------------
  |  |   36|  17.8k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  613|  17.8k|  noenv = lua_toboolean(L, -1);
  614|  17.8k|  lua_pop(L, 1);
  ------------------
  |  |  256|  17.8k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  615|  17.8k|  setpath(L, "path", LUA_PATH, LUA_PATH_DEFAULT, noenv);
  ------------------
  |  |   68|  17.8k|#define LUA_PATH	"LUA_PATH"
  ------------------
                setpath(L, "path", LUA_PATH, LUA_PATH_DEFAULT, noenv);
  ------------------
  |  |   63|  17.8k|#define LUA_PATH_DEFAULT	"./?.lua" LUA_JPATH LUA_LLPATH LUA_RLPATH
  |  |  ------------------
  |  |  |  |   59|  17.8k|#define LUA_LLPATH	";" LUA_LLDIR "?.lua;" LUA_LLDIR "?/init.lua"
  |  |  ------------------
  ------------------
  616|  17.8k|  setpath(L, "cpath", LUA_CPATH, LUA_CPATH_DEFAULT, noenv);
  ------------------
  |  |   69|  17.8k|#define LUA_CPATH	"LUA_CPATH"
  ------------------
                setpath(L, "cpath", LUA_CPATH, LUA_CPATH_DEFAULT, noenv);
  ------------------
  |  |   64|  17.8k|#define LUA_CPATH_DEFAULT	"./?.so" LUA_LCPATH1 LUA_RCPATH LUA_LCPATH2
  |  |  ------------------
  |  |  |  |   61|  17.8k|#define LUA_LCPATH2	";" LUA_LCDIR "loadall.so"
  |  |  ------------------
  ------------------
  617|  17.8k|  lua_pushliteral(L, LUA_PATH_CONFIG);
  ------------------
  |  |  276|  17.8k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  618|  17.8k|  lua_setfield(L, -2, "config");
  619|  17.8k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_LOADED", 16);
  ------------------
  |  |   36|  17.8k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  620|  17.8k|  lua_setfield(L, -2, "loaded");
  621|  17.8k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_PRELOAD", 4);
  ------------------
  |  |   36|  17.8k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  622|  17.8k|  lua_setfield(L, -2, "preload");
  623|  17.8k|  lua_pushvalue(L, LUA_GLOBALSINDEX);
  ------------------
  |  |   38|  17.8k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  624|  17.8k|  luaL_register(L, NULL, package_global);
  625|  17.8k|  lua_pop(L, 1);
  ------------------
  |  |  256|  17.8k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  626|  17.8k|  return 1;
  627|  17.8k|}
lib_package.c:lj_cf_package_loader_preload:
  411|  10.4k|{
  412|  10.4k|  const char *name = luaL_checkstring(L, 1);
  ------------------
  |  |  103|  10.4k|#define luaL_checkstring(L,n)	(luaL_checklstring(L, (n), NULL))
  ------------------
  413|  10.4k|  lua_getfield(L, LUA_ENVIRONINDEX, "preload");
  ------------------
  |  |   37|  10.4k|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  414|  10.4k|  if (!lua_istable(L, -1))
  ------------------
  |  |  267|  10.4k|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|  10.4k|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (414:7): [True: 0, False: 10.4k]
  ------------------
  415|      0|    luaL_error(L, LUA_QL("package.preload") " must be a table");
  ------------------
  |  |   87|      0|#define LUA_QL(x)	"'" x "'"
  ------------------
  416|  10.4k|  lua_getfield(L, -1, name);
  417|  10.4k|  if (lua_isnil(L, -1)) {  /* Not found? */
  ------------------
  |  |  269|  10.4k|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|  10.4k|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 0, False: 10.4k]
  |  |  ------------------
  ------------------
  418|      0|    const char *bcname = mksymname(L, name, SYMPREFIX_BC);
  ------------------
  |  |   33|      0|#define SYMPREFIX_BC		"luaJIT_BC_%s"
  ------------------
  419|      0|    const char *bcdata = ll_bcsym(NULL, bcname);
  420|      0|    if (bcdata == NULL || luaL_loadbuffer(L, bcdata, ~(size_t)0, name) != 0)
  ------------------
  |  Branch (420:9): [True: 0, False: 0]
  |  Branch (420:27): [True: 0, False: 0]
  ------------------
  421|      0|      lua_pushfstring(L, "\n\tno field package.preload['%s']", name);
  422|      0|  }
  423|  10.4k|  return 1;
  424|  10.4k|}
lib_package.c:setpath:
  552|  35.6k|{
  553|       |#if LJ_TARGET_CONSOLE
  554|       |  const char *path = NULL;
  555|       |  UNUSED(envname);
  556|       |#else
  557|  35.6k|  const char *path = getenv(envname);
  558|  35.6k|#endif
  559|  35.6k|  if (path == NULL || noenv) {
  ------------------
  |  Branch (559:7): [True: 35.6k, False: 0]
  |  Branch (559:23): [True: 0, False: 0]
  ------------------
  560|  35.6k|    lua_pushstring(L, def);
  561|  35.6k|  } else {
  562|      0|    path = luaL_gsub(L, path, LUA_PATHSEP LUA_PATHSEP,
  ------------------
  |  |   78|      0|#define LUA_PATHSEP	";"
  ------------------
                  path = luaL_gsub(L, path, LUA_PATHSEP LUA_PATHSEP,
  ------------------
  |  |   78|      0|#define LUA_PATHSEP	";"
  ------------------
  563|      0|			      LUA_PATHSEP AUXMARK LUA_PATHSEP);
  ------------------
  |  |   78|      0|#define LUA_PATHSEP	";"
  ------------------
              			      LUA_PATHSEP AUXMARK LUA_PATHSEP);
  ------------------
  |  |   78|      0|#define LUA_PATHSEP	";"
  ------------------
  564|      0|    luaL_gsub(L, path, AUXMARK, def);
  ------------------
  |  |  548|      0|#define AUXMARK		"\1"
  ------------------
  565|      0|    lua_remove(L, -2);
  566|      0|  }
  567|  35.6k|  setprogdir(L);
  ------------------
  |  |   29|  35.6k|#define setprogdir(L)		((void)0)
  ------------------
  568|  35.6k|  lua_setfield(L, -2, fieldname);
  569|  35.6k|}
lib_package.c:lj_cf_package_require:
  431|  11.0k|{
  432|  11.0k|  const char *name = luaL_checkstring(L, 1);
  ------------------
  |  |  103|  11.0k|#define luaL_checkstring(L,n)	(luaL_checklstring(L, (n), NULL))
  ------------------
  433|  11.0k|  int i;
  434|  11.0k|  lua_settop(L, 1);  /* _LOADED table will be at index 2 */
  435|  11.0k|  lua_getfield(L, LUA_REGISTRYINDEX, "_LOADED");
  ------------------
  |  |   36|  11.0k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  436|  11.0k|  lua_getfield(L, 2, name);
  437|  11.0k|  if (lua_toboolean(L, -1)) {  /* is it there? */
  ------------------
  |  Branch (437:7): [True: 642, False: 10.4k]
  ------------------
  438|    642|    if ((L->top-1)->u64 == KEY_SENTINEL)  /* check loops */
  ------------------
  |  |  428|    642|#define KEY_SENTINEL	(U64x(80000000,00000000)|'s')
  |  |  ------------------
  |  |  |  |   94|    642|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (438:9): [True: 0, False: 642]
  ------------------
  439|      0|      luaL_error(L, "loop or previous error loading module " LUA_QS, name);
  ------------------
  |  |   88|      0|#define LUA_QS		LUA_QL("%s")
  |  |  ------------------
  |  |  |  |   87|      0|#define LUA_QL(x)	"'" x "'"
  |  |  ------------------
  ------------------
  440|    642|    return 1;  /* package is already loaded */
  441|    642|  }
  442|       |  /* else must load it; iterate over available loaders */
  443|  10.4k|  lua_getfield(L, LUA_ENVIRONINDEX, "loaders");
  ------------------
  |  |   37|  10.4k|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  444|  10.4k|  if (!lua_istable(L, -1))
  ------------------
  |  |  267|  10.4k|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|  10.4k|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (444:7): [True: 0, False: 10.4k]
  ------------------
  445|      0|    luaL_error(L, LUA_QL("package.loaders") " must be a table");
  ------------------
  |  |   87|      0|#define LUA_QL(x)	"'" x "'"
  ------------------
  446|  10.4k|  lua_pushliteral(L, "");  /* error message accumulator */
  ------------------
  |  |  276|  10.4k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  447|  10.4k|  for (i = 1; ; i++) {
  448|  10.4k|    lua_rawgeti(L, -2, i);  /* get a loader */
  449|  10.4k|    if (lua_isnil(L, -1))
  ------------------
  |  |  269|  10.4k|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|  10.4k|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 0, False: 10.4k]
  |  |  ------------------
  ------------------
  450|      0|      luaL_error(L, "module " LUA_QS " not found:%s",
  451|      0|		 name, lua_tostring(L, -2));
  ------------------
  |  |  281|      0|#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
  ------------------
  452|  10.4k|    lua_pushstring(L, name);
  453|  10.4k|    lua_call(L, 1, 1);  /* call it */
  454|  10.4k|    if (lua_isfunction(L, -1))  /* did it find module? */
  ------------------
  |  |  266|  10.4k|#define lua_isfunction(L,n)	(lua_type(L, (n)) == LUA_TFUNCTION)
  |  |  ------------------
  |  |  |  |   81|  10.4k|#define LUA_TFUNCTION		6
  |  |  ------------------
  |  |  |  Branch (266:29): [True: 10.4k, False: 0]
  |  |  ------------------
  ------------------
  455|  10.4k|      break;  /* module loaded successfully */
  456|      0|    else if (lua_isstring(L, -1))  /* loader returned error message? */
  ------------------
  |  Branch (456:14): [True: 0, False: 0]
  ------------------
  457|      0|      lua_concat(L, 2);  /* accumulate it */
  458|      0|    else
  459|      0|      lua_pop(L, 1);
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  460|  10.4k|  }
  461|  10.4k|  (L->top++)->u64 = KEY_SENTINEL;
  ------------------
  |  |  428|  10.4k|#define KEY_SENTINEL	(U64x(80000000,00000000)|'s')
  |  |  ------------------
  |  |  |  |   94|  10.4k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  462|  10.4k|  lua_setfield(L, 2, name);  /* _LOADED[name] = sentinel */
  463|  10.4k|  lua_pushstring(L, name);  /* pass name as argument to module */
  464|  10.4k|  lua_call(L, 1, 1);  /* run loaded module */
  465|  10.4k|  if (!lua_isnil(L, -1))  /* non-nil return? */
  ------------------
  |  |  269|  10.4k|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|  10.4k|#define LUA_TNIL		0
  |  |  ------------------
  ------------------
  |  Branch (465:7): [True: 10.4k, False: 0]
  ------------------
  466|  10.4k|    lua_setfield(L, 2, name);  /* _LOADED[name] = returned value */
  467|  10.4k|  lua_getfield(L, 2, name);
  468|  10.4k|  if ((L->top-1)->u64 == KEY_SENTINEL) {   /* module did not set a value? */
  ------------------
  |  |  428|  10.4k|#define KEY_SENTINEL	(U64x(80000000,00000000)|'s')
  |  |  ------------------
  |  |  |  |   94|  10.4k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (468:7): [True: 0, False: 10.4k]
  ------------------
  469|      0|    lua_pushboolean(L, 1);  /* use true as result */
  470|      0|    lua_pushvalue(L, -1);  /* extra copy to be returned */
  471|      0|    lua_setfield(L, 2, name);  /* _LOADED[name] = true */
  472|      0|  }
  473|  10.4k|  lj_lib_checkfpu(L);
  ------------------
  |  |   74|  10.4k|#define lj_lib_checkfpu(L)	UNUSED(L)
  |  |  ------------------
  |  |  |  |   91|  10.4k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  474|  10.4k|  return 1;
  475|  11.0k|}

luaopen_string:
  675|  17.8k|{
  676|  17.8k|  GCtab *mt;
  677|  17.8k|  global_State *g;
  678|  17.8k|  LJ_LIB_REG(L, LUA_STRLIBNAME, string);
  ------------------
  |  |   92|  17.8k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  679|  17.8k|  mt = lj_tab_new(L, 0, 1);
  680|       |  /* NOBARRIER: basemt is a GC root. */
  681|  17.8k|  g = G(L);
  ------------------
  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  682|  17.8k|  setgcref(basemt_it(g, LJ_TSTR), obj2gco(mt));
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  683|  17.8k|  settabV(L, lj_tab_setstr(L, mt, mmname_str(g, MM_index)), tabV(L->top-1));
  ------------------
  |  |  590|  17.8k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  ------------------
  |  |  |  |  315|  17.8k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|  17.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                settabV(L, lj_tab_setstr(L, mt, mmname_str(g, MM_index)), tabV(L->top-1));
  ------------------
  |  |  864|  17.8k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  17.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  17.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  684|      0|  mt->nomm = (uint8_t)(~(1u<<MM_index));
  685|  17.8k|#if LJ_HASBUFFER
  686|  17.8k|  lj_lib_prereg(L, LUA_STRLIBNAME ".buffer", luaopen_string_buffer, tabV(L->top-1));
  ------------------
  |  |   15|  17.8k|#define LUA_STRLIBNAME	"string"
  ------------------
                lj_lib_prereg(L, LUA_STRLIBNAME ".buffer", luaopen_string_buffer, tabV(L->top-1));
  ------------------
  |  |  864|  17.8k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  17.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  17.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  687|      0|#endif
  688|      0|  return 1;
  689|  17.8k|}

luaopen_table:
  317|  17.8k|{
  318|  17.8k|  LJ_LIB_REG(L, LUA_TABLIBNAME, table);
  ------------------
  |  |   92|  17.8k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  319|       |#if LJ_52
  320|       |  lua_getglobal(L, "unpack");
  321|       |  lua_setfield(L, -2, "unpack");
  322|       |#endif
  323|  17.8k|  lj_lib_prereg(L, LUA_TABLIBNAME ".new", luaopen_table_new, tabV(L->top-1));
  ------------------
  |  |   16|  17.8k|#define LUA_TABLIBNAME	"table"
  ------------------
                lj_lib_prereg(L, LUA_TABLIBNAME ".new", luaopen_table_new, tabV(L->top-1));
  ------------------
  |  |  864|  17.8k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  17.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  17.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  324|  17.8k|  lj_lib_prereg(L, LUA_TABLIBNAME ".clear", luaopen_table_clear, tabV(L->top-1));
  ------------------
  |  |   16|  17.8k|#define LUA_TABLIBNAME	"table"
  ------------------
                lj_lib_prereg(L, LUA_TABLIBNAME ".clear", luaopen_table_clear, tabV(L->top-1));
  ------------------
  |  |  864|  17.8k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  17.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  17.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  325|      0|  return 1;
  326|  17.8k|}

lj_alloc_create:
 1392|  17.8k|{
 1393|  17.8k|  size_t tsize = DEFAULT_GRANULARITY;
  ------------------
  |  |   41|  17.8k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
 1394|       |#if LUAJIT_USE_ASAN
 1395|       |  tsize -= TOTAL_REDZONE_SIZE;
 1396|       |#endif
 1397|  17.8k|  char *tbase;
 1398|  17.8k|  INIT_MMAP();
  ------------------
  |  |  527|  17.8k|#define INIT_MMAP()		((void)0)
  ------------------
 1399|  17.8k|  UNUSED(rs);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1400|  17.8k|  tbase = (char *)(CALL_MMAP(rs, tsize));
  ------------------
  |  |  438|  17.8k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1401|  17.8k|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|  17.8k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  17.8k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  17.8k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1401:7): [True: 17.8k, False: 0]
  ------------------
 1402|  17.8k|    size_t msize = pad_request(sizeof(struct malloc_state));
  ------------------
  |  |  587|  17.8k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|  17.8k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  17.8k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1403|  17.8k|    mchunkptr mn;
 1404|       |#if LUAJIT_USE_ASAN
 1405|       |    mchunkptr msp = (mchunkptr)(tbase + align_offset(chunk2mem(tbase) - REDZONE_SIZE));
 1406|       |    mstate m = (mstate)(chunk2mem(msp) - REDZONE_SIZE);
 1407|       |#else
 1408|  17.8k|    mchunkptr msp = align_as_chunk(tbase);
  ------------------
  |  |  579|  17.8k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  17.8k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  17.8k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1409|  17.8k|    mstate m = (mstate)(chunk2mem(msp));
  ------------------
  |  |  575|  17.8k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  17.8k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  17.8k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1410|  17.8k|#endif
 1411|  17.8k|    memset(m, 0, msize);
 1412|  17.8k|    msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  595|  17.8k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  596|  17.8k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|  17.8k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
 1413|  17.8k|    m->seg.base = tbase;
 1414|  17.8k|    m->seg.size = tsize;
 1415|  17.8k|    m->release_checks = MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|  17.8k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1416|  17.8k|    init_bins(m);
 1417|       |#if LUAJIT_USE_ASAN
 1418|       |    mn = next_chunk((mchunkptr)((char *)(m) - TWO_SIZE_T_SIZES));
 1419|       |#else
 1420|  17.8k|    mn = next_chunk(mem2chunk(m));
  ------------------
  |  |  615|  17.8k|#define next_chunk(p)	((mchunkptr)(((char *)(p)) + ((p)->head & ~INUSE_BITS)))
  |  |  ------------------
  |  |  |  |  597|  17.8k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  17.8k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  17.8k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  17.8k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1421|  17.8k|#endif
 1422|  17.8k|    init_top(m, mn, (size_t)((tbase + tsize) - (char *)mn) - TOP_FOOT_SIZE);
  ------------------
  |  |  754|  17.8k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  17.8k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  17.8k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|  17.8k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  17.8k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  17.8k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|  17.8k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  17.8k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1423|  17.8k|    return m;
 1424|  17.8k|  }
 1425|      0|  return NULL;
 1426|  17.8k|}
lj_alloc_setprng:
 1429|  17.8k|{
 1430|  17.8k|  mstate ms = (mstate)msp;
 1431|  17.8k|  ms->prng = rs;
 1432|  17.8k|}
lj_alloc_destroy:
 1435|  17.8k|{
 1436|  17.8k|  mstate ms = (mstate)msp;
 1437|  17.8k|  msegmentptr sp = &ms->seg;
 1438|  35.6k|  while (sp != 0) {
  ------------------
  |  Branch (1438:10): [True: 17.8k, False: 17.8k]
  ------------------
 1439|  17.8k|    char *base = sp->base;
 1440|  17.8k|    size_t size = sp->size;
 1441|  17.8k|    sp = sp->next;
 1442|       |#if LUAJIT_USE_ASAN
 1443|       |    ASAN_UNPOISON_MEMORY_REGION(base, size);
 1444|       |#endif
 1445|  17.8k|    CALL_MUNMAP(base, size);
 1446|  17.8k|  }
 1447|  17.8k|}
lj_alloc_f:
 1711|  22.9M|{
 1712|  22.9M|  (void)osize;
 1713|  22.9M|  if (nsize == 0) {
  ------------------
  |  Branch (1713:7): [True: 11.4M, False: 11.4M]
  ------------------
 1714|  11.4M|    return lj_alloc_free(msp, ptr);
 1715|  11.4M|  } else if (ptr == NULL) {
  ------------------
  |  Branch (1715:14): [True: 11.3M, False: 73.9k]
  ------------------
 1716|  11.3M|    return lj_alloc_malloc(msp, nsize);
 1717|  11.3M|  } else {
 1718|  73.9k|    return lj_alloc_realloc(msp, ptr, nsize);
 1719|  73.9k|  }
 1720|  22.9M|}
lj_alloc.c:mmap_probe:
  334|  17.8k|{
  335|       |  /* Hint for next allocation. Doesn't need to be thread-safe. */
  336|  17.8k|  static uintptr_t hint_addr = 0;
  337|  17.8k|  int olderr = errno;
  338|  17.8k|  int retry;
  339|       |#if LUAJIT_USE_ASAN
  340|       |  size_t mem_size = size;
  341|       |  size = (size_t)align_up((void *)size, SIZE_ALIGNMENT) + TOTAL_REDZONE_SIZE;
  342|       |#endif
  343|  17.8k|  for (retry = 0; retry < LJ_ALLOC_MMAP_PROBE_MAX; retry++) {
  ------------------
  |  |  228|  17.8k|#define LJ_ALLOC_MMAP_PROBE_MAX		30
  ------------------
  |  Branch (343:19): [True: 17.8k, False: 0]
  ------------------
  344|  17.8k|    void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  214|  17.8k|#define MMAP_PROT		(PROT_READ|PROT_WRITE)
  ------------------
                  void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  225|  17.8k|#define MMAP_FLAGS_PROBE	MMAP_FLAGS
  |  |  ------------------
  |  |  |  |  218|  17.8k|#define MMAP_FLAGS		(MAP_PRIVATE|MAP_ANONYMOUS)
  |  |  ------------------
  ------------------
  345|  17.8k|    uintptr_t addr = (uintptr_t)p;
  346|  17.8k|    if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  102|  17.8k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                  if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  231|  35.6k|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (346:9): [True: 17.8k, False: 0]
  |  Branch (346:42): [True: 17.8k, False: 0]
  ------------------
  347|  17.8k|	((addr + size) >> LJ_ALLOC_MBITS) == 0) {
  ------------------
  |  |  102|  17.8k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (347:2): [True: 17.8k, False: 0]
  ------------------
  348|       |      /* We got a suitable address. Bump the hint address. */
  349|  17.8k|      hint_addr = addr + size;
  350|  17.8k|      errno = olderr;
  351|       |#if LUAJIT_USE_ASAN
  352|       |      p = mark_memory_region(p, mem_size, size);
  353|       |#endif
  354|  17.8k|      return p;
  355|  17.8k|    }
  356|      0|    if (p != MFAIL) {
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|      0|      munmap(p, size);
  358|      0|    } else if (errno == ENOMEM) {
  ------------------
  |  Branch (358:16): [True: 0, False: 0]
  ------------------
  359|      0|      return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  360|      0|    }
  361|      0|    if (hint_addr) {
  ------------------
  |  Branch (361:9): [True: 0, False: 0]
  ------------------
  362|       |      /* First, try linear probing. */
  363|      0|      if (retry < LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (363:11): [True: 0, False: 0]
  ------------------
  364|      0|	hint_addr += 0x1000000;
  365|      0|	if (((hint_addr + size) >> LJ_ALLOC_MBITS) != 0)
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (365:6): [True: 0, False: 0]
  ------------------
  366|      0|	  hint_addr = 0;
  367|      0|	continue;
  368|      0|      } else if (retry == LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (368:18): [True: 0, False: 0]
  ------------------
  369|       |	/* Next, try a no-hint probe to get back an ASLR address. */
  370|      0|	hint_addr = 0;
  371|      0|	continue;
  372|      0|      }
  373|      0|    }
  374|       |    /* Finally, try pseudo-random probing. */
  375|      0|    do {
  376|      0|      hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                    hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  648|      0|#define LJ_PAGESIZE		4096
  ------------------
  377|      0|    } while (hint_addr < LJ_ALLOC_MMAP_PROBE_LOWER);
  ------------------
  |  |  231|      0|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (377:14): [True: 0, False: 0]
  ------------------
  378|      0|  }
  379|      0|  errno = olderr;
  380|      0|  return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  381|  17.8k|}
lj_alloc.c:init_bins:
 1051|  17.8k|{
 1052|       |  /* Establish circular links for smallbins */
 1053|  17.8k|  bindex_t i;
 1054|   588k|  for (i = 0; i < NSMALLBINS; i++) {
  ------------------
  |  |  675|   588k|#define NSMALLBINS		(32U)
  ------------------
  |  Branch (1054:15): [True: 570k, False: 17.8k]
  ------------------
 1055|   570k|    sbinptr bin = smallbin_at(m,i);
  ------------------
  |  |  764|   570k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1056|   570k|    bin->fd = bin->bk = bin;
 1057|   570k|  }
 1058|  17.8k|}
lj_alloc.c:init_top:
 1030|  17.8k|{
 1031|       |  /* Ensure alignment */
 1032|  17.8k|  void *t = chunk2mem(p);
  ------------------
  |  |  575|  17.8k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  17.8k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  17.8k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1033|       |#if LUAJIT_USE_ASAN
 1034|       |  t -= REDZONE_SIZE;
 1035|       |#endif
 1036|  17.8k|  size_t offset = align_offset(t);
  ------------------
  |  |   66|  17.8k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 17.8k, False: 0]
  |  |  ------------------
  |  |   67|  17.8k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1037|       |
 1038|  17.8k|  p = (mchunkptr)((char *)p + offset);
 1039|  17.8k|  psize -= offset;
 1040|       |
 1041|  17.8k|  m->top = p;
 1042|  17.8k|  m->topsize = psize;
 1043|  17.8k|  p->head = psize | PINUSE_BIT;
  ------------------
  |  |  595|  17.8k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1044|       |  /* set size of fake trailing chunk holding overhead space only once */
 1045|  17.8k|  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  611|  17.8k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  754|  17.8k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  17.8k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  17.8k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|  17.8k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  17.8k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  17.8k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|  17.8k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  17.8k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  17.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  17.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1046|  17.8k|  m->trim_check = DEFAULT_TRIM_THRESHOLD; /* reset on each update */
  ------------------
  |  |   42|  17.8k|#define DEFAULT_TRIM_THRESHOLD	((size_t)2U * (size_t)1024U * (size_t)1024U)
  ------------------
 1047|  17.8k|}
lj_alloc.c:CALL_MUNMAP:
  472|  17.8k|{
  473|  17.8k|  int olderr = errno;
  474|       |#if LUAJIT_USE_ASAN
  475|       |  memmove(ptr, ptr, size); /* check that memory is not poisoned */
  476|       |  size = asan_get_size(ptr, POISON_SIZE);
  477|       |  ptr -= REDZONE_SIZE;
  478|       |#endif
  479|  17.8k|  int ret = munmap(ptr, size);
  480|       |#if LUAJIT_USE_ASAN
  481|       |  if (ret == 0) {
  482|       |    ASAN_POISON_MEMORY_REGION(ptr, size);
  483|       |  }
  484|       |#endif
  485|  17.8k|  errno = olderr;
  486|  17.8k|  return ret;
  487|  17.8k|}
lj_alloc.c:lj_alloc_free:
 1560|  11.5M|{
 1561|       |#if LUAJIT_USE_ASAN
 1562|       |  if (ptr != 0) {    
 1563|       |    size_t mem_size = asan_get_size(ptr, MEM_SIZE);
 1564|       |    size_t poison_size = asan_get_size(ptr, POISON_SIZE);
 1565|       |
 1566|       |    memmove(ptr, ptr, mem_size);
 1567|       |    ASAN_POISON_MEMORY_REGION(ptr - REDZONE_SIZE, poison_size);
 1568|       |  }
 1569|       |  return NULL;
 1570|       |#else
 1571|  11.5M|  if (ptr != 0) {
  ------------------
  |  Branch (1571:7): [True: 11.4M, False: 110k]
  ------------------
 1572|  11.4M|    mchunkptr p = mem2chunk(ptr);
  ------------------
  |  |  576|  11.4M|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  11.4M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  11.4M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1573|  11.4M|    mstate fm = (mstate)msp;
 1574|  11.4M|    size_t psize = chunksize(p);
  ------------------
  |  |  605|  11.4M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  11.4M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  11.4M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  11.4M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  11.4M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  11.4M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1575|  11.4M|    mchunkptr next = chunk_plus_offset(p, psize);
  ------------------
  |  |  611|  11.4M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1576|  11.4M|    if (!pinuse(p)) {
  ------------------
  |  |  604|  11.4M|#define pinuse(p)		((p)->head & PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  11.4M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  11.4M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1576:9): [True: 4.65M, False: 6.76M]
  ------------------
 1577|  4.65M|      size_t prevsize = p->prev_foot;
 1578|  4.65M|      if ((prevsize & IS_DIRECT_BIT) != 0) {
  ------------------
  |  |   74|  4.65M|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  4.65M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  |  Branch (1578:11): [True: 0, False: 4.65M]
  ------------------
 1579|      0|	prevsize &= ~IS_DIRECT_BIT;
  ------------------
  |  |   74|      0|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1580|      0|	psize += prevsize + DIRECT_FOOT_PAD;
  ------------------
  |  |  563|      0|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|      0|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1581|      0|	CALL_MUNMAP((char *)p - prevsize, psize);
 1582|      0|	return NULL;
 1583|  4.65M|      } else {
 1584|  4.65M|	mchunkptr prev = chunk_minus_offset(p, prevsize);
  ------------------
  |  |  612|  4.65M|#define chunk_minus_offset(p, s)	((mchunkptr)(((char *)(p)) - (s)))
  ------------------
 1585|  4.65M|	psize += prevsize;
 1586|  4.65M|	p = prev;
 1587|       |	/* consolidate backward */
 1588|  4.65M|	if (p != fm->dv) {
  ------------------
  |  Branch (1588:6): [True: 4.62M, False: 33.0k]
  ------------------
 1589|  4.62M|	  unlink_chunk(fm, p, prevsize);
  ------------------
  |  |  974|  4.62M|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|  4.62M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  4.62M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|  4.62M|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 2.82M, False: 1.79M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  844|  2.82M|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  845|  2.82M|  mchunkptr F = P->fd;\
  |  |  |  |  846|  2.82M|  mchunkptr B = P->bk;\
  |  |  |  |  847|  2.82M|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|  2.82M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|  2.82M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  848|  2.82M|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (848:7): [True: 380k, False: 2.44M]
  |  |  |  |  ------------------
  |  |  |  |  849|   380k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|   380k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   380k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  850|  2.44M|  } else {\
  |  |  |  |  851|  2.44M|    F->bk = B;\
  |  |  |  |  852|  2.44M|    B->fd = F;\
  |  |  |  |  853|  2.44M|  }\
  |  |  |  |  854|  2.82M|}
  |  |  ------------------
  |  |  975|  2.82M|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  921|  1.79M|#define unlink_large_chunk(M, X) {\
  |  |  |  |  922|  1.79M|  tchunkptr XP = X->parent;\
  |  |  |  |  923|  1.79M|  tchunkptr R;\
  |  |  |  |  924|  1.79M|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (924:7): [True: 342k, False: 1.45M]
  |  |  |  |  ------------------
  |  |  |  |  925|   342k|    tchunkptr F = X->fd;\
  |  |  |  |  926|   342k|    R = X->bk;\
  |  |  |  |  927|   342k|    F->bk = R;\
  |  |  |  |  928|   342k|    R->fd = F;\
  |  |  |  |  929|  1.45M|  } else {\
  |  |  |  |  930|  1.45M|    tchunkptr *RP;\
  |  |  |  |  931|  1.45M|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (931:9): [True: 353k, False: 1.10M]
  |  |  |  |  ------------------
  |  |  |  |  932|  1.45M|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (932:2): [True: 245k, False: 858k]
  |  |  |  |  ------------------
  |  |  |  |  933|   599k|      tchunkptr *CP;\
  |  |  |  |  934|   806k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (934:14): [True: 106k, False: 699k]
  |  |  |  |  ------------------
  |  |  |  |  935|   806k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (935:7): [True: 100k, False: 599k]
  |  |  |  |  ------------------
  |  |  |  |  936|   207k|	R = *(RP = CP);\
  |  |  |  |  937|   207k|      }\
  |  |  |  |  938|   599k|      *RP = 0;\
  |  |  |  |  939|   599k|    }\
  |  |  |  |  940|  1.45M|  }\
  |  |  |  |  941|  1.79M|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (941:7): [True: 1.60M, False: 199k]
  |  |  |  |  ------------------
  |  |  |  |  942|  1.60M|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|  1.60M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  943|  1.60M|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (943:9): [True: 597k, False: 1.00M]
  |  |  |  |  ------------------
  |  |  |  |  944|   597k|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (944:11): [True: 274k, False: 323k]
  |  |  |  |  ------------------
  |  |  |  |  945|   597k|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|   274k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   274k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  946|  1.00M|    } else {\
  |  |  |  |  947|  1.00M|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (947:11): [True: 558k, False: 443k]
  |  |  |  |  ------------------
  |  |  |  |  948|  1.00M|	XP->child[0] = R;\
  |  |  |  |  949|  1.00M|      else \
  |  |  |  |  950|  1.00M|	XP->child[1] = R;\
  |  |  |  |  951|  1.00M|    }\
  |  |  |  |  952|  1.60M|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (952:9): [True: 741k, False: 858k]
  |  |  |  |  ------------------
  |  |  |  |  953|   741k|      tchunkptr C0, C1;\
  |  |  |  |  954|   741k|      R->parent = XP;\
  |  |  |  |  955|   741k|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (955:11): [True: 356k, False: 384k]
  |  |  |  |  ------------------
  |  |  |  |  956|   356k|	R->child[0] = C0;\
  |  |  |  |  957|   356k|	C0->parent = R;\
  |  |  |  |  958|   356k|      }\
  |  |  |  |  959|   741k|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (959:11): [True: 172k, False: 569k]
  |  |  |  |  ------------------
  |  |  |  |  960|   172k|	R->child[1] = C1;\
  |  |  |  |  961|   172k|	C1->parent = R;\
  |  |  |  |  962|   172k|      }\
  |  |  |  |  963|   741k|    }\
  |  |  |  |  964|  1.60M|  }\
  |  |  |  |  965|  1.79M|}
  |  |  ------------------
  ------------------
 1590|  4.62M|	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  597|  33.0k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  33.0k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  33.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|  33.0k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  33.0k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  597|  33.0k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  33.0k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  33.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|  33.0k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  33.0k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1590:13): [True: 15.9k, False: 17.0k]
  ------------------
 1591|  15.9k|	  fm->dvsize = psize;
 1592|  15.9k|	  set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  631|  15.9k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  607|  15.9k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  15.9k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  15.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  627|  15.9k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  15.9k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  15.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  623|  15.9k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1593|  15.9k|	  return NULL;
 1594|  15.9k|	}
 1595|  4.65M|      }
 1596|  4.65M|    }
 1597|  11.4M|    if (!cinuse(next)) {  /* consolidate forward */
  ------------------
  |  |  603|  11.4M|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|  11.4M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  11.4M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1597:9): [True: 6.55M, False: 4.84M]
  ------------------
 1598|  6.55M|      if (next == fm->top) {
  ------------------
  |  Branch (1598:11): [True: 76.5k, False: 6.48M]
  ------------------
 1599|  76.5k|	size_t tsize = fm->topsize += psize;
 1600|  76.5k|	fm->top = p;
 1601|  76.5k|	p->head = tsize | PINUSE_BIT;
  ------------------
  |  |  595|  76.5k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  76.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1602|  76.5k|	if (p == fm->dv) {
  ------------------
  |  Branch (1602:6): [True: 5.64k, False: 70.9k]
  ------------------
 1603|  5.64k|	  fm->dv = 0;
 1604|  5.64k|	  fm->dvsize = 0;
 1605|  5.64k|	}
 1606|  76.5k|	if (tsize > fm->trim_check)
  ------------------
  |  Branch (1606:6): [True: 0, False: 76.5k]
  ------------------
 1607|      0|	  alloc_trim(fm, 0);
 1608|  76.5k|	return NULL;
 1609|  6.48M|      } else if (next == fm->dv) {
  ------------------
  |  Branch (1609:18): [True: 22.0k, False: 6.45M]
  ------------------
 1610|  22.0k|	size_t dsize = fm->dvsize += psize;
 1611|  22.0k|	fm->dv = p;
 1612|  22.0k|	set_size_and_pinuse_of_free_chunk(p, dsize);
  ------------------
  |  |  627|  22.0k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|  22.0k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  22.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|  22.0k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1613|  22.0k|	return NULL;
 1614|  6.45M|      } else {
 1615|  6.45M|	size_t nsize = chunksize(next);
  ------------------
  |  |  605|  6.45M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  6.45M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  6.45M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  6.45M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  6.45M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  6.45M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1616|  6.45M|	psize += nsize;
 1617|  6.45M|	unlink_chunk(fm, next, nsize);
  ------------------
  |  |  974|  6.45M|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|  6.45M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  6.45M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|  6.45M|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 3.95M, False: 2.50M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  844|  3.95M|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  845|  3.95M|  mchunkptr F = P->fd;\
  |  |  |  |  846|  3.95M|  mchunkptr B = P->bk;\
  |  |  |  |  847|  3.95M|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|  3.95M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|  3.95M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  848|  3.95M|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (848:7): [True: 670k, False: 3.28M]
  |  |  |  |  ------------------
  |  |  |  |  849|   670k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|   670k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   670k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  850|  3.28M|  } else {\
  |  |  |  |  851|  3.28M|    F->bk = B;\
  |  |  |  |  852|  3.28M|    B->fd = F;\
  |  |  |  |  853|  3.28M|  }\
  |  |  |  |  854|  3.95M|}
  |  |  ------------------
  |  |  975|  3.95M|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  921|  2.50M|#define unlink_large_chunk(M, X) {\
  |  |  |  |  922|  2.50M|  tchunkptr XP = X->parent;\
  |  |  |  |  923|  2.50M|  tchunkptr R;\
  |  |  |  |  924|  2.50M|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (924:7): [True: 434k, False: 2.06M]
  |  |  |  |  ------------------
  |  |  |  |  925|   434k|    tchunkptr F = X->fd;\
  |  |  |  |  926|   434k|    R = X->bk;\
  |  |  |  |  927|   434k|    F->bk = R;\
  |  |  |  |  928|   434k|    R->fd = F;\
  |  |  |  |  929|  2.06M|  } else {\
  |  |  |  |  930|  2.06M|    tchunkptr *RP;\
  |  |  |  |  931|  2.06M|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (931:9): [True: 369k, False: 1.70M]
  |  |  |  |  ------------------
  |  |  |  |  932|  2.06M|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (932:2): [True: 253k, False: 1.44M]
  |  |  |  |  ------------------
  |  |  |  |  933|   622k|      tchunkptr *CP;\
  |  |  |  |  934|   846k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (934:14): [True: 108k, False: 738k]
  |  |  |  |  ------------------
  |  |  |  |  935|   846k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (935:7): [True: 115k, False: 622k]
  |  |  |  |  ------------------
  |  |  |  |  936|   223k|	R = *(RP = CP);\
  |  |  |  |  937|   223k|      }\
  |  |  |  |  938|   622k|      *RP = 0;\
  |  |  |  |  939|   622k|    }\
  |  |  |  |  940|  2.06M|  }\
  |  |  |  |  941|  2.50M|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (941:7): [True: 2.21M, False: 291k]
  |  |  |  |  ------------------
  |  |  |  |  942|  2.21M|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|  2.21M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  943|  2.21M|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (943:9): [True: 997k, False: 1.21M]
  |  |  |  |  ------------------
  |  |  |  |  944|   997k|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (944:11): [True: 652k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  945|   997k|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|   652k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   652k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  946|  1.21M|    } else {\
  |  |  |  |  947|  1.21M|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (947:11): [True: 642k, False: 571k]
  |  |  |  |  ------------------
  |  |  |  |  948|  1.21M|	XP->child[0] = R;\
  |  |  |  |  949|  1.21M|      else \
  |  |  |  |  950|  1.21M|	XP->child[1] = R;\
  |  |  |  |  951|  1.21M|    }\
  |  |  |  |  952|  2.21M|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (952:9): [True: 765k, False: 1.44M]
  |  |  |  |  ------------------
  |  |  |  |  953|   765k|      tchunkptr C0, C1;\
  |  |  |  |  954|   765k|      R->parent = XP;\
  |  |  |  |  955|   765k|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (955:11): [True: 361k, False: 404k]
  |  |  |  |  ------------------
  |  |  |  |  956|   361k|	R->child[0] = C0;\
  |  |  |  |  957|   361k|	C0->parent = R;\
  |  |  |  |  958|   361k|      }\
  |  |  |  |  959|   765k|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (959:11): [True: 187k, False: 578k]
  |  |  |  |  ------------------
  |  |  |  |  960|   187k|	R->child[1] = C1;\
  |  |  |  |  961|   187k|	C1->parent = R;\
  |  |  |  |  962|   187k|      }\
  |  |  |  |  963|   765k|    }\
  |  |  |  |  964|  2.21M|  }\
  |  |  |  |  965|  2.50M|}
  |  |  ------------------
  ------------------
 1618|  6.45M|	set_size_and_pinuse_of_free_chunk(p, psize);
  ------------------
  |  |  627|  6.45M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|  6.45M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  6.45M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|  6.45M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1619|  6.45M|	if (p == fm->dv) {
  ------------------
  |  Branch (1619:6): [True: 11.4k, False: 6.44M]
  ------------------
 1620|  11.4k|	  fm->dvsize = psize;
 1621|  11.4k|	  return NULL;
 1622|  11.4k|	}
 1623|  6.45M|      }
 1624|  6.55M|    } else {
 1625|  4.84M|      set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  631|  4.84M|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  607|  4.84M|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  4.84M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  4.84M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  627|  4.84M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  4.84M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  4.84M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  623|  4.84M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1626|  4.84M|    }
 1627|       |
 1628|  11.2M|    if (is_small(psize)) {
  ------------------
  |  |  758|  11.2M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  677|  11.2M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  675|  11.2M|#define NSMALLBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (758:22): [True: 6.94M, False: 4.34M]
  |  |  ------------------
  ------------------
 1629|  6.94M|      insert_small_chunk(fm, p, psize);
  ------------------
  |  |  829|  6.94M|#define insert_small_chunk(M, P, S) {\
  |  |  830|  6.94M|  bindex_t I = small_index(S);\
  |  |  ------------------
  |  |  |  |  759|  6.94M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  6.94M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  831|  6.94M|  mchunkptr B = smallbin_at(M, I);\
  |  |  ------------------
  |  |  |  |  764|  6.94M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  ------------------
  |  |  832|  6.94M|  mchunkptr F = B;\
  |  |  833|  6.94M|  if (!smallmap_is_marked(M, I))\
  |  |  ------------------
  |  |  |  |  803|  6.94M|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  6.94M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (833:7): [True: 1.23M, False: 5.71M]
  |  |  ------------------
  |  |  834|  6.94M|    mark_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  801|  1.23M|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  1.23M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  835|  6.94M|  else\
  |  |  836|  6.94M|    F = B->fd;\
  |  |  837|  6.94M|  B->fd = P;\
  |  |  838|  6.94M|  F->bk = P;\
  |  |  839|  6.94M|  P->fd = F;\
  |  |  840|  6.94M|  P->bk = B;\
  |  |  841|  6.94M|}
  ------------------
 1630|  6.94M|    } else {
 1631|  4.34M|      tchunkptr tp = (tchunkptr)p;
 1632|  4.34M|      insert_large_chunk(fm, tp, psize);
  ------------------
  |  |  882|  4.34M|#define insert_large_chunk(M, X, S) {\
  |  |  883|  4.34M|  tbinptr *H;\
  |  |  884|  4.34M|  bindex_t I;\
  |  |  885|  4.34M|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  768|  4.34M|#define compute_tree_index(S, I)\
  |  |  |  |  769|  4.34M|{\
  |  |  |  |  770|  4.34M|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|  4.34M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  771|  4.34M|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (771:7): [True: 0, False: 4.34M]
  |  |  |  |  ------------------
  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  773|  4.34M|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (773:14): [True: 0, False: 4.34M]
  |  |  |  |  ------------------
  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  775|  4.34M|  } else {\
  |  |  |  |  776|  4.34M|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  4.34M|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  777|  4.34M|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|  4.34M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  778|  4.34M|  }\
  |  |  |  |  779|  4.34M|}
  |  |  ------------------
  |  |  886|  4.34M|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  765|  4.34M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  887|  4.34M|  X->index = I;\
  |  |  888|  4.34M|  X->child[0] = X->child[1] = 0;\
  |  |  889|  4.34M|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  807|  4.34M|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  4.34M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (889:7): [True: 963k, False: 3.38M]
  |  |  ------------------
  |  |  890|   963k|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  805|   963k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|   963k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  891|   963k|    *H = X;\
  |  |  892|   963k|    X->parent = (tchunkptr)H;\
  |  |  893|   963k|    X->fd = X->bk = X;\
  |  |  894|  3.38M|  } else {\
  |  |  895|  3.38M|    tchunkptr T = *H;\
  |  |  896|  3.38M|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  787|  3.38M|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|  3.38M|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:5): [True: 0, False: 3.38M]
  |  |  |  |  ------------------
  |  |  |  |  788|  3.38M|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|  3.38M|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.38M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|  3.38M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  897|  6.51M|    for (;;) {\
  |  |  898|  6.51M|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  605|  6.51M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  597|  6.51M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  595|  6.51M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|  6.51M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  596|  6.51M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|  6.51M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (898:11): [True: 5.74M, False: 778k]
  |  |  ------------------
  |  |  899|  5.74M|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|  5.74M|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|  5.74M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  900|  5.74M|	K <<= 1;\
  |  |  901|  5.74M|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (901:6): [True: 3.13M, False: 2.60M]
  |  |  ------------------
  |  |  902|  3.13M|	  T = *C;\
  |  |  903|  3.13M|	} else {\
  |  |  904|  2.60M|	  *C = X;\
  |  |  905|  2.60M|	  X->parent = T;\
  |  |  906|  2.60M|	  X->fd = X->bk = X;\
  |  |  907|  2.60M|	  break;\
  |  |  908|  2.60M|	}\
  |  |  909|  5.74M|      } else {\
  |  |  910|   778k|	tchunkptr F = T->fd;\
  |  |  911|   778k|	T->fd = F->bk = X;\
  |  |  912|   778k|	X->fd = F;\
  |  |  913|   778k|	X->bk = T;\
  |  |  914|   778k|	X->parent = 0;\
  |  |  915|   778k|	break;\
  |  |  916|   778k|      }\
  |  |  917|  6.51M|    }\
  |  |  918|  3.38M|  }\
  |  |  919|  4.34M|}
  ------------------
 1633|  4.34M|      if (--fm->release_checks == 0)
  ------------------
  |  Branch (1633:11): [True: 4.85k, False: 4.33M]
  ------------------
 1634|  4.85k|	release_unused_segments(fm);
 1635|  4.34M|    }
 1636|  11.2M|  }
 1637|  11.4M|  return NULL;
 1638|  11.5M|#endif
 1639|  11.5M|}
lj_alloc.c:release_unused_segments:
 1211|  4.85k|{
 1212|  4.85k|  size_t released = 0;
 1213|  4.85k|  size_t nsegs = 0;
 1214|  4.85k|  msegmentptr pred = &m->seg;
 1215|  4.85k|  msegmentptr sp = pred->next;
 1216|  4.85k|  while (sp != 0) {
  ------------------
  |  Branch (1216:10): [True: 0, False: 4.85k]
  ------------------
 1217|      0|    char *base = sp->base;
 1218|      0|    size_t size = sp->size;
 1219|      0|    msegmentptr next = sp->next;
 1220|      0|    nsegs++;
 1221|      0|    {
 1222|      0|      mchunkptr p = align_as_chunk(base);
  ------------------
  |  |  579|      0|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|      0| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|      0|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1223|      0|      size_t psize = chunksize(p);
  ------------------
  |  |  605|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1224|       |      /* Can unmap if first chunk holds entire segment and not pinned */
 1225|      0|      if (!cinuse(p) && (char *)p + psize == (char *)mem2chunk(sp)) {
  ------------------
  |  |  603|      0|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (!cinuse(p) && (char *)p + psize == (char *)mem2chunk(sp)) {
  ------------------
  |  |  576|      0|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1225:11): [True: 0, False: 0]
  |  Branch (1225:25): [True: 0, False: 0]
  ------------------
 1226|      0|	tchunkptr tp = (tchunkptr)p;
 1227|      0|	if (p == m->dv) {
  ------------------
  |  Branch (1227:6): [True: 0, False: 0]
  ------------------
 1228|      0|	  m->dv = 0;
 1229|      0|	  m->dvsize = 0;
 1230|      0|	} else {
 1231|      0|	  unlink_large_chunk(m, tp);
  ------------------
  |  |  921|      0|#define unlink_large_chunk(M, X) {\
  |  |  922|      0|  tchunkptr XP = X->parent;\
  |  |  923|      0|  tchunkptr R;\
  |  |  924|      0|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (924:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  925|      0|    tchunkptr F = X->fd;\
  |  |  926|      0|    R = X->bk;\
  |  |  927|      0|    F->bk = R;\
  |  |  928|      0|    R->fd = F;\
  |  |  929|      0|  } else {\
  |  |  930|      0|    tchunkptr *RP;\
  |  |  931|      0|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (931:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  932|      0|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (932:2): [True: 0, False: 0]
  |  |  ------------------
  |  |  933|      0|      tchunkptr *CP;\
  |  |  934|      0|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (934:14): [True: 0, False: 0]
  |  |  ------------------
  |  |  935|      0|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (935:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  936|      0|	R = *(RP = CP);\
  |  |  937|      0|      }\
  |  |  938|      0|      *RP = 0;\
  |  |  939|      0|    }\
  |  |  940|      0|  }\
  |  |  941|      0|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (941:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  942|      0|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  765|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  943|      0|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (943:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  944|      0|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (944:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  945|      0|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  806|      0|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  946|      0|    } else {\
  |  |  947|      0|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (947:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  948|      0|	XP->child[0] = R;\
  |  |  949|      0|      else \
  |  |  950|      0|	XP->child[1] = R;\
  |  |  951|      0|    }\
  |  |  952|      0|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (952:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  953|      0|      tchunkptr C0, C1;\
  |  |  954|      0|      R->parent = XP;\
  |  |  955|      0|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (955:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  956|      0|	R->child[0] = C0;\
  |  |  957|      0|	C0->parent = R;\
  |  |  958|      0|      }\
  |  |  959|      0|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (959:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  960|      0|	R->child[1] = C1;\
  |  |  961|      0|	C1->parent = R;\
  |  |  962|      0|      }\
  |  |  963|      0|    }\
  |  |  964|      0|  }\
  |  |  965|      0|}
  ------------------
 1232|      0|	}
 1233|      0|	if (CALL_MUNMAP(base, size) == 0) {
  ------------------
  |  Branch (1233:6): [True: 0, False: 0]
  ------------------
 1234|      0|	  released += size;
 1235|       |	  /* unlink obsoleted record */
 1236|      0|	  sp = pred;
 1237|      0|	  sp->next = next;
 1238|      0|	} else { /* back out if cannot unmap */
 1239|      0|	  insert_large_chunk(m, tp, psize);
  ------------------
  |  |  882|      0|#define insert_large_chunk(M, X, S) {\
  |  |  883|      0|  tbinptr *H;\
  |  |  884|      0|  bindex_t I;\
  |  |  885|      0|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  768|      0|#define compute_tree_index(S, I)\
  |  |  |  |  769|      0|{\
  |  |  |  |  770|      0|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  771|      0|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (771:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  773|      0|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (773:14): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  775|      0|  } else {\
  |  |  |  |  776|      0|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  777|      0|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  778|      0|  }\
  |  |  |  |  779|      0|}
  |  |  ------------------
  |  |  886|      0|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  765|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  887|      0|  X->index = I;\
  |  |  888|      0|  X->child[0] = X->child[1] = 0;\
  |  |  889|      0|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  807|      0|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (889:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  890|      0|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  805|      0|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  891|      0|    *H = X;\
  |  |  892|      0|    X->parent = (tchunkptr)H;\
  |  |  893|      0|    X->fd = X->bk = X;\
  |  |  894|      0|  } else {\
  |  |  895|      0|    tchunkptr T = *H;\
  |  |  896|      0|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  787|      0|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  788|      0|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  897|      0|    for (;;) {\
  |  |  898|      0|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  605|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  597|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (898:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  899|      0|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  900|      0|	K <<= 1;\
  |  |  901|      0|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (901:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  902|      0|	  T = *C;\
  |  |  903|      0|	} else {\
  |  |  904|      0|	  *C = X;\
  |  |  905|      0|	  X->parent = T;\
  |  |  906|      0|	  X->fd = X->bk = X;\
  |  |  907|      0|	  break;\
  |  |  908|      0|	}\
  |  |  909|      0|      } else {\
  |  |  910|      0|	tchunkptr F = T->fd;\
  |  |  911|      0|	T->fd = F->bk = X;\
  |  |  912|      0|	X->fd = F;\
  |  |  913|      0|	X->bk = T;\
  |  |  914|      0|	X->parent = 0;\
  |  |  915|      0|	break;\
  |  |  916|      0|      }\
  |  |  917|      0|    }\
  |  |  918|      0|  }\
  |  |  919|      0|}
  ------------------
 1240|      0|	}
 1241|      0|      }
 1242|      0|    }
 1243|      0|    pred = sp;
 1244|      0|    sp = next;
 1245|      0|  }
 1246|       |  /* Reset check counter */
 1247|  4.85k|  m->release_checks = nsegs > MAX_RELEASE_CHECK_RATE ?
  ------------------
  |  |   44|  4.85k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
  |  Branch (1247:23): [True: 0, False: 4.85k]
  ------------------
 1248|  4.85k|		      nsegs : MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|  9.70k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1249|  4.85k|  return released;
 1250|  4.85k|}
lj_alloc.c:lj_alloc_malloc:
 1450|  11.4M|{
 1451|       |#if LUAJIT_USE_ASAN
 1452|       |  size_t mem_size = nsize;
 1453|       |  size_t poison_size = (size_t)align_up((void *)nsize, SIZE_ALIGNMENT) + TOTAL_REDZONE_SIZE;
 1454|       |  nsize = poison_size;
 1455|       |#endif
 1456|  11.4M|  mstate ms = (mstate)msp;
 1457|  11.4M|  void *mem;
 1458|  11.4M|  size_t nb;
 1459|  11.4M|  if (nsize <= MAX_SMALL_REQUEST) {
  ------------------
  |  |  682|  11.4M|#define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  681|  11.4M|#define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  680|  11.4M|#define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  11.4M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  11.4M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  11.4M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |   62|  11.4M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  11.4M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  11.4M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  558|  11.4M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  11.4M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1459:7): [True: 10.9M, False: 442k]
  ------------------
 1460|  10.9M|    bindex_t idx;
 1461|  10.9M|    binmap_t smallbits;
 1462|  10.9M|    nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  583|  10.9M|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  567|  10.9M|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  10.9M|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  10.9M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  10.9M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  10.9M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  10.9M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  10.9M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  10.9M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  558|  10.9M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  10.9M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  10.9M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  567|    968|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|    968|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    968|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    968|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    968|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    968|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    968|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    968|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  587|  21.9M|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|  10.9M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  10.9M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  10.9M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  10.9M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  10.9M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  10.9M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  10.9M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  10.9M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1462:10): [True: 968, False: 10.9M]
  ------------------
 1463|  10.9M|    idx = small_index(nb);
  ------------------
  |  |  759|  10.9M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  677|  10.9M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1464|  10.9M|    smallbits = ms->smallmap >> idx;
 1465|       |
 1466|  10.9M|    if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
  ------------------
  |  Branch (1466:9): [True: 64.0k, False: 10.9M]
  ------------------
 1467|  64.0k|      mchunkptr b, p;
 1468|  64.0k|      idx += ~smallbits & 1;       /* Uses next bin if idx empty */
 1469|  64.0k|      b = smallbin_at(ms, idx);
  ------------------
  |  |  764|  64.0k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1470|  64.0k|      p = b->fd;
 1471|  64.0k|      unlink_first_small_chunk(ms, b, p, idx);
  ------------------
  |  |  857|  64.0k|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  858|  64.0k|  mchunkptr F = P->fd;\
  |  |  859|  64.0k|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (859:7): [True: 57.4k, False: 6.60k]
  |  |  ------------------
  |  |  860|  57.4k|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  802|  57.4k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  57.4k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  861|  57.4k|  } else {\
  |  |  862|  6.60k|    B->fd = F;\
  |  |  863|  6.60k|    F->bk = B;\
  |  |  864|  6.60k|  }\
  |  |  865|  64.0k|}
  ------------------
 1472|  64.0k|      set_inuse_and_pinuse(ms, p, small_index2size(idx));
  ------------------
  |  |  819|  64.0k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  64.0k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  64.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  64.0k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  64.0k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|  64.0k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  64.0k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  64.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1473|  64.0k|      mem = chunk2mem(p);
  ------------------
  |  |  575|  64.0k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  64.0k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  64.0k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1474|       |#if LUAJIT_USE_ASAN
 1475|       |      mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1476|       |#endif
 1477|  64.0k|      return mem;
 1478|  10.9M|    } else if (nb > ms->dvsize) {
  ------------------
  |  Branch (1478:16): [True: 9.91M, False: 1.01M]
  ------------------
 1479|  9.91M|      if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
  ------------------
  |  Branch (1479:11): [True: 167k, False: 9.75M]
  ------------------
 1480|   167k|	mchunkptr b, p, r;
 1481|   167k|	size_t rsize;
 1482|   167k|	binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
  ------------------
  |  |  810|   167k|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1483|   167k|	bindex_t i = lj_ffs(leftbits);
  ------------------
  |  |  148|   167k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1484|   167k|	b = smallbin_at(ms, i);
  ------------------
  |  |  764|   167k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1485|   167k|	p = b->fd;
 1486|   167k|	unlink_first_small_chunk(ms, b, p, i);
  ------------------
  |  |  857|   167k|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  858|   167k|  mchunkptr F = P->fd;\
  |  |  859|   167k|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (859:7): [True: 160k, False: 7.06k]
  |  |  ------------------
  |  |  860|   160k|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  802|   160k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|   160k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  861|   160k|  } else {\
  |  |  862|  7.06k|    B->fd = F;\
  |  |  863|  7.06k|    F->bk = B;\
  |  |  864|  7.06k|  }\
  |  |  865|   167k|}
  ------------------
 1487|   167k|	rsize = small_index2size(i) - nb;
  ------------------
  |  |  760|   167k|#define small_index2size(i)	((i)  << SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  677|   167k|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1488|       |	/* Fit here cannot be remainderless if 4byte sizes */
 1489|   167k|	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |   49|   167k|#define SIZE_T_SIZE		(sizeof(size_t))
  ------------------
              	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|   167k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|   167k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   167k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   167k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   167k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   167k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   167k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   167k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1489:6): [Folded - Ignored]
  |  Branch (1489:26): [True: 31.2k, False: 135k]
  ------------------
 1490|  31.2k|	  set_inuse_and_pinuse(ms, p, small_index2size(i));
  ------------------
  |  |  819|  31.2k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  31.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  31.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  31.2k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  31.2k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|  31.2k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  31.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  31.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   135k|	} else {
 1492|   135k|	  set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  824|   135k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|   135k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   135k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|   135k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   135k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1493|   135k|	  r = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|   135k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1494|   135k|	  set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|   135k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|   135k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   135k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|   135k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1495|   135k|	  replace_dv(ms, r, rsize);
  ------------------
  |  |  869|   135k|#define replace_dv(M, P, S) {\
  |  |  870|   135k|  size_t DVS = M->dvsize;\
  |  |  871|   135k|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (871:7): [True: 42.9k, False: 92.9k]
  |  |  ------------------
  |  |  872|  42.9k|    mchunkptr DV = M->dv;\
  |  |  873|  42.9k|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  829|  42.9k|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|  42.9k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|  42.9k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|  42.9k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|  42.9k|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|  42.9k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|  42.9k|  mchunkptr F = B;\
  |  |  |  |  833|  42.9k|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|  42.9k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  42.9k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 24.8k, False: 18.0k]
  |  |  |  |  ------------------
  |  |  |  |  834|  42.9k|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|  24.8k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  24.8k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|  42.9k|  else\
  |  |  |  |  836|  42.9k|    F = B->fd;\
  |  |  |  |  837|  42.9k|  B->fd = P;\
  |  |  |  |  838|  42.9k|  F->bk = P;\
  |  |  |  |  839|  42.9k|  P->fd = F;\
  |  |  |  |  840|  42.9k|  P->bk = B;\
  |  |  |  |  841|  42.9k|}
  |  |  ------------------
  |  |  874|  42.9k|  }\
  |  |  875|   135k|  M->dvsize = S;\
  |  |  876|   135k|  M->dv = P;\
  |  |  877|   135k|}
  ------------------
 1496|   135k|	}
 1497|   167k|	mem = chunk2mem(p);
  ------------------
  |  |  575|   167k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   167k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   167k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1498|       |#if LUAJIT_USE_ASAN
 1499|       |  mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1500|       |#endif
 1501|   167k|	return mem;
 1502|  9.75M|      } else if (ms->treemap != 0 && (mem = tmalloc_small(ms, nb)) != 0) {
  ------------------
  |  Branch (1502:18): [True: 35.3k, False: 9.71M]
  |  Branch (1502:38): [True: 35.3k, False: 0]
  ------------------
 1503|       |#if LUAJIT_USE_ASAN
 1504|       |  mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1505|       |#endif
 1506|  35.3k|	return mem;
 1507|  35.3k|      }
 1508|  9.91M|    }
 1509|  10.9M|  } else if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  582|   442k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  567|   442k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|   442k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   442k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   442k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   442k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   442k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   442k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   442k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1509:14): [True: 0, False: 442k]
  ------------------
 1510|      0|    nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
  ------------------
  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  ------------------
 1511|   442k|  } else {
 1512|   442k|    nb = pad_request(nsize);
  ------------------
  |  |  587|   442k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|   442k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   442k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   442k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   442k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   442k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   442k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   442k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   442k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1513|   442k|    if (ms->treemap != 0 && (mem = tmalloc_large(ms, nb)) != 0) {
  ------------------
  |  Branch (1513:9): [True: 25.7k, False: 416k]
  |  Branch (1513:29): [True: 12.2k, False: 13.5k]
  ------------------
 1514|       |#if LUAJIT_USE_ASAN
 1515|       |      mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1516|       |#endif
 1517|  12.2k|      return mem;
 1518|  12.2k|    }
 1519|   442k|  }
 1520|       |
 1521|  11.1M|  if (nb <= ms->dvsize) {
  ------------------
  |  Branch (1521:7): [True: 1.01M, False: 10.1M]
  ------------------
 1522|  1.01M|    size_t rsize = ms->dvsize - nb;
 1523|  1.01M|    mchunkptr p = ms->dv;
 1524|  1.01M|    if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
  ------------------
  |  |  567|  1.01M|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|  1.01M|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  1.01M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.01M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.01M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  1.01M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.01M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.01M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1524:9): [True: 910k, False: 105k]
  ------------------
 1525|   910k|      mchunkptr r = ms->dv = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|   910k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1526|   910k|      ms->dvsize = rsize;
 1527|   910k|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|   910k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|   910k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   910k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|   910k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1528|   910k|      set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  824|   910k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|   910k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   910k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|   910k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   910k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1529|   910k|    } else { /* exhaust dv */
 1530|   105k|      size_t dvs = ms->dvsize;
 1531|   105k|      ms->dvsize = 0;
 1532|   105k|      ms->dv = 0;
 1533|   105k|      set_inuse_and_pinuse(ms, p, dvs);
  ------------------
  |  |  819|   105k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|   105k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   105k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|   105k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   105k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|   105k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|   105k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   105k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1534|   105k|    }
 1535|  1.01M|    mem = chunk2mem(p);
  ------------------
  |  |  575|  1.01M|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  1.01M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.01M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1536|       |#if LUAJIT_USE_ASAN
 1537|       |    mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1538|       |#endif
 1539|  1.01M|    return mem;
 1540|  10.1M|  } else if (nb < ms->topsize) { /* Split top */
  ------------------
  |  Branch (1540:14): [True: 10.1M, False: 0]
  ------------------
 1541|  10.1M|    size_t rsize = ms->topsize -= nb;
 1542|  10.1M|    mchunkptr p = ms->top;
 1543|  10.1M|    mchunkptr r = ms->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|  10.1M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1544|  10.1M|    r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  595|  10.1M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  10.1M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1545|  10.1M|    set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  824|  10.1M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  10.1M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  10.1M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  10.1M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  10.1M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1546|  10.1M|    mem = chunk2mem(p);
  ------------------
  |  |  575|  10.1M|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  10.1M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  10.1M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|       |#if LUAJIT_USE_ASAN
 1548|       |    mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1549|       |#endif
 1550|  10.1M|    return mem;
 1551|  10.1M|  }
 1552|       |#if LUAJIT_USE_ASAN
 1553|       |  return mark_memory_region(alloc_sys(ms, nb) - REDZONE_SIZE, mem_size, poison_size);
 1554|       |#else
 1555|      0|  return alloc_sys(ms, nb);
 1556|  11.1M|#endif
 1557|  11.1M|}
lj_alloc.c:tmalloc_small:
 1360|  35.3k|{
 1361|  35.3k|  tchunkptr t, v;
 1362|  35.3k|  mchunkptr r;
 1363|  35.3k|  size_t rsize;
 1364|  35.3k|  bindex_t i = lj_ffs(m->treemap);
  ------------------
  |  |  148|  35.3k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1365|       |
 1366|  35.3k|  v = t = *treebin_at(m, i);
  ------------------
  |  |  765|  35.3k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1367|  35.3k|  rsize = chunksize(t) - nb;
  ------------------
  |  |  605|  35.3k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  35.3k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  35.3k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  35.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  35.3k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  35.3k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1368|       |
 1369|  36.9k|  while ((t = leftmost_child(t)) != 0) {
  ------------------
  |  |  659|  36.9k|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (659:28): [True: 1.38k, False: 35.5k]
  |  |  ------------------
  ------------------
  |  Branch (1369:10): [True: 1.60k, False: 35.3k]
  ------------------
 1370|  1.60k|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  605|  1.60k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  1.60k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  1.60k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.60k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  1.60k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  1.60k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1371|  1.60k|    if (trem < rsize) {
  ------------------
  |  Branch (1371:9): [True: 548, False: 1.05k]
  ------------------
 1372|    548|      rsize = trem;
 1373|    548|      v = t;
 1374|    548|    }
 1375|  1.60k|  }
 1376|       |
 1377|  35.3k|  r = chunk_plus_offset(v, nb);
  ------------------
  |  |  611|  35.3k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1378|  35.3k|  unlink_large_chunk(m, v);
  ------------------
  |  |  921|  35.3k|#define unlink_large_chunk(M, X) {\
  |  |  922|  35.3k|  tchunkptr XP = X->parent;\
  |  |  923|  35.3k|  tchunkptr R;\
  |  |  924|  35.3k|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (924:7): [True: 1.53k, False: 33.7k]
  |  |  ------------------
  |  |  925|  1.53k|    tchunkptr F = X->fd;\
  |  |  926|  1.53k|    R = X->bk;\
  |  |  927|  1.53k|    F->bk = R;\
  |  |  928|  1.53k|    R->fd = F;\
  |  |  929|  33.7k|  } else {\
  |  |  930|  33.7k|    tchunkptr *RP;\
  |  |  931|  33.7k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (931:9): [True: 128, False: 33.6k]
  |  |  ------------------
  |  |  932|  33.7k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (932:2): [True: 409, False: 33.2k]
  |  |  ------------------
  |  |  933|    537|      tchunkptr *CP;\
  |  |  934|    606|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (934:14): [True: 37, False: 569]
  |  |  ------------------
  |  |  935|    606|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (935:7): [True: 32, False: 537]
  |  |  ------------------
  |  |  936|     69|	R = *(RP = CP);\
  |  |  937|     69|      }\
  |  |  938|    537|      *RP = 0;\
  |  |  939|    537|    }\
  |  |  940|  33.7k|  }\
  |  |  941|  35.3k|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (941:7): [True: 35.3k, False: 0]
  |  |  ------------------
  |  |  942|  35.3k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  765|  35.3k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  943|  35.3k|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (943:9): [True: 34.8k, False: 500]
  |  |  ------------------
  |  |  944|  34.8k|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (944:11): [True: 32.8k, False: 1.94k]
  |  |  ------------------
  |  |  945|  34.8k|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  806|  32.8k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  32.8k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  946|  34.8k|    } else {\
  |  |  947|    500|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (947:11): [True: 494, False: 6]
  |  |  ------------------
  |  |  948|    500|	XP->child[0] = R;\
  |  |  949|    500|      else \
  |  |  950|    500|	XP->child[1] = R;\
  |  |  951|    500|    }\
  |  |  952|  35.3k|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (952:9): [True: 2.07k, False: 33.2k]
  |  |  ------------------
  |  |  953|  2.07k|      tchunkptr C0, C1;\
  |  |  954|  2.07k|      R->parent = XP;\
  |  |  955|  2.07k|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (955:11): [True: 436, False: 1.63k]
  |  |  ------------------
  |  |  956|    436|	R->child[0] = C0;\
  |  |  957|    436|	C0->parent = R;\
  |  |  958|    436|      }\
  |  |  959|  2.07k|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (959:11): [True: 81, False: 1.99k]
  |  |  ------------------
  |  |  960|     81|	R->child[1] = C1;\
  |  |  961|     81|	C1->parent = R;\
  |  |  962|     81|      }\
  |  |  963|  2.07k|    }\
  |  |  964|  35.3k|  }\
  |  |  965|  35.3k|}
  ------------------
 1379|  35.3k|  if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|  35.3k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|  35.3k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  35.3k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  35.3k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  35.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  35.3k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  35.3k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  35.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1379:7): [True: 1, False: 35.3k]
  ------------------
 1380|      1|    set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  819|      1|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|      1|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      1|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|      1|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      1|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|      1|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|      1|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      1|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1381|  35.3k|  } else {
 1382|  35.3k|    set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  824|  35.3k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  35.3k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  35.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  35.3k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  35.3k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1383|  35.3k|    set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|  35.3k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|  35.3k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  35.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|  35.3k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1384|  35.3k|    replace_dv(m, r, rsize);
  ------------------
  |  |  869|  35.3k|#define replace_dv(M, P, S) {\
  |  |  870|  35.3k|  size_t DVS = M->dvsize;\
  |  |  871|  35.3k|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (871:7): [True: 16.6k, False: 18.6k]
  |  |  ------------------
  |  |  872|  16.6k|    mchunkptr DV = M->dv;\
  |  |  873|  16.6k|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  829|  16.6k|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|  16.6k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|  16.6k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|  16.6k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|  16.6k|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|  16.6k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|  16.6k|  mchunkptr F = B;\
  |  |  |  |  833|  16.6k|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|  16.6k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  16.6k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 11.5k, False: 5.19k]
  |  |  |  |  ------------------
  |  |  |  |  834|  16.6k|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|  11.5k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  11.5k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|  16.6k|  else\
  |  |  |  |  836|  16.6k|    F = B->fd;\
  |  |  |  |  837|  16.6k|  B->fd = P;\
  |  |  |  |  838|  16.6k|  F->bk = P;\
  |  |  |  |  839|  16.6k|  P->fd = F;\
  |  |  |  |  840|  16.6k|  P->bk = B;\
  |  |  |  |  841|  16.6k|}
  |  |  ------------------
  |  |  874|  16.6k|  }\
  |  |  875|  35.3k|  M->dvsize = S;\
  |  |  876|  35.3k|  M->dv = P;\
  |  |  877|  35.3k|}
  ------------------
 1385|  35.3k|  }
 1386|  35.3k|  return chunk2mem(v);
  ------------------
  |  |  575|  35.3k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  35.3k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  35.3k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1387|  35.3k|}
lj_alloc.c:tmalloc_large:
 1296|  25.7k|{
 1297|  25.7k|  tchunkptr v = 0;
 1298|  25.7k|  size_t rsize = ~nb+1; /* Unsigned negation */
 1299|  25.7k|  tchunkptr t;
 1300|  25.7k|  bindex_t idx;
 1301|  25.7k|  compute_tree_index(nb, idx);
  ------------------
  |  |  768|  25.7k|#define compute_tree_index(S, I)\
  |  |  769|  25.7k|{\
  |  |  770|  25.7k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  ------------------
  |  |  |  |  679|  25.7k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  771|  25.7k|  if (X == 0) {\
  |  |  ------------------
  |  |  |  Branch (771:7): [True: 0, False: 25.7k]
  |  |  ------------------
  |  |  772|      0|    I = 0;\
  |  |  773|  25.7k|  } else if (X > 0xFFFF) {\
  |  |  ------------------
  |  |  |  Branch (773:14): [True: 0, False: 25.7k]
  |  |  ------------------
  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  ------------------
  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  775|  25.7k|  } else {\
  |  |  776|  25.7k|    unsigned int K = lj_fls(X);\
  |  |  ------------------
  |  |  |  |  149|  25.7k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  777|  25.7k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  ------------------
  |  |  |  |  679|  25.7k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  778|  25.7k|  }\
  |  |  779|  25.7k|}
  ------------------
 1302|       |
 1303|  25.7k|  if ((t = *treebin_at(m, idx)) != 0) {
  ------------------
  |  |  765|  25.7k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
  |  Branch (1303:7): [True: 8.67k, False: 17.0k]
  ------------------
 1304|       |    /* Traverse tree for this bin looking for node with size == nb */
 1305|  8.67k|    size_t sizebits = nb << leftshift_for_tree_index(idx);
  ------------------
  |  |  787|  8.67k|   ((i == NTREEBINS-1)? 0 : \
  |  |  ------------------
  |  |  |  |  676|  8.67k|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (787:5): [True: 0, False: 8.67k]
  |  |  ------------------
  |  |  788|  8.67k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   50|  8.67k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   55|  8.67k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |  679|  8.67k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  ------------------
 1306|  8.67k|    tchunkptr rst = 0;  /* The deepest untaken right subtree */
 1307|  10.5k|    for (;;) {
 1308|  10.5k|      tchunkptr rt;
 1309|  10.5k|      size_t trem = chunksize(t) - nb;
  ------------------
  |  |  605|  10.5k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  10.5k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  10.5k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  10.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  10.5k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  10.5k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1310|  10.5k|      if (trem < rsize) {
  ------------------
  |  Branch (1310:11): [True: 3.46k, False: 7.12k]
  ------------------
 1311|  3.46k|	v = t;
 1312|  3.46k|	if ((rsize = trem) == 0)
  ------------------
  |  Branch (1312:6): [True: 2.12k, False: 1.33k]
  ------------------
 1313|  2.12k|	  break;
 1314|  3.46k|      }
 1315|  8.46k|      rt = t->child[1];
 1316|  8.46k|      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   50|  8.46k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  ------------------
                    t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   55|  8.46k|#define SIZE_T_ONE		((size_t)1)
  ------------------
 1317|  8.46k|      if (rt != 0 && rt != t)
  ------------------
  |  Branch (1317:11): [True: 478, False: 7.98k]
  |  Branch (1317:22): [True: 278, False: 200]
  ------------------
 1318|    278|	rst = rt;
 1319|  8.46k|      if (t == 0) {
  ------------------
  |  Branch (1319:11): [True: 6.54k, False: 1.91k]
  ------------------
 1320|  6.54k|	t = rst; /* set t to least subtree holding sizes > nb */
 1321|  6.54k|	break;
 1322|  6.54k|      }
 1323|  1.91k|      sizebits <<= 1;
 1324|  1.91k|    }
 1325|  8.67k|  }
 1326|       |
 1327|  25.7k|  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
  ------------------
  |  Branch (1327:7): [True: 23.3k, False: 2.40k]
  |  Branch (1327:17): [True: 22.2k, False: 1.06k]
  ------------------
 1328|  22.2k|    binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
  ------------------
  |  |  810|  22.2k|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1329|  22.2k|    if (leftbits != 0)
  ------------------
  |  Branch (1329:9): [True: 9.49k, False: 12.7k]
  ------------------
 1330|  9.49k|      t = *treebin_at(m, lj_ffs(leftbits));
  ------------------
  |  |  765|  9.49k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1331|  22.2k|  }
 1332|       |
 1333|  38.2k|  while (t != 0) { /* find smallest of tree or subtree */
  ------------------
  |  Branch (1333:10): [True: 12.5k, False: 25.7k]
  ------------------
 1334|  12.5k|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  605|  12.5k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  12.5k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  12.5k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  12.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  12.5k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  12.5k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1335|  12.5k|    if (trem < rsize) {
  ------------------
  |  Branch (1335:9): [True: 9.92k, False: 2.61k]
  ------------------
 1336|  9.92k|      rsize = trem;
 1337|  9.92k|      v = t;
 1338|  9.92k|    }
 1339|  12.5k|    t = leftmost_child(t);
  ------------------
  |  |  659|  12.5k|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (659:28): [True: 510, False: 12.0k]
  |  |  ------------------
  ------------------
 1340|  12.5k|  }
 1341|       |
 1342|       |  /*  If dv is a better fit, return NULL so malloc will use it */
 1343|  25.7k|  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
  ------------------
  |  Branch (1343:7): [True: 12.9k, False: 12.7k]
  |  Branch (1343:17): [True: 12.2k, False: 740]
  ------------------
 1344|  12.2k|    mchunkptr r = chunk_plus_offset(v, nb);
  ------------------
  |  |  611|  12.2k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1345|  12.2k|    unlink_large_chunk(m, v);
  ------------------
  |  |  921|  12.2k|#define unlink_large_chunk(M, X) {\
  |  |  922|  12.2k|  tchunkptr XP = X->parent;\
  |  |  923|  12.2k|  tchunkptr R;\
  |  |  924|  12.2k|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (924:7): [True: 1.25k, False: 10.9k]
  |  |  ------------------
  |  |  925|  1.25k|    tchunkptr F = X->fd;\
  |  |  926|  1.25k|    R = X->bk;\
  |  |  927|  1.25k|    F->bk = R;\
  |  |  928|  1.25k|    R->fd = F;\
  |  |  929|  10.9k|  } else {\
  |  |  930|  10.9k|    tchunkptr *RP;\
  |  |  931|  10.9k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (931:9): [True: 36, False: 10.9k]
  |  |  ------------------
  |  |  932|  10.9k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (932:2): [True: 143, False: 10.7k]
  |  |  ------------------
  |  |  933|    179|      tchunkptr *CP;\
  |  |  934|    216|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (934:14): [True: 34, False: 182]
  |  |  ------------------
  |  |  935|    216|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (935:7): [True: 3, False: 179]
  |  |  ------------------
  |  |  936|     37|	R = *(RP = CP);\
  |  |  937|     37|      }\
  |  |  938|    179|      *RP = 0;\
  |  |  939|    179|    }\
  |  |  940|  10.9k|  }\
  |  |  941|  12.2k|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (941:7): [True: 12.2k, False: 0]
  |  |  ------------------
  |  |  942|  12.2k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  765|  12.2k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  943|  12.2k|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (943:9): [True: 11.3k, False: 891]
  |  |  ------------------
  |  |  944|  11.3k|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (944:11): [True: 10.1k, False: 1.13k]
  |  |  ------------------
  |  |  945|  11.3k|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  806|  10.1k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  10.1k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  946|  11.3k|    } else {\
  |  |  947|    891|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (947:11): [True: 558, False: 333]
  |  |  ------------------
  |  |  948|    891|	XP->child[0] = R;\
  |  |  949|    891|      else \
  |  |  950|    891|	XP->child[1] = R;\
  |  |  951|    891|    }\
  |  |  952|  12.2k|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (952:9): [True: 1.43k, False: 10.7k]
  |  |  ------------------
  |  |  953|  1.43k|      tchunkptr C0, C1;\
  |  |  954|  1.43k|      R->parent = XP;\
  |  |  955|  1.43k|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (955:11): [True: 227, False: 1.20k]
  |  |  ------------------
  |  |  956|    227|	R->child[0] = C0;\
  |  |  957|    227|	C0->parent = R;\
  |  |  958|    227|      }\
  |  |  959|  1.43k|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (959:11): [True: 125, False: 1.30k]
  |  |  ------------------
  |  |  960|    125|	R->child[1] = C1;\
  |  |  961|    125|	C1->parent = R;\
  |  |  962|    125|      }\
  |  |  963|  1.43k|    }\
  |  |  964|  12.2k|  }\
  |  |  965|  12.2k|}
  ------------------
 1346|  12.2k|    if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|  12.2k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|  12.2k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  12.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  12.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  12.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  12.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1346:9): [True: 2.64k, False: 9.57k]
  ------------------
 1347|  2.64k|      set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  819|  2.64k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  2.64k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.64k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  2.64k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  2.64k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|  2.64k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  2.64k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.64k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1348|  9.57k|    } else {
 1349|  9.57k|      set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  824|  9.57k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  9.57k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  9.57k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  9.57k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  9.57k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1350|  9.57k|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|  9.57k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|  9.57k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  9.57k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|  9.57k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1351|  9.57k|      insert_chunk(m, r, rsize);
  ------------------
  |  |  970|  9.57k|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|  9.57k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  9.57k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|  9.57k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 2.19k, False: 7.38k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  829|  2.19k|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|  2.19k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|  2.19k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|  2.19k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|  2.19k|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|  2.19k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|  2.19k|  mchunkptr F = B;\
  |  |  |  |  833|  2.19k|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|  2.19k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  2.19k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 1.79k, False: 394]
  |  |  |  |  ------------------
  |  |  |  |  834|  2.19k|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|  1.79k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  1.79k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|  2.19k|  else\
  |  |  |  |  836|  2.19k|    F = B->fd;\
  |  |  |  |  837|  2.19k|  B->fd = P;\
  |  |  |  |  838|  2.19k|  F->bk = P;\
  |  |  |  |  839|  2.19k|  P->fd = F;\
  |  |  |  |  840|  2.19k|  P->bk = B;\
  |  |  |  |  841|  2.19k|}
  |  |  ------------------
  |  |  971|  7.38k|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  882|  7.38k|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  883|  7.38k|  tbinptr *H;\
  |  |  |  |  884|  7.38k|  bindex_t I;\
  |  |  |  |  885|  7.38k|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  768|  7.38k|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  769|  7.38k|{\
  |  |  |  |  |  |  770|  7.38k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  7.38k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  771|  7.38k|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (771:7): [True: 0, False: 7.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  |  |  773|  7.38k|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (773:14): [True: 0, False: 7.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  775|  7.38k|  } else {\
  |  |  |  |  |  |  776|  7.38k|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  7.38k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  777|  7.38k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  7.38k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  778|  7.38k|  }\
  |  |  |  |  |  |  779|  7.38k|}
  |  |  |  |  ------------------
  |  |  |  |  886|  7.38k|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|  7.38k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  887|  7.38k|  X->index = I;\
  |  |  |  |  888|  7.38k|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  889|  7.38k|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  807|  7.38k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  7.38k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (889:7): [True: 6.62k, False: 762]
  |  |  |  |  ------------------
  |  |  |  |  890|  6.62k|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  805|  6.62k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  6.62k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  891|  6.62k|    *H = X;\
  |  |  |  |  892|  6.62k|    X->parent = (tchunkptr)H;\
  |  |  |  |  893|  6.62k|    X->fd = X->bk = X;\
  |  |  |  |  894|  6.62k|  } else {\
  |  |  |  |  895|    762|    tchunkptr T = *H;\
  |  |  |  |  896|    762|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  787|    762|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|    762|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (787:5): [True: 0, False: 762]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  788|    762|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|    762|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    762|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|    762|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  897|    882|    for (;;) {\
  |  |  |  |  898|    882|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|    882|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  597|    882|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  595|    882|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|    882|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  596|    882|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|    882|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (898:11): [True: 588, False: 294]
  |  |  |  |  ------------------
  |  |  |  |  899|    588|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|    588|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    588|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  900|    588|	K <<= 1;\
  |  |  |  |  901|    588|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (901:6): [True: 120, False: 468]
  |  |  |  |  ------------------
  |  |  |  |  902|    120|	  T = *C;\
  |  |  |  |  903|    468|	} else {\
  |  |  |  |  904|    468|	  *C = X;\
  |  |  |  |  905|    468|	  X->parent = T;\
  |  |  |  |  906|    468|	  X->fd = X->bk = X;\
  |  |  |  |  907|    468|	  break;\
  |  |  |  |  908|    468|	}\
  |  |  |  |  909|    588|      } else {\
  |  |  |  |  910|    294|	tchunkptr F = T->fd;\
  |  |  |  |  911|    294|	T->fd = F->bk = X;\
  |  |  |  |  912|    294|	X->fd = F;\
  |  |  |  |  913|    294|	X->bk = T;\
  |  |  |  |  914|    294|	X->parent = 0;\
  |  |  |  |  915|    294|	break;\
  |  |  |  |  916|    294|      }\
  |  |  |  |  917|    882|    }\
  |  |  |  |  918|    762|  }\
  |  |  |  |  919|  7.38k|}
  |  |  ------------------
  ------------------
 1352|  9.57k|    }
 1353|  12.2k|    return chunk2mem(v);
  ------------------
  |  |  575|  12.2k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  12.2k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  12.2k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1354|  12.2k|  }
 1355|  13.5k|  return NULL;
 1356|  25.7k|}
lj_alloc.c:lj_alloc_realloc:
 1642|  73.9k|{
 1643|       |#if LUAJIT_USE_ASAN
 1644|       |  if (nsize >= MAX_REQUEST)
 1645|       |    return NULL;
 1646|       |
 1647|       |  mstate m = (mstate)msp;
 1648|       |
 1649|       |  size_t mem_size = asan_get_size(ptr, MEM_SIZE);
 1650|       |  size_t poison_size = asan_get_size(ptr, POISON_SIZE);
 1651|       |
 1652|       |  void *newmem = lj_alloc_malloc(m, nsize);
 1653|       |
 1654|       |  if (newmem == NULL)
 1655|       |    return NULL;
 1656|       |
 1657|       |  memcpy(newmem, ptr, nsize > mem_size ? mem_size : nsize);
 1658|       |  ASAN_POISON_MEMORY_REGION(ptr - REDZONE_SIZE, poison_size);
 1659|       |  return newmem;
 1660|       |#else
 1661|  73.9k|  if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  582|  73.9k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  567|  73.9k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  73.9k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  73.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  73.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  73.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  73.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  73.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  73.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1661:7): [True: 0, False: 73.9k]
  ------------------
 1662|      0|    return NULL;
 1663|  73.9k|  } else {
 1664|  73.9k|    mstate m = (mstate)msp;
 1665|  73.9k|    mchunkptr oldp = mem2chunk(ptr);
  ------------------
  |  |  576|  73.9k|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  73.9k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  73.9k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1666|  73.9k|    size_t oldsize = chunksize(oldp);
  ------------------
  |  |  605|  73.9k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  73.9k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  73.9k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  73.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  73.9k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  73.9k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1667|  73.9k|    mchunkptr next = chunk_plus_offset(oldp, oldsize);
  ------------------
  |  |  611|  73.9k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1668|  73.9k|    mchunkptr newp = 0;
 1669|  73.9k|    size_t nb = request2size(nsize);
  ------------------
  |  |  591|  73.9k|  (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  583|  73.9k|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  567|  73.9k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  556|  73.9k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  73.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|  73.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|  73.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  73.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|  73.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|  73.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  73.9k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  73.9k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  73.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  567|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  587|  73.9k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  73.9k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  73.9k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  73.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  73.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  73.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  73.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  73.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  73.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (591:4): [True: 0, False: 73.9k]
  |  |  ------------------
  ------------------
 1670|       |
 1671|       |    /* Try to either shrink or extend into top. Else malloc-copy-free */
 1672|  73.9k|    if (is_direct(oldp)) {
  ------------------
  |  |  634|  73.9k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |  595|  73.9k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  73.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |   74|  10.1k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  10.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (634:4): [True: 10.1k, False: 63.8k]
  |  |  |  Branch (634:33): [True: 0, False: 10.1k]
  |  |  ------------------
  ------------------
 1673|      0|      newp = direct_resize(oldp, nb);  /* this may return NULL. */
 1674|  73.9k|    } else if (oldsize >= nb) { /* already big enough */
  ------------------
  |  Branch (1674:16): [True: 45, False: 73.8k]
  ------------------
 1675|     45|      size_t rsize = oldsize - nb;
 1676|     45|      newp = oldp;
 1677|     45|      if (rsize >= MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|     45|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|     45|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|     45|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|     45|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     45|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|     45|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|     45|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     45|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1677:11): [True: 31, False: 14]
  ------------------
 1678|     31|	mchunkptr rem = chunk_plus_offset(newp, nb);
  ------------------
  |  |  611|     31|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1679|     31|	set_inuse(m, newp, nb);
  ------------------
  |  |  814|     31|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|     31|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     31|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|     31|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|     31|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  815|     31|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|     31|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     31|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1680|     31|	set_inuse(m, rem, rsize);
  ------------------
  |  |  814|     31|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|     31|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     31|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|     31|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|     31|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  815|     31|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|     31|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     31|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1681|     31|	lj_alloc_free(m, chunk2mem(rem));
  ------------------
  |  |  575|     31|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|     31|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|     31|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1682|     31|      }
 1683|  73.8k|    } else if (next == m->top && oldsize + m->topsize > nb) {
  ------------------
  |  Branch (1683:16): [True: 10.1k, False: 63.7k]
  |  Branch (1683:34): [True: 10.1k, False: 0]
  ------------------
 1684|       |      /* Expand into top */
 1685|  10.1k|      size_t newsize = oldsize + m->topsize;
 1686|  10.1k|      size_t newtopsize = newsize - nb;
 1687|  10.1k|      mchunkptr newtop = chunk_plus_offset(oldp, nb);
  ------------------
  |  |  611|  10.1k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1688|  10.1k|      set_inuse(m, oldp, nb);
  ------------------
  |  |  814|  10.1k|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  10.1k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  10.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  10.1k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  10.1k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  815|  10.1k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  10.1k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  10.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1689|  10.1k|      newtop->head = newtopsize |PINUSE_BIT;
  ------------------
  |  |  595|  10.1k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  10.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1690|  10.1k|      m->top = newtop;
 1691|  10.1k|      m->topsize = newtopsize;
 1692|  10.1k|      newp = oldp;
 1693|  10.1k|    }
 1694|       |
 1695|  73.9k|    if (newp != 0) {
  ------------------
  |  Branch (1695:9): [True: 10.2k, False: 63.7k]
  ------------------
 1696|  10.2k|      return chunk2mem(newp);
  ------------------
  |  |  575|  10.2k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  10.2k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  10.2k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1697|  63.7k|    } else {
 1698|  63.7k|      void *newmem = lj_alloc_malloc(m, nsize);
 1699|  63.7k|      if (newmem != 0) {
  ------------------
  |  Branch (1699:11): [True: 63.7k, False: 0]
  ------------------
 1700|  63.7k|	size_t oc = oldsize - overhead_for(oldp);
  ------------------
  |  |  638|  63.7k| (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  634|  63.7k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  63.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  63.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|  9.87k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  9.87k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (634:4): [True: 9.87k, False: 53.8k]
  |  |  |  |  |  Branch (634:33): [True: 0, False: 9.87k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  561|      0|#define DIRECT_CHUNK_OVERHEAD	(TWO_SIZE_T_SIZES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  558|  63.7k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  63.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1701|  63.7k|	memcpy(newmem, ptr, oc < nsize ? oc : nsize);
  ------------------
  |  Branch (1701:22): [True: 63.7k, False: 0]
  ------------------
 1702|  63.7k|	lj_alloc_free(m, ptr);
 1703|  63.7k|      }
 1704|  63.7k|      return newmem;
 1705|  63.7k|    }
 1706|  73.9k|  }
 1707|  73.9k|#endif
 1708|  73.9k|}

lua_checkstack:
  103|  35.6k|{
  104|  35.6k|  if (size > LUAI_MAXCSTACK || (L->top - L->base + size) > LUAI_MAXCSTACK) {
  ------------------
  |  |   92|  71.3k|#define LUAI_MAXCSTACK	8000	/* Max. # of stack slots for a C func (<10K). */
  ------------------
                if (size > LUAI_MAXCSTACK || (L->top - L->base + size) > LUAI_MAXCSTACK) {
  ------------------
  |  |   92|  35.6k|#define LUAI_MAXCSTACK	8000	/* Max. # of stack slots for a C func (<10K). */
  ------------------
  |  Branch (104:7): [True: 0, False: 35.6k]
  |  Branch (104:32): [True: 0, False: 35.6k]
  ------------------
  105|      0|    return 0;  /* Stack overflow. */
  106|  35.6k|  } else if (size > 0) {
  ------------------
  |  Branch (106:14): [True: 0, False: 35.6k]
  ------------------
  107|      0|    int avail = (int)(mref(L->maxstack, TValue) - L->top);
  ------------------
  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  108|      0|    if (size > avail &&
  ------------------
  |  Branch (108:9): [True: 0, False: 0]
  ------------------
  109|      0|	lj_state_cpgrowstack(L, (MSize)(size - avail)) != LUA_OK) {
  ------------------
  |  |   43|      0|#define LUA_OK		0
  ------------------
  |  Branch (109:2): [True: 0, False: 0]
  ------------------
  110|      0|      L->top--;
  111|      0|      return 0;  /* Out of memory. */
  112|      0|    }
  113|      0|  }
  114|  35.6k|  return 1;
  115|  35.6k|}
luaL_checkstack:
  118|  35.6k|{
  119|  35.6k|  if (!lua_checkstack(L, size))
  ------------------
  |  Branch (119:7): [True: 0, False: 35.6k]
  ------------------
  120|      0|    lj_err_callerv(L, LJ_ERR_STKOVM, msg);
  121|  35.6k|}
lua_settop:
  151|   385k|{
  152|   385k|  if (idx >= 0) {
  ------------------
  |  Branch (152:7): [True: 28.9k, False: 356k]
  ------------------
  153|  28.9k|    lj_checkapi(idx <= tvref(L->maxstack) - L->base, "bad stack slot %d", idx);
  ------------------
  |  |  357|  28.9k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  28.9k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 28.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  28.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  154|  28.9k|    if (L->base + idx > L->top) {
  ------------------
  |  Branch (154:9): [True: 0, False: 28.9k]
  ------------------
  155|      0|      if (L->base + idx >= tvref(L->maxstack))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (155:11): [True: 0, False: 0]
  ------------------
  156|      0|	lj_state_growstack(L, (MSize)idx - (MSize)(L->top - L->base));
  157|      0|      do { setnilV(L->top++); } while (L->top < L->base + idx);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  |  Branch (157:40): [True: 0, False: 0]
  ------------------
  158|  28.9k|    } else {
  159|  28.9k|      L->top = L->base + idx;
  160|  28.9k|    }
  161|   356k|  } else {
  162|   356k|    lj_checkapi(-(idx+1) <= (L->top - L->base), "bad stack slot %d", idx);
  ------------------
  |  |  357|   356k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   356k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 356k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   356k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  163|   356k|    L->top += idx+1;  /* Shrinks top (idx < 0). */
  164|   356k|  }
  165|   385k|}
lua_remove:
  168|   624k|{
  169|   624k|  TValue *p = index2adr_stack(L, idx);
  170|  1.24M|  while (++p < L->top) copyTV(L, p-1, p);
  ------------------
  |  Branch (170:10): [True: 624k, False: 624k]
  ------------------
  171|   624k|  L->top--;
  172|   624k|}
lua_insert:
  175|  17.8k|{
  176|  17.8k|  TValue *q, *p = index2adr_stack(L, idx);
  177|  35.6k|  for (q = L->top; q > p; q--) copyTV(L, q, q-1);
  ------------------
  |  Branch (177:20): [True: 17.8k, False: 17.8k]
  ------------------
  178|  17.8k|  copyTV(L, p, L->top);
  179|  17.8k|}
lua_copy:
  210|  17.8k|{
  211|  17.8k|  copy_slot(L, index2adr(L, fromidx), toidx);
  212|  17.8k|}
lua_pushvalue:
  215|   874k|{
  216|   874k|  copyTV(L, L->top, index2adr(L, idx));
  217|   874k|  incr_top(L);
  ------------------
  |  |   12|   874k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  1.74M|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   874k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 874k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  218|   874k|}
lua_type:
  223|  1.04M|{
  224|  1.04M|  cTValue *o = index2adr(L, idx);
  225|  1.04M|  if (tvisnumber(o)) {
  ------------------
  |  |  802|  1.04M|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  1.04M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.04M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.04M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
  226|      0|    return LUA_TNUMBER;
  ------------------
  |  |   78|      0|#define LUA_TNUMBER		3
  ------------------
  227|       |#if LJ_64 && !LJ_GC64
  228|       |  } else if (tvislightud(o)) {
  229|       |    return LUA_TLIGHTUSERDATA;
  230|       |#endif
  231|  1.04M|  } else if (o == niltv(L)) {
  ------------------
  |  |  667|  1.04M|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  1.04M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.04M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.04M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.04M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.04M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (231:14): [True: 0, False: 1.04M]
  ------------------
  232|      0|    return LUA_TNONE;
  ------------------
  |  |   73|      0|#define LUA_TNONE		(-1)
  ------------------
  233|  1.04M|  } else {  /* Magic internal/external tag conversion. ORDER LJ_T */
  234|  1.04M|    uint32_t t = ~itype(o);
  ------------------
  |  |  781|  1.04M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  235|  1.04M|#if LJ_64
  236|  1.04M|    int tt = (int)((U64x(75a06,98042110) >> 4*t) & 15u);
  ------------------
  |  |   94|  1.04M|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  237|       |#else
  238|       |    int tt = (int)(((t < 8 ? 0x98042110u : 0x75a06u) >> 4*(t&7)) & 15u);
  239|       |#endif
  240|  1.04M|    lj_assertL(tt != LUA_TNIL || tvisnil(o), "bad tag conversion");
  ------------------
  |  |  365|  1.04M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.31M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 776k, False: 267k]
  |  |  |  |  |  Branch (355:5): [True: 267k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.04M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  241|  1.04M|    return tt;
  242|  1.04M|  }
  243|  1.04M|}
lua_toboolean:
  504|  28.9k|{
  505|  28.9k|  cTValue *o = index2adr(L, idx);
  506|  28.9k|  return tvistruecond(o);
  ------------------
  |  |  806|  28.9k|#define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  781|  28.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  282|  28.9k|#define LJ_TISTRUECOND		LJ_TFALSE
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|  28.9k|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  507|  28.9k|}
luaL_checklstring:
  529|  21.5k|{
  530|  21.5k|  TValue *o = index2adr(L, idx);
  531|  21.5k|  GCstr *s;
  532|  21.5k|  if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|  21.5k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 21.5k, False: 0]
  |  |  ------------------
  ------------------
  533|  21.5k|    s = strV(o);
  ------------------
  |  |  859|  21.5k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  21.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  21.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  21.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 21.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  21.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  534|  21.5k|  } else if (tvisnumber(o)) {
  ------------------
  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  535|      0|    lj_gc_check(L);
  ------------------
  |  |   66|      0|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      0|      lj_gc_step(L); }
  ------------------
  536|      0|    o = index2adr(L, idx);  /* GC may move the stack. */
  537|      0|    s = lj_strfmt_number(L, o);
  538|      0|    setstrV(L, o, s);
  539|      0|  } else {
  540|      0|    lj_err_argt(L, idx, LUA_TSTRING);
  ------------------
  |  |   79|      0|#define LUA_TSTRING		4
  ------------------
  541|      0|  }
  542|  21.5k|  if (len != NULL) *len = s->len;
  ------------------
  |  Branch (542:7): [True: 0, False: 21.5k]
  ------------------
  543|  21.5k|  return strdata(s);
  ------------------
  |  |  316|  21.5k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  544|  21.5k|}
lua_pushinteger:
  649|  17.8k|{
  650|  17.8k|  setintptrV(L->top, n);
  ------------------
  |  |  968|  17.8k|#define setintptrV(o, i)	setint64V((o), (i))
  ------------------
  651|  17.8k|  incr_top(L);
  ------------------
  |  |   12|  17.8k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  35.6k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 17.8k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  652|  17.8k|}
lua_pushlstring:
  655|   982k|{
  656|   982k|  GCstr *s;
  657|   982k|  lj_gc_check(L);
  ------------------
  |  |   66|   982k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   982k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 1.32k, False: 981k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   982k|      lj_gc_step(L); }
  ------------------
  658|   982k|  s = lj_str_new(L, str, len);
  659|   982k|  setstrV(L, L->top, s);
  660|   982k|  incr_top(L);
  ------------------
  |  |   12|   982k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  1.96M|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   982k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 21, False: 982k]
  |  |  |  Branch (12:38): [True: 0, False: 21]
  |  |  ------------------
  ------------------
  661|   982k|}
lua_pushstring:
  664|   234k|{
  665|   234k|  if (str == NULL) {
  ------------------
  |  Branch (665:7): [True: 0, False: 234k]
  ------------------
  666|      0|    setnilV(L->top);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  667|   234k|  } else {
  668|   234k|    GCstr *s;
  669|   234k|    lj_gc_check(L);
  ------------------
  |  |   66|   234k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   234k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 234k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   234k|      lj_gc_step(L); }
  ------------------
  670|   234k|    s = lj_str_newz(L, str);
  ------------------
  |  |   27|   234k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  671|   234k|    setstrV(L, L->top, s);
  672|   234k|  }
  673|   234k|  incr_top(L);
  ------------------
  |  |   12|   234k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   469k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   234k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 234k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  674|   234k|}
lua_pushcclosure:
  695|   481k|{
  696|   481k|  GCfunc *fn;
  697|   481k|  lj_gc_check(L);
  ------------------
  |  |   66|   481k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   481k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 481k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   481k|      lj_gc_step(L); }
  ------------------
  698|   481k|  lj_checkapi_slot(n);
  ------------------
  |  |   32|   481k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|   481k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   481k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 481k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   481k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  699|   481k|  fn = lj_func_newC(L, (MSize)n, getcurrenv(L));
  700|   481k|  fn->c.f = f;
  701|   481k|  L->top -= n;
  702|   481k|  while (n--)
  ------------------
  |  Branch (702:10): [True: 0, False: 481k]
  ------------------
  703|      0|    copyTV(L, &fn->c.upvalue[n], L->top+n);
  704|   481k|  setfuncV(L, L->top, fn);
  705|   481k|  lj_assertL(iswhite(obj2gco(fn)), "new GC object is not white");
  ------------------
  |  |  365|   481k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   481k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 481k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   481k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  706|   481k|  incr_top(L);
  ------------------
  |  |   12|   481k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   963k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   481k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 481k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  707|   481k|}
lua_createtable:
  725|   339k|{
  726|   339k|  lj_gc_check(L);
  ------------------
  |  |   66|   339k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   339k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 4.45k, False: 335k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   339k|      lj_gc_step(L); }
  ------------------
  727|   339k|  settabV(L, L->top, lj_tab_new_ah(L, narray, nrec));
  728|   339k|  incr_top(L);
  ------------------
  |  |   12|   339k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   679k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   339k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 44, False: 339k]
  |  |  |  Branch (12:38): [True: 0, False: 44]
  |  |  ------------------
  ------------------
  729|   339k|}
luaL_newmetatable:
  732|  17.8k|{
  733|  17.8k|  GCtab *regt = tabV(registry(L));
  ------------------
  |  |  864|  17.8k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  17.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  17.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  734|  17.8k|  TValue *tv = lj_tab_setstr(L, regt, lj_str_newz(L, tname));
  ------------------
  |  |   27|  17.8k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  735|  17.8k|  if (tvisnil(tv)) {
  ------------------
  |  |  782|  17.8k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 17.8k, False: 0]
  |  |  ------------------
  ------------------
  736|  17.8k|    GCtab *mt = lj_tab_new(L, 0, 1);
  737|  17.8k|    settabV(L, tv, mt);
  738|  17.8k|    settabV(L, L->top++, mt);
  739|  17.8k|    lj_gc_anybarriert(L, regt);
  ------------------
  |  |   95|  17.8k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  17.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 17.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  740|  17.8k|    return 1;
  741|  17.8k|  } else {
  742|      0|    copyTV(L, L->top++, tv);
  743|      0|    return 0;
  744|      0|  }
  745|  17.8k|}
lua_newuserdata:
  765|  71.3k|{
  766|  71.3k|  GCudata *ud;
  767|  71.3k|  lj_gc_check(L);
  ------------------
  |  |   66|  71.3k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  71.3k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 71.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  71.3k|      lj_gc_step(L); }
  ------------------
  768|  71.3k|  if (size > LJ_MAX_UDATA)
  ------------------
  |  |   56|  71.3k|#define LJ_MAX_UDATA	LJ_MAX_MEM32	/* Max. userdata length. */
  |  |  ------------------
  |  |  |  |   49|  71.3k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (768:7): [True: 0, False: 71.3k]
  ------------------
  769|      0|    lj_err_msg(L, LJ_ERR_UDATAOV);
  770|  71.3k|  ud = lj_udata_new(L, (MSize)size, getcurrenv(L));
  771|  71.3k|  setudataV(L, L->top, ud);
  772|  71.3k|  incr_top(L);
  ------------------
  |  |   12|  71.3k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   142k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  71.3k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 71.3k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  773|  71.3k|  return uddata(ud);
  ------------------
  |  |  342|  71.3k|#define uddata(u)	((void *)((u)+1))
  ------------------
  774|  71.3k|}
lua_getfield:
  816|   295k|{
  817|   295k|  cTValue *v, *t = index2adr_check(L, idx);
  818|   295k|  TValue key;
  819|   295k|  setstrV(L, &key, lj_str_newz(L, k));
  ------------------
  |  |   27|   295k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  820|   295k|  v = lj_meta_tget(L, t, &key);
  821|   295k|  if (v == NULL) {
  ------------------
  |  Branch (821:7): [True: 0, False: 295k]
  ------------------
  822|      0|    L->top += 2;
  823|      0|    lj_vm_call(L, L->top-2, 1+1);
  824|      0|    L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  825|      0|    v = L->top+1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  826|      0|  }
  827|   295k|  copyTV(L, L->top, v);
  828|   295k|  incr_top(L);
  ------------------
  |  |   12|   295k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   591k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   295k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 295k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  829|   295k|}
lua_rawget:
  832|   606k|{
  833|   606k|  cTValue *t = index2adr(L, idx);
  834|   606k|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|   606k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   606k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 606k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   606k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  835|   606k|  copyTV(L, L->top-1, lj_tab_get(L, tabV(t), L->top-1));
  ------------------
  |  |  864|   606k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   606k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   606k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   606k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 606k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   606k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  836|   606k|}
lua_rawgeti:
  839|  10.4k|{
  840|  10.4k|  cTValue *v, *t = index2adr(L, idx);
  841|  10.4k|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|  10.4k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  10.4k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 10.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  10.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  842|  10.4k|  v = lj_tab_getint(tabV(t), n);
  ------------------
  |  |   82|  10.4k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|  20.8k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 10.4k, False: 0]
  |  |  |  |  |  Branch (79:50): [True: 10.4k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|  10.4k|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|  10.4k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|  20.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (36:35): [True: 10.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (82:66): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  843|  10.4k|  if (v) {
  ------------------
  |  Branch (843:7): [True: 10.4k, False: 0]
  ------------------
  844|  10.4k|    copyTV(L, L->top, v);
  845|  10.4k|  } else {
  846|      0|    setnilV(L->top);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  847|      0|  }
  848|  10.4k|  incr_top(L);
  ------------------
  |  |   12|  10.4k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  20.8k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  10.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 10.4k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  849|  10.4k|}
lua_settable:
  968|   249k|{
  969|   249k|  TValue *o;
  970|   249k|  cTValue *t = index2adr_check(L, idx);
  971|   249k|  lj_checkapi_slot(2);
  ------------------
  |  |   32|   249k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|   249k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   249k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 249k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   249k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  972|   249k|  o = lj_meta_tset(L, t, L->top-2);
  973|   249k|  if (o) {
  ------------------
  |  Branch (973:7): [True: 249k, False: 0]
  ------------------
  974|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  975|   249k|    L->top -= 2;
  976|   249k|    copyTV(L, o, L->top+1);
  977|   249k|  } else {
  978|      0|    TValue *base = L->top;
  979|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  980|      0|    L->top = base+3;
  981|      0|    lj_vm_call(L, base, 0+1);
  982|      0|    L->top -= 3+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  983|      0|  }
  984|   249k|}
lua_setfield:
  987|   627k|{
  988|   627k|  TValue *o;
  989|   627k|  TValue key;
  990|   627k|  cTValue *t = index2adr_check(L, idx);
  991|   627k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|   627k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|   627k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   627k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 627k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   627k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  992|   627k|  setstrV(L, &key, lj_str_newz(L, k));
  ------------------
  |  |   27|   627k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  993|   627k|  o = lj_meta_tset(L, t, &key);
  994|   627k|  if (o) {
  ------------------
  |  Branch (994:7): [True: 627k, False: 0]
  ------------------
  995|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  996|   627k|    copyTV(L, o, --L->top);
  997|   627k|  } else {
  998|      0|    TValue *base = L->top;
  999|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1000|      0|    L->top = base+3;
 1001|      0|    lj_vm_call(L, base, 0+1);
 1002|      0|    L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1003|      0|  }
 1004|   627k|}
lua_rawseti:
 1019|  89.1k|{
 1020|  89.1k|  GCtab *t = tabV(index2adr(L, idx));
  ------------------
  |  |  864|  89.1k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  89.1k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  89.1k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  89.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 89.1k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  89.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1021|      0|  TValue *dst, *src;
 1022|  89.1k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|  89.1k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  89.1k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  89.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 89.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  89.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1023|  89.1k|  dst = lj_tab_setint(L, t, n);
  ------------------
  |  |   84|  89.1k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   79|  89.1k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 71.3k, False: 17.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   80|  71.3k|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|  71.3k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|  71.3k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|  89.1k|  src = L->top-1;
 1025|  89.1k|  copyTV(L, dst, src);
 1026|  89.1k|  lj_gc_barriert(L, t, dst);
  ------------------
  |  |   97|  89.1k|  { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   35|   178k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   178k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  89.1k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  89.1k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  89.1k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  89.1k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  89.1k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  89.1k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 89.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   178k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  89.1k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  89.1k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  89.1k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 89.1k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 89.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|  89.1k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  89.1k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 89.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   98|  89.1k|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1027|  89.1k|  L->top = src;
 1028|  89.1k|}
lua_call:
 1129|   199k|{
 1130|   199k|  lj_checkapi(L->status == LUA_OK || L->status == LUA_ERRERR,
  ------------------
  |  |  357|   199k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   199k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 199k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   199k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1131|   199k|	      "thread called in wrong state %d", L->status);
 1132|   199k|  lj_checkapi_slot(nargs+1);
  ------------------
  |  |   32|   199k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|   199k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   199k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 199k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   199k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1133|   199k|  lj_vm_call(L, api_call_base(L, nargs), nresults+1);
 1134|   199k|}
lua_pcall:
 1137|  11.0k|{
 1138|  11.0k|  global_State *g = G(L);
  ------------------
  |  |  705|  11.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  11.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1139|  11.0k|  uint8_t oldh = hook_save(g);
  ------------------
  |  |  684|  11.0k|#define hook_save(g)		((g)->hookmask & ~HOOK_EVENTMASK)
  |  |  ------------------
  |  |  |  |  672|  11.0k|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
 1140|  11.0k|  ptrdiff_t ef;
 1141|  11.0k|  int status;
 1142|  11.0k|  lj_checkapi(L->status == LUA_OK || L->status == LUA_ERRERR,
  ------------------
  |  |  357|  11.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 11.0k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1143|  11.0k|	      "thread called in wrong state %d", L->status);
 1144|  11.0k|  lj_checkapi_slot(nargs+1);
  ------------------
  |  |   32|  11.0k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  11.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  11.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 11.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  11.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1145|  11.0k|  if (errfunc == 0) {
  ------------------
  |  Branch (1145:7): [True: 11.0k, False: 0]
  ------------------
 1146|  11.0k|    ef = 0;
 1147|  11.0k|  } else {
 1148|      0|    cTValue *o = index2adr_stack(L, errfunc);
 1149|      0|    ef = savestack(L, o);
  ------------------
  |  |   14|      0|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1150|      0|  }
 1151|  11.0k|  status = lj_vm_pcall(L, api_call_base(L, nargs), nresults+1, ef);
 1152|  11.0k|  if (status) hook_restore(g, oldh);
  ------------------
  |  |  686|  7.26k|  ((g)->hookmask = ((g)->hookmask & HOOK_EVENTMASK) | (h))
  |  |  ------------------
  |  |  |  |  672|  7.26k|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  |  Branch (1152:7): [True: 7.26k, False: 3.82k]
  ------------------
 1153|  11.0k|  return status;
 1154|  11.0k|}
lj_api.c:index2adr_stack:
   72|   642k|{
   73|   642k|  if (idx > 0) {
  ------------------
  |  Branch (73:7): [True: 0, False: 642k]
  ------------------
   74|      0|    TValue *o = L->base + (idx - 1);
   75|      0|    if (o < L->top) {
  ------------------
  |  Branch (75:9): [True: 0, False: 0]
  ------------------
   76|      0|      return o;
   77|      0|    } else {
   78|      0|      lj_checkapi(0, "invalid stack slot %d", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|      return niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    }
   81|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (81:12): [True: 0, False: 0]
  ------------------
   82|   642k|  } else {
   83|   642k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|   642k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.28M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 642k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 642k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   642k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|   642k|		"invalid stack slot %d", idx);
   85|   642k|    return L->top + idx;
   86|   642k|  }
   87|   642k|}
lj_api.c:copy_slot:
  182|  17.8k|{
  183|  17.8k|  if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|  17.8k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (183:7): [True: 0, False: 17.8k]
  ------------------
  184|      0|    lj_checkapi(tvistab(f), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  185|       |    /* NOBARRIER: A thread (i.e. L) is never black. */
  186|      0|    setgcref(L->env, obj2gco(tabV(f)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  187|  17.8k|  } else if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|  17.8k|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (187:14): [True: 17.8k, False: 0]
  ------------------
  188|  17.8k|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|  17.8k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|  17.8k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  17.8k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  17.8k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  189|  17.8k|    if (fn->c.gct != ~LJ_TFUNC)
  ------------------
  |  |  268|  17.8k|#define LJ_TFUNC		(~8u)
  ------------------
  |  Branch (189:9): [True: 0, False: 17.8k]
  ------------------
  190|      0|      lj_err_msg(L, LJ_ERR_NOENV);
  191|  17.8k|    lj_checkapi(tvistab(f), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|  17.8k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  192|  35.6k|    setgcref(fn->c.env, obj2gco(tabV(f)));
  ------------------
  |  |   72|  35.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 17.8k, False: 0]
  |  |  ------------------
  ------------------
  193|  17.8k|    lj_gc_barrier(L, fn, f);
  ------------------
  |  |  105|  17.8k|  { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   35|  35.6k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  35.6k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  17.8k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  17.8k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  17.8k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  17.8k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  17.8k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  17.8k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 17.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  35.6k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  17.8k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  17.8k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  17.8k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 17.8k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 17.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|  17.8k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  17.8k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 17.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  106|  17.8k|      lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  194|  17.8k|  } else {
  195|      0|    TValue *o = index2adr_check(L, idx);
  196|      0|    copyTV(L, o, f);
  197|      0|    if (idx < LUA_GLOBALSINDEX)  /* Need a barrier for upvalues. */
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (197:9): [True: 0, False: 0]
  ------------------
  198|      0|      lj_gc_barrier(L, curr_func(L), f);
  ------------------
  |  |  105|      0|  { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  106|      0|      lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  199|      0|  }
  200|  17.8k|}
lj_api.c:index2adr:
   35|  3.95M|{
   36|  3.95M|  if (idx > 0) {
  ------------------
  |  Branch (36:7): [True: 63.9k, False: 3.89M]
  ------------------
   37|  63.9k|    TValue *o = L->base + (idx - 1);
   38|  63.9k|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (38:12): [True: 63.9k, False: 0]
  ------------------
   39|  3.89M|  } else if (idx > LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|  3.89M|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (39:14): [True: 3.21M, False: 674k]
  ------------------
   40|  3.21M|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|  3.21M|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.43M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 3.21M, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 3.21M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.21M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   41|  3.21M|		"bad stack slot %d", idx);
   42|  3.21M|    return L->top + idx;
   43|  3.21M|  } else if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|   674k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (43:14): [True: 231k, False: 442k]
  ------------------
   44|   231k|    TValue *o = &G(L)->tmptv;
  ------------------
  |  |  705|   231k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   231k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   45|   231k|    settabV(L, o, tabref(L->env));
  ------------------
  |  |  514|   231k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   231k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   46|   231k|    return o;
   47|   442k|  } else if (idx == LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|   442k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (47:14): [True: 421k, False: 20.8k]
  ------------------
   48|   421k|    return registry(L);
  ------------------
  |  |  706|   421k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  705|   421k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   421k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   49|   421k|  } else {
   50|  20.8k|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|  20.8k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|  20.8k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  20.8k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  20.8k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   51|  20.8k|    lj_checkapi(fn->c.gct == ~LJ_TFUNC && !isluafunc(fn),
  ------------------
  |  |  357|  20.8k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  41.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 20.8k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 20.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  20.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   52|  20.8k|		"calling frame is not a C function");
   53|  20.8k|    if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|  20.8k|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (53:9): [True: 20.8k, False: 0]
  ------------------
   54|  20.8k|      TValue *o = &G(L)->tmptv;
  ------------------
  |  |  705|  20.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  20.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   55|  20.8k|      settabV(L, o, tabref(fn->c.env));
  ------------------
  |  |  514|  20.8k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  20.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   56|  20.8k|      return o;
   57|  20.8k|    } else {
   58|      0|      idx = LUA_GLOBALSINDEX - idx;
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
   59|      0|      return idx <= fn->c.nupvalues ? &fn->c.upvalue[idx-1] : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (59:14): [True: 0, False: 0]
  ------------------
   60|      0|    }
   61|  20.8k|  }
   62|  3.95M|}
lj_api.c:getcurrenv:
   90|   552k|{
   91|   552k|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|   552k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|   552k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|   552k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|   552k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   92|   552k|  return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  268|   552k|#define LJ_TFUNC		(~8u)
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|   338k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   338k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|   214k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   214k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (92:10): [True: 338k, False: 214k]
  ------------------
   93|   552k|}
lj_api.c:index2adr_check:
   65|  1.17M|{
   66|  1.17M|  TValue *o = index2adr(L, idx);
   67|  1.17M|  lj_checkapi(o != niltv(L), "invalid stack slot %d", idx);
  ------------------
  |  |  357|  1.17M|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.34M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.17M, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1.17M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.17M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   68|  1.17M|  return o;
   69|  1.17M|}
lj_api.c:api_call_base:
 1117|   210k|{
 1118|   210k|  TValue *o = L->top, *base = o - nargs;
 1119|   210k|  L->top = o+1;
 1120|   409k|  for (; o > base; o--) copyTV(L, o, o-1);
  ------------------
  |  Branch (1120:10): [True: 199k, False: 210k]
  ------------------
 1121|   210k|  setnilV(o);
  ------------------
  |  |  872|   210k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
 1122|   210k|  return o+1;
 1123|   210k|}

lj_bcread_proto:
  316|   142k|{
  317|   142k|  GCproto *pt;
  318|   142k|  MSize framesize, numparams, flags, sizeuv, sizekgc, sizekn, sizebc, sizept;
  319|   142k|  MSize ofsk, ofsuv, ofsdbg;
  320|   142k|  MSize sizedbg = 0;
  321|   142k|  BCLine firstline = 0, numline = 0;
  322|       |
  323|       |  /* Read prototype header. */
  324|   142k|  flags = bcread_byte(ls);
  325|   142k|  numparams = bcread_byte(ls);
  326|   142k|  framesize = bcread_byte(ls);
  327|   142k|  sizeuv = bcread_byte(ls);
  328|   142k|  sizekgc = bcread_uleb128(ls);
  329|   142k|  sizekn = bcread_uleb128(ls);
  330|   142k|  sizebc = bcread_uleb128(ls) + 1;
  331|   142k|  if (!(bcread_flags(ls) & BCDUMP_F_STRIP)) {
  ------------------
  |  |   27|   142k|#define bcread_flags(ls)	ls->level
  ------------------
                if (!(bcread_flags(ls) & BCDUMP_F_STRIP)) {
  ------------------
  |  |   43|   142k|#define BCDUMP_F_STRIP		0x02
  ------------------
  |  Branch (331:7): [True: 0, False: 142k]
  ------------------
  332|      0|    sizedbg = bcread_uleb128(ls);
  333|      0|    if (sizedbg) {
  ------------------
  |  Branch (333:9): [True: 0, False: 0]
  ------------------
  334|      0|      firstline = bcread_uleb128(ls);
  335|      0|      numline = bcread_uleb128(ls);
  336|      0|    }
  337|      0|  }
  338|       |
  339|       |  /* Calculate total size of prototype including all colocated arrays. */
  340|   142k|  sizept = (MSize)sizeof(GCproto) +
  341|   142k|	   sizebc*(MSize)sizeof(BCIns) +
  342|   142k|	   sizekgc*(MSize)sizeof(GCRef);
  343|   142k|  sizept = (sizept + (MSize)sizeof(TValue)-1) & ~((MSize)sizeof(TValue)-1);
  344|   142k|  ofsk = sizept; sizept += sizekn*(MSize)sizeof(TValue);
  345|   142k|  ofsuv = sizept; sizept += ((sizeuv+1)&~1)*2;
  346|   142k|  ofsdbg = sizept; sizept += sizedbg;
  347|       |
  348|       |  /* Allocate prototype object and initialize its fields. */
  349|   142k|  pt = (GCproto *)lj_mem_newgco(ls->L, (MSize)sizept);
  350|   142k|  pt->gct = ~LJ_TPROTO;
  ------------------
  |  |  267|   142k|#define LJ_TPROTO		(~7u)
  ------------------
  351|   142k|  pt->numparams = (uint8_t)numparams;
  352|   142k|  pt->framesize = (uint8_t)framesize;
  353|   142k|  pt->sizebc = sizebc;
  354|   142k|  setmref(pt->k, (char *)pt + ofsk);
  ------------------
  |  |   39|   142k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  355|   142k|  setmref(pt->uv, (char *)pt + ofsuv);
  ------------------
  |  |   39|   142k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  356|   142k|  pt->sizekgc = 0;  /* Set to zero until fully initialized. */
  357|   142k|  pt->sizekn = sizekn;
  358|   142k|  pt->sizept = sizept;
  359|   142k|  pt->sizeuv = (uint8_t)sizeuv;
  360|   142k|  pt->flags = (uint8_t)flags;
  361|   142k|  pt->trace = 0;
  362|   142k|  setgcref(pt->chunkname, obj2gco(ls->chunkname));
  ------------------
  |  |   72|   142k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  363|       |
  364|       |  /* Close potentially uninitialized gap between bc and kgc. */
  365|   142k|  *(uint32_t *)((char *)pt + ofsk - sizeof(GCRef)*(sizekgc+1)) = 0;
  366|       |
  367|       |  /* Read bytecode instructions and upvalue refs. */
  368|   142k|  bcread_bytecode(ls, pt, sizebc);
  369|   142k|  bcread_uv(ls, pt, sizeuv);
  370|       |
  371|       |  /* Read constants. */
  372|   142k|  bcread_kgc(ls, pt, sizekgc);
  373|   142k|  pt->sizekgc = sizekgc;
  374|   142k|  bcread_knum(ls, pt, sizekn);
  375|       |
  376|       |  /* Read and initialize debug info. */
  377|   142k|  pt->firstline = firstline;
  378|   142k|  pt->numline = numline;
  379|   142k|  if (sizedbg) {
  ------------------
  |  Branch (379:7): [True: 0, False: 142k]
  ------------------
  380|      0|    MSize sizeli = (sizebc-1) << (numline < 256 ? 0 : numline < 65536 ? 1 : 2);
  ------------------
  |  Branch (380:35): [True: 0, False: 0]
  |  Branch (380:55): [True: 0, False: 0]
  ------------------
  381|      0|    setmref(pt->lineinfo, (char *)pt + ofsdbg);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  382|      0|    setmref(pt->uvinfo, (char *)pt + ofsdbg + sizeli);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  383|      0|    bcread_dbg(ls, pt, sizedbg);
  384|      0|    setmref(pt->varinfo, bcread_varinfo(pt));
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  385|   142k|  } else {
  386|   142k|    setmref(pt->lineinfo, NULL);
  ------------------
  |  |   39|   142k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  387|   142k|    setmref(pt->uvinfo, NULL);
  ------------------
  |  |   39|   142k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  388|   142k|    setmref(pt->varinfo, NULL);
  ------------------
  |  |   39|   142k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  389|   142k|  }
  390|   142k|  return pt;
  391|   142k|}
lj_bcread.c:bcread_byte:
  122|   570k|{
  123|   570k|  lj_assertLS(ls->p < ls->pe, "buffer read overflow");
  ------------------
  |  |   89|   570k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   570k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   570k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 570k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   570k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  124|   570k|  return (uint32_t)(uint8_t)*ls->p++;
  125|   570k|}
lj_bcread.c:bcread_uleb128:
  129|   481k|{
  130|   481k|  uint32_t v = lj_buf_ruleb128(&ls->p);
  131|   481k|  lj_assertLS(ls->p <= ls->pe, "buffer read overflow");
  ------------------
  |  |   89|   481k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   481k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   481k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 481k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   481k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  132|   481k|  return v;
  133|   481k|}
lj_bcread.c:bcread_bytecode:
  284|   142k|{
  285|   142k|  BCIns *bc = proto_bc(pt);
  ------------------
  |  |  420|   142k|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  ------------------
  286|   142k|  BCIns op;
  287|   142k|  if (ls->fr2 != LJ_FR2) op = BC_NOT;  /* Mark non-native prototype. */
  ------------------
  |  |  569|   142k|#define LJ_FR2			1
  ------------------
  |  Branch (287:7): [True: 0, False: 142k]
  ------------------
  288|   142k|  else if ((pt->flags & PROTO_VARARG)) op = BC_FUNCV;
  ------------------
  |  |  400|   142k|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
  |  Branch (288:12): [True: 0, False: 142k]
  ------------------
  289|   142k|  else op = BC_FUNCF;
  290|   142k|  bc[0] = BCINS_AD(op, pt->framesize, 0);
  ------------------
  |  |   56|   142k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  291|   142k|  bcread_block(ls, bc+1, (sizebc-1)*(MSize)sizeof(BCIns));
  292|       |  /* Swap bytecode instructions if the endianess differs. */
  293|   142k|  if (bcread_swap(ls)) {
  ------------------
  |  |   29|   142k|  ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   27|   142k|#define bcread_flags(ls)	ls->level
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   42|   142k|#define BCDUMP_F_BE		0x01
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |  630|   142k|#define LJ_BE			0
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   42|   142k|#define BCDUMP_F_BE		0x01
  |  |  ------------------
  |  |  |  Branch (29:3): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
  294|      0|    MSize i;
  295|      0|    for (i = 1; i < sizebc; i++) bc[i] = lj_bswap(bc[i]);
  ------------------
  |  Branch (295:17): [True: 0, False: 0]
  ------------------
  296|      0|  }
  297|   142k|}
lj_bcread.c:bcread_block:
  116|   142k|{
  117|   142k|  memcpy(q, bcread_mem(ls, len), len);
  118|   142k|}
lj_bcread.c:bcread_mem:
  107|   142k|{
  108|   142k|  uint8_t *p = (uint8_t *)ls->p;
  109|   142k|  ls->p += len;
  110|   142k|  lj_assertLS(ls->p <= ls->pe, "buffer read overflow");
  ------------------
  |  |   89|   142k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   142k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   142k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 142k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   142k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  111|   142k|  return p;
  112|   142k|}
lj_bcread.c:bcread_uv:
  301|   142k|{
  302|   142k|  if (sizeuv) {
  ------------------
  |  Branch (302:7): [True: 0, False: 142k]
  ------------------
  303|      0|    uint16_t *uv = proto_uv(pt);
  ------------------
  |  |  422|      0|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  304|      0|    bcread_block(ls, uv, sizeuv*2);
  305|       |    /* Swap upvalue refs if the endianess differs. */
  306|      0|    if (bcread_swap(ls)) {
  ------------------
  |  |   29|      0|  ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   27|      0|#define bcread_flags(ls)	ls->level
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   42|      0|#define BCDUMP_F_BE		0x01
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |  630|      0|#define LJ_BE			0
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   42|      0|#define BCDUMP_F_BE		0x01
  |  |  ------------------
  |  |  |  Branch (29:3): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  307|      0|      MSize i;
  308|      0|      for (i = 0; i < sizeuv; i++)
  ------------------
  |  Branch (308:19): [True: 0, False: 0]
  ------------------
  309|      0|	uv[i] = (uint16_t)((uv[i] >> 8)|(uv[i] << 8));
  310|      0|    }
  311|      0|  }
  312|   142k|}
lj_bcread.c:bcread_kgc:
  228|   142k|{
  229|   142k|  MSize i;
  230|   142k|  GCRef *kr = mref(pt->k, GCRef) - (ptrdiff_t)sizekgc;
  ------------------
  |  |   36|   142k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  231|   142k|  for (i = 0; i < sizekgc; i++, kr++) {
  ------------------
  |  Branch (231:15): [True: 0, False: 142k]
  ------------------
  232|      0|    MSize tp = bcread_uleb128(ls);
  233|      0|    if (tp >= BCDUMP_KGC_STR) {
  ------------------
  |  Branch (233:9): [True: 0, False: 0]
  ------------------
  234|      0|      MSize len = tp - BCDUMP_KGC_STR;
  235|      0|      const char *p = (const char *)bcread_mem(ls, len);
  236|      0|      setgcref(*kr, obj2gco(lj_str_new(ls->L, p, len)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  237|      0|    } else if (tp == BCDUMP_KGC_TAB) {
  ------------------
  |  Branch (237:16): [True: 0, False: 0]
  ------------------
  238|      0|      setgcref(*kr, obj2gco(bcread_ktab(ls)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  239|      0|#if LJ_HASFFI
  240|      0|    } else if (tp != BCDUMP_KGC_CHILD) {
  ------------------
  |  Branch (240:16): [True: 0, False: 0]
  ------------------
  241|      0|      CTypeID id = tp == BCDUMP_KGC_COMPLEX ? CTID_COMPLEX_DOUBLE :
  ------------------
  |  Branch (241:20): [True: 0, False: 0]
  ------------------
  242|      0|		   tp == BCDUMP_KGC_I64 ? CTID_INT64 : CTID_UINT64;
  ------------------
  |  Branch (242:6): [True: 0, False: 0]
  ------------------
  243|      0|      CTSize sz = tp == BCDUMP_KGC_COMPLEX ? 16 : 8;
  ------------------
  |  Branch (243:19): [True: 0, False: 0]
  ------------------
  244|      0|      GCcdata *cd = lj_cdata_new_(ls->L, id, sz);
  245|      0|      TValue *p = (TValue *)cdataptr(cd);
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  246|      0|      setgcref(*kr, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  247|      0|      p[0].u32.lo = bcread_uleb128(ls);
  248|      0|      p[0].u32.hi = bcread_uleb128(ls);
  249|      0|      if (tp == BCDUMP_KGC_COMPLEX) {
  ------------------
  |  Branch (249:11): [True: 0, False: 0]
  ------------------
  250|      0|	p[1].u32.lo = bcread_uleb128(ls);
  251|      0|	p[1].u32.hi = bcread_uleb128(ls);
  252|      0|      }
  253|      0|#endif
  254|      0|    } else {
  255|      0|      lua_State *L = ls->L;
  256|      0|      lj_assertLS(tp == BCDUMP_KGC_CHILD, "bad constant type %d", tp);
  ------------------
  |  |   89|      0|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  257|      0|      if (L->top <= bcread_oldtop(L, ls))  /* Stack underflow? */
  ------------------
  |  |   30|      0|#define bcread_oldtop(L, ls)	restorestack(L, ls->lastline)
  |  |  ------------------
  |  |  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (257:11): [True: 0, False: 0]
  ------------------
  258|      0|	bcread_error(ls, LJ_ERR_BCBAD);
  259|      0|      L->top--;
  260|      0|      setgcref(*kr, obj2gco(protoV(L->top)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  261|      0|    }
  262|      0|  }
  263|   142k|}
lj_bcread.c:bcread_knum:
  267|   142k|{
  268|   142k|  MSize i;
  269|   142k|  TValue *o = mref(pt->k, TValue);
  ------------------
  |  |   36|   142k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  270|   231k|  for (i = 0; i < sizekn; i++, o++) {
  ------------------
  |  Branch (270:15): [True: 89.1k, False: 142k]
  ------------------
  271|  89.1k|    int isnum = (ls->p[0] & 1);
  272|  89.1k|    uint32_t lo = bcread_uleb128_33(ls);
  273|  89.1k|    if (isnum) {
  ------------------
  |  Branch (273:9): [True: 53.5k, False: 35.6k]
  ------------------
  274|  53.5k|      o->u32.lo = lo;
  275|  53.5k|      o->u32.hi = bcread_uleb128(ls);
  276|  53.5k|    } else {
  277|  35.6k|      setintV(o, lo);
  278|  35.6k|    }
  279|  89.1k|  }
  280|   142k|}
lj_bcread.c:bcread_uleb128_33:
  137|  89.1k|{
  138|  89.1k|  const uint8_t *p = (const uint8_t *)ls->p;
  139|  89.1k|  uint32_t v = (*p++ >> 1);
  140|  89.1k|  if (LJ_UNLIKELY(v >= 0x40)) {
  ------------------
  |  |  146|  89.1k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 35.6k, False: 53.5k]
  |  |  ------------------
  ------------------
  141|  35.6k|    int sh = -1;
  142|  35.6k|    v &= 0x3f;
  143|   142k|    do {
  144|   142k|     v |= ((*p & 0x7f) << (sh += 7));
  145|   142k|   } while (*p++ >= 0x80);
  ------------------
  |  Branch (145:13): [True: 107k, False: 35.6k]
  ------------------
  146|  35.6k|  }
  147|  89.1k|  ls->p = (char *)p;
  148|  89.1k|  lj_assertLS(ls->p <= ls->pe, "buffer read overflow");
  ------------------
  |  |   89|  89.1k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  89.1k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  89.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 89.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  89.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  149|  89.1k|  return v;
  150|  89.1k|}

lj_buf_more2:
   61|  77.7k|{
   62|  77.7k|  if (sbufisext(sb)) {
  ------------------
  |  |   56|  77.7k|#define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   55|  77.7k|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|  77.7k|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   43|  77.7k|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  |  |  ------------------
  |  |  |  Branch (56:24): [True: 0, False: 77.7k]
  |  |  ------------------
  ------------------
   63|      0|    SBufExt *sbx = (SBufExt *)sb;
   64|      0|    MSize len = sbufxlen(sbx);
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
   65|      0|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   66|      0|      lj_err_mem(sbufL(sbx));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    if (len + sz > sbufsz(sbx)) {  /* Must grow. */
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|      buf_grow((SBuf *)sbx, len + sz);
   69|      0|    } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   39|      0|#define sbufxslack(sbx)		((MSize)((sbx)->r - (sbx)->b))
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (69:33): [True: 0, False: 0]
  ------------------
   70|       |      /* Also grow to avoid excessive compactions, if slack < size/8. */
   71|      0|      buf_grow((SBuf *)sbx, sbuflen(sbx) + sz);  /* Not sbufxlen! */
  ------------------
  |  |   36|      0|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   72|      0|      return sbx->w;
   73|      0|    }
   74|      0|    if (sbx->r != sbx->b) {  /* Compact by moving down. */
  ------------------
  |  Branch (74:9): [True: 0, False: 0]
  ------------------
   75|      0|      memmove(sbx->b, sbx->r, len);
   76|      0|      sbx->r = sbx->b;
   77|      0|      sbx->w = sbx->b + len;
   78|      0|      lj_assertG_(G(sbufL(sbx)), len + sz <= sbufsz(sbx), "bad SBuf compact");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|    }
   80|  77.7k|  } else {
   81|  77.7k|    MSize len = sbuflen(sb);
  ------------------
  |  |   36|  77.7k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   82|  77.7k|    lj_assertG_(G(sbufL(sb)), sz > sbufleft(sb), "SBuf overflow");
  ------------------
  |  |  363|  77.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  77.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 77.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  77.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   83|  77.7k|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|   155k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 77.7k]
  |  |  |  Branch (146:44): [True: 0, False: 77.7k]
  |  |  |  Branch (146:44): [True: 0, False: 77.7k]
  |  |  ------------------
  ------------------
   84|      0|      lj_err_mem(sbufL(sb));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  77.7k|    buf_grow(sb, len + sz);
   86|  77.7k|  }
   87|  77.7k|  return sb->w;
   88|  77.7k|}
lj_buf_shrink:
   91|  2.03k|{
   92|  2.03k|  char *b = sb->b;
   93|  2.03k|  MSize osz = (MSize)(sb->e - b);
   94|  2.03k|  if (osz > 2*LJ_MIN_SBUF) {
  ------------------
  |  |   80|  2.03k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (94:7): [True: 11, False: 2.02k]
  ------------------
   95|     11|    b = lj_mem_realloc(L, b, osz, (osz >> 1));
   96|     11|    sb->w = sb->b = b;  /* Not supposed to keep data across shrinks. */
   97|     11|    sb->e = b + (osz >> 1);
   98|     11|  }
   99|  2.03k|  lj_assertG_(G(sbufL(sb)), !sbufisext(sb), "YAGNI shrink SBufExt");
  ------------------
  |  |  363|  2.03k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.03k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.03k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.03k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  100|  2.03k|}
lj_buf_putmem:
  131|   150k|{
  132|   150k|  char *w = lj_buf_more(sb, len);
  133|   150k|  w = lj_buf_wmem(w, q, len);
  134|   150k|  sb->w = w;
  135|   150k|  return sb;
  136|   150k|}
lj_buf_ruleb128:
  292|   481k|{
  293|   481k|  const uint8_t *w = (const uint8_t *)*pp;
  294|   481k|  uint32_t v = *w++;
  295|   481k|  if (LJ_UNLIKELY(v >= 0x80)) {
  ------------------
  |  |  146|   481k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 53.5k, False: 428k]
  |  |  ------------------
  ------------------
  296|  53.5k|    int sh = 0;
  297|  53.5k|    v &= 0x7f;
  298|   214k|    do { v |= ((*w & 0x7f) << (sh += 7)); } while (*w++ >= 0x80);
  ------------------
  |  Branch (298:52): [True: 160k, False: 53.5k]
  ------------------
  299|  53.5k|  }
  300|   481k|  *pp = (const char *)w;
  301|   481k|  return v;
  302|   481k|}
lj_buf.c:buf_grow:
   20|  77.7k|{
   21|  77.7k|  MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   35|  77.7k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
                MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   36|  77.7k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   22|  77.7k|  char *b;
   23|  77.7k|  GCSize flag;
   24|  77.7k|  if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|  77.7k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
                if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|  38.9k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (24:7): [True: 38.9k, False: 38.7k]
  ------------------
   25|   116k|  while (nsz < sz) nsz += nsz;
  ------------------
  |  Branch (25:10): [True: 39.0k, False: 77.7k]
  ------------------
   26|  77.7k|  flag = sbufflag(sb);
  ------------------
  |  |   55|  77.7k|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  ------------------
  |  |  |  |   37|  77.7k|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  ------------------
   27|  77.7k|  if ((flag & SBUF_FLAG_COW)) {  /* Copy-on-write semantics. */
  ------------------
  |  |   44|  77.7k|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  ------------------
  |  Branch (27:7): [True: 0, False: 77.7k]
  ------------------
   28|      0|    lj_assertG_(G(sbufL(sb)), sb->w == sb->e, "bad SBuf COW");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   29|      0|    b = (char *)lj_mem_new(sbufL(sb), nsz);
  ------------------
  |  |  117|      0|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  ------------------
   30|      0|    setsbufflag(sb, flag & ~(GCSize)SBUF_FLAG_COW);
  ------------------
  |  |   62|      0|#define setsbufflag(sb, flag)	(setmrefu((sb)->L, (flag)))
  |  |  ------------------
  |  |  |  |   40|      0|#define setmrefu(r, u)	((r).ptr64 = (uint64_t)(u))
  |  |  ------------------
  ------------------
   31|      0|    setgcrefnull(sbufX(sb)->cowref);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  |  |  ------------------
  |  |  |  Branch (76:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   32|      0|    memcpy(b, sb->b, osz);
   33|  77.7k|  } else {
   34|  77.7k|    b = (char *)lj_mem_realloc(sbufL(sb), sb->b, osz, nsz);
  ------------------
  |  |   48|  77.7k|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|  77.7k|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|  77.7k|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|  77.7k|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   35|  77.7k|  }
   36|  77.7k|  if ((flag & SBUF_FLAG_EXT)) {
  ------------------
  |  |   43|  77.7k|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  ------------------
  |  Branch (36:7): [True: 0, False: 77.7k]
  ------------------
   37|      0|    sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|      0|  }
   39|       |  /* Adjust buffer pointers. */
   40|  77.7k|  sb->b = b;
   41|  77.7k|  sb->w = b + len;
   42|  77.7k|  sb->e = b + nsz;
   43|  77.7k|  if ((flag & SBUF_FLAG_BORROW)) {  /* Adjust borrowed buffer pointers. */
  ------------------
  |  |   45|  77.7k|#define SBUF_FLAG_BORROW	4	/* Borrowed string buffer. */
  ------------------
  |  Branch (43:7): [True: 0, False: 77.7k]
  ------------------
   44|      0|    SBuf *bsb = mref(sbufX(sb)->bsb, SBuf);
  ------------------
  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   45|      0|    bsb->b = b;
   46|      0|    bsb->w = b + len;
   47|      0|    bsb->e = b + nsz;
   48|      0|  }
   49|  77.7k|}

lj_state.c:lj_buf_init:
   75|  17.8k|{
   76|  17.8k|  setsbufL(sb, L);
  ------------------
  |  |   49|  17.8k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  17.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  17.8k|  sb->w = sb->e = sb->b = NULL;
   78|  17.8k|}
lj_state.c:lj_buf_free:
   94|  17.8k|{
   95|  17.8k|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  17.8k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  17.8k|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  17.8k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  17.8k|}
lj_lex.c:lj_buf_free:
   94|  17.8k|{
   95|  17.8k|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  17.8k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  17.8k|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  17.8k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  17.8k|}
lj_lex.c:lj_buf_reset:
   81|  2.00M|{
   82|  2.00M|  sb->w = sb->b;
   83|  2.00M|}
lj_lex.c:lj_buf_putb:
  181|  6.29M|{
  182|  6.29M|  char *w = lj_buf_more(sb, 1);
  183|  6.29M|  *w++ = (char)c;
  184|  6.29M|  sb->w = w;
  185|  6.29M|}
lj_lex.c:lj_buf_more:
  107|  6.29M|{
  108|  6.29M|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  6.29M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 35.2k, False: 6.25M]
  |  |  ------------------
  ------------------
  109|  35.2k|    return lj_buf_more2(sb, sz);
  110|  6.25M|  return sb->w;
  111|  6.29M|}
lj_parse.c:lj_buf_reset:
   81|  21.5k|{
   82|  21.5k|  sb->w = sb->b;
   83|  21.5k|}
lj_parse.c:lj_buf_more:
  107|  41.6k|{
  108|  41.6k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  41.6k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 342, False: 41.2k]
  |  |  ------------------
  ------------------
  109|    342|    return lj_buf_more2(sb, sz);
  110|  41.2k|  return sb->w;
  111|  41.6k|}
lj_parse.c:lj_buf_wmem:
  176|  20.1k|{
  177|  20.1k|  return (char *)memcpy(p, q, len) + len;
  178|  20.1k|}
lj_parse.c:lj_buf_putb:
  181|  21.5k|{
  182|  21.5k|  char *w = lj_buf_more(sb, 1);
  183|  21.5k|  *w++ = (char)c;
  184|  21.5k|  sb->w = w;
  185|  21.5k|}
lj_load.c:lj_buf_init:
   75|  17.8k|{
   76|  17.8k|  setsbufL(sb, L);
  ------------------
  |  |   49|  17.8k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  17.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  17.8k|  sb->w = sb->e = sb->b = NULL;
   78|  17.8k|}
lj_buf.c:lj_buf_more:
  107|   150k|{
  108|   150k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|   150k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 28.7k, False: 122k]
  |  |  ------------------
  ------------------
  109|  28.7k|    return lj_buf_more2(sb, sz);
  110|   122k|  return sb->w;
  111|   150k|}
lj_buf.c:lj_buf_wmem:
  176|   150k|{
  177|   150k|  return (char *)memcpy(p, q, len) + len;
  178|   150k|}
lj_strfmt.c:lj_buf_tmp_:
   86|  52.7k|{
   87|  52.7k|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|  52.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  52.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|  52.7k|  setsbufL(sb, L);
  ------------------
  |  |   49|  52.7k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  52.7k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|  52.7k|  lj_buf_reset(sb);
   90|  52.7k|  return sb;
   91|  52.7k|}
lj_strfmt.c:lj_buf_reset:
   81|  52.7k|{
   82|  52.7k|  sb->w = sb->b;
   83|  52.7k|}
lj_strfmt.c:lj_buf_more:
  107|  28.0k|{
  108|  28.0k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  28.0k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 6.32k, False: 21.7k]
  |  |  ------------------
  ------------------
  109|  6.32k|    return lj_buf_more2(sb, sz);
  110|  21.7k|  return sb->w;
  111|  28.0k|}
lj_strfmt.c:lj_buf_putb:
  181|  7.65k|{
  182|  7.65k|  char *w = lj_buf_more(sb, 1);
  183|  7.65k|  *w++ = (char)c;
  184|  7.65k|  sb->w = w;
  185|  7.65k|}
lj_strfmt.c:lj_buf_str:
  201|  52.7k|{
  202|  52.7k|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|  52.7k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  203|  52.7k|}
lj_cparse.c:lj_buf_init:
   75|  11.0k|{
   76|  11.0k|  setsbufL(sb, L);
  ------------------
  |  |   49|  11.0k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  11.0k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  11.0k|  sb->w = sb->e = sb->b = NULL;
   78|  11.0k|}
lj_cparse.c:lj_buf_reset:
   81|  46.3k|{
   82|  46.3k|  sb->w = sb->b;
   83|  46.3k|}
lj_cparse.c:lj_buf_putb:
  181|   140k|{
  182|   140k|  char *w = lj_buf_more(sb, 1);
  183|   140k|  *w++ = (char)c;
  184|   140k|  sb->w = w;
  185|   140k|}
lj_cparse.c:lj_buf_more:
  107|   140k|{
  108|   140k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|   140k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 7.12k, False: 133k]
  |  |  ------------------
  ------------------
  109|  7.12k|    return lj_buf_more2(sb, sz);
  110|   133k|  return sb->w;
  111|   140k|}
lj_cparse.c:lj_buf_str:
  201|  21.5k|{
  202|  21.5k|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|  21.5k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  203|  21.5k|}
lj_cparse.c:lj_buf_free:
   94|  11.0k|{
   95|  11.0k|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  11.0k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  11.0k|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  11.0k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  11.0k|}

lj_ccallback_mcode_free:
  320|  13.5k|{
  321|  13.5k|  size_t sz = (size_t)CALLBACK_MCODE_SIZE;
  ------------------
  |  |   26|  13.5k|#define CALLBACK_MCODE_SIZE	(LJ_PAGESIZE * LJ_NUM_CBPAGE)
  |  |  ------------------
  |  |  |  |  648|  13.5k|#define LJ_PAGESIZE		4096
  |  |  ------------------
  |  |               #define CALLBACK_MCODE_SIZE	(LJ_PAGESIZE * LJ_NUM_CBPAGE)
  |  |  ------------------
  |  |  |  |   74|  13.5k|#define LJ_NUM_CBPAGE	1		/* Number of FFI callback pages. */
  |  |  ------------------
  ------------------
  322|  13.5k|  void *p = cts->cb.mcode;
  323|  13.5k|  if (p == NULL) return;
  ------------------
  |  Branch (323:7): [True: 13.5k, False: 0]
  ------------------
  324|       |#if LJ_TARGET_WINDOWS
  325|       |  VirtualFree(p, 0, MEM_RELEASE);
  326|       |  UNUSED(sz);
  327|       |#elif LJ_TARGET_POSIX
  328|      0|  munmap(p, sz);
  329|       |#else
  330|       |  lj_mem_free(cts->g, p, sz);
  331|       |#endif
  332|      0|}

lj_cdata_free:
   63|   121k|{
   64|   121k|  if (LJ_UNLIKELY(cd->marked & LJ_GC_CDATA_FIN)) {
  ------------------
  |  |  146|   121k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 121k]
  |  |  ------------------
  ------------------
   65|      0|    GCobj *root;
   66|      0|    makewhite(g, obj2gco(cd));
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    markfinalized(obj2gco(cd));
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
   68|      0|    if ((root = gcref(g->gc.mmudata)) != NULL) {
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (68:9): [True: 0, False: 0]
  ------------------
   69|      0|      setgcrefr(cd->nextgc, root->gch.nextgc);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   70|      0|      setgcref(root->gch.nextgc, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   71|      0|      setgcref(g->gc.mmudata, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   72|      0|    } else {
   73|      0|      setgcref(cd->nextgc, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   74|      0|      setgcref(g->gc.mmudata, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   75|      0|    }
   76|   121k|  } else if (LJ_LIKELY(!cdataisv(cd))) {
  ------------------
  |  |  145|   121k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 121k, False: 0]
  |  |  ------------------
  ------------------
   77|   121k|    CType *ct = ctype_raw(ctype_ctsG(g), cd->ctypeid);
  ------------------
  |  |  386|   121k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|   121k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   78|   121k|    CTSize sz = ctype_hassize(ct->info) ? ct->size : CTSIZE_PTR;
  ------------------
  |  |  214|   121k|#define ctype_hassize(info)	(ctype_type((info)) <= CT_HASSIZE)
  |  |  ------------------
  |  |  |  |  189|   121k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|   121k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (214:29): [True: 121k, False: 0]
  |  |  ------------------
  ------------------
                  CTSize sz = ctype_hassize(ct->info) ? ct->size : CTSIZE_PTR;
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
   79|   121k|    lj_assertG(ctype_hassize(ct->info) || ctype_isfunc(ct->info) ||
  ------------------
  |  |  364|   121k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   242k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 121k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   121k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   80|   121k|	       ctype_isextern(ct->info), "free of ctype without a size");
   81|   121k|    lj_mem_free(g, cd, sizeof(GCcdata) + sz);
   82|   121k|  } else {
   83|      0|    lj_mem_free(g, memcdatav(cd), sizecdatav(cd));
  ------------------
  |  |  365|      0|#define memcdatav(cd)	((void *)((char *)(cd) - cdatav(cd)->offset))
  |  |  ------------------
  |  |  |  |  362|      0|#define cdatav(cd)	((GCcdataVar *)((char *)(cd) - sizeof(GCcdataVar)))
  |  |  ------------------
  ------------------
                  lj_mem_free(g, memcdatav(cd), sizecdatav(cd));
  ------------------
  |  |  364|      0|#define sizecdatav(cd)	(cdatavlen(cd) + cdatav(cd)->extra)
  |  |  ------------------
  |  |  |  |  363|      0|#define cdatavlen(cd)	check_exp(cdataisv(cd), cdatav(cd)->len)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sizecdatav(cd)	(cdatavlen(cd) + cdatav(cd)->extra)
  |  |  ------------------
  |  |  |  |  362|      0|#define cdatav(cd)	((GCcdataVar *)((char *)(cd) - sizeof(GCcdataVar)))
  |  |  ------------------
  ------------------
   84|      0|  }
   85|   121k|}

lj_lex.c:lj_cdata_new_:
   54|   121k|{
   55|   121k|  GCcdata *cd = (GCcdata *)lj_mem_newgco(L, sizeof(GCcdata) + sz);
   56|   121k|  cd->gct = ~LJ_TCDATA;
  ------------------
  |  |  270|   121k|#define LJ_TCDATA		(~10u)
  ------------------
   57|   121k|  cd->ctypeid = id;
   58|   121k|  return cd;
   59|   121k|}

lj_clib_unload:
  422|  13.5k|{
  423|  13.5k|  clib_unloadlib(cl);
  424|  13.5k|  cl->handle = NULL;
  425|  13.5k|}
lj_clib_default:
  429|  13.5k|{
  430|  13.5k|  CLibrary *cl = clib_new(L, mt);
  431|  13.5k|  cl->handle = CLIB_DEFHANDLE;
  ------------------
  |  |   33|  13.5k|#define CLIB_DEFHANDLE	NULL
  ------------------
  432|  13.5k|}
lj_clib.c:clib_new:
  400|  13.5k|{
  401|  13.5k|  GCtab *t = lj_tab_new(L, 0, 0);
  402|  13.5k|  GCudata *ud = lj_udata_new(L, sizeof(CLibrary), t);
  403|  13.5k|  CLibrary *cl = (CLibrary *)uddata(ud);
  ------------------
  |  |  342|  13.5k|#define uddata(u)	((void *)((u)+1))
  ------------------
  404|  13.5k|  cl->cache = t;
  405|  13.5k|  ud->udtype = UDTYPE_FFI_CLIB;
  406|       |  /* NOBARRIER: The GCudata is new (marked white). */
  407|  13.5k|  setgcref(ud->metatable, obj2gco(mt));
  ------------------
  |  |   72|  13.5k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  408|  13.5k|  setudataV(L, L->top++, ud);
  409|  13.5k|  return cl;
  410|  13.5k|}
lj_clib.c:clib_unloadlib:
  135|  13.5k|{
  136|  13.5k|  if (cl->handle && cl->handle != CLIB_DEFHANDLE)
  ------------------
  |  |   33|      0|#define CLIB_DEFHANDLE	NULL
  ------------------
  |  Branch (136:7): [True: 0, False: 13.5k]
  |  Branch (136:21): [True: 0, False: 0]
  ------------------
  137|      0|    dlclose(cl->handle);
  138|  13.5k|}

lj_cparse:
 1920|  11.0k|{
 1921|  11.0k|  LJ_CTYPE_SAVE(cp->cts);
  ------------------
  |  |  407|  11.0k|#define LJ_CTYPE_SAVE(cts)	CTState savects_ = *(cts)
  ------------------
 1922|  11.0k|  int errcode = lj_vm_cpcall(cp->L, NULL, cp, cpcparser);
 1923|  11.0k|  if (errcode)
  ------------------
  |  Branch (1923:7): [True: 7.26k, False: 3.82k]
  ------------------
 1924|  7.26k|    LJ_CTYPE_RESTORE(cp->cts);
  ------------------
  |  |  409|  7.26k|  ((cts)->top = savects_.top, \
  |  |  410|  7.26k|   memcpy((cts)->hash, savects_.hash, sizeof(savects_.hash)))
  ------------------
 1925|  11.0k|  cp_cleanup(cp);
 1926|  11.0k|  return errcode;
 1927|  11.0k|}
lj_cparse.c:cpcparser:
 1903|  11.0k|{
 1904|  11.0k|  CPState *cp = (CPState *)ud;
 1905|  11.0k|  UNUSED(dummy);
  ------------------
  |  |   91|  11.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1906|  11.0k|  cframe_errfunc(L->cframe) = -1;  /* Inherit error function. */
  ------------------
  |  |  279|  11.0k|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|  11.0k|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
 1907|  11.0k|  cp_init(cp);
 1908|  11.0k|  if ((cp->mode & CPARSE_MODE_MULTI))
  ------------------
  |  |   21|  11.0k|#define CPARSE_MODE_MULTI	1	/* Process multiple declarations. */
  ------------------
  |  Branch (1908:7): [True: 11.0k, False: 0]
  ------------------
 1909|  11.0k|    cp_decl_multi(cp);
 1910|      0|  else
 1911|      0|    cp_decl_single(cp);
 1912|  11.0k|  if (cp->param && cp->param != cp->L->top)
  ------------------
  |  Branch (1912:7): [True: 3.82k, False: 7.26k]
  |  Branch (1912:20): [True: 0, False: 3.82k]
  ------------------
 1913|      0|    cp_err(cp, LJ_ERR_FFI_NUMPARAM);
 1914|  11.0k|  lj_assertCP(cp->depth == 0, "unbalanced cparser declaration depth");
  ------------------
  |  |   32|  11.0k|#define lj_assertCP(c, ...)	(lj_assertG_(G(cp->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  11.0k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  11.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3.82k, False: 7.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  11.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1915|  3.82k|  return NULL;
 1916|  11.0k|}
lj_cparse.c:cp_init:
  395|  11.0k|{
  396|  11.0k|  cp->linenumber = 1;
  397|  11.0k|  cp->depth = 0;
  398|  11.0k|  cp->curpack = 0;
  399|  11.0k|  cp->packstack[0] = 255;
  400|  11.0k|  lj_buf_init(cp->L, &cp->sb);
  401|  11.0k|  lj_assertCP(cp->p != NULL, "uninitialized cp->p");
  ------------------
  |  |   32|  11.0k|#define lj_assertCP(c, ...)	(lj_assertG_(G(cp->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  11.0k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  11.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 11.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  11.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  402|  11.0k|  cp_get(cp);  /* Read-ahead first char. */
  403|  11.0k|  cp->tok = 0;
  404|  11.0k|  cp->tmask = CPNS_DEFAULT;
  ------------------
  |  |  364|  11.0k|  ((1u<<CT_KW)|(1u<<CT_TYPEDEF)|(1u<<CT_FUNC)|(1u<<CT_EXTERN)|(1u<<CT_CONSTVAL))
  ------------------
  405|  11.0k|  cp_next(cp);  /* Read-ahead first token. */
  406|  11.0k|}
lj_cparse.c:cp_get:
   95|   208k|{
   96|   208k|  cp->c = (CPChar)(uint8_t)(*cp->p++);
   97|   208k|  if (LJ_LIKELY(cp->c != '\\')) return cp->c;
  ------------------
  |  |  145|   208k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 208k, False: 0]
  |  |  ------------------
  ------------------
   98|      0|  return cp_get_bs(cp);
   99|   208k|}
lj_cparse.c:cp_rawpeek:
   87|  17.6k|{
   88|  17.6k|  return (CPChar)(uint8_t)(*cp->p);
   89|  17.6k|}
lj_cparse.c:cp_iseol:
   81|  17.6k|{
   82|  17.6k|  return (c == '\n' || c == '\r');
  ------------------
  |  Branch (82:11): [True: 2.46k, False: 15.2k]
  |  Branch (82:24): [True: 0, False: 15.2k]
  ------------------
   83|  17.6k|}
lj_cparse.c:cp_next:
  356|  46.3k|{
  357|  46.3k|  return (cp->tok = cp_next_(cp));
  358|  46.3k|}
lj_cparse.c:cp_next_:
  310|  46.3k|{
  311|  46.3k|  lj_buf_reset(&cp->sb);
  312|  86.8k|  for (;;) {
  313|  86.8k|    if (lj_char_isident(cp->c))
  ------------------
  |  |   32|  86.8k|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|  86.8k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 21.8k, False: 65.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  314|  21.8k|      return lj_char_isdigit(cp->c) ? cp_number(cp) : cp_ident(cp);
  ------------------
  |  |   28|  21.8k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  21.8k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 217, False: 21.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  315|  65.0k|    switch (cp->c) {
  316|  17.6k|    case '\n': case '\r': cp_newline(cp);  /* fallthrough. */
  ------------------
  |  Branch (316:5): [True: 17.6k, False: 47.4k]
  |  Branch (316:16): [True: 0, False: 65.0k]
  ------------------
  317|  40.5k|    case ' ': case '\t': case '\v': case '\f': cp_get(cp); break;
  ------------------
  |  Branch (317:5): [True: 22.8k, False: 42.2k]
  |  Branch (317:15): [True: 0, False: 65.0k]
  |  Branch (317:26): [True: 0, False: 65.0k]
  |  Branch (317:37): [True: 0, False: 65.0k]
  ------------------
  318|      0|    case '"': case '\'': return cp_string(cp);
  ------------------
  |  Branch (318:5): [True: 0, False: 65.0k]
  |  Branch (318:15): [True: 0, False: 65.0k]
  ------------------
  319|      0|    case '/':
  ------------------
  |  Branch (319:5): [True: 0, False: 65.0k]
  ------------------
  320|      0|      if (cp_get(cp) == '*') cp_comment_c(cp);
  ------------------
  |  Branch (320:11): [True: 0, False: 0]
  ------------------
  321|      0|      else if (cp->c == '/') cp_comment_cpp(cp);
  ------------------
  |  Branch (321:16): [True: 0, False: 0]
  ------------------
  322|      0|      else return '/';
  323|      0|      break;
  324|      0|    case '|':
  ------------------
  |  Branch (324:5): [True: 0, False: 65.0k]
  ------------------
  325|      0|      if (cp_get(cp) != '|') return '|';
  ------------------
  |  Branch (325:11): [True: 0, False: 0]
  ------------------
  326|      0|      cp_get(cp); return CTOK_OROR;
  327|      0|    case '&':
  ------------------
  |  Branch (327:5): [True: 0, False: 65.0k]
  ------------------
  328|      0|      if (cp_get(cp) != '&') return '&';
  ------------------
  |  Branch (328:11): [True: 0, False: 0]
  ------------------
  329|      0|      cp_get(cp); return CTOK_ANDAND;
  330|      0|    case '=':
  ------------------
  |  Branch (330:5): [True: 0, False: 65.0k]
  ------------------
  331|      0|      if (cp_get(cp) != '=') return '=';
  ------------------
  |  Branch (331:11): [True: 0, False: 0]
  ------------------
  332|      0|      cp_get(cp); return CTOK_EQ;
  333|      0|    case '!':
  ------------------
  |  Branch (333:5): [True: 0, False: 65.0k]
  ------------------
  334|      0|      if (cp_get(cp) != '=') return '!';
  ------------------
  |  Branch (334:11): [True: 0, False: 0]
  ------------------
  335|      0|      cp_get(cp); return CTOK_NE;
  336|      0|    case '<':
  ------------------
  |  Branch (336:5): [True: 0, False: 65.0k]
  ------------------
  337|      0|      if (cp_get(cp) == '=') { cp_get(cp); return CTOK_LE; }
  ------------------
  |  Branch (337:11): [True: 0, False: 0]
  ------------------
  338|      0|      else if (cp->c == '<') { cp_get(cp); return CTOK_SHL; }
  ------------------
  |  Branch (338:16): [True: 0, False: 0]
  ------------------
  339|      0|      return '<';
  340|      0|    case '>':
  ------------------
  |  Branch (340:5): [True: 0, False: 65.0k]
  ------------------
  341|      0|      if (cp_get(cp) == '=') { cp_get(cp); return CTOK_GE; }
  ------------------
  |  Branch (341:11): [True: 0, False: 0]
  ------------------
  342|      0|      else if (cp->c == '>') { cp_get(cp); return CTOK_SHR; }
  ------------------
  |  Branch (342:16): [True: 0, False: 0]
  ------------------
  343|      0|      return '>';
  344|      0|    case '-':
  ------------------
  |  Branch (344:5): [True: 0, False: 65.0k]
  ------------------
  345|      0|      if (cp_get(cp) != '>') return '-';
  ------------------
  |  Branch (345:11): [True: 0, False: 0]
  ------------------
  346|      0|      cp_get(cp); return CTOK_DEREF;
  347|      0|    case '$':
  ------------------
  |  Branch (347:5): [True: 0, False: 65.0k]
  ------------------
  348|      0|      return cp_param(cp);
  349|  3.82k|    case '\0': return CTOK_EOF;
  ------------------
  |  Branch (349:5): [True: 3.82k, False: 61.2k]
  ------------------
  350|  20.7k|    default: { CPToken c = cp->c; cp_get(cp); return c; }
  ------------------
  |  Branch (350:5): [True: 20.7k, False: 44.3k]
  ------------------
  351|  65.0k|    }
  352|  65.0k|  }
  353|  46.3k|}
lj_cparse.c:cp_number:
  173|    217|{
  174|    217|  StrScanFmt fmt;
  175|    217|  TValue o;
  176|    500|  do { cp_save(cp, cp->c); } while (lj_char_isident(cp_get(cp)));
  ------------------
  |  |   32|    500|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|    500|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 283, False: 217]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|    217|  cp_save(cp, '\0');
  178|    217|  fmt = lj_strscan_scan((const uint8_t *)(cp->sb.b), sbuflen(&cp->sb)-1,
  ------------------
  |  |   36|    217|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  179|    217|			&o, STRSCAN_OPT_C);
  ------------------
  |  |   16|    217|#define STRSCAN_OPT_C		0x10
  ------------------
  180|    217|  if (fmt == STRSCAN_INT) cp->val.id = CTID_INT32;
  ------------------
  |  Branch (180:7): [True: 214, False: 3]
  ------------------
  181|      3|  else if (fmt == STRSCAN_U32) cp->val.id = CTID_UINT32;
  ------------------
  |  Branch (181:12): [True: 3, False: 0]
  ------------------
  182|      0|  else if (!(cp->mode & CPARSE_MODE_SKIP))
  ------------------
  |  |   26|      0|#define CPARSE_MODE_SKIP	32	/* Skip definitions, ignore errors. */
  ------------------
  |  Branch (182:12): [True: 0, False: 0]
  ------------------
  183|      0|    cp_errmsg(cp, CTOK_INTEGER, LJ_ERR_XNUMBER);
  184|    217|  cp->val.u32 = (uint32_t)o.i;
  185|    217|  return CTOK_INTEGER;
  186|    217|}
lj_cparse.c:cp_save:
  115|   140k|{
  116|   140k|  lj_buf_putb(&cp->sb, c);
  117|   140k|}
lj_cparse.c:cp_errmsg:
  128|  7.26k|{
  129|  7.26k|  const char *msg, *tokstr;
  130|  7.26k|  lua_State *L;
  131|  7.26k|  va_list argp;
  132|  7.26k|  if (tok == 0) {
  ------------------
  |  Branch (132:7): [True: 338, False: 6.92k]
  ------------------
  133|    338|    tokstr = NULL;
  134|  6.92k|  } else if (tok == CTOK_IDENT || tok == CTOK_INTEGER || tok == CTOK_STRING ||
  ------------------
  |  Branch (134:14): [True: 3.66k, False: 3.26k]
  |  Branch (134:35): [True: 4, False: 3.26k]
  |  Branch (134:58): [True: 0, False: 3.26k]
  ------------------
  135|  6.92k|	     tok >= CTOK_FIRSTDECL) {
  ------------------
  |  Branch (135:7): [True: 402, False: 2.86k]
  ------------------
  136|  4.06k|    if (cp->sb.w == cp->sb.b) cp_save(cp, '$');
  ------------------
  |  Branch (136:9): [True: 0, False: 4.06k]
  ------------------
  137|  4.06k|    cp_save(cp, '\0');
  138|  4.06k|    tokstr = cp->sb.b;
  139|  4.06k|  } else {
  140|  2.86k|    tokstr = cp_tok2str(cp, tok);
  141|  2.86k|  }
  142|  7.26k|  L = cp->L;
  143|  7.26k|  va_start(argp, em);
  144|  7.26k|  msg = lj_strfmt_pushvf(L, err2msg(em), argp);
  ------------------
  |  |   21|  7.26k|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  145|  7.26k|  va_end(argp);
  146|  7.26k|  if (tokstr)
  ------------------
  |  Branch (146:7): [True: 6.92k, False: 338]
  ------------------
  147|  6.92k|    msg = lj_strfmt_pushf(L, err2msg(LJ_ERR_XNEAR), msg, tokstr);
  ------------------
  |  |   21|  6.92k|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  148|  7.26k|  if (cp->linenumber > 1)
  ------------------
  |  Branch (148:7): [True: 3.48k, False: 3.77k]
  ------------------
  149|  3.48k|    msg = lj_strfmt_pushf(L, "%s at line %d", msg, cp->linenumber);
  150|  7.26k|  lj_err_callermsg(L, msg);
  151|  7.26k|}
lj_cparse.c:cp_tok2str:
   69|  3.73k|{
   70|  3.73k|  lj_assertCP(tok < CTOK_FIRSTDECL, "bad CPToken %d", tok);
  ------------------
  |  |   32|  3.73k|#define lj_assertCP(c, ...)	(lj_assertG_(G(cp->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  3.73k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.73k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3.73k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.73k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   71|  3.73k|  if (tok > CTOK_OFS)
  ------------------
  |  Branch (71:7): [True: 802, False: 2.93k]
  ------------------
   72|    802|    return ctoknames[tok-CTOK_OFS-1];
   73|  2.93k|  else if (!lj_char_iscntrl(tok))
  ------------------
  |  |   25|  2.93k|#define lj_char_iscntrl(c)	lj_char_isa((c), LJ_CHAR_CNTRL)
  |  |  ------------------
  |  |  |  |   24|  2.93k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (73:12): [True: 2.93k, False: 0]
  ------------------
   74|  2.93k|    return lj_strfmt_pushf(cp->L, "%c", tok);
   75|      0|  else
   76|      0|    return lj_strfmt_pushf(cp->L, "char(%d)", tok);
   77|  3.73k|}
lj_cparse.c:cp_ident:
  190|  21.5k|{
  191|   136k|  do { cp_save(cp, cp->c); } while (lj_char_isident(cp_get(cp)));
  ------------------
  |  |   32|   136k|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|   136k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 114k, False: 21.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  192|  21.5k|  cp->str = lj_buf_str(cp->L, &cp->sb);
  193|  21.5k|  cp->val.id = lj_ctype_getname(cp->cts, &cp->ct, cp->str, cp->tmask);
  194|  21.5k|  if (ctype_type(cp->ct->info) == CT_KW)
  ------------------
  |  |  189|  21.5k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|  21.5k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  |  Branch (194:7): [True: 12.3k, False: 9.24k]
  ------------------
  195|  12.3k|    return ctype_cid(cp->ct->info);
  ------------------
  |  |  190|  12.3k|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|  12.3k|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  196|  9.24k|  return CTOK_IDENT;
  197|  21.5k|}
lj_cparse.c:cp_newline:
  121|  17.6k|{
  122|  17.6k|  CPChar c = cp_rawpeek(cp);
  123|  17.6k|  if (cp_iseol(c) && c != cp->c) cp->p++;
  ------------------
  |  Branch (123:7): [True: 2.46k, False: 15.2k]
  |  Branch (123:22): [True: 0, False: 2.46k]
  ------------------
  124|  17.6k|  cp->linenumber++;
  125|  17.6k|}
lj_cparse.c:cp_err_token:
  154|    877|{
  155|    877|  cp_errmsg(cp, cp->tok, LJ_ERR_XTOKEN, cp_tok2str(cp, tok));
  156|    877|}
lj_cparse.c:cp_decl_multi:
 1809|  11.0k|{
 1810|  11.0k|  int first = 1;
 1811|  15.4k|  while (cp->tok != CTOK_EOF) {
  ------------------
  |  Branch (1811:10): [True: 11.5k, False: 3.89k]
  ------------------
 1812|  11.5k|    CPDecl decl;
 1813|  11.5k|    CPscl scl;
 1814|  11.5k|    if (cp_opt(cp, ';')) {  /* Skip empty statements. */
  ------------------
  |  Branch (1814:9): [True: 896, False: 10.6k]
  ------------------
 1815|    896|      first = 0;
 1816|    896|      continue;
 1817|    896|    }
 1818|  10.6k|    if (cp->tok == '#') {  /* Workaround, since we have no preprocessor, yet. */
  ------------------
  |  Branch (1818:9): [True: 0, False: 10.6k]
  ------------------
 1819|      0|      BCLine hashline = cp->linenumber;
 1820|      0|      CPToken tok = cp_next(cp);
 1821|      0|      if (tok == CTOK_INTEGER) {
  ------------------
  |  Branch (1821:11): [True: 0, False: 0]
  ------------------
 1822|      0|	cp_line(cp, hashline);
 1823|      0|	continue;
 1824|      0|      } else if (tok == CTOK_IDENT && cp_str_is(cp->str, "line")) {
  ------------------
  |  |   41|      0|  ((str)->len == sizeof(k)-1 && !memcmp(strdata(str), k, sizeof(k)-1))
  |  |  ------------------
  |  |  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  |  |  ------------------
  |  |  |  Branch (41:4): [True: 0, False: 0]
  |  |  |  Branch (41:33): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1824:18): [True: 0, False: 0]
  ------------------
 1825|      0|	if (cp_next(cp) != CTOK_INTEGER) cp_err_token(cp, tok);
  ------------------
  |  Branch (1825:6): [True: 0, False: 0]
  ------------------
 1826|      0|	cp_line(cp, hashline);
 1827|      0|	continue;
 1828|      0|      } else if (tok == CTOK_IDENT && cp_str_is(cp->str, "pragma")) {
  ------------------
  |  |   41|      0|  ((str)->len == sizeof(k)-1 && !memcmp(strdata(str), k, sizeof(k)-1))
  |  |  ------------------
  |  |  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  |  |  ------------------
  |  |  |  Branch (41:4): [True: 0, False: 0]
  |  |  |  Branch (41:33): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1828:18): [True: 0, False: 0]
  ------------------
 1829|      0|	cp_pragma(cp, hashline);
 1830|      0|	continue;
 1831|      0|      } else {
 1832|      0|	cp_errmsg(cp, cp->tok, LJ_ERR_XSYMBOL);
 1833|      0|      }
 1834|      0|    }
 1835|  10.6k|    scl = cp_decl_spec(cp, &decl, CDF_TYPEDEF|CDF_EXTERN|CDF_STATIC);
 1836|  10.6k|    if ((cp->tok == ';' || cp->tok == CTOK_EOF) &&
  ------------------
  |  Branch (1836:10): [True: 9.57k, False: 1.08k]
  |  Branch (1836:28): [True: 0, False: 1.08k]
  ------------------
 1837|  10.6k|	ctype_istypedef(decl.stack[0].info)) {
  ------------------
  |  |  208|  3.02k|#define ctype_istypedef(info)	(ctype_type((info)) == CT_TYPEDEF)
  |  |  ------------------
  |  |  |  |  189|  3.02k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  3.02k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (208:31): [True: 2.80k, False: 225]
  |  |  ------------------
  ------------------
 1838|  2.80k|      CTInfo info = ctype_rawchild(cp->cts, &decl.stack[0])->info;
 1839|  2.80k|      if (ctype_isstruct(info) || ctype_isenum(info))
  ------------------
  |  |  205|  5.60k|#define ctype_isstruct(info)	(ctype_type((info)) == CT_STRUCT)
  |  |  ------------------
  |  |  |  |  189|  2.80k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  2.80k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (205:30): [True: 2.46k, False: 337]
  |  |  ------------------
  ------------------
                    if (ctype_isstruct(info) || ctype_isenum(info))
  ------------------
  |  |  207|    337|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|    337|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    337|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (207:28): [True: 337, False: 0]
  |  |  ------------------
  ------------------
 1840|  2.80k|	goto decl_end;  /* Accept empty declaration of struct/union/enum. */
 1841|  2.80k|    }
 1842|  7.86k|    for (;;) {
 1843|  1.67k|      CTypeID ctypeid;
 1844|  1.67k|      cp_declarator(cp, &decl);
 1845|  1.67k|      ctypeid = cp_decl_intern(cp, &decl);
 1846|  1.67k|      if (decl.name && !decl.nameid) {  /* NYI: redeclarations are ignored. */
  ------------------
  |  Branch (1846:11): [True: 1.03k, False: 638]
  |  Branch (1846:24): [True: 599, False: 434]
  ------------------
 1847|    599|	CType *ct;
 1848|    599|	CTypeID id;
 1849|    599|	if ((scl & CDF_TYPEDEF)) {  /* Create new typedef. */
  ------------------
  |  Branch (1849:6): [True: 252, False: 347]
  ------------------
 1850|    252|	  id = lj_ctype_new(cp->cts, &ct);
 1851|    252|	  ct->info = CTINFO(CT_TYPEDEF, ctypeid);
  ------------------
  |  |  185|    252|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|    252|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1852|    252|	  goto noredir;
 1853|    347|	} else if (ctype_isfunc(ctype_get(cp->cts, ctypeid)->info)) {
  ------------------
  |  |  206|    347|#define ctype_isfunc(info)	(ctype_type((info)) == CT_FUNC)
  |  |  ------------------
  |  |  |  |  189|    347|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    347|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (206:28): [True: 45, False: 302]
  |  |  ------------------
  ------------------
 1854|       |	  /* Treat both static and extern function declarations as extern. */
 1855|     45|	  ct = ctype_get(cp->cts, ctypeid);
 1856|       |	  /* We always get new anonymous functions (typedefs are copied). */
 1857|     45|	  lj_assertCP(gcref(ct->name) == NULL, "unexpected named function");
  ------------------
  |  |   32|     45|#define lj_assertCP(c, ...)	(lj_assertG_(G(cp->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|     45|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     45|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 45, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     45|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1858|     45|	  id = ctypeid;  /* Just name it. */
 1859|    302|	} else if ((scl & CDF_STATIC)) {  /* Accept static constants. */
  ------------------
  |  Branch (1859:13): [True: 11, False: 291]
  ------------------
 1860|     11|	  id = cp_decl_constinit(cp, &ct, ctypeid);
 1861|     11|	  goto noredir;
 1862|    291|	} else {  /* External references have extern or no storage class. */
 1863|    291|	  id = lj_ctype_new(cp->cts, &ct);
 1864|    291|	  ct->info = CTINFO(CT_EXTERN, ctypeid);
  ------------------
  |  |  185|    291|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|    291|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1865|    291|	}
 1866|    336|	if (decl.redir) {  /* Add attribute for redirected symbol name. */
  ------------------
  |  Branch (1866:6): [True: 0, False: 336]
  ------------------
 1867|      0|	  CType *cta;
 1868|      0|	  CTypeID aid = lj_ctype_new(cp->cts, &cta);
 1869|      0|	  ct = ctype_get(cp->cts, id);  /* Table may have been reallocated. */
 1870|      0|	  cta->info = CTINFO(CT_ATTRIB, CTATTRIB(CTA_REDIR));
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1871|      0|	  cta->sib = ct->sib;
 1872|      0|	  ct->sib = aid;
 1873|      0|	  ctype_setname(cta, decl.redir);
 1874|      0|	}
 1875|    588|      noredir:
 1876|    588|	ctype_setname(ct, decl.name);
 1877|    588|	lj_ctype_addname(cp->cts, ct, id);
 1878|    588|      }
 1879|  1.66k|      if (!cp_opt(cp, ',')) break;
  ------------------
  |  Branch (1879:11): [True: 664, False: 996]
  ------------------
 1880|    996|      cp_decl_reset(&decl);
 1881|    996|    }
 1882|  7.85k|  decl_end:
 1883|  3.46k|    if (cp->tok == CTOK_EOF && first) break;  /* May omit ';' for 1 decl. */
  ------------------
  |  Branch (1883:9): [True: 0, False: 3.46k]
  |  Branch (1883:32): [True: 0, False: 0]
  ------------------
 1884|  3.46k|    first = 0;
 1885|  3.46k|    cp_check(cp, ';');
 1886|  3.46k|  }
 1887|  11.0k|}
lj_cparse.c:cp_opt:
  417|  49.7k|{
  418|  49.7k|  if (cp->tok == tok) { cp_next(cp); return 1; }
  ------------------
  |  Branch (418:7): [True: 10.6k, False: 39.0k]
  ------------------
  419|  39.0k|  return 0;
  420|  49.7k|}
lj_cparse.c:cp_decl_spec:
 1496|  15.0k|{
 1497|  15.0k|  uint32_t cds = 0, sz = 0;
 1498|  15.0k|  CTypeID tdef = 0;
 1499|       |
 1500|  15.0k|  decl->cp = cp;
 1501|  15.0k|  decl->mode = cp->mode;
 1502|  15.0k|  decl->name = NULL;
 1503|  15.0k|  decl->redir = NULL;
 1504|  15.0k|  decl->attr = 0;
 1505|  15.0k|  decl->fattr = 0;
 1506|  15.0k|  decl->pos = decl->top = 0;
 1507|  15.0k|  decl->stack[0].next = 0;
 1508|       |
 1509|  23.2k|  for (;;) {  /* Parse basic types. */
 1510|  23.2k|    cp_decl_attributes(cp, decl);
 1511|  23.2k|    if (cp->tok >= CTOK_FIRSTDECL && cp->tok <= CTOK_LASTDECLFLAG) {
  ------------------
  |  Branch (1511:9): [True: 10.3k, False: 12.8k]
  |  Branch (1511:38): [True: 4.11k, False: 6.24k]
  ------------------
 1512|  4.11k|      uint32_t cbit;
 1513|  4.11k|      if (cp->ct->size) {
  ------------------
  |  Branch (1513:11): [True: 1.32k, False: 2.78k]
  ------------------
 1514|  1.32k|	if (sz) goto end_decl;
  ------------------
  |  Branch (1514:6): [True: 125, False: 1.19k]
  ------------------
 1515|  1.19k|	sz = cp->ct->size;
 1516|  1.19k|      }
 1517|  3.98k|      cbit = (1u << (cp->tok - CTOK_FIRSTDECL));
 1518|  3.98k|      cds = cds | cbit | ((cbit & cds & CDF_LONG) << 1);
 1519|  3.98k|      if (cp->tok >= CTOK_FIRSTSCL) {
  ------------------
  |  Branch (1519:11): [True: 888, False: 3.09k]
  ------------------
 1520|    888|	if (!(scl & cbit)) cp_errmsg(cp, cp->tok, LJ_ERR_FFI_BADSCL);
  ------------------
  |  Branch (1520:6): [True: 162, False: 726]
  ------------------
 1521|  3.09k|      } else if (tdef) {
  ------------------
  |  Branch (1521:18): [True: 1, False: 3.09k]
  ------------------
 1522|      1|	goto end_decl;
 1523|      1|      }
 1524|  3.82k|      cp_next(cp);
 1525|  3.82k|      continue;
 1526|  3.98k|    }
 1527|  19.1k|    if (sz || tdef ||
  ------------------
  |  Branch (1527:9): [True: 1.06k, False: 18.0k]
  |  Branch (1527:15): [True: 4.32k, False: 13.7k]
  ------------------
 1528|  19.1k|	(cds & (CDF_SHORT|CDF_LONG|CDF_SIGNED|CDF_UNSIGNED|CDF_COMPLEX)))
  ------------------
  |  Branch (1528:2): [True: 94, False: 13.6k]
  ------------------
 1529|  5.48k|      break;
 1530|  13.6k|    switch (cp->tok) {
 1531|  1.32k|    case CTOK_STRUCT:
  ------------------
  |  Branch (1531:5): [True: 1.32k, False: 12.3k]
  ------------------
 1532|  1.32k|      tdef = cp_decl_struct(cp, decl, CTINFO(CT_STRUCT, 0));
  ------------------
  |  |  185|  1.32k|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|  1.32k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1533|  1.32k|      continue;
 1534|  4.13k|    case CTOK_UNION:
  ------------------
  |  Branch (1534:5): [True: 4.13k, False: 9.50k]
  ------------------
 1535|  4.13k|      tdef = cp_decl_struct(cp, decl, CTINFO(CT_STRUCT, CTF_UNION));
  ------------------
  |  |  185|  4.13k|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|  4.13k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1536|  4.13k|      continue;
 1537|    718|    case CTOK_ENUM:
  ------------------
  |  Branch (1537:5): [True: 718, False: 12.9k]
  ------------------
 1538|    718|      tdef = cp_decl_enum(cp, decl);
 1539|    718|      continue;
 1540|  5.20k|    case CTOK_IDENT:
  ------------------
  |  Branch (1540:5): [True: 5.20k, False: 8.43k]
  ------------------
 1541|  5.20k|      if (ctype_istypedef(cp->ct->info)) {
  ------------------
  |  |  208|  5.20k|#define ctype_istypedef(info)	(ctype_type((info)) == CT_TYPEDEF)
  |  |  ------------------
  |  |  |  |  189|  5.20k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  5.20k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (208:31): [True: 1.52k, False: 3.68k]
  |  |  ------------------
  ------------------
 1542|  1.52k|	tdef = ctype_cid(cp->ct->info);  /* Get typedef. */
  ------------------
  |  |  190|  1.52k|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|  1.52k|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
 1543|  1.52k|	cp_next(cp);
 1544|  1.52k|	continue;
 1545|  1.52k|      }
 1546|  3.68k|      break;
 1547|  3.68k|    case '$':
  ------------------
  |  Branch (1547:5): [True: 0, False: 13.6k]
  ------------------
 1548|      0|      tdef = cp->val.id;
 1549|      0|      cp_next(cp);
 1550|      0|      continue;
 1551|  2.25k|    default:
  ------------------
  |  Branch (1551:5): [True: 2.25k, False: 11.3k]
  ------------------
 1552|  2.25k|      break;
 1553|  13.6k|    }
 1554|  5.94k|    break;
 1555|  13.6k|  }
 1556|  14.8k|end_decl:
 1557|       |
 1558|  11.5k|  if ((cds & CDF_COMPLEX))  /* Use predefined complex types. */
  ------------------
  |  Branch (1558:7): [True: 78, False: 11.4k]
  ------------------
 1559|     78|    tdef = sz == 4 ? CTID_COMPLEX_FLOAT : CTID_COMPLEX_DOUBLE;
  ------------------
  |  Branch (1559:12): [True: 47, False: 31]
  ------------------
 1560|       |
 1561|  11.5k|  if (tdef) {
  ------------------
  |  Branch (1561:7): [True: 4.40k, False: 7.15k]
  ------------------
 1562|  4.40k|    cp_push_type(decl, tdef);
 1563|  7.15k|  } else if ((cds & CDF_VOID)) {
  ------------------
  |  Branch (1563:14): [True: 508, False: 6.64k]
  ------------------
 1564|    508|    cp_push(decl, CTINFO(CT_VOID, (decl->attr & CTF_QUAL)), CTSIZE_INVALID);
  ------------------
  |  |  185|    508|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|    508|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
                  cp_push(decl, CTINFO(CT_VOID, (decl->attr & CTF_QUAL)), CTSIZE_INVALID);
  ------------------
  |  |  135|    508|#define CTSIZE_INVALID	0xffffffffu
  ------------------
 1565|    508|    decl->attr &= ~CTF_QUAL;
  ------------------
  |  |   78|    508|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|    508|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|    508|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
 1566|  6.64k|  } else {
 1567|       |    /* Determine type info and size. */
 1568|  6.64k|    CTInfo info = CTINFO(CT_NUM, (cds & CDF_UNSIGNED) ? CTF_UNSIGNED : 0);
  ------------------
  |  |  185|  13.2k|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|  6.64k|#define CTSHIFT_NUM	28
  |  |  ------------------
  |  |  |  Branch (185:61): [True: 113, False: 6.52k]
  |  |  ------------------
  ------------------
 1569|  6.64k|    if ((cds & CDF_BOOL)) {
  ------------------
  |  Branch (1569:9): [True: 134, False: 6.50k]
  ------------------
 1570|    134|      if ((cds & ~(CDF_SCL|CDF_BOOL|CDF_INT|CDF_SIGNED|CDF_UNSIGNED)))
  ------------------
  |  |  382|    134|#define CDF_SCL  (CDF_TYPEDEF|CDF_EXTERN|CDF_STATIC|CDF_AUTO|CDF_REGISTER)
  ------------------
  |  Branch (1570:11): [True: 14, False: 120]
  ------------------
 1571|     14|	cp_errmsg(cp, 0, LJ_ERR_FFI_INVTYPE);
 1572|    120|      info |= CTF_BOOL;
  ------------------
  |  |   64|    120|#define CTF_BOOL	0x08000000u	/* Boolean: NUM, BITFIELD. */
  ------------------
 1573|    120|      if (!(cds & CDF_SIGNED)) info |= CTF_UNSIGNED;
  ------------------
  |  |   68|    110|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (1573:11): [True: 110, False: 10]
  ------------------
 1574|    120|      if (!sz) {
  ------------------
  |  Branch (1574:11): [True: 62, False: 58]
  ------------------
 1575|     62|	sz = 1;
 1576|     62|      }
 1577|  6.50k|    } else if ((cds & CDF_FP)) {
  ------------------
  |  Branch (1577:16): [True: 152, False: 6.35k]
  ------------------
 1578|    152|      info = CTINFO(CT_NUM, CTF_FP);
  ------------------
  |  |  185|    152|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|    152|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1579|    152|      if ((cds & CDF_LONG)) sz = sizeof(long double);
  ------------------
  |  Branch (1579:11): [True: 19, False: 133]
  ------------------
 1580|  6.35k|    } else if ((cds & CDF_CHAR)) {
  ------------------
  |  Branch (1580:16): [True: 134, False: 6.22k]
  ------------------
 1581|    134|      if ((cds & (CDF_CHAR|CDF_SIGNED|CDF_UNSIGNED)) == CDF_CHAR)
  ------------------
  |  Branch (1581:11): [True: 132, False: 2]
  ------------------
 1582|    132|	info |= CTF_UCHAR;  /* Handle platforms where char is unsigned. */
  ------------------
  |  |   80|    132|#define CTF_UCHAR	((char)-1 > 0 ? CTF_UNSIGNED : 0)
  |  |  ------------------
  |  |  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  |  |  ------------------
  |  |  |  Branch (80:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1583|  6.22k|    } else if ((cds & CDF_SHORT)) {
  ------------------
  |  Branch (1583:16): [True: 22, False: 6.20k]
  ------------------
 1584|     22|      sz = sizeof(short);
 1585|  6.20k|    } else if ((cds & CDF_LONGLONG)) {
  ------------------
  |  Branch (1585:16): [True: 103, False: 6.09k]
  ------------------
 1586|    103|      sz = 8;
 1587|  6.09k|    } else if ((cds & CDF_LONG)) {
  ------------------
  |  Branch (1587:16): [True: 24, False: 6.07k]
  ------------------
 1588|     24|      info |= CTF_LONG;
  ------------------
  |  |   69|     24|#define CTF_LONG	0x00400000u	/* Long: NUM. */
  ------------------
 1589|     24|      sz = sizeof(long);
 1590|  6.07k|    } else if (!sz) {
  ------------------
  |  Branch (1590:16): [True: 5.92k, False: 152]
  ------------------
 1591|  5.92k|      if (!(cds & (CDF_SIGNED|CDF_UNSIGNED)))
  ------------------
  |  Branch (1591:11): [True: 5.88k, False: 41]
  ------------------
 1592|  5.88k|	cp_errmsg(cp, cp->tok, LJ_ERR_FFI_DECLSPEC);
 1593|     41|      sz = sizeof(int);
 1594|     41|    }
 1595|    748|    lj_assertCP(sz != 0, "basic ctype with zero size");
  ------------------
  |  |   32|    748|#define lj_assertCP(c, ...)	(lj_assertG_(G(cp->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    748|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    748|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 748, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    748|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1596|    748|    info += CTALIGN(lj_fls(sz));  /* Use natural alignment. */
  ------------------
  |  |  186|    748|#define CTALIGN(al)		((CTSize)(al) << CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   93|    748|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  ------------------
 1597|    748|    info += (decl->attr & CTF_QUAL);  /* Merge qualifiers. */
  ------------------
  |  |   78|    748|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|    748|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|    748|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
 1598|    748|    cp_push(decl, info, sz);
 1599|    748|    decl->attr &= ~CTF_QUAL;
  ------------------
  |  |   78|    748|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|    748|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|    748|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
 1600|    748|  }
 1601|  5.66k|  decl->specpos = decl->pos;
 1602|  5.66k|  decl->specattr = decl->attr;
 1603|  5.66k|  decl->specfattr = decl->fattr;
 1604|  5.66k|  return (cds & CDF_SCL);  /* Return storage class. */
  ------------------
  |  |  382|  5.66k|#define CDF_SCL  (CDF_TYPEDEF|CDF_EXTERN|CDF_STATIC|CDF_AUTO|CDF_REGISTER)
  ------------------
 1605|  11.5k|}
lj_cparse.c:cp_decl_attributes:
 1192|  35.1k|{
 1193|  37.0k|  for (;;) {
 1194|  37.0k|    switch (cp->tok) {
 1195|  1.02k|    case CTOK_CONST: decl->attr |= CTF_CONST; break;
  ------------------
  |  |   66|  1.02k|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  ------------------
  |  Branch (1195:5): [True: 1.02k, False: 36.0k]
  ------------------
 1196|    407|    case CTOK_VOLATILE: decl->attr |= CTF_VOLATILE; break;
  ------------------
  |  |   67|    407|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  ------------------
  |  Branch (1196:5): [True: 407, False: 36.6k]
  ------------------
 1197|    503|    case CTOK_RESTRICT: break;  /* Ignore. */
  ------------------
  |  Branch (1197:5): [True: 503, False: 36.5k]
  ------------------
 1198|      0|    case CTOK_EXTENSION: break;  /* Ignore. */
  ------------------
  |  Branch (1198:5): [True: 0, False: 37.0k]
  ------------------
 1199|      0|    case CTOK_ATTRIBUTE: cp_decl_gccattribute(cp, decl); continue;
  ------------------
  |  Branch (1199:5): [True: 0, False: 37.0k]
  ------------------
 1200|      0|    case CTOK_ASM: cp_decl_asm(cp, decl); continue;
  ------------------
  |  Branch (1200:5): [True: 0, False: 37.0k]
  ------------------
 1201|      0|    case CTOK_DECLSPEC: cp_decl_msvcattribute(cp, decl); continue;
  ------------------
  |  Branch (1201:5): [True: 0, False: 37.0k]
  ------------------
 1202|      0|    case CTOK_CCDECL:
  ------------------
  |  Branch (1202:5): [True: 0, False: 37.0k]
  ------------------
 1203|       |#if LJ_TARGET_X86
 1204|       |      CTF_INSERT(decl->fattr, CCONV, cp->ct->size);
 1205|       |      decl->fattr |= CTFP_CCONV;
 1206|       |#endif
 1207|      0|      break;
 1208|      0|    case CTOK_PTRSZ:
  ------------------
  |  Branch (1208:5): [True: 0, False: 37.0k]
  ------------------
 1209|      0|#if LJ_64
 1210|      0|      CTF_INSERT(decl->attr, MSIZEP, cp->ct->size);
  ------------------
  |  |  117|      0|  info = (info & ~(CTMASK_##field<<CTSHIFT_##field)) | \
  |  |  118|      0|	  (((CTSize)(val) & CTMASK_##field) << CTSHIFT_##field)
  ------------------
 1211|      0|#endif
 1212|      0|      break;
 1213|  35.1k|    default: return;
  ------------------
  |  Branch (1213:5): [True: 35.1k, False: 1.93k]
  ------------------
 1214|  37.0k|    }
 1215|  1.93k|    cp_next(cp);
 1216|  1.93k|  }
 1217|  35.1k|}
lj_cparse.c:cp_expr_ksize:
  758|    219|{
  759|    219|  CPValue k;
  760|    219|  cp_expr_kint(cp, &k);
  761|    219|  if (k.u32 >= 0x80000000u) cp_err(cp, LJ_ERR_FFI_INVSIZE);
  ------------------
  |  Branch (761:7): [True: 3, False: 216]
  ------------------
  762|    216|  return k.u32;
  763|    219|}
lj_cparse.c:cp_expr_kint:
  749|    219|{
  750|    219|  CType *ct;
  751|    219|  cp_expr_sub(cp, k, 0);
  752|    219|  ct = ctype_raw(cp->cts, k->id);
  753|    219|  if (!ctype_isinteger(ct->info)) cp_err(cp, LJ_ERR_BADVAL);
  ------------------
  |  |  218|    219|  (((info) & (CTMASK_NUM|CTF_BOOL|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   90|    219|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_BOOL|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   64|    219|#define CTF_BOOL	0x08000000u	/* Boolean: NUM, BITFIELD. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_BOOL|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   65|    219|#define CTF_FP		0x04000000u	/* Floating-point: NUM. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_BOOL|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |  185|    219|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    219|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (753:7): [True: 1, False: 218]
  ------------------
  754|    219|}
lj_cparse.c:cp_expr_sub:
  742|    219|{
  743|    219|  cp_expr_unary(cp, k);
  744|    219|  cp_expr_infix(cp, k, pri);
  745|    219|}
lj_cparse.c:cp_expr_unary:
  733|    222|{
  734|    222|  if (++cp->depth > CPARSE_MAX_DECLDEPTH) cp_err(cp, LJ_ERR_XLEVELS);
  ------------------
  |  |   17|    222|#define CPARSE_MAX_DECLDEPTH	20	/* Max. recursive declaration depth. */
  ------------------
  |  Branch (734:7): [True: 0, False: 222]
  ------------------
  735|    222|  cp_expr_prefix(cp, k);
  736|    222|  cp_expr_postfix(cp, k);
  737|    222|  cp->depth--;
  738|    222|}
lj_cparse.c:cp_expr_prefix:
  485|    222|{
  486|    222|  if (cp->tok == CTOK_INTEGER) {
  ------------------
  |  Branch (486:7): [True: 213, False: 9]
  ------------------
  487|    213|    *k = cp->val; cp_next(cp);
  488|    213|  } else if (cp_opt(cp, '+')) {
  ------------------
  |  Branch (488:14): [True: 0, False: 9]
  ------------------
  489|      0|    cp_expr_unary(cp, k);  /* Nothing to do (well, integer promotion). */
  490|      9|  } else if (cp_opt(cp, '-')) {
  ------------------
  |  Branch (490:14): [True: 0, False: 9]
  ------------------
  491|      0|    cp_expr_unary(cp, k); k->i32 = (int32_t)(~(uint32_t)k->i32+1);
  492|      9|  } else if (cp_opt(cp, '~')) {
  ------------------
  |  Branch (492:14): [True: 0, False: 9]
  ------------------
  493|      0|    cp_expr_unary(cp, k); k->i32 = ~k->i32;
  494|      9|  } else if (cp_opt(cp, '!')) {
  ------------------
  |  Branch (494:14): [True: 0, False: 9]
  ------------------
  495|      0|    cp_expr_unary(cp, k); k->i32 = !k->i32; k->id = CTID_INT32;
  496|      9|  } else if (cp_opt(cp, '(')) {
  ------------------
  |  Branch (496:14): [True: 0, False: 9]
  ------------------
  497|      0|    if (cp_istypedecl(cp)) {  /* Cast operator. */
  ------------------
  |  Branch (497:9): [True: 0, False: 0]
  ------------------
  498|      0|      CTypeID id = cp_decl_abstract(cp);
  499|      0|      cp_check(cp, ')');
  500|      0|      cp_expr_unary(cp, k);
  501|      0|      k->id = id;  /* No conversion performed. */
  502|      0|    } else {  /* Sub-expression. */
  503|      0|      cp_expr_comma(cp, k);
  504|      0|      cp_check(cp, ')');
  505|      0|    }
  506|      9|  } else if (cp_opt(cp, '*')) {  /* Indirection. */
  ------------------
  |  Branch (506:14): [True: 1, False: 8]
  ------------------
  507|      1|    CType *ct;
  508|      1|    cp_expr_unary(cp, k);
  509|      1|    ct = lj_ctype_rawref(cp->cts, k->id);
  510|      1|    if (!ctype_ispointer(ct->info))
  ------------------
  |  |  227|      1|  ((ctype_type(info) >> 1) == (CT_PTR >> 1))  /* Pointer or array. */
  |  |  ------------------
  |  |  |  |  189|      1|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      1|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (510:9): [True: 0, False: 1]
  ------------------
  511|      0|      cp_err_badidx(cp, ct);
  512|      1|    k->u32 = 0; k->id = ctype_cid(ct->info);
  ------------------
  |  |  190|      1|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      1|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  513|      8|  } else if (cp_opt(cp, '&')) {  /* Address operator. */
  ------------------
  |  Branch (513:14): [True: 0, False: 8]
  ------------------
  514|      0|    cp_expr_unary(cp, k);
  515|      0|    k->id = lj_ctype_intern(cp->cts, CTINFO(CT_PTR, CTALIGN_PTR+k->id),
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  516|      0|			    CTSIZE_PTR);
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
  517|      8|  } else if (cp_opt(cp, CTOK_SIZEOF)) {
  ------------------
  |  Branch (517:14): [True: 0, False: 8]
  ------------------
  518|      0|    cp_expr_sizeof(cp, k, 1);
  519|      8|  } else if (cp_opt(cp, CTOK_ALIGNOF)) {
  ------------------
  |  Branch (519:14): [True: 0, False: 8]
  ------------------
  520|      0|    cp_expr_sizeof(cp, k, 0);
  521|      8|  } else if (cp->tok == CTOK_IDENT) {
  ------------------
  |  Branch (521:14): [True: 5, False: 3]
  ------------------
  522|      5|    if (ctype_type(cp->ct->info) == CT_CONSTVAL) {
  ------------------
  |  |  189|      5|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|      5|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  |  Branch (522:9): [True: 0, False: 5]
  ------------------
  523|      0|      k->u32 = cp->ct->size; k->id = ctype_cid(cp->ct->info);
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  524|      5|    } else if (ctype_type(cp->ct->info) == CT_EXTERN) {
  ------------------
  |  |  189|      5|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|      5|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  |  Branch (524:16): [True: 3, False: 2]
  ------------------
  525|      3|      k->u32 = cp->val.id; k->id = ctype_cid(cp->ct->info);
  ------------------
  |  |  190|      3|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      3|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  526|      3|    } else if (ctype_type(cp->ct->info) == CT_FUNC) {
  ------------------
  |  |  189|      2|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|      2|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  |  Branch (526:16): [True: 1, False: 1]
  ------------------
  527|      1|      k->u32 = cp->val.id; k->id = cp->val.id;
  528|      1|    } else {
  529|      1|      goto err_expr;
  530|      1|    }
  531|      4|    cp_next(cp);
  532|      4|  } else if (cp->tok == CTOK_STRING) {
  ------------------
  |  Branch (532:14): [True: 0, False: 3]
  ------------------
  533|      0|    CTSize sz = cp->str->len;
  534|      0|    while (cp_next(cp) == CTOK_STRING)
  ------------------
  |  Branch (534:12): [True: 0, False: 0]
  ------------------
  535|      0|      sz += cp->str->len;
  536|      0|    k->u32 = sz + 1;
  537|      0|    k->id = CTID_A_CCHAR;
  538|      3|  } else {
  539|      4|  err_expr:
  540|      4|    cp_errmsg(cp, cp->tok, LJ_ERR_XSYMBOL);
  541|      3|  }
  542|    222|}
lj_cparse.c:cp_istypedecl:
  431|     39|{
  432|     39|  if (cp->tok >= CTOK_FIRSTDECL && cp->tok <= CTOK_LASTDECL) return 1;
  ------------------
  |  Branch (432:7): [True: 10, False: 29]
  |  Branch (432:36): [True: 10, False: 0]
  ------------------
  433|     29|  if (cp->tok == CTOK_IDENT && ctype_istypedef(cp->ct->info)) return 1;
  ------------------
  |  |  208|     27|#define ctype_istypedef(info)	(ctype_type((info)) == CT_TYPEDEF)
  |  |  ------------------
  |  |  |  |  189|     27|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     27|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (208:31): [True: 10, False: 17]
  |  |  ------------------
  ------------------
  |  Branch (433:7): [True: 27, False: 2]
  ------------------
  434|     19|  if (cp->tok == '$') return 1;
  ------------------
  |  Branch (434:7): [True: 0, False: 19]
  ------------------
  435|     19|  return 0;
  436|     19|}
lj_cparse.c:cp_expr_postfix:
  546|    217|{
  547|    217|  for (;;) {
  548|    217|    CType *ct;
  549|    217|    if (cp_opt(cp, '[')) {  /* Array/pointer index. */
  ------------------
  |  Branch (549:9): [True: 0, False: 217]
  ------------------
  550|      0|      CPValue k2;
  551|      0|      cp_expr_comma(cp, &k2);
  552|      0|      ct = lj_ctype_rawref(cp->cts, k->id);
  553|      0|      if (!ctype_ispointer(ct->info)) {
  ------------------
  |  |  227|      0|  ((ctype_type(info) >> 1) == (CT_PTR >> 1))  /* Pointer or array. */
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (553:11): [True: 0, False: 0]
  ------------------
  554|      0|	ct = lj_ctype_rawref(cp->cts, k2.id);
  555|      0|	if (!ctype_ispointer(ct->info))
  ------------------
  |  |  227|      0|  ((ctype_type(info) >> 1) == (CT_PTR >> 1))  /* Pointer or array. */
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (555:6): [True: 0, False: 0]
  ------------------
  556|      0|	  cp_err_badidx(cp, ct);
  557|      0|      }
  558|      0|      cp_check(cp, ']');
  559|      0|      k->u32 = 0;
  560|    217|    } else if (cp->tok == '.' || cp->tok == CTOK_DEREF) {  /* Struct deref. */
  ------------------
  |  Branch (560:16): [True: 0, False: 217]
  |  Branch (560:34): [True: 0, False: 217]
  ------------------
  561|      0|      CTSize ofs;
  562|      0|      CType *fct;
  563|      0|      ct = lj_ctype_rawref(cp->cts, k->id);
  564|      0|      if (cp->tok == CTOK_DEREF) {
  ------------------
  |  Branch (564:11): [True: 0, False: 0]
  ------------------
  565|      0|	if (!ctype_ispointer(ct->info))
  ------------------
  |  |  227|      0|  ((ctype_type(info) >> 1) == (CT_PTR >> 1))  /* Pointer or array. */
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (565:6): [True: 0, False: 0]
  ------------------
  566|      0|	  cp_err_badidx(cp, ct);
  567|      0|	ct = lj_ctype_rawref(cp->cts, ctype_cid(ct->info));
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  568|      0|      }
  569|      0|      cp_next(cp);
  570|      0|      if (cp->tok != CTOK_IDENT) cp_err_token(cp, CTOK_IDENT);
  ------------------
  |  Branch (570:11): [True: 0, False: 0]
  ------------------
  571|      0|      if (!ctype_isstruct(ct->info) || ct->size == CTSIZE_INVALID ||
  ------------------
  |  |  205|      0|#define ctype_isstruct(info)	(ctype_type((info)) == CT_STRUCT)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (!ctype_isstruct(ct->info) || ct->size == CTSIZE_INVALID ||
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (571:11): [True: 0, False: 0]
  |  Branch (571:40): [True: 0, False: 0]
  ------------------
  572|      0|	  !(fct = lj_ctype_getfield(cp->cts, ct, cp->str, &ofs)) ||
  ------------------
  |  |  469|      0|  lj_ctype_getfieldq((cts), (ct), (name), (ofs), NULL)
  ------------------
  |  Branch (572:4): [True: 0, False: 0]
  ------------------
  573|      0|	  ctype_isbitfield(fct->info)) {
  ------------------
  |  |  211|      0|#define ctype_isbitfield(info)	(ctype_type((info)) == CT_BITFIELD)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (211:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  574|      0|	GCstr *s = lj_ctype_repr(cp->cts->L, ctype_typeid(cp->cts, ct), NULL);
  ------------------
  |  |  427|      0|#define ctype_typeid(cts, ct)	((CTypeID)((ct) - (cts)->tab))
  ------------------
  575|      0|	cp_errmsg(cp, 0, LJ_ERR_FFI_BADMEMBER, strdata(s), strdata(cp->str));
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
              	cp_errmsg(cp, 0, LJ_ERR_FFI_BADMEMBER, strdata(s), strdata(cp->str));
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  576|      0|      }
  577|      0|      ct = fct;
  578|      0|      k->u32 = ctype_isconstval(ct->info) ? ct->size : 0;
  ------------------
  |  |  212|      0|#define ctype_isconstval(info)	(ctype_type((info)) == CT_CONSTVAL)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (212:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  579|      0|      cp_next(cp);
  580|    217|    } else {
  581|    217|      return;
  582|    217|    }
  583|      0|    k->id = ctype_cid(ct->info);
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  584|      0|  }
  585|    217|}
lj_cparse.c:cp_expr_infix:
  589|    217|{
  590|    217|  CPValue k2;
  591|    217|  k2.u32 = 0; k2.id = 0;  /* Silence the compiler. */
  592|    217|  for (;;) {
  593|    217|    switch (pri) {
  594|    217|    case 0:
  ------------------
  |  Branch (594:5): [True: 217, False: 0]
  ------------------
  595|    217|      if (cp_opt(cp, '?')) {
  ------------------
  |  Branch (595:11): [True: 0, False: 217]
  ------------------
  596|      0|	CPValue k3;
  597|      0|	cp_expr_comma(cp, &k2);  /* Right-associative. */
  598|      0|	cp_check(cp, ':');
  599|      0|	cp_expr_sub(cp, &k3, 0);
  600|      0|	k->u32 = k->u32 ? k2.u32 : k3.u32;
  ------------------
  |  Branch (600:11): [True: 0, False: 0]
  ------------------
  601|      0|	k->id = k2.id > k3.id ? k2.id : k3.id;
  ------------------
  |  Branch (601:10): [True: 0, False: 0]
  ------------------
  602|      0|	continue;
  603|      0|      }
  604|       |      /* fallthrough */
  605|    217|    case 1:
  ------------------
  |  Branch (605:5): [True: 0, False: 217]
  ------------------
  606|    217|      if (cp_opt(cp, CTOK_OROR)) {
  ------------------
  |  Branch (606:11): [True: 0, False: 217]
  ------------------
  607|      0|	cp_expr_sub(cp, &k2, 2); k->i32 = k->u32 || k2.u32; k->id = CTID_INT32;
  ------------------
  |  Branch (607:36): [True: 0, False: 0]
  |  Branch (607:46): [True: 0, False: 0]
  ------------------
  608|      0|	continue;
  609|      0|      }
  610|       |      /* fallthrough */
  611|    217|    case 2:
  ------------------
  |  Branch (611:5): [True: 0, False: 217]
  ------------------
  612|    217|      if (cp_opt(cp, CTOK_ANDAND)) {
  ------------------
  |  Branch (612:11): [True: 0, False: 217]
  ------------------
  613|      0|	cp_expr_sub(cp, &k2, 3); k->i32 = k->u32 && k2.u32; k->id = CTID_INT32;
  ------------------
  |  Branch (613:36): [True: 0, False: 0]
  |  Branch (613:46): [True: 0, False: 0]
  ------------------
  614|      0|	continue;
  615|      0|      }
  616|       |      /* fallthrough */
  617|    217|    case 3:
  ------------------
  |  Branch (617:5): [True: 0, False: 217]
  ------------------
  618|    217|      if (cp_opt(cp, '|')) {
  ------------------
  |  Branch (618:11): [True: 0, False: 217]
  ------------------
  619|      0|	cp_expr_sub(cp, &k2, 4); k->u32 = k->u32 | k2.u32; goto arith_result;
  620|      0|      }
  621|       |      /* fallthrough */
  622|    217|    case 4:
  ------------------
  |  Branch (622:5): [True: 0, False: 217]
  ------------------
  623|    217|      if (cp_opt(cp, '^')) {
  ------------------
  |  Branch (623:11): [True: 0, False: 217]
  ------------------
  624|      0|	cp_expr_sub(cp, &k2, 5); k->u32 = k->u32 ^ k2.u32; goto arith_result;
  625|      0|      }
  626|       |      /* fallthrough */
  627|    217|    case 5:
  ------------------
  |  Branch (627:5): [True: 0, False: 217]
  ------------------
  628|    217|      if (cp_opt(cp, '&')) {
  ------------------
  |  Branch (628:11): [True: 0, False: 217]
  ------------------
  629|      0|	cp_expr_sub(cp, &k2, 6); k->u32 = k->u32 & k2.u32; goto arith_result;
  630|      0|      }
  631|       |      /* fallthrough */
  632|    217|    case 6:
  ------------------
  |  Branch (632:5): [True: 0, False: 217]
  ------------------
  633|    217|      if (cp_opt(cp, CTOK_EQ)) {
  ------------------
  |  Branch (633:11): [True: 0, False: 217]
  ------------------
  634|      0|	cp_expr_sub(cp, &k2, 7); k->i32 = k->u32 == k2.u32; k->id = CTID_INT32;
  635|      0|	continue;
  636|    217|      } else if (cp_opt(cp, CTOK_NE)) {
  ------------------
  |  Branch (636:18): [True: 0, False: 217]
  ------------------
  637|      0|	cp_expr_sub(cp, &k2, 7); k->i32 = k->u32 != k2.u32; k->id = CTID_INT32;
  638|      0|	continue;
  639|      0|      }
  640|       |      /* fallthrough */
  641|    217|    case 7:
  ------------------
  |  Branch (641:5): [True: 0, False: 217]
  ------------------
  642|    217|      if (cp_opt(cp, '<')) {
  ------------------
  |  Branch (642:11): [True: 0, False: 217]
  ------------------
  643|      0|	cp_expr_sub(cp, &k2, 8);
  644|      0|	if (k->id == CTID_INT32 && k2.id == CTID_INT32)
  ------------------
  |  Branch (644:6): [True: 0, False: 0]
  |  Branch (644:29): [True: 0, False: 0]
  ------------------
  645|      0|	  k->i32 = k->i32 < k2.i32;
  646|      0|	else
  647|      0|	  k->i32 = k->u32 < k2.u32;
  648|      0|	k->id = CTID_INT32;
  649|      0|	continue;
  650|    217|      } else if (cp_opt(cp, '>')) {
  ------------------
  |  Branch (650:18): [True: 0, False: 217]
  ------------------
  651|      0|	cp_expr_sub(cp, &k2, 8);
  652|      0|	if (k->id == CTID_INT32 && k2.id == CTID_INT32)
  ------------------
  |  Branch (652:6): [True: 0, False: 0]
  |  Branch (652:29): [True: 0, False: 0]
  ------------------
  653|      0|	  k->i32 = k->i32 > k2.i32;
  654|      0|	else
  655|      0|	  k->i32 = k->u32 > k2.u32;
  656|      0|	k->id = CTID_INT32;
  657|      0|	continue;
  658|    217|      } else if (cp_opt(cp, CTOK_LE)) {
  ------------------
  |  Branch (658:18): [True: 0, False: 217]
  ------------------
  659|      0|	cp_expr_sub(cp, &k2, 8);
  660|      0|	if (k->id == CTID_INT32 && k2.id == CTID_INT32)
  ------------------
  |  Branch (660:6): [True: 0, False: 0]
  |  Branch (660:29): [True: 0, False: 0]
  ------------------
  661|      0|	  k->i32 = k->i32 <= k2.i32;
  662|      0|	else
  663|      0|	  k->i32 = k->u32 <= k2.u32;
  664|      0|	k->id = CTID_INT32;
  665|      0|	continue;
  666|    217|      } else if (cp_opt(cp, CTOK_GE)) {
  ------------------
  |  Branch (666:18): [True: 0, False: 217]
  ------------------
  667|      0|	cp_expr_sub(cp, &k2, 8);
  668|      0|	if (k->id == CTID_INT32 && k2.id == CTID_INT32)
  ------------------
  |  Branch (668:6): [True: 0, False: 0]
  |  Branch (668:29): [True: 0, False: 0]
  ------------------
  669|      0|	  k->i32 = k->i32 >= k2.i32;
  670|      0|	else
  671|      0|	  k->i32 = k->u32 >= k2.u32;
  672|      0|	k->id = CTID_INT32;
  673|      0|	continue;
  674|      0|      }
  675|       |      /* fallthrough */
  676|    217|    case 8:
  ------------------
  |  Branch (676:5): [True: 0, False: 217]
  ------------------
  677|    217|      if (cp_opt(cp, CTOK_SHL)) {
  ------------------
  |  Branch (677:11): [True: 0, False: 217]
  ------------------
  678|      0|	cp_expr_sub(cp, &k2, 9); k->u32 = k->u32 << k2.u32;
  679|      0|	continue;
  680|    217|      } else if (cp_opt(cp, CTOK_SHR)) {
  ------------------
  |  Branch (680:18): [True: 0, False: 217]
  ------------------
  681|      0|	cp_expr_sub(cp, &k2, 9);
  682|      0|	if (k->id == CTID_INT32)
  ------------------
  |  Branch (682:6): [True: 0, False: 0]
  ------------------
  683|      0|	  k->i32 = k->i32 >> k2.i32;
  684|      0|	else
  685|      0|	  k->u32 = k->u32 >> k2.u32;
  686|      0|	continue;
  687|      0|      }
  688|       |      /* fallthrough */
  689|    217|    case 9:
  ------------------
  |  Branch (689:5): [True: 0, False: 217]
  ------------------
  690|    217|      if (cp_opt(cp, '+')) {
  ------------------
  |  Branch (690:11): [True: 0, False: 217]
  ------------------
  691|      0|	cp_expr_sub(cp, &k2, 10); k->u32 = k->u32 + k2.u32;
  692|      0|      arith_result:
  693|      0|	if (k2.id > k->id) k->id = k2.id;  /* Trivial promotion to unsigned. */
  ------------------
  |  Branch (693:6): [True: 0, False: 0]
  ------------------
  694|      0|	continue;
  695|    217|      } else if (cp_opt(cp, '-')) {
  ------------------
  |  Branch (695:18): [True: 0, False: 217]
  ------------------
  696|      0|	cp_expr_sub(cp, &k2, 10); k->u32 = k->u32 - k2.u32; goto arith_result;
  697|      0|      }
  698|       |      /* fallthrough */
  699|    217|    case 10:
  ------------------
  |  Branch (699:5): [True: 0, False: 217]
  ------------------
  700|    217|      if (cp_opt(cp, '*')) {
  ------------------
  |  Branch (700:11): [True: 2, False: 215]
  ------------------
  701|      2|	cp_expr_unary(cp, &k2); k->u32 = k->u32 * k2.u32; goto arith_result;
  702|    215|      } else if (cp_opt(cp, '/')) {
  ------------------
  |  Branch (702:18): [True: 0, False: 215]
  ------------------
  703|      0|	cp_expr_unary(cp, &k2);
  704|      0|	if (k2.id > k->id) k->id = k2.id;  /* Trivial promotion to unsigned. */
  ------------------
  |  Branch (704:6): [True: 0, False: 0]
  ------------------
  705|      0|	if (k2.u32 == 0 ||
  ------------------
  |  Branch (705:6): [True: 0, False: 0]
  ------------------
  706|      0|	    (k->id == CTID_INT32 && k->u32 == 0x80000000u && k2.i32 == -1))
  ------------------
  |  Branch (706:7): [True: 0, False: 0]
  |  Branch (706:30): [True: 0, False: 0]
  |  Branch (706:55): [True: 0, False: 0]
  ------------------
  707|      0|	  cp_err(cp, LJ_ERR_BADVAL);
  708|      0|	if (k->id == CTID_INT32)
  ------------------
  |  Branch (708:6): [True: 0, False: 0]
  ------------------
  709|      0|	  k->i32 = k->i32 / k2.i32;
  710|      0|	else
  711|      0|	  k->u32 = k->u32 / k2.u32;
  712|      0|	continue;
  713|    215|      } else if (cp_opt(cp, '%')) {
  ------------------
  |  Branch (713:18): [True: 0, False: 215]
  ------------------
  714|      0|	cp_expr_unary(cp, &k2);
  715|      0|	if (k2.id > k->id) k->id = k2.id;  /* Trivial promotion to unsigned. */
  ------------------
  |  Branch (715:6): [True: 0, False: 0]
  ------------------
  716|      0|	if (k2.u32 == 0 ||
  ------------------
  |  Branch (716:6): [True: 0, False: 0]
  ------------------
  717|      0|	    (k->id == CTID_INT32 && k->u32 == 0x80000000u && k2.i32 == -1))
  ------------------
  |  Branch (717:7): [True: 0, False: 0]
  |  Branch (717:30): [True: 0, False: 0]
  |  Branch (717:55): [True: 0, False: 0]
  ------------------
  718|      0|	  cp_err(cp, LJ_ERR_BADVAL);
  719|      0|	if (k->id == CTID_INT32)
  ------------------
  |  Branch (719:6): [True: 0, False: 0]
  ------------------
  720|      0|	  k->i32 = k->i32 % k2.i32;
  721|      0|	else
  722|      0|	  k->u32 = k->u32 % k2.u32;
  723|      0|	continue;
  724|      0|      }
  725|    215|    default:
  ------------------
  |  Branch (725:5): [True: 0, False: 217]
  ------------------
  726|    215|      return;
  727|    217|    }
  728|    217|  }
  729|    217|}
lj_cparse.c:cp_decl_struct:
 1362|  5.46k|{
 1363|  5.46k|  CTypeID sid = cp_struct_name(cp, sdecl, sinfo);
 1364|  5.46k|  if (cp_opt(cp, '{')) {  /* Struct/union definition. */
  ------------------
  |  Branch (1364:7): [True: 5.31k, False: 142]
  ------------------
 1365|  5.31k|    CTypeID lastid = sid;
 1366|  5.31k|    int lastdecl = 0;
 1367|  8.29k|    while (cp->tok != '}') {
  ------------------
  |  Branch (1367:12): [True: 2.98k, False: 5.31k]
  ------------------
 1368|  2.98k|      CPDecl decl;
 1369|  2.98k|      CPscl scl = cp_decl_spec(cp, &decl, CDF_STATIC);
 1370|  2.98k|      decl.mode = scl ? CPARSE_MODE_DIRECT :
  ------------------
  |  |   23|      0|#define CPARSE_MODE_DIRECT	4	/* Accept direct declarators. */
  ------------------
  |  Branch (1370:19): [True: 0, False: 2.98k]
  ------------------
 1371|  2.98k|	CPARSE_MODE_DIRECT|CPARSE_MODE_ABSTRACT|CPARSE_MODE_FIELD;
  ------------------
  |  |   23|  2.98k|#define CPARSE_MODE_DIRECT	4	/* Accept direct declarators. */
  ------------------
              	CPARSE_MODE_DIRECT|CPARSE_MODE_ABSTRACT|CPARSE_MODE_FIELD;
  ------------------
  |  |   22|  2.98k|#define CPARSE_MODE_ABSTRACT	2	/* Accept abstract declarators. */
  ------------------
              	CPARSE_MODE_DIRECT|CPARSE_MODE_ABSTRACT|CPARSE_MODE_FIELD;
  ------------------
  |  |   24|  5.96k|#define CPARSE_MODE_FIELD	8	/* Accept field width in bits, too. */
  ------------------
 1372|       |
 1373|  2.98k|      for (;;) {
 1374|    135|	CTypeID ctypeid;
 1375|       |
 1376|    135|	if (lastdecl) cp_err_token(cp, '}');
  ------------------
  |  Branch (1376:6): [True: 0, False: 135]
  ------------------
 1377|       |
 1378|       |	/* Parse field declarator. */
 1379|    135|	decl.bits = CTSIZE_INVALID;
  ------------------
  |  |  135|    135|#define CTSIZE_INVALID	0xffffffffu
  ------------------
 1380|    135|	cp_declarator(cp, &decl);
 1381|    135|	ctypeid = cp_decl_intern(cp, &decl);
 1382|       |
 1383|    135|	if ((scl & CDF_STATIC)) {  /* Static constant in struct namespace. */
  ------------------
  |  Branch (1383:6): [True: 0, False: 135]
  ------------------
 1384|      0|	  CType *ct;
 1385|      0|	  CTypeID fieldid = cp_decl_constinit(cp, &ct, ctypeid);
 1386|      0|	  ctype_get(cp->cts, lastid)->sib = fieldid;
 1387|      0|	  lastid = fieldid;
 1388|      0|	  ctype_setname(ct, decl.name);
 1389|    135|	} else {
 1390|    135|	  CTSize bsz = CTBSZ_FIELD;  /* Temp. for layout phase. */
  ------------------
  |  |  108|    135|#define CTBSZ_FIELD	127		/* Temp. marker for regular field. */
  ------------------
 1391|    135|	  CType *ct;
 1392|    135|	  CTypeID fieldid = lj_ctype_new(cp->cts, &ct);  /* Do this first. */
 1393|    135|	  CType *tct = ctype_raw(cp->cts, ctypeid);
 1394|       |
 1395|    135|	  if (decl.bits == CTSIZE_INVALID) {  /* Regular field. */
  ------------------
  |  |  135|    135|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (1395:8): [True: 0, False: 135]
  ------------------
 1396|      0|	    if (ctype_isarray(tct->info) && tct->size == CTSIZE_INVALID)
  ------------------
  |  |  204|      0|#define ctype_isarray(info)	(ctype_type((info)) == CT_ARRAY)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (204:29): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	    if (ctype_isarray(tct->info) && tct->size == CTSIZE_INVALID)
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (1396:38): [True: 0, False: 0]
  ------------------
 1397|      0|	      lastdecl = 1;  /* a[] or a[?] must be the last declared field. */
 1398|       |
 1399|       |	    /* Accept transparent struct/union/enum. */
 1400|      0|	    if (!decl.name) {
  ------------------
  |  Branch (1400:10): [True: 0, False: 0]
  ------------------
 1401|      0|	      if (!((ctype_isstruct(tct->info) && !(tct->info & CTF_VLA)) ||
  ------------------
  |  |  205|      0|#define ctype_isstruct(info)	(ctype_type((info)) == CT_STRUCT)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (205:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	      if (!((ctype_isstruct(tct->info) && !(tct->info & CTF_VLA)) ||
  ------------------
  |  |   70|      0|#define CTF_VLA		0x00100000u	/* Variable-length: ARRAY, STRUCT. */
  ------------------
  |  Branch (1401:44): [True: 0, False: 0]
  ------------------
 1402|      0|		    ctype_isenum(tct->info)))
  ------------------
  |  |  207|      0|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (207:28): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1403|      0|		cp_err_token(cp, CTOK_IDENT);
 1404|      0|	      ct->info = CTINFO(CT_ATTRIB, CTATTRIB(CTA_SUBTYPE) + ctypeid);
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1405|      0|	      ct->size = ctype_isstruct(tct->info) ?
  ------------------
  |  |  205|      0|#define ctype_isstruct(info)	(ctype_type((info)) == CT_STRUCT)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (205:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1406|      0|			 (decl.attr|0x80000000u) : 0;  /* For layout phase. */
 1407|      0|	      goto add_field;
 1408|      0|	    }
 1409|    135|	  } else {  /* Bitfield. */
 1410|    135|	    bsz = decl.bits;
 1411|    135|	    if (!ctype_isinteger_or_bool(tct->info) ||
  ------------------
  |  |  220|    270|  (((info) & (CTMASK_NUM|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   90|    135|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   65|    135|#define CTF_FP		0x04000000u	/* Floating-point: NUM. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |  185|    135|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    135|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1411:10): [True: 2, False: 133]
  ------------------
 1412|    135|		(bsz == 0 && decl.name) || 8*tct->size > CTBSZ_MAX ||
  ------------------
  |  |  107|    268|#define CTBSZ_MAX	32		/* Max. size of bitfield is 32 bit. */
  ------------------
  |  Branch (1412:4): [True: 49, False: 84]
  |  Branch (1412:16): [True: 0, False: 49]
  |  Branch (1412:30): [True: 1, False: 132]
  ------------------
 1413|    135|		bsz > ((tct->info & CTF_BOOL) ? 1 : 8*tct->size))
  ------------------
  |  |   64|    132|#define CTF_BOOL	0x08000000u	/* Boolean: NUM, BITFIELD. */
  ------------------
  |  Branch (1413:3): [True: 2, False: 130]
  |  Branch (1413:10): [True: 18, False: 114]
  ------------------
 1414|      4|	      cp_errmsg(cp, ':', LJ_ERR_BADVAL);
 1415|    135|	  }
 1416|       |
 1417|       |	  /* Create temporary field for layout phase. */
 1418|    131|	  ct->info = CTINFO(CT_FIELD, ctypeid + (bsz << CTSHIFT_BITCSZ));
  ------------------
  |  |  185|    131|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|    131|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1419|    131|	  ct->size = decl.attr;
 1420|    131|	  if (decl.name) ctype_setname(ct, decl.name);
  ------------------
  |  Branch (1420:8): [True: 0, False: 131]
  ------------------
 1421|       |
 1422|    131|	add_field:
 1423|    130|	  ctype_get(cp->cts, lastid)->sib = fieldid;
 1424|    130|	  lastid = fieldid;
 1425|    130|	}
 1426|    130|	if (!cp_opt(cp, ',')) break;
  ------------------
  |  Branch (1426:6): [True: 130, False: 0]
  ------------------
 1427|      0|	cp_decl_reset(&decl);
 1428|      0|      }
 1429|  2.97k|      cp_check(cp, ';');
 1430|  2.97k|    }
 1431|  5.31k|    cp_check(cp, '}');
 1432|  5.31k|    ctype_get(cp->cts, lastid)->sib = 0;  /* Drop sib = 1 for empty structs. */
 1433|  5.31k|    cp_decl_attributes(cp, sdecl);  /* Layout phase needs postfix attributes. */
 1434|  5.31k|    cp_struct_layout(cp, sid, sdecl->attr);
 1435|  5.31k|  }
 1436|  5.45k|  return sid;
 1437|  5.46k|}
lj_cparse.c:cp_struct_name:
 1221|  6.17k|{
 1222|  6.17k|  CTypeID sid;
 1223|  6.17k|  CType *ct;
 1224|  6.17k|  cp->tmask = CPNS_STRUCT;
  ------------------
  |  |  365|  6.17k|#define CPNS_STRUCT	((1u<<CT_KW)|(1u<<CT_STRUCT)|(1u<<CT_ENUM))
  ------------------
 1225|  6.17k|  cp_next(cp);
 1226|  6.17k|  cp_decl_attributes(cp, sdecl);
 1227|  6.17k|  cp->tmask = CPNS_DEFAULT;
  ------------------
  |  |  364|  6.17k|  ((1u<<CT_KW)|(1u<<CT_TYPEDEF)|(1u<<CT_FUNC)|(1u<<CT_EXTERN)|(1u<<CT_CONSTVAL))
  ------------------
 1228|  6.17k|  if (cp->tok != '{') {
  ------------------
  |  Branch (1228:7): [True: 1.27k, False: 4.90k]
  ------------------
 1229|  1.27k|    if (cp->tok != CTOK_IDENT) cp_err_token(cp, CTOK_IDENT);
  ------------------
  |  Branch (1229:9): [True: 0, False: 1.27k]
  ------------------
 1230|  1.27k|    if (cp->val.id) {  /* Name of existing struct/union/enum. */
  ------------------
  |  Branch (1230:9): [True: 178, False: 1.09k]
  ------------------
 1231|    178|      sid = cp->val.id;
 1232|    178|      ct = cp->ct;
 1233|    178|      if ((ct->info ^ info) & (CTMASK_NUM|CTF_UNION))  /* Wrong type. */
  ------------------
  |  |   90|    178|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  ------------------
                    if ((ct->info ^ info) & (CTMASK_NUM|CTF_UNION))  /* Wrong type. */
  ------------------
  |  |   74|    178|#define CTF_UNION	0x00800000u	/* Union: STRUCT. */
  ------------------
  |  Branch (1233:11): [True: 2, False: 176]
  ------------------
 1234|      2|	cp_errmsg(cp, 0, LJ_ERR_FFI_REDEF, strdata(gco2str(gcref(ct->name))));
  ------------------
  |  |  316|      4|#define strdata(s)	((const char *)((s)+1))
  |  |  ------------------
  |  |  |  Branch (316:37): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 1235|  1.09k|    } else {  /* Create named, incomplete struct/union/enum. */
 1236|  1.09k|      if ((cp->mode & CPARSE_MODE_NOIMPLICIT))
  ------------------
  |  |   25|  1.09k|#define CPARSE_MODE_NOIMPLICIT	16	/* Reject implicit declarations. */
  ------------------
  |  Branch (1236:11): [True: 0, False: 1.09k]
  ------------------
 1237|      0|	cp_errmsg(cp, 0, LJ_ERR_FFI_BADTAG, strdata(cp->str));
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1238|  1.09k|      sid = lj_ctype_new(cp->cts, &ct);
 1239|  1.09k|      ct->info = info;
 1240|  1.09k|      ct->size = CTSIZE_INVALID;
  ------------------
  |  |  135|  1.09k|#define CTSIZE_INVALID	0xffffffffu
  ------------------
 1241|  1.09k|      ctype_setname(ct, cp->str);
 1242|  1.09k|      lj_ctype_addname(cp->cts, ct, sid);
 1243|  1.09k|    }
 1244|  1.26k|    cp_next(cp);
 1245|  4.90k|  } else {  /* Create anonymous, incomplete struct/union/enum. */
 1246|  4.90k|    sid = lj_ctype_new(cp->cts, &ct);
 1247|  4.90k|    ct->info = info;
 1248|  4.90k|    ct->size = CTSIZE_INVALID;
  ------------------
  |  |  135|  4.90k|#define CTSIZE_INVALID	0xffffffffu
  ------------------
 1249|  4.90k|  }
 1250|  6.17k|  if (cp->tok == '{') {
  ------------------
  |  Branch (1250:7): [True: 6.17k, False: 0]
  ------------------
 1251|  6.17k|    if (ct->size != CTSIZE_INVALID || ct->sib)
  ------------------
  |  |  135|  12.3k|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (1251:9): [True: 176, False: 6.00k]
  |  Branch (1251:39): [True: 0, False: 6.00k]
  ------------------
 1252|    176|      cp_errmsg(cp, 0, LJ_ERR_FFI_REDEF, strdata(gco2str(gcref(ct->name))));
  ------------------
  |  |  316|    352|#define strdata(s)	((const char *)((s)+1))
  |  |  ------------------
  |  |  |  Branch (316:37): [True: 176, False: 0]
  |  |  ------------------
  ------------------
 1253|  6.00k|    ct->sib = 1;  /* Indicate the type is currently being defined. */
 1254|  6.00k|  }
 1255|  6.00k|  return sid;
 1256|  6.17k|}
lj_cparse.c:cp_struct_layout:
 1281|  2.46k|{
 1282|  2.46k|  CTSize bofs = 0, bmaxofs = 0;  /* Bit offset and max. bit offset. */
 1283|  2.46k|  CTSize maxalign = ctype_align(sattr);
  ------------------
  |  |  191|  2.46k|#define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   93|  2.46k|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  |  |               #define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   92|  2.46k|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  ------------------
 1284|  2.46k|  CType *sct = ctype_get(cp->cts, sid);
 1285|  2.46k|  CTInfo sinfo = sct->info;
 1286|  2.46k|  CTypeID fieldid = sct->sib;
 1287|  2.58k|  while (fieldid) {
  ------------------
  |  Branch (1287:10): [True: 119, False: 2.46k]
  ------------------
 1288|    119|    CType *ct = ctype_get(cp->cts, fieldid);
 1289|    119|    CTInfo attr = ct->size;  /* Field declaration attributes (temp.). */
 1290|       |
 1291|    119|    if (ctype_isfield(ct->info) ||
  ------------------
  |  |  210|    238|#define ctype_isfield(info)	(ctype_type((info)) == CT_FIELD)
  |  |  ------------------
  |  |  |  |  189|    119|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    119|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (210:29): [True: 119, False: 0]
  |  |  ------------------
  ------------------
 1292|    119|	(ctype_isxattrib(ct->info, CTA_SUBTYPE) && attr)) {
  ------------------
  |  |  245|      0|  (((info) & (CTMASK_NUM|CTATTRIB(CTMASK_ATTRIB))) == \
  |  |  ------------------
  |  |  |  |   90|      0|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTATTRIB(CTMASK_ATTRIB))) == \
  |  |  ------------------
  |  |  |  |  187|      0|#define CTATTRIB(at)		((CTInfo)(at) << CTSHIFT_ATTRIB)
  |  |  |  |  ------------------
  |  |  |  |  |  |   95|      0|#define CTSHIFT_ATTRIB	16
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (245:3): [True: 0, False: 0]
  |  |  ------------------
  |  |  246|      0|   CTINFO(CT_ATTRIB, CTATTRIB(at)))
  |  |  ------------------
  |  |  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1292:45): [True: 0, False: 0]
  ------------------
 1293|    119|      CTSize align, amask;  /* Alignment (pow2) and alignment mask (bits). */
 1294|    119|      CTSize sz;
 1295|    119|      CTInfo info = lj_ctype_info(cp->cts, ctype_cid(ct->info), &sz);
  ------------------
  |  |  190|    119|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|    119|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
 1296|    119|      CTSize bsz, csz = 8*sz;  /* Field size and container size (in bits). */
 1297|    119|      sinfo |= (info & (CTF_QUAL|CTF_VLA));  /* Merge pseudo-qualifiers. */
  ------------------
  |  |   78|    119|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|    119|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|    119|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
                    sinfo |= (info & (CTF_QUAL|CTF_VLA));  /* Merge pseudo-qualifiers. */
  ------------------
  |  |   70|    119|#define CTF_VLA		0x00100000u	/* Variable-length: ARRAY, STRUCT. */
  ------------------
 1298|       |
 1299|       |      /* Check for size overflow and determine alignment. */
 1300|    119|      if (sz >= 0x20000000u || bofs + csz < bofs || (info & CTF_VLA)) {
  ------------------
  |  |   70|    119|#define CTF_VLA		0x00100000u	/* Variable-length: ARRAY, STRUCT. */
  ------------------
  |  Branch (1300:11): [True: 0, False: 119]
  |  Branch (1300:32): [True: 0, False: 119]
  |  Branch (1300:53): [True: 0, False: 119]
  ------------------
 1301|      0|	if (!(sz == CTSIZE_INVALID && ctype_isarray(info) &&
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
              	if (!(sz == CTSIZE_INVALID && ctype_isarray(info) &&
  ------------------
  |  |  204|      0|#define ctype_isarray(info)	(ctype_type((info)) == CT_ARRAY)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (204:29): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1301:8): [True: 0, False: 0]
  ------------------
 1302|      0|	      !(sinfo & CTF_UNION)))
  ------------------
  |  |   74|      0|#define CTF_UNION	0x00800000u	/* Union: STRUCT. */
  ------------------
  |  Branch (1302:8): [True: 0, False: 0]
  ------------------
 1303|      0|	  cp_err(cp, LJ_ERR_FFI_INVSIZE);
 1304|      0|	csz = sz = 0;  /* Treat a[] and a[?] as zero-sized. */
 1305|      0|      }
 1306|    119|      align = cp_field_align(cp, ct, info);
 1307|    119|      if (((attr|sattr) & CTFP_PACKED) ||
  ------------------
  |  |   84|    119|#define CTFP_PACKED	0x00000002u	/* cp->attr */
  ------------------
  |  Branch (1307:11): [True: 0, False: 119]
  ------------------
 1308|    119|	  ((attr & CTFP_ALIGNED) && ctype_align(attr) > align))
  ------------------
  |  |   83|    119|#define CTFP_ALIGNED	0x00000001u	/* cp->attr + ALIGN */
  ------------------
              	  ((attr & CTFP_ALIGNED) && ctype_align(attr) > align))
  ------------------
  |  |  191|      0|#define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   93|      0|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  |  |               #define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   92|      0|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  ------------------
  |  Branch (1308:5): [True: 0, False: 119]
  |  Branch (1308:30): [True: 0, False: 0]
  ------------------
 1309|      0|	align = ctype_align(attr);
  ------------------
  |  |  191|      0|#define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   93|      0|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  |  |               #define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   92|      0|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  ------------------
 1310|    119|      if (cp->packstack[cp->curpack] < align)
  ------------------
  |  Branch (1310:11): [True: 0, False: 119]
  ------------------
 1311|      0|	align = cp->packstack[cp->curpack];
 1312|    119|      if (align > maxalign) maxalign = align;
  ------------------
  |  Branch (1312:11): [True: 32, False: 87]
  ------------------
 1313|    119|      amask = (8u << align) - 1;
 1314|       |
 1315|    119|      bsz = ctype_bitcsz(ct->info);  /* Bitfield size (temp.). */
  ------------------
  |  |  195|    119|#define ctype_bitcsz(info)	(((info) >> CTSHIFT_BITCSZ) & CTMASK_BITCSZ)
  |  |  ------------------
  |  |  |  |  114|    119|#define CTSHIFT_BITCSZ	16
  |  |  ------------------
  |  |               #define ctype_bitcsz(info)	(((info) >> CTSHIFT_BITCSZ) & CTMASK_BITCSZ)
  |  |  ------------------
  |  |  |  |  111|    119|#define CTMASK_BITCSZ	127
  |  |  ------------------
  ------------------
 1316|    119|      if (bsz == CTBSZ_FIELD || !ctype_isfield(ct->info)) {
  ------------------
  |  |  108|    238|#define CTBSZ_FIELD	127		/* Temp. marker for regular field. */
  ------------------
                    if (bsz == CTBSZ_FIELD || !ctype_isfield(ct->info)) {
  ------------------
  |  |  210|    119|#define ctype_isfield(info)	(ctype_type((info)) == CT_FIELD)
  |  |  ------------------
  |  |  |  |  189|    119|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    119|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1316:11): [True: 0, False: 119]
  |  Branch (1316:33): [True: 0, False: 119]
  ------------------
 1317|      0|	bsz = csz;  /* Regular fields or subtypes always fill the container. */
 1318|      0|	bofs = (bofs + amask) & ~amask;  /* Start new aligned field. */
 1319|      0|	ct->size = (bofs >> 3);  /* Store field offset. */
 1320|    119|      } else {  /* Bitfield. */
 1321|    119|	if (bsz == 0 || (attr & CTFP_ALIGNED) ||
  ------------------
  |  |   83|     77|#define CTFP_ALIGNED	0x00000001u	/* cp->attr + ALIGN */
  ------------------
  |  Branch (1321:6): [True: 42, False: 77]
  |  Branch (1321:18): [True: 0, False: 77]
  ------------------
 1322|    119|	    (!((attr|sattr) & CTFP_PACKED) && (bofs & amask) + bsz > csz))
  ------------------
  |  |   84|     77|#define CTFP_PACKED	0x00000002u	/* cp->attr */
  ------------------
  |  Branch (1322:7): [True: 77, False: 0]
  |  Branch (1322:40): [True: 21, False: 56]
  ------------------
 1323|     63|	  bofs = (bofs + amask) & ~amask;  /* Start new aligned field. */
 1324|       |
 1325|       |	/* Prefer regular field over bitfield. */
 1326|    119|	if (bsz == csz && (bofs & amask) == 0) {
  ------------------
  |  Branch (1326:6): [True: 24, False: 95]
  |  Branch (1326:20): [True: 24, False: 0]
  ------------------
 1327|     24|	  ct->info = CTINFO(CT_FIELD, ctype_cid(ct->info));
  ------------------
  |  |  185|     24|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|     24|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1328|     24|	  ct->size = (bofs >> 3);  /* Store field offset. */
 1329|     95|	} else {
 1330|     95|	  ct->info = CTINFO(CT_BITFIELD,
  ------------------
  |  |  185|     95|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|     95|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1331|     95|	    (info & (CTF_QUAL|CTF_UNSIGNED|CTF_BOOL)) +
 1332|     95|	    (csz << (CTSHIFT_BITCSZ-3)) + (bsz << CTSHIFT_BITBSZ));
 1333|       |#if LJ_BE
 1334|       |	  ct->info += ((csz - (bofs & (csz-1)) - bsz) << CTSHIFT_BITPOS);
 1335|       |#else
 1336|     95|	  ct->info += ((bofs & (csz-1)) << CTSHIFT_BITPOS);
  ------------------
  |  |  112|     95|#define CTSHIFT_BITPOS	0
  ------------------
 1337|     95|#endif
 1338|     95|	  ct->size = ((bofs & ~(csz-1)) >> 3);  /* Store container offset. */
 1339|     95|	}
 1340|    119|      }
 1341|       |
 1342|       |      /* Determine next offset or max. offset. */
 1343|    119|      if ((sinfo & CTF_UNION)) {
  ------------------
  |  |   74|    119|#define CTF_UNION	0x00800000u	/* Union: STRUCT. */
  ------------------
  |  Branch (1343:11): [True: 47, False: 72]
  ------------------
 1344|     47|	if (bsz > bmaxofs) bmaxofs = bsz;
  ------------------
  |  Branch (1344:6): [True: 19, False: 28]
  ------------------
 1345|     72|      } else {
 1346|     72|	bofs += bsz;
 1347|     72|      }
 1348|    119|    }  /* All other fields in the chain are already set up. */
 1349|       |
 1350|    119|    fieldid = ct->sib;
 1351|    119|  }
 1352|       |
 1353|       |  /* Complete struct/union. */
 1354|  2.46k|  sct->info = sinfo + CTALIGN(maxalign);
  ------------------
  |  |  186|  2.46k|#define CTALIGN(al)		((CTSize)(al) << CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   93|  2.46k|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  ------------------
 1355|  2.46k|  bofs = (sinfo & CTF_UNION) ? bmaxofs : bofs;
  ------------------
  |  |   74|  2.46k|#define CTF_UNION	0x00800000u	/* Union: STRUCT. */
  ------------------
  |  Branch (1355:10): [True: 1.48k, False: 981]
  ------------------
 1356|  2.46k|  maxalign = (8u << maxalign) - 1;
 1357|  2.46k|  sct->size = (((bofs + maxalign) & ~maxalign) >> 3);
 1358|  2.46k|}
lj_cparse.c:cp_field_align:
 1260|    119|{
 1261|    119|  CTSize align = ctype_align(info);
  ------------------
  |  |  191|    119|#define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   93|    119|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  |  |               #define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   92|    119|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  ------------------
 1262|    119|  UNUSED(cp); UNUSED(ct);
  ------------------
  |  |   91|    119|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(cp); UNUSED(ct);
  ------------------
  |  |   91|    119|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1263|       |#if (LJ_TARGET_X86 && !LJ_ABI_WIN) || (LJ_TARGET_ARM && __APPLE__)
 1264|       |  /* The SYSV i386 and iOS ABIs limit alignment of non-vector fields to 2^2. */
 1265|       |  if (align > 2 && !(info & CTFP_ALIGNED)) {
 1266|       |    if (ctype_isarray(info) && !(info & CTF_VECTOR)) {
 1267|       |      do {
 1268|       |	ct = ctype_rawchild(cp->cts, ct);
 1269|       |	info = ct->info;
 1270|       |      } while (ctype_isarray(info) && !(info & CTF_VECTOR));
 1271|       |    }
 1272|       |    if (ctype_isnum(info) || ctype_isenum(info))
 1273|       |      align = 2;
 1274|       |  }
 1275|       |#endif
 1276|    119|  return align;
 1277|    119|}
lj_cparse.c:cp_decl_enum:
 1441|    718|{
 1442|    718|  CTypeID eid = cp_struct_name(cp, sdecl, CTINFO(CT_ENUM, CTID_VOID));
  ------------------
  |  |  185|    718|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|    718|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1443|    718|  CTInfo einfo = CTINFO(CT_ENUM, CTALIGN(2) + CTID_UINT32);
  ------------------
  |  |  185|    718|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|    718|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1444|    718|  CTSize esize = 4;  /* Only 32 bit enums are supported. */
 1445|    718|  if (cp_opt(cp, '{')) {  /* Enum definition. */
  ------------------
  |  Branch (1445:7): [True: 682, False: 36]
  ------------------
 1446|    682|    CPValue k;
 1447|    682|    CTypeID lastid = eid;
 1448|    682|    k.u32 = 0;
 1449|    682|    k.id = CTID_INT32;
 1450|  1.90k|    do {
 1451|  1.90k|      GCstr *name = cp->str;
 1452|  1.90k|      if (cp->tok != CTOK_IDENT) cp_err_token(cp, CTOK_IDENT);
  ------------------
  |  Branch (1452:11): [True: 255, False: 1.64k]
  ------------------
 1453|  1.64k|      if (cp->val.id) cp_errmsg(cp, 0, LJ_ERR_FFI_REDEF, strdata(name));
  ------------------
  |  |  316|     90|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (1453:11): [True: 90, False: 1.55k]
  ------------------
 1454|  1.55k|      cp_next(cp);
 1455|  1.55k|      if (cp_opt(cp, '=')) {
  ------------------
  |  Branch (1455:11): [True: 0, False: 1.55k]
  ------------------
 1456|      0|	cp_expr_kint(cp, &k);
 1457|      0|	if (k.id == CTID_UINT32) {
  ------------------
  |  Branch (1457:6): [True: 0, False: 0]
  ------------------
 1458|       |	  /* C99 says that enum constants are always (signed) integers.
 1459|       |	  ** But since unsigned constants like 0x80000000 are quite common,
 1460|       |	  ** those are left as uint32_t.
 1461|       |	  */
 1462|      0|	  if (k.i32 >= 0) k.id = CTID_INT32;
  ------------------
  |  Branch (1462:8): [True: 0, False: 0]
  ------------------
 1463|      0|	} else {
 1464|       |	  /* OTOH it's common practice and even mandated by some ABIs
 1465|       |	  ** that the enum type itself is unsigned, unless there are any
 1466|       |	  ** negative constants.
 1467|       |	  */
 1468|      0|	  k.id = CTID_INT32;
 1469|      0|	  if (k.i32 < 0) einfo = CTINFO(CT_ENUM, CTALIGN(2) + CTID_INT32);
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  |  Branch (1469:8): [True: 0, False: 0]
  ------------------
 1470|      0|	}
 1471|      0|      }
 1472|       |      /* Add named enum constant. */
 1473|  1.55k|      {
 1474|  1.55k|	CType *ct;
 1475|  1.55k|	CTypeID constid = lj_ctype_new(cp->cts, &ct);
 1476|  1.55k|	ctype_get(cp->cts, lastid)->sib = constid;
 1477|  1.55k|	lastid = constid;
 1478|  1.55k|	ctype_setname(ct, name);
 1479|  1.55k|	ct->info = CTINFO(CT_CONSTVAL, CTF_CONST|k.id);
  ------------------
  |  |  185|  1.55k|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|  1.55k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1480|  1.55k|	ct->size = k.u32++;
 1481|  1.55k|	if (k.u32 == 0x80000000u) k.id = CTID_UINT32;
  ------------------
  |  Branch (1481:6): [True: 0, False: 1.55k]
  ------------------
 1482|  1.55k|	lj_ctype_addname(cp->cts, ct, constid);
 1483|  1.55k|      }
 1484|  1.55k|      if (!cp_opt(cp, ',')) break;
  ------------------
  |  Branch (1484:11): [True: 337, False: 1.22k]
  ------------------
 1485|  1.55k|    } while (cp->tok != '}');  /* Trailing ',' is ok. */
  ------------------
  |  Branch (1485:14): [True: 1.22k, False: 0]
  ------------------
 1486|    337|    cp_check(cp, '}');
 1487|       |    /* Complete enum. */
 1488|    337|    ctype_get(cp->cts, eid)->info = einfo;
 1489|    337|    ctype_get(cp->cts, eid)->size = esize;
 1490|    337|  }
 1491|    373|  return eid;
 1492|    718|}
lj_cparse.c:cp_push_type:
  807|  4.77k|{
  808|  4.77k|  CType *ct = ctype_get(decl->cp->cts, id);
  809|  4.77k|  CTInfo info = ct->info;
  810|  4.77k|  CTSize size = ct->size;
  811|  4.77k|  switch (ctype_type(info)) {
  ------------------
  |  |  189|  4.77k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|  4.77k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  812|  2.80k|  case CT_STRUCT: case CT_ENUM:
  ------------------
  |  Branch (812:3): [True: 2.46k, False: 2.31k]
  |  Branch (812:19): [True: 337, False: 4.44k]
  ------------------
  813|  2.80k|    cp_push(decl, CTINFO(CT_TYPEDEF, id), 0);  /* Don't copy unique types. */
  ------------------
  |  |  185|  2.80k|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|  2.80k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  814|  2.80k|    if ((decl->attr & CTF_QUAL)) {  /* Push unmerged qualifiers. */
  ------------------
  |  |   78|  2.80k|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|  2.80k|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|  2.80k|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
  |  Branch (814:9): [True: 53, False: 2.74k]
  ------------------
  815|     53|      cp_push(decl, CTINFO(CT_ATTRIB, CTATTRIB(CTA_QUAL)),
  ------------------
  |  |  185|     53|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|     53|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  816|     53|	      (decl->attr & CTF_QUAL));
  ------------------
  |  |   78|     53|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|     53|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|     53|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
  817|     53|      decl->attr &= ~CTF_QUAL;
  ------------------
  |  |   78|     53|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|     53|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|     53|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
  818|     53|    }
  819|  2.80k|    break;
  820|      0|  case CT_ATTRIB:
  ------------------
  |  Branch (820:3): [True: 0, False: 4.77k]
  ------------------
  821|      0|    if (ctype_isxattrib(info, CTA_QUAL))
  ------------------
  |  |  245|      0|  (((info) & (CTMASK_NUM|CTATTRIB(CTMASK_ATTRIB))) == \
  |  |  ------------------
  |  |  |  |   90|      0|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTATTRIB(CTMASK_ATTRIB))) == \
  |  |  ------------------
  |  |  |  |  187|      0|#define CTATTRIB(at)		((CTInfo)(at) << CTSHIFT_ATTRIB)
  |  |  |  |  ------------------
  |  |  |  |  |  |   95|      0|#define CTSHIFT_ATTRIB	16
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (245:3): [True: 0, False: 0]
  |  |  ------------------
  |  |  246|      0|   CTINFO(CT_ATTRIB, CTATTRIB(at)))
  |  |  ------------------
  |  |  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  822|      0|      decl->attr &= ~size;  /* Remove redundant qualifiers. */
  823|      0|    cp_push_type(decl, ctype_cid(info));  /* Unroll. */
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  824|      0|    cp_push(decl, info & ~CTMASK_CID, size);  /* Copy type. */
  ------------------
  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  ------------------
  825|      0|    break;
  826|    375|  case CT_ARRAY:
  ------------------
  |  Branch (826:3): [True: 375, False: 4.40k]
  ------------------
  827|    375|    if ((ct->info & (CTF_VECTOR|CTF_COMPLEX))) {
  ------------------
  |  |   72|    375|#define CTF_VECTOR	0x08000000u	/* Vector: ARRAY. */
  ------------------
                  if ((ct->info & (CTF_VECTOR|CTF_COMPLEX))) {
  ------------------
  |  |   73|    375|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  ------------------
  |  Branch (827:9): [True: 333, False: 42]
  ------------------
  828|    333|      info |= (decl->attr & CTF_QUAL);
  ------------------
  |  |   78|    333|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|    333|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|    333|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
  829|    333|      decl->attr &= ~CTF_QUAL;
  ------------------
  |  |   78|    333|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|    333|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|    333|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
  830|    333|    }
  831|    375|    cp_push_type(decl, ctype_cid(info));  /* Unroll. */
  ------------------
  |  |  190|    375|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|    375|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  832|    375|    cp_push(decl, info & ~CTMASK_CID, size);  /* Copy type. */
  ------------------
  |  |   89|    375|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  ------------------
  833|    375|    decl->stack[decl->pos].sib = 1;  /* Mark as already checked and sized. */
  834|       |    /* Note: this is not copied to the ct->sib in the C type table. */
  835|    375|    break;
  836|    156|  case CT_FUNC:
  ------------------
  |  Branch (836:3): [True: 156, False: 4.62k]
  ------------------
  837|       |    /* Copy type, link parameters (shared). */
  838|    156|    decl->stack[cp_push(decl, info, size)].sib = ct->sib;
  839|    156|    break;
  840|  1.44k|  default:
  ------------------
  |  Branch (840:3): [True: 1.44k, False: 3.33k]
  ------------------
  841|       |    /* Copy type, merge common qualifiers. */
  842|  1.44k|    cp_push(decl, info|(decl->attr & CTF_QUAL), size);
  ------------------
  |  |   78|  1.44k|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|  1.44k|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|  1.44k|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
  843|  1.44k|    decl->attr &= ~CTF_QUAL;
  ------------------
  |  |   78|  1.44k|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|  1.44k|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|  1.44k|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
  844|  1.44k|    break;
  845|  4.77k|  }
  846|  4.77k|}
lj_cparse.c:cp_push:
  784|  6.31k|{
  785|  6.31k|  return (decl->pos = cp_add(decl, info, size));
  786|  6.31k|}
lj_cparse.c:cp_add:
  769|  6.78k|{
  770|  6.78k|  CPDeclIdx top = decl->top;
  771|  6.78k|  if (top >= CPARSE_MAX_DECLSTACK) cp_err(decl->cp, LJ_ERR_XLEVELS);
  ------------------
  |  |   16|  6.78k|#define CPARSE_MAX_DECLSTACK	100	/* Max. declaration stack depth. */
  ------------------
  |  Branch (771:7): [True: 0, False: 6.78k]
  ------------------
  772|  6.78k|  decl->stack[top].info = info;
  773|  6.78k|  decl->stack[top].size = size;
  774|  6.78k|  decl->stack[top].sib = 0;
  775|  6.78k|  setgcrefnull(decl->stack[top].name);
  ------------------
  |  |   76|  6.78k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  776|  6.78k|  decl->stack[top].next = decl->stack[decl->pos].next;
  777|  6.78k|  decl->stack[decl->pos].next = (CTypeID1)top;
  778|  6.78k|  decl->top = top+1;
  779|  6.78k|  return top;
  780|  6.78k|}
lj_cparse.c:cp_declarator:
 1683|  3.38k|{
 1684|  3.38k|  if (++cp->depth > CPARSE_MAX_DECLDEPTH) cp_err(cp, LJ_ERR_XLEVELS);
  ------------------
  |  |   17|  3.38k|#define CPARSE_MAX_DECLDEPTH	20	/* Max. recursive declaration depth. */
  ------------------
  |  Branch (1684:7): [True: 0, False: 3.38k]
  ------------------
 1685|       |
 1686|  3.60k|  for (;;) {  /* Head of declarator. */
 1687|  3.60k|    if (cp_opt(cp, '*')) {  /* Pointer. */
  ------------------
  |  Branch (1687:9): [True: 223, False: 3.38k]
  ------------------
 1688|    223|      CTSize sz;
 1689|    223|      CTInfo info;
 1690|    223|      cp_decl_attributes(cp, decl);
 1691|    223|      sz = CTSIZE_PTR;
  ------------------
  |  |  250|    223|#define CTSIZE_PTR	8
  ------------------
 1692|    223|      info = CTINFO(CT_PTR, CTALIGN_PTR);
  ------------------
  |  |  185|    223|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|    223|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1693|    223|#if LJ_64
 1694|    223|      if (ctype_msizeP(decl->attr) == 4) {
  ------------------
  |  |  197|    223|#define ctype_msizeP(info)	(((info) >> CTSHIFT_MSIZEP) & CTMASK_MSIZEP)
  |  |  ------------------
  |  |  |  |  104|    223|#define CTSHIFT_MSIZEP	8
  |  |  ------------------
  |  |               #define ctype_msizeP(info)	(((info) >> CTSHIFT_MSIZEP) & CTMASK_MSIZEP)
  |  |  ------------------
  |  |  |  |  103|    223|#define CTMASK_MSIZEP	255		/* Max. type size (via mode) is 128. */
  |  |  ------------------
  ------------------
  |  Branch (1694:11): [True: 0, False: 223]
  ------------------
 1695|      0|	sz = 4;
 1696|      0|	info = CTINFO(CT_PTR, CTALIGN(2));
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1697|      0|      }
 1698|    223|#endif
 1699|    223|      info += (decl->attr & (CTF_QUAL|CTF_REF));
  ------------------
  |  |   78|    223|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|    223|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|    223|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
                    info += (decl->attr & (CTF_QUAL|CTF_REF));
  ------------------
  |  |   71|    223|#define CTF_REF		0x00800000u	/* Reference: PTR. */
  ------------------
 1700|    223|      decl->attr &= ~(CTF_QUAL|(CTMASK_MSIZEP<<CTSHIFT_MSIZEP));
  ------------------
  |  |   78|    223|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|    223|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|    223|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
                    decl->attr &= ~(CTF_QUAL|(CTMASK_MSIZEP<<CTSHIFT_MSIZEP));
  ------------------
  |  |  103|    223|#define CTMASK_MSIZEP	255		/* Max. type size (via mode) is 128. */
  ------------------
                    decl->attr &= ~(CTF_QUAL|(CTMASK_MSIZEP<<CTSHIFT_MSIZEP));
  ------------------
  |  |  104|    223|#define CTSHIFT_MSIZEP	8
  ------------------
 1701|    223|      cp_push(decl, info, sz);
 1702|  3.38k|    } else if (cp_opt(cp, '&') || cp_opt(cp, CTOK_ANDAND)) {  /* Reference. */
  ------------------
  |  Branch (1702:16): [True: 0, False: 3.38k]
  |  Branch (1702:35): [True: 0, False: 3.38k]
  ------------------
 1703|      0|      decl->attr &= ~(CTF_QUAL|(CTMASK_MSIZEP<<CTSHIFT_MSIZEP));
  ------------------
  |  |   78|      0|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|      0|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|      0|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
                    decl->attr &= ~(CTF_QUAL|(CTMASK_MSIZEP<<CTSHIFT_MSIZEP));
  ------------------
  |  |  103|      0|#define CTMASK_MSIZEP	255		/* Max. type size (via mode) is 128. */
  ------------------
                    decl->attr &= ~(CTF_QUAL|(CTMASK_MSIZEP<<CTSHIFT_MSIZEP));
  ------------------
  |  |  104|      0|#define CTSHIFT_MSIZEP	8
  ------------------
 1704|      0|      cp_push(decl, CTINFO_REF(0), CTSIZE_PTR);
  ------------------
  |  |  258|      0|  CTINFO(CT_PTR, (CTF_CONST|CTF_REF|CTALIGN_PTR) + (ref))
  |  |  ------------------
  |  |  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    cp_push(decl, CTINFO_REF(0), CTSIZE_PTR);
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
 1705|  3.38k|    } else {
 1706|  3.38k|      break;
 1707|  3.38k|    }
 1708|  3.60k|  }
 1709|       |
 1710|  3.38k|  if (cp_opt(cp, '(')) {  /* Inner declarator. */
  ------------------
  |  Branch (1710:7): [True: 196, False: 3.18k]
  ------------------
 1711|    196|    CPDeclIdx pos;
 1712|    196|    cp_decl_attributes(cp, decl);
 1713|       |    /* Resolve ambiguity between inner declarator and 1st function parameter. */
 1714|    196|    if ((decl->mode & CPARSE_MODE_ABSTRACT) &&
  ------------------
  |  |   22|    196|#define CPARSE_MODE_ABSTRACT	2	/* Accept abstract declarators. */
  ------------------
  |  Branch (1714:9): [True: 49, False: 147]
  ------------------
 1715|    196|	(cp->tok == ')' || cp_istypedecl(cp))) goto func_decl;
  ------------------
  |  Branch (1715:3): [True: 10, False: 39]
  |  Branch (1715:21): [True: 20, False: 19]
  ------------------
 1716|    166|    pos = decl->pos;
 1717|    166|    cp_declarator(cp, decl);
 1718|    166|    cp_check(cp, ')');
 1719|    166|    decl->pos = pos;
 1720|  3.18k|  } else if (cp->tok == CTOK_IDENT) {  /* Direct declarator. */
  ------------------
  |  Branch (1720:14): [True: 1.14k, False: 2.04k]
  ------------------
 1721|  1.14k|    if (!(decl->mode & CPARSE_MODE_DIRECT)) cp_err_token(cp, CTOK_EOF);
  ------------------
  |  |   23|  1.14k|#define CPARSE_MODE_DIRECT	4	/* Accept direct declarators. */
  ------------------
  |  Branch (1721:9): [True: 0, False: 1.14k]
  ------------------
 1722|  1.14k|    decl->name = cp->str;
 1723|  1.14k|    decl->nameid = cp->val.id;
 1724|  1.14k|    cp_next(cp);
 1725|  2.04k|  } else {  /* Abstract declarator. */
 1726|  2.04k|    if (!(decl->mode & CPARSE_MODE_ABSTRACT)) cp_err_token(cp, CTOK_IDENT);
  ------------------
  |  |   22|  2.04k|#define CPARSE_MODE_ABSTRACT	2	/* Accept abstract declarators. */
  ------------------
  |  Branch (1726:9): [True: 547, False: 1.49k]
  ------------------
 1727|  2.04k|  }
 1728|       |
 1729|  3.20k|  for (;;) {  /* Tail of declarator. */
 1730|  3.20k|    if (cp_opt(cp, '[')) {  /* Array. */
  ------------------
  |  Branch (1730:9): [True: 84, False: 3.12k]
  ------------------
 1731|     84|      cp_decl_array(cp, decl);
 1732|  3.12k|    } else if (cp_opt(cp, '(')) {  /* Function. */
  ------------------
  |  Branch (1732:16): [True: 407, False: 2.71k]
  ------------------
 1733|    437|    func_decl:
 1734|    437|      cp_decl_func(cp, decl);
 1735|  2.71k|    } else {
 1736|  2.71k|      break;
 1737|  2.71k|    }
 1738|  3.20k|  }
 1739|       |
 1740|  2.83k|  if ((decl->mode & CPARSE_MODE_FIELD) && cp_opt(cp, ':'))  /* Field width. */
  ------------------
  |  |   24|  2.83k|#define CPARSE_MODE_FIELD	8	/* Accept field width in bits, too. */
  ------------------
  |  Branch (1740:7): [True: 135, False: 2.70k]
  |  Branch (1740:43): [True: 135, False: 0]
  ------------------
 1741|    135|    decl->bits = cp_expr_ksize(cp);
 1742|       |
 1743|       |  /* Process postfix attributes. */
 1744|  2.83k|  cp_decl_attributes(cp, decl);
 1745|  2.83k|  cp_push_attributes(decl);
 1746|       |
 1747|  2.83k|  cp->depth--;
 1748|  2.83k|}
lj_cparse.c:cp_decl_array:
 1609|     84|{
 1610|     84|  CTInfo info = CTINFO(CT_ARRAY, 0);
  ------------------
  |  |  185|     84|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|     84|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1611|     84|  CTSize nelem = CTSIZE_INVALID;  /* Default size for a[] or a[?]. */
  ------------------
  |  |  135|     84|#define CTSIZE_INVALID	0xffffffffu
  ------------------
 1612|     84|  cp_decl_attributes(cp, decl);
 1613|     84|  if (cp_opt(cp, '?'))
  ------------------
  |  Branch (1613:7): [True: 0, False: 84]
  ------------------
 1614|      0|    info |= CTF_VLA;  /* Create variable-length array a[?]. */
  ------------------
  |  |   70|      0|#define CTF_VLA		0x00100000u	/* Variable-length: ARRAY, STRUCT. */
  ------------------
 1615|     84|  else if (cp->tok != ']')
  ------------------
  |  Branch (1615:12): [True: 84, False: 0]
  ------------------
 1616|     84|    nelem = cp_expr_ksize(cp);
 1617|     84|  cp_check(cp, ']');
 1618|     84|  cp_add(decl, info, nelem);
 1619|     84|}
lj_cparse.c:cp_decl_func:
 1623|    437|{
 1624|    437|  CTSize nargs = 0;
 1625|    437|  CTInfo info = CTINFO(CT_FUNC, 0);
  ------------------
  |  |  185|    437|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|    437|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1626|    437|  CTypeID lastid = 0, anchor = 0;
 1627|    437|  if (cp->tok != ')') {
  ------------------
  |  Branch (1627:7): [True: 308, False: 129]
  ------------------
 1628|  1.46k|    do {
 1629|  1.46k|      CPDecl decl;
 1630|  1.46k|      CTypeID ctypeid, fieldid;
 1631|  1.46k|      CType *ct;
 1632|  1.46k|      if (cp_opt(cp, '.')) {  /* Vararg function. */
  ------------------
  |  Branch (1632:11): [True: 18, False: 1.44k]
  ------------------
 1633|     18|	cp_check(cp, '.');  /* Workaround for the minimalistic lexer. */
 1634|     18|	cp_check(cp, '.');
 1635|     18|	info |= CTF_VARARG;
  ------------------
  |  |   75|     18|#define CTF_VARARG	0x00800000u	/* Vararg: FUNC. */
  ------------------
 1636|     18|	break;
 1637|     18|      }
 1638|  1.44k|      cp_decl_spec(cp, &decl, CDF_REGISTER);
 1639|  1.44k|      decl.mode = CPARSE_MODE_DIRECT|CPARSE_MODE_ABSTRACT;
  ------------------
  |  |   23|  1.44k|#define CPARSE_MODE_DIRECT	4	/* Accept direct declarators. */
  ------------------
                    decl.mode = CPARSE_MODE_DIRECT|CPARSE_MODE_ABSTRACT;
  ------------------
  |  |   22|  1.44k|#define CPARSE_MODE_ABSTRACT	2	/* Accept abstract declarators. */
  ------------------
 1640|  1.44k|      cp_declarator(cp, &decl);
 1641|  1.44k|      ctypeid = cp_decl_intern(cp, &decl);
 1642|  1.44k|      ct = ctype_raw(cp->cts, ctypeid);
 1643|  1.44k|      if (ctype_isvoid(ct->info))
  ------------------
  |  |  202|  1.44k|#define ctype_isvoid(info)	(ctype_type((info)) == CT_VOID)
  |  |  ------------------
  |  |  |  |  189|  1.44k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  1.44k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (202:28): [True: 94, False: 1.35k]
  |  |  ------------------
  ------------------
 1644|     94|	break;
 1645|  1.35k|      else if (ctype_isrefarray(ct->info))
  ------------------
  |  |  232|  1.35k|  (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   90|  1.35k|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   72|  1.35k|#define CTF_VECTOR	0x08000000u	/* Vector: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   73|  1.35k|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |  185|  1.35k|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  1.35k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (232:3): [True: 0, False: 1.35k]
  |  |  ------------------
  ------------------
 1646|      0|	ctypeid = lj_ctype_intern(cp->cts,
 1647|      0|	  CTINFO(CT_PTR, CTALIGN_PTR|ctype_cid(ct->info)), CTSIZE_PTR);
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
              	  CTINFO(CT_PTR, CTALIGN_PTR|ctype_cid(ct->info)), CTSIZE_PTR);
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
 1648|  1.35k|      else if (ctype_isfunc(ct->info))
  ------------------
  |  |  206|  1.35k|#define ctype_isfunc(info)	(ctype_type((info)) == CT_FUNC)
  |  |  ------------------
  |  |  |  |  189|  1.35k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  1.35k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (206:28): [True: 180, False: 1.17k]
  |  |  ------------------
  ------------------
 1649|    180|	ctypeid = lj_ctype_intern(cp->cts,
 1650|    180|	  CTINFO(CT_PTR, CTALIGN_PTR|ctypeid), CTSIZE_PTR);
  ------------------
  |  |  185|    180|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|    180|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
              	  CTINFO(CT_PTR, CTALIGN_PTR|ctypeid), CTSIZE_PTR);
  ------------------
  |  |  250|    180|#define CTSIZE_PTR	8
  ------------------
 1651|       |      /* Add new parameter. */
 1652|  1.35k|      fieldid = lj_ctype_new(cp->cts, &ct);
 1653|  1.35k|      if (anchor)
  ------------------
  |  Branch (1653:11): [True: 1.15k, False: 197]
  ------------------
 1654|  1.15k|	ctype_get(cp->cts, lastid)->sib = fieldid;
 1655|    197|      else
 1656|    197|	anchor = fieldid;
 1657|  1.35k|      lastid = fieldid;
 1658|  1.35k|      if (decl.name) ctype_setname(ct, decl.name);
  ------------------
  |  Branch (1658:11): [True: 10, False: 1.34k]
  ------------------
 1659|  1.35k|      ct->info = CTINFO(CT_FIELD, ctypeid);
  ------------------
  |  |  185|  1.35k|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|  1.35k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1660|  1.35k|      ct->size = nargs++;
 1661|  1.35k|    } while (cp_opt(cp, ','));
  ------------------
  |  Branch (1661:14): [True: 1.15k, False: 196]
  ------------------
 1662|    308|  }
 1663|      0|  cp_check(cp, ')');
 1664|    437|  if (cp_opt(cp, '{')) {  /* Skip function definition. */
  ------------------
  |  Branch (1664:7): [True: 0, False: 437]
  ------------------
 1665|      0|    int level = 1;
 1666|      0|    cp->mode |= CPARSE_MODE_SKIP;
  ------------------
  |  |   26|      0|#define CPARSE_MODE_SKIP	32	/* Skip definitions, ignore errors. */
  ------------------
 1667|      0|    for (;;) {
 1668|      0|      if (cp->tok == '{') level++;
  ------------------
  |  Branch (1668:11): [True: 0, False: 0]
  ------------------
 1669|      0|      else if (cp->tok == '}' && --level == 0) break;
  ------------------
  |  Branch (1669:16): [True: 0, False: 0]
  |  Branch (1669:34): [True: 0, False: 0]
  ------------------
 1670|      0|      else if (cp->tok == CTOK_EOF) cp_err_token(cp, '}');
  ------------------
  |  Branch (1670:16): [True: 0, False: 0]
  ------------------
 1671|      0|      cp_next(cp);
 1672|      0|    }
 1673|      0|    cp->mode &= ~CPARSE_MODE_SKIP;
  ------------------
  |  |   26|      0|#define CPARSE_MODE_SKIP	32	/* Skip definitions, ignore errors. */
  ------------------
 1674|      0|    cp->tok = ';';  /* Ok for cp_decl_multi(), error in cp_decl_single(). */
 1675|      0|  }
 1676|    437|  info |= (fdecl->fattr & ~CTMASK_CID);
  ------------------
  |  |   89|    437|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  ------------------
 1677|    437|  fdecl->fattr = 0;
 1678|    437|  fdecl->stack[cp_add(fdecl, info, nargs)].sib = anchor;
 1679|    437|}
lj_cparse.c:cp_push_attributes:
  790|  2.71k|{
  791|  2.71k|  CType *ct = &decl->stack[decl->pos];
  792|  2.71k|  if (ctype_isfunc(ct->info)) {  /* Ok to modify in-place. */
  ------------------
  |  |  206|  2.71k|#define ctype_isfunc(info)	(ctype_type((info)) == CT_FUNC)
  |  |  ------------------
  |  |  |  |  189|  2.71k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  2.71k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (206:28): [True: 153, False: 2.56k]
  |  |  ------------------
  ------------------
  793|       |#if LJ_TARGET_X86
  794|       |    if ((decl->fattr & CTFP_CCONV))
  795|       |      ct->info = (ct->info & (CTMASK_NUM|CTF_VARARG|CTMASK_CID)) +
  796|       |		 (decl->fattr & ~CTMASK_CID);
  797|       |#endif
  798|  2.56k|  } else {
  799|  2.56k|    if ((decl->attr & CTFP_ALIGNED) && !(decl->mode & CPARSE_MODE_FIELD))
  ------------------
  |  |   83|  2.56k|#define CTFP_ALIGNED	0x00000001u	/* cp->attr + ALIGN */
  ------------------
                  if ((decl->attr & CTFP_ALIGNED) && !(decl->mode & CPARSE_MODE_FIELD))
  ------------------
  |  |   24|      0|#define CPARSE_MODE_FIELD	8	/* Accept field width in bits, too. */
  ------------------
  |  Branch (799:9): [True: 0, False: 2.56k]
  |  Branch (799:40): [True: 0, False: 0]
  ------------------
  800|      0|      cp_push(decl, CTINFO(CT_ATTRIB, CTATTRIB(CTA_ALIGN)),
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  801|      0|	      ctype_align(decl->attr));
  ------------------
  |  |  191|      0|#define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   93|      0|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  |  |               #define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   92|      0|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  ------------------
  802|  2.56k|  }
  803|  2.71k|}
lj_cparse.c:cp_decl_intern:
  850|  2.61k|{
  851|  2.61k|  CTypeID id = 0;
  852|  2.61k|  CPDeclIdx idx = 0;
  853|  2.61k|  CTSize csize = CTSIZE_INVALID;
  ------------------
  |  |  135|  2.61k|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  854|  2.61k|  CTSize cinfo = 0;
  855|  3.55k|  do {
  856|  3.55k|    CType *ct = &decl->stack[idx];
  857|  3.55k|    CTInfo info = ct->info;
  858|  3.55k|    CTInfo size = ct->size;
  859|       |    /* The cid is already part of info for copies of pointers/functions. */
  860|  3.55k|    idx = ct->next;
  861|  3.55k|    if (ctype_istypedef(info)) {
  ------------------
  |  |  208|  3.55k|#define ctype_istypedef(info)	(ctype_type((info)) == CT_TYPEDEF)
  |  |  ------------------
  |  |  |  |  189|  3.55k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  3.55k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (208:31): [True: 0, False: 3.55k]
  |  |  ------------------
  ------------------
  862|      0|      lj_assertCP(id == 0, "typedef not at toplevel");
  ------------------
  |  |   32|      0|#define lj_assertCP(c, ...)	(lj_assertG_(G(cp->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  863|      0|      id = ctype_cid(info);
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  864|       |      /* Always refetch info/size, since struct/enum may have been completed. */
  865|      0|      cinfo = ctype_get(cp->cts, id)->info;
  866|      0|      csize = ctype_get(cp->cts, id)->size;
  867|      0|      lj_assertCP(ctype_isstruct(cinfo) || ctype_isenum(cinfo),
  ------------------
  |  |   32|      0|#define lj_assertCP(c, ...)	(lj_assertG_(G(cp->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  868|      0|		  "typedef of bad type");
  869|  3.55k|    } else if (ctype_isfunc(info)) {  /* Intern function. */
  ------------------
  |  |  206|  3.55k|#define ctype_isfunc(info)	(ctype_type((info)) == CT_FUNC)
  |  |  ------------------
  |  |  |  |  189|  3.55k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  3.55k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (206:28): [True: 490, False: 3.06k]
  |  |  ------------------
  ------------------
  870|    490|      CType *fct;
  871|    490|      CTypeID fid;
  872|    490|      CTypeID sib;
  873|    490|      if (id) {
  ------------------
  |  Branch (873:11): [True: 325, False: 165]
  ------------------
  874|    325|	CType *refct = ctype_raw(cp->cts, id);
  875|       |	/* Reject function or refarray return types. */
  876|    325|	if (ctype_isfunc(refct->info) || ctype_isrefarray(refct->info))
  ------------------
  |  |  206|    650|#define ctype_isfunc(info)	(ctype_type((info)) == CT_FUNC)
  |  |  ------------------
  |  |  |  |  189|    325|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    325|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (206:28): [True: 31, False: 294]
  |  |  ------------------
  ------------------
              	if (ctype_isfunc(refct->info) || ctype_isrefarray(refct->info))
  ------------------
  |  |  232|    294|  (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   90|    294|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   72|    294|#define CTF_VECTOR	0x08000000u	/* Vector: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   73|    294|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |  185|    294|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    294|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (232:3): [True: 2, False: 292]
  |  |  ------------------
  ------------------
  877|     33|	  cp_err(cp, LJ_ERR_FFI_INVTYPE);
  878|    325|      }
  879|       |      /* No intervening attributes allowed, skip forward. */
  880|    457|      while (idx) {
  ------------------
  |  Branch (880:14): [True: 47, False: 410]
  ------------------
  881|     47|	CType *ctn = &decl->stack[idx];
  882|     47|	if (!ctype_isattrib(ctn->info)) break;
  ------------------
  |  |  209|     47|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|     47|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     47|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (882:6): [True: 47, False: 0]
  ------------------
  883|      0|	idx = ctn->next;  /* Skip attribute. */
  884|      0|      }
  885|    457|      sib = ct->sib;  /* Next line may reallocate the C type table. */
  886|    457|      fid = lj_ctype_new(cp->cts, &fct);
  887|    457|      csize = CTSIZE_INVALID;
  ------------------
  |  |  135|    457|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  888|    457|      fct->info = cinfo = info + id;
  889|    457|      fct->size = size;
  890|    457|      fct->sib = sib;
  891|    457|      id = fid;
  892|  3.06k|    } else if (ctype_isattrib(info)) {
  ------------------
  |  |  209|  3.06k|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|  3.06k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  3.06k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 3.06k]
  |  |  ------------------
  ------------------
  893|      0|      if (ctype_isxattrib(info, CTA_QUAL))
  ------------------
  |  |  245|      0|  (((info) & (CTMASK_NUM|CTATTRIB(CTMASK_ATTRIB))) == \
  |  |  ------------------
  |  |  |  |   90|      0|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTATTRIB(CTMASK_ATTRIB))) == \
  |  |  ------------------
  |  |  |  |  187|      0|#define CTATTRIB(at)		((CTInfo)(at) << CTSHIFT_ATTRIB)
  |  |  |  |  ------------------
  |  |  |  |  |  |   95|      0|#define CTSHIFT_ATTRIB	16
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (245:3): [True: 0, False: 0]
  |  |  ------------------
  |  |  246|      0|   CTINFO(CT_ATTRIB, CTATTRIB(at)))
  |  |  ------------------
  |  |  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  894|      0|	cinfo |= size;
  895|      0|      else if (ctype_isxattrib(info, CTA_ALIGN))
  ------------------
  |  |  245|      0|  (((info) & (CTMASK_NUM|CTATTRIB(CTMASK_ATTRIB))) == \
  |  |  ------------------
  |  |  |  |   90|      0|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTATTRIB(CTMASK_ATTRIB))) == \
  |  |  ------------------
  |  |  |  |  187|      0|#define CTATTRIB(at)		((CTInfo)(at) << CTSHIFT_ATTRIB)
  |  |  |  |  ------------------
  |  |  |  |  |  |   95|      0|#define CTSHIFT_ATTRIB	16
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (245:3): [True: 0, False: 0]
  |  |  ------------------
  |  |  246|      0|   CTINFO(CT_ATTRIB, CTATTRIB(at)))
  |  |  ------------------
  |  |  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  896|      0|	CTF_INSERT(cinfo, ALIGN, size);
  ------------------
  |  |  117|      0|  info = (info & ~(CTMASK_##field<<CTSHIFT_##field)) | \
  |  |  118|      0|	  (((CTSize)(val) & CTMASK_##field) << CTSHIFT_##field)
  ------------------
  897|      0|      id = lj_ctype_intern(cp->cts, info+id, size);
  898|       |      /* Inherit csize/cinfo from original type. */
  899|  3.06k|    } else {
  900|  3.06k|      if (ctype_isnum(info)) {  /* Handle mode/vector-size attributes. */
  ------------------
  |  |  201|  3.06k|#define ctype_isnum(info)	(ctype_type((info)) == CT_NUM)
  |  |  ------------------
  |  |  |  |  189|  3.06k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  3.06k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (201:27): [True: 1.89k, False: 1.16k]
  |  |  ------------------
  ------------------
  901|  1.89k|	lj_assertCP(id == 0, "number not at toplevel");
  ------------------
  |  |   32|  1.89k|#define lj_assertCP(c, ...)	(lj_assertG_(G(cp->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.89k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.89k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.89k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.89k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  902|  1.89k|	if (!(info & CTF_BOOL)) {
  ------------------
  |  |   64|  1.89k|#define CTF_BOOL	0x08000000u	/* Boolean: NUM, BITFIELD. */
  ------------------
  |  Branch (902:6): [True: 1.30k, False: 590]
  ------------------
  903|  1.30k|	  CTSize msize = ctype_msizeP(decl->attr);
  ------------------
  |  |  197|  1.30k|#define ctype_msizeP(info)	(((info) >> CTSHIFT_MSIZEP) & CTMASK_MSIZEP)
  |  |  ------------------
  |  |  |  |  104|  1.30k|#define CTSHIFT_MSIZEP	8
  |  |  ------------------
  |  |               #define ctype_msizeP(info)	(((info) >> CTSHIFT_MSIZEP) & CTMASK_MSIZEP)
  |  |  ------------------
  |  |  |  |  103|  1.30k|#define CTMASK_MSIZEP	255		/* Max. type size (via mode) is 128. */
  |  |  ------------------
  ------------------
  904|  1.30k|	  CTSize vsize = ctype_vsizeP(decl->attr);
  ------------------
  |  |  196|  1.30k|#define ctype_vsizeP(info)	(((info) >> CTSHIFT_VSIZEP) & CTMASK_VSIZEP)
  |  |  ------------------
  |  |  |  |  102|  1.30k|#define CTSHIFT_VSIZEP	4
  |  |  ------------------
  |  |               #define ctype_vsizeP(info)	(((info) >> CTSHIFT_VSIZEP) & CTMASK_VSIZEP)
  |  |  ------------------
  |  |  |  |  101|  1.30k|#define CTMASK_VSIZEP	15		/* Max. vector size is 2^15. */
  |  |  ------------------
  ------------------
  905|  1.30k|	  if (msize && (!(info & CTF_FP) || (msize == 4 || msize == 8))) {
  ------------------
  |  |   65|      0|#define CTF_FP		0x04000000u	/* Floating-point: NUM. */
  ------------------
  |  Branch (905:8): [True: 0, False: 1.30k]
  |  Branch (905:18): [True: 0, False: 0]
  |  Branch (905:39): [True: 0, False: 0]
  |  Branch (905:53): [True: 0, False: 0]
  ------------------
  906|      0|	    CTSize malign = lj_fls(msize);
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  907|      0|	    if (malign > 4) malign = 4;  /* Limit alignment. */
  ------------------
  |  Branch (907:10): [True: 0, False: 0]
  ------------------
  908|      0|	    CTF_INSERT(info, ALIGN, malign);
  ------------------
  |  |  117|      0|  info = (info & ~(CTMASK_##field<<CTSHIFT_##field)) | \
  |  |  118|      0|	  (((CTSize)(val) & CTMASK_##field) << CTSHIFT_##field)
  ------------------
  909|      0|	    size = msize;  /* Override size via mode. */
  910|      0|	  }
  911|  1.30k|	  if (vsize) {  /* Vector size set? */
  ------------------
  |  Branch (911:8): [True: 0, False: 1.30k]
  ------------------
  912|      0|	    CTSize esize = lj_fls(size);
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  913|      0|	    if (vsize >= esize) {
  ------------------
  |  Branch (913:10): [True: 0, False: 0]
  ------------------
  914|       |	      /* Intern the element type first. */
  915|      0|	      id = lj_ctype_intern(cp->cts, info, size);
  916|       |	      /* Then create a vector (array) with vsize alignment. */
  917|      0|	      size = (1u << vsize);
  918|      0|	      if (vsize > 4) vsize = 4;  /* Limit alignment. */
  ------------------
  |  Branch (918:12): [True: 0, False: 0]
  ------------------
  919|      0|	      if (ctype_align(info) > vsize) vsize = ctype_align(info);
  ------------------
  |  |  191|      0|#define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   93|      0|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  |  |               #define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   92|      0|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  ------------------
              	      if (ctype_align(info) > vsize) vsize = ctype_align(info);
  ------------------
  |  |  191|      0|#define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   93|      0|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  |  |               #define ctype_align(info)	(((info) >> CTSHIFT_ALIGN) & CTMASK_ALIGN)
  |  |  ------------------
  |  |  |  |   92|      0|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  ------------------
  |  Branch (919:12): [True: 0, False: 0]
  ------------------
  920|      0|	      info = CTINFO(CT_ARRAY, (info & CTF_QUAL) + CTF_VECTOR +
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  921|      0|				      CTALIGN(vsize));
  922|      0|	    }
  923|      0|	  }
  924|  1.30k|	}
  925|  1.89k|      } else if (ctype_isptr(info)) {
  ------------------
  |  |  203|  1.16k|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|  1.16k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  1.16k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 243, False: 921]
  |  |  ------------------
  ------------------
  926|       |	/* Reject pointer/ref to ref. */
  927|    243|	if (id && ctype_isref(ctype_raw(cp->cts, id)->info))
  ------------------
  |  |  229|    159|  (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   90|    159|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   71|    159|#define CTF_REF		0x00800000u	/* Reference: PTR. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |  185|    159|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    159|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (229:3): [True: 0, False: 159]
  |  |  ------------------
  ------------------
  |  Branch (927:6): [True: 159, False: 84]
  ------------------
  928|      0|	  cp_err(cp, LJ_ERR_FFI_INVTYPE);
  929|    243|	if (ctype_isref(info)) {
  ------------------
  |  |  229|    243|  (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   90|    243|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   71|    243|#define CTF_REF		0x00800000u	/* Reference: PTR. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |  185|    243|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    243|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (229:3): [True: 0, False: 243]
  |  |  ------------------
  ------------------
  930|      0|	  info &= ~CTF_VOLATILE;  /* Refs are always const, never volatile. */
  ------------------
  |  |   67|      0|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  ------------------
  931|       |	  /* No intervening attributes allowed, skip forward. */
  932|      0|	  while (idx) {
  ------------------
  |  Branch (932:11): [True: 0, False: 0]
  ------------------
  933|      0|	    CType *ctn = &decl->stack[idx];
  934|      0|	    if (!ctype_isattrib(ctn->info)) break;
  ------------------
  |  |  209|      0|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (934:10): [True: 0, False: 0]
  ------------------
  935|      0|	    idx = ctn->next;  /* Skip attribute. */
  936|      0|	  }
  937|      0|	}
  938|    921|      } else if (ctype_isarray(info)) {  /* Check for valid array size etc. */
  ------------------
  |  |  204|    921|#define ctype_isarray(info)	(ctype_type((info)) == CT_ARRAY)
  |  |  ------------------
  |  |  |  |  189|    921|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    921|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (204:29): [True: 452, False: 469]
  |  |  ------------------
  ------------------
  939|    452|	if (ct->sib == 0) {  /* Only check/size arrays not copied by unroll. */
  ------------------
  |  Branch (939:6): [True: 76, False: 376]
  ------------------
  940|     76|	  if (ctype_isref(cinfo))  /* Reject arrays of refs. */
  ------------------
  |  |  229|     76|  (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   90|     76|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   71|     76|#define CTF_REF		0x00800000u	/* Reference: PTR. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |  185|     76|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     76|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (229:3): [True: 0, False: 76]
  |  |  ------------------
  ------------------
  941|      0|	    cp_err(cp, LJ_ERR_FFI_INVTYPE);
  942|       |	  /* Reject VLS or unknown-sized types. */
  943|     76|	  if (ctype_isvltype(cinfo) || csize == CTSIZE_INVALID)
  ------------------
  |  |  239|    152|  (((info) & ((CTMASK_NUM|CTF_VLA) - (2u<<CTSHIFT_NUM))) == \
  |  |  ------------------
  |  |  |  |   90|     76|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & ((CTMASK_NUM|CTF_VLA) - (2u<<CTSHIFT_NUM))) == \
  |  |  ------------------
  |  |  |  |   70|     76|#define CTF_VLA		0x00100000u	/* Variable-length: ARRAY, STRUCT. */
  |  |  ------------------
  |  |                 (((info) & ((CTMASK_NUM|CTF_VLA) - (2u<<CTSHIFT_NUM))) == \
  |  |  ------------------
  |  |  |  |   91|     76|#define CTSHIFT_NUM	28
  |  |  ------------------
  |  |  |  Branch (239:3): [True: 0, False: 76]
  |  |  ------------------
  |  |  240|    152|   CTINFO(CT_STRUCT, CTF_VLA))  /* VL array or VL struct. */
  |  |  ------------------
  |  |  |  |  185|     76|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     76|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	  if (ctype_isvltype(cinfo) || csize == CTSIZE_INVALID)
  ------------------
  |  |  135|     76|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (943:33): [True: 6, False: 70]
  ------------------
  944|      6|	    cp_err(cp, LJ_ERR_FFI_INVSIZE);
  945|       |	  /* a[] and a[?] keep their invalid size. */
  946|     70|	  if (size != CTSIZE_INVALID) {
  ------------------
  |  |  135|     70|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (946:8): [True: 70, False: 0]
  ------------------
  947|     70|	    uint64_t xsz = (uint64_t)size * csize;
  948|     70|	    if (xsz >= 0x80000000u) cp_err(cp, LJ_ERR_FFI_INVSIZE);
  ------------------
  |  Branch (948:10): [True: 3, False: 67]
  ------------------
  949|     67|	    size = (CTSize)xsz;
  950|     67|	  }
  951|     70|	}
  952|    443|	if ((cinfo & CTF_ALIGN) > (info & CTF_ALIGN))  /* Find max. align. */
  ------------------
  |  |   79|    443|#define CTF_ALIGN	(CTMASK_ALIGN<<CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   92|    443|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  |  |               #define CTF_ALIGN	(CTMASK_ALIGN<<CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   93|    443|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  ------------------
              	if ((cinfo & CTF_ALIGN) > (info & CTF_ALIGN))  /* Find max. align. */
  ------------------
  |  |   79|    443|#define CTF_ALIGN	(CTMASK_ALIGN<<CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   92|    443|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  |  |               #define CTF_ALIGN	(CTMASK_ALIGN<<CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   93|    443|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  ------------------
  |  Branch (952:6): [True: 35, False: 408]
  ------------------
  953|     35|	  info = (info & ~CTF_ALIGN) | (cinfo & CTF_ALIGN);
  ------------------
  |  |   79|     35|#define CTF_ALIGN	(CTMASK_ALIGN<<CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   92|     35|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  |  |               #define CTF_ALIGN	(CTMASK_ALIGN<<CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   93|     35|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  ------------------
              	  info = (info & ~CTF_ALIGN) | (cinfo & CTF_ALIGN);
  ------------------
  |  |   79|     35|#define CTF_ALIGN	(CTMASK_ALIGN<<CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   92|     35|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  |  |               #define CTF_ALIGN	(CTMASK_ALIGN<<CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   93|     35|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  ------------------
  954|    443|	info |= (cinfo & CTF_QUAL);  /* Inherit qual. */
  ------------------
  |  |   78|    443|#define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   66|    443|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  |  |  ------------------
  |  |               #define CTF_QUAL	(CTF_CONST|CTF_VOLATILE)
  |  |  ------------------
  |  |  |  |   67|    443|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  |  |  ------------------
  ------------------
  955|    469|      } else {
  956|    469|	lj_assertCP(ctype_isvoid(info), "bad ctype %08x", info);
  ------------------
  |  |   32|    469|#define lj_assertCP(c, ...)	(lj_assertG_(G(cp->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    469|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    469|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 469, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    469|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  957|    469|      }
  958|  3.05k|      csize = size;
  959|  3.05k|      cinfo = info+id;
  960|  3.05k|      id = lj_ctype_intern(cp->cts, info+id, size);
  961|  3.05k|    }
  962|  3.55k|  } while (idx);
  ------------------
  |  Branch (962:12): [True: 936, False: 2.57k]
  ------------------
  963|  2.57k|  return id;
  964|  2.61k|}
lj_cparse.c:cp_decl_constinit:
  983|     11|{
  984|     11|  CType *ctt = ctype_get(cp->cts, ctypeid);
  985|     11|  CTInfo info;
  986|     11|  CTSize size;
  987|     11|  CPValue k;
  988|     11|  CTypeID constid;
  989|     11|  while (ctype_isattrib(ctt->info)) {  /* Skip attributes. */
  ------------------
  |  |  209|     11|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|     11|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     11|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 11]
  |  |  ------------------
  ------------------
  990|      0|    ctypeid = ctype_cid(ctt->info);  /* Update ID, too. */
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  991|      0|    ctt = ctype_get(cp->cts, ctypeid);
  992|      0|  }
  993|     11|  info = ctt->info;
  994|     11|  size = ctt->size;
  995|     11|  if (!ctype_isinteger(info) || !(info & CTF_CONST) || size > 4)
  ------------------
  |  |  218|     22|  (((info) & (CTMASK_NUM|CTF_BOOL|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   90|     11|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_BOOL|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   64|     11|#define CTF_BOOL	0x08000000u	/* Boolean: NUM, BITFIELD. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_BOOL|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   65|     11|#define CTF_FP		0x04000000u	/* Floating-point: NUM. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_BOOL|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |  185|     11|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     11|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if (!ctype_isinteger(info) || !(info & CTF_CONST) || size > 4)
  ------------------
  |  |   66|      3|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  ------------------
  |  Branch (995:7): [True: 8, False: 3]
  |  Branch (995:33): [True: 1, False: 2]
  |  Branch (995:56): [True: 1, False: 1]
  ------------------
  996|     10|    cp_err(cp, LJ_ERR_FFI_INVTYPE);
  997|      1|  cp_check(cp, '=');
  998|      1|  cp_expr_sub(cp, &k, 0);
  999|      1|  constid = lj_ctype_new(cp->cts, ctp);
 1000|      1|  (*ctp)->info = CTINFO(CT_CONSTVAL, CTF_CONST|ctypeid);
  ------------------
  |  |  185|      1|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      1|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
 1001|      1|  k.u32 <<= 8*(4-size);
 1002|      1|  if ((info & CTF_UNSIGNED))
  ------------------
  |  |   68|      1|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (1002:7): [True: 0, False: 1]
  ------------------
 1003|      0|    k.u32 >>= 8*(4-size);
 1004|      1|  else
 1005|      1|    k.u32 = (uint32_t)((int32_t)k.u32 >> 8*(4-size));
 1006|      1|  (*ctp)->size = k.u32;
 1007|      1|  return constid;
 1008|     11|}
lj_cparse.c:cp_decl_reset:
  970|    358|{
  971|    358|  decl->pos = decl->specpos;
  972|    358|  decl->top = decl->specpos+1;
  973|    358|  decl->stack[decl->specpos].next = 0;
  974|    358|  decl->attr = decl->specattr;
  975|    358|  decl->fattr = decl->specfattr;
  976|    358|  decl->name = NULL;
  977|    358|  decl->redir = NULL;
  978|    358|}
lj_cparse.c:cp_check:
  424|  7.00k|{
  425|  7.00k|  if (cp->tok != tok) cp_err_token(cp, tok);
  ------------------
  |  Branch (425:7): [True: 75, False: 6.93k]
  ------------------
  426|  6.93k|  cp_next(cp);
  427|  6.93k|}
lj_cparse.c:cp_err:
  165|     56|{
  166|     56|  cp_errmsg(cp, 0, em);
  167|     56|}
lj_cparse.c:cp_cleanup:
  410|  11.0k|{
  411|  11.0k|  global_State *g = G(cp->L);
  ------------------
  |  |  705|  11.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  11.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  412|  11.0k|  lj_buf_free(g, &cp->sb);
  413|  11.0k|}

lj_ctype_new:
  156|  10.0k|{
  157|  10.0k|  CTypeID id = cts->top;
  158|  10.0k|  CType *ct;
  159|  10.0k|  lj_assertCTS(cts->L, "uninitialized cts->L");
  ------------------
  |  |  263|  10.0k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  10.0k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  10.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 10.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  10.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  160|  10.0k|  if (LJ_UNLIKELY(id >= cts->sizetab)) {
  ------------------
  |  |  146|  10.0k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 39, False: 9.96k]
  |  |  ------------------
  ------------------
  161|     39|    if (id >= CTID_MAX) lj_err_msg(cts->L, LJ_ERR_TABOV);
  ------------------
  |  Branch (161:9): [True: 0, False: 39]
  ------------------
  162|       |#ifdef LUAJIT_CTYPE_CHECK_ANCHOR
  163|       |    ct = lj_mem_newvec(cts->L, id+1, CType);
  164|       |    memcpy(ct, cts->tab, id*sizeof(CType));
  165|       |    memset(cts->tab, 0, id*sizeof(CType));
  166|       |    lj_mem_freevec(cts->g, cts->tab, cts->sizetab, CType);
  167|       |    cts->tab = ct;
  168|       |    cts->sizetab = id+1;
  169|       |#else
  170|     39|    lj_mem_growvec(cts->L, cts->tab, cts->sizetab, CTID_MAX, CType);
  ------------------
  |  |  129|     39|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
  171|     39|#endif
  172|     39|  }
  173|  10.0k|  cts->top = id+1;
  174|  10.0k|  *ctp = ct = &cts->tab[id];
  175|  10.0k|  ct->info = 0;
  176|  10.0k|  ct->size = 0;
  177|  10.0k|  ct->sib = 0;
  178|  10.0k|  ct->next = 0;
  179|  10.0k|  setgcrefnull(ct->name);
  ------------------
  |  |   76|  10.0k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  180|  10.0k|  return id;
  181|  10.0k|}
lj_ctype_intern:
  185|  3.23k|{
  186|  3.23k|  uint32_t h = ct_hashtype(info, size);
  ------------------
  |  |  150|  3.23k|#define ct_hashtype(info, size)	(hashrot(info, size) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |  152|  3.23k|#define CTHASH_MASK	(CTHASH_SIZE-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  151|  3.23k|#define CTHASH_SIZE	128	/* Number of hash anchors. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  187|  3.23k|  CTypeID id = cts->hash[h];
  188|  3.23k|  lj_assertCTS(cts->L, "uninitialized cts->L");
  ------------------
  |  |  263|  3.23k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  3.23k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.23k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3.23k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.23k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  189|  7.81k|  while (id) {
  ------------------
  |  Branch (189:10): [True: 7.46k, False: 351]
  ------------------
  190|  7.46k|    CType *ct = ctype_get(cts, id);
  191|  7.46k|    if (ct->info == info && ct->size == size)
  ------------------
  |  Branch (191:9): [True: 2.91k, False: 4.55k]
  |  Branch (191:29): [True: 2.88k, False: 34]
  ------------------
  192|  2.88k|      return id;
  193|  4.58k|    id = ct->next;
  194|  4.58k|  }
  195|    351|  id = cts->top;
  196|    351|  if (LJ_UNLIKELY(id >= cts->sizetab)) {
  ------------------
  |  |  146|    351|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1, False: 350]
  |  |  ------------------
  ------------------
  197|       |#ifdef LUAJIT_CTYPE_CHECK_ANCHOR
  198|       |    CType *ct;
  199|       |#endif
  200|      1|    if (id >= CTID_MAX) lj_err_msg(cts->L, LJ_ERR_TABOV);
  ------------------
  |  Branch (200:9): [True: 0, False: 1]
  ------------------
  201|       |#ifdef LUAJIT_CTYPE_CHECK_ANCHOR
  202|       |    ct = lj_mem_newvec(cts->L, id+1, CType);
  203|       |    memcpy(ct, cts->tab, id*sizeof(CType));
  204|       |    memset(cts->tab, 0, id*sizeof(CType));
  205|       |    lj_mem_freevec(cts->g, cts->tab, cts->sizetab, CType);
  206|       |    cts->tab = ct;
  207|       |    cts->sizetab = id+1;
  208|       |#else
  209|      1|    lj_mem_growvec(cts->L, cts->tab, cts->sizetab, CTID_MAX, CType);
  ------------------
  |  |  129|      1|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
  210|      1|#endif
  211|      1|  }
  212|    351|  cts->top = id+1;
  213|    351|  cts->tab[id].info = info;
  214|    351|  cts->tab[id].size = size;
  215|    351|  cts->tab[id].sib = 0;
  216|    351|  cts->tab[id].next = cts->hash[h];
  217|    351|  setgcrefnull(cts->tab[id].name);
  ------------------
  |  |   76|    351|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  218|    351|  cts->hash[h] = (CTypeID1)id;
  219|    351|  return id;
  220|    351|}
lj_ctype_addname:
  232|  1.04M|{
  233|  1.04M|  uint32_t h = ct_hashname(gcref(ct->name));
  ------------------
  |  |  152|  1.04M|  (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   96|  1.04M|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   96|  1.04M|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   12|  1.04M|#define HASH_BIAS	(-0x04c11db7)
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |  152|  1.04M|#define CTHASH_MASK	(CTHASH_SIZE-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  151|  1.04M|#define CTHASH_SIZE	128	/* Number of hash anchors. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  234|  1.04M|  ct->next = cts->hash[h];
  235|  1.04M|  cts->hash[h] = (CTypeID1)id;
  236|  1.04M|}
lj_ctype_getname:
  240|  21.5k|{
  241|  21.5k|  CTypeID id = cts->hash[ct_hashname(name)];
  ------------------
  |  |  152|  21.5k|  (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   96|  21.5k|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   96|  21.5k|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   12|  21.5k|#define HASH_BIAS	(-0x04c11db7)
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |  152|  21.5k|#define CTHASH_MASK	(CTHASH_SIZE-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  151|  21.5k|#define CTHASH_SIZE	128	/* Number of hash anchors. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  242|  29.8k|  while (id) {
  ------------------
  |  Branch (242:10): [True: 22.8k, False: 6.97k]
  ------------------
  243|  22.8k|    CType *ct = ctype_get(cts, id);
  244|  22.8k|    if (gcref(ct->name) == obj2gco(name) &&
  ------------------
  |  |   67|  22.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                  if (gcref(ct->name) == obj2gco(name) &&
  ------------------
  |  |  775|  45.7k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  |  Branch (244:9): [True: 14.9k, False: 7.89k]
  ------------------
  245|  22.8k|	((tmask >> ctype_type(ct->info)) & 1)) {
  ------------------
  |  |  189|  14.9k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|  14.9k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  |  Branch (245:2): [True: 14.6k, False: 366]
  ------------------
  246|  14.6k|      *ctp = ct;
  247|  14.6k|      return id;
  248|  14.6k|    }
  249|  8.25k|    id = ct->next;
  250|  8.25k|  }
  251|  6.97k|  *ctp = &cts->tab[0];  /* Simplify caller logic. ctype_get() would assert. */
  252|  6.97k|  return 0;
  253|  21.5k|}
lj_ctype_info:
  326|    119|{
  327|    119|  CTInfo qual = 0;
  328|    119|  CType *ct = ctype_get(cts, id);
  329|    119|  for (;;) {
  330|    119|    CTInfo info = ct->info;
  331|    119|    if (ctype_isenum(info)) {
  ------------------
  |  |  207|    119|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|    119|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    119|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (207:28): [True: 0, False: 119]
  |  |  ------------------
  ------------------
  332|       |      /* Follow child. Need to look at its attributes, too. */
  333|    119|    } else if (ctype_isattrib(info)) {
  ------------------
  |  |  209|    119|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|    119|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    119|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 119]
  |  |  ------------------
  ------------------
  334|      0|      if (ctype_isxattrib(info, CTA_QUAL))
  ------------------
  |  |  245|      0|  (((info) & (CTMASK_NUM|CTATTRIB(CTMASK_ATTRIB))) == \
  |  |  ------------------
  |  |  |  |   90|      0|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTATTRIB(CTMASK_ATTRIB))) == \
  |  |  ------------------
  |  |  |  |  187|      0|#define CTATTRIB(at)		((CTInfo)(at) << CTSHIFT_ATTRIB)
  |  |  |  |  ------------------
  |  |  |  |  |  |   95|      0|#define CTSHIFT_ATTRIB	16
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (245:3): [True: 0, False: 0]
  |  |  ------------------
  |  |  246|      0|   CTINFO(CT_ATTRIB, CTATTRIB(at)))
  |  |  ------------------
  |  |  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  335|      0|	qual |= ct->size;
  336|      0|      else if (ctype_isxattrib(info, CTA_ALIGN) && !(qual & CTFP_ALIGNED))
  ------------------
  |  |  245|      0|  (((info) & (CTMASK_NUM|CTATTRIB(CTMASK_ATTRIB))) == \
  |  |  ------------------
  |  |  |  |   90|      0|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTATTRIB(CTMASK_ATTRIB))) == \
  |  |  ------------------
  |  |  |  |  187|      0|#define CTATTRIB(at)		((CTInfo)(at) << CTSHIFT_ATTRIB)
  |  |  |  |  ------------------
  |  |  |  |  |  |   95|      0|#define CTSHIFT_ATTRIB	16
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (245:3): [True: 0, False: 0]
  |  |  ------------------
  |  |  246|      0|   CTINFO(CT_ATTRIB, CTATTRIB(at)))
  |  |  ------------------
  |  |  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    else if (ctype_isxattrib(info, CTA_ALIGN) && !(qual & CTFP_ALIGNED))
  ------------------
  |  |   83|      0|#define CTFP_ALIGNED	0x00000001u	/* cp->attr + ALIGN */
  ------------------
  |  Branch (336:52): [True: 0, False: 0]
  ------------------
  337|      0|	qual |= CTFP_ALIGNED + CTALIGN(ct->size);
  ------------------
  |  |   83|      0|#define CTFP_ALIGNED	0x00000001u	/* cp->attr + ALIGN */
  ------------------
              	qual |= CTFP_ALIGNED + CTALIGN(ct->size);
  ------------------
  |  |  186|      0|#define CTALIGN(al)		((CTSize)(al) << CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   93|      0|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  ------------------
  338|    119|    } else {
  339|    119|      if (!(qual & CTFP_ALIGNED)) qual |= (info & CTF_ALIGN);
  ------------------
  |  |   83|    119|#define CTFP_ALIGNED	0x00000001u	/* cp->attr + ALIGN */
  ------------------
                    if (!(qual & CTFP_ALIGNED)) qual |= (info & CTF_ALIGN);
  ------------------
  |  |   79|    119|#define CTF_ALIGN	(CTMASK_ALIGN<<CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   92|    119|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  |  |               #define CTF_ALIGN	(CTMASK_ALIGN<<CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   93|    119|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  ------------------
  |  Branch (339:11): [True: 119, False: 0]
  ------------------
  340|    119|      qual |= (info & ~(CTF_ALIGN|CTMASK_CID));
  ------------------
  |  |   79|    119|#define CTF_ALIGN	(CTMASK_ALIGN<<CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   92|    119|#define CTMASK_ALIGN	15		/* Max. alignment is 2^15. */
  |  |  ------------------
  |  |               #define CTF_ALIGN	(CTMASK_ALIGN<<CTSHIFT_ALIGN)
  |  |  ------------------
  |  |  |  |   93|    119|#define CTSHIFT_ALIGN	16
  |  |  ------------------
  ------------------
                    qual |= (info & ~(CTF_ALIGN|CTMASK_CID));
  ------------------
  |  |   89|    119|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  ------------------
  341|    119|      lj_assertCTS(ctype_hassize(info) || ctype_isfunc(info),
  ------------------
  |  |  263|    119|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    119|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    119|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 119, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    119|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  342|    119|		   "ctype without size");
  343|    119|      *szp = ctype_isfunc(info) ? CTSIZE_INVALID : ct->size;
  ------------------
  |  |  206|    119|#define ctype_isfunc(info)	(ctype_type((info)) == CT_FUNC)
  |  |  ------------------
  |  |  |  |  189|    119|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    119|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (206:28): [True: 0, False: 119]
  |  |  ------------------
  ------------------
                    *szp = ctype_isfunc(info) ? CTSIZE_INVALID : ct->size;
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  344|    119|      break;
  345|    119|    }
  346|      0|    ct = ctype_get(cts, ctype_cid(info));
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  347|      0|  }
  348|    119|  return qual;
  349|    119|}
lj_ctype_init:
  617|  13.5k|{
  618|  13.5k|  CTState *cts = lj_mem_newt(L, sizeof(CTState), CTState);
  ------------------
  |  |  133|  13.5k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  13.5k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  619|  13.5k|  CType *ct = lj_mem_newvec(L, CTTYPETAB_MIN, CType);
  ------------------
  |  |  125|  13.5k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  13.5k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  620|  13.5k|  const char *name = lj_ctype_typenames;
  621|  13.5k|  CTypeID id;
  622|  13.5k|  memset(cts, 0, sizeof(CTState));
  623|  13.5k|  cts->tab = ct;
  624|  13.5k|  cts->sizetab = CTTYPETAB_MIN;
  ------------------
  |  |  145|  13.5k|#define CTTYPETAB_MIN		128
  ------------------
  625|  13.5k|  cts->top = CTTYPEINFO_NUM;
  ------------------
  |  |  141|  13.5k|#define CTTYPEINFO_NUM		(sizeof(lj_ctype_typeinfo)/sizeof(CTInfo)-1)
  ------------------
  626|  13.5k|  cts->L = NULL;
  627|  13.5k|  cts->g = G(L);
  ------------------
  |  |  705|  13.5k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  13.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  628|  1.39M|  for (id = 0; id < CTTYPEINFO_NUM; id++, ct++) {
  ------------------
  |  |  141|  1.39M|#define CTTYPEINFO_NUM		(sizeof(lj_ctype_typeinfo)/sizeof(CTInfo)-1)
  ------------------
  |  Branch (628:16): [True: 1.38M, False: 13.5k]
  ------------------
  629|  1.38M|    CTInfo info = lj_ctype_typeinfo[id];
  630|  1.38M|    ct->size = (CTSize)((int32_t)(info << 16) >> 26);
  631|  1.38M|    ct->info = info & 0xffff03ffu;
  632|  1.38M|    ct->sib = 0;
  633|  1.38M|    if (ctype_type(info) == CT_KW || ctype_istypedef(info)) {
  ------------------
  |  |  189|  1.38M|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|  1.38M|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
                  if (ctype_type(info) == CT_KW || ctype_istypedef(info)) {
  ------------------
  |  |  208|   596k|#define ctype_istypedef(info)	(ctype_type((info)) == CT_TYPEDEF)
  |  |  ------------------
  |  |  |  |  189|   596k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|   596k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (208:31): [True: 257k, False: 338k]
  |  |  ------------------
  ------------------
  |  Branch (633:9): [True: 786k, False: 596k]
  ------------------
  634|  1.04M|      size_t len = strlen(name);
  635|  1.04M|      GCstr *str = lj_str_new(L, name, len);
  636|  1.04M|      ctype_setname(ct, str);
  637|  1.04M|      name += len+1;
  638|  1.04M|      lj_ctype_addname(cts, ct, id);
  639|  1.04M|    } else {
  640|   338k|      setgcrefnull(ct->name);
  ------------------
  |  |   76|   338k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  641|   338k|      ct->next = 0;
  642|   338k|      if (!ctype_isenum(info)) ctype_addtype(cts, ct, id);
  ------------------
  |  |  207|   338k|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|   338k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|   338k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (642:11): [True: 325k, False: 13.5k]
  ------------------
  643|   338k|    }
  644|  1.38M|  }
  645|  13.5k|  setmref(G(L)->ctype_state, cts);
  ------------------
  |  |   39|  13.5k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  646|  13.5k|  return cts;
  647|  13.5k|}
lj_ctype_initfin:
  651|  17.8k|{
  652|       |  /* NOBARRIER: The table is new (marked white). */
  653|  17.8k|  GCtab *t = lj_tab_new(L, 0, 1);
  654|  17.8k|  setgcref(t->metatable, obj2gco(t));
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  655|  17.8k|  setstrV(L, lj_tab_setstr(L, t, lj_str_newlit(L, "__mode")),
  ------------------
  |  |   28|  17.8k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  656|  17.8k|	  lj_str_newlit(L, "k"));
  ------------------
  |  |   28|  17.8k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  657|  17.8k|  t->nomm = (uint8_t)(~(1u<<MM_mode));
  658|  17.8k|  setgcref(G(L)->gcroot[GCROOT_FFI_FIN], obj2gco(t));
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  659|  17.8k|}
lj_ctype_freestate:
  663|  17.8k|{
  664|  17.8k|  CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  386|  17.8k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  665|  17.8k|  if (cts) {
  ------------------
  |  Branch (665:7): [True: 13.5k, False: 4.28k]
  ------------------
  666|  13.5k|    lj_ccallback_mcode_free(cts);
  667|  13.5k|    lj_mem_freevec(g, cts->tab, cts->sizetab, CType);
  ------------------
  |  |  130|  13.5k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  668|  13.5k|    lj_mem_freevec(g, cts->cb.cbid, cts->cb.sizeid, CTypeID1);
  ------------------
  |  |  130|  13.5k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  669|  13.5k|    lj_mem_freet(g, cts);
  ------------------
  |  |  134|  13.5k|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  670|  13.5k|  }
  671|  17.8k|}
lj_ctype.c:ctype_addtype:
  224|   325k|{
  225|   325k|  uint32_t h = ct_hashtype(ct->info, ct->size);
  ------------------
  |  |  150|   325k|#define ct_hashtype(info, size)	(hashrot(info, size) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |  152|   325k|#define CTHASH_MASK	(CTHASH_SIZE-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  151|   325k|#define CTHASH_SIZE	128	/* Number of hash anchors. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  226|   325k|  ct->next = cts->hash[h];
  227|   325k|  cts->hash[h] = (CTypeID1)id;
  228|   325k|}

lj_ctype.c:ctype_get:
  422|  30.4k|{
  423|  30.4k|  return &cts->tab[ctype_check(cts, id)];
  424|  30.4k|}
lj_ctype.c:ctype_check:
  414|  30.4k|{
  415|  30.4k|  UNUSED(cts);
  ------------------
  |  |   91|  30.4k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  416|  30.4k|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|  30.4k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  30.4k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  60.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 30.4k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 30.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  30.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  417|  30.4k|  return id;
  418|  30.4k|}
lj_ctype.c:ctype_setname:
  455|  1.04M|{
  456|       |  /* NOBARRIER: mark string as fixed -- the C type table is never collected. */
  457|  1.04M|  fixstring(s);
  ------------------
  |  |   45|  1.04M|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  1.04M|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  458|  1.04M|  setgcref(ct->name, obj2gco(s));
  ------------------
  |  |   72|  1.04M|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  459|  1.04M|}
lib_ffi.c:ctype_cts:
  390|  11.0k|{
  391|  11.0k|  CTState *cts = ctype_ctsG(G(L));
  ------------------
  |  |  386|  11.0k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  11.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  392|  11.0k|  cts->L = L;  /* Save L for errors and allocations. */
  393|  11.0k|  return cts;
  394|  11.0k|}
lj_cdata.c:ctype_check:
  414|   121k|{
  415|   121k|  UNUSED(cts);
  ------------------
  |  |   91|   121k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  416|   121k|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|   121k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   121k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   242k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 121k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 121k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   121k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  417|   121k|  return id;
  418|   121k|}
lj_cdata.c:ctype_raw:
  440|   121k|{
  441|   121k|  CType *ct = ctype_get(cts, id);
  442|   121k|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|   121k|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|   121k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|   121k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 121k]
  |  |  ------------------
  ------------------
  443|   121k|  return ct;
  444|   121k|}
lj_cdata.c:ctype_get:
  422|   121k|{
  423|   121k|  return &cts->tab[ctype_check(cts, id)];
  424|   121k|}
lj_cparse.c:ctype_raw:
  440|  2.24k|{
  441|  2.24k|  CType *ct = ctype_get(cts, id);
  442|  2.24k|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|  2.24k|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|  2.24k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  2.24k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 2.24k]
  |  |  ------------------
  ------------------
  443|  2.24k|  return ct;
  444|  2.24k|}
lj_cparse.c:ctype_child:
  431|  2.80k|{
  432|  2.80k|  lj_assertCTS(!(ctype_isvoid(ct->info) || ctype_isstruct(ct->info) ||
  ------------------
  |  |  263|  2.80k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  2.80k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  11.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 2.80k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 2.80k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 2.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.80k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  433|  2.80k|	       ctype_isbitfield(ct->info)),
  434|  2.80k|	       "ctype %08x has no children", ct->info);
  435|  2.80k|  return ctype_get(cts, ctype_cid(ct->info));
  ------------------
  |  |  190|  2.80k|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|  2.80k|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  436|  2.80k|}
lj_cparse.c:ctype_rawchild:
  448|  2.80k|{
  449|  2.80k|  do { ct = ctype_child(cts, ct); } while (ctype_isattrib(ct->info));
  ------------------
  |  |  209|  2.80k|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|  2.80k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  2.80k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 2.80k]
  |  |  ------------------
  ------------------
  450|  2.80k|  return ct;
  451|  2.80k|}
lj_cparse.c:ctype_get:
  422|  18.7k|{
  423|  18.7k|  return &cts->tab[ctype_check(cts, id)];
  424|  18.7k|}
lj_cparse.c:ctype_check:
  414|  18.7k|{
  415|  18.7k|  UNUSED(cts);
  ------------------
  |  |   91|  18.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  416|  18.7k|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|  18.7k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  18.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  37.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 18.7k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 18.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  18.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  417|  18.7k|  return id;
  418|  18.7k|}
lj_cparse.c:ctype_setname:
  455|  3.24k|{
  456|       |  /* NOBARRIER: mark string as fixed -- the C type table is never collected. */
  457|  3.24k|  fixstring(s);
  ------------------
  |  |   45|  3.24k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  3.24k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  458|  3.24k|  setgcref(ct->name, obj2gco(s));
  ------------------
  |  |   72|  3.24k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  459|  3.24k|}

lj_debug_line:
  120|  7.26k|{
  121|  7.26k|  const void *lineinfo = proto_lineinfo(pt);
  ------------------
  |  |  426|  7.26k|#define proto_lineinfo(pt)	(mref((pt)->lineinfo, const void))
  |  |  ------------------
  |  |  |  |   36|  7.26k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  122|  7.26k|  if (pc <= pt->sizebc && lineinfo) {
  ------------------
  |  Branch (122:7): [True: 7.26k, False: 0]
  |  Branch (122:27): [True: 7.26k, False: 0]
  ------------------
  123|  7.26k|    BCLine first = pt->firstline;
  124|  7.26k|    if (pc == pt->sizebc) return first + pt->numline;
  ------------------
  |  Branch (124:9): [True: 0, False: 7.26k]
  ------------------
  125|  7.26k|    if (pc-- == 0) return first;
  ------------------
  |  Branch (125:9): [True: 0, False: 7.26k]
  ------------------
  126|  7.26k|    if (pt->numline < 256)
  ------------------
  |  Branch (126:9): [True: 7.24k, False: 20]
  ------------------
  127|  7.24k|      return first + (BCLine)((const uint8_t *)lineinfo)[pc];
  128|     20|    else if (pt->numline < 65536)
  ------------------
  |  Branch (128:14): [True: 20, False: 0]
  ------------------
  129|     20|      return first + (BCLine)((const uint16_t *)lineinfo)[pc];
  130|      0|    else
  131|      0|      return first + (BCLine)((const uint32_t *)lineinfo)[pc];
  132|  7.26k|  }
  133|      0|  return 0;
  134|  7.26k|}
lj_debug_shortname:
  329|  14.0k|{
  330|  14.0k|  const char *src = strdata(str);
  ------------------
  |  |  316|  14.0k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  331|  14.0k|  if (*src == '=') {
  ------------------
  |  Branch (331:7): [True: 0, False: 14.0k]
  ------------------
  332|      0|    strncpy(out, src+1, LUA_IDSIZE);  /* Remove first char. */
  ------------------
  |  |  107|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  333|      0|    out[LUA_IDSIZE-1] = '\0';  /* Ensures null termination. */
  ------------------
  |  |  107|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  334|  14.0k|  } else if (*src == '@') {  /* Output "source", or "...source". */
  ------------------
  |  Branch (334:14): [True: 0, False: 14.0k]
  ------------------
  335|      0|    size_t len = str->len-1;
  336|      0|    src++;  /* Skip the `@' */
  337|      0|    if (len >= LUA_IDSIZE) {
  ------------------
  |  |  107|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  |  Branch (337:9): [True: 0, False: 0]
  ------------------
  338|      0|      src += len-(LUA_IDSIZE-4);  /* Get last part of file name. */
  ------------------
  |  |  107|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  339|      0|      *out++ = '.'; *out++ = '.'; *out++ = '.';
  340|      0|    }
  341|      0|    strcpy(out, src);
  342|  14.0k|  } else {  /* Output [string "string"] or [builtin:name]. */
  343|  14.0k|    size_t len;  /* Length, up to first control char. */
  344|  70.0k|    for (len = 0; len < LUA_IDSIZE-12; len++)
  ------------------
  |  |  107|  70.0k|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  |  Branch (344:19): [True: 70.0k, False: 0]
  ------------------
  345|  70.0k|      if (((const unsigned char *)src)[len] < ' ') break;
  ------------------
  |  Branch (345:11): [True: 14.0k, False: 56.0k]
  ------------------
  346|  14.0k|    strcpy(out, line == ~(BCLine)0 ? "[builtin:" : "[string \""); out += 9;
  ------------------
  |  Branch (346:17): [True: 0, False: 14.0k]
  ------------------
  347|  14.0k|    if (src[len] != '\0') {  /* Must truncate? */
  ------------------
  |  Branch (347:9): [True: 0, False: 14.0k]
  ------------------
  348|      0|      if (len > LUA_IDSIZE-15) len = LUA_IDSIZE-15;
  ------------------
  |  |  107|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
                    if (len > LUA_IDSIZE-15) len = LUA_IDSIZE-15;
  ------------------
  |  |  107|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  |  Branch (348:11): [True: 0, False: 0]
  ------------------
  349|      0|      strncpy(out, src, len); out += len;
  350|      0|      strcpy(out, "..."); out += 3;
  351|  14.0k|    } else {
  352|  14.0k|      strcpy(out, src); out += len;
  353|  14.0k|    }
  354|  14.0k|    strcpy(out, line == ~(BCLine)0 ? "]" : "\"]");
  ------------------
  |  Branch (354:17): [True: 0, False: 14.0k]
  ------------------
  355|  14.0k|  }
  356|  14.0k|}
lj_debug_addloc:
  361|  7.26k|{
  362|  7.26k|  if (frame) {
  ------------------
  |  Branch (362:7): [True: 7.26k, False: 0]
  ------------------
  363|  7.26k|    GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|  7.26k|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|  7.26k|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|  7.26k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|  7.26k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|  7.26k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  364|  7.26k|    if (isluafunc(fn)) {
  ------------------
  |  |  476|  7.26k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  7.26k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 7.26k, False: 0]
  |  |  ------------------
  ------------------
  365|  7.26k|      BCLine line = debug_frameline(L, fn, nextframe);
  366|  7.26k|      if (line >= 0) {
  ------------------
  |  Branch (366:11): [True: 7.26k, False: 0]
  ------------------
  367|  7.26k|	GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|  7.26k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|  7.26k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  7.26k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  7.26k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 7.26k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  7.26k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  368|      0|	char buf[LUA_IDSIZE];
  369|  7.26k|	lj_debug_shortname(buf, proto_chunkname(pt), pt->firstline);
  ------------------
  |  |  424|  7.26k|#define proto_chunkname(pt)	(strref((pt)->chunkname))
  |  |  ------------------
  |  |  |  |  315|  7.26k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|  7.26k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  7.26k|	lj_strfmt_pushf(L, "%s:%d: %s", buf, line, msg);
  371|  7.26k|	return;
  372|  7.26k|      }
  373|  7.26k|    }
  374|  7.26k|  }
  375|      0|  lj_strfmt_pushf(L, "%s", msg);
  376|      0|}
lj_debug.c:debug_framepc:
   54|  7.26k|{
   55|  7.26k|  const BCIns *ins;
   56|  7.26k|  GCproto *pt;
   57|  7.26k|  BCPos pos;
   58|  7.26k|  lj_assertL(fn->c.gct == ~LJ_TFUNC || fn->c.gct == ~LJ_TTHREAD,
  ------------------
  |  |  365|  7.26k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  7.26k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 7.26k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.26k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   59|  7.26k|	     "function or frame expected");
   60|  7.26k|  if (!isluafunc(fn)) {  /* Cannot derive a PC for non-Lua functions. */
  ------------------
  |  |  476|  7.26k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  7.26k|#define FF_LUA		0
  |  |  ------------------
  ------------------
  |  Branch (60:7): [True: 0, False: 7.26k]
  ------------------
   61|      0|    return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
   62|  7.26k|  } else if (nextframe == NULL) {  /* Lua function on top. */
  ------------------
  |  Branch (62:14): [True: 0, False: 7.26k]
  ------------------
   63|      0|    void *cf = cframe_raw(L->cframe);
  ------------------
  |  |  294|      0|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|      0|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|      0|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|      0|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|      0|    if (cf == NULL || (char *)cframe_pc(cf) == (char *)cframe_L(cf))
  ------------------
  |  |  287|      0|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  if (cf == NULL || (char *)cframe_pc(cf) == (char *)cframe_L(cf))
  ------------------
  |  |  285|      0|  (&gcref(*(GCRef *)(((char *)(cf))+CFRAME_OFS_L))->th)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (64:9): [True: 0, False: 0]
  |  Branch (64:23): [True: 0, False: 0]
  ------------------
   65|      0|      return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
   66|      0|    ins = cframe_pc(cf);  /* Only happens during error/hook handling. */
  ------------------
  |  |  287|      0|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   67|      0|    if (!ins) return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|  7.26k|  } else {
   69|  7.26k|    if (frame_islua(nextframe)) {
  ------------------
  |  |   77|  7.26k|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|  7.26k|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  7.26k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  7.26k|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 7.26k, False: 0]
  |  |  ------------------
  ------------------
   70|  7.26k|      ins = frame_pc(nextframe);
  ------------------
  |  |   48|  7.26k|#define frame_pc(f)		((const BCIns *)frame_ftsz(f))
  |  |  ------------------
  |  |  |  |   47|  7.26k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  ------------------
   71|  7.26k|    } else if (frame_iscont(nextframe)) {
  ------------------
  |  |   79|      0|#define frame_iscont(f)		(frame_typep(f) == FRAME_CONT)
  |  |  ------------------
  |  |  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   72|      0|      ins = frame_contpc(nextframe);
  ------------------
  |  |   90|      0|#define frame_contpc(f)		(frame_pc((f)-2))
  |  |  ------------------
  |  |  |  |   48|      0|#define frame_pc(f)		((const BCIns *)frame_ftsz(f))
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   73|      0|    } else {
   74|       |      /* Lua function below errfunc/gc/hook: find cframe to get the PC. */
   75|      0|      void *cf = cframe_raw(L->cframe);
  ------------------
  |  |  294|      0|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|      0|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|      0|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|      0|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   76|      0|      TValue *f = L->base-1;
   77|      0|      for (;;) {
   78|      0|	if (cf == NULL)
  ------------------
  |  Branch (78:6): [True: 0, False: 0]
  ------------------
   79|      0|	  return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
   80|      0|	while (cframe_nres(cf) < 0) {
  ------------------
  |  |  280|      0|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|      0|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
  |  Branch (80:9): [True: 0, False: 0]
  ------------------
   81|      0|	  if (f >= restorestack(L, -cframe_nres(cf)))
  ------------------
  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (81:8): [True: 0, False: 0]
  ------------------
   82|      0|	    break;
   83|      0|	  cf = cframe_raw(cframe_prev(cf));
  ------------------
  |  |  294|      0|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|      0|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|      0|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|      0|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   84|      0|	  if (cf == NULL)
  ------------------
  |  Branch (84:8): [True: 0, False: 0]
  ------------------
   85|      0|	    return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
   86|      0|	}
   87|      0|	if (f < nextframe)
  ------------------
  |  Branch (87:6): [True: 0, False: 0]
  ------------------
   88|      0|	  break;
   89|      0|	if (frame_islua(f)) {
  ------------------
  |  |   77|      0|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   90|      0|	  f = frame_prevl(f);
  ------------------
  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
   91|      0|	} else {
   92|      0|	  if (frame_isc(f) || (frame_iscont(f) && frame_iscont_fficb(f)))
  ------------------
  |  |   78|      0|#define frame_isc(f)		(frame_type(f) == FRAME_C)
  |  |  ------------------
  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (78:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	  if (frame_isc(f) || (frame_iscont(f) && frame_iscont_fficb(f)))
  ------------------
  |  |   79|      0|#define frame_iscont(f)		(frame_typep(f) == FRAME_CONT)
  |  |  ------------------
  |  |  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	  if (frame_isc(f) || (frame_iscont(f) && frame_iscont_fficb(f)))
  ------------------
  |  |  106|      0|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|      0|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|      0|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   93|      0|	    cf = cframe_raw(cframe_prev(cf));
  ------------------
  |  |  294|      0|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|      0|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|      0|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|      0|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   94|      0|	  f = frame_prevd(f);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   95|      0|	}
   96|      0|      }
   97|      0|      ins = cframe_pc(cf);
  ------------------
  |  |  287|      0|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   98|      0|      if (!ins) return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  |  Branch (98:11): [True: 0, False: 0]
  ------------------
   99|      0|    }
  100|  7.26k|  }
  101|  7.26k|  pt = funcproto(fn);
  ------------------
  |  |  480|  7.26k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|  7.26k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  7.26k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  7.26k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 7.26k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  7.26k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  102|  7.26k|  pos = proto_bcpos(pt, ins) - 1;
  ------------------
  |  |  421|  7.26k|#define proto_bcpos(pt, pc)	((BCPos)((pc) - proto_bc(pt)))
  |  |  ------------------
  |  |  |  |  420|  7.26k|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  |  |  ------------------
  ------------------
  103|  7.26k|#if LJ_HASJIT
  104|  7.26k|  if (pos > pt->sizebc) {  /* Undo the effects of lj_trace_exit for JLOOP. */
  ------------------
  |  Branch (104:7): [True: 0, False: 7.26k]
  ------------------
  105|      0|    if (bc_isret(bc_op(ins[-1]))) {
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (105:9): [True: 0, False: 0]
  ------------------
  106|      0|      GCtrace *T = (GCtrace *)((char *)(ins-1) - offsetof(GCtrace, startins));
  107|      0|      pos = proto_bcpos(pt, mref(T->startpc, const BCIns));
  ------------------
  |  |  421|      0|#define proto_bcpos(pt, pc)	((BCPos)((pc) - proto_bc(pt)))
  |  |  ------------------
  |  |  |  |  420|      0|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  |  |  ------------------
  ------------------
  108|      0|    } else {
  109|      0|      pos = NO_BCPOS;  /* Punt in case of stack overflow for stitched trace. */
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  110|      0|    }
  111|      0|  }
  112|  7.26k|#endif
  113|  7.26k|  return pos;
  114|  7.26k|}
lj_debug.c:debug_frameline:
  138|  7.26k|{
  139|  7.26k|  BCPos pc = debug_framepc(L, fn, nextframe);
  140|  7.26k|  if (pc != NO_BCPOS) {
  ------------------
  |  |   50|  7.26k|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  |  Branch (140:7): [True: 7.26k, False: 0]
  ------------------
  141|  7.26k|    GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|  7.26k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|  7.26k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  7.26k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  7.26k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 7.26k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  7.26k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  142|  7.26k|    lj_assertL(pc <= pt->sizebc, "PC out of range");
  ------------------
  |  |  365|  7.26k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  7.26k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7.26k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.26k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  143|  7.26k|    return lj_debug_line(pt, pc);
  144|  7.26k|  }
  145|      0|  return -1;
  146|  7.26k|}

lj_str.c:lj_getu32:
  237|  27.3M|{
  238|  27.3M|  return ((const Unaligned32 *)p)->u;
  239|  27.3M|}

lj_dispatch_init:
   61|  17.8k|{
   62|  17.8k|  uint32_t i;
   63|  17.8k|  ASMFunction *disp = GG->dispatch;
   64|  1.60M|  for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|  1.60M|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (64:15): [True: 1.58M, False: 17.8k]
  ------------------
   65|  1.58M|    disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |   84|  1.58M|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  1.58M|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
                  disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  1.58M|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  1.58M|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   66|  1.17M|  for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|  17.8k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
                for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|  1.17M|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  1.17M|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (66:26): [True: 1.15M, False: 17.8k]
  ------------------
   67|  1.15M|    disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  1.15M|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  1.15M|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   68|       |  /* The JIT engine is off by default. luaopen_jit() turns it on. */
   69|  17.8k|  disp[BC_FORL] = disp[BC_IFORL];
   70|  17.8k|  disp[BC_ITERL] = disp[BC_IITERL];
   71|       |  /* Workaround for stable v2.1 bytecode. TODO: Replace with BC_IITERN. */
   72|  17.8k|  disp[BC_ITERN] = &lj_vm_IITERN;
   73|  17.8k|  disp[BC_LOOP] = disp[BC_ILOOP];
   74|  17.8k|  disp[BC_FUNCF] = disp[BC_IFUNCF];
   75|  17.8k|  disp[BC_FUNCV] = disp[BC_IFUNCV];
   76|  17.8k|  GG->g.bc_cfunc_ext = GG->g.bc_cfunc_int = BCINS_AD(BC_FUNCC, LUA_MINSTACK, 0);
  ------------------
  |  |   56|  17.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   77|  1.03M|  for (i = 0; i < GG_NUM_ASMFF; i++)
  ------------------
  |  |   82|  1.03M|#define GG_NUM_ASMFF	57
  ------------------
  |  Branch (77:15): [True: 1.01M, False: 17.8k]
  ------------------
   78|  1.01M|    GG->bcff[i] = BCINS_AD(BC__MAX+i, 0, 0);
  ------------------
  |  |   56|  1.01M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   79|       |#if LJ_TARGET_MIPS
   80|       |  memcpy(GG->got, dispatch_got, LJ_GOT__MAX*sizeof(ASMFunction *));
   81|       |#endif
   82|  17.8k|}
lj_dispatch_init_hotcount:
   87|  17.8k|{
   88|  17.8k|  int32_t hotloop = G2J(g)->param[JIT_P_hotloop];
  ------------------
  |  |  116|  17.8k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  17.8k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  17.8k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   89|  17.8k|  HotCount start = (HotCount)(hotloop*HOTCOUNT_LOOP - 1);
  ------------------
  |  |   78|  17.8k|#define HOTCOUNT_LOOP		2
  ------------------
   90|  17.8k|  HotCount *hotcount = G2GG(g)->hotcount;
  ------------------
  |  |  112|  17.8k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|  17.8k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
   91|  17.8k|  uint32_t i;
   92|  1.15M|  for (i = 0; i < HOTCOUNT_SIZE; i++)
  ------------------
  |  |   74|  1.15M|#define HOTCOUNT_SIZE		64
  ------------------
  |  Branch (92:15): [True: 1.14M, False: 17.8k]
  ------------------
   93|  1.14M|    hotcount[i] = start;
   94|  17.8k|}
lj_dispatch_update:
  107|  35.6k|{
  108|  35.6k|  uint8_t oldmode = g->dispatchmode;
  109|  35.6k|  uint8_t mode = 0;
  110|  35.6k|#if LJ_HASJIT
  111|  35.6k|  mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  116|  35.6k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  35.6k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  35.6k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |   16|  35.6k|#define JIT_F_ON		0x00000001
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  101|  17.8k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (111:11): [True: 17.8k, False: 17.8k]
  ------------------
  112|  35.6k|  mode |= G2J(g)->state != LJ_TRACE_IDLE ?
  ------------------
  |  |  116|  35.6k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  35.6k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  35.6k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (112:11): [True: 0, False: 35.6k]
  ------------------
  113|  35.6k|	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  114|  35.6k|#endif
  115|  35.6k|#if LJ_HASPROFILE
  116|  35.6k|  mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  677|  35.6k|#define HOOK_PROFILE		0x80
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (116:11): [True: 0, False: 35.6k]
  ------------------
  117|  35.6k|#endif
  118|  35.6k|  mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  325|  35.6k|#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
  |  |  ------------------
  |  |  |  |  315|  35.6k|#define LUA_HOOKLINE	2
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  326|  35.6k|#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
  |  |  ------------------
  |  |  |  |  316|  35.6k|#define LUA_HOOKCOUNT	3
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (118:11): [True: 0, False: 35.6k]
  ------------------
  119|  35.6k|  mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |  323|  35.6k|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|  35.6k|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (119:11): [True: 0, False: 35.6k]
  ------------------
  120|  35.6k|  mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |  324|  35.6k|#define LUA_MASKRET	(1 << LUA_HOOKRET)
  |  |  ------------------
  |  |  |  |  314|  35.6k|#define LUA_HOOKRET	1
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (120:11): [True: 0, False: 35.6k]
  ------------------
  121|  35.6k|  if (oldmode != mode) {  /* Mode changed? */
  ------------------
  |  Branch (121:7): [True: 35.6k, False: 0]
  ------------------
  122|  35.6k|    ASMFunction *disp = G2GG(g)->dispatch;
  ------------------
  |  |  112|  35.6k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|  35.6k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  123|  35.6k|    ASMFunction f_forl, f_iterl, f_itern, f_loop, f_funcf, f_funcv;
  124|  35.6k|    g->dispatchmode = mode;
  125|       |
  126|       |    /* Hotcount if JIT is on, but not while recording. */
  127|  35.6k|    if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|  35.6k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  102|  35.6k|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|  35.6k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (127:9): [True: 17.8k, False: 17.8k]
  ------------------
  128|  17.8k|      f_forl = makeasmfunc(lj_bc_ofs[BC_FORL]);
  ------------------
  |  |  114|  17.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  17.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  129|  17.8k|      f_iterl = makeasmfunc(lj_bc_ofs[BC_ITERL]);
  ------------------
  |  |  114|  17.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  17.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  130|  17.8k|      f_itern = makeasmfunc(lj_bc_ofs[BC_ITERN]);
  ------------------
  |  |  114|  17.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  17.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  131|  17.8k|      f_loop = makeasmfunc(lj_bc_ofs[BC_LOOP]);
  ------------------
  |  |  114|  17.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  17.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  132|  17.8k|      f_funcf = makeasmfunc(lj_bc_ofs[BC_FUNCF]);
  ------------------
  |  |  114|  17.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  17.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  133|  17.8k|      f_funcv = makeasmfunc(lj_bc_ofs[BC_FUNCV]);
  ------------------
  |  |  114|  17.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  17.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  134|  17.8k|    } else {  /* Otherwise use the non-hotcounting instructions. */
  135|  17.8k|      f_forl = disp[GG_LEN_DDISP+BC_IFORL];
  ------------------
  |  |   84|  17.8k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  17.8k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  136|  17.8k|      f_iterl = disp[GG_LEN_DDISP+BC_IITERL];
  ------------------
  |  |   84|  17.8k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  17.8k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  137|  17.8k|      f_itern = &lj_vm_IITERN;
  138|  17.8k|      f_loop = disp[GG_LEN_DDISP+BC_ILOOP];
  ------------------
  |  |   84|  17.8k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  17.8k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  139|  17.8k|      f_funcf = makeasmfunc(lj_bc_ofs[BC_IFUNCF]);
  ------------------
  |  |  114|  17.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  17.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  140|  17.8k|      f_funcv = makeasmfunc(lj_bc_ofs[BC_IFUNCV]);
  ------------------
  |  |  114|  17.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  17.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  141|  17.8k|    }
  142|       |    /* Init static counting instruction dispatch first (may be copied below). */
  143|  35.6k|    disp[GG_LEN_DDISP+BC_FORL] = f_forl;
  ------------------
  |  |   84|  35.6k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  35.6k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  144|  35.6k|    disp[GG_LEN_DDISP+BC_ITERL] = f_iterl;
  ------------------
  |  |   84|  35.6k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  35.6k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  145|  35.6k|    disp[GG_LEN_DDISP+BC_ITERN] = f_itern;
  ------------------
  |  |   84|  35.6k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  35.6k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  146|  35.6k|    disp[GG_LEN_DDISP+BC_LOOP] = f_loop;
  ------------------
  |  |   84|  35.6k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  35.6k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  147|       |
  148|       |    /* Set dynamic instruction dispatch. */
  149|  35.6k|    if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  103|  35.6k|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  102|  35.6k|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  100|  35.6k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (149:9): [True: 0, False: 35.6k]
  ------------------
  150|       |      /* Need to update the whole table. */
  151|      0|      if (!(mode & DISPMODE_INS)) {  /* No ins dispatch? */
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (151:11): [True: 0, False: 0]
  ------------------
  152|       |	/* Copy static dispatch table to dynamic dispatch table. */
  153|      0|	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
              	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  154|       |	/* Overwrite with dynamic return dispatch. */
  155|      0|	if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (155:6): [True: 0, False: 0]
  ------------------
  156|      0|	  disp[BC_RETM] = lj_vm_rethook;
  157|      0|	  disp[BC_RET] = lj_vm_rethook;
  158|      0|	  disp[BC_RET0] = lj_vm_rethook;
  159|      0|	  disp[BC_RET1] = lj_vm_rethook;
  160|      0|	}
  161|      0|      } else {
  162|       |	/* The recording dispatch also checks for hooks. */
  163|      0|	ASMFunction f = (mode & DISPMODE_PROF) ? lj_vm_profhook :
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
  |  Branch (163:18): [True: 0, False: 0]
  ------------------
  164|      0|			(mode & DISPMODE_REC) ? lj_vm_record : lj_vm_inshook;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
  |  Branch (164:4): [True: 0, False: 0]
  ------------------
  165|      0|	uint32_t i;
  166|      0|	for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (166:14): [True: 0, False: 0]
  ------------------
  167|      0|	  disp[i] = f;
  168|      0|      }
  169|  35.6k|    } else if (!(mode & DISPMODE_INS)) {
  ------------------
  |  |  100|  35.6k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (169:16): [True: 35.6k, False: 0]
  ------------------
  170|       |      /* Otherwise set dynamic counting ins. */
  171|  35.6k|      disp[BC_FORL] = f_forl;
  172|  35.6k|      disp[BC_ITERL] = f_iterl;
  173|  35.6k|      disp[BC_ITERN] = f_itern;
  174|  35.6k|      disp[BC_LOOP] = f_loop;
  175|       |      /* Set dynamic return dispatch. */
  176|  35.6k|      if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|  35.6k|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (176:11): [True: 0, False: 35.6k]
  ------------------
  177|      0|	disp[BC_RETM] = lj_vm_rethook;
  178|      0|	disp[BC_RET] = lj_vm_rethook;
  179|      0|	disp[BC_RET0] = lj_vm_rethook;
  180|      0|	disp[BC_RET1] = lj_vm_rethook;
  181|  35.6k|      } else {
  182|  35.6k|	disp[BC_RETM] = disp[GG_LEN_DDISP+BC_RETM];
  ------------------
  |  |   84|  35.6k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  35.6k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  183|  35.6k|	disp[BC_RET] = disp[GG_LEN_DDISP+BC_RET];
  ------------------
  |  |   84|  35.6k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  35.6k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  184|  35.6k|	disp[BC_RET0] = disp[GG_LEN_DDISP+BC_RET0];
  ------------------
  |  |   84|  35.6k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  35.6k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  185|  35.6k|	disp[BC_RET1] = disp[GG_LEN_DDISP+BC_RET1];
  ------------------
  |  |   84|  35.6k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  35.6k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  186|  35.6k|      }
  187|  35.6k|    }
  188|       |
  189|       |    /* Set dynamic call dispatch. */
  190|  35.6k|    if ((oldmode ^ mode) & DISPMODE_CALL) {  /* Update the whole table? */
  ------------------
  |  |   98|  35.6k|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (190:9): [True: 0, False: 35.6k]
  ------------------
  191|      0|      uint32_t i;
  192|      0|      if ((mode & DISPMODE_CALL) == 0) {  /* No call hooks? */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (192:11): [True: 0, False: 0]
  ------------------
  193|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (193:25): [True: 0, False: 0]
  ------------------
  194|      0|	  disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  195|      0|      } else {
  196|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (196:25): [True: 0, False: 0]
  ------------------
  197|      0|	  disp[i] = lj_vm_callhook;
  198|      0|      }
  199|      0|    }
  200|  35.6k|    if (!(mode & DISPMODE_CALL)) {  /* Overwrite dynamic counting ins. */
  ------------------
  |  |   98|  35.6k|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (200:9): [True: 35.6k, False: 0]
  ------------------
  201|  35.6k|      disp[BC_FUNCF] = f_funcf;
  202|  35.6k|      disp[BC_FUNCV] = f_funcv;
  203|  35.6k|    }
  204|       |
  205|  35.6k|#if LJ_HASJIT
  206|       |    /* Reset hotcounts for JIT off to on transition. */
  207|  35.6k|    if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|  35.6k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|  17.8k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (207:9): [True: 17.8k, False: 17.8k]
  |  Branch (207:34): [True: 17.8k, False: 0]
  ------------------
  208|  17.8k|      lj_dispatch_init_hotcount(g);
  209|  35.6k|#endif
  210|  35.6k|  }
  211|  35.6k|}

lj_err_unwind_dwarf:
  439|  42.5k|{
  440|  42.5k|  void *cf;
  441|  42.5k|  lua_State *L;
  442|  42.5k|  if (version != 1)
  ------------------
  |  Branch (442:7): [True: 0, False: 42.5k]
  ------------------
  443|      0|    return _URC_FATAL_PHASE1_ERROR;
  ------------------
  |  |  403|      0|#define _URC_FATAL_PHASE1_ERROR	3
  ------------------
  444|  42.5k|  cf = (void *)_Unwind_GetCFA(ctx);
  445|  42.5k|  L = cframe_L(cf);
  ------------------
  |  |  285|  42.5k|  (&gcref(*(GCRef *)(((char *)(cf))+CFRAME_OFS_L))->th)
  |  |  ------------------
  |  |  |  |   67|  42.5k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  446|  42.5k|  if ((actions & _UA_SEARCH_PHASE)) {
  ------------------
  |  |  431|  42.5k|#define _UA_SEARCH_PHASE	1
  ------------------
  |  Branch (446:7): [True: 21.2k, False: 21.2k]
  ------------------
  447|  21.2k|#if LJ_UNWIND_EXT
  448|  21.2k|    if (err_unwind(L, cf, 0) == NULL)
  ------------------
  |  Branch (448:9): [True: 0, False: 21.2k]
  ------------------
  449|      0|      return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  406|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  450|  21.2k|#endif
  451|  21.2k|    if (!LJ_UEXCLASS_CHECK(uexclass)) {
  ------------------
  |  |  411|  21.2k|#define LJ_UEXCLASS_CHECK(cl)	(((cl) ^ LJ_UEXCLASS) <= 0xff)
  |  |  ------------------
  |  |  |  |  409|  21.2k|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  ------------------
  |  Branch (451:9): [True: 0, False: 21.2k]
  ------------------
  452|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_ERRCPP));
  453|      0|    }
  454|  21.2k|    return _URC_HANDLER_FOUND;
  ------------------
  |  |  404|  21.2k|#define _URC_HANDLER_FOUND	6
  ------------------
  455|  21.2k|  }
  456|  21.2k|  if ((actions & _UA_CLEANUP_PHASE)) {
  ------------------
  |  |  432|  21.2k|#define _UA_CLEANUP_PHASE	2
  ------------------
  |  Branch (456:7): [True: 21.2k, False: 0]
  ------------------
  457|  21.2k|    int errcode;
  458|  21.2k|    if (LJ_UEXCLASS_CHECK(uexclass)) {
  ------------------
  |  |  411|  21.2k|#define LJ_UEXCLASS_CHECK(cl)	(((cl) ^ LJ_UEXCLASS) <= 0xff)
  |  |  ------------------
  |  |  |  |  409|  21.2k|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  |  |  |  Branch (411:31): [True: 21.2k, False: 0]
  |  |  ------------------
  ------------------
  459|  21.2k|      errcode = LJ_UEXCLASS_ERRCODE(uexclass);
  ------------------
  |  |  412|  21.2k|#define LJ_UEXCLASS_ERRCODE(cl)	((int)((cl) & 0xff))
  ------------------
  460|  21.2k|    } else {
  461|      0|      if ((actions & _UA_HANDLER_FRAME))
  ------------------
  |  |  433|      0|#define _UA_HANDLER_FRAME	4
  ------------------
  |  Branch (461:11): [True: 0, False: 0]
  ------------------
  462|      0|	_Unwind_DeleteException(uex);
  463|      0|      errcode = LUA_ERRRUN;
  ------------------
  |  |   45|      0|#define LUA_ERRRUN	2
  ------------------
  464|      0|    }
  465|  21.2k|#if LJ_UNWIND_EXT
  466|  21.2k|    cf = err_unwind(L, cf, errcode);
  467|  21.2k|    if ((actions & _UA_FORCE_UNWIND)) {
  ------------------
  |  |  434|  21.2k|#define _UA_FORCE_UNWIND	8
  ------------------
  |  Branch (467:9): [True: 0, False: 21.2k]
  ------------------
  468|      0|      return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  406|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  469|  21.2k|    } else if (cf) {
  ------------------
  |  Branch (469:16): [True: 21.2k, False: 0]
  ------------------
  470|  21.2k|      ASMFunction ip;
  471|  21.2k|      _Unwind_SetGR(ctx, LJ_TARGET_EHRETREG, errcode);
  ------------------
  |  |  206|  21.2k|#define LJ_TARGET_EHRETREG	0
  ------------------
  472|  21.2k|      ip = cframe_unwind_ff(cf) ? lj_vm_unwind_ff_eh : lj_vm_unwind_c_eh;
  ------------------
  |  |  293|  21.2k|#define cframe_unwind_ff(cf)	((intptr_t)(cf) & CFRAME_UNWIND_FF)
  |  |  ------------------
  |  |  |  |  276|  21.2k|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  ------------------
  |  |  |  Branch (293:30): [True: 0, False: 21.2k]
  |  |  ------------------
  ------------------
  473|  21.2k|      _Unwind_SetIP(ctx, (uintptr_t)lj_ptr_strip(ip));
  ------------------
  |  | 1059|  21.2k|#define lj_ptr_strip(ptr) (ptr)
  ------------------
  474|  21.2k|      return _URC_INSTALL_CONTEXT;
  ------------------
  |  |  405|  21.2k|#define _URC_INSTALL_CONTEXT	7
  ------------------
  475|  21.2k|    }
  476|      0|#if LJ_TARGET_X86ORX64
  477|      0|    else if ((actions & _UA_HANDLER_FRAME)) {
  ------------------
  |  |  433|      0|#define _UA_HANDLER_FRAME	4
  ------------------
  |  Branch (477:14): [True: 0, False: 0]
  ------------------
  478|       |      /* Workaround for ancient libgcc bug. Still present in RHEL 5.5. :-/
  479|       |      ** Real fix: http://gcc.gnu.org/viewcvs/trunk/gcc/unwind-dw2.c?r1=121165&r2=124837&pathrev=153877&diff_format=h
  480|       |      */
  481|      0|      _Unwind_SetGR(ctx, LJ_TARGET_EHRETREG, errcode);
  ------------------
  |  |  206|      0|#define LJ_TARGET_EHRETREG	0
  ------------------
  482|      0|      _Unwind_SetIP(ctx, (uintptr_t)lj_vm_unwind_rethrow);
  483|      0|      return _URC_INSTALL_CONTEXT;
  ------------------
  |  |  405|      0|#define _URC_INSTALL_CONTEXT	7
  ------------------
  484|      0|    }
  485|  21.2k|#endif
  486|       |#else
  487|       |    /* This is not the proper way to escape from the unwinder. We get away with
  488|       |    ** it on non-x64 because the interpreter restores all callee-saved regs.
  489|       |    */
  490|       |    lj_err_throw(L, errcode);
  491|       |#if LJ_TARGET_X64
  492|       |#error "Broken build system -- only use the provided Makefiles!"
  493|       |#endif
  494|       |#endif
  495|  21.2k|  }
  496|      0|  return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  406|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  497|  21.2k|}
lj_err_verify:
  505|  17.8k|{
  506|  17.8k|#if !LJ_TARGET_OSX
  507|       |  /* Check disabled on MacOS due to brilliant software engineering at Apple. */
  508|  17.8k|  struct dwarf_eh_bases ehb;
  509|  17.8k|  lj_assertX(_Unwind_Find_FDE((void *)lj_err_throw, &ehb), "broken build: external frame unwinding enabled, but missing -funwind-tables");
  ------------------
  |  |  366|  17.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  510|  17.8k|#endif
  511|       |  /* Check disabled, because of broken Fedora/ARM64. See #722.
  512|       |  lj_assertX(_Unwind_Find_FDE((void *)_Unwind_RaiseException, &ehb), "broken build: external frame unwinding enabled, but system libraries have no unwind tables");
  513|       |  */
  514|  17.8k|}
lj_err_throw:
  769|  21.2k|{
  770|  21.2k|  global_State *g = G(L);
  ------------------
  |  |  705|  21.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  21.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  771|  21.2k|  lj_trace_abort(g);
  ------------------
  |  |   45|  21.2k|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|  21.2k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  21.2k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  21.2k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  772|  21.2k|  L->status = LUA_OK;
  ------------------
  |  |   43|  21.2k|#define LUA_OK		0
  ------------------
  773|  21.2k|#if LJ_UNWIND_EXT
  774|  21.2k|  err_raise_ext(g, errcode);
  775|       |  /*
  776|       |  ** A return from this function signals a corrupt C stack that cannot be
  777|       |  ** unwound. We have no choice but to call the panic function and exit.
  778|       |  **
  779|       |  ** Usually this is caused by a C function without unwind information.
  780|       |  ** This may happen if you've manually enabled LUAJIT_UNWIND_EXTERNAL
  781|       |  ** and forgot to recompile *every* non-C++ file with -funwind-tables.
  782|       |  */
  783|  21.2k|  if (G(L)->panic)
  ------------------
  |  |  705|  21.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  21.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (783:7): [True: 0, False: 21.2k]
  ------------------
  784|      0|    G(L)->panic(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  785|       |#else
  786|       |#if LJ_HASJIT
  787|       |  setmref(g->jit_base, NULL);
  788|       |#endif
  789|       |  {
  790|       |    void *cf = err_unwind(L, NULL, errcode);
  791|       |    if (cframe_unwind_ff(cf))
  792|       |      lj_vm_unwind_ff(cframe_raw(cf));
  793|       |    else
  794|       |      lj_vm_unwind_c(cframe_raw(cf), errcode);
  795|       |  }
  796|       |#endif
  797|  21.2k|  exit(EXIT_FAILURE);
  798|  21.2k|}
lj_err_str:
  802|  17.8k|{
  803|  17.8k|  return lj_str_newz(L, err2msg(em));
  ------------------
  |  |   27|  17.8k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  804|  17.8k|}
lj_err_run:
  880|  7.26k|{
  881|  7.26k|  ptrdiff_t ef = (LJ_HASJIT && tvref(G(L)->jit_base)) ? 0 : finderrfunc(L);
  ------------------
  |  |  578|  14.5k|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                ptrdiff_t ef = (LJ_HASJIT && tvref(G(L)->jit_base)) ? 0 : finderrfunc(L);
  ------------------
  |  |  217|  7.26k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  7.26k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 7.26k]
  |  |  ------------------
  ------------------
  882|  7.26k|  if (ef) {
  ------------------
  |  Branch (882:7): [True: 0, False: 7.26k]
  ------------------
  883|      0|    TValue *errfunc, *top;
  884|      0|    lj_state_checkstack(L, LUA_MINSTACK * 2);  /* Might raise new error. */
  ------------------
  |  |   88|      0|#define LUA_MINSTACK	20
  ------------------
  885|      0|    lj_trace_abort(G(L));
  ------------------
  |  |   45|      0|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  886|      0|    errfunc = restorestack(L, ef);
  ------------------
  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  887|      0|    top = L->top;
  888|      0|    if (!tvisfunc(errfunc) || L->status == LUA_ERRERR) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  ------------------
                  if (!tvisfunc(errfunc) || L->status == LUA_ERRERR) {
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  |  Branch (888:9): [True: 0, False: 0]
  |  Branch (888:31): [True: 0, False: 0]
  ------------------
  889|      0|      setstrV(L, top-1, lj_err_str(L, LJ_ERR_ERRERR));
  890|      0|      lj_err_throw(L, LUA_ERRERR);
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  891|      0|    }
  892|      0|    L->status = LUA_ERRERR;
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  893|      0|    copyTV(L, top+LJ_FR2, top-1);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  894|      0|    copyTV(L, top-1, errfunc);
  895|      0|    if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  896|      0|    L->top = top+1;
  897|      0|    lj_vm_call(L, top, 1+1);  /* Stack: |errfunc|msg| -> |msg| */
  898|      0|  }
  899|  7.26k|  lj_err_throw(L, LUA_ERRRUN);
  ------------------
  |  |   45|  7.26k|#define LUA_ERRRUN	2
  ------------------
  900|  7.26k|}
lj_err_lex:
  946|  6.74k|{
  947|  6.74k|  char buff[LUA_IDSIZE];
  948|  6.74k|  const char *msg;
  949|  6.74k|  lj_debug_shortname(buff, src, line);
  950|  6.74k|  msg = lj_strfmt_pushvf(L, err2msg(em), argp);
  ------------------
  |  |   21|  6.74k|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  951|  6.74k|  msg = lj_strfmt_pushf(L, "%s:%d: %s", buff, line, msg);
  952|  6.74k|  if (tok)
  ------------------
  |  Branch (952:7): [True: 6.62k, False: 121]
  ------------------
  953|  6.62k|    lj_strfmt_pushf(L, err2msg(LJ_ERR_XNEAR), msg, tok);
  ------------------
  |  |   21|  6.62k|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  954|  6.74k|  lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|  6.74k|#define LUA_ERRSYNTAX	3
  ------------------
  955|  6.74k|}
lj_err_callermsg:
 1003|  7.26k|{
 1004|  7.26k|  TValue *frame = NULL, *pframe = NULL;
 1005|  7.26k|  if (!(LJ_HASJIT && tvref(G(L)->jit_base))) {
  ------------------
  |  |  578|  14.5k|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (!(LJ_HASJIT && tvref(G(L)->jit_base))) {
  ------------------
  |  |  217|  7.26k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  7.26k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 7.26k]
  |  |  ------------------
  ------------------
 1006|  7.26k|    frame = L->base-1;
 1007|  7.26k|    if (frame_islua(frame)) {
  ------------------
  |  |   77|  7.26k|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|  7.26k|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  7.26k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  7.26k|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 7.26k, False: 0]
  |  |  ------------------
  ------------------
 1008|  7.26k|      pframe = frame_prevl(frame);
  ------------------
  |  |  108|  7.26k|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|  7.26k|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|  7.26k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
 1009|  7.26k|    } else if (frame_iscont(frame)) {
  ------------------
  |  |   79|      0|#define frame_iscont(f)		(frame_typep(f) == FRAME_CONT)
  |  |  ------------------
  |  |  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1010|      0|      if (frame_iscont_fficb(frame)) {
  ------------------
  |  |  106|      0|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|      0|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|      0|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1011|      0|	pframe = frame;
 1012|      0|	frame = NULL;
 1013|      0|      } else {
 1014|      0|	pframe = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1015|      0|#if LJ_HASFFI
 1016|       |	/* Remove frame for FFI metamethods. */
 1017|      0|	if (frame_func(frame)->c.ffid >= FF_ffi_meta___index &&
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1017:6): [True: 0, False: 0]
  ------------------
 1018|      0|	    frame_func(frame)->c.ffid <= FF_ffi_meta___tostring) {
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1018:6): [True: 0, False: 0]
  ------------------
 1019|      0|	  L->base = pframe+1;
 1020|      0|	  L->top = frame;
 1021|      0|	  setcframe_pc(cframe_raw(L->cframe), frame_contpc(frame));
  ------------------
  |  |  291|      0|  (setmref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), (pc)))
  |  |  ------------------
  |  |  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
 1022|      0|	}
 1023|      0|#endif
 1024|      0|      }
 1025|      0|    }
 1026|  7.26k|  }
 1027|  7.26k|  lj_debug_addloc(L, msg, pframe, frame);
 1028|  7.26k|  lj_err_run(L);
 1029|  7.26k|}
lj_err.c:err_unwind:
  110|  42.5k|{
  111|  42.5k|  TValue *frame = L->base-1;
  112|  42.5k|  void *cf = L->cframe;
  113|  71.6k|  while (cf) {
  ------------------
  |  Branch (113:10): [True: 71.6k, False: 0]
  ------------------
  114|  71.6k|    int32_t nres = cframe_nres(cframe_raw(cf));
  ------------------
  |  |  280|  71.6k|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|  71.6k|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
  115|  71.6k|    if (nres < 0) {  /* C frame without Lua frame? */
  ------------------
  |  Branch (115:9): [True: 28.0k, False: 43.5k]
  ------------------
  116|  28.0k|      TValue *top = restorestack(L, -nres);
  ------------------
  |  |   15|  28.0k|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|  28.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  117|  28.0k|      if (frame < top) {  /* Frame reached? */
  ------------------
  |  Branch (117:11): [True: 28.0k, False: 0]
  ------------------
  118|  28.0k|	if (errcode) {
  ------------------
  |  Branch (118:6): [True: 14.0k, False: 14.0k]
  ------------------
  119|  14.0k|	  L->base = frame+1;
  120|  14.0k|	  L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|  14.0k|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|  14.0k|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  121|  14.0k|	  unwindstack(L, top);
  122|  14.0k|	}
  123|  28.0k|	return cf;
  124|  28.0k|      }
  125|  28.0k|    }
  126|  43.5k|    if (frame <= tvref(L->stack)+LJ_FR2)
  ------------------
  |  |  217|  43.5k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  43.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  if (frame <= tvref(L->stack)+LJ_FR2)
  ------------------
  |  |  569|  43.5k|#define LJ_FR2			1
  ------------------
  |  Branch (126:9): [True: 0, False: 43.5k]
  ------------------
  127|      0|      break;
  128|  43.5k|    switch (frame_typep(frame)) {
  ------------------
  |  |   76|  43.5k|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|  43.5k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|  43.5k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  43.5k|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  43.5k|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (76:25): [True: 0, False: 43.5k]
  |  |  ------------------
  ------------------
  129|      0|    case FRAME_LUA:  /* Lua frame. */
  ------------------
  |  Branch (129:5): [True: 0, False: 43.5k]
  ------------------
  130|  14.5k|    case FRAME_LUAP:
  ------------------
  |  Branch (130:5): [True: 14.5k, False: 29.0k]
  ------------------
  131|  14.5k|      frame = frame_prevl(frame);
  ------------------
  |  |  108|  14.5k|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|  14.5k|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|  14.5k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
  132|  14.5k|      break;
  133|      0|    case FRAME_C:  /* C frame. */
  ------------------
  |  Branch (133:5): [True: 0, False: 43.5k]
  ------------------
  134|      0|    unwind_c:
  135|      0|#if LJ_UNWIND_EXT
  136|      0|      if (errcode) {
  ------------------
  |  Branch (136:11): [True: 0, False: 0]
  ------------------
  137|      0|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|      0|	L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  139|      0|	unwindstack(L, frame - LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  140|      0|      } else if (cf != stopcf) {
  ------------------
  |  Branch (140:18): [True: 0, False: 0]
  ------------------
  141|      0|	cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  142|      0|	frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  143|      0|	break;
  144|      0|      }
  145|      0|      return NULL;  /* Continue unwinding. */
  146|       |#else
  147|       |      UNUSED(stopcf);
  148|       |      cf = cframe_prev(cf);
  149|       |      frame = frame_prevd(frame);
  150|       |      break;
  151|       |#endif
  152|  14.5k|    case FRAME_CP:  /* Protected C frame. */
  ------------------
  |  Branch (152:5): [True: 14.5k, False: 29.0k]
  ------------------
  153|  14.5k|      if (cframe_canyield(cf)) {  /* Resume? */
  ------------------
  |  |  292|  14.5k|#define cframe_canyield(cf)	((intptr_t)(cf) & CFRAME_RESUME)
  |  |  ------------------
  |  |  |  |  275|  14.5k|#define CFRAME_RESUME		1
  |  |  ------------------
  |  |  |  Branch (292:29): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
  154|      0|	if (errcode) {
  ------------------
  |  Branch (154:6): [True: 0, False: 0]
  ------------------
  155|      0|	  hook_leave(G(L));  /* Assumes nobody uses coroutines inside hooks. */
  ------------------
  |  |  683|      0|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|      0|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  156|      0|	  L->cframe = NULL;
  157|      0|	  L->status = (uint8_t)errcode;
  158|      0|	}
  159|      0|	return cf;
  160|      0|      }
  161|  14.5k|      if (errcode) {
  ------------------
  |  Branch (161:11): [True: 7.26k, False: 7.26k]
  ------------------
  162|  7.26k|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|  7.26k|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|  7.26k|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  7.26k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  7.26k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  7.26k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  7.26k|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  163|  7.26k|	L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|  7.26k|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|  7.26k|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  164|  7.26k|	unwindstack(L, frame - LJ_FR2);
  ------------------
  |  |  569|  7.26k|#define LJ_FR2			1
  ------------------
  165|  7.26k|      }
  166|  14.5k|      return cf;
  167|      0|    case FRAME_CONT:  /* Continuation frame. */
  ------------------
  |  Branch (167:5): [True: 0, False: 43.5k]
  ------------------
  168|      0|      if (frame_iscont_fficb(frame))
  ------------------
  |  |  106|      0|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|      0|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|      0|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  169|      0|	goto unwind_c;
  170|       |      /* fallthrough */
  171|  14.5k|    case FRAME_VARG:  /* Vararg frame. */
  ------------------
  |  Branch (171:5): [True: 14.5k, False: 29.0k]
  ------------------
  172|  14.5k|      frame = frame_prevd(frame);
  ------------------
  |  |  109|  14.5k|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|  14.5k|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  14.5k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  14.5k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  14.5k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  14.5k|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|  14.5k|      break;
  174|      0|    case FRAME_PCALL:  /* FF pcall() frame. */
  ------------------
  |  Branch (174:5): [True: 0, False: 43.5k]
  ------------------
  175|      0|    case FRAME_PCALLH:  /* FF pcall() frame inside hook. */
  ------------------
  |  Branch (175:5): [True: 0, False: 43.5k]
  ------------------
  176|      0|      if (errcode) {
  ------------------
  |  Branch (176:11): [True: 0, False: 0]
  ------------------
  177|      0|	global_State *g;
  178|      0|	if (errcode == LUA_YIELD) {
  ------------------
  |  |   44|      0|#define LUA_YIELD	1
  ------------------
  |  Branch (178:6): [True: 0, False: 0]
  ------------------
  179|      0|	  frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  180|      0|	  break;
  181|      0|	}
  182|      0|	g = G(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  183|      0|	setgcref(g->cur_L, obj2gco(L));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  184|      0|	if (frame_typep(frame) == FRAME_PCALL)
  ------------------
  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (184:6): [True: 0, False: 0]
  ------------------
  185|      0|	  hook_leave(g);
  ------------------
  |  |  683|      0|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|      0|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  186|      0|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  187|      0|	L->cframe = cf;
  188|      0|	unwindstack(L, L->base);
  189|      0|      }
  190|      0|      return (void *)((intptr_t)cf | CFRAME_UNWIND_FF);
  ------------------
  |  |  276|      0|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  ------------------
  191|  43.5k|    }
  192|  43.5k|  }
  193|       |  /* No C frame. */
  194|      0|  if (errcode) {
  ------------------
  |  Branch (194:7): [True: 0, False: 0]
  ------------------
  195|      0|    L->base = tvref(L->stack)+1+LJ_FR2;
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = tvref(L->stack)+1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  196|      0|    L->cframe = NULL;
  197|      0|    unwindstack(L, L->base);
  198|      0|    if (G(L)->panic)
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (198:9): [True: 0, False: 0]
  ------------------
  199|      0|      G(L)->panic(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  200|      0|    exit(EXIT_FAILURE);
  201|      0|  }
  202|      0|  return L;  /* Anything non-NULL will do. */
  203|      0|}
lj_err.c:unwindstack:
   99|  21.2k|{
  100|  21.2k|  lj_func_closeuv(L, top);
  101|  21.2k|  if (top < L->top-1) {
  ------------------
  |  Branch (101:7): [True: 21.2k, False: 0]
  ------------------
  102|  21.2k|    copyTV(L, top, L->top-1);
  103|  21.2k|    L->top = top+1;
  104|  21.2k|  }
  105|  21.2k|  lj_state_relimitstack(L);
  106|  21.2k|}
lj_err.c:err_raise_ext:
  754|  21.2k|{
  755|  21.2k|  memset(&static_uex, 0, sizeof(static_uex));
  756|  21.2k|  static_uex.ex.exclass = LJ_UEXCLASS_MAKE(errcode);
  ------------------
  |  |  410|  21.2k|#define LJ_UEXCLASS_MAKE(c)	(LJ_UEXCLASS | (uint64_t)(c))
  |  |  ------------------
  |  |  |  |  409|  21.2k|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  ------------------
  757|  21.2k|  static_uex.g = g;
  758|  21.2k|  _Unwind_RaiseException(&static_uex.ex);
  759|  21.2k|}
lj_err.c:finderrfunc:
  829|  7.26k|{
  830|  7.26k|  cTValue *frame = L->base-1, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  217|  7.26k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  7.26k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                cTValue *frame = L->base-1, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  569|  7.26k|#define LJ_FR2			1
  ------------------
  831|  7.26k|  void *cf = L->cframe;
  832|  21.7k|  while (frame > bot && cf) {
  ------------------
  |  Branch (832:10): [True: 21.7k, False: 0]
  |  Branch (832:25): [True: 21.7k, False: 0]
  ------------------
  833|  29.0k|    while (cframe_nres(cframe_raw(cf)) < 0) {  /* cframe without frame? */
  ------------------
  |  |  280|  29.0k|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|  29.0k|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
  |  Branch (833:12): [True: 7.26k, False: 21.7k]
  ------------------
  834|  7.26k|      if (frame >= restorestack(L, -cframe_nres(cf)))
  ------------------
  |  |   15|  7.26k|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|  7.26k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (834:11): [True: 0, False: 7.26k]
  ------------------
  835|      0|	break;
  836|  7.26k|      if (cframe_errfunc(cf) >= 0)  /* Error handler not inherited (-1)? */
  ------------------
  |  |  279|  7.26k|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|  7.26k|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  |  Branch (836:11): [True: 0, False: 7.26k]
  ------------------
  837|      0|	return cframe_errfunc(cf);
  ------------------
  |  |  279|      0|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|      0|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  838|  7.26k|      cf = cframe_prev(cf);  /* Else unwind cframe and continue searching. */
  ------------------
  |  |  281|  7.26k|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|  7.26k|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  839|  7.26k|      if (cf == NULL)
  ------------------
  |  Branch (839:11): [True: 0, False: 7.26k]
  ------------------
  840|      0|	return 0;
  841|  7.26k|    }
  842|  21.7k|    switch (frame_typep(frame)) {
  ------------------
  |  |   76|  21.7k|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|  21.7k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|  21.7k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  21.7k|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  21.7k|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  843|      0|    case FRAME_LUA:
  ------------------
  |  Branch (843:5): [True: 0, False: 21.7k]
  ------------------
  844|  7.26k|    case FRAME_LUAP:
  ------------------
  |  Branch (844:5): [True: 7.26k, False: 14.5k]
  ------------------
  845|  7.26k|      frame = frame_prevl(frame);
  ------------------
  |  |  108|  7.26k|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|  7.26k|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|  7.26k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
  846|  7.26k|      break;
  847|      0|    case FRAME_C:
  ------------------
  |  Branch (847:5): [True: 0, False: 21.7k]
  ------------------
  848|      0|      cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  849|       |      /* fallthrough */
  850|  7.26k|    case FRAME_VARG:
  ------------------
  |  Branch (850:5): [True: 7.26k, False: 14.5k]
  ------------------
  851|  7.26k|      frame = frame_prevd(frame);
  ------------------
  |  |  109|  7.26k|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|  7.26k|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  7.26k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  7.26k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  7.26k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  7.26k|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  852|  7.26k|      break;
  853|      0|    case FRAME_CONT:
  ------------------
  |  Branch (853:5): [True: 0, False: 21.7k]
  ------------------
  854|      0|      if (frame_iscont_fficb(frame))
  ------------------
  |  |  106|      0|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|      0|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|      0|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  855|      0|	cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  856|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  857|      0|      break;
  858|  7.26k|    case FRAME_CP:
  ------------------
  |  Branch (858:5): [True: 7.26k, False: 14.5k]
  ------------------
  859|  7.26k|      if (cframe_canyield(cf)) return 0;
  ------------------
  |  |  292|  7.26k|#define cframe_canyield(cf)	((intptr_t)(cf) & CFRAME_RESUME)
  |  |  ------------------
  |  |  |  |  275|  7.26k|#define CFRAME_RESUME		1
  |  |  ------------------
  |  |  |  Branch (292:29): [True: 0, False: 7.26k]
  |  |  ------------------
  ------------------
  860|  7.26k|      if (cframe_errfunc(cf) >= 0)
  ------------------
  |  |  279|  7.26k|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|  7.26k|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  |  Branch (860:11): [True: 7.26k, False: 0]
  ------------------
  861|  7.26k|	return cframe_errfunc(cf);
  ------------------
  |  |  279|  7.26k|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|  7.26k|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  862|      0|      cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  863|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  864|      0|      break;
  865|      0|    case FRAME_PCALL:
  ------------------
  |  Branch (865:5): [True: 0, False: 21.7k]
  ------------------
  866|      0|    case FRAME_PCALLH:
  ------------------
  |  Branch (866:5): [True: 0, False: 21.7k]
  ------------------
  867|      0|      if (frame_func(frame_prevd(frame))->c.ffid == FF_xpcall)
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (867:11): [True: 0, False: 0]
  ------------------
  868|      0|	return savestack(L, frame_prevd(frame)+1);  /* xpcall's errorfunc. */
  ------------------
  |  |   14|      0|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  869|      0|      return 0;
  870|      0|    default:
  ------------------
  |  Branch (870:5): [True: 0, False: 21.7k]
  ------------------
  871|      0|      lj_assertL(0, "bad frame type");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  872|      0|      return 0;
  873|  21.7k|    }
  874|  21.7k|  }
  875|      0|  return 0;
  876|  7.26k|}

lj_func_freeproto:
   21|   164k|{
   22|   164k|  lj_mem_free(g, pt, pt->sizept);
   23|   164k|}
lj_func_closeuv:
   84|  56.9k|{
   85|  56.9k|  GCupval *uv;
   86|  56.9k|  global_State *g = G(L);
  ------------------
  |  |  705|  56.9k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  56.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   87|  56.9k|  while (gcref(L->openupval) != NULL &&
  ------------------
  |  |   67|  56.9k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (87:10): [True: 0, False: 56.9k]
  ------------------
   88|  56.9k|	 uvval((uv = gco2uv(gcref(L->openupval)))) >= level) {
  ------------------
  |  |  449|      0|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (88:3): [True: 0, False: 0]
  ------------------
   89|      0|    GCobj *o = obj2gco(uv);
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   90|      0|    lj_assertG(!isblack(o), "bad black upvalue");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   91|      0|    lj_assertG(!uv->closed && uvval(uv) != &uv->tv, "closed upvalue in chain");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   92|      0|    setgcrefr(L->openupval, uv->nextgc);  /* No longer in open list. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   93|      0|    if (isdead(g, o)) {
  ------------------
  |  |   37|      0|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|      0|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   94|      0|      lj_func_freeuv(g, uv);
   95|      0|    } else {
   96|      0|      unlinkuv(g, uv);
   97|      0|      lj_gc_closeuv(g, uv);
   98|      0|    }
   99|      0|  }
  100|  56.9k|}
lj_func_newC:
  112|  3.59M|{
  113|  3.59M|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeCfunc(nelems));
  ------------------
  |  |  481|  3.59M|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  114|  3.59M|  fn->c.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|  3.59M|#define LJ_TFUNC		(~8u)
  ------------------
  115|  3.59M|  fn->c.ffid = FF_C;
  ------------------
  |  |  475|  3.59M|#define FF_C		1
  ------------------
  116|  3.59M|  fn->c.nupvalues = (uint8_t)nelems;
  117|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  118|  3.59M|  setmref(fn->c.pc, &G(L)->bc_cfunc_ext);
  ------------------
  |  |   39|  3.59M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  119|  3.59M|  setgcref(fn->c.env, obj2gco(env));
  ------------------
  |  |   72|  3.59M|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  120|  3.59M|  return fn;
  121|  3.59M|}
lj_func_newL_empty:
  141|   153k|{
  142|   153k|  GCfunc *fn = func_newL(L, pt, env);
  143|   153k|  MSize i, nuv = pt->sizeuv;
  144|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  145|   153k|  for (i = 0; i < nuv; i++) {
  ------------------
  |  Branch (145:15): [True: 0, False: 153k]
  ------------------
  146|      0|    GCupval *uv = func_emptyuv(L);
  147|      0|    int32_t v = proto_uv(pt)[i];
  ------------------
  |  |  422|      0|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  148|      0|    uv->immutable = ((v / PROTO_UV_IMMUTABLE) & 1);
  ------------------
  |  |  413|      0|#define PROTO_UV_IMMUTABLE	0x4000	/* Immutable upvalue. */
  ------------------
  149|      0|    uv->dhash = (uint32_t)(uintptr_t)pt ^ (v << 24);
  150|      0|    setgcref(fn->l.uvptr[i], obj2gco(uv));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  151|      0|  }
  152|   153k|  fn->l.nupvalues = (uint8_t)nuv;
  153|   153k|  return fn;
  154|   153k|}
lj_func_free:
  186|  3.74M|{
  187|  3.74M|  MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|  3.74M|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  3.74M|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 153k, False: 3.59M]
  |  |  ------------------
  ------------------
                MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|   153k|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  188|  3.74M|			       sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|  7.33M|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  189|  3.74M|  lj_mem_free(g, fn, size);
  190|  3.74M|}
lj_func.c:func_newL:
  124|   153k|{
  125|   153k|  uint32_t count;
  126|   153k|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeLfunc((MSize)pt->sizeuv));
  ------------------
  |  |  482|   153k|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  127|   153k|  fn->l.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|   153k|#define LJ_TFUNC		(~8u)
  ------------------
  128|   153k|  fn->l.ffid = FF_LUA;
  ------------------
  |  |  474|   153k|#define FF_LUA		0
  ------------------
  129|   153k|  fn->l.nupvalues = 0;  /* Set to zero until upvalues are initialized. */
  130|       |  /* NOBARRIER: Really a setgcref. But the GCfunc is new (marked white). */
  131|   153k|  setmref(fn->l.pc, proto_bc(pt));
  ------------------
  |  |   39|   153k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  132|   153k|  setgcref(fn->l.env, obj2gco(env));
  ------------------
  |  |   72|   153k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  133|       |  /* Saturating 3 bit counter (0..7) for created closures. */
  134|   153k|  count = (uint32_t)pt->flags + PROTO_CLCOUNT;
  ------------------
  |  |  408|   153k|#define PROTO_CLCOUNT		0x20	/* Base of saturating 3 bit counter. */
  ------------------
  135|   153k|  pt->flags = (uint8_t)(count - ((count >> PROTO_CLC_BITS) & PROTO_CLCOUNT));
  ------------------
  |  |  409|   153k|#define PROTO_CLC_BITS		3
  ------------------
                pt->flags = (uint8_t)(count - ((count >> PROTO_CLC_BITS) & PROTO_CLCOUNT));
  ------------------
  |  |  408|   153k|#define PROTO_CLCOUNT		0x20	/* Base of saturating 3 bit counter. */
  ------------------
  136|   153k|  return fn;
  137|   153k|}

lj_gc_separateudata:
  142|  37.7k|{
  143|  37.7k|  size_t m = 0;
  144|  37.7k|  GCRef *p = &mainthread(g)->nextgc;
  ------------------
  |  |  665|  37.7k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  37.7k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  145|  37.7k|  GCobj *o;
  146|   217k|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|   217k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (146:10): [True: 179k, False: 37.7k]
  ------------------
  147|   179k|    if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   32|   359k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   179k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   179k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   179k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 147k, False: 32.5k]
  |  |  ------------------
  ------------------
                  if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   40|   339k|#define isfinalized(u)		((u)->marked & LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|   169k|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  |  |  |  Branch (40:25): [True: 84.9k, False: 84.9k]
  |  |  |  Branch (40:27): [True: 169k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (147:25): [True: 22.5k, False: 10.0k]
  ------------------
  148|  94.9k|      p = &o->gch.nextgc;  /* Nothing to do. */
  149|  94.9k|    } else if (!lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc)) {
  ------------------
  |  |   20|   169k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 17.8k, False: 67.0k]
  |  |  |  Branch (20:5): [True: 84.9k, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 67.0k]
  |  |  |  Branch (20:28): [True: 67.0k, False: 0]
  |  |  ------------------
  |  |   21|   134k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|  67.0k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|  67.0k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|  67.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 67.0k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (149:16): [True: 17.8k, False: 67.0k]
  ------------------
  150|  17.8k|      markfinalized(o);  /* Done, as there's no __gc metamethod. */
  ------------------
  |  |   46|  17.8k|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|  17.8k|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  151|  17.8k|      p = &o->gch.nextgc;
  152|  67.0k|    } else {  /* Otherwise move userdata to be finalized to mmudata list. */
  153|  67.0k|      m += sizeudata(gco2ud(o));
  ------------------
  |  |  343|   134k|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  |  |  ------------------
  |  |  |  Branch (343:47): [True: 67.0k, False: 0]
  |  |  ------------------
  ------------------
  154|  67.0k|      markfinalized(o);
  ------------------
  |  |   46|  67.0k|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|  67.0k|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  155|  67.0k|      *p = o->gch.nextgc;
  156|  67.0k|      if (gcref(g->gc.mmudata)) {  /* Link to end of mmudata list. */
  ------------------
  |  |   67|  67.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 49.2k, False: 17.8k]
  |  |  ------------------
  ------------------
  157|  49.2k|	GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|  49.2k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  158|  49.2k|	setgcrefr(o->gch.nextgc, root->gch.nextgc);
  ------------------
  |  |   77|  49.2k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  159|  49.2k|	setgcref(root->gch.nextgc, o);
  ------------------
  |  |   72|  49.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  160|  49.2k|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|  49.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  161|  49.2k|      } else {  /* Create circular list. */
  162|  17.8k|	setgcref(o->gch.nextgc, o);
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  163|  17.8k|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  164|  17.8k|      }
  165|  67.0k|    }
  166|   179k|  }
  167|  37.7k|  return m;
  168|  37.7k|}
lj_gc_finalize_udata:
  576|  17.8k|{
  577|  84.9k|  while (gcref(G(L)->gc.mmudata) != NULL)
  ------------------
  |  |   67|  84.9k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (577:10): [True: 67.0k, False: 17.8k]
  ------------------
  578|  67.0k|    gc_finalize(L);
  579|  17.8k|}
lj_gc_finalize_cdata:
  584|  17.8k|{
  585|  17.8k|  global_State *g = G(L);
  ------------------
  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  586|  17.8k|  GCtab *t = tabref(g->gcroot[GCROOT_FFI_FIN]);
  ------------------
  |  |  514|  17.8k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  17.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  587|  17.8k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|  17.8k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  588|  17.8k|  ptrdiff_t i;
  589|  17.8k|  setgcrefnull(t->metatable);  /* Mark finalizer table as disabled. */
  ------------------
  |  |   76|  17.8k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  590|  53.5k|  for (i = (ptrdiff_t)t->hmask; i >= 0; i--)
  ------------------
  |  Branch (590:33): [True: 35.6k, False: 17.8k]
  ------------------
  591|  35.6k|    if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  782|  71.3k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
                  if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  799|  17.8k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  17.8k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  17.8k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 17.8k]
  |  |  ------------------
  ------------------
  |  Branch (591:9): [True: 17.8k, False: 17.8k]
  ------------------
  592|      0|      GCobj *o = gcV(&node[i].key);
  ------------------
  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  593|      0|      TValue tmp;
  594|      0|      makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  595|      0|      o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  596|      0|      copyTV(L, &tmp, &node[i].val);
  597|      0|      setnilV(&node[i].val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  598|      0|      gc_call_finalizer(g, L, &tmp, o);
  599|      0|    }
  600|  17.8k|}
lj_gc_freeall:
  605|  17.8k|{
  606|  17.8k|  MSize i;
  607|       |  /* Free everything, except super-fixed objects (the main thread). */
  608|  17.8k|  g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   27|  17.8k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  17.8k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  17.8k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
                g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   25|  17.8k|#define LJ_GC_SFIXED	0x40
  ------------------
  609|  17.8k|  gc_fullsweep(g, &g->gc.root);
  ------------------
  |  |  401|  17.8k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  ------------------
  610|  8.41M|  for (i = g->str.mask; i != ~(MSize)0; i--)  /* Free all string hash chains. */
  ------------------
  |  Branch (610:25): [True: 8.39M, False: 17.8k]
  ------------------
  611|  8.39M|    gc_sweepstr(g, &g->str.tab[i]);
  612|  17.8k|}
lj_gc_step:
  721|  47.4k|{
  722|  47.4k|  global_State *g = G(L);
  ------------------
  |  |  705|  47.4k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  47.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  723|  47.4k|  GCSize lim;
  724|  47.4k|  int32_t ostate = g->vmstate;
  725|  47.4k|  setvmstate(g, GC);
  ------------------
  |  |  539|  47.4k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  726|  47.4k|  lim = (GCSTEPSIZE/100) * g->gc.stepmul;
  ------------------
  |  |   32|  47.4k|#define GCSTEPSIZE	1024u
  ------------------
  727|  47.4k|  if (lim == 0)
  ------------------
  |  Branch (727:7): [True: 0, False: 47.4k]
  ------------------
  728|      0|    lim = LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  729|  47.4k|  if (g->gc.total > g->gc.threshold)
  ------------------
  |  Branch (729:7): [True: 36.8k, False: 10.5k]
  ------------------
  730|  36.8k|    g->gc.debt += g->gc.total - g->gc.threshold;
  731|  1.68M|  do {
  732|  1.68M|    lim -= (GCSize)gc_onestep(L);
  733|  1.68M|    if (g->gc.state == GCSpause) {
  ------------------
  |  Branch (733:9): [True: 1.04k, False: 1.68M]
  ------------------
  734|  1.04k|      g->gc.threshold = (g->gc.estimate/100) * g->gc.pause;
  735|  1.04k|      g->vmstate = ostate;
  736|  1.04k|      return 1;  /* Finished a GC cycle. */
  737|  1.04k|    }
  738|  1.68M|  } while (sizeof(lim) == 8 ? ((int64_t)lim > 0) : ((int32_t)lim > 0));
  ------------------
  |  Branch (738:12): [Folded - Ignored]
  |  Branch (738:12): [True: 1.63M, False: 46.3k]
  ------------------
  739|  46.3k|  if (g->gc.debt < GCSTEPSIZE) {
  ------------------
  |  |   32|  46.3k|#define GCSTEPSIZE	1024u
  ------------------
  |  Branch (739:7): [True: 23.9k, False: 22.4k]
  ------------------
  740|  23.9k|    g->gc.threshold = g->gc.total + GCSTEPSIZE;
  ------------------
  |  |   32|  23.9k|#define GCSTEPSIZE	1024u
  ------------------
  741|  23.9k|    g->vmstate = ostate;
  742|  23.9k|    return -1;
  743|  23.9k|  } else {
  744|  22.4k|    g->gc.debt -= GCSTEPSIZE;
  ------------------
  |  |   32|  22.4k|#define GCSTEPSIZE	1024u
  ------------------
  745|  22.4k|    g->gc.threshold = g->gc.total;
  746|  22.4k|    g->vmstate = ostate;
  747|  22.4k|    return 0;
  748|  22.4k|  }
  749|  46.3k|}
lj_mem_realloc:
  862|  6.83M|{
  863|  6.83M|  global_State *g = G(L);
  ------------------
  |  |  705|  6.83M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  6.83M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  864|  6.83M|  lj_assertG((osz == 0) == (p == NULL), "realloc API violation");
  ------------------
  |  |  364|  6.83M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.83M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 6.83M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.83M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  865|  6.83M|  p = g->allocf(g->allocd, p, osz, nsz);
  866|  6.83M|  if (p == NULL && nsz > 0)
  ------------------
  |  Branch (866:7): [True: 11, False: 6.83M]
  |  Branch (866:20): [True: 0, False: 11]
  ------------------
  867|      0|    lj_err_mem(L);
  868|  6.83M|  lj_assertG((nsz == 0) == (p == NULL), "allocf API violation");
  ------------------
  |  |  364|  6.83M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.83M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 6.83M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.83M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  869|  6.83M|  lj_assertG(checkptrGC(p),
  ------------------
  |  |  364|  6.83M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.6M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 6.83M, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.83M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  870|  6.83M|	     "allocated memory address %p outside required range", p);
  871|  6.83M|  g->gc.total = (g->gc.total - osz) + nsz;
  872|  6.83M|  return p;
  873|  6.83M|}
lj_mem_newgco:
  877|  4.59M|{
  878|  4.59M|  global_State *g = G(L);
  ------------------
  |  |  705|  4.59M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  4.59M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  879|  4.59M|  GCobj *o = (GCobj *)g->allocf(g->allocd, NULL, 0, size);
  880|  4.59M|  if (o == NULL)
  ------------------
  |  Branch (880:7): [True: 0, False: 4.59M]
  ------------------
  881|      0|    lj_err_mem(L);
  882|  4.59M|  lj_assertG(checkptrGC(o),
  ------------------
  |  |  364|  4.59M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.18M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.59M, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.59M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  883|  4.59M|	     "allocated memory address %p outside required range", o);
  884|  4.59M|  g->gc.total += size;
  885|  4.59M|  setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|  4.59M|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  886|  4.59M|  setgcref(g->gc.root, o);
  ------------------
  |  |   72|  4.59M|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  887|  4.59M|  newwhite(g, o);
  ------------------
  |  |   40|  4.59M|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|  4.59M|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  4.59M|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  4.59M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  4.59M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  4.59M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  888|  4.59M|  return o;
  889|  4.59M|}
lj_mem_grow:
  893|  69.5k|{
  894|  69.5k|  MSize sz = (*szp) << 1;
  895|  69.5k|  if (sz < LJ_MIN_VECSZ)
  ------------------
  |  |   81|  69.5k|#define LJ_MIN_VECSZ	8		/* Min. size for growable vectors. */
  ------------------
  |  Branch (895:7): [True: 35.6k, False: 33.9k]
  ------------------
  896|  35.6k|    sz = LJ_MIN_VECSZ;
  ------------------
  |  |   81|  35.6k|#define LJ_MIN_VECSZ	8		/* Min. size for growable vectors. */
  ------------------
  897|  69.5k|  if (sz > lim)
  ------------------
  |  Branch (897:7): [True: 0, False: 69.5k]
  ------------------
  898|      0|    sz = lim;
  899|  69.5k|  p = lj_mem_realloc(L, p, (*szp)*esz, sz*esz);
  900|  69.5k|  *szp = sz;
  901|  69.5k|  return p;
  902|  69.5k|}
lj_gc.c:gc_finalize:
  535|  67.0k|{
  536|  67.0k|  global_State *g = G(L);
  ------------------
  |  |  705|  67.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  67.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  537|  67.0k|  GCobj *o = gcnext(gcref(g->gc.mmudata));
  ------------------
  |  |   90|  67.0k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  67.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  538|  67.0k|  cTValue *mo;
  539|  67.0k|  lj_assertG(tvref(g->jit_base) == NULL, "finalizer called on trace");
  ------------------
  |  |  364|  67.0k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  67.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 67.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  67.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  540|       |  /* Unchain from list of userdata to be finalized. */
  541|  67.0k|  if (o == gcref(g->gc.mmudata))
  ------------------
  |  |   67|  67.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (541:7): [True: 17.8k, False: 49.2k]
  ------------------
  542|  17.8k|    setgcrefnull(g->gc.mmudata);
  ------------------
  |  |   76|  17.8k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  543|  49.2k|  else
  544|  49.2k|    setgcrefr(gcref(g->gc.mmudata)->gch.nextgc, o->gch.nextgc);
  ------------------
  |  |   77|  49.2k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  545|  67.0k|#if LJ_HASFFI
  546|  67.0k|  if (o->gch.gct == ~LJ_TCDATA) {
  ------------------
  |  |  270|  67.0k|#define LJ_TCDATA		(~10u)
  ------------------
  |  Branch (546:7): [True: 0, False: 67.0k]
  ------------------
  547|      0|    TValue tmp, *tv;
  548|       |    /* Add cdata back to the GC list and make it white. */
  549|      0|    setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  550|      0|    setgcref(g->gc.root, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  551|      0|    makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  552|      0|    o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  553|       |    /* Resolve finalizer. */
  554|      0|    setcdataV(L, &tmp, gco2cd(o));
  ------------------
  |  |  770|      0|#define gco2cd(o)	check_exp((o)->gch.gct == ~LJ_TCDATA, &(o)->cd)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  555|      0|    tv = lj_tab_set(L, tabref(g->gcroot[GCROOT_FFI_FIN]), &tmp);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  556|      0|    if (!tvisnil(tv)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (556:9): [True: 0, False: 0]
  ------------------
  557|      0|      copyTV(L, &tmp, tv);
  558|      0|      setnilV(tv);  /* Clear entry in finalizer table. */
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  559|      0|      gc_call_finalizer(g, L, &tmp, o);
  560|      0|    }
  561|      0|    return;
  562|      0|  }
  563|  67.0k|#endif
  564|       |  /* Add userdata back to the main userdata list and make it white. */
  565|  67.0k|  setgcrefr(o->gch.nextgc, mainthread(g)->nextgc);
  ------------------
  |  |   77|  67.0k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  566|  67.0k|  setgcref(mainthread(g)->nextgc, o);
  ------------------
  |  |   72|  67.0k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  567|  67.0k|  makewhite(g, o);
  ------------------
  |  |   42|  67.0k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|  67.0k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  67.0k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  67.0k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  67.0k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  67.0k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  67.0k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  67.0k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  67.0k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  67.0k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  568|       |  /* Resolve the __gc metamethod. */
  569|  67.0k|  mo = lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc);
  ------------------
  |  |   20|   134k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 0, False: 67.0k]
  |  |  |  Branch (20:5): [True: 67.0k, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 67.0k]
  |  |  |  Branch (20:28): [True: 67.0k, False: 0]
  |  |  ------------------
  |  |   21|   134k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|  67.0k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|  67.0k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|  67.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 67.0k, False: 0]
  |  |  ------------------
  ------------------
  570|  67.0k|  if (mo)
  ------------------
  |  Branch (570:7): [True: 67.0k, False: 0]
  ------------------
  571|  67.0k|    gc_call_finalizer(g, L, mo, o);
  572|  67.0k|}
lj_gc.c:gc_call_finalizer:
  505|  67.0k|{
  506|       |  /* Save and restore lots of state around the __gc callback. */
  507|  67.0k|  uint8_t oldh = hook_save(g);
  ------------------
  |  |  684|  67.0k|#define hook_save(g)		((g)->hookmask & ~HOOK_EVENTMASK)
  |  |  ------------------
  |  |  |  |  672|  67.0k|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  508|  67.0k|  GCSize oldt = g->gc.threshold;
  509|  67.0k|  int errcode;
  510|  67.0k|  TValue *top;
  511|  67.0k|  lj_trace_abort(g);
  ------------------
  |  |   45|  67.0k|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|  67.0k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  67.0k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  67.0k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  512|  67.0k|  hook_entergc(g);  /* Disable hooks and new traces during __gc. */
  ------------------
  |  |  681|  67.0k|  ((g)->hookmask = ((g)->hookmask | (HOOK_ACTIVE|HOOK_GC)) & ~HOOK_PROFILE)
  |  |  ------------------
  |  |  |  |  673|  67.0k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  |  |                 ((g)->hookmask = ((g)->hookmask | (HOOK_ACTIVE|HOOK_GC)) & ~HOOK_PROFILE)
  |  |  ------------------
  |  |  |  |  676|  67.0k|#define HOOK_GC			0x40
  |  |  ------------------
  |  |                 ((g)->hookmask = ((g)->hookmask | (HOOK_ACTIVE|HOOK_GC)) & ~HOOK_PROFILE)
  |  |  ------------------
  |  |  |  |  677|  67.0k|#define HOOK_PROFILE		0x80
  |  |  ------------------
  ------------------
  513|  67.0k|  if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  598|   134k|#define LJ_HASPROFILE		1
  |  |  ------------------
  |  |  |  Branch (598:24): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  677|  67.0k|#define HOOK_PROFILE		0x80
  ------------------
  |  Branch (513:24): [True: 0, False: 67.0k]
  ------------------
  514|  67.0k|  g->gc.threshold = LJ_MAX_MEM;  /* Prevent GC steps. */
  ------------------
  |  |   52|  67.0k|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|  67.0k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|  67.0k|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  515|  67.0k|  top = L->top;
  516|  67.0k|  copyTV(L, top++, mo);
  517|  67.0k|  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|  67.0k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|  67.0k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  518|  67.0k|  setgcV(L, top, o, ~o->gch.gct);
  519|  67.0k|  L->top = top+1;
  520|  67.0k|  errcode = lj_vm_pcall(L, top, 1+0, -1);  /* Stack: |mo|o| -> | */
  521|  67.0k|  hook_restore(g, oldh);
  ------------------
  |  |  686|  67.0k|  ((g)->hookmask = ((g)->hookmask & HOOK_EVENTMASK) | (h))
  |  |  ------------------
  |  |  |  |  672|  67.0k|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  522|  67.0k|  if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  598|   134k|#define LJ_HASPROFILE		1
  |  |  ------------------
  |  |  |  Branch (598:24): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  677|  67.0k|#define HOOK_PROFILE		0x80
  ------------------
  |  Branch (522:24): [True: 0, False: 67.0k]
  ------------------
  523|  67.0k|  g->gc.threshold = oldt;  /* Restore GC threshold. */
  524|  67.0k|  if (errcode) {
  ------------------
  |  Branch (524:7): [True: 0, False: 67.0k]
  ------------------
  525|      0|    ptrdiff_t errobj = savestack(L, L->top-1);  /* Stack may be resized. */
  ------------------
  |  |   14|      0|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  526|      0|    lj_vmevent_send(L, ERRFIN,
  ------------------
  |  |   39|      0|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|      0|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 0]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
  527|      0|      copyTV(L, L->top++, restorestack(L, errobj));
  528|      0|    );
  529|      0|    L->top--;
  530|      0|  }
  531|  67.0k|}
lj_gc.c:gc_sweep:
  405|  46.5k|{
  406|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  407|  46.5k|  int ow = otherwhite(g);
  ------------------
  |  |   36|  46.5k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  46.5k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  46.5k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  46.5k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  408|  46.5k|  GCobj *o;
  409|  5.09M|  while ((o = gcref(*p)) != NULL && lim-- > 0) {
  ------------------
  |  |   67|  5.09M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (409:10): [True: 5.05M, False: 37.7k]
  |  Branch (409:37): [True: 5.05M, False: 8.75k]
  ------------------
  410|  5.05M|    if (o->gch.gct == ~LJ_TTHREAD)  /* Need to sweep open upvalues, too. */
  ------------------
  |  |  266|  5.05M|#define LJ_TTHREAD		(~6u)
  ------------------
  |  Branch (410:9): [True: 18.8k, False: 5.03M]
  ------------------
  411|  18.8k|      gc_fullsweep(g, &gco2th(o)->openupval);
  ------------------
  |  |  401|  37.7k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  |  |  ------------------
  |  |  |  Branch (401:41): [True: 18.8k, False: 0]
  |  |  ------------------
  ------------------
  412|  5.05M|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|  5.05M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  5.05M|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  5.05M|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (412:9): [True: 372k, False: 4.67M]
  ------------------
  413|   372k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|   372k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   372k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 372k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   372k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  414|   372k|		 "sweep of undead object");
  415|   372k|      makewhite(g, o);  /* Value is alive, change to the current white. */
  ------------------
  |  |   42|   372k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|   372k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   372k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   372k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   372k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|   372k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   372k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   372k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   372k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   372k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  416|   372k|      p = &o->gch.nextgc;
  417|  4.67M|    } else {  /* Otherwise value is dead, free it. */
  418|  4.67M|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|  4.67M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.34M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 13.1k, False: 4.66M]
  |  |  |  |  |  Branch (355:5): [True: 4.66M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.67M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  419|  4.67M|		 "sweep of unlive object");
  420|  4.67M|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|  4.67M|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  421|  4.67M|      if (o == gcref(g->gc.root))
  ------------------
  |  |   67|  4.67M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (421:11): [True: 0, False: 4.67M]
  ------------------
  422|      0|	setgcrefr(g->gc.root, o->gch.nextgc);  /* Adjust list anchor. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  423|  4.67M|      gc_freefunc[o->gch.gct - ~LJ_TSTR](g, o);
  ------------------
  |  |  264|  4.67M|#define LJ_TSTR			(~4u)
  ------------------
  424|  4.67M|    }
  425|  5.05M|  }
  426|  46.5k|  return p;
  427|  46.5k|}
lj_gc.c:gc_sweepstr:
  431|  9.21M|{
  432|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  433|  9.21M|  int ow = otherwhite(g);
  ------------------
  |  |   36|  9.21M|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  9.21M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  9.21M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  9.21M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  434|  9.21M|  uintptr_t u = gcrefu(*chain);
  ------------------
  |  |   69|  9.21M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  435|  9.21M|  GCRef q;
  436|  9.21M|  GCRef *p = &q;
  437|  9.21M|  GCobj *o;
  438|  9.21M|  setgcrefp(q, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  9.21M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  439|  15.5M|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  15.5M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (439:10): [True: 6.34M, False: 9.21M]
  ------------------
  440|  6.34M|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|  6.34M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  6.34M|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  6.34M|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (440:9): [True: 563k, False: 5.78M]
  ------------------
  441|   563k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|   563k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   704k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 422k, False: 141k]
  |  |  |  |  |  Branch (355:5): [True: 141k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   563k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  442|   563k|		 "sweep of undead string");
  443|   563k|      makewhite(g, o);  /* String is alive, change to the current white. */
  ------------------
  |  |   42|   563k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|   563k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   563k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   563k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   563k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|   563k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   563k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   563k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   563k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   563k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  444|   563k|      p = &o->gch.nextgc;
  445|  5.78M|    } else {  /* Otherwise string is dead, free it. */
  446|  5.78M|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|  5.78M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.5M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 2.02k, False: 5.78M]
  |  |  |  |  |  Branch (355:5): [True: 5.78M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.78M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  447|  5.78M|		 "sweep of unlive string");
  448|  5.78M|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|  5.78M|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  449|  5.78M|      lj_str_free(g, gco2str(o));
  ------------------
  |  |  765|  5.78M|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  5.78M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  5.78M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  5.78M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5.78M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  5.78M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  450|  5.78M|    }
  451|  6.34M|  }
  452|  9.21M|  setgcrefp(*chain, (gcrefu(q) | (u & 1)));
  ------------------
  |  |   75|  9.21M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  453|  9.21M|}
lj_gc.c:gc_onestep:
  654|  1.68M|{
  655|  1.68M|  global_State *g = G(L);
  ------------------
  |  |  705|  1.68M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.68M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  656|  1.68M|  switch (g->gc.state) {
  657|  8.34k|  case GCSpause:
  ------------------
  |  Branch (657:3): [True: 8.34k, False: 1.67M]
  ------------------
  658|  8.34k|    gc_mark_start(g);  /* Start a new GC cycle by marking all GC roots. */
  659|  8.34k|    return 0;
  660|   845k|  case GCSpropagate:
  ------------------
  |  Branch (660:3): [True: 845k, False: 841k]
  ------------------
  661|   845k|    if (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|   845k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (661:9): [True: 843k, False: 2.03k]
  ------------------
  662|   843k|      return propagatemark(g);  /* Propagate one gray object. */
  663|  2.03k|    g->gc.state = GCSatomic;  /* End of mark phase. */
  664|  2.03k|    return 0;
  665|  2.03k|  case GCSatomic:
  ------------------
  |  Branch (665:3): [True: 2.03k, False: 1.68M]
  ------------------
  666|  2.03k|    if (tvref(g->jit_base))  /* Don't run atomic phase on trace. */
  ------------------
  |  |  217|  2.03k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  2.03k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 2.03k]
  |  |  ------------------
  ------------------
  667|      0|      return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  668|  2.03k|    atomic(g, L);
  669|  2.03k|    g->gc.state = GCSsweepstring;  /* Start of sweep phase. */
  670|  2.03k|    g->gc.sweepstr = 0;
  671|  2.03k|    return 0;
  672|   821k|  case GCSsweepstring: {
  ------------------
  |  Branch (672:3): [True: 821k, False: 866k]
  ------------------
  673|   821k|    GCSize old = g->gc.total;
  674|   821k|    gc_sweepstr(g, &g->str.tab[g->gc.sweepstr++]);  /* Sweep one chain. */
  675|   821k|    if (g->gc.sweepstr > g->str.mask)
  ------------------
  |  Branch (675:9): [True: 1.27k, False: 819k]
  ------------------
  676|  1.27k|      g->gc.state = GCSsweep;  /* All string hash chains sweeped. */
  677|   821k|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|   821k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   821k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 821k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   821k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  678|   821k|    g->gc.estimate -= old - g->gc.total;
  679|   821k|    return GCSWEEPCOST;
  ------------------
  |  |   34|   821k|#define GCSWEEPCOST	10
  ------------------
  680|   821k|    }
  681|  9.80k|  case GCSsweep: {
  ------------------
  |  Branch (681:3): [True: 9.80k, False: 1.67M]
  ------------------
  682|  9.80k|    GCSize old = g->gc.total;
  683|  9.80k|    setmref(g->gc.sweep, gc_sweep(g, mref(g->gc.sweep, GCRef), GCSWEEPMAX));
  ------------------
  |  |   39|  9.80k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  684|  9.80k|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|  9.80k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.80k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.80k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.80k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  685|  9.80k|    g->gc.estimate -= old - g->gc.total;
  686|  9.80k|    if (gcref(*mref(g->gc.sweep, GCRef)) == NULL) {
  ------------------
  |  |   67|  9.80k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (686:9): [True: 1.04k, False: 8.75k]
  ------------------
  687|  1.04k|      if (g->str.num <= (g->str.mask >> 2) && g->str.mask > LJ_MIN_STRTAB*2-1)
  ------------------
  |  |   79|      0|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  |  Branch (687:11): [True: 0, False: 1.04k]
  |  Branch (687:47): [True: 0, False: 0]
  ------------------
  688|      0|	lj_str_resize(L, g->str.mask >> 1);  /* Shrink string table. */
  689|  1.04k|      if (gcref(g->gc.mmudata)) {  /* Need any finalizations? */
  ------------------
  |  |   67|  1.04k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 1.04k]
  |  |  ------------------
  ------------------
  690|      0|	g->gc.state = GCSfinalize;
  691|  1.04k|      } else {  /* Otherwise skip this phase to help the JIT. */
  692|  1.04k|	g->gc.state = GCSpause;  /* End of GC cycle. */
  693|  1.04k|	g->gc.debt = 0;
  694|  1.04k|      }
  695|  1.04k|    }
  696|  9.80k|    return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   33|  9.80k|#define GCSWEEPMAX	40
  ------------------
                  return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   34|  9.80k|#define GCSWEEPCOST	10
  ------------------
  697|  9.80k|    }
  698|      0|  case GCSfinalize:
  ------------------
  |  Branch (698:3): [True: 0, False: 1.68M]
  ------------------
  699|      0|    if (gcref(g->gc.mmudata) != NULL) {
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (699:9): [True: 0, False: 0]
  ------------------
  700|      0|      GCSize old = g->gc.total;
  701|      0|      if (tvref(g->jit_base))  /* Don't call finalizers on trace. */
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  702|      0|	return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  703|      0|      gc_finalize(L);  /* Finalize one userdata object. */
  704|      0|      if (old >= g->gc.total && g->gc.estimate > old - g->gc.total)
  ------------------
  |  Branch (704:11): [True: 0, False: 0]
  |  Branch (704:33): [True: 0, False: 0]
  ------------------
  705|      0|	g->gc.estimate -= old - g->gc.total;
  706|      0|      if (g->gc.estimate > GCFINALIZECOST)
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  |  Branch (706:11): [True: 0, False: 0]
  ------------------
  707|      0|	g->gc.estimate -= GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  708|      0|      return GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  709|      0|    }
  710|      0|    g->gc.state = GCSpause;  /* End of GC cycle. */
  711|      0|    g->gc.debt = 0;
  712|      0|    return 0;
  713|      0|  default:
  ------------------
  |  Branch (713:3): [True: 0, False: 1.68M]
  ------------------
  714|      0|    lj_assertG(0, "bad GC state");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  715|      0|    return 0;
  716|  1.68M|  }
  717|  1.68M|}
lj_gc.c:gc_mark_start:
  103|  8.34k|{
  104|  8.34k|  setgcrefnull(g->gc.gray);
  ------------------
  |  |   76|  8.34k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  105|  8.34k|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|  8.34k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  106|  8.34k|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|  8.34k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  107|  8.34k|  gc_markobj(g, mainthread(g));
  ------------------
  |  |   52|  8.34k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  8.34k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  8.34k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  8.34k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  8.34k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 8.34k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  8.34k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  108|  8.34k|  gc_markobj(g, tabref(mainthread(g)->env));
  ------------------
  |  |   52|  8.34k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  8.34k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  8.34k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  8.34k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  8.34k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 8.34k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  8.34k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  109|  8.34k|  gc_marktv(g, &g->registrytv);
  ------------------
  |  |   46|  8.34k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  8.34k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  16.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 8.34k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 8.34k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  8.34k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  8.34k|	       "TValue and GC type mismatch"); \
  |  |   48|  8.34k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  8.34k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  16.6k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  8.34k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  8.34k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  8.34k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  8.34k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  8.34k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  8.34k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 8.34k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  16.6k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  8.34k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  8.34k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  8.34k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 8.34k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 8.34k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  8.34k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  8.34k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  8.34k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  8.34k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 8.34k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  8.34k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  110|  8.34k|  gc_mark_gcroot(g);
  111|  8.34k|  g->gc.state = GCSpropagate;
  112|  8.34k|}
lj_gc.c:gc_mark_gcroot:
   94|  10.3k|{
   95|  10.3k|  ptrdiff_t i;
   96|   415k|  for (i = 0; i < GCROOT_MAX; i++)
  ------------------
  |  Branch (96:15): [True: 404k, False: 10.3k]
  ------------------
   97|   404k|    if (gcref(g->gcroot[i]) != NULL)
  ------------------
  |  |   67|   404k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (97:9): [True: 278k, False: 126k]
  ------------------
   98|   278k|      gc_markobj(g, gcref(g->gcroot[i]));
  ------------------
  |  |   52|   278k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   278k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   278k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   278k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   278k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 224k, False: 54.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|   224k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   99|  10.3k|}
lj_gc.c:propagatemark:
  324|   868k|{
  325|   868k|  GCobj *o = gcref(g->gc.gray);
  ------------------
  |  |   67|   868k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  326|   868k|  int gct = o->gch.gct;
  327|   868k|  lj_assertG(isgray(o), "propagation of non-gray object");
  ------------------
  |  |  364|   868k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   868k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 868k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   868k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  328|   868k|  gray2black(o);
  ------------------
  |  |   39|   868k|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|   868k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  329|   868k|  setgcrefr(g->gc.gray, o->gch.gclist);  /* Remove from gray list. */
  ------------------
  |  |   77|   868k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  330|   868k|  if (LJ_LIKELY(gct == ~LJ_TTAB)) {
  ------------------
  |  |  145|   868k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 138k, False: 729k]
  |  |  ------------------
  ------------------
  331|   138k|    GCtab *t = gco2tab(o);
  ------------------
  |  |  771|   138k|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   138k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   138k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   138k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 138k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   138k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  332|   138k|    if (gc_traverse_tab(g, t) > 0)
  ------------------
  |  Branch (332:9): [True: 4.72k, False: 134k]
  ------------------
  333|  4.72k|      black2gray(o);  /* Keep weak tables gray. */
  ------------------
  |  |   44|  4.72k|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  4.72k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  334|   138k|    return sizeof(GCtab) + sizeof(TValue) * t->asize +
  335|   138k|			   (t->hmask ? sizeof(Node) * (t->hmask + 1) : 0);
  ------------------
  |  Branch (335:8): [True: 132k, False: 6.12k]
  ------------------
  336|   729k|  } else if (LJ_LIKELY(gct == ~LJ_TFUNC)) {
  ------------------
  |  |  145|   729k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 694k, False: 34.5k]
  |  |  ------------------
  ------------------
  337|   694k|    GCfunc *fn = gco2func(o);
  ------------------
  |  |  769|   694k|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  ------------------
  |  |  |  |  367|   694k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   694k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   694k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 694k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   694k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  338|      0|    gc_traverse_func(g, fn);
  339|   694k|    return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|   694k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|   694k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 26.3k, False: 668k]
  |  |  ------------------
  ------------------
                  return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|  26.3k|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  340|   694k|			   sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|   668k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  341|   694k|  } else if (LJ_LIKELY(gct == ~LJ_TPROTO)) {
  ------------------
  |  |  145|  34.5k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 29.8k, False: 4.69k]
  |  |  ------------------
  ------------------
  342|  29.8k|    GCproto *pt = gco2pt(o);
  ------------------
  |  |  768|  29.8k|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|  29.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  29.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  29.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 29.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  29.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  343|      0|    gc_traverse_proto(g, pt);
  344|  29.8k|    return pt->sizept;
  345|  29.8k|  } else if (LJ_LIKELY(gct == ~LJ_TTHREAD)) {
  ------------------
  |  |  145|  4.69k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 4.69k, False: 0]
  |  |  ------------------
  ------------------
  346|  4.69k|    lua_State *th = gco2th(o);
  ------------------
  |  |  767|  4.69k|#define gco2th(o)	check_exp((o)->gch.gct == ~LJ_TTHREAD, &(o)->th)
  |  |  ------------------
  |  |  |  |  367|  4.69k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  4.69k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  4.69k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4.69k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  4.69k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  347|  4.69k|    setgcrefr(th->gclist, g->gc.grayagain);
  ------------------
  |  |   77|  4.69k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  348|  4.69k|    setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|  4.69k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  349|  4.69k|    black2gray(o);  /* Threads are never black. */
  ------------------
  |  |   44|  4.69k|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  4.69k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  350|  4.69k|    gc_traverse_thread(g, th);
  351|  4.69k|    return sizeof(lua_State) + sizeof(TValue) * th->stacksize;
  352|  4.69k|  } else {
  353|      0|#if LJ_HASJIT
  354|      0|    GCtrace *T = gco2trace(o);
  ------------------
  |  |  296|      0|#define gco2trace(o)	check_exp((o)->gch.gct == ~LJ_TTRACE, (GCtrace *)(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  355|      0|    gc_traverse_trace(g, T);
  356|      0|    return ((sizeof(GCtrace)+7)&~7) + (T->nins-T->nk)*sizeof(IRIns) +
  357|      0|	   T->nsnap*sizeof(SnapShot) + T->nsnapmap*sizeof(SnapEntry);
  358|       |#else
  359|       |    lj_assertG(0, "bad GC type %d", gct);
  360|       |    return 0;
  361|       |#endif
  362|      0|  }
  363|   868k|}
lj_gc.c:gc_traverse_tab:
  174|   138k|{
  175|   138k|  int weak = 0;
  176|   138k|  cTValue *mode;
  177|   138k|  GCtab *mt = tabref(t->metatable);
  ------------------
  |  |  514|   138k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   138k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  178|   138k|  if (mt)
  ------------------
  |  Branch (178:7): [True: 13.0k, False: 125k]
  ------------------
  179|  13.0k|    gc_markobj(g, mt);
  ------------------
  |  |   52|  13.0k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  13.0k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  13.0k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  13.0k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  13.0k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 13.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  180|   138k|  mode = lj_meta_fastg(g, mt, MM_mode);
  ------------------
  |  |   20|   138k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 125k, False: 13.0k]
  |  |  |  Branch (20:26): [True: 0, False: 13.0k]
  |  |  ------------------
  |  |   21|  13.0k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|  13.0k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|  13.0k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|  13.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  181|   138k|  if (mode && tvisstr(mode)) {  /* Valid __mode field? */
  ------------------
  |  |  795|  13.0k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  13.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  13.0k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 13.0k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (181:7): [True: 13.0k, False: 125k]
  ------------------
  182|  13.0k|    const char *modestr = strVdata(mode);
  ------------------
  |  |  318|  13.0k|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|  26.1k|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 13.0k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|    int c;
  184|  30.8k|    while ((c = *modestr++)) {
  ------------------
  |  Branch (184:12): [True: 17.7k, False: 13.0k]
  ------------------
  185|  17.7k|      if (c == 'k') weak |= LJ_GC_WEAKKEY;
  ------------------
  |  |   21|  13.0k|#define LJ_GC_WEAKKEY	0x08
  ------------------
  |  Branch (185:11): [True: 13.0k, False: 4.72k]
  ------------------
  186|  4.72k|      else if (c == 'v') weak |= LJ_GC_WEAKVAL;
  ------------------
  |  |   22|  4.72k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (186:16): [True: 4.72k, False: 0]
  ------------------
  187|  17.7k|    }
  188|  13.0k|    if (weak) {  /* Weak tables are cleared in the atomic phase. */
  ------------------
  |  Branch (188:9): [True: 13.0k, False: 0]
  ------------------
  189|  13.0k|#if LJ_HASFFI
  190|  13.0k|      if (gcref(g->gcroot[GCROOT_FFI_FIN]) == obj2gco(t)) {
  ------------------
  |  |   67|  13.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                    if (gcref(g->gcroot[GCROOT_FFI_FIN]) == obj2gco(t)) {
  ------------------
  |  |  775|  13.0k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  |  Branch (190:11): [True: 8.34k, False: 4.72k]
  ------------------
  191|  8.34k|	weak = (int)(~0u & ~LJ_GC_WEAKVAL);
  ------------------
  |  |   22|  8.34k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  192|  8.34k|      } else
  193|  4.72k|#endif
  194|  4.72k|      {
  195|  4.72k|	t->marked = (uint8_t)((t->marked & ~LJ_GC_WEAK) | weak);
  ------------------
  |  |   29|  4.72k|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|  4.72k|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|  4.72k|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  196|  4.72k|	setgcrefr(t->gclist, g->gc.weak);
  ------------------
  |  |   77|  4.72k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  197|  4.72k|	setgcref(g->gc.weak, obj2gco(t));
  ------------------
  |  |   72|  4.72k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  198|  4.72k|      }
  199|  13.0k|    }
  200|  13.0k|  }
  201|   138k|  if (weak == LJ_GC_WEAK)  /* Nothing to mark if both keys/values are weak. */
  ------------------
  |  |   29|   138k|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|   138k|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|   138k|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  |  Branch (201:7): [True: 4.72k, False: 134k]
  ------------------
  202|  4.72k|    return 1;
  203|   134k|  if (!(weak & LJ_GC_WEAKVAL)) {  /* Mark array part. */
  ------------------
  |  |   22|   134k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (203:7): [True: 134k, False: 0]
  ------------------
  204|   134k|    MSize i, asize = t->asize;
  205|   176k|    for (i = 0; i < asize; i++)
  ------------------
  |  Branch (205:17): [True: 42.4k, False: 134k]
  ------------------
  206|   134k|      gc_marktv(g, arrayslot(t, i));
  ------------------
  |  |   46|  42.4k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  42.4k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  63.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 21.7k, False: 20.6k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 20.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  42.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  42.4k|	       "TValue and GC type mismatch"); \
  |  |   48|  42.4k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  42.4k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  84.8k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  42.4k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  42.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  42.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  42.4k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  42.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  42.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 20.6k, False: 21.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  41.3k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  20.6k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  20.6k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  20.6k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 12.3k, False: 8.33k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 20.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  12.3k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  12.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  12.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  12.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 12.3k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  12.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  207|   134k|  }
  208|   134k|  if (t->hmask > 0) {  /* Mark hash part. */
  ------------------
  |  Branch (208:7): [True: 127k, False: 6.12k]
  ------------------
  209|   127k|    Node *node = noderef(t->node);
  ------------------
  |  |  515|   127k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   127k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  210|   127k|    MSize i, hmask = t->hmask;
  211|  1.87M|    for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (211:17): [True: 1.75M, False: 127k]
  ------------------
  212|  1.75M|      Node *n = &node[i];
  213|  1.75M|      if (!tvisnil(&n->val)) {  /* Mark non-empty slot. */
  ------------------
  |  |  782|  1.75M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (213:11): [True: 1.21M, False: 533k]
  ------------------
  214|  1.21M|	lj_assertG(!tvisnil(&n->key), "mark of nil key in non-empty slot");
  ------------------
  |  |  364|  1.21M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.21M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.21M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.21M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  215|  1.21M|	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   21|  1.21M|#define LJ_GC_WEAKKEY	0x08
  ------------------
              	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   46|  1.20M|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  1.20M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.41M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 3.69k, False: 1.20M]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.20M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.20M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  1.20M|	       "TValue and GC type mismatch"); \
  |  |   48|  1.20M|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  1.20M|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  2.41M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  1.20M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.20M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.20M|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  1.20M|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.20M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.20M|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 1.20M, False: 3.69k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  2.41M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  1.20M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  1.20M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  1.20M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 780k, False: 425k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 1.20M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|   780k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   780k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   780k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   780k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 780k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   780k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (215:6): [True: 1.20M, False: 8.34k]
  ------------------
  216|  1.21M|	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   22|  1.21M|#define LJ_GC_WEAKVAL	0x10
  ------------------
              	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   46|  1.21M|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  1.21M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.16M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 273k, False: 944k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 944k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.21M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  1.21M|	       "TValue and GC type mismatch"); \
  |  |   48|  1.21M|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  1.21M|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  2.43M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  1.21M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.21M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.21M|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  1.21M|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.21M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.21M|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 944k, False: 273k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  1.88M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|   944k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|   944k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|   944k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 858k, False: 86.3k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 944k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|   858k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   858k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   858k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   858k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 858k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   858k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (216:6): [True: 1.21M, False: 0]
  ------------------
  217|  1.21M|      }
  218|  1.75M|    }
  219|   127k|  }
  220|   134k|  return weak;
  221|   134k|}
lj_gc.c:gc_traverse_func:
  225|   694k|{
  226|   694k|  gc_markobj(g, tabref(fn->c.env));
  ------------------
  |  |   52|   694k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   694k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   694k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   694k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   694k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 3.07k, False: 691k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  3.07k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  227|   694k|  if (isluafunc(fn)) {
  ------------------
  |  |  476|   694k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|   694k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 26.3k, False: 668k]
  |  |  ------------------
  ------------------
  228|  26.3k|    uint32_t i;
  229|  26.3k|    lj_assertG(fn->l.nupvalues <= funcproto(fn)->sizeuv,
  ------------------
  |  |  364|  26.3k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  52.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 26.3k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 26.3k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  26.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  230|  26.3k|	       "function upvalues out of range");
  231|  26.3k|    gc_markobj(g, funcproto(fn));
  ------------------
  |  |   52|  26.3k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  52.7k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  26.3k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  26.3k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  26.3k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 26.3k, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 26.3k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  52.7k|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 26.3k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  232|  26.3k|    for (i = 0; i < fn->l.nupvalues; i++)  /* Mark Lua function upvalues. */
  ------------------
  |  Branch (232:17): [True: 0, False: 26.3k]
  ------------------
  233|      0|      gc_markobj(g, &gcref(fn->l.uvptr[i])->uv);
  ------------------
  |  |   52|  26.3k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  234|   668k|  } else {
  235|   668k|    uint32_t i;
  236|   722k|    for (i = 0; i < fn->c.nupvalues; i++)  /* Mark C function upvalues. */
  ------------------
  |  Branch (236:17): [True: 54.4k, False: 668k]
  ------------------
  237|   668k|      gc_marktv(g, &fn->c.upvalue[i]);
  ------------------
  |  |   46|  54.4k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  54.4k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   108k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 54.4k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 54.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  54.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  54.4k|	       "TValue and GC type mismatch"); \
  |  |   48|  54.4k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  54.4k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   108k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  54.4k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  54.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  54.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  54.4k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  54.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  54.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 54.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   108k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  54.4k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  54.4k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  54.4k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 35.1k, False: 19.2k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 54.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  35.1k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  35.1k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  35.1k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  35.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 35.1k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  35.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  238|   668k|  }
  239|   694k|}
lj_gc.c:gc_traverse_proto:
  280|  29.8k|{
  281|  29.8k|  ptrdiff_t i;
  282|  29.8k|  gc_mark_str(proto_chunkname(pt));
  ------------------
  |  |   55|  29.8k|#define gc_mark_str(s)		((s)->marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  29.8k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  29.8k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  29.8k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  283|  80.4k|  for (i = -(ptrdiff_t)pt->sizekgc; i < 0; i++)  /* Mark collectable consts. */
  ------------------
  |  Branch (283:37): [True: 50.5k, False: 29.8k]
  ------------------
  284|  50.5k|    gc_markobj(g, proto_kgc(pt, i));
  ------------------
  |  |   52|  50.5k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   101k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  50.5k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  50.5k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  50.5k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 18.8k, False: 31.6k]
  |  |  |  |  |  Branch (32:22): [True: 50.5k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  37.7k|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 18.8k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|  29.8k|#if LJ_HASJIT
  286|  29.8k|  if (pt->trace) gc_marktrace(g, pt->trace);
  ------------------
  |  Branch (286:7): [True: 0, False: 29.8k]
  ------------------
  287|  29.8k|#endif
  288|  29.8k|}
lj_gc.c:gc_traverse_thread:
  309|  4.69k|{
  310|  4.69k|  TValue *o, *top = th->top;
  311|  54.7k|  for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  217|  4.69k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  4.69k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  569|  4.69k|#define LJ_FR2			1
  ------------------
  |  Branch (311:39): [True: 50.0k, False: 4.69k]
  ------------------
  312|  50.0k|    gc_marktv(g, o);
  ------------------
  |  |   46|  50.0k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  50.0k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  99.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 310, False: 49.7k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 49.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  50.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  50.0k|	       "TValue and GC type mismatch"); \
  |  |   48|  50.0k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  50.0k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   100k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  50.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  50.0k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  50.0k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  50.0k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  50.0k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  50.0k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 49.7k, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  99.4k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  49.7k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  49.7k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  49.7k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 33.2k, False: 16.5k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 49.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  33.2k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  33.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  33.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  33.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 33.2k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  33.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  313|  4.69k|  if (g->gc.state == GCSatomic) {
  ------------------
  |  Branch (313:7): [True: 2.03k, False: 2.65k]
  ------------------
  314|  2.03k|    top = tvref(th->stack) + th->stacksize;
  ------------------
  |  |  217|  2.03k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  2.03k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  315|  87.8k|    for (; o < top; o++)  /* Clear unmarked slots. */
  ------------------
  |  Branch (315:12): [True: 85.8k, False: 2.03k]
  ------------------
  316|  85.8k|      setnilV(o);
  ------------------
  |  |  872|  85.8k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  317|  2.03k|  }
  318|  4.69k|  gc_markobj(g, tabref(th->env));
  ------------------
  |  |   52|  4.69k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  4.69k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  4.69k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  4.69k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  4.69k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 4.69k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  319|  4.69k|  lj_state_shrinkstack(th, gc_traverse_frames(g, th));
  320|  4.69k|}
lj_gc.c:gc_traverse_frames:
  292|  4.69k|{
  293|  4.69k|  TValue *frame, *top = th->top-1, *bot = tvref(th->stack);
  ------------------
  |  |  217|  4.69k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  4.69k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  294|       |  /* Note: extra vararg frame not skipped, marks function twice (harmless). */
  295|  4.94k|  for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  569|  4.94k|#define LJ_FR2			1
  ------------------
                for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  110|    248|#define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |   77|    248|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |   75|    248|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|    248|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    248|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:25): [True: 62, False: 186]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  108|     62|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|     62|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |   35|     62|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  109|    186|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|    186|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|    186|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|    186|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|    186|#define FRAME_TYPE		3
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   29|    186|#define FRAME_P			4
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (295:28): [True: 248, False: 4.69k]
  ------------------
  296|    248|    GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|    248|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|    248|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|    248|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|    248|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|    248|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|    248|    TValue *ftop = frame;
  298|    248|    if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  476|    248|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|    248|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 124, False: 124]
  |  |  ------------------
  ------------------
                  if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  480|    124|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|    124|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    124|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    124|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 124, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    124|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  299|    248|    if (ftop > top) top = ftop;
  ------------------
  |  Branch (299:9): [True: 16, False: 232]
  ------------------
  300|    248|    if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |  569|    248|#define LJ_FR2			1
  ------------------
                  if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (300:9): [Folded - Ignored]
  ------------------
  301|    248|  }
  302|  4.69k|  top++;  /* Correct bias of -1 (frame == base-1). */
  303|  4.69k|  if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|  4.69k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  4.69k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (303:7): [True: 0, False: 4.69k]
  ------------------
  304|  4.69k|  return (MSize)(top - bot);  /* Return minimum needed stack size. */
  305|  4.69k|}
lj_gc.c:gc_traverse_trace:
  256|  2.03k|{
  257|  2.03k|  IRRef ref;
  258|  2.03k|  if (T->traceno == 0) return;
  ------------------
  |  Branch (258:7): [True: 2.03k, False: 0]
  ------------------
  259|      0|  for (ref = T->nk; ref < REF_TRUE; ref++) {
  ------------------
  |  Branch (259:21): [True: 0, False: 0]
  ------------------
  260|      0|    IRIns *ir = &T->ir[ref];
  261|      0|    if (ir->o == IR_KGC)
  ------------------
  |  Branch (261:9): [True: 0, False: 0]
  ------------------
  262|      0|      gc_markobj(g, ir_kgc(ir));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  263|      0|    if (irt_is64(ir->t) && ir->o != IR_KNULL)
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (263:28): [True: 0, False: 0]
  ------------------
  264|      0|      ref++;
  265|      0|  }
  266|      0|  if (T->link) gc_marktrace(g, T->link);
  ------------------
  |  Branch (266:7): [True: 0, False: 0]
  ------------------
  267|      0|  if (T->nextroot) gc_marktrace(g, T->nextroot);
  ------------------
  |  Branch (267:7): [True: 0, False: 0]
  ------------------
  268|      0|  if (T->nextside) gc_marktrace(g, T->nextside);
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|  gc_markobj(g, gcref(T->startpt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  270|      0|}
lj_gc.c:atomic:
  618|  2.03k|{
  619|  2.03k|  size_t udsize;
  620|       |
  621|  2.03k|  gc_mark_uv(g);  /* Need to remark open upvalues (the thread may be dead). */
  622|  2.03k|  gc_propagate_gray(g);  /* Propagate any left-overs. */
  623|       |
  624|  2.03k|  setgcrefr(g->gc.gray, g->gc.weak);  /* Empty the list of weak tables. */
  ------------------
  |  |   77|  2.03k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  625|  2.03k|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|  2.03k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  626|  2.03k|  lj_assertG(!iswhite(obj2gco(mainthread(g))), "main thread turned white");
  ------------------
  |  |  364|  2.03k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.03k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.03k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.03k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  627|  2.03k|  gc_markobj(g, L);  /* Mark running thread. */
  ------------------
  |  |   52|  2.03k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  2.03k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  2.03k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  2.03k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  2.03k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 2.03k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  628|  2.03k|  gc_traverse_curtrace(g);  /* Traverse current trace. */
  ------------------
  |  |  273|  2.03k|#define gc_traverse_curtrace(g)	gc_traverse_trace(g, &G2J(g)->cur)
  |  |  ------------------
  |  |  |  |  116|  2.03k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  2.03k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  2.03k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  629|  2.03k|  gc_mark_gcroot(g);  /* Mark GC roots (again). */
  630|  2.03k|  gc_propagate_gray(g);  /* Propagate all of the above. */
  631|       |
  632|  2.03k|  setgcrefr(g->gc.gray, g->gc.grayagain);  /* Empty the 2nd chance list. */
  ------------------
  |  |   77|  2.03k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  633|  2.03k|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|  2.03k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  634|  2.03k|  gc_propagate_gray(g);  /* Propagate it. */
  635|       |
  636|  2.03k|  udsize = lj_gc_separateudata(g, 0);  /* Separate userdata to be finalized. */
  637|  2.03k|  gc_mark_mmudata(g);  /* Mark them. */
  638|  2.03k|  udsize += gc_propagate_gray(g);  /* And propagate the marks. */
  639|       |
  640|       |  /* All marking done, clear weak tables. */
  641|  2.03k|  gc_clearweak(g, gcref(g->gc.weak));
  ------------------
  |  |   67|  2.03k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  642|       |
  643|  2.03k|  lj_buf_shrink(L, &g->tmpbuf);  /* Shrink temp buffer. */
  644|       |
  645|       |  /* Prepare for sweep phase. */
  646|  2.03k|  g->gc.currentwhite = (uint8_t)otherwhite(g);  /* Flip current white. */
  ------------------
  |  |   36|  2.03k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  2.03k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  2.03k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  2.03k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  647|  2.03k|  g->strempty.marked = g->gc.currentwhite;
  648|  2.03k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|  2.03k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  649|  2.03k|  g->gc.estimate = g->gc.total - (GCSize)udsize;  /* Initial estimate. */
  650|  2.03k|}
lj_gc.c:gc_mark_uv:
  116|  2.03k|{
  117|  2.03k|  GCupval *uv;
  118|  2.03k|  for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|  2.03k|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|  2.03k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|      0|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (118:33): [True: 0, False: 2.03k]
  ------------------
  119|      0|    lj_assertG(uvprev(uvnext(uv)) == uv && uvnext(uvprev(uv)) == uv,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  120|      0|	       "broken upvalue chain");
  121|      0|    if (isgray(obj2gco(uv)))
  ------------------
  |  |   34|      0|#define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  |  |               #define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (34:19): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  122|      0|      gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  123|      0|  }
  124|  2.03k|}
lj_gc.c:gc_propagate_gray:
  367|  8.15k|{
  368|  8.15k|  size_t m = 0;
  369|  32.6k|  while (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|  32.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (369:10): [True: 24.4k, False: 8.15k]
  ------------------
  370|  24.4k|    m += propagatemark(g);
  371|  8.15k|  return m;
  372|  8.15k|}
lj_gc.c:gc_mark_mmudata:
  128|  2.03k|{
  129|  2.03k|  GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|  2.03k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  130|  2.03k|  GCobj *u = root;
  131|  2.03k|  if (u) {
  ------------------
  |  Branch (131:7): [True: 0, False: 2.03k]
  ------------------
  132|      0|    do {
  133|      0|      u = gcnext(u);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  134|      0|      makewhite(g, u);  /* Could be from previous GC. */
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  135|      0|      gc_mark(g, u);
  136|      0|    } while (u != root);
  ------------------
  |  Branch (136:14): [True: 0, False: 0]
  ------------------
  137|      0|  }
  138|  2.03k|}
lj_gc.c:gc_clearweak:
  473|  2.03k|{
  474|  2.03k|  UNUSED(g);
  ------------------
  |  |   91|  2.03k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  475|  4.07k|  while (o) {
  ------------------
  |  Branch (475:10): [True: 2.03k, False: 2.03k]
  ------------------
  476|  2.03k|    GCtab *t = gco2tab(o);
  ------------------
  |  |  771|  2.03k|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  2.03k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.03k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.03k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.03k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.03k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  477|  2.03k|    lj_assertG((t->marked & LJ_GC_WEAK), "clear of non-weak table");
  ------------------
  |  |  364|  2.03k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.03k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.03k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.03k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  478|  2.03k|    if ((t->marked & LJ_GC_WEAKVAL)) {
  ------------------
  |  |   22|  2.03k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (478:9): [True: 2.03k, False: 0]
  ------------------
  479|  2.03k|      MSize i, asize = t->asize;
  480|  2.03k|      for (i = 0; i < asize; i++) {
  ------------------
  |  Branch (480:19): [True: 0, False: 2.03k]
  ------------------
  481|       |	/* Clear array slot when value is about to be collected. */
  482|      0|	TValue *tv = arrayslot(t, i);
  ------------------
  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  483|      0|	if (gc_mayclear(tv, 1))
  ------------------
  |  Branch (483:6): [True: 0, False: 0]
  ------------------
  484|      0|	  setnilV(tv);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  485|      0|      }
  486|  2.03k|    }
  487|  2.03k|    if (t->hmask > 0) {
  ------------------
  |  Branch (487:9): [True: 2.03k, False: 0]
  ------------------
  488|  2.03k|      Node *node = noderef(t->node);
  ------------------
  |  |  515|  2.03k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  2.03k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  489|  2.03k|      MSize i, hmask = t->hmask;
  490|  6.11k|      for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (490:19): [True: 4.07k, False: 2.03k]
  ------------------
  491|  4.07k|	Node *n = &node[i];
  492|       |	/* Clear hash slot when key or value is about to be collected. */
  493|  4.07k|	if (!tvisnil(&n->val) && (gc_mayclear(&n->key, 0) ||
  ------------------
  |  |  782|  8.15k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (493:6): [True: 2.03k, False: 2.03k]
  |  Branch (493:28): [True: 0, False: 2.03k]
  ------------------
  494|  2.03k|				  gc_mayclear(&n->val, 1)))
  ------------------
  |  Branch (494:7): [True: 0, False: 2.03k]
  ------------------
  495|      0|	  setnilV(&n->val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  496|  4.07k|      }
  497|  2.03k|    }
  498|  2.03k|    o = gcref(t->gclist);
  ------------------
  |  |   67|  2.03k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  499|  2.03k|  }
  500|  2.03k|}
lj_gc.c:gc_mayclear:
  457|  4.07k|{
  458|  4.07k|  if (tvisgcv(o)) {  /* Only collectable objects can be weak references. */
  ------------------
  |  |  809|  4.07k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  4.07k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  4.07k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  4.07k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  4.07k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  4.07k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  4.07k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 4.07k, False: 0]
  |  |  ------------------
  ------------------
  459|  4.07k|    if (tvisstr(o)) {  /* But strings cannot be used as weak references. */
  ------------------
  |  |  795|  4.07k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  4.07k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  4.07k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 4.07k, False: 0]
  |  |  ------------------
  ------------------
  460|  4.07k|      gc_mark_str(strV(o));  /* And need to be marked. */
  ------------------
  |  |   55|  8.15k|#define gc_mark_str(s)		((s)->marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  4.07k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  4.07k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  4.07k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (55:27): [True: 4.07k, False: 0]
  |  |  ------------------
  ------------------
  461|      0|      return 0;
  462|  4.07k|    }
  463|      0|    if (iswhite(gcV(o)))
  ------------------
  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  464|      0|      return 1;  /* Object is about to be collected. */
  465|      0|    if (tvisudata(o) && val && isfinalized(udataV(o)))
  ------------------
  |  |  801|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (tvisudata(o) && val && isfinalized(udataV(o)))
  ------------------
  |  |   40|      0|#define isfinalized(u)		((u)->marked & LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  |  |  |  Branch (40:25): [True: 0, False: 0]
  |  |  |  Branch (40:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (465:25): [True: 0, False: 0]
  ------------------
  466|      0|      return 1;  /* Finalized userdata is dropped only from values. */
  467|      0|  }
  468|      0|  return 0;  /* Cannot clear. */
  469|  4.07k|}
lj_gc.c:gc_mark:
   59|  2.03M|{
   60|  2.03M|  int gct = o->gch.gct;
   61|  2.03M|  lj_assertG(iswhite(o), "mark of non-white object");
  ------------------
  |  |  364|  2.03M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.03M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.03M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.03M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   62|  2.03M|  lj_assertG(!isdead(g, o), "mark of dead object");
  ------------------
  |  |  364|  2.03M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.03M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.03M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.03M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|  2.03M|  white2gray(o);
  ------------------
  |  |   38|  2.03M|#define white2gray(x)		((x)->gch.marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  2.03M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  2.03M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  2.03M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|  2.03M|  if (LJ_UNLIKELY(gct == ~LJ_TUDATA)) {
  ------------------
  |  |  146|  2.03M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 25.4k, False: 2.00M]
  |  |  ------------------
  ------------------
   65|  25.4k|    GCtab *mt = tabref(gco2ud(o)->metatable);
  ------------------
  |  |  514|  25.4k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  50.9k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 25.4k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   66|  25.4k|    gray2black(o);  /* Userdata are never gray. */
  ------------------
  |  |   39|  25.4k|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  25.4k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   67|  25.4k|    if (mt) gc_markobj(g, mt);
  ------------------
  |  |   52|  22.2k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  22.2k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  22.2k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  22.2k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  22.2k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 10.6k, False: 11.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  10.6k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (67:9): [True: 22.2k, False: 3.22k]
  ------------------
   68|  25.4k|    gc_markobj(g, tabref(gco2ud(o)->env));
  ------------------
  |  |   52|  25.4k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  50.9k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  25.4k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  25.4k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  25.4k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 2.43k, False: 23.0k]
  |  |  |  |  |  Branch (32:22): [True: 25.4k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  4.86k|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 2.43k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   69|  50.9k|    if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  592|  50.9k|#define LJ_HASBUFFER		1
  |  |  ------------------
  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  772|  25.4k|#define gco2ud(o)	check_exp((o)->gch.gct == ~LJ_TUDATA, &(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  25.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  25.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  25.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 25.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  25.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (69:25): [True: 0, False: 25.4k]
  ------------------
   70|      0|      SBufExt *sbx = (SBufExt *)uddata(gco2ud(o));
  ------------------
  |  |  342|      0|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   71|      0|      if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   72|      0|	gc_markobj(g, gcref(sbx->cowref));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   73|      0|      if (gcref(sbx->dict_str))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   74|      0|	gc_markobj(g, gcref(sbx->dict_str));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   75|      0|      if (gcref(sbx->dict_mt))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   76|      0|	gc_markobj(g, gcref(sbx->dict_mt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   77|      0|    }
   78|  2.00M|  } else if (LJ_UNLIKELY(gct == ~LJ_TUPVAL)) {
  ------------------
  |  |  146|  2.00M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
   79|      0|    GCupval *uv = gco2uv(o);
  ------------------
  |  |  766|      0|#define gco2uv(o)	check_exp((o)->gch.gct == ~LJ_TUPVAL, &(o)->uv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   81|      0|    if (uv->closed)
  ------------------
  |  Branch (81:9): [True: 0, False: 0]
  ------------------
   82|      0|      gray2black(o);  /* Closed upvalues are never gray. */
  ------------------
  |  |   39|      0|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   83|  2.00M|  } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  264|  4.01M|#define LJ_TSTR			(~4u)
  ------------------
                } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  270|  1.04M|#define LJ_TCDATA		(~10u)
  ------------------
  |  Branch (83:14): [True: 1.04M, False: 963k]
  |  Branch (83:33): [True: 969k, False: 71.3k]
  ------------------
   84|   969k|    lj_assertG(gct == ~LJ_TFUNC || gct == ~LJ_TTAB ||
  ------------------
  |  |  364|   969k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.14M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 769k, False: 200k]
  |  |  |  |  |  Branch (355:5): [True: 161k, False: 38.2k]
  |  |  |  |  |  Branch (355:5): [True: 8.34k, False: 29.9k]
  |  |  |  |  |  Branch (355:5): [True: 29.9k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   969k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|   969k|	       gct == ~LJ_TTHREAD || gct == ~LJ_TPROTO || gct == ~LJ_TTRACE,
   86|   969k|	       "bad GC type %d", gct);
   87|   969k|    setgcrefr(o->gch.gclist, g->gc.gray);
  ------------------
  |  |   77|   969k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   88|   969k|    setgcref(g->gc.gray, o);
  ------------------
  |  |   72|   969k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   89|   969k|  }
   90|  2.03M|}

lj_state.c:lj_mem_free:
  120|  53.5k|{
  121|  53.5k|  g->gc.total -= (GCSize)osize;
  122|  53.5k|  g->allocf(g->allocd, p, osize, 0);
  123|  53.5k|}
lj_lex.c:lj_mem_free:
  120|  53.5k|{
  121|  53.5k|  g->gc.total -= (GCSize)osize;
  122|  53.5k|  g->allocf(g->allocd, p, osize, 0);
  123|  53.5k|}
lj_parse.c:lj_gc_barrierback:
   82|     30|{
   83|     30|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|     30|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|     30|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|     30|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     60|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 30, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 30, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     30|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|     30|	     "bad object states for backward barrier");
   86|     30|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|     30|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     60|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 30, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 30, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     30|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|     30|	     "bad GC state");
   88|     30|  black2gray(o);
  ------------------
  |  |   44|     30|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|     30|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|     30|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|     30|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|     30|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|     30|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|     30|}
lj_trace.c:lj_mem_free:
  120|  71.3k|{
  121|  71.3k|  g->gc.total -= (GCSize)osize;
  122|  71.3k|  g->allocf(g->allocd, p, osize, 0);
  123|  71.3k|}
lj_ctype.c:lj_mem_free:
  120|  40.6k|{
  121|  40.6k|  g->gc.total -= (GCSize)osize;
  122|  40.6k|  g->allocf(g->allocd, p, osize, 0);
  123|  40.6k|}
lib_ffi.c:lj_gc_barrierback:
   82|    324|{
   83|    324|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|    324|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|    324|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|    324|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    648|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 324, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 324, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    324|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|    324|	     "bad object states for backward barrier");
   86|    324|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|    324|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    648|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 324, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 324, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    324|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|    324|	     "bad GC state");
   88|    324|  black2gray(o);
  ------------------
  |  |   44|    324|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|    324|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|    324|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|    324|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|    324|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|    324|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|    324|}
lj_str.c:lj_mem_free:
  120|  5.81M|{
  121|  5.81M|  g->gc.total -= (GCSize)osize;
  122|  5.81M|  g->allocf(g->allocd, p, osize, 0);
  123|  5.81M|}
lj_tab.c:lj_mem_free:
  120|  1.30M|{
  121|  1.30M|  g->gc.total -= (GCSize)osize;
  122|  1.30M|  g->allocf(g->allocd, p, osize, 0);
  123|  1.30M|}
lj_tab.c:lj_gc_barrierback:
   82|  4.42k|{
   83|  4.42k|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|  4.42k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|  4.42k|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|  4.42k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  8.85k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 4.42k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 4.42k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.42k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|  4.42k|	     "bad object states for backward barrier");
   86|  4.42k|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|  4.42k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  8.85k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 4.42k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 4.42k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.42k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|  4.42k|	     "bad GC state");
   88|  4.42k|  black2gray(o);
  ------------------
  |  |   44|  4.42k|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  4.42k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|  4.42k|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|  4.42k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|  4.42k|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|  4.42k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|  4.42k|}
lj_func.c:lj_mem_free:
  120|  3.91M|{
  121|  3.91M|  g->gc.total -= (GCSize)osize;
  122|  3.91M|  g->allocf(g->allocd, p, osize, 0);
  123|  3.91M|}
lj_udata.c:lj_mem_free:
  120|  84.9k|{
  121|  84.9k|  g->gc.total -= (GCSize)osize;
  122|  84.9k|  g->allocf(g->allocd, p, osize, 0);
  123|  84.9k|}
lj_meta.c:lj_gc_barrierback:
   82|    126|{
   83|    126|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|    126|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|    126|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|    126|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    252|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 126, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 126, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    126|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|    126|	     "bad object states for backward barrier");
   86|    126|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|    126|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    252|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 126, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 126, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    126|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|    126|	     "bad GC state");
   88|    126|  black2gray(o);
  ------------------
  |  |   44|    126|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|    126|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|    126|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|    126|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|    126|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|    126|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|    126|}
lj_cdata.c:lj_mem_free:
  120|   121k|{
  121|   121k|  g->gc.total -= (GCSize)osize;
  122|   121k|  g->allocf(g->allocd, p, osize, 0);
  123|   121k|}
lj_cparse.c:lj_mem_free:
  120|  11.0k|{
  121|  11.0k|  g->gc.total -= (GCSize)osize;
  122|  11.0k|  g->allocf(g->allocd, p, osize, 0);
  123|  11.0k|}

lj_lex_setup:
  399|  17.8k|{
  400|  17.8k|  int header = 0;
  401|  17.8k|  ls->L = L;
  402|  17.8k|  ls->fs = NULL;
  403|  17.8k|  ls->pe = ls->p = NULL;
  404|  17.8k|  ls->vstack = NULL;
  405|  17.8k|  ls->sizevstack = 0;
  406|  17.8k|  ls->vtop = 0;
  407|  17.8k|  ls->bcstack = NULL;
  408|  17.8k|  ls->sizebcstack = 0;
  409|  17.8k|  ls->tok = 0;
  410|  17.8k|  ls->lookahead = TK_eof;  /* No look-ahead token. */
  411|  17.8k|  ls->linenumber = 1;
  412|  17.8k|  ls->lastline = 1;
  413|  17.8k|  ls->endmark = 0;
  414|  17.8k|  ls->fr2 = LJ_FR2;  /* Generate native bytecode by default. */
  ------------------
  |  |  569|  17.8k|#define LJ_FR2			1
  ------------------
  415|  17.8k|  lex_next(ls);  /* Read-ahead first char. */
  416|  17.8k|  if (ls->c == 0xef && ls->p + 2 <= ls->pe && (uint8_t)ls->p[0] == 0xbb &&
  ------------------
  |  Branch (416:7): [True: 0, False: 17.8k]
  |  Branch (416:24): [True: 0, False: 0]
  |  Branch (416:47): [True: 0, False: 0]
  ------------------
  417|  17.8k|      (uint8_t)ls->p[1] == 0xbf) {  /* Skip UTF-8 BOM (if buffered). */
  ------------------
  |  Branch (417:7): [True: 0, False: 0]
  ------------------
  418|      0|    ls->p += 2;
  419|      0|    lex_next(ls);
  420|      0|    header = 1;
  421|      0|  }
  422|  17.8k|  if (ls->c == '#') {  /* Skip POSIX #! header line. */
  ------------------
  |  Branch (422:7): [True: 0, False: 17.8k]
  ------------------
  423|      0|    do {
  424|      0|      lex_next(ls);
  425|      0|      if (ls->c == LEX_EOF) return 0;
  ------------------
  |  |   42|      0|#define LEX_EOF			(-1)
  ------------------
  |  Branch (425:11): [True: 0, False: 0]
  ------------------
  426|      0|    } while (!lex_iseol(ls));
  ------------------
  |  |   43|      0|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 0, False: 0]
  |  |  |  Branch (43:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  427|      0|    lex_newline(ls);
  428|      0|    header = 1;
  429|      0|  }
  430|  17.8k|  if (ls->c == LUA_SIGNATURE[0]) {  /* Bytecode dump. */
  ------------------
  |  |   27|  17.8k|#define	LUA_SIGNATURE	"\033Lua"
  ------------------
  |  Branch (430:7): [True: 0, False: 17.8k]
  ------------------
  431|      0|    if (header) {
  ------------------
  |  Branch (431:9): [True: 0, False: 0]
  ------------------
  432|       |      /*
  433|       |      ** Loading bytecode with an extra header is disabled for security
  434|       |      ** reasons. This may circumvent the usual check for bytecode vs.
  435|       |      ** Lua code by looking at the first char. Since this is a potential
  436|       |      ** security violation no attempt is made to echo the chunkname either.
  437|       |      */
  438|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_BCBAD));
  439|      0|      lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|      0|#define LUA_ERRSYNTAX	3
  ------------------
  440|      0|    }
  441|      0|    return 1;
  442|      0|  }
  443|  17.8k|  return 0;
  444|  17.8k|}
lj_lex_cleanup:
  448|  17.8k|{
  449|  17.8k|  global_State *g = G(L);
  ------------------
  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  450|  17.8k|  lj_mem_freevec(g, ls->bcstack, ls->sizebcstack, BCInsLine);
  ------------------
  |  |  130|  17.8k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  451|  17.8k|  lj_mem_freevec(g, ls->vstack, ls->sizevstack, VarInfo);
  ------------------
  |  |  130|  17.8k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  452|  17.8k|  lj_buf_free(g, &ls->sb);
  453|  17.8k|}
lj_lex_next:
  457|  2.00M|{
  458|  2.00M|  ls->lastline = ls->linenumber;
  459|  2.00M|  if (LJ_LIKELY(ls->lookahead == TK_eof)) {  /* No lookahead token? */
  ------------------
  |  |  145|  2.00M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1.96M, False: 45.9k]
  |  |  ------------------
  ------------------
  460|  1.96M|    ls->tok = lex_scan(ls, &ls->tokval);  /* Get next token. */
  461|  1.96M|  } else {  /* Otherwise return lookahead token. */
  462|  45.9k|    ls->tok = ls->lookahead;
  463|  45.9k|    ls->lookahead = TK_eof;
  464|  45.9k|    ls->tokval = ls->lookaheadval;
  465|  45.9k|  }
  466|  2.00M|}
lj_lex_lookahead:
  470|  45.9k|{
  471|  45.9k|  lj_assertLS(ls->lookahead == TK_eof, "double lookahead");
  ------------------
  |  |   89|  45.9k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  45.9k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  45.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 45.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  45.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  472|  45.9k|  ls->lookahead = lex_scan(ls, &ls->lookaheadval);
  473|  45.9k|  return ls->lookahead;
  474|  45.9k|}
lj_lex_token2str:
  478|  12.4k|{
  479|  12.4k|  if (tok > TK_OFS)
  ------------------
  |  Branch (479:7): [True: 7.75k, False: 4.73k]
  ------------------
  480|  7.75k|    return tokennames[tok-TK_OFS-1];
  481|  4.73k|  else if (!lj_char_iscntrl(tok))
  ------------------
  |  |   25|  4.73k|#define lj_char_iscntrl(c)	lj_char_isa((c), LJ_CHAR_CNTRL)
  |  |  ------------------
  |  |  |  |   24|  4.73k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (481:12): [True: 4.72k, False: 11]
  ------------------
  482|  4.72k|    return lj_strfmt_pushf(ls->L, "%c", tok);
  483|     11|  else
  484|     11|    return lj_strfmt_pushf(ls->L, "char(%d)", tok);
  485|  12.4k|}
lj_lex_error:
  489|  6.74k|{
  490|  6.74k|  const char *tokstr;
  491|  6.74k|  va_list argp;
  492|  6.74k|  if (tok == 0) {
  ------------------
  |  Branch (492:7): [True: 121, False: 6.62k]
  ------------------
  493|    121|    tokstr = NULL;
  494|  6.62k|  } else if (tok == TK_name || tok == TK_string || tok == TK_number) {
  ------------------
  |  Branch (494:14): [True: 289, False: 6.33k]
  |  Branch (494:32): [True: 379, False: 5.96k]
  |  Branch (494:52): [True: 552, False: 5.40k]
  ------------------
  495|  1.22k|    lex_save(ls, '\0');
  496|  1.22k|    tokstr = ls->sb.b;
  497|  5.40k|  } else {
  498|  5.40k|    tokstr = lj_lex_token2str(ls, tok);
  499|  5.40k|  }
  500|  6.74k|  va_start(argp, em);
  501|  6.74k|  lj_err_lex(ls->L, ls->chunkname, tokstr, ls->linenumber, em, argp);
  502|      0|  va_end(argp);
  503|      0|}
lj_lex_init:
  507|  17.8k|{
  508|  17.8k|  uint32_t i;
  509|   410k|  for (i = 0; i < TK_RESERVED; i++) {
  ------------------
  |  Branch (509:15): [True: 392k, False: 17.8k]
  ------------------
  510|   392k|    GCstr *s = lj_str_newz(L, tokennames[i]);
  ------------------
  |  |   27|   392k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  511|   392k|    fixstring(s);  /* Reserved words are never collected. */
  ------------------
  |  |   45|   392k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|   392k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  512|   392k|    s->reserved = (uint8_t)(i+1);
  513|   392k|  }
  514|  17.8k|}
lj_lex.c:lex_next:
   64|  7.74M|{
   65|  7.74M|  return (ls->c = ls->p < ls->pe ? (LexChar)(uint8_t)*ls->p++ : lex_more(ls));
  ------------------
  |  Branch (65:19): [True: 7.71M, False: 31.6k]
  ------------------
   66|  7.74M|}
lj_lex.c:lex_more:
   47|  31.6k|{
   48|  31.6k|  size_t sz;
   49|  31.6k|  const char *p = ls->rfunc(ls->L, ls->rdata, &sz);
   50|  31.6k|  if (p == NULL || sz == 0) return LEX_EOF;
  ------------------
  |  |   42|  13.8k|#define LEX_EOF			(-1)
  ------------------
  |  Branch (50:7): [True: 13.8k, False: 17.8k]
  |  Branch (50:20): [True: 0, False: 17.8k]
  ------------------
   51|  17.8k|  if (sz >= LJ_MAX_BUF) {
  ------------------
  |  |   55|  17.8k|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|  17.8k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 0, False: 17.8k]
  ------------------
   52|      0|    if (sz != ~(size_t)0) lj_err_mem(ls->L);
  ------------------
  |  Branch (52:9): [True: 0, False: 0]
  ------------------
   53|      0|    sz = ~(uintptr_t)0 - (uintptr_t)p;
   54|      0|    if (sz >= LJ_MAX_BUF) sz = LJ_MAX_BUF-1;
  ------------------
  |  |   55|      0|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
                  if (sz >= LJ_MAX_BUF) sz = LJ_MAX_BUF-1;
  ------------------
  |  |   55|      0|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (54:9): [True: 0, False: 0]
  ------------------
   55|      0|    ls->endmark = 1;
   56|      0|  }
   57|  17.8k|  ls->pe = p + sz;
   58|  17.8k|  ls->p = p + 1;
   59|  17.8k|  return (LexChar)(uint8_t)p[0];
   60|  17.8k|}
lj_lex.c:lex_newline:
   83|   241k|{
   84|   241k|  LexChar old = ls->c;
   85|   241k|  lj_assertLS(lex_iseol(ls), "bad usage");
  ------------------
  |  |   89|   241k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   241k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   250k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 232k, False: 8.75k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 8.75k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   241k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   86|   241k|  lex_next(ls);  /* Skip "\n" or "\r". */
   87|   241k|  if (lex_iseol(ls) && ls->c != old) lex_next(ls);  /* Skip "\n\r" or "\r\n". */
  ------------------
  |  |   43|   483k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 20.8k, False: 220k]
  |  |  |  Branch (43:42): [True: 4.91k, False: 215k]
  |  |  ------------------
  ------------------
  |  Branch (87:24): [True: 242, False: 25.5k]
  ------------------
   88|   241k|  if (++ls->linenumber >= LJ_MAX_LINE)
  ------------------
  |  |   64|   241k|#define LJ_MAX_LINE	LJ_MAX_MEM32	/* Max. source code line number. */
  |  |  ------------------
  |  |  |  |   49|   241k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (88:7): [True: 0, False: 241k]
  ------------------
   89|      0|    lj_lex_error(ls, ls->tok, LJ_ERR_XLINES);
   90|   241k|}
lj_lex.c:lex_scan:
  292|  2.00M|{
  293|  2.00M|  lj_buf_reset(&ls->sb);
  294|  2.73M|  for (;;) {
  295|  2.73M|    if (lj_char_isident(ls->c)) {
  ------------------
  |  |   32|  2.73M|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|  2.73M|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 929k, False: 1.80M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  296|   929k|      GCstr *s;
  297|   929k|      if (lj_char_isdigit(ls->c)) {  /* Numeric literal. */
  ------------------
  |  |   28|   929k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|   929k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 163k, False: 765k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  298|   163k|	lex_number(ls, tv);
  299|   163k|	return TK_number;
  300|   163k|      }
  301|       |      /* Identifier or reserved word. */
  302|  2.07M|      do {
  303|  2.07M|	lex_savenext(ls);
  304|  2.07M|      } while (lj_char_isident(ls->c));
  ------------------
  |  |   32|  2.07M|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|  2.07M|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 1.31M, False: 765k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   765k|      s = lj_parse_keepstr(ls, ls->sb.b, sbuflen(&ls->sb));
  ------------------
  |  |   36|   765k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  306|   765k|      setstrV(ls->L, tv, s);
  307|   765k|      if (s->reserved > 0)  /* Reserved word? */
  ------------------
  |  Branch (307:11): [True: 119k, False: 645k]
  ------------------
  308|   119k|	return TK_OFS + s->reserved;
  309|   645k|      return TK_name;
  310|   765k|    }
  311|  1.80M|    switch (ls->c) {
  312|  75.3k|    case '\n':
  ------------------
  |  Branch (312:5): [True: 75.3k, False: 1.73M]
  ------------------
  313|  79.9k|    case '\r':
  ------------------
  |  Branch (313:5): [True: 4.60k, False: 1.80M]
  ------------------
  314|  79.9k|      lex_newline(ls);
  315|  79.9k|      continue;
  316|   645k|    case ' ':
  ------------------
  |  Branch (316:5): [True: 645k, False: 1.16M]
  ------------------
  317|   646k|    case '\t':
  ------------------
  |  Branch (317:5): [True: 409, False: 1.80M]
  ------------------
  318|   646k|    case '\v':
  ------------------
  |  Branch (318:5): [True: 227, False: 1.80M]
  ------------------
  319|   646k|    case '\f':
  ------------------
  |  Branch (319:5): [True: 227, False: 1.80M]
  ------------------
  320|   646k|      lex_next(ls);
  321|   646k|      continue;
  322|  39.4k|    case '-':
  ------------------
  |  Branch (322:5): [True: 39.4k, False: 1.76M]
  ------------------
  323|  39.4k|      lex_next(ls);
  324|  39.4k|      if (ls->c != '-') return '-';
  ------------------
  |  Branch (324:11): [True: 38.7k, False: 748]
  ------------------
  325|    748|      lex_next(ls);
  326|    748|      if (ls->c == '[') {  /* Long comment "--[=*[...]=*]". */
  ------------------
  |  Branch (326:11): [True: 328, False: 420]
  ------------------
  327|    328|	int sep = lex_skipeq(ls);
  328|    328|	lj_buf_reset(&ls->sb);  /* `lex_skipeq' may dirty the buffer */
  329|    328|	if (sep >= 0) {
  ------------------
  |  Branch (329:6): [True: 205, False: 123]
  ------------------
  330|    205|	  lex_longstring(ls, NULL, sep);
  331|    205|	  lj_buf_reset(&ls->sb);
  332|    205|	  continue;
  333|    205|	}
  334|    328|      }
  335|       |      /* Short comment "--.*\n". */
  336|  6.65k|      while (!lex_iseol(ls) && ls->c != LEX_EOF)
  ------------------
  |  |   43|  13.3k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 398, False: 6.25k]
  |  |  |  Branch (43:42): [True: 145, False: 6.11k]
  |  |  ------------------
  ------------------
                    while (!lex_iseol(ls) && ls->c != LEX_EOF)
  ------------------
  |  |   42|  6.11k|#define LEX_EOF			(-1)
  ------------------
  |  Branch (336:32): [True: 6.11k, False: 0]
  ------------------
  337|  6.11k|	lex_next(ls);
  338|    543|      continue;
  339|   230k|    case '[': {
  ------------------
  |  Branch (339:5): [True: 230k, False: 1.57M]
  ------------------
  340|   230k|      int sep = lex_skipeq(ls);
  341|   230k|      if (sep >= 0) {
  ------------------
  |  Branch (341:11): [True: 223k, False: 6.66k]
  ------------------
  342|   223k|	lex_longstring(ls, tv, sep);
  343|   223k|	return TK_string;
  344|   223k|      } else if (sep == -1) {
  ------------------
  |  Branch (344:18): [True: 6.66k, False: 1]
  ------------------
  345|  6.66k|	return '[';
  346|  6.66k|      } else {
  347|      1|	lj_lex_error(ls, TK_string, LJ_ERR_XLDELIM);
  348|      0|	continue;
  349|      1|      }
  350|   230k|      }
  351|   188k|    case '=':
  ------------------
  |  Branch (351:5): [True: 188k, False: 1.61M]
  ------------------
  352|   188k|      lex_next(ls);
  353|   188k|      if (ls->c != '=') return '='; else { lex_next(ls); return TK_eq; }
  ------------------
  |  Branch (353:11): [True: 188k, False: 437]
  ------------------
  354|  1.98k|    case '<':
  ------------------
  |  Branch (354:5): [True: 1.98k, False: 1.80M]
  ------------------
  355|  1.98k|      lex_next(ls);
  356|  1.98k|      if (ls->c != '=') return '<'; else { lex_next(ls); return TK_le; }
  ------------------
  |  Branch (356:11): [True: 990, False: 996]
  ------------------
  357|  77.0k|    case '>':
  ------------------
  |  Branch (357:5): [True: 77.0k, False: 1.72M]
  ------------------
  358|  77.0k|      lex_next(ls);
  359|  77.0k|      if (ls->c != '=') return '>'; else { lex_next(ls); return TK_ge; }
  ------------------
  |  Branch (359:11): [True: 36.9k, False: 40.1k]
  ------------------
  360|  1.11k|    case '~':
  ------------------
  |  Branch (360:5): [True: 1.11k, False: 1.80M]
  ------------------
  361|  1.11k|      lex_next(ls);
  362|  1.11k|      if (ls->c != '=') return '~'; else { lex_next(ls); return TK_ne; }
  ------------------
  |  Branch (362:11): [True: 4, False: 1.11k]
  ------------------
  363|  2.87k|    case ':':
  ------------------
  |  Branch (363:5): [True: 2.87k, False: 1.80M]
  ------------------
  364|  2.87k|      lex_next(ls);
  365|  2.87k|      if (ls->c != ':') return ':'; else { lex_next(ls); return TK_label; }
  ------------------
  |  Branch (365:11): [True: 1.85k, False: 1.01k]
  ------------------
  366|  4.56k|    case '"':
  ------------------
  |  Branch (366:5): [True: 4.56k, False: 1.80M]
  ------------------
  367|  22.9k|    case '\'':
  ------------------
  |  Branch (367:5): [True: 18.3k, False: 1.78M]
  ------------------
  368|  22.9k|      lex_string(ls, tv);
  369|  22.9k|      return TK_string;
  370|  24.2k|    case '.':
  ------------------
  |  Branch (370:5): [True: 24.2k, False: 1.78M]
  ------------------
  371|  24.2k|      if (lex_savenext(ls) == '.') {
  ------------------
  |  Branch (371:11): [True: 560, False: 23.6k]
  ------------------
  372|    560|	lex_next(ls);
  373|    560|	if (ls->c == '.') {
  ------------------
  |  Branch (373:6): [True: 123, False: 437]
  ------------------
  374|    123|	  lex_next(ls);
  375|    123|	  return TK_dots;   /* ... */
  376|    123|	}
  377|    437|	return TK_concat;   /* .. */
  378|  23.6k|      } else if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|  23.6k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  23.6k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (378:18): [True: 23.4k, False: 183]
  ------------------
  379|  23.4k|	return '.';
  380|  23.4k|      } else {
  381|    183|	lex_number(ls, tv);
  382|    183|	return TK_number;
  383|    183|      }
  384|  13.8k|    case LEX_EOF:
  ------------------
  |  |   42|  13.8k|#define LEX_EOF			(-1)
  ------------------
  |  Branch (384:5): [True: 13.8k, False: 1.79M]
  ------------------
  385|  13.8k|      return TK_eof;
  386|   477k|    default: {
  ------------------
  |  Branch (386:5): [True: 477k, False: 1.32M]
  ------------------
  387|   477k|      LexChar c = ls->c;
  388|   477k|      lex_next(ls);
  389|   477k|      return c;  /* Single-char tokens (+ - / ...). */
  390|  24.2k|    }
  391|  1.80M|    }
  392|  1.80M|  }
  393|  2.00M|}
lj_lex.c:lex_number:
   96|   163k|{
   97|   163k|  StrScanFmt fmt;
   98|   163k|  LexChar c, xp = 'e';
   99|   163k|  lj_assertLS(lj_char_isdigit(ls->c), "bad usage");
  ------------------
  |  |   89|   163k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   163k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   163k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 163k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   163k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  100|   163k|  if ((c = ls->c) == '0' && (lex_savenext(ls) | 0x20) == 'x')
  ------------------
  |  Branch (100:7): [True: 36.9k, False: 126k]
  |  Branch (100:29): [True: 1.26k, False: 35.6k]
  ------------------
  101|  1.26k|    xp = 'p';
  102|   797k|  while (lj_char_isident(ls->c) || ls->c == '.' ||
  ------------------
  |  |   32|   797k|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|  1.59M|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 628k, False: 168k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (102:36): [True: 4.86k, False: 163k]
  ------------------
  103|   797k|	 ((ls->c == '-' || ls->c == '+') && (c | 0x20) == xp)) {
  ------------------
  |  Branch (103:5): [True: 23.3k, False: 140k]
  |  Branch (103:21): [True: 114, False: 140k]
  |  Branch (103:38): [True: 8, False: 23.5k]
  ------------------
  104|   633k|    c = ls->c;
  105|   633k|    lex_savenext(ls);
  106|   633k|  }
  107|   163k|  lex_save(ls, '\0');
  108|   163k|  fmt = lj_strscan_scan((const uint8_t *)ls->sb.b, sbuflen(&ls->sb)-1, tv,
  ------------------
  |  |   36|   163k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  109|   163k|	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |  549|   163k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |   12|      0|#define STRSCAN_OPT_TOINT	0x01  /* Convert to int32_t, if possible. */
  ------------------
              	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |   13|   163k|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  110|   163k|	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |  585|   163k|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |   15|   163k|#define STRSCAN_OPT_LL		0x08
  ------------------
              	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |   14|   163k|#define STRSCAN_OPT_IMAG	0x04
  ------------------
  111|   163k|  if (LJ_DUALNUM && fmt == STRSCAN_INT) {
  ------------------
  |  |  549|   327k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (111:21): [True: 0, False: 0]
  ------------------
  112|      0|    setitype(tv, LJ_TISNUM);
  ------------------
  |  |  871|      0|#define setitype(o, i)		((o)->it = ((i) << 15))
  ------------------
  113|   163k|  } else if (fmt == STRSCAN_NUM) {
  ------------------
  |  Branch (113:14): [True: 42.5k, False: 121k]
  ------------------
  114|       |    /* Already in correct format. */
  115|  42.5k|#if LJ_HASFFI
  116|   121k|  } else if (fmt != STRSCAN_ERROR) {
  ------------------
  |  Branch (116:14): [True: 121k, False: 118]
  ------------------
  117|   121k|    lua_State *L = ls->L;
  118|   121k|    GCcdata *cd;
  119|   121k|    lj_assertLS(fmt == STRSCAN_I64 || fmt == STRSCAN_U64 || fmt == STRSCAN_IMAG,
  ------------------
  |  |   89|   121k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   121k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   467k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 8.40k, False: 112k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 3, False: 112k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 112k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   121k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  120|   121k|		"unexpected number format %d", fmt);
  121|   121k|    ctype_loadffi(L);
  ------------------
  |  |  398|   121k|  do { \
  |  |  399|   121k|    if (!ctype_ctsG(G(L))) { \
  |  |  ------------------
  |  |  |  |  386|   121k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   121k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (399:9): [True: 3.11k, False: 117k]
  |  |  ------------------
  |  |  400|  3.11k|      ptrdiff_t oldtop = (char *)L->top - mref(L->stack, char); \
  |  |  ------------------
  |  |  |  |   36|  3.11k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  401|  3.11k|      luaopen_ffi(L); \
  |  |  402|  3.11k|      L->top = (TValue *)(mref(L->stack, char) + oldtop); \
  |  |  ------------------
  |  |  |  |   36|  3.11k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  403|  3.11k|    } \
  |  |  404|   121k|  } while (0)
  |  |  ------------------
  |  |  |  Branch (404:12): [Folded - Ignored]
  |  |  ------------------
  ------------------
  122|   121k|    if (fmt == STRSCAN_IMAG) {
  ------------------
  |  Branch (122:9): [True: 112k, False: 8.41k]
  ------------------
  123|   112k|      cd = lj_cdata_new_(L, CTID_COMPLEX_DOUBLE, 2*sizeof(double));
  124|   112k|      ((double *)cdataptr(cd))[0] = 0;
  ------------------
  |  |  360|   112k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  125|   112k|      ((double *)cdataptr(cd))[1] = numV(tv);
  ------------------
  |  |  360|   112k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
                    ((double *)cdataptr(cd))[1] = numV(tv);
  ------------------
  |  |  866|   112k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|   112k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   112k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   112k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 112k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   112k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  126|   112k|    } else {
  127|  8.41k|      cd = lj_cdata_new_(L, fmt==STRSCAN_I64 ? CTID_INT64 : CTID_UINT64, 8);
  ------------------
  |  Branch (127:29): [True: 8.40k, False: 3]
  ------------------
  128|  8.41k|      *(uint64_t *)cdataptr(cd) = tv->u64;
  ------------------
  |  |  360|  8.41k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  129|  8.41k|    }
  130|   121k|    lj_parse_keepcdata(ls, tv, cd);
  131|   121k|#endif
  132|   121k|  } else {
  133|    118|    lj_assertLS(fmt == STRSCAN_ERROR,
  ------------------
  |  |   89|    118|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    118|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    118|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 118, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    118|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  134|    118|		"unexpected number format %d", fmt);
  135|    118|    lj_lex_error(ls, TK_number, LJ_ERR_XNUMBER);
  136|    118|  }
  137|   163k|}
lj_lex.c:lex_savenext:
   76|  5.97M|{
   77|  5.97M|  lex_save(ls, ls->c);
   78|  5.97M|  return lex_next(ls);
   79|  5.97M|}
lj_lex.c:lex_skipeq:
  141|   488k|{
  142|   488k|  int count = 0;
  143|   488k|  LexChar s = ls->c;
  144|   488k|  lj_assertLS(s == '[' || s == ']', "bad usage");
  ------------------
  |  |   89|   488k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   488k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   745k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 230k, False: 257k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 257k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   488k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  145|   488k|  while (lex_savenext(ls) == '=' && count < 0x20000000)
  ------------------
  |  Branch (145:10): [True: 496, False: 488k]
  |  Branch (145:37): [True: 496, False: 0]
  ------------------
  146|    496|    count++;
  147|   488k|  return (ls->c == s) ? count : (-count) - 1;
  ------------------
  |  Branch (147:10): [True: 449k, False: 38.6k]
  ------------------
  148|   488k|}
lj_lex.c:lex_longstring:
  152|   223k|{
  153|   223k|  lex_savenext(ls);  /* Skip second '['. */
  154|   223k|  if (lex_iseol(ls))  /* Skip initial newline. */
  ------------------
  |  |   43|   223k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 18.3k, False: 205k]
  |  |  |  Branch (43:42): [True: 994, False: 204k]
  |  |  ------------------
  ------------------
  155|  19.3k|    lex_newline(ls);
  156|  2.53M|  for (;;) {
  157|  2.53M|    switch (ls->c) {
  158|     17|    case LEX_EOF:
  ------------------
  |  |   42|     17|#define LEX_EOF			(-1)
  ------------------
  |  Branch (158:5): [True: 17, False: 2.53M]
  ------------------
  159|     17|      lj_lex_error(ls, TK_eof, tv ? LJ_ERR_XLSTR : LJ_ERR_XLCOM);
  ------------------
  |  Branch (159:32): [True: 17, False: 0]
  ------------------
  160|      0|      break;
  161|   257k|    case ']':
  ------------------
  |  Branch (161:5): [True: 257k, False: 2.27M]
  ------------------
  162|   257k|      if (lex_skipeq(ls) == sep) {
  ------------------
  |  Branch (162:11): [True: 223k, False: 33.5k]
  ------------------
  163|   223k|	lex_savenext(ls);  /* Skip second ']'. */
  164|   223k|	goto endloop;
  165|   223k|      }
  166|  33.5k|      break;
  167|   138k|    case '\n':
  ------------------
  |  Branch (167:5): [True: 138k, False: 2.39M]
  ------------------
  168|   141k|    case '\r':
  ------------------
  |  Branch (168:5): [True: 2.92k, False: 2.52M]
  ------------------
  169|   141k|      lex_save(ls, '\n');
  170|   141k|      lex_newline(ls);
  171|   141k|      if (!tv) lj_buf_reset(&ls->sb);  /* Don't waste space for comments. */
  ------------------
  |  Branch (171:11): [True: 239, False: 141k]
  ------------------
  172|   141k|      break;
  173|  2.13M|    default:
  ------------------
  |  Branch (173:5): [True: 2.13M, False: 399k]
  ------------------
  174|  2.13M|      lex_savenext(ls);
  175|  2.13M|      break;
  176|  2.53M|    }
  177|  2.53M|  } endloop:
  178|   223k|  if (tv) {
  ------------------
  |  Branch (178:7): [True: 223k, False: 205]
  ------------------
  179|   223k|    GCstr *str = lj_parse_keepstr(ls, ls->sb.b + (2 + (MSize)sep),
  180|   223k|				      sbuflen(&ls->sb) - 2*(2 + (MSize)sep));
  ------------------
  |  |   36|   223k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  181|   223k|    setstrV(ls->L, tv, str);
  182|   223k|  }
  183|   223k|}
lj_lex.c:lex_string:
  187|  22.9k|{
  188|  22.9k|  LexChar delim = ls->c;  /* Delimiter is '\'' or '"'. */
  189|  22.9k|  lex_savenext(ls);
  190|   117k|  while (ls->c != delim) {
  ------------------
  |  Branch (190:10): [True: 94.5k, False: 22.5k]
  ------------------
  191|  94.5k|    switch (ls->c) {
  192|      0|    case LEX_EOF:
  ------------------
  |  |   42|      0|#define LEX_EOF			(-1)
  ------------------
  |  Branch (192:5): [True: 0, False: 94.5k]
  ------------------
  193|      0|      lj_lex_error(ls, TK_eof, LJ_ERR_XSTR);
  194|      0|      continue;
  195|    297|    case '\n':
  ------------------
  |  Branch (195:5): [True: 297, False: 94.2k]
  ------------------
  196|    298|    case '\r':
  ------------------
  |  Branch (196:5): [True: 1, False: 94.5k]
  ------------------
  197|    298|      lj_lex_error(ls, TK_string, LJ_ERR_XSTR);
  198|      0|      continue;
  199|  6.01k|    case '\\': {
  ------------------
  |  Branch (199:5): [True: 6.01k, False: 88.5k]
  ------------------
  200|  6.01k|      LexChar c = lex_next(ls);  /* Skip the '\\'. */
  201|  6.01k|      switch (c) {
  202|    108|      case 'a': c = '\a'; break;
  ------------------
  |  Branch (202:7): [True: 108, False: 5.91k]
  ------------------
  203|     86|      case 'b': c = '\b'; break;
  ------------------
  |  Branch (203:7): [True: 86, False: 5.93k]
  ------------------
  204|    103|      case 'f': c = '\f'; break;
  ------------------
  |  Branch (204:7): [True: 103, False: 5.91k]
  ------------------
  205|    392|      case 'n': c = '\n'; break;
  ------------------
  |  Branch (205:7): [True: 392, False: 5.62k]
  ------------------
  206|    245|      case 'r': c = '\r'; break;
  ------------------
  |  Branch (206:7): [True: 245, False: 5.77k]
  ------------------
  207|     72|      case 't': c = '\t'; break;
  ------------------
  |  Branch (207:7): [True: 72, False: 5.94k]
  ------------------
  208|     80|      case 'v': c = '\v'; break;
  ------------------
  |  Branch (208:7): [True: 80, False: 5.93k]
  ------------------
  209|    185|      case 'x':  /* Hexadecimal escape '\xXX'. */
  ------------------
  |  Branch (209:7): [True: 185, False: 5.83k]
  ------------------
  210|    185|	c = (lex_next(ls) & 15u) << 4;
  211|    185|	if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|    185|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    185|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (211:6): [True: 67, False: 118]
  ------------------
  212|     67|	  if (!lj_char_isxdigit(ls->c)) goto err_xesc;
  ------------------
  |  |   29|     67|#define lj_char_isxdigit(c)	lj_char_isa((c), LJ_CHAR_XDIGIT)
  |  |  ------------------
  |  |  |  |   24|     67|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (212:8): [True: 1, False: 66]
  ------------------
  213|     66|	  c += 9 << 4;
  214|     66|	}
  215|    184|	c += (lex_next(ls) & 15u);
  216|    184|	if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|    184|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    184|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (216:6): [True: 68, False: 116]
  ------------------
  217|     68|	  if (!lj_char_isxdigit(ls->c)) goto err_xesc;
  ------------------
  |  |   29|     68|#define lj_char_isxdigit(c)	lj_char_isa((c), LJ_CHAR_XDIGIT)
  |  |  ------------------
  |  |  |  |   24|     68|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (217:8): [True: 2, False: 66]
  ------------------
  218|     66|	  c += 9;
  219|     66|	}
  220|    182|	break;
  221|  1.17k|      case 'u':  /* Unicode escape '\u{XX...}'. */
  ------------------
  |  Branch (221:7): [True: 1.17k, False: 4.84k]
  ------------------
  222|  1.17k|	if (lex_next(ls) != '{') goto err_xesc;
  ------------------
  |  Branch (222:6): [True: 1, False: 1.17k]
  ------------------
  223|  1.17k|	lex_next(ls);
  224|  1.17k|	c = 0;
  225|  3.77k|	do {
  226|  3.77k|	  c = (c << 4) | (ls->c & 15u);
  227|  3.77k|	  if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|  3.77k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  3.77k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (227:8): [True: 2.97k, False: 801]
  ------------------
  228|  2.97k|	    if (!lj_char_isxdigit(ls->c)) goto err_xesc;
  ------------------
  |  |   29|  2.97k|#define lj_char_isxdigit(c)	lj_char_isa((c), LJ_CHAR_XDIGIT)
  |  |  ------------------
  |  |  |  |   24|  2.97k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (228:10): [True: 29, False: 2.94k]
  ------------------
  229|  2.94k|	    c += 9;
  230|  2.94k|	  }
  231|  3.74k|	  if (c >= 0x110000) goto err_xesc;  /* Out of Unicode range. */
  ------------------
  |  Branch (231:8): [True: 1, False: 3.74k]
  ------------------
  232|  3.74k|	} while (lex_next(ls) != '}');
  ------------------
  |  Branch (232:11): [True: 2.59k, False: 1.14k]
  ------------------
  233|  1.14k|	if (c < 0x800) {
  ------------------
  |  Branch (233:6): [True: 685, False: 459]
  ------------------
  234|    685|	  if (c < 0x80) break;
  ------------------
  |  Branch (234:8): [True: 199, False: 486]
  ------------------
  235|    486|	  lex_save(ls, 0xc0 | (c >> 6));
  236|    486|	} else {
  237|    459|	  if (c >= 0x10000) {
  ------------------
  |  Branch (237:8): [True: 191, False: 268]
  ------------------
  238|    191|	    lex_save(ls, 0xf0 | (c >> 18));
  239|    191|	    lex_save(ls, 0x80 | ((c >> 12) & 0x3f));
  240|    268|	  } else {
  241|    268|	    if (c >= 0xd800 && c < 0xe000) goto err_xesc;  /* No surrogates. */
  ------------------
  |  Branch (241:10): [True: 2, False: 266]
  |  Branch (241:25): [True: 1, False: 1]
  ------------------
  242|    267|	    lex_save(ls, 0xe0 | (c >> 12));
  243|    267|	  }
  244|    458|	  lex_save(ls, 0x80 | ((c >> 6) & 0x3f));
  245|    458|	}
  246|    944|	c = 0x80 | (c & 0x3f);
  247|    944|	break;
  248|    261|      case 'z':  /* Skip whitespace. */
  ------------------
  |  Branch (248:7): [True: 261, False: 5.75k]
  ------------------
  249|    261|	lex_next(ls);
  250|    261|	while (lj_char_isspace(ls->c))
  251|  1.26k|	  if (lex_iseol(ls)) lex_newline(ls); else lex_next(ls);
  ------------------
  |  |   43|  1.26k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 315, False: 952]
  |  |  |  Branch (43:42): [True: 110, False: 842]
  |  |  ------------------
  ------------------
  252|    261|	continue;
  253|    189|      case '\n': case '\r': lex_save(ls, '\n'); lex_newline(ls); continue;
  ------------------
  |  Branch (253:7): [True: 70, False: 5.94k]
  |  Branch (253:18): [True: 119, False: 5.89k]
  ------------------
  254|  1.74k|      case '\\': case '\"': case '\'': break;
  ------------------
  |  Branch (254:7): [True: 718, False: 5.30k]
  |  Branch (254:18): [True: 631, False: 5.38k]
  |  Branch (254:29): [True: 394, False: 5.62k]
  ------------------
  255|      0|      case LEX_EOF: continue;
  ------------------
  |  |   42|      0|#define LEX_EOF			(-1)
  ------------------
  |  Branch (255:7): [True: 0, False: 6.01k]
  ------------------
  256|  1.37k|      default:
  ------------------
  |  Branch (256:7): [True: 1.37k, False: 4.63k]
  ------------------
  257|  1.37k|	if (!lj_char_isdigit(c))
  ------------------
  |  |   28|  1.37k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  1.37k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (257:6): [True: 11, False: 1.36k]
  ------------------
  258|     11|	  goto err_xesc;
  259|  1.36k|	c -= '0';  /* Decimal escape '\ddd'. */
  260|  1.36k|	if (lj_char_isdigit(lex_next(ls))) {
  ------------------
  |  |   28|  1.36k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  1.36k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 1.19k, False: 172]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  261|  1.19k|	  c = c*10 + (ls->c - '0');
  262|  1.19k|	  if (lj_char_isdigit(lex_next(ls))) {
  ------------------
  |  |   28|  1.19k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  1.19k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 1.12k, False: 74]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  263|  1.12k|	    c = c*10 + (ls->c - '0');
  264|  1.12k|	    if (c > 255) {
  ------------------
  |  Branch (264:10): [True: 1, False: 1.12k]
  ------------------
  265|     47|	    err_xesc:
  266|     47|	      lj_lex_error(ls, TK_string, LJ_ERR_XESC);
  267|      1|	    }
  268|  1.12k|	    lex_next(ls);
  269|  1.12k|	  }
  270|  1.19k|	}
  271|  1.36k|	lex_save(ls, c);
  272|  1.36k|	continue;
  273|  6.01k|      }
  274|  4.15k|      lex_save(ls, c);
  275|  4.15k|      lex_next(ls);
  276|  4.15k|      continue;
  277|  6.01k|      }
  278|  88.2k|    default:
  ------------------
  |  Branch (278:5): [True: 88.2k, False: 6.31k]
  ------------------
  279|  88.2k|      lex_savenext(ls);
  280|  88.2k|      break;
  281|  94.5k|    }
  282|  94.5k|  }
  283|  22.5k|  lex_savenext(ls);  /* Skip trailing delimiter. */
  284|  22.5k|  setstrV(ls->L, tv,
  285|  22.5k|	  lj_parse_keepstr(ls, ls->sb.b+1, sbuflen(&ls->sb)-2));
  ------------------
  |  |   36|  22.5k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  286|  22.5k|}
lj_lex.c:lex_save:
   70|  6.29M|{
   71|  6.29M|  lj_buf_putb(&ls->sb, c);
   72|  6.29M|}

lj_lib_register:
   77|   268k|{
   78|   268k|  GCtab *env = tabref(L->env);
  ------------------
  |  |  514|   268k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   268k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   79|   268k|  GCfunc *ofn = NULL;
   80|   268k|  int ffid = *p++;
   81|   268k|  BCIns *bcff = &L2GG(L)->bcff[*p++];
  ------------------
  |  |  114|   268k|#define L2GG(L)		(G2GG(G(L)))
  |  |  ------------------
  |  |  |  |  112|   268k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|   268k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   82|   268k|  GCtab *tab = lib_create_table(L, libname, *p++);
   83|   268k|  ptrdiff_t tpos = L->top - L->base;
   84|       |
   85|       |  /* Avoid barriers further down. */
   86|   268k|  lj_gc_anybarriert(L, tab);
  ------------------
  |  |   95|   268k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|   268k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   87|   268k|  tab->nomm = 0;
   88|       |
   89|  4.71M|  for (;;) {
   90|  4.71M|    uint32_t tag = *p++;
   91|  4.71M|    MSize len = tag & LIBINIT_LENMASK;
  ------------------
  |  |  102|  4.71M|#define LIBINIT_LENMASK	0x3f
  ------------------
   92|  4.71M|    tag &= LIBINIT_TAGMASK;
  ------------------
  |  |  103|  4.71M|#define LIBINIT_TAGMASK	0xc0
  ------------------
   93|  4.71M|    if (tag != LIBINIT_STRING) {
  ------------------
  |  |  107|  4.71M|#define LIBINIT_STRING	0xc0
  ------------------
  |  Branch (93:9): [True: 3.11M, False: 1.60M]
  ------------------
   94|  3.11M|      const char *name;
   95|  3.11M|      MSize nuv = (MSize)(L->top - L->base - tpos);
   96|  3.11M|      GCfunc *fn = lj_func_newC(L, nuv, env);
   97|  3.11M|      if (nuv) {
  ------------------
  |  Branch (97:11): [True: 124k, False: 2.98M]
  ------------------
   98|   124k|	L->top = L->base + tpos;
   99|   124k|	memcpy(fn->c.upvalue, L->top, sizeof(TValue)*nuv);
  100|   124k|      }
  101|  3.11M|      fn->c.ffid = (uint8_t)(ffid++);
  102|  3.11M|      name = (const char *)p;
  103|  3.11M|      p += len;
  104|  3.11M|      if (tag == LIBINIT_CF)
  ------------------
  |  |  104|  3.11M|#define LIBINIT_CF	0x00
  ------------------
  |  Branch (104:11): [True: 2.11M, False: 998k]
  ------------------
  105|  2.11M|	setmref(fn->c.pc, &G(L)->bc_cfunc_int);
  ------------------
  |  |   39|  2.11M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  106|   998k|      else
  107|   998k|	setmref(fn->c.pc, bcff++);
  ------------------
  |  |   39|   998k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|  3.11M|      if (tag == LIBINIT_ASM_)
  ------------------
  |  |  106|  3.11M|#define LIBINIT_ASM_	0x80
  ------------------
  |  Branch (108:11): [True: 517k, False: 2.59M]
  ------------------
  109|   517k|	fn->c.f = ofn->c.f;  /* Copy handler from previous function. */
  110|  2.59M|      else
  111|  2.59M|	fn->c.f = *cf++;  /* Get cf or handler from C function table. */
  112|  3.11M|      if (len) {
  ------------------
  |  Branch (112:11): [True: 3.09M, False: 17.8k]
  ------------------
  113|       |	/* NOBARRIER: See above for common barrier. */
  114|  3.09M|	setfuncV(L, lj_tab_setstr(L, tab, lj_str_new(L, name, len)), fn);
  115|  3.09M|      }
  116|  3.11M|      ofn = fn;
  117|  3.11M|    } else {
  118|  1.60M|      switch (tag | len) {
  119|   142k|      case LIBINIT_LUA:
  ------------------
  |  |  109|   142k|#define LIBINIT_LUA	0xf9
  ------------------
  |  Branch (119:7): [True: 142k, False: 1.46M]
  ------------------
  120|   142k|	p = lib_read_lfunc(L, p, tab);
  121|   142k|	break;
  122|   255k|      case LIBINIT_SET:
  ------------------
  |  |  110|   255k|#define LIBINIT_SET	0xfa
  ------------------
  |  Branch (122:7): [True: 255k, False: 1.34M]
  ------------------
  123|   255k|	L->top -= 2;
  124|   510k|	if (tvisstr(L->top+1) && strV(L->top+1)->len == 0)
  ------------------
  |  |  795|   510k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   255k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   255k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 255k, False: 0]
  |  |  ------------------
  ------------------
              	if (tvisstr(L->top+1) && strV(L->top+1)->len == 0)
  ------------------
  |  |  859|   255k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   255k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   255k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   255k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 255k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   255k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (124:27): [True: 44.9k, False: 210k]
  ------------------
  125|  44.9k|	  env = tabV(L->top);
  ------------------
  |  |  864|  44.9k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  44.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  44.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  44.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 44.9k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  44.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  126|   210k|	else  /* NOBARRIER: See above for common barrier. */
  127|   210k|	  copyTV(L, lj_tab_set(L, tab, L->top+1), L->top);
  128|   255k|	break;
  129|   255k|      case LIBINIT_NUMBER:
  ------------------
  |  |  111|  35.6k|#define LIBINIT_NUMBER	0xfb
  ------------------
  |  Branch (129:7): [True: 35.6k, False: 1.56M]
  ------------------
  130|  35.6k|	memcpy(&L->top->n, p, sizeof(double));
  131|  35.6k|	L->top++;
  132|  35.6k|	p += sizeof(double);
  133|  35.6k|	break;
  134|   295k|      case LIBINIT_COPY:
  ------------------
  |  |  112|   295k|#define LIBINIT_COPY	0xfc
  ------------------
  |  Branch (134:7): [True: 295k, False: 1.30M]
  ------------------
  135|   295k|	copyTV(L, L->top, L->top - *p++);
  136|   295k|	L->top++;
  137|   295k|	break;
  138|  35.6k|      case LIBINIT_LASTCL:
  ------------------
  |  |  113|  35.6k|#define LIBINIT_LASTCL	0xfd
  ------------------
  |  Branch (138:7): [True: 35.6k, False: 1.56M]
  ------------------
  139|  35.6k|	setfuncV(L, L->top++, ofn);
  140|  35.6k|	break;
  141|  71.3k|      case LIBINIT_FFID:
  ------------------
  |  |  114|  71.3k|#define LIBINIT_FFID	0xfe
  ------------------
  |  Branch (141:7): [True: 71.3k, False: 1.53M]
  ------------------
  142|  71.3k|	ffid++;
  143|  71.3k|	break;
  144|   268k|      case LIBINIT_END:
  ------------------
  |  |  115|   268k|#define LIBINIT_END	0xff
  ------------------
  |  Branch (144:7): [True: 268k, False: 1.33M]
  ------------------
  145|   268k|	return;
  146|   500k|      default:
  ------------------
  |  Branch (146:7): [True: 500k, False: 1.10M]
  ------------------
  147|   500k|	setstrV(L, L->top++, lj_str_new(L, (const char *)p, len));
  148|   500k|	p += len;
  149|   500k|	break;
  150|  1.60M|      }
  151|  1.60M|    }
  152|  4.71M|  }
  153|   268k|}
lj_lib_pushcc:
  157|  89.1k|{
  158|  89.1k|  GCfunc *fn;
  159|  89.1k|  lua_pushcclosure(L, f, n);
  160|  89.1k|  fn = funcV(L->top-1);
  ------------------
  |  |  860|  89.1k|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|  89.1k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  89.1k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  89.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 89.1k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  89.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  161|      0|  fn->c.ffid = (uint8_t)id;
  162|  89.1k|  setmref(fn->c.pc, &G(L)->bc_cfunc_int);
  ------------------
  |  |   39|  89.1k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  163|  89.1k|  return fn;
  164|  89.1k|}
lj_lib_prereg:
  167|  89.1k|{
  168|  89.1k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_PRELOAD", 4);
  ------------------
  |  |   36|  89.1k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  169|  89.1k|  lua_pushcfunction(L, f);
  ------------------
  |  |  262|  89.1k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  170|       |  /* NOBARRIER: The function is new (marked white). */
  171|  89.1k|  setgcref(funcV(L->top-1)->c.env, obj2gco(env));
  ------------------
  |  |   72|   178k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 89.1k, False: 0]
  |  |  ------------------
  ------------------
  172|      0|  lua_setfield(L, -2, name);
  173|  89.1k|  L->top--;
  174|  89.1k|}
lj_lib_checkstr:
  197|  11.0k|{
  198|  11.0k|  TValue *o = L->base + narg-1;
  199|  11.0k|  if (o < L->top) {
  ------------------
  |  Branch (199:7): [True: 11.0k, False: 0]
  ------------------
  200|  11.0k|    if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|  11.0k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 11.0k, False: 0]
  |  |  ------------------
  ------------------
  201|  11.0k|      return strV(o);
  ------------------
  |  |  859|  11.0k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  11.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  11.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  11.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 11.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  11.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  202|  11.0k|    } else if (tvisnumber(o)) {
  ------------------
  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  203|      0|      GCstr *s = lj_strfmt_number(L, o);
  204|      0|      setstrV(L, o, s);
  205|      0|      return s;
  206|      0|    }
  207|  11.0k|  }
  208|      0|  lj_err_argt(L, narg, LUA_TSTRING);
  ------------------
  |  |   79|      0|#define LUA_TSTRING		4
  ------------------
  209|      0|  return NULL;  /* unreachable */
  210|  11.0k|}
lj_lib.c:lib_create_table:
   32|   268k|{
   33|   268k|  if (libname) {
  ------------------
  |  Branch (33:7): [True: 196k, False: 72.0k]
  ------------------
   34|   196k|    luaL_findtable(L, LUA_REGISTRYINDEX, "_LOADED", 16);
  ------------------
  |  |   36|   196k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
   35|   196k|    lua_getfield(L, -1, libname);
   36|   196k|    if (!tvistab(L->top-1)) {
  ------------------
  |  |  800|   196k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|   196k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|   196k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  ------------------
  |  Branch (36:9): [True: 196k, False: 0]
  ------------------
   37|   196k|      L->top--;
   38|   196k|      if (luaL_findtable(L, LUA_GLOBALSINDEX, libname, hsize) != NULL)
  ------------------
  |  |   38|   196k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (38:11): [True: 0, False: 196k]
  ------------------
   39|      0|	lj_err_callerv(L, LJ_ERR_BADMODN, libname);
   40|   196k|      settabV(L, L->top, tabV(L->top-1));
  ------------------
  |  |  864|   196k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   196k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   196k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   196k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 196k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   196k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   41|      0|      L->top++;
   42|   196k|      lua_setfield(L, -3, libname);  /* _LOADED[libname] = new table */
   43|   196k|    }
   44|   196k|    L->top--;
   45|   196k|    settabV(L, L->top-1, tabV(L->top));
  ------------------
  |  |  864|   196k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   196k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   196k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   196k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 196k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   196k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   46|   196k|  } else {
   47|  72.0k|    lua_createtable(L, 0, hsize);
   48|  72.0k|  }
   49|   268k|  return tabV(L->top-1);
  ------------------
  |  |  864|   268k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   268k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   268k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   268k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 268k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   268k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   50|   268k|}
lj_lib.c:lib_read_lfunc:
   53|   142k|{
   54|   142k|  int len = *p++;
   55|   142k|  GCstr *name = lj_str_new(L, (const char *)p, len);
   56|   142k|  LexState ls;
   57|   142k|  GCproto *pt;
   58|   142k|  GCfunc *fn;
   59|   142k|  memset(&ls, 0, sizeof(ls));
   60|   142k|  ls.L = L;
   61|   142k|  ls.p = (const char *)(p+len);
   62|   142k|  ls.pe = (const char *)~(uintptr_t)0;
   63|   142k|  ls.c = -1;
   64|   142k|  ls.level = (BCDUMP_F_STRIP|(LJ_BE*BCDUMP_F_BE));
  ------------------
  |  |   43|   142k|#define BCDUMP_F_STRIP		0x02
  ------------------
                ls.level = (BCDUMP_F_STRIP|(LJ_BE*BCDUMP_F_BE));
  ------------------
  |  |  630|   142k|#define LJ_BE			0
  ------------------
                ls.level = (BCDUMP_F_STRIP|(LJ_BE*BCDUMP_F_BE));
  ------------------
  |  |   42|   142k|#define BCDUMP_F_BE		0x01
  ------------------
   65|   142k|  ls.fr2 = LJ_FR2;
  ------------------
  |  |  569|   142k|#define LJ_FR2			1
  ------------------
   66|   142k|  ls.chunkname = name;
   67|   142k|  pt = lj_bcread_proto(&ls);
   68|   142k|  pt->firstline = ~(BCLine)0;
   69|   142k|  fn = lj_func_newL_empty(L, pt, tabref(L->env));
  ------------------
  |  |  514|   142k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   142k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   70|       |  /* NOBARRIER: See below for common barrier. */
   71|   142k|  setfuncV(L, lj_tab_setstr(L, tab, name), fn);
   72|   142k|  return (const uint8_t *)ls.p;
   73|   142k|}

lua_loadx:
   64|  17.8k|{
   65|  17.8k|  LexState ls;
   66|  17.8k|  int status;
   67|  17.8k|  ls.rfunc = reader;
   68|  17.8k|  ls.rdata = data;
   69|  17.8k|  ls.chunkarg = chunkname ? chunkname : "?";
  ------------------
  |  Branch (69:17): [True: 17.8k, False: 0]
  ------------------
   70|  17.8k|  ls.mode = mode;
   71|  17.8k|  lj_buf_init(L, &ls.sb);
   72|  17.8k|  status = lj_vm_cpcall(L, NULL, &ls, cpparser);
   73|  17.8k|  lj_lex_cleanup(L, &ls);
   74|  17.8k|  lj_gc_check(L);
  ------------------
  |  |   66|  17.8k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  17.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 229, False: 17.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  17.8k|      lj_gc_step(L); }
  ------------------
   75|  17.8k|  return status;
   76|  17.8k|}
luaL_loadbufferx:
  155|  17.8k|{
  156|  17.8k|  StringReaderCtx ctx;
  157|  17.8k|  ctx.str = buf;
  158|  17.8k|  ctx.size = size;
  159|  17.8k|  return lua_loadx(L, reader_string, &ctx, name, mode);
  160|  17.8k|}
luaL_loadbuffer:
  164|  17.8k|{
  165|  17.8k|  return luaL_loadbufferx(L, buf, size, name, NULL);
  166|  17.8k|}
lj_load.c:cpparser:
   29|  17.8k|{
   30|  17.8k|  LexState *ls = (LexState *)ud;
   31|  17.8k|  GCproto *pt;
   32|  17.8k|  GCfunc *fn;
   33|  17.8k|  int bc;
   34|  17.8k|  UNUSED(dummy);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
   35|  17.8k|  cframe_errfunc(L->cframe) = -1;  /* Inherit error function. */
  ------------------
  |  |  279|  17.8k|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|  17.8k|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
   36|  17.8k|  bc = lj_lex_setup(L, ls);
   37|  17.8k|  if (ls->mode) {
  ------------------
  |  Branch (37:7): [True: 0, False: 17.8k]
  ------------------
   38|      0|    int xmode = 1;
   39|      0|    const char *mode = ls->mode;
   40|      0|    char c;
   41|      0|    while ((c = *mode++)) {
  ------------------
  |  Branch (41:12): [True: 0, False: 0]
  ------------------
   42|      0|      if (c == (bc ? 'b' : 't')) xmode = 0;
  ------------------
  |  Branch (42:11): [True: 0, False: 0]
  |  Branch (42:17): [True: 0, False: 0]
  ------------------
   43|      0|      if (c == (LJ_FR2 ? 'W' : 'X')) ls->fr2 = !LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (c == (LJ_FR2 ? 'W' : 'X')) ls->fr2 = !LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  |  Branch (43:11): [True: 0, False: 0]
  ------------------
   44|      0|    }
   45|      0|    if (xmode) {
  ------------------
  |  Branch (45:9): [True: 0, False: 0]
  ------------------
   46|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_XMODE));
   47|      0|      lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|      0|#define LUA_ERRSYNTAX	3
  ------------------
   48|      0|    }
   49|      0|  }
   50|  17.8k|  pt = bc ? lj_bcread(ls) : lj_parse(ls);
  ------------------
  |  Branch (50:8): [True: 0, False: 17.8k]
  ------------------
   51|  17.8k|  if (ls->fr2 == LJ_FR2) {
  ------------------
  |  |  569|  17.8k|#define LJ_FR2			1
  ------------------
  |  Branch (51:7): [True: 11.0k, False: 6.74k]
  ------------------
   52|  11.0k|    fn = lj_func_newL_empty(L, pt, tabref(L->env));
  ------------------
  |  |  514|  11.0k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  11.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   53|       |    /* Don't combine above/below into one statement. */
   54|  11.0k|    setfuncV(L, L->top++, fn);
   55|  11.0k|  } else {
   56|       |    /* Non-native generation returns a dumpable, but non-runnable prototype. */
   57|  6.74k|    setprotoV(L, L->top++, pt);
   58|  6.74k|  }
   59|  17.8k|  return NULL;
   60|  17.8k|}
lj_load.c:reader_string:
  144|  31.6k|{
  145|  31.6k|  StringReaderCtx *ctx = (StringReaderCtx *)ud;
  146|  31.6k|  UNUSED(L);
  ------------------
  |  |   91|  31.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  147|  31.6k|  if (ctx->size == 0) return NULL;
  ------------------
  |  Branch (147:7): [True: 13.8k, False: 17.8k]
  ------------------
  148|  17.8k|  *size = ctx->size;
  149|  17.8k|  ctx->size = 0;
  150|  17.8k|  return ctx->str;
  151|  31.6k|}

lj_mcode_free:
  306|  17.8k|{
  307|  17.8k|  MCode *mc = J->mcarea;
  308|  17.8k|  J->mcarea = NULL;
  309|  17.8k|  J->szallmcarea = 0;
  310|  17.8k|  while (mc) {
  ------------------
  |  Branch (310:10): [True: 0, False: 17.8k]
  ------------------
  311|      0|    MCode *next = ((MCLink *)mc)->next;
  312|      0|    size_t sz = ((MCLink *)mc)->size;
  313|      0|    lj_err_deregister_mcode(mc, sz, (uint8_t *)mc + sizeof(MCLink));
  314|      0|    mcode_free(J, mc, sz);
  315|      0|    mc = next;
  316|      0|  }
  317|  17.8k|}

lj_meta_init:
   30|  17.8k|{
   31|  17.8k|#define MMNAME(name)	"__" #name
   32|  17.8k|  const char *metanames = MMDEF(MMNAME);
  ------------------
  |  |  557|  17.8k|  _(index) _(newindex) _(gc) _(mode) _(eq) _(len) \
  |  |  ------------------
  |  |  |  |   32|  17.8k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|  17.8k|#define MMNAME(name)	"__" #name
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  558|  17.8k|  /* Only the above (fast) metamethods are negative cached (max. 8). */ \
  |  |  559|  17.8k|  _(lt) _(le) _(concat) _(call) \
  |  |  560|  17.8k|  /* The following must be in ORDER ARITH. */ \
  |  |  561|  17.8k|  _(add) _(sub) _(mul) _(div) _(mod) _(pow) _(unm) \
  |  |  562|  17.8k|  /* The following are used in the standard libraries. */ \
  |  |  563|  17.8k|  _(metatable) _(tostring) MMDEF_FFI(_) MMDEF_PAIRS(_)
  |  |  ------------------
  |  |  |  |  549|  17.8k|#define MMDEF_PAIRS(_) _(pairs) _(ipairs)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  17.8k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   31|  17.8k|#define MMNAME(name)	"__" #name
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   33|  17.8k|#undef MMNAME
   34|  17.8k|  global_State *g = G(L);
  ------------------
  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   35|  17.8k|  const char *p, *q;
   36|  17.8k|  uint32_t mm;
   37|   410k|  for (mm = 0, p = metanames; *p; mm++, p = q) {
  ------------------
  |  Branch (37:31): [True: 392k, False: 17.8k]
  ------------------
   38|   392k|    GCstr *s;
   39|  1.99M|    for (q = p+2; *q && *q != '_'; q++) ;
  ------------------
  |  Branch (39:19): [True: 1.97M, False: 17.8k]
  |  Branch (39:25): [True: 1.60M, False: 374k]
  ------------------
   40|   392k|    s = lj_str_new(L, p, (size_t)(q-p));
   41|       |    /* NOBARRIER: g->gcroot[] is a GC root. */
   42|   392k|    setgcref(g->gcroot[GCROOT_MMNAME+mm], obj2gco(s));
  ------------------
  |  |   72|   392k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   43|   392k|  }
   44|  17.8k|}
lj_meta_cache:
   48|   147k|{
   49|   147k|  cTValue *mo = lj_tab_getstr(mt, name);
   50|   147k|  lj_assertX(mm <= MM_FAST, "bad metamethod %d", mm);
  ------------------
  |  |  366|   147k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   147k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 147k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   147k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   51|   147k|  if (!mo || tvisnil(mo)) {  /* No metamethod? */
  ------------------
  |  |  782|   147k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 0, False: 147k]
  ------------------
   52|      0|    mt->nomm |= (uint8_t)(1u<<mm);  /* Set negative cache flag. */
   53|      0|    return NULL;
   54|      0|  }
   55|   147k|  return mo;
   56|   147k|}
lj_meta_tget:
  136|   295k|{
  137|   295k|  int loop;
  138|   295k|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|   295k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (138:18): [True: 295k, False: 0]
  ------------------
  139|   295k|    cTValue *mo;
  140|   295k|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|   295k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 295k, False: 0]
  |  |  ------------------
  ------------------
  141|   295k|      GCtab *t = tabV(o);
  ------------------
  |  |  864|   295k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   295k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   295k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   295k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 295k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   295k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  142|      0|      cTValue *tv = lj_tab_get(L, t, k);
  143|   295k|      if (!tvisnil(tv) ||
  ------------------
  |  |  782|   591k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (143:11): [True: 53.5k, False: 242k]
  ------------------
  144|   295k|	  !(mo = lj_meta_fast(L, tabref(t->metatable), MM_index)))
  ------------------
  |  |   22|   242k|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|   242k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 242k, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (144:4): [True: 242k, False: 0]
  ------------------
  145|   295k|	return tv;
  146|   295k|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_index))) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  147|      0|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  148|      0|      return NULL;  /* unreachable */
  149|      0|    }
  150|      0|    if (tvisfunc(mo)) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  151|      0|      L->top = mmcall(L, lj_cont_ra, mo, o, k);
  152|      0|      return NULL;  /* Trigger metamethod call. */
  153|      0|    }
  154|      0|    o = mo;
  155|      0|  }
  156|      0|  lj_err_msg(L, LJ_ERR_GETLOOP);
  157|      0|  return NULL;  /* unreachable */
  158|   295k|}
lj_meta_tset:
  162|   877k|{
  163|   877k|  TValue tmp;
  164|   877k|  int loop;
  165|   877k|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|   877k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (165:18): [True: 877k, False: 0]
  ------------------
  166|   877k|    cTValue *mo;
  167|   877k|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|   877k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 877k, False: 0]
  |  |  ------------------
  ------------------
  168|   877k|      GCtab *t = tabV(o);
  ------------------
  |  |  864|   877k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   877k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   877k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   877k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 877k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   877k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  169|      0|      cTValue *tv = lj_tab_get(L, t, k);
  170|   877k|      if (LJ_LIKELY(!tvisnil(tv))) {
  ------------------
  |  |  145|   877k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 10.4k, False: 866k]
  |  |  ------------------
  ------------------
  171|  10.4k|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  172|  10.4k|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|  10.4k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  10.4k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 10.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|  10.4k|	return (TValue *)tv;
  174|   866k|      } else if (!(mo = lj_meta_fast(L, tabref(t->metatable), MM_newindex))) {
  ------------------
  |  |   22|   866k|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|   866k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 866k, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (174:18): [True: 866k, False: 0]
  ------------------
  175|   866k|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  176|   866k|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|   866k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|   866k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 126, False: 866k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|    126|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    126|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|   866k|	if (tv != niltv(L))
  ------------------
  |  |  667|   866k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|   866k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   866k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   866k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 866k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   866k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (177:6): [True: 0, False: 866k]
  ------------------
  178|      0|	  return (TValue *)tv;
  179|   866k|	if (tvisnil(k)) lj_err_msg(L, LJ_ERR_NILIDX);
  ------------------
  |  |  782|   866k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 866k]
  |  |  ------------------
  ------------------
  180|   866k|	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  803|   866k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  1.73M|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [Folded - Ignored]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  181|   866k|	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  804|  1.73M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   866k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   866k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   866k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 866k]
  |  |  ------------------
  ------------------
              	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  812|      0|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  182|   866k|	return lj_tab_newkey(L, t, k);
  183|   866k|      }
  184|   877k|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_newindex))) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  185|      0|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  186|      0|      return NULL;  /* unreachable */
  187|      0|    }
  188|      0|    if (tvisfunc(mo)) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  189|      0|      L->top = mmcall(L, lj_cont_nop, mo, o, k);
  190|       |      /* L->top+2 = v filled in by caller. */
  191|      0|      return NULL;  /* Trigger metamethod call. */
  192|      0|    }
  193|      0|    copyTV(L, &tmp, mo);
  194|      0|    o = &tmp;
  195|      0|  }
  196|      0|  lj_err_msg(L, LJ_ERR_SETLOOP);
  197|      0|  return NULL;  /* unreachable */
  198|   877k|}

lj_obj_equal:
   24|   874k|{
   25|   874k|  if (itype(o1) == itype(o2)) {
  ------------------
  |  |  781|   874k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
                if (itype(o1) == itype(o2)) {
  ------------------
  |  |  781|   874k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  |  Branch (25:7): [True: 630k, False: 243k]
  ------------------
   26|   630k|    if (tvispri(o1))
  ------------------
  |  |  807|   630k|#define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  781|   630k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  283|   630k|#define LJ_TISPRI		LJ_TTRUE
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|   630k|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (807:20): [True: 0, False: 630k]
  |  |  ------------------
  ------------------
   27|      0|      return 1;
   28|   630k|    if (!tvisnum(o1))
  ------------------
  |  |  804|   630k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   630k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   630k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   630k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (28:9): [True: 625k, False: 5.33k]
  ------------------
   29|   625k|      return gcrefeq(o1->gcr, o2->gcr);
  ------------------
  |  |   70|   625k|#define gcrefeq(r1, r2)	((r1).gcptr64 == (r2).gcptr64)
  ------------------
   30|   630k|  } else if (!tvisnumber(o1) || !tvisnumber(o2)) {
  ------------------
  |  |  802|   487k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   243k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   243k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   243k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                } else if (!tvisnumber(o1) || !tvisnumber(o2)) {
  ------------------
  |  |  802|  3.38k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  3.38k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  3.38k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  3.38k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (30:14): [True: 240k, False: 3.38k]
  |  Branch (30:33): [True: 1.02k, False: 2.36k]
  ------------------
   31|   241k|    return 0;
   32|   241k|  }
   33|  7.69k|  return numberVnum(o1) == numberVnum(o2);
   34|   874k|}

lj_state.c:setgcVraw:
  918|  35.6k|{
  919|  35.6k|#if LJ_GC64
  920|  35.6k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  35.6k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  35.6k|}
lj_state.c:setgcV:
  927|  35.6k|{
  928|  35.6k|  setgcVraw(o, v, it);
  929|  35.6k|  checklivetv(L, o, "store to dead GC object");
  930|  35.6k|}
lj_state.c:checklivetv:
  904|  35.6k|{
  905|  35.6k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  35.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  35.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  35.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  35.6k|#if LUA_USE_ASSERT
  907|  35.6k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  35.6k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  35.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  35.6k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  35.6k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  35.6k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  35.6k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  35.6k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 35.6k, False: 0]
  |  |  ------------------
  ------------------
  908|  35.6k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  35.6k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  35.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 35.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  35.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  35.6k|	       "mismatch of TValue type %d vs GC type %d",
  910|  35.6k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  35.6k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  35.6k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  35.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 35.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  35.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  35.6k|  }
  914|  35.6k|#endif
  915|  35.6k|}
lj_state.c:settabV:
  933|  17.8k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  17.8k|{ \
  935|  17.8k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  17.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  17.8k|}
lj_state.c:setthreadV:
  933|  17.8k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  17.8k|{ \
  935|  17.8k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  17.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  17.8k|}
lj_api.c:copyTV:
  975|  3.61M|{
  976|  3.61M|  *o1 = *o2;
  977|  3.61M|  checklivetv(L, o1, "copy of dead GC object");
  978|  3.61M|}
lj_api.c:checklivetv:
  904|  6.93M|{
  905|  6.93M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  6.93M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  6.93M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  6.93M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  6.93M|#if LUA_USE_ASSERT
  907|  6.93M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  6.93M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  6.93M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  6.93M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  6.93M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  6.93M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  6.93M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  6.93M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 6.43M, False: 502k]
  |  |  ------------------
  ------------------
  908|  6.43M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  6.43M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.43M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 6.43M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.43M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  6.43M|	       "mismatch of TValue type %d vs GC type %d",
  910|  6.43M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  6.43M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  6.43M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.43M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 6.43M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.43M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  6.43M|  }
  914|  6.93M|#endif
  915|  6.93M|}
lj_api.c:setstrV:
  933|  2.14M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  2.14M|{ \
  935|  2.14M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  2.14M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  2.14M|}
lj_api.c:setgcV:
  927|  3.32M|{
  928|  3.32M|  setgcVraw(o, v, it);
  929|  3.32M|  checklivetv(L, o, "store to dead GC object");
  930|  3.32M|}
lj_api.c:setint64V:
  960|  17.8k|{
  961|  17.8k|  if (LJ_DUALNUM && LJ_LIKELY(i == (int64_t)(int32_t)i))
  ------------------
  |  |  549|  35.6k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_DUALNUM && LJ_LIKELY(i == (int64_t)(int32_t)i))
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  962|      0|    setintV(o, (int32_t)i);
  963|  17.8k|  else
  964|  17.8k|    setnumV(o, (lua_Number)i);
  ------------------
  |  |  945|  17.8k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  965|  17.8k|}
lj_api.c:setfuncV:
  933|   481k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   481k|{ \
  935|   481k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   481k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   481k|}
lj_api.c:settabV:
  933|   628k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   628k|{ \
  935|   628k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   628k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   628k|}
lj_api.c:setudataV:
  933|  71.3k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  71.3k|{ \
  935|  71.3k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  71.3k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  71.3k|}
lj_api.c:setgcVraw:
  918|  3.32M|{
  919|  3.32M|#if LJ_GC64
  920|  3.32M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  3.32M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  3.32M|}
lj_lex.c:setstrV:
  933|  1.01M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  1.01M|{ \
  935|  1.01M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  1.01M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  1.01M|}
lj_lex.c:setgcV:
  927|  1.01M|{
  928|  1.01M|  setgcVraw(o, v, it);
  929|  1.01M|  checklivetv(L, o, "store to dead GC object");
  930|  1.01M|}
lj_lex.c:setgcVraw:
  918|  1.01M|{
  919|  1.01M|#if LJ_GC64
  920|  1.01M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  1.01M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  1.01M|}
lj_lex.c:checklivetv:
  904|  1.01M|{
  905|  1.01M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.01M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.01M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.01M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  1.01M|#if LUA_USE_ASSERT
  907|  1.01M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  1.01M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  1.01M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.01M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.01M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  1.01M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.01M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.01M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 1.01M, False: 0]
  |  |  ------------------
  ------------------
  908|  1.01M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  1.01M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.01M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.01M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.01M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  1.01M|	       "mismatch of TValue type %d vs GC type %d",
  910|  1.01M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  1.01M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  1.01M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.01M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.01M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.01M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  1.01M|  }
  914|  1.01M|#endif
  915|  1.01M|}
lj_parse.c:setcdataV:
  933|   121k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   121k|{ \
  935|   121k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   121k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   121k|}
lj_parse.c:setgcV:
  927|  1.13M|{
  928|  1.13M|  setgcVraw(o, v, it);
  929|  1.13M|  checklivetv(L, o, "store to dead GC object");
  930|  1.13M|}
lj_parse.c:setgcVraw:
  918|  1.17M|{
  919|  1.17M|#if LJ_GC64
  920|  1.17M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  1.17M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  1.17M|}
lj_parse.c:checklivetv:
  904|  1.30M|{
  905|  1.30M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.30M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.30M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.30M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  1.30M|#if LUA_USE_ASSERT
  907|  1.30M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  1.30M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  1.30M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.30M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.30M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  1.30M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.30M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.30M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 1.25M, False: 42.2k]
  |  |  ------------------
  ------------------
  908|  1.25M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  1.25M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.25M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.25M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.25M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  1.25M|	       "mismatch of TValue type %d vs GC type %d",
  910|  1.25M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  1.25M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  1.25M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.25M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.25M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.25M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  1.25M|  }
  914|  1.30M|#endif
  915|  1.30M|}
lj_parse.c:setstrV:
  933|  17.8k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  17.8k|{ \
  935|  17.8k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  17.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  17.8k|}
lj_parse.c:settabV:
  933|  85.6k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  85.6k|{ \
  935|  85.6k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  85.6k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  85.6k|}
lj_parse.c:copyTV:
  975|   163k|{
  976|   163k|  *o1 = *o2;
  977|   163k|  checklivetv(L, o1, "copy of dead GC object");
  978|   163k|}
lj_parse.c:numberVnum:
 1029|  48.1k|{
 1030|  48.1k|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|  48.1k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1031|  48.1k|    return (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1032|  48.1k|  else
 1033|  48.1k|    return numV(o);
  ------------------
  |  |  866|  48.1k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  48.1k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  48.1k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  48.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 48.1k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  48.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1034|  48.1k|}
lj_parse.c:setintV:
  951|  60.7k|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|  60.7k|  o->n = (lua_Number)i;
  956|  60.7k|#endif
  957|  60.7k|}
lj_load.c:setgcV:
  927|  11.0k|{
  928|  11.0k|  setgcVraw(o, v, it);
  929|  11.0k|  checklivetv(L, o, "store to dead GC object");
  930|  11.0k|}
lj_load.c:setgcVraw:
  918|  11.0k|{
  919|  11.0k|#if LJ_GC64
  920|  11.0k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  11.0k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  11.0k|}
lj_load.c:checklivetv:
  904|  11.0k|{
  905|  11.0k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  11.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  11.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  11.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  11.0k|#if LUA_USE_ASSERT
  907|  11.0k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  11.0k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  11.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  11.0k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  11.0k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  11.0k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  11.0k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  11.0k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 11.0k, False: 0]
  |  |  ------------------
  ------------------
  908|  11.0k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  11.0k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  11.0k|	       "mismatch of TValue type %d vs GC type %d",
  910|  11.0k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  11.0k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  11.0k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  11.0k|  }
  914|  11.0k|#endif
  915|  11.0k|}
lj_load.c:setfuncV:
  933|  11.0k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  11.0k|{ \
  935|  11.0k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  11.0k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  11.0k|}
lj_ctype.c:setstrV:
  933|  17.8k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  17.8k|{ \
  935|  17.8k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  17.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  17.8k|}
lj_ctype.c:setgcV:
  927|  17.8k|{
  928|  17.8k|  setgcVraw(o, v, it);
  929|  17.8k|  checklivetv(L, o, "store to dead GC object");
  930|  17.8k|}
lj_ctype.c:setgcVraw:
  918|  17.8k|{
  919|  17.8k|#if LJ_GC64
  920|  17.8k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  17.8k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  17.8k|}
lj_ctype.c:checklivetv:
  904|  17.8k|{
  905|  17.8k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  17.8k|#if LUA_USE_ASSERT
  907|  17.8k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  17.8k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  17.8k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  17.8k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  17.8k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  17.8k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  17.8k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  17.8k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 17.8k, False: 0]
  |  |  ------------------
  ------------------
  908|  17.8k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  17.8k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  17.8k|	       "mismatch of TValue type %d vs GC type %d",
  910|  17.8k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  17.8k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  17.8k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  17.8k|  }
  914|  17.8k|#endif
  915|  17.8k|}
lib_ffi.c:settabV:
  933|  27.1k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  27.1k|{ \
  935|  27.1k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  27.1k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  27.1k|}
lib_ffi.c:setgcV:
  927|  27.1k|{
  928|  27.1k|  setgcVraw(o, v, it);
  929|  27.1k|  checklivetv(L, o, "store to dead GC object");
  930|  27.1k|}
lib_ffi.c:setgcVraw:
  918|  27.1k|{
  919|  27.1k|#if LJ_GC64
  920|  27.1k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  27.1k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  27.1k|}
lib_ffi.c:checklivetv:
  904|  40.6k|{
  905|  40.6k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  40.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  40.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  40.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  40.6k|#if LUA_USE_ASSERT
  907|  40.6k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  40.6k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  40.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  40.6k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  40.6k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  40.6k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  40.6k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  40.6k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 40.6k, False: 0]
  |  |  ------------------
  ------------------
  908|  40.6k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  40.6k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  40.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 40.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  40.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  40.6k|	       "mismatch of TValue type %d vs GC type %d",
  910|  40.6k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  40.6k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  40.6k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  40.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 40.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  40.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  40.6k|  }
  914|  40.6k|#endif
  915|  40.6k|}
lib_ffi.c:copyTV:
  975|  13.5k|{
  976|  13.5k|  *o1 = *o2;
  977|  13.5k|  checklivetv(L, o1, "copy of dead GC object");
  978|  13.5k|}
lj_gc.c:setgcV:
  927|  67.0k|{
  928|  67.0k|  setgcVraw(o, v, it);
  929|  67.0k|  checklivetv(L, o, "store to dead GC object");
  930|  67.0k|}
lj_gc.c:setgcVraw:
  918|  67.0k|{
  919|  67.0k|#if LJ_GC64
  920|  67.0k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  67.0k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  67.0k|}
lj_gc.c:checklivetv:
  904|   134k|{
  905|   134k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   134k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   134k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   134k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   134k|#if LUA_USE_ASSERT
  907|   134k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   134k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   134k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   134k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   134k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   134k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   134k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   134k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 134k, False: 0]
  |  |  ------------------
  ------------------
  908|   134k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   134k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   134k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 134k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   134k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   134k|	       "mismatch of TValue type %d vs GC type %d",
  910|   134k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   134k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   134k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   134k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 134k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   134k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   134k|  }
  914|   134k|#endif
  915|   134k|}
lj_gc.c:copyTV:
  975|  67.0k|{
  976|  67.0k|  *o1 = *o2;
  977|  67.0k|  checklivetv(L, o1, "copy of dead GC object");
  978|  67.0k|}
lj_err.c:checklivetv:
  904|  21.2k|{
  905|  21.2k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  21.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  21.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  21.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  21.2k|#if LUA_USE_ASSERT
  907|  21.2k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  21.2k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  21.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  21.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  21.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  21.2k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  21.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  21.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 21.2k, False: 0]
  |  |  ------------------
  ------------------
  908|  21.2k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  21.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  21.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 21.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  21.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  21.2k|	       "mismatch of TValue type %d vs GC type %d",
  910|  21.2k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  21.2k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  21.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  21.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 21.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  21.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  21.2k|  }
  914|  21.2k|#endif
  915|  21.2k|}
lj_err.c:copyTV:
  975|  21.2k|{
  976|  21.2k|  *o1 = *o2;
  977|  21.2k|  checklivetv(L, o1, "copy of dead GC object");
  978|  21.2k|}
lj_obj.c:numberVnum:
 1029|  15.3k|{
 1030|  15.3k|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|  15.3k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1031|  15.3k|    return (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1032|  15.3k|  else
 1033|  15.3k|    return numV(o);
  ------------------
  |  |  866|  15.3k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  15.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  15.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  15.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 15.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  15.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1034|  15.3k|}
lj_tab.c:copyTV:
  975|  1.15M|{
  976|  1.15M|  *o1 = *o2;
  977|  1.15M|  checklivetv(L, o1, "copy of dead GC object");
  978|  1.15M|}
lj_tab.c:checklivetv:
  904|  6.36M|{
  905|  6.36M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  6.36M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  6.36M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  6.36M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  6.36M|#if LUA_USE_ASSERT
  907|  6.36M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  6.36M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  6.36M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  6.36M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  6.36M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  6.36M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  6.36M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  6.36M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 5.58M, False: 781k]
  |  |  ------------------
  ------------------
  908|  5.58M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  5.58M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  5.58M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 5.58M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.58M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  5.58M|	       "mismatch of TValue type %d vs GC type %d",
  910|  5.58M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  5.58M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  5.58M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  5.58M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 5.58M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.58M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  5.58M|  }
  914|  6.36M|#endif
  915|  6.36M|}
lj_tab.c:setstrV:
  933|  5.20M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  5.20M|{ \
  935|  5.20M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  5.20M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  5.20M|}
lj_tab.c:setgcV:
  927|  5.20M|{
  928|  5.20M|  setgcVraw(o, v, it);
  929|  5.20M|  checklivetv(L, o, "store to dead GC object");
  930|  5.20M|}
lj_tab.c:setgcVraw:
  918|  5.20M|{
  919|  5.20M|#if LJ_GC64
  920|  5.20M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  5.20M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  5.20M|}
lj_strfmt.c:checklivetv:
  904|  52.7k|{
  905|  52.7k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  52.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  52.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  52.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  52.7k|#if LUA_USE_ASSERT
  907|  52.7k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  52.7k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  52.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  52.7k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  52.7k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  52.7k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  52.7k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  52.7k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 52.7k, False: 0]
  |  |  ------------------
  ------------------
  908|  52.7k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  52.7k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  52.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 52.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  52.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  52.7k|	       "mismatch of TValue type %d vs GC type %d",
  910|  52.7k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  52.7k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  52.7k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  52.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 52.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  52.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  52.7k|  }
  914|  52.7k|#endif
  915|  52.7k|}
lj_strfmt.c:setstrV:
  933|  52.7k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  52.7k|{ \
  935|  52.7k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  52.7k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  52.7k|}
lj_strfmt.c:setgcV:
  927|  52.7k|{
  928|  52.7k|  setgcVraw(o, v, it);
  929|  52.7k|  checklivetv(L, o, "store to dead GC object");
  930|  52.7k|}
lj_strfmt.c:setgcVraw:
  918|  52.7k|{
  919|  52.7k|#if LJ_GC64
  920|  52.7k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  52.7k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  52.7k|}
lj_bcread.c:setintV:
  951|  35.6k|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|  35.6k|  o->n = (lua_Number)i;
  956|  35.6k|#endif
  957|  35.6k|}
lj_clib.c:setgcV:
  927|  13.5k|{
  928|  13.5k|  setgcVraw(o, v, it);
  929|  13.5k|  checklivetv(L, o, "store to dead GC object");
  930|  13.5k|}
lj_clib.c:setgcVraw:
  918|  13.5k|{
  919|  13.5k|#if LJ_GC64
  920|  13.5k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  13.5k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  13.5k|}
lj_clib.c:checklivetv:
  904|  13.5k|{
  905|  13.5k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  13.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  13.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  13.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  13.5k|#if LUA_USE_ASSERT
  907|  13.5k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  13.5k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  13.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  13.5k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  13.5k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  13.5k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  13.5k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  13.5k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 13.5k, False: 0]
  |  |  ------------------
  ------------------
  908|  13.5k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  13.5k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.5k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  13.5k|	       "mismatch of TValue type %d vs GC type %d",
  910|  13.5k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  13.5k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  13.5k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.5k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  13.5k|  }
  914|  13.5k|#endif
  915|  13.5k|}
lj_clib.c:setudataV:
  933|  13.5k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  13.5k|{ \
  935|  13.5k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  13.5k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  13.5k|}
lj_lib.c:settabV:
  933|   392k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   392k|{ \
  935|   392k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   392k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   392k|}
lj_lib.c:setgcV:
  927|  4.16M|{
  928|  4.16M|  setgcVraw(o, v, it);
  929|  4.16M|  checklivetv(L, o, "store to dead GC object");
  930|  4.16M|}
lj_lib.c:setgcVraw:
  918|  4.16M|{
  919|  4.16M|#if LJ_GC64
  920|  4.16M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  4.16M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  4.16M|}
lj_lib.c:checklivetv:
  904|  4.67M|{
  905|  4.67M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  4.67M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  4.67M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  4.67M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  4.67M|#if LUA_USE_ASSERT
  907|  4.67M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  4.67M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  4.67M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  4.67M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  4.67M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  4.67M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  4.67M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  4.67M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 4.59M, False: 71.3k]
  |  |  ------------------
  ------------------
  908|  4.59M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  4.59M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.59M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.59M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.59M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  4.59M|	       "mismatch of TValue type %d vs GC type %d",
  910|  4.59M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  4.59M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  4.59M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.59M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.59M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.59M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  4.59M|  }
  914|  4.67M|#endif
  915|  4.67M|}
lj_lib.c:setfuncV:
  933|  3.27M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  3.27M|{ \
  935|  3.27M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  3.27M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  3.27M|}
lj_lib.c:copyTV:
  975|   505k|{
  976|   505k|  *o1 = *o2;
  977|   505k|  checklivetv(L, o1, "copy of dead GC object");
  978|   505k|}
lj_lib.c:setstrV:
  933|   500k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   500k|{ \
  935|   500k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   500k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   500k|}
lib_base.c:checklivetv:
  904|  53.5k|{
  905|  53.5k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  53.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  53.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  53.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  53.5k|#if LUA_USE_ASSERT
  907|  53.5k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  53.5k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  53.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  53.5k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  53.5k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  53.5k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  53.5k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  53.5k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 53.5k, False: 0]
  |  |  ------------------
  ------------------
  908|  53.5k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  53.5k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  53.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 53.5k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  53.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  53.5k|	       "mismatch of TValue type %d vs GC type %d",
  910|  53.5k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  53.5k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  53.5k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  53.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 53.5k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  53.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  53.5k|  }
  914|  53.5k|#endif
  915|  53.5k|}
lib_base.c:settabV:
  933|  35.6k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  35.6k|{ \
  935|  35.6k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  35.6k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  35.6k|}
lib_base.c:setgcV:
  927|  53.5k|{
  928|  53.5k|  setgcVraw(o, v, it);
  929|  53.5k|  checklivetv(L, o, "store to dead GC object");
  930|  53.5k|}
lib_base.c:setgcVraw:
  918|  53.5k|{
  919|  53.5k|#if LJ_GC64
  920|  53.5k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  53.5k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  53.5k|}
lib_base.c:setstrV:
  933|  17.8k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  17.8k|{ \
  935|  17.8k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  17.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  17.8k|}
lib_string.c:setgcV:
  927|  17.8k|{
  928|  17.8k|  setgcVraw(o, v, it);
  929|  17.8k|  checklivetv(L, o, "store to dead GC object");
  930|  17.8k|}
lib_string.c:setgcVraw:
  918|  17.8k|{
  919|  17.8k|#if LJ_GC64
  920|  17.8k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  17.8k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  17.8k|}
lib_string.c:checklivetv:
  904|  17.8k|{
  905|  17.8k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  17.8k|#if LUA_USE_ASSERT
  907|  17.8k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  17.8k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  17.8k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  17.8k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  17.8k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  17.8k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  17.8k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  17.8k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 17.8k, False: 0]
  |  |  ------------------
  ------------------
  908|  17.8k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  17.8k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  17.8k|	       "mismatch of TValue type %d vs GC type %d",
  910|  17.8k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  17.8k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  17.8k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  17.8k|  }
  914|  17.8k|#endif
  915|  17.8k|}
lib_string.c:settabV:
  933|  17.8k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  17.8k|{ \
  935|  17.8k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  17.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  17.8k|}
lib_io.c:checklivetv:
  904|  17.8k|{
  905|  17.8k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  17.8k|#if LUA_USE_ASSERT
  907|  17.8k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  17.8k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  17.8k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  17.8k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  17.8k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  17.8k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  17.8k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  17.8k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 17.8k, False: 0]
  |  |  ------------------
  ------------------
  908|  17.8k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  17.8k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  17.8k|	       "mismatch of TValue type %d vs GC type %d",
  910|  17.8k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  17.8k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  17.8k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  17.8k|  }
  914|  17.8k|#endif
  915|  17.8k|}
lib_io.c:copyTV:
  975|  17.8k|{
  976|  17.8k|  *o1 = *o2;
  977|  17.8k|  checklivetv(L, o1, "copy of dead GC object");
  978|  17.8k|}

lj_parse_keepstr:
  240|  1.01M|{
  241|       |  /* NOBARRIER: the key is new or kept alive. */
  242|  1.01M|  lua_State *L = ls->L;
  243|  1.01M|  GCstr *s = lj_str_new(L, str, len);
  244|  1.01M|  TValue *tv = lj_tab_setstr(L, ls->fs->kt, s);
  245|  1.01M|  if (tvisnil(tv)) setboolV(tv, 1);
  ------------------
  |  |  782|  1.01M|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 448k, False: 563k]
  |  |  ------------------
  ------------------
                if (tvisnil(tv)) setboolV(tv, 1);
  ------------------
  |  |  874|   448k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  246|  1.01M|  lj_gc_check(L);
  ------------------
  |  |   66|  1.01M|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  1.01M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 37.3k, False: 974k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  1.01M|      lj_gc_step(L); }
  ------------------
  247|  1.01M|  return s;
  248|  1.01M|}
lj_parse_keepcdata:
  253|   121k|{
  254|       |  /* NOBARRIER: the key is new or kept alive. */
  255|   121k|  lua_State *L = ls->L;
  256|   121k|  setcdataV(L, tv, cd);
  257|   121k|  setboolV(lj_tab_set(L, ls->fs->kt, tv), 1);
  ------------------
  |  |  874|   121k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  258|   121k|}
lj_parse:
 2720|  17.8k|{
 2721|  17.8k|  FuncState fs;
 2722|  17.8k|  FuncScope bl;
 2723|  17.8k|  GCproto *pt;
 2724|  17.8k|  lua_State *L = ls->L;
 2725|       |#ifdef LUAJIT_DISABLE_DEBUGINFO
 2726|       |  ls->chunkname = lj_str_newlit(L, "=");
 2727|       |#else
 2728|  17.8k|  ls->chunkname = lj_str_newz(L, ls->chunkarg);
  ------------------
  |  |   27|  17.8k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
 2729|  17.8k|#endif
 2730|  17.8k|  setstrV(L, L->top, ls->chunkname);  /* Anchor chunkname string. */
 2731|  17.8k|  incr_top(L);
  ------------------
  |  |   12|  17.8k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  35.6k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 17.8k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2732|  17.8k|  ls->level = 0;
 2733|  17.8k|  fs_init(ls, &fs);
 2734|  17.8k|  fs.linedefined = 0;
 2735|  17.8k|  fs.numparams = 0;
 2736|  17.8k|  fs.bcbase = NULL;
 2737|  17.8k|  fs.bclim = 0;
 2738|  17.8k|  fs.flags |= PROTO_VARARG;  /* Main chunk is always a vararg func. */
  ------------------
  |  |  400|  17.8k|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
 2739|  17.8k|  fscope_begin(&fs, &bl, 0);
 2740|  17.8k|  bcemit_AD(&fs, BC_FUNCV, 0, 0);  /* Placeholder. */
  ------------------
  |  |  435|  17.8k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  17.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2741|  17.8k|  lj_lex_next(ls);  /* Read-ahead first token. */
 2742|  17.8k|  parse_chunk(ls);
 2743|  17.8k|  if (ls->tok != TK_eof)
  ------------------
  |  Branch (2743:7): [True: 168, False: 17.6k]
  ------------------
 2744|    168|    err_token(ls, TK_eof);
 2745|  17.6k|  pt = fs_finish(ls, ls->linenumber);
 2746|  17.6k|  L->top--;  /* Drop chunkname. */
 2747|  17.6k|  lj_assertL(fs.prev == NULL && ls->fs == NULL, "mismatched frame nesting");
  ------------------
  |  |  365|  17.6k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  28.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 11.0k, False: 6.58k]
  |  |  |  |  |  Branch (355:5): [True: 11.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 2748|  11.0k|  lj_assertL(pt->sizeuv == 0, "toplevel proto has upvalues");
  ------------------
  |  |  365|  11.0k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 2749|  11.0k|  return pt;
 2750|  11.0k|}
lj_parse.c:fs_init:
 1626|  67.4k|{
 1627|  67.4k|  lua_State *L = ls->L;
 1628|  67.4k|  fs->prev = ls->fs; ls->fs = fs;  /* Append to list. */
 1629|  67.4k|  fs->ls = ls;
 1630|  67.4k|  fs->vbase = ls->vtop;
 1631|  67.4k|  fs->L = L;
 1632|  67.4k|  fs->pc = 0;
 1633|  67.4k|  fs->lasttarget = 0;
 1634|  67.4k|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|  67.4k|#define NO_JMP		(~(BCPos)0)
  ------------------
 1635|  67.4k|  fs->freereg = 0;
 1636|  67.4k|  fs->nkgc = 0;
 1637|  67.4k|  fs->nkn = 0;
 1638|  67.4k|  fs->nactvar = 0;
 1639|  67.4k|  fs->nuv = 0;
 1640|  67.4k|  fs->bl = NULL;
 1641|  67.4k|  fs->flags = 0;
 1642|  67.4k|  fs->framesize = 1;  /* Minimum frame size. */
 1643|  67.4k|  fs->kt = lj_tab_new(L, 0, 0);
 1644|       |  /* Anchor table of constants in stack to avoid being collected. */
 1645|  67.4k|  settabV(L, L->top, fs->kt);
 1646|  67.4k|  incr_top(L);
  ------------------
  |  |   12|  67.4k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   134k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  67.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 328, False: 67.1k]
  |  |  |  Branch (12:38): [True: 0, False: 328]
  |  |  ------------------
  ------------------
 1647|  67.4k|}
lj_parse.c:fscope_begin:
 1283|  74.6k|{
 1284|  74.6k|  bl->nactvar = (uint8_t)fs->nactvar;
 1285|  74.6k|  bl->flags = flags;
 1286|  74.6k|  bl->vstart = fs->ls->vtop;
 1287|  74.6k|  bl->prev = fs->bl;
 1288|  74.6k|  fs->bl = bl;
 1289|  74.6k|  lj_assertFS(fs->freereg == fs->nactvar, "bad regalloc");
  ------------------
  |  |  167|  74.6k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  74.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  74.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 74.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  74.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1290|  74.6k|}
lj_parse.c:bcemit_INS:
  416|  1.93M|{
  417|  1.93M|  BCPos pc = fs->pc;
  418|  1.93M|  LexState *ls = fs->ls;
  419|  1.93M|  jmp_patchval(fs, fs->jpc, pc, NO_REG, pc);
  ------------------
  |  |   30|  1.93M|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  1.93M|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  420|  1.93M|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|  1.93M|#define NO_JMP		(~(BCPos)0)
  ------------------
  421|  1.93M|  if (LJ_UNLIKELY(pc >= fs->bclim)) {
  ------------------
  |  |  146|  1.93M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 50.1k, False: 1.88M]
  |  |  ------------------
  ------------------
  422|  50.1k|    ptrdiff_t base = fs->bcbase - ls->bcstack;
  423|  50.1k|    checklimit(fs, ls->sizebcstack, LJ_MAX_BCINS, "bytecode instructions");
  ------------------
  |  |  192|  50.1k|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 50.1k]
  |  |  ------------------
  ------------------
  424|  50.1k|    lj_mem_growvec(fs->L, ls->bcstack, ls->sizebcstack, LJ_MAX_BCINS,BCInsLine);
  ------------------
  |  |  129|  50.1k|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
  425|  50.1k|    fs->bclim = (BCPos)(ls->sizebcstack - base);
  426|  50.1k|    fs->bcbase = ls->bcstack + base;
  427|  50.1k|  }
  428|  1.93M|  fs->bcbase[pc].ins = ins;
  429|  1.93M|  fs->bcbase[pc].line = ls->lastline;
  430|  1.93M|  fs->pc = pc+1;
  431|  1.93M|  return pc;
  432|  1.93M|}
lj_parse.c:jmp_patchval:
  347|  2.09M|{
  348|  2.18M|  while (list != NO_JMP) {
  ------------------
  |  |   31|  2.18M|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (348:10): [True: 87.3k, False: 2.09M]
  ------------------
  349|  87.3k|    BCPos next = jmp_next(fs, list);
  350|  87.3k|    if (jmp_patchtestreg(fs, list, reg))
  ------------------
  |  Branch (350:9): [True: 4.72k, False: 82.6k]
  ------------------
  351|  4.72k|      jmp_patchins(fs, list, vtarget);  /* Jump to target with value. */
  352|  82.6k|    else
  353|  82.6k|      jmp_patchins(fs, list, dtarget);  /* Jump to default target. */
  354|  87.3k|    list = next;
  355|  87.3k|  }
  356|  2.09M|}
lj_parse.c:jmp_next:
  265|   114k|{
  266|   114k|  ptrdiff_t delta = bc_j(fs->bcbase[pc].ins);
  ------------------
  |  |   39|   114k|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|   114k|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|   114k|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  267|   114k|  if ((BCPos)delta == NO_JMP)
  ------------------
  |  |   31|   114k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (267:7): [True: 90.1k, False: 24.4k]
  ------------------
  268|  90.1k|    return NO_JMP;
  ------------------
  |  |   31|  90.1k|#define NO_JMP		(~(BCPos)0)
  ------------------
  269|  24.4k|  else
  270|  24.4k|    return (BCPos)(((ptrdiff_t)pc+1)+delta);
  271|   114k|}
lj_parse.c:jmp_patchtestreg:
  286|  87.3k|{
  287|  87.3k|  BCInsLine *ilp = &fs->bcbase[pc >= 1 ? pc-1 : pc];
  ------------------
  |  Branch (287:32): [True: 87.3k, False: 0]
  ------------------
  288|  87.3k|  BCOp op = bc_op(ilp->ins);
  ------------------
  |  |   34|  87.3k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  289|  87.3k|  if (op == BC_ISTC || op == BC_ISFC) {
  ------------------
  |  Branch (289:7): [True: 1.98k, False: 85.3k]
  |  Branch (289:24): [True: 1.30k, False: 84.0k]
  ------------------
  290|  3.29k|    if (reg != NO_REG && reg != bc_d(ilp->ins)) {
  ------------------
  |  |   30|  3.29k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  6.59k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
                  if (reg != NO_REG && reg != bc_d(ilp->ins)) {
  ------------------
  |  |   38|  2.38k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (290:9): [True: 2.38k, False: 909]
  |  Branch (290:26): [True: 32, False: 2.35k]
  ------------------
  291|     32|      setbc_a(&ilp->ins, reg);
  ------------------
  |  |   45|     32|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|     32|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|     32|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  292|  3.26k|    } else {  /* Nothing to store or already in the right register. */
  293|  3.26k|      setbc_op(&ilp->ins, op+(BC_IST-BC_ISTC));
  ------------------
  |  |   44|  3.26k|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|  3.26k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  3.26k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  294|  3.26k|      setbc_a(&ilp->ins, 0);
  ------------------
  |  |   45|  3.26k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  3.26k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  3.26k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  295|  3.26k|    }
  296|  84.0k|  } else if (bc_a(ilp->ins) == NO_REG) {
  ------------------
  |  |   35|  84.0k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                } else if (bc_a(ilp->ins) == NO_REG) {
  ------------------
  |  |   30|  84.0k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  84.0k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  |  Branch (296:14): [True: 1.42k, False: 82.6k]
  ------------------
  297|  1.42k|    if (reg == NO_REG) {
  ------------------
  |  |   30|  1.42k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  1.42k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  |  Branch (297:9): [True: 78, False: 1.35k]
  ------------------
  298|     78|      ilp->ins = BCINS_AJ(BC_JMP, bc_a(fs->bcbase[pc].ins), 0);
  ------------------
  |  |   57|     78|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  ------------------
  |  |  |  |   56|     78|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  299|  1.35k|    } else {
  300|  1.35k|      setbc_a(&ilp->ins, reg);
  ------------------
  |  |   45|  1.35k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  1.35k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  1.35k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  301|  1.35k|      if (reg >= bc_a(ilp[1].ins))
  ------------------
  |  |   35|  1.35k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  |  Branch (301:11): [True: 1.26k, False: 85]
  ------------------
  302|  1.35k|	setbc_a(&ilp[1].ins, reg+1);
  ------------------
  |  |   45|  1.26k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  1.26k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  1.26k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  303|  1.35k|    }
  304|  82.6k|  } else {
  305|  82.6k|    return 0;  /* Cannot patch other instructions. */
  306|  82.6k|  }
  307|  4.72k|  return 1;
  308|  87.3k|}
lj_parse.c:jmp_patchins:
  319|  90.5k|{
  320|  90.5k|  BCIns *jmp = &fs->bcbase[pc].ins;
  321|  90.5k|  BCPos offset = dest-(pc+1)+BCBIAS_J;
  ------------------
  |  |   29|  90.5k|#define BCBIAS_J	0x8000
  ------------------
  322|  90.5k|  lj_assertFS(dest != NO_JMP, "uninitialized jump target");
  ------------------
  |  |  167|  90.5k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  90.5k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  90.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 90.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  90.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  323|  90.5k|  if (offset > BCMAX_D)
  ------------------
  |  |   28|  90.5k|#define BCMAX_D		0xffff
  ------------------
  |  Branch (323:7): [True: 0, False: 90.5k]
  ------------------
  324|      0|    err_syntax(fs->ls, LJ_ERR_XJUMP);
  325|  90.5k|  setbc_d(jmp, offset);
  ------------------
  |  |   49|  90.5k|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|  90.5k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  ------------------
  326|  90.5k|}
lj_parse.c:err_syntax:
  175|  2.00k|{
  176|  2.00k|  lj_lex_error(ls, ls->tok, em);
  177|  2.00k|}
lj_parse.c:err_limit:
  185|      5|{
  186|      5|  if (fs->linedefined == 0)
  ------------------
  |  Branch (186:7): [True: 3, False: 2]
  ------------------
  187|      3|    lj_lex_error(fs->ls, 0, LJ_ERR_XLIMM, limit, what);
  188|      2|  else
  189|      2|    lj_lex_error(fs->ls, 0, LJ_ERR_XLIMF, fs->linedefined, limit, what);
  190|      5|}
lj_parse.c:parse_chunk:
 2704|  73.3k|{
 2705|  73.3k|  int islast = 0;
 2706|  73.3k|  synlevel_begin(ls);
 2707|   326k|  while (!islast && !parse_isend(ls->tok)) {
  ------------------
  |  Branch (2707:10): [True: 326k, False: 330]
  |  Branch (2707:21): [True: 301k, False: 24.7k]
  ------------------
 2708|   301k|    islast = parse_stmt(ls);
 2709|   301k|    lex_opt(ls, ';');
 2710|   301k|    lj_assertLS(ls->fs->framesize >= ls->fs->freereg &&
  ------------------
  |  |   89|   301k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   301k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   554k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 253k, False: 48.2k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 253k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   301k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2711|   301k|		ls->fs->freereg >= ls->fs->nactvar,
 2712|   301k|		"bad regalloc");
 2713|   253k|    ls->fs->freereg = ls->fs->nactvar;  /* Free registers after each stmt. */
 2714|   253k|  }
 2715|  25.0k|  synlevel_end(ls);
  ------------------
  |  | 2042|  25.0k|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2716|  25.0k|}
lj_parse.c:synlevel_begin:
 2037|   708k|{
 2038|   708k|  if (++ls->level >= LJ_MAX_XLEVEL)
  ------------------
  |  |   65|   708k|#define LJ_MAX_XLEVEL	200		/* Max. syntactic nesting level. */
  ------------------
  |  Branch (2038:7): [True: 7, False: 708k]
  ------------------
 2039|      7|    lj_lex_error(ls, 0, LJ_ERR_XLEVELS);
 2040|   708k|}
lj_parse.c:parse_isend:
 2314|   327k|{
 2315|   327k|  switch (tok) {
 2316|  24.7k|  case TK_else: case TK_elseif: case TK_end: case TK_until: case TK_eof:
  ------------------
  |  Branch (2316:3): [True: 1, False: 327k]
  |  Branch (2316:17): [True: 0, False: 327k]
  |  Branch (2316:33): [True: 11.4k, False: 315k]
  |  Branch (2316:46): [True: 0, False: 327k]
  |  Branch (2316:61): [True: 13.2k, False: 313k]
  ------------------
 2317|  24.7k|    return 1;
 2318|   302k|  default:
  ------------------
  |  Branch (2318:3): [True: 302k, False: 24.7k]
  ------------------
 2319|   302k|    return 0;
 2320|   327k|  }
 2321|   327k|}
lj_parse.c:parse_stmt:
 2646|   301k|{
 2647|   301k|  BCLine line = ls->linenumber;
 2648|   301k|  switch (ls->tok) {
 2649|      7|  case TK_if:
  ------------------
  |  Branch (2649:3): [True: 7, False: 301k]
  ------------------
 2650|      7|    parse_if(ls, line);
 2651|      7|    break;
 2652|  1.03k|  case TK_while:
  ------------------
  |  Branch (2652:3): [True: 1.03k, False: 300k]
  ------------------
 2653|  1.03k|    parse_while(ls, line);
 2654|  1.03k|    break;
 2655|  4.99k|  case TK_do:
  ------------------
  |  Branch (2655:3): [True: 4.99k, False: 296k]
  ------------------
 2656|  4.99k|    lj_lex_next(ls);
 2657|  4.99k|    parse_block(ls);
 2658|  4.99k|    lex_match(ls, TK_end, TK_do, line);
 2659|  4.99k|    break;
 2660|    172|  case TK_for:
  ------------------
  |  Branch (2660:3): [True: 172, False: 301k]
  ------------------
 2661|    172|    parse_for(ls, line);
 2662|    172|    break;
 2663|      0|  case TK_repeat:
  ------------------
  |  Branch (2663:3): [True: 0, False: 301k]
  ------------------
 2664|      0|    parse_repeat(ls, line);
 2665|      0|    break;
 2666|  47.7k|  case TK_function:
  ------------------
  |  Branch (2666:3): [True: 47.7k, False: 253k]
  ------------------
 2667|  47.7k|    parse_func(ls, line);
 2668|  47.7k|    break;
 2669|  27.8k|  case TK_local:
  ------------------
  |  Branch (2669:3): [True: 27.8k, False: 273k]
  ------------------
 2670|  27.8k|    lj_lex_next(ls);
 2671|  27.8k|    parse_local(ls);
 2672|  27.8k|    break;
 2673|    320|  case TK_return:
  ------------------
  |  Branch (2673:3): [True: 320, False: 301k]
  ------------------
 2674|    320|    parse_return(ls);
 2675|    320|    return 1;  /* Must be last. */
 2676|     13|  case TK_break:
  ------------------
  |  Branch (2676:3): [True: 13, False: 301k]
  ------------------
 2677|     13|    lj_lex_next(ls);
 2678|     13|    parse_break(ls);
 2679|     13|    return !LJ_52;  /* Must be last in Lua 5.1. */
  ------------------
  |  |  697|     13|#define LJ_52			0
  ------------------
 2680|       |#if LJ_52
 2681|       |  case ';':
 2682|       |    lj_lex_next(ls);
 2683|       |    break;
 2684|       |#endif
 2685|    356|  case TK_label:
  ------------------
  |  Branch (2685:3): [True: 356, False: 301k]
  ------------------
 2686|    356|    parse_label(ls);
 2687|    356|    break;
 2688|  4.62k|  case TK_goto:
  ------------------
  |  Branch (2688:3): [True: 4.62k, False: 297k]
  ------------------
 2689|  4.62k|    if (LJ_52 || lj_lex_lookahead(ls) == TK_name) {
  ------------------
  |  |  697|  9.24k|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (2689:18): [True: 4.12k, False: 498]
  ------------------
 2690|  4.12k|      lj_lex_next(ls);
 2691|  4.12k|      parse_goto(ls);
 2692|  4.12k|      break;
 2693|  4.12k|    }
 2694|       |    /* fallthrough */
 2695|   215k|  default:
  ------------------
  |  Branch (2695:3): [True: 214k, False: 87.0k]
  ------------------
 2696|   215k|    parse_call_assign(ls);
 2697|   215k|    break;
 2698|   301k|  }
 2699|   253k|  return 0;
 2700|   301k|}
lj_parse.c:parse_if:
 2620|      7|{
 2621|      7|  FuncState *fs = ls->fs;
 2622|      7|  BCPos flist;
 2623|      7|  BCPos escapelist = NO_JMP;
  ------------------
  |  |   31|      7|#define NO_JMP		(~(BCPos)0)
  ------------------
 2624|      7|  flist = parse_then(ls);
 2625|      7|  while (ls->tok == TK_elseif) {  /* Parse multiple 'elseif' blocks. */
  ------------------
  |  Branch (2625:10): [True: 0, False: 7]
  ------------------
 2626|      0|    jmp_append(fs, &escapelist, bcemit_jmp(fs));
 2627|      0|    jmp_tohere(fs, flist);
 2628|      0|    flist = parse_then(ls);
 2629|      0|  }
 2630|      7|  if (ls->tok == TK_else) {  /* Parse optional 'else' block. */
  ------------------
  |  Branch (2630:7): [True: 0, False: 7]
  ------------------
 2631|      0|    jmp_append(fs, &escapelist, bcemit_jmp(fs));
 2632|      0|    jmp_tohere(fs, flist);
 2633|      0|    lj_lex_next(ls);  /* Skip 'else'. */
 2634|      0|    parse_block(ls);
 2635|      7|  } else {
 2636|      7|    jmp_append(fs, &escapelist, flist);
 2637|      7|  }
 2638|      7|  jmp_tohere(fs, escapelist);
 2639|      7|  lex_match(ls, TK_end, TK_if, line);
 2640|      7|}
lj_parse.c:parse_then:
 2609|      7|{
 2610|      7|  BCPos condexit;
 2611|      7|  lj_lex_next(ls);  /* Skip 'if' or 'elseif'. */
 2612|      7|  condexit = expr_cond(ls);
 2613|      7|  lex_check(ls, TK_then);
 2614|      7|  parse_block(ls);
 2615|      7|  return condexit;
 2616|      7|}
lj_parse.c:expr_cond:
 2140|  1.04k|{
 2141|  1.04k|  ExpDesc v;
 2142|  1.04k|  expr(ls, &v);
 2143|  1.04k|  if (v.k == VKNIL) v.k = VKFALSE;
  ------------------
  |  Branch (2143:7): [True: 0, False: 1.04k]
  ------------------
 2144|  1.04k|  bcemit_branch_t(ls->fs, &v);
 2145|  1.04k|  return v.f;
 2146|  1.04k|}
lj_parse.c:expr:
 2126|   291k|{
 2127|   291k|  expr_binop(ls, v, 0);  /* Priority 0: parse whole expression. */
 2128|   291k|}
lj_parse.c:expr_binop:
 2105|   634k|{
 2106|   634k|  BinOpr op;
 2107|   634k|  synlevel_begin(ls);
 2108|   634k|  expr_unop(ls, v);
 2109|   634k|  op = token2binop(ls->tok);
 2110|   884k|  while (op != OPR_NOBINOPR && priority[op].left > limit) {
  ------------------
  |  Branch (2110:10): [True: 403k, False: 480k]
  |  Branch (2110:32): [True: 249k, False: 154k]
  ------------------
 2111|   249k|    ExpDesc v2;
 2112|   249k|    BinOpr nextop;
 2113|   249k|    lj_lex_next(ls);
 2114|   249k|    bcemit_binop_left(ls->fs, op, v);
 2115|       |    /* Parse binary expression with higher priority. */
 2116|   249k|    nextop = expr_binop(ls, &v2, priority[op].right);
 2117|   249k|    bcemit_binop(ls->fs, op, v, &v2);
 2118|   249k|    op = nextop;
 2119|   249k|  }
 2120|   634k|  synlevel_end(ls);
  ------------------
  |  | 2042|   634k|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2121|   634k|  return op;  /* Return unconsumed binary operator (if any). */
 2122|   634k|}
lj_parse.c:expr_unop:
 2086|   634k|{
 2087|   634k|  BCOp op;
 2088|   634k|  if (ls->tok == TK_not) {
  ------------------
  |  Branch (2088:7): [True: 7.09k, False: 627k]
  ------------------
 2089|  7.09k|    op = BC_NOT;
 2090|   627k|  } else if (ls->tok == '-') {
  ------------------
  |  Branch (2090:14): [True: 11.4k, False: 616k]
  ------------------
 2091|  11.4k|    op = BC_UNM;
 2092|   616k|  } else if (ls->tok == '#') {
  ------------------
  |  Branch (2092:14): [True: 75.1k, False: 540k]
  ------------------
 2093|  75.1k|    op = BC_LEN;
 2094|   540k|  } else {
 2095|   540k|    expr_simple(ls, v);
 2096|   540k|    return;
 2097|   540k|  }
 2098|  93.6k|  lj_lex_next(ls);
 2099|  93.6k|  expr_binop(ls, v, UNARY_PRIORITY);
  ------------------
  |  | 2079|  93.6k|#define UNARY_PRIORITY		8  /* Priority for unary operators. */
  ------------------
 2100|  93.6k|  bcemit_unop(ls->fs, op, v);
 2101|  93.6k|}
lj_parse.c:expr_simple:
 1992|   540k|{
 1993|   540k|  switch (ls->tok) {
 1994|   163k|  case TK_number:
  ------------------
  |  Branch (1994:3): [True: 163k, False: 377k]
  ------------------
 1995|   163k|    expr_init(v, (LJ_HASFFI && tviscdata(&ls->tokval)) ? VKCDATA : VKNUM, 0);
  ------------------
  |  |  585|   326k|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  expr_init(v, (LJ_HASFFI && tviscdata(&ls->tokval)) ? VKCDATA : VKNUM, 0);
  ------------------
  |  |  799|   163k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|   163k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|   163k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 120k, False: 42.2k]
  |  |  ------------------
  ------------------
 1996|   163k|    copyTV(ls->L, &v->u.nval, &ls->tokval);
 1997|   163k|    break;
 1998|  57.9k|  case TK_string:
  ------------------
  |  Branch (1998:3): [True: 57.9k, False: 483k]
  ------------------
 1999|  57.9k|    expr_init(v, VKSTR, 0);
 2000|  57.9k|    v->u.sval = strV(&ls->tokval);
  ------------------
  |  |  859|  57.9k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  57.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  57.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  57.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 57.9k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  57.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2001|      0|    break;
 2002|  2.56k|  case TK_nil:
  ------------------
  |  Branch (2002:3): [True: 2.56k, False: 538k]
  ------------------
 2003|  2.56k|    expr_init(v, VKNIL, 0);
 2004|  2.56k|    break;
 2005|     21|  case TK_true:
  ------------------
  |  Branch (2005:3): [True: 21, False: 540k]
  ------------------
 2006|     21|    expr_init(v, VKTRUE, 0);
 2007|     21|    break;
 2008|    387|  case TK_false:
  ------------------
  |  Branch (2008:3): [True: 387, False: 540k]
  ------------------
 2009|    387|    expr_init(v, VKFALSE, 0);
 2010|    387|    break;
 2011|    114|  case TK_dots: {  /* Vararg. */
  ------------------
  |  Branch (2011:3): [True: 114, False: 540k]
  ------------------
 2012|    114|    FuncState *fs = ls->fs;
 2013|    114|    BCReg base;
 2014|    114|    checkcond(ls, fs->flags & PROTO_VARARG, LJ_ERR_XDOTS);
  ------------------
  |  |  194|    114|#define checkcond(ls, c, em)		{ if (!(c)) err_syntax(ls, em); }
  |  |  ------------------
  |  |  |  Branch (194:37): [True: 1, False: 113]
  |  |  ------------------
  ------------------
 2015|    113|    bcreg_reserve(fs, 1);
 2016|    113|    base = fs->freereg-1;
 2017|    113|    expr_init(v, VCALL, bcemit_ABC(fs, BC_VARG, base, 2, fs->numparams));
  ------------------
  |  |  434|    113|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|    113|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
 2018|    113|    v->u.s.aux = base;
 2019|    113|    break;
 2020|    114|  }
 2021|  20.1k|  case '{':  /* Table constructor. */
  ------------------
  |  Branch (2021:3): [True: 20.1k, False: 520k]
  ------------------
 2022|  20.1k|    expr_table(ls, v);
 2023|  20.1k|    return;
 2024|      3|  case TK_function:
  ------------------
  |  Branch (2024:3): [True: 3, False: 540k]
  ------------------
 2025|      3|    lj_lex_next(ls);
 2026|      3|    parse_body(ls, v, 0, ls->linenumber);
 2027|      3|    return;
 2028|   296k|  default:
  ------------------
  |  Branch (2028:3): [True: 296k, False: 244k]
  ------------------
 2029|   296k|    expr_primary(ls, v);
 2030|   296k|    return;
 2031|   540k|  }
 2032|   224k|  lj_lex_next(ls);
 2033|   224k|}
lj_parse.c:expr_init:
   84|  1.35M|{
   85|  1.35M|  e->k = k;
   86|  1.35M|  e->u.s.info = info;
   87|  1.35M|  e->f = e->t = NO_JMP;
  ------------------
  |  |   31|  1.35M|#define NO_JMP		(~(BCPos)0)
  ------------------
   88|  1.35M|}
lj_parse.c:bcreg_reserve:
  391|  1.37M|{
  392|  1.37M|  bcreg_bump(fs, n);
  393|  1.37M|  fs->freereg += n;
  394|  1.37M|}
lj_parse.c:bcreg_bump:
  380|  1.37M|{
  381|  1.37M|  BCReg sz = fs->freereg + n;
  382|  1.37M|  if (sz > fs->framesize) {
  ------------------
  |  Branch (382:7): [True: 199k, False: 1.17M]
  ------------------
  383|   199k|    if (sz >= LJ_MAX_SLOTS)
  ------------------
  |  |   67|   199k|#define LJ_MAX_SLOTS	250		/* Max. # of slots in a Lua func. */
  ------------------
  |  Branch (383:9): [True: 11, False: 199k]
  ------------------
  384|     11|      err_syntax(fs->ls, LJ_ERR_XSLOTS);
  385|   199k|    fs->framesize = (uint8_t)sz;
  386|   199k|  }
  387|  1.37M|}
lj_parse.c:expr_table:
 1729|  31.7k|{
 1730|  31.7k|  FuncState *fs = ls->fs;
 1731|  31.7k|  BCLine line = ls->linenumber;
 1732|  31.7k|  GCtab *t = NULL;
 1733|  31.7k|  int vcall = 0, needarr = 0;
 1734|  31.7k|  uint32_t narr = 1;  /* First array index. */
 1735|  31.7k|  uint32_t nhash = 0;  /* Number of hash entries. */
 1736|  31.7k|  BCReg freg = fs->freereg;
 1737|  31.7k|  BCPos pc = bcemit_AD(fs, BC_TNEW, freg, 0);
  ------------------
  |  |  435|  31.7k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  31.7k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1738|  31.7k|  expr_init(e, VNONRELOC, freg);
 1739|  31.7k|  bcreg_reserve(fs, 1);
 1740|  31.7k|  freg++;
 1741|  31.7k|  lex_check(ls, '{');
 1742|  83.8k|  while (ls->tok != '}') {
  ------------------
  |  Branch (1742:10): [True: 82.2k, False: 1.54k]
  ------------------
 1743|  82.2k|    ExpDesc key, val;
 1744|  82.2k|    vcall = 0;
 1745|  82.2k|    if (ls->tok == '[') {
  ------------------
  |  Branch (1745:9): [True: 1.76k, False: 80.5k]
  ------------------
 1746|  1.76k|      expr_bracket(ls, &key);  /* Already calls expr_toval. */
 1747|  1.76k|      if (!expr_isk(&key)) expr_index(fs, e, &key);
  ------------------
  |  |   73|  1.76k|#define expr_isk(e)		((e)->k <= VKLAST)
  ------------------
  |  Branch (1747:11): [True: 821, False: 942]
  ------------------
 1748|  1.76k|      if (expr_isnumk(&key) && expr_numiszero(&key)) needarr = 1; else nhash++;
  ------------------
  |  |   75|  3.52k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 52, False: 1.71k]
  |  |  ------------------
  ------------------
  |  Branch (1748:32): [True: 13, False: 39]
  ------------------
 1749|  1.76k|      lex_check(ls, '=');
 1750|  80.5k|    } else if ((ls->tok == TK_name || (!LJ_52 && ls->tok == TK_goto)) &&
  ------------------
  |  |  697|  80.3k|#define LJ_52			0
  ------------------
  |  Branch (1750:17): [True: 40.3k, False: 40.1k]
  |  Branch (1750:40): [Folded - Ignored]
  |  Branch (1750:50): [True: 992, False: 39.1k]
  ------------------
 1751|  80.5k|	       lj_lex_lookahead(ls) == '=') {
  ------------------
  |  Branch (1751:9): [True: 19.7k, False: 21.5k]
  ------------------
 1752|  19.7k|      expr_str(ls, &key);
 1753|  19.7k|      lex_check(ls, '=');
 1754|  19.7k|      nhash++;
 1755|  60.7k|    } else {
 1756|  60.7k|      expr_init(&key, VKNUM, 0);
 1757|  60.7k|      setintV(&key.u.nval, (int)narr);
 1758|  60.7k|      narr++;
 1759|  60.7k|      needarr = vcall = 1;
 1760|  60.7k|    }
 1761|  82.2k|    expr(ls, &val);
 1762|  82.2k|    if (expr_isk(&key) && key.k != VKNIL &&
  ------------------
  |  |   73|   164k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 58.3k, False: 23.9k]
  |  |  ------------------
  ------------------
  |  Branch (1762:27): [True: 58.3k, False: 0]
  ------------------
 1763|  82.2k|	(key.k == VKSTR || expr_isk_nojump(&val))) {
  ------------------
  |  |   74|  39.3k|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|  78.7k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 18.4k, False: 20.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  18.4k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 18.3k, False: 132]
  |  |  ------------------
  ------------------
  |  Branch (1763:3): [True: 18.9k, False: 39.3k]
  ------------------
 1764|  37.3k|      TValue k, *v;
 1765|  37.3k|      if (!t) {  /* Create template table on demand. */
  ------------------
  |  Branch (1765:11): [True: 19.8k, False: 17.4k]
  ------------------
 1766|  19.8k|	BCReg kidx;
 1767|  19.8k|	t = lj_tab_new(fs->L, needarr ? narr : 0, hsize2hbits(nhash));
  ------------------
  |  |   53|  19.8k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|     57|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 3.49k, False: 16.3k]
  |  |  |  Branch (53:32): [True: 3.43k, False: 57]
  |  |  ------------------
  ------------------
  |  Branch (1767:24): [True: 16.7k, False: 3.14k]
  ------------------
 1768|  19.8k|	kidx = const_gc(fs, obj2gco(t), LJ_TTAB);
  ------------------
  |  |  775|  19.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
              	kidx = const_gc(fs, obj2gco(t), LJ_TTAB);
  ------------------
  |  |  271|  19.8k|#define LJ_TTAB			(~11u)
  ------------------
 1769|  19.8k|	fs->bcbase[pc].ins = BCINS_AD(BC_TDUP, freg-1, kidx);
  ------------------
  |  |   56|  19.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1770|  19.8k|      }
 1771|  37.3k|      vcall = 0;
 1772|  37.3k|      expr_kvalue(fs, &k, &key);
 1773|  37.3k|      v = lj_tab_set(fs->L, t, &k);
 1774|  37.3k|      lj_gc_anybarriert(fs->L, t);
  ------------------
  |  |   95|  37.3k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  37.3k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 30, False: 37.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|     30|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     30|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1775|  37.3k|      if (expr_isk_nojump(&val)) {  /* Add const key/value to template table. */
  ------------------
  |  |   74|  37.3k|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|  74.6k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 19.1k, False: 18.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  19.1k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 19.1k, False: 18]
  |  |  ------------------
  ------------------
 1776|  19.1k|	expr_kvalue(fs, v, &val);
 1777|       |	/* Mark nil value with table value itself to preserve the key. */
 1778|  19.1k|	if (key.k == VKSTR && tvisnil(v)) settabV(fs->L, v, t);
  ------------------
  |  |  782|    795|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 1, False: 794]
  |  |  ------------------
  ------------------
  |  Branch (1778:6): [True: 795, False: 18.3k]
  ------------------
 1779|  19.1k|      } else {  /* Preserve the key for the following non-const store.  */
 1780|  18.1k|	settabV(fs->L, v, t);
 1781|  18.1k|	goto nonconst;
 1782|  18.1k|      }
 1783|  44.9k|    } else {
 1784|  44.9k|    nonconst:
 1785|  39.6k|      if (val.k != VCALL) { expr_toanyreg(fs, &val); vcall = 0; }
  ------------------
  |  Branch (1785:11): [True: 36.7k, False: 2.91k]
  ------------------
 1786|  39.6k|      if (expr_isk(&key)) expr_index(fs, e, &key);
  ------------------
  |  |   73|  39.6k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 39.1k, False: 500]
  |  |  ------------------
  ------------------
 1787|  39.6k|      bcemit_store(fs, e, &val);
 1788|  39.6k|    }
 1789|  58.8k|    fs->freereg = freg;
 1790|  58.8k|    if (!lex_opt(ls, ',') && !lex_opt(ls, ';')) break;
  ------------------
  |  Branch (1790:9): [True: 24.7k, False: 34.0k]
  |  Branch (1790:30): [True: 6.79k, False: 17.9k]
  ------------------
 1791|  58.8k|  }
 1792|  8.34k|  lex_match(ls, '}', '{', line);
 1793|  8.34k|  if (vcall) {
  ------------------
  |  Branch (1793:7): [True: 1.50k, False: 6.83k]
  ------------------
 1794|  1.50k|    BCInsLine *ilp = &fs->bcbase[fs->pc-1];
 1795|  1.50k|    ExpDesc en;
 1796|  1.50k|    lj_assertFS(bc_a(ilp->ins) == freg &&
  ------------------
  |  |  167|  1.50k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.50k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  6.02k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 3, False: 1.50k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.50k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.50k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.50k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1797|  1.50k|		bc_op(ilp->ins) == (narr > 256 ? BC_TSETV : BC_TSETB),
 1798|  1.50k|		"bad CALL code generation");
 1799|  1.50k|    expr_init(&en, VKNUM, 0);
 1800|  1.50k|    en.u.nval.u32.lo = narr-1;
 1801|  1.50k|    en.u.nval.u32.hi = 0x43300000;  /* Biased integer to avoid denormals. */
 1802|  1.50k|    if (narr > 256) { fs->pc--; ilp--; }
  ------------------
  |  Branch (1802:9): [True: 3, False: 1.50k]
  ------------------
 1803|  1.50k|    ilp->ins = BCINS_AD(BC_TSETM, freg, const_num(fs, &en));
  ------------------
  |  |   56|  1.50k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1804|  1.50k|    setbc_b(&ilp[-1].ins, 0);
  ------------------
  |  |   46|  1.50k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  1.50k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  1.50k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1805|  1.50k|  }
 1806|  8.34k|  if (pc == fs->pc-1) {  /* Make expr relocable if possible. */
  ------------------
  |  Branch (1806:7): [True: 1.28k, False: 7.05k]
  ------------------
 1807|  1.28k|    e->u.s.info = pc;
 1808|  1.28k|    fs->freereg--;
 1809|  1.28k|    e->k = VRELOCABLE;
 1810|  7.05k|  } else {
 1811|  7.05k|    e->k = VNONRELOC;  /* May have been changed by expr_index. */
 1812|  7.05k|  }
 1813|  8.34k|  if (!t) {  /* Construct TNEW RD: hhhhhaaaaaaaaaaa. */
  ------------------
  |  Branch (1813:7): [True: 3.91k, False: 4.42k]
  ------------------
 1814|  3.91k|    BCIns *ip = &fs->bcbase[pc].ins;
 1815|  3.91k|    if (!needarr) narr = 0;
  ------------------
  |  Branch (1815:9): [True: 1.23k, False: 2.68k]
  ------------------
 1816|  2.68k|    else if (narr < 3) narr = 3;
  ------------------
  |  Branch (1816:14): [True: 2.46k, False: 223]
  ------------------
 1817|    223|    else if (narr > 0x7ff) narr = 0x7ff;
  ------------------
  |  Branch (1817:14): [True: 0, False: 223]
  ------------------
 1818|  3.91k|    setbc_d(ip, narr|(hsize2hbits(nhash)<<11));
  ------------------
  |  |   49|  8.51k|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|  3.91k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  |  |  |  Branch (49:58): [True: 248, False: 93]
  |  |  |  Branch (49:58): [True: 341, False: 3.57k]
  |  |  ------------------
  ------------------
 1819|  4.42k|  } else {
 1820|  4.42k|    if (needarr && t->asize < narr)
  ------------------
  |  Branch (1820:9): [True: 1.91k, False: 2.51k]
  |  Branch (1820:20): [True: 1.10k, False: 804]
  ------------------
 1821|  1.10k|      lj_tab_reasize(fs->L, t, narr-1);
 1822|  4.42k|    lj_gc_check(fs->L);
  ------------------
  |  |   66|  4.42k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  4.42k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 218, False: 4.21k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  4.42k|      lj_gc_step(L); }
  ------------------
 1823|  4.42k|  }
 1824|  8.34k|}
lj_parse.c:expr_bracket:
 1706|  6.54k|{
 1707|  6.54k|  lj_lex_next(ls);  /* Skip '['. */
 1708|  6.54k|  expr(ls, v);
 1709|  6.54k|  expr_toval(ls->fs, v);
 1710|  6.54k|  lex_check(ls, ']');
 1711|  6.54k|}
lj_parse.c:expr_toval:
  614|   221k|{
  615|   221k|  if (expr_hasjump(e))
  ------------------
  |  |   71|   221k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (71:26): [True: 289, False: 221k]
  |  |  ------------------
  ------------------
  616|    289|    expr_toanyreg(fs, e);
  617|   221k|  else
  618|   221k|    expr_discharge(fs, e);
  619|   221k|}
lj_parse.c:expr_discharge:
  444|  3.37M|{
  445|  3.37M|  BCIns ins;
  446|  3.37M|  if (e->k == VUPVAL) {
  ------------------
  |  Branch (446:7): [True: 3.03k, False: 3.37M]
  ------------------
  447|  3.03k|    ins = BCINS_AD(BC_UGET, 0, e->u.s.info);
  ------------------
  |  |   56|  3.03k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  448|  3.37M|  } else if (e->k == VGLOBAL) {
  ------------------
  |  Branch (448:14): [True: 336k, False: 3.03M]
  ------------------
  449|   336k|    ins = BCINS_AD(BC_GGET, 0, const_str(fs, e));
  ------------------
  |  |   56|   336k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  450|  3.03M|  } else if (e->k == VINDEXED) {
  ------------------
  |  Branch (450:14): [True: 25.4k, False: 3.01M]
  ------------------
  451|  25.4k|    BCReg rc = e->u.s.aux;
  452|  25.4k|    if ((int32_t)rc < 0) {
  ------------------
  |  Branch (452:9): [True: 21.4k, False: 4.00k]
  ------------------
  453|  21.4k|      ins = BCINS_ABC(BC_TGETS, 0, e->u.s.info, ~rc);
  ------------------
  |  |   54|  21.4k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  454|  21.4k|    } else if (rc > BCMAX_C) {
  ------------------
  |  |   27|  4.00k|#define BCMAX_C		0xff
  ------------------
  |  Branch (454:16): [True: 256, False: 3.74k]
  ------------------
  455|    256|      ins = BCINS_ABC(BC_TGETB, 0, e->u.s.info, rc-(BCMAX_C+1));
  ------------------
  |  |   54|    256|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  456|  3.74k|    } else {
  457|  3.74k|      bcreg_free(fs, rc);
  458|  3.74k|      ins = BCINS_ABC(BC_TGETV, 0, e->u.s.info, rc);
  ------------------
  |  |   54|  3.74k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  459|  3.74k|    }
  460|  25.4k|    bcreg_free(fs, e->u.s.info);
  461|  3.01M|  } else if (e->k == VCALL) {
  ------------------
  |  Branch (461:14): [True: 124k, False: 2.88M]
  ------------------
  462|   124k|    e->u.s.info = e->u.s.aux;
  463|   124k|    e->k = VNONRELOC;
  464|   124k|    return;
  465|  2.88M|  } else if (e->k == VLOCAL) {
  ------------------
  |  Branch (465:14): [True: 24.4k, False: 2.86M]
  ------------------
  466|  24.4k|    e->k = VNONRELOC;
  467|  24.4k|    return;
  468|  2.86M|  } else {
  469|  2.86M|    return;
  470|  2.86M|  }
  471|   364k|  e->u.s.info = bcemit_INS(fs, ins);
  472|   364k|  e->k = VRELOCABLE;
  473|   364k|}
lj_parse.c:const_str:
  233|   763k|{
  234|   763k|  lj_assertFS(expr_isstrk(e) || e->k == VGLOBAL, "bad usage");
  ------------------
  |  |  167|   763k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   763k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.25M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 269k, False: 493k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 493k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   763k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  235|   763k|  return const_gc(fs, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  775|   763k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                return const_gc(fs, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  264|   763k|#define LJ_TSTR			(~4u)
  ------------------
  236|   763k|}
lj_parse.c:bcreg_free:
  398|   327k|{
  399|   327k|  if (reg >= fs->nactvar) {
  ------------------
  |  Branch (399:7): [True: 304k, False: 22.6k]
  ------------------
  400|   304k|    fs->freereg--;
  401|   304k|    lj_assertFS(reg == fs->freereg, "bad regfree");
  ------------------
  |  |  167|   304k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   304k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   304k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 304k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   304k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  402|   304k|  }
  403|   327k|}
lj_parse.c:expr_index:
 1663|  67.5k|{
 1664|       |  /* Already called: expr_toval(fs, e). */
 1665|  67.5k|  t->k = VINDEXED;
 1666|  67.5k|  if (expr_isnumk(e)) {
  ------------------
  |  |   75|  67.5k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 24.9k, False: 42.5k]
  |  |  ------------------
  ------------------
 1667|       |#if LJ_DUALNUM
 1668|       |    if (tvisint(expr_numtv(e))) {
 1669|       |      int32_t k = intV(expr_numtv(e));
 1670|       |      if (checku8(k)) {
 1671|       |	t->u.s.aux = BCMAX_C+1+(uint32_t)k;  /* 256..511: const byte key */
 1672|       |	return;
 1673|       |      }
 1674|       |    }
 1675|       |#else
 1676|  24.9k|    lua_Number n = expr_numberV(e);
  ------------------
  |  |   80|  24.9k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|  24.9k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  24.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  24.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  24.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 24.9k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  24.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1677|  24.9k|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|  24.9k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
 1678|  24.9k|    if (checku8(k) && n == (lua_Number)k) {
  ------------------
  |  |  102|  49.9k|#define checku8(x)	((x) == (int32_t)(uint8_t)(x))
  |  |  ------------------
  |  |  |  Branch (102:20): [True: 23.5k, False: 1.42k]
  |  |  ------------------
  ------------------
  |  Branch (1678:23): [True: 19.9k, False: 3.56k]
  ------------------
 1679|  19.9k|      t->u.s.aux = BCMAX_C+1+(uint32_t)k;  /* 256..511: const byte key */
  ------------------
  |  |   27|  19.9k|#define BCMAX_C		0xff
  ------------------
 1680|  19.9k|      return;
 1681|  19.9k|    }
 1682|  24.9k|#endif
 1683|  42.5k|  } else if (expr_isstrk(e)) {
  ------------------
  |  |   77|  42.5k|#define expr_isstrk(e)		((e)->k == VKSTR)
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 41.6k, False: 934]
  |  |  ------------------
  ------------------
 1684|  41.6k|    BCReg idx = const_str(fs, e);
 1685|  41.6k|    if (idx <= BCMAX_C) {
  ------------------
  |  |   27|  41.6k|#define BCMAX_C		0xff
  ------------------
  |  Branch (1685:9): [True: 41.6k, False: 0]
  ------------------
 1686|  41.6k|      t->u.s.aux = ~idx;  /* -256..-1: const string key */
 1687|  41.6k|      return;
 1688|  41.6k|    }
 1689|  41.6k|  }
 1690|  5.92k|  t->u.s.aux = expr_toanyreg(fs, e);  /* 0..255: register */
 1691|  5.92k|}
lj_parse.c:expr_numiszero:
   92|  1.44k|{
   93|  1.44k|  TValue *o = expr_numtv(e);
  ------------------
  |  |   79|  1.44k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  ------------------
  |  |  |  |  367|  1.44k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.44k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.44k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.44k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.44k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   94|  1.44k|  return tvisint(o) ? (intV(o) == 0) : tviszero(o);
  ------------------
  |  |  803|  1.44k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  2.89k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                return tvisint(o) ? (intV(o) == 0) : tviszero(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                return tvisint(o) ? (intV(o) == 0) : tviszero(o);
  ------------------
  |  |  814|  1.44k|#define tviszero(o)	(((o)->u64 << 1) == 0)
  ------------------
   95|  1.44k|}
lj_parse.c:expr_str:
 1656|  45.0k|{
 1657|  45.0k|  expr_init(e, VKSTR, 0);
 1658|  45.0k|  e->u.sval = lex_str(ls);
 1659|  45.0k|}
lj_parse.c:lex_str:
 1039|   648k|{
 1040|   648k|  GCstr *s;
 1041|   648k|  if (ls->tok != TK_name && (LJ_52 || ls->tok != TK_goto))
  ------------------
  |  |  697|  5.29k|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (1041:7): [True: 2.64k, False: 645k]
  |  Branch (1041:39): [True: 50, False: 2.59k]
  ------------------
 1042|     50|    err_token(ls, TK_name);
 1043|   648k|  s = strV(&ls->tokval);
  ------------------
  |  |  859|   648k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   648k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   648k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   648k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 648k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   648k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1044|      0|  lj_lex_next(ls);
 1045|   648k|  return s;
 1046|   648k|}
lj_parse.c:const_gc:
  219|   914k|{
  220|   914k|  lua_State *L = fs->L;
  221|   914k|  TValue key, *o;
  222|   914k|  setgcV(L, &key, gc, itype);
  223|       |  /* NOBARRIER: the key is new or kept alive. */
  224|   914k|  o = lj_tab_set(L, fs->kt, &key);
  225|   914k|  if (tvhaskslot(o))
  ------------------
  |  |  201|   914k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 450k, False: 463k]
  |  |  ------------------
  ------------------
  226|   450k|    return tvkslot(o);
  ------------------
  |  |  202|   450k|#define tvkslot(o)	((o)->u32.lo)
  ------------------
  227|   463k|  o->u64 = fs->nkgc;
  228|   463k|  return fs->nkgc++;
  229|   914k|}
lj_parse.c:expr_kvalue:
 1715|  56.4k|{
 1716|  56.4k|  UNUSED(fs);
  ------------------
  |  |   91|  56.4k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1717|  56.4k|  if (e->k <= VKTRUE) {
  ------------------
  |  Branch (1717:7): [True: 389, False: 56.1k]
  ------------------
 1718|    389|    setpriV(v, ~(uint32_t)e->k);
  ------------------
  |  |  873|    389|#define setpriV(o, x)		((o)->it64 = (int64_t)~((uint64_t)~(x)<<47))
  ------------------
 1719|  56.1k|  } else if (e->k == VKSTR) {
  ------------------
  |  Branch (1719:14): [True: 35.1k, False: 20.9k]
  ------------------
 1720|  35.1k|    setgcVraw(v, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  775|  35.1k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                  setgcVraw(v, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  264|  35.1k|#define LJ_TSTR			(~4u)
  ------------------
 1721|  35.1k|  } else {
 1722|  20.9k|    lj_assertFS(tvisnumber(expr_numtv(e)), "bad number constant");
  ------------------
  |  |  167|  20.9k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  20.9k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  41.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 20.9k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 20.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  20.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1723|  20.9k|    *v = *expr_numtv(e);
  ------------------
  |  |   79|  20.9k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  ------------------
  |  |  |  |  367|  20.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  20.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  20.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 20.9k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  20.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1724|  20.9k|  }
 1725|  56.4k|}
lj_parse.c:expr_toanyreg:
  599|  1.01M|{
  600|  1.01M|  expr_discharge(fs, e);
  601|  1.01M|  if (e->k == VNONRELOC) {
  ------------------
  |  Branch (601:7): [True: 407k, False: 605k]
  ------------------
  602|   407k|    if (!expr_hasjump(e)) return e->u.s.info;  /* Already in a register. */
  ------------------
  |  |   71|   407k|#define expr_hasjump(e)		((e)->t != (e)->f)
  ------------------
  |  Branch (602:9): [True: 406k, False: 644]
  ------------------
  603|    644|    if (e->u.s.info >= fs->nactvar) {
  ------------------
  |  Branch (603:9): [True: 585, False: 59]
  ------------------
  604|    585|      expr_toreg(fs, e, e->u.s.info);  /* Discharge to temp. register. */
  605|    585|      return e->u.s.info;
  606|    585|    }
  607|    644|  }
  608|   605k|  expr_tonextreg(fs, e);  /* Discharge to next register. */
  609|   605k|  return e->u.s.info;
  610|  1.01M|}
lj_parse.c:expr_toreg:
  565|  1.05M|{
  566|  1.05M|  expr_toreg_nobranch(fs, e, reg);
  567|  1.05M|  if (e->k == VJMP)
  ------------------
  |  Branch (567:7): [True: 79.6k, False: 979k]
  ------------------
  568|  79.6k|    jmp_append(fs, &e->t, e->u.s.info);  /* Add it to the true jump list. */
  569|  1.05M|  if (expr_hasjump(e)) {  /* Discharge expression with branches. */
  ------------------
  |  |   71|  1.05M|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (71:26): [True: 82.2k, False: 976k]
  |  |  ------------------
  ------------------
  570|  82.2k|    BCPos jend, jfalse = NO_JMP, jtrue = NO_JMP;
  ------------------
  |  |   31|  82.2k|#define NO_JMP		(~(BCPos)0)
  ------------------
                  BCPos jend, jfalse = NO_JMP, jtrue = NO_JMP;
  ------------------
  |  |   31|  82.2k|#define NO_JMP		(~(BCPos)0)
  ------------------
  571|  82.2k|    if (jmp_novalue(fs, e->t) || jmp_novalue(fs, e->f)) {
  ------------------
  |  Branch (571:9): [True: 79.9k, False: 2.21k]
  |  Branch (571:34): [True: 284, False: 1.93k]
  ------------------
  572|  80.2k|      BCPos jval = (e->k == VJMP) ? NO_JMP : bcemit_jmp(fs);
  ------------------
  |  |   31|  79.6k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (572:20): [True: 79.6k, False: 576]
  ------------------
  573|  80.2k|      jfalse = bcemit_AD(fs, BC_KPRI, reg, VKFALSE);
  ------------------
  |  |  435|  80.2k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  80.2k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  574|  80.2k|      bcemit_AJ(fs, BC_JMP, fs->freereg, 1);
  ------------------
  |  |  436|  80.2k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  80.2k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  80.2k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  575|  80.2k|      jtrue = bcemit_AD(fs, BC_KPRI, reg, VKTRUE);
  ------------------
  |  |  435|  80.2k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  80.2k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  576|  80.2k|      jmp_tohere(fs, jval);
  577|  80.2k|    }
  578|  82.2k|    jend = fs->pc;
  579|  82.2k|    fs->lasttarget = jend;
  580|  82.2k|    jmp_patchval(fs, e->f, jend, reg, jfalse);
  581|  82.2k|    jmp_patchval(fs, e->t, jend, reg, jtrue);
  582|  82.2k|  }
  583|  1.05M|  e->f = e->t = NO_JMP;
  ------------------
  |  |   31|  1.05M|#define NO_JMP		(~(BCPos)0)
  ------------------
  584|  1.05M|  e->u.s.info = reg;
  585|  1.05M|  e->k = VNONRELOC;
  586|  1.05M|}
lj_parse.c:expr_toreg_nobranch:
  513|  1.06M|{
  514|  1.06M|  BCIns ins;
  515|  1.06M|  expr_discharge(fs, e);
  516|  1.06M|  if (e->k == VKSTR) {
  ------------------
  |  Branch (516:7): [True: 226k, False: 837k]
  ------------------
  517|   226k|    ins = BCINS_AD(BC_KSTR, reg, const_str(fs, e));
  ------------------
  |  |   56|   226k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  518|   837k|  } else if (e->k == VKNUM) {
  ------------------
  |  Branch (518:14): [True: 10.1k, False: 827k]
  ------------------
  519|       |#if LJ_DUALNUM
  520|       |    cTValue *tv = expr_numtv(e);
  521|       |    if (tvisint(tv) && checki16(intV(tv)))
  522|       |      ins = BCINS_AD(BC_KSHORT, reg, (BCReg)(uint16_t)intV(tv));
  523|       |    else
  524|       |#else
  525|  10.1k|    lua_Number n = expr_numberV(e);
  ------------------
  |  |   80|  10.1k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|  10.1k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  10.1k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  10.1k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  10.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 10.1k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  10.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  526|  10.1k|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|  10.1k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  527|  10.1k|    if (checki16(k) && n == (lua_Number)k)
  ------------------
  |  |  103|  20.3k|#define checki16(x)	((x) == (int32_t)(int16_t)(x))
  |  |  ------------------
  |  |  |  Branch (103:21): [True: 8.87k, False: 1.31k]
  |  |  ------------------
  ------------------
  |  Branch (527:24): [True: 5.13k, False: 3.74k]
  ------------------
  528|  5.13k|      ins = BCINS_AD(BC_KSHORT, reg, (BCReg)(uint16_t)k);
  ------------------
  |  |   56|  5.13k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  529|  5.06k|    else
  530|  5.06k|#endif
  531|  5.06k|      ins = BCINS_AD(BC_KNUM, reg, const_num(fs, e));
  ------------------
  |  |   56|  5.06k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  532|  10.1k|#if LJ_HASFFI
  533|   827k|  } else if (e->k == VKCDATA) {
  ------------------
  |  Branch (533:14): [True: 120k, False: 706k]
  ------------------
  534|   120k|    fs->flags |= PROTO_FFI;
  ------------------
  |  |  401|   120k|#define PROTO_FFI		0x04	/* Uses BC_KCDATA for FFI datatypes. */
  ------------------
  535|   120k|    ins = BCINS_AD(BC_KCDATA, reg,
  ------------------
  |  |   56|   241k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 120k, False: 0]
  |  |  ------------------
  ------------------
  536|   120k|		   const_gc(fs, obj2gco(cdataV(&e->u.nval)), LJ_TCDATA));
  537|   120k|#endif
  538|   706k|  } else if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (538:14): [True: 609k, False: 97.7k]
  ------------------
  539|   609k|    setbc_a(bcptr(fs, e), reg);
  ------------------
  |  |   45|   609k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|   609k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|   609k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  540|   609k|    goto noins;
  541|   609k|  } else if (e->k == VNONRELOC) {
  ------------------
  |  Branch (541:14): [True: 13.5k, False: 84.2k]
  ------------------
  542|  13.5k|    if (reg == e->u.s.info)
  ------------------
  |  Branch (542:9): [True: 12.6k, False: 808]
  ------------------
  543|  12.6k|      goto noins;
  544|    808|    ins = BCINS_AD(BC_MOV, reg, e->u.s.info);
  ------------------
  |  |   56|    808|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  545|  84.2k|  } else if (e->k == VKNIL) {
  ------------------
  |  Branch (545:14): [True: 1.92k, False: 82.3k]
  ------------------
  546|  1.92k|    bcemit_nil(fs, reg, 1);
  547|  1.92k|    goto noins;
  548|  82.3k|  } else if (e->k <= VKTRUE) {
  ------------------
  |  Branch (548:14): [True: 2.63k, False: 79.6k]
  ------------------
  549|  2.63k|    ins = BCINS_AD(BC_KPRI, reg, const_pri(e));
  ------------------
  |  |   56|  5.27k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 2.63k, False: 0]
  |  |  ------------------
  ------------------
  550|  79.6k|  } else {
  551|  79.6k|    lj_assertFS(e->k == VVOID || e->k == VJMP, "bad expr type %d", e->k);
  ------------------
  |  |  167|  79.6k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  79.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   159k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 79.6k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 79.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  79.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  552|  79.6k|    return;
  553|  79.6k|  }
  554|   360k|  bcemit_INS(fs, ins);
  555|   984k|noins:
  556|   984k|  e->u.s.info = reg;
  557|   984k|  e->k = VNONRELOC;
  558|   984k|}
lj_parse.c:bcemit_nil:
  477|  7.78k|{
  478|  7.78k|  if (fs->pc > fs->lasttarget) {  /* No jumps to current position? */
  ------------------
  |  Branch (478:7): [True: 7.62k, False: 168]
  ------------------
  479|  7.62k|    BCIns *ip = &fs->bcbase[fs->pc-1].ins;
  480|  7.62k|    BCReg pto, pfrom = bc_a(*ip);
  ------------------
  |  |   35|  7.62k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  481|  7.62k|    switch (bc_op(*ip)) {  /* Try to merge with the previous instruction. */
  ------------------
  |  |   34|  7.62k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  482|    709|    case BC_KPRI:
  ------------------
  |  Branch (482:5): [True: 709, False: 6.91k]
  ------------------
  483|    709|      if (bc_d(*ip) != ~LJ_TNIL) break;
  ------------------
  |  |   38|    709|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
                    if (bc_d(*ip) != ~LJ_TNIL) break;
  ------------------
  |  |  260|    709|#define LJ_TNIL			(~0u)
  ------------------
  |  Branch (483:11): [True: 12, False: 697]
  ------------------
  484|    697|      if (from == pfrom) {
  ------------------
  |  Branch (484:11): [True: 0, False: 697]
  ------------------
  485|      0|	if (n == 1) return;
  ------------------
  |  Branch (485:6): [True: 0, False: 0]
  ------------------
  486|    697|      } else if (from == pfrom+1) {
  ------------------
  |  Branch (486:18): [True: 573, False: 124]
  ------------------
  487|    573|	from = pfrom;
  488|    573|	n++;
  489|    573|      } else {
  490|    124|	break;
  491|    124|      }
  492|    573|      *ip = BCINS_AD(BC_KNIL, from, from+n-1);  /* Replace KPRI. */
  ------------------
  |  |   56|    573|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  493|    573|      return;
  494|    387|    case BC_KNIL:
  ------------------
  |  Branch (494:5): [True: 387, False: 7.23k]
  ------------------
  495|    387|      pto = bc_d(*ip);
  ------------------
  |  |   38|    387|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  496|    387|      if (pfrom <= from && from <= pto+1) {  /* Can we connect both ranges? */
  ------------------
  |  Branch (496:11): [True: 387, False: 0]
  |  Branch (496:28): [True: 361, False: 26]
  ------------------
  497|    361|	if (from+n-1 > pto)
  ------------------
  |  Branch (497:6): [True: 361, False: 0]
  ------------------
  498|    361|	  setbc_d(ip, from+n-1);  /* Patch previous instruction range. */
  ------------------
  |  |   49|    361|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|    361|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  ------------------
  499|    361|	return;
  500|    361|      }
  501|     26|      break;
  502|  6.52k|    default:
  ------------------
  |  Branch (502:5): [True: 6.52k, False: 1.09k]
  ------------------
  503|  6.52k|      break;
  504|  7.62k|    }
  505|  7.62k|  }
  506|       |  /* Emit new instruction or replace old instruction. */
  507|  6.85k|  bcemit_INS(fs, n == 1 ? BCINS_AD(BC_KPRI, from, VKNIL) :
  ------------------
  |  |   56|  5.63k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  |  Branch (507:18): [True: 5.63k, False: 1.22k]
  ------------------
  508|  6.85k|			  BCINS_AD(BC_KNIL, from, from+n-1));
  ------------------
  |  |   56|  1.22k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  509|  6.85k|}
lj_parse.c:jmp_novalue:
  275|  84.4k|{
  276|  88.1k|  for (; list != NO_JMP; list = jmp_next(fs, list)) {
  ------------------
  |  |   31|  88.1k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (276:10): [True: 83.9k, False: 4.14k]
  ------------------
  277|  83.9k|    BCIns p = fs->bcbase[list >= 1 ? list-1 : list].ins;
  ------------------
  |  Branch (277:26): [True: 83.9k, False: 0]
  ------------------
  278|  83.9k|    if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   34|  83.9k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
                  if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   34|  82.1k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
                  if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   35|  81.6k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                  if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   30|  81.6k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  81.6k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  |  Branch (278:11): [True: 1.79k, False: 82.1k]
  |  Branch (278:34): [True: 577, False: 81.6k]
  |  Branch (278:57): [True: 1.35k, False: 80.2k]
  ------------------
  279|  80.2k|      return 1;
  280|  83.9k|  }
  281|  4.14k|  return 0;
  282|  84.4k|}
lj_parse.c:expr_tonextreg:
  590|  1.05M|{
  591|  1.05M|  expr_discharge(fs, e);
  592|  1.05M|  expr_free(fs, e);
  593|  1.05M|  bcreg_reserve(fs, 1);
  594|  1.05M|  expr_toreg(fs, e, fs->freereg - 1);
  595|  1.05M|}
lj_parse.c:expr_free:
  407|  1.34M|{
  408|  1.34M|  if (e->k == VNONRELOC)
  ------------------
  |  Branch (408:7): [True: 297k, False: 1.04M]
  ------------------
  409|   297k|    bcreg_free(fs, e->u.s.info);
  410|  1.34M|}
lj_parse.c:bcemit_store:
  623|   199k|{
  624|   199k|  BCIns ins;
  625|   199k|  if (var->k == VLOCAL) {
  ------------------
  |  Branch (625:7): [True: 719, False: 198k]
  ------------------
  626|    719|    fs->ls->vstack[var->u.s.aux].info |= VSTACK_VAR_RW;
  ------------------
  |  |  118|    719|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  627|    719|    expr_free(fs, e);
  628|    719|    expr_toreg(fs, e, var->u.s.info);
  629|    719|    return;
  630|   198k|  } else if (var->k == VUPVAL) {
  ------------------
  |  Branch (630:14): [True: 1.35k, False: 197k]
  ------------------
  631|  1.35k|    fs->ls->vstack[var->u.s.aux].info |= VSTACK_VAR_RW;
  ------------------
  |  |  118|  1.35k|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  632|  1.35k|    expr_toval(fs, e);
  633|  1.35k|    if (e->k <= VKTRUE)
  ------------------
  |  Branch (633:9): [True: 116, False: 1.24k]
  ------------------
  634|    116|      ins = BCINS_AD(BC_USETP, var->u.s.info, const_pri(e));
  ------------------
  |  |   56|    232|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 116, False: 0]
  |  |  ------------------
  ------------------
  635|  1.24k|    else if (e->k == VKSTR)
  ------------------
  |  Branch (635:14): [True: 276, False: 965]
  ------------------
  636|    276|      ins = BCINS_AD(BC_USETS, var->u.s.info, const_str(fs, e));
  ------------------
  |  |   56|    276|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  637|    965|    else if (e->k == VKNUM)
  ------------------
  |  Branch (637:14): [True: 1, False: 964]
  ------------------
  638|      1|      ins = BCINS_AD(BC_USETN, var->u.s.info, const_num(fs, e));
  ------------------
  |  |   56|      1|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  639|    964|    else
  640|    964|      ins = BCINS_AD(BC_USETV, var->u.s.info, expr_toanyreg(fs, e));
  ------------------
  |  |   56|    964|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  641|   197k|  } else if (var->k == VGLOBAL) {
  ------------------
  |  Branch (641:14): [True: 157k, False: 40.0k]
  ------------------
  642|   157k|    BCReg ra = expr_toanyreg(fs, e);
  643|   157k|    ins = BCINS_AD(BC_GSET, ra, const_str(fs, var));
  ------------------
  |  |   56|   157k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  644|   157k|  } else {
  645|  40.0k|    BCReg ra, rc;
  646|  40.0k|    lj_assertFS(var->k == VINDEXED, "bad expr type %d", var->k);
  ------------------
  |  |  167|  40.0k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  40.0k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  40.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 40.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  40.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  647|  40.0k|    ra = expr_toanyreg(fs, e);
  648|  40.0k|    rc = var->u.s.aux;
  649|  40.0k|    if ((int32_t)rc < 0) {
  ------------------
  |  Branch (649:9): [True: 18.5k, False: 21.5k]
  ------------------
  650|  18.5k|      ins = BCINS_ABC(BC_TSETS, ra, var->u.s.info, ~rc);
  ------------------
  |  |   54|  18.5k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  651|  21.5k|    } else if (rc > BCMAX_C) {
  ------------------
  |  |   27|  21.5k|#define BCMAX_C		0xff
  ------------------
  |  Branch (651:16): [True: 19.7k, False: 1.77k]
  ------------------
  652|  19.7k|      ins = BCINS_ABC(BC_TSETB, ra, var->u.s.info, rc-(BCMAX_C+1));
  ------------------
  |  |   54|  19.7k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  653|  19.7k|    } else {
  654|  1.77k|#ifdef LUA_USE_ASSERT
  655|       |      /* Free late alloced key reg to avoid assert on free of value reg. */
  656|       |      /* This can only happen when called from expr_table(). */
  657|  1.77k|      if (e->k == VNONRELOC && ra >= fs->nactvar && rc >= ra)
  ------------------
  |  Branch (657:11): [True: 1.77k, False: 0]
  |  Branch (657:32): [True: 1.39k, False: 374]
  |  Branch (657:53): [True: 898, False: 500]
  ------------------
  658|    898|	bcreg_free(fs, rc);
  659|  1.77k|#endif
  660|  1.77k|      ins = BCINS_ABC(BC_TSETV, ra, var->u.s.info, rc);
  ------------------
  |  |   54|  1.77k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  661|  1.77k|    }
  662|  40.0k|  }
  663|   198k|  bcemit_INS(fs, ins);
  664|   198k|  expr_free(fs, e);
  665|   198k|}
lj_parse.c:const_num:
  206|  29.7k|{
  207|  29.7k|  lua_State *L = fs->L;
  208|  29.7k|  TValue *o;
  209|  29.7k|  lj_assertFS(expr_isnumk(e), "bad usage");
  ------------------
  |  |  167|  29.7k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  29.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  29.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 29.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  29.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  210|  29.7k|  o = lj_tab_set(L, fs->kt, &e->u.nval);
  211|  29.7k|  if (tvhaskslot(o))
  ------------------
  |  |  201|  29.7k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 23.4k, False: 6.21k]
  |  |  ------------------
  ------------------
  212|  23.4k|    return tvkslot(o);
  ------------------
  |  |  202|  23.4k|#define tvkslot(o)	((o)->u32.lo)
  ------------------
  213|  6.21k|  o->u64 = fs->nkn;
  214|  6.21k|  return fs->nkn++;
  215|  29.7k|}
lj_parse.c:parse_body:
 1859|  49.6k|{
 1860|  49.6k|  FuncState fs, *pfs = ls->fs;
 1861|  49.6k|  FuncScope bl;
 1862|  49.6k|  GCproto *pt;
 1863|  49.6k|  ptrdiff_t oldbase = pfs->bcbase - ls->bcstack;
 1864|  49.6k|  fs_init(ls, &fs);
 1865|  49.6k|  fscope_begin(&fs, &bl, 0);
 1866|  49.6k|  fs.linedefined = line;
 1867|  49.6k|  fs.numparams = (uint8_t)parse_params(ls, needself);
 1868|  49.6k|  fs.bcbase = pfs->bcbase + pfs->pc;
 1869|  49.6k|  fs.bclim = pfs->bclim - pfs->pc;
 1870|  49.6k|  bcemit_AD(&fs, BC_FUNCF, 0, 0);  /* Placeholder. */
  ------------------
  |  |  435|  49.6k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  49.6k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1871|  49.6k|  parse_chunk(ls);
 1872|  49.6k|  if (ls->tok != TK_end) lex_match(ls, TK_end, TK_function, line);
  ------------------
  |  Branch (1872:7): [True: 1.96k, False: 47.6k]
  ------------------
 1873|  49.6k|  pt = fs_finish(ls, (ls->lastline = ls->linenumber));
 1874|  49.6k|  pfs->bcbase = ls->bcstack + oldbase;  /* May have been reallocated. */
 1875|  49.6k|  pfs->bclim = (BCPos)(ls->sizebcstack - oldbase);
 1876|       |  /* Store new prototype in the constant array of the parent. */
 1877|  49.6k|  expr_init(e, VRELOCABLE,
 1878|  49.6k|	    bcemit_AD(pfs, BC_FNEW, 0, const_gc(pfs, obj2gco(pt), LJ_TPROTO)));
  ------------------
  |  |  435|  49.6k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  49.6k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1879|  49.6k|#if LJ_HASFFI
 1880|  49.6k|  pfs->flags |= (fs.flags & PROTO_FFI);
  ------------------
  |  |  401|  49.6k|#define PROTO_FFI		0x04	/* Uses BC_KCDATA for FFI datatypes. */
  ------------------
 1881|  49.6k|#endif
 1882|  49.6k|  if (!(pfs->flags & PROTO_CHILD)) {
  ------------------
  |  |  399|  49.6k|#define PROTO_CHILD		0x01	/* Has child prototypes. */
  ------------------
  |  Branch (1882:7): [True: 9.95k, False: 39.6k]
  ------------------
 1883|  9.95k|    if (pfs->flags & PROTO_HAS_RETURN)
  ------------------
  |  |  405|  9.95k|#define PROTO_HAS_RETURN	0x20	/* Already emitted a return. */
  ------------------
  |  Branch (1883:9): [True: 50, False: 9.90k]
  ------------------
 1884|     50|      pfs->flags |= PROTO_FIXUP_RETURN;
  ------------------
  |  |  406|     50|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
 1885|  9.95k|    pfs->flags |= PROTO_CHILD;
  ------------------
  |  |  399|  9.95k|#define PROTO_CHILD		0x01	/* Has child prototypes. */
  ------------------
 1886|  9.95k|  }
 1887|  49.6k|  lj_lex_next(ls);
 1888|  49.6k|}
lj_parse.c:parse_params:
 1828|  49.6k|{
 1829|  49.6k|  FuncState *fs = ls->fs;
 1830|  49.6k|  BCReg nparams = 0;
 1831|  49.6k|  lex_check(ls, '(');
 1832|  49.6k|  if (needself)
  ------------------
  |  Branch (1832:7): [True: 4, False: 49.6k]
  ------------------
 1833|      4|    var_new_lit(ls, nparams++, "self");
  ------------------
  |  | 1073|      4|  var_new(ls, (n), lj_parse_keepstr(ls, "" v, sizeof(v)-1))
  ------------------
 1834|  49.6k|  if (ls->tok != ')') {
  ------------------
  |  Branch (1834:7): [True: 1.11k, False: 48.5k]
  ------------------
 1835|  1.18k|    do {
 1836|  1.18k|      if (ls->tok == TK_name || (!LJ_52 && ls->tok == TK_goto)) {
  ------------------
  |  |  697|  1.54k|#define LJ_52			0
  ------------------
  |  Branch (1836:11): [True: 414, False: 773]
  |  Branch (1836:34): [Folded - Ignored]
  |  Branch (1836:44): [True: 761, False: 12]
  ------------------
 1837|  1.17k|	var_new(ls, nparams++, lex_str(ls));
 1838|  1.17k|      } else if (ls->tok == TK_dots) {
  ------------------
  |  Branch (1838:18): [True: 4, False: 8]
  ------------------
 1839|      4|	lj_lex_next(ls);
 1840|      4|	fs->flags |= PROTO_VARARG;
  ------------------
  |  |  400|      4|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
 1841|      4|	break;
 1842|      8|      } else {
 1843|      8|	err_syntax(ls, LJ_ERR_XPARAM);
 1844|      8|      }
 1845|  1.18k|    } while (lex_opt(ls, ','));
  ------------------
  |  Branch (1845:14): [True: 69, False: 1.10k]
  ------------------
 1846|  1.11k|  }
 1847|  49.6k|  var_add(ls, nparams);
 1848|  49.6k|  lj_assertFS(fs->nactvar == nparams, "bad regalloc");
  ------------------
  |  |  167|  49.6k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  49.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  49.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 49.5k, False: 112]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  49.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1849|  49.5k|  bcreg_reserve(fs, nparams);
 1850|  49.5k|  lex_check(ls, ')');
 1851|  49.5k|  return nparams;
 1852|  49.6k|}
lj_parse.c:var_new:
 1054|  34.7k|{
 1055|  34.7k|  FuncState *fs = ls->fs;
 1056|  34.7k|  MSize vtop = ls->vtop;
 1057|  34.7k|  checklimit(fs, fs->nactvar+n, LJ_MAX_LOCVAR, "local variables");
  ------------------
  |  |  192|  34.7k|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 34.7k]
  |  |  ------------------
  ------------------
 1058|  34.7k|  if (LJ_UNLIKELY(vtop >= ls->sizevstack)) {
  ------------------
  |  |  146|  34.7k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 19.0k, False: 15.6k]
  |  |  ------------------
  ------------------
 1059|  19.0k|    if (ls->sizevstack >= LJ_MAX_VSTACK)
  ------------------
  |  |  115|  19.0k|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|  19.0k|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1059:9): [True: 0, False: 19.0k]
  ------------------
 1060|      0|      lj_lex_error(ls, 0, LJ_ERR_XLIMC, LJ_MAX_VSTACK);
  ------------------
  |  |  115|      0|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|      0|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
 1061|  19.0k|    lj_mem_growvec(ls->L, ls->vstack, ls->sizevstack, LJ_MAX_VSTACK, VarInfo);
  ------------------
  |  |  129|  19.0k|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
 1062|  19.0k|  }
 1063|  34.7k|  lj_assertFS((uintptr_t)name < VARNAME__MAX ||
  ------------------
  |  |  167|  34.7k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  34.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  68.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 507, False: 34.2k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 34.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  34.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1064|  34.7k|	      lj_tab_getstr(fs->kt, name) != NULL,
 1065|  34.7k|	      "unanchored variable name");
 1066|       |  /* NOBARRIER: name is anchored in fs->kt and ls->vstack is not a GCobj. */
 1067|  34.7k|  setgcref(ls->vstack[vtop].name, obj2gco(name));
  ------------------
  |  |   72|  34.7k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1068|  34.7k|  fs->varmap[fs->nactvar+n] = (uint16_t)vtop;
 1069|  34.7k|  ls->vtop = vtop+1;
 1070|  34.7k|}
lj_parse.c:var_add:
 1080|  77.3k|{
 1081|  77.3k|  FuncState *fs = ls->fs;
 1082|  77.3k|  BCReg nactvar = fs->nactvar;
 1083|   107k|  while (nvars--) {
  ------------------
  |  Branch (1083:10): [True: 30.1k, False: 77.3k]
  ------------------
 1084|  30.1k|    VarInfo *v = &var_get(ls, fs, nactvar);
  ------------------
  |  | 1050|  30.1k|#define var_get(ls, fs, i)	((ls)->vstack[(fs)->varmap[(i)]])
  ------------------
 1085|  30.1k|    v->startpc = fs->pc;
 1086|  30.1k|    v->slot = nactvar++;
 1087|  30.1k|    v->info = 0;
 1088|  30.1k|  }
 1089|  77.3k|  fs->nactvar = nactvar;
 1090|  77.3k|}
lj_parse.c:expr_primary:
 1952|   520k|{
 1953|   520k|  FuncState *fs = ls->fs;
 1954|       |  /* Parse prefix expression. */
 1955|   520k|  if (ls->tok == '(') {
  ------------------
  |  Branch (1955:7): [True: 1.59k, False: 518k]
  ------------------
 1956|  1.59k|    BCLine line = ls->linenumber;
 1957|  1.59k|    lj_lex_next(ls);
 1958|  1.59k|    expr(ls, v);
 1959|  1.59k|    lex_match(ls, ')', '(', line);
 1960|  1.59k|    expr_discharge(ls->fs, v);
 1961|   518k|  } else if (ls->tok == TK_name || (!LJ_52 && ls->tok == TK_goto)) {
  ------------------
  |  |  697|  5.82k|#define LJ_52			0
  ------------------
  |  Branch (1961:14): [True: 515k, False: 2.91k]
  |  Branch (1961:37): [Folded - Ignored]
  |  Branch (1961:47): [True: 959, False: 1.95k]
  ------------------
 1962|   516k|    var_lookup(ls, v);
  ------------------
  |  | 1157|   516k|  var_lookup_((ls)->fs, lex_str(ls), (e), 1)
  ------------------
 1963|   516k|  } else {
 1964|  1.95k|    err_syntax(ls, LJ_ERR_XSYMBOL);
 1965|  1.95k|  }
 1966|   756k|  for (;;) {  /* Parse multiple expression suffixes. */
 1967|   756k|    if (ls->tok == '.') {
  ------------------
  |  Branch (1967:9): [True: 22.4k, False: 733k]
  ------------------
 1968|  22.4k|      expr_field(ls, v);
 1969|   733k|    } else if (ls->tok == '[') {
  ------------------
  |  Branch (1969:16): [True: 4.78k, False: 728k]
  ------------------
 1970|  4.78k|      ExpDesc key;
 1971|  4.78k|      expr_toanyreg(fs, v);
 1972|  4.78k|      expr_bracket(ls, &key);
 1973|  4.78k|      expr_index(fs, v, &key);
 1974|   728k|    } else if (ls->tok == ':') {
  ------------------
  |  Branch (1974:16): [True: 1.83k, False: 726k]
  ------------------
 1975|  1.83k|      ExpDesc key;
 1976|  1.83k|      lj_lex_next(ls);
 1977|  1.83k|      expr_str(ls, &key);
 1978|  1.83k|      bcemit_method(fs, v, &key);
 1979|  1.83k|      parse_args(ls, v);
 1980|   726k|    } else if (ls->tok == '(' || ls->tok == TK_string || ls->tok == '{') {
  ------------------
  |  Branch (1980:16): [True: 19.6k, False: 707k]
  |  Branch (1980:34): [True: 186k, False: 520k]
  |  Branch (1980:58): [True: 11.3k, False: 509k]
  ------------------
 1981|   217k|      expr_tonextreg(fs, v);
 1982|   217k|      if (ls->fr2) bcreg_reserve(fs, 1);
  ------------------
  |  Branch (1982:11): [True: 217k, False: 0]
  ------------------
 1983|   217k|      parse_args(ls, v);
 1984|   509k|    } else {
 1985|   509k|      break;
 1986|   509k|    }
 1987|   756k|  }
 1988|   518k|}
lj_parse.c:var_lookup_:
 1132|  4.20M|{
 1133|  4.20M|  if (fs) {
  ------------------
  |  Branch (1133:7): [True: 3.67M, False: 531k]
  ------------------
 1134|  3.67M|    BCReg reg = var_lookup_local(fs, name);
 1135|  3.67M|    if ((int32_t)reg >= 0) {  /* Local in this function? */
  ------------------
  |  Branch (1135:9): [True: 32.7k, False: 3.64M]
  ------------------
 1136|  32.7k|      expr_init(e, VLOCAL, reg);
 1137|  32.7k|      if (!first)
  ------------------
  |  Branch (1137:11): [True: 6.71k, False: 26.0k]
  ------------------
 1138|  6.71k|	fscope_uvmark(fs, reg);  /* Scope now has an upvalue. */
 1139|  32.7k|      return (MSize)(e->u.s.aux = (uint32_t)fs->varmap[reg]);
 1140|  3.64M|    } else {
 1141|  3.64M|      MSize vidx = var_lookup_(fs->prev, name, e, 0);  /* Var in outer func? */
 1142|  3.64M|      if ((int32_t)vidx >= 0) {  /* Yes, make it an upvalue here. */
  ------------------
  |  Branch (1142:11): [True: 72.8k, False: 3.57M]
  ------------------
 1143|  72.8k|	e->u.s.info = (uint8_t)var_lookup_uv(fs, vidx, e);
 1144|  72.8k|	e->k = VUPVAL;
 1145|  72.8k|	return vidx;
 1146|  72.8k|      }
 1147|  3.64M|    }
 1148|  3.67M|  } else {  /* Not found in any function, must be a global. */
 1149|   531k|    expr_init(e, VGLOBAL, 0);
 1150|   531k|    e->u.sval = name;
 1151|   531k|  }
 1152|  4.10M|  return (MSize)-1;  /* Global. */
 1153|  4.20M|}
lj_parse.c:var_lookup_local:
 1102|  3.67M|{
 1103|  3.67M|  int i;
 1104|  4.39M|  for (i = fs->nactvar-1; i >= 0; i--) {
  ------------------
  |  Branch (1104:27): [True: 753k, False: 3.64M]
  ------------------
 1105|   753k|    if (n == strref(var_get(fs->ls, fs, i).name))
  ------------------
  |  |  315|   753k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|   753k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (1105:9): [True: 32.7k, False: 720k]
  ------------------
 1106|  32.7k|      return (BCReg)i;
 1107|   753k|  }
 1108|  3.64M|  return (BCReg)-1;  /* Not found. */
 1109|  3.67M|}
lj_parse.c:fscope_uvmark:
 1320|  6.71k|{
 1321|  6.71k|  FuncScope *bl;
 1322|  7.20k|  for (bl = fs->bl; bl && bl->nactvar > level; bl = bl->prev)
  ------------------
  |  Branch (1322:21): [True: 7.20k, False: 0]
  |  Branch (1322:27): [True: 487, False: 6.71k]
  ------------------
 1323|    487|    ;
 1324|  6.71k|  if (bl)
  ------------------
  |  Branch (1324:7): [True: 6.71k, False: 0]
  ------------------
 1325|  6.71k|    bl->flags |= FSCOPE_UPVAL;
  ------------------
  |  |  108|  6.71k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
 1326|  6.71k|}
lj_parse.c:var_lookup_uv:
 1113|  72.8k|{
 1114|  72.8k|  MSize i, n = fs->nuv;
 1115|  77.1k|  for (i = 0; i < n; i++)
  ------------------
  |  Branch (1115:15): [True: 72.4k, False: 4.73k]
  ------------------
 1116|  72.4k|    if (fs->uvmap[i] == vidx)
  ------------------
  |  Branch (1116:9): [True: 68.1k, False: 4.32k]
  ------------------
 1117|  68.1k|      return i;  /* Already exists. */
 1118|       |  /* Otherwise create a new one. */
 1119|  4.73k|  checklimit(fs, fs->nuv, LJ_MAX_UPVAL, "upvalues");
  ------------------
  |  |  192|  4.73k|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 4.73k]
  |  |  ------------------
  ------------------
 1120|  4.73k|  lj_assertFS(e->k == VLOCAL || e->k == VUPVAL, "bad expr type %d", e->k);
  ------------------
  |  |  167|  4.73k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  4.73k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  8.51k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 963, False: 3.77k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 3.77k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  4.73k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1121|  4.73k|  fs->uvmap[n] = (uint16_t)vidx;
 1122|  4.73k|  fs->uvtmp[n] = (uint16_t)(e->k == VLOCAL ? vidx : LJ_MAX_VSTACK+e->u.s.info);
  ------------------
  |  |  115|  3.77k|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|  3.77k|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1122:29): [True: 963, False: 3.77k]
  ------------------
 1123|  4.73k|  fs->nuv = n+1;
 1124|  4.73k|  return n;
 1125|  4.73k|}
lj_parse.c:expr_field:
 1695|  23.4k|{
 1696|  23.4k|  FuncState *fs = ls->fs;
 1697|  23.4k|  ExpDesc key;
 1698|  23.4k|  expr_toanyreg(fs, v);
 1699|  23.4k|  lj_lex_next(ls);  /* Skip dot or colon. */
 1700|  23.4k|  expr_str(ls, &key);
 1701|  23.4k|  expr_index(fs, v, &key);
 1702|  23.4k|}
lj_parse.c:bcemit_method:
  669|  1.78k|{
  670|  1.78k|  BCReg idx, func, fr2, obj = expr_toanyreg(fs, e);
  671|  1.78k|  expr_free(fs, e);
  672|  1.78k|  func = fs->freereg;
  673|  1.78k|  fr2 = fs->ls->fr2;
  674|  1.78k|  bcemit_AD(fs, BC_MOV, func+1+fr2, obj);  /* Copy object to 1st argument. */
  ------------------
  |  |  435|  1.78k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  1.78k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  675|  1.78k|  lj_assertFS(expr_isstrk(key), "bad usage");
  ------------------
  |  |  167|  1.78k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.78k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.78k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.78k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.78k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  676|  1.78k|  idx = const_str(fs, key);
  677|  1.78k|  if (idx <= BCMAX_C) {
  ------------------
  |  |   27|  1.78k|#define BCMAX_C		0xff
  ------------------
  |  Branch (677:7): [True: 1.78k, False: 0]
  ------------------
  678|  1.78k|    bcreg_reserve(fs, 2+fr2);
  679|  1.78k|    bcemit_ABC(fs, BC_TGETS, func, obj, idx);
  ------------------
  |  |  434|  1.78k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|  1.78k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  680|  1.78k|  } else {
  681|      0|    bcreg_reserve(fs, 3+fr2);
  682|      0|    bcemit_AD(fs, BC_KSTR, func+2+fr2, idx);
  ------------------
  |  |  435|      0|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  683|      0|    bcemit_ABC(fs, BC_TGETV, func, obj, func+2+fr2);
  ------------------
  |  |  434|      0|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  684|      0|    fs->freereg--;
  685|      0|  }
  686|  1.78k|  e->u.s.info = func;
  687|  1.78k|  e->k = VNONRELOC;
  688|  1.78k|}
lj_parse.c:parse_args:
 1905|   219k|{
 1906|   219k|  FuncState *fs = ls->fs;
 1907|   219k|  ExpDesc args;
 1908|   219k|  BCIns ins;
 1909|   219k|  BCReg base;
 1910|   219k|  BCLine line = ls->linenumber;
 1911|   219k|  if (ls->tok == '(') {
  ------------------
  |  Branch (1911:7): [True: 19.6k, False: 199k]
  ------------------
 1912|  19.6k|#if !LJ_52
 1913|  19.6k|    if (line != ls->lastline)
  ------------------
  |  Branch (1913:9): [True: 1, False: 19.6k]
  ------------------
 1914|      1|      err_syntax(ls, LJ_ERR_XAMBIG);
 1915|  19.6k|#endif
 1916|  19.6k|    lj_lex_next(ls);
 1917|  19.6k|    if (ls->tok == ')') {  /* f(). */
  ------------------
  |  Branch (1917:9): [True: 862, False: 18.7k]
  ------------------
 1918|    862|      args.k = VVOID;
 1919|  18.7k|    } else {
 1920|  18.7k|      expr_list(ls, &args);
 1921|  18.7k|      if (args.k == VCALL)  /* f(a, b, g()) or f(a, b, ...). */
  ------------------
  |  Branch (1921:11): [True: 175, False: 18.5k]
  ------------------
 1922|  18.7k|	setbc_b(bcptr(fs, &args), 0);  /* Pass on multiple results. */
  ------------------
  |  |   46|    175|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|    175|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    175|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1923|  18.7k|    }
 1924|  19.6k|    lex_match(ls, ')', '(', line);
 1925|   199k|  } else if (ls->tok == '{') {
  ------------------
  |  Branch (1925:14): [True: 11.6k, False: 188k]
  ------------------
 1926|  11.6k|    expr_table(ls, &args);
 1927|   188k|  } else if (ls->tok == TK_string) {
  ------------------
  |  Branch (1927:14): [True: 188k, False: 23]
  ------------------
 1928|   188k|    expr_init(&args, VKSTR, 0);
 1929|   188k|    args.u.sval = strV(&ls->tokval);
  ------------------
  |  |  859|   188k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   188k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   188k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   188k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 188k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   188k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1930|      0|    lj_lex_next(ls);
 1931|   188k|  } else {
 1932|     23|    err_syntax(ls, LJ_ERR_XFUNARG);
 1933|      0|    return;  /* Silence compiler. */
 1934|     23|  }
 1935|   219k|  lj_assertFS(e->k == VNONRELOC, "bad expr type %d", e->k);
  ------------------
  |  |  167|   219k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   219k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   219k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 212k, False: 6.75k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   219k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1936|   212k|  base = e->u.s.info;  /* Base register for call. */
 1937|   212k|  if (args.k == VCALL) {
  ------------------
  |  Branch (1937:7): [True: 150, False: 212k]
  ------------------
 1938|    150|    ins = BCINS_ABC(BC_CALLM, base, 2, args.u.s.aux - base - 1 - ls->fr2);
  ------------------
  |  |   54|    150|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
 1939|   212k|  } else {
 1940|   212k|    if (args.k != VVOID)
  ------------------
  |  Branch (1940:9): [True: 211k, False: 862]
  ------------------
 1941|   211k|      expr_tonextreg(fs, &args);
 1942|   212k|    ins = BCINS_ABC(BC_CALL, base, 2, fs->freereg - base - ls->fr2);
  ------------------
  |  |   54|   212k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
 1943|   212k|  }
 1944|   212k|  expr_init(e, VCALL, bcemit_INS(fs, ins));
 1945|   212k|  e->u.s.aux = base;
 1946|   212k|  fs->bcbase[fs->pc - 1].line = line;
 1947|   212k|  fs->freereg = base+1;  /* Leave one result by default. */
 1948|   212k|}
lj_parse.c:expr_list:
 1892|   186k|{
 1893|   186k|  BCReg n = 1;
 1894|   186k|  expr(ls, v);
 1895|   200k|  while (lex_opt(ls, ',')) {
  ------------------
  |  Branch (1895:10): [True: 14.2k, False: 186k]
  ------------------
 1896|  14.2k|    expr_tonextreg(ls->fs, v);
 1897|  14.2k|    expr(ls, v);
 1898|  14.2k|    n++;
 1899|  14.2k|  }
 1900|   186k|  return n;
 1901|   186k|}
lj_parse.c:bcemit_unop:
  943|  93.4k|{
  944|  93.4k|  if (op == BC_NOT) {
  ------------------
  |  Branch (944:7): [True: 7.03k, False: 86.4k]
  ------------------
  945|       |    /* Swap true and false lists. */
  946|  7.03k|    { BCPos temp = e->f; e->f = e->t; e->t = temp; }
  947|  7.03k|    jmp_dropval(fs, e->f);
  948|  7.03k|    jmp_dropval(fs, e->t);
  949|  7.03k|    expr_discharge(fs, e);
  950|  7.03k|    if (e->k == VKNIL || e->k == VKFALSE) {
  ------------------
  |  Branch (950:9): [True: 5, False: 7.02k]
  |  Branch (950:26): [True: 2.31k, False: 4.71k]
  ------------------
  951|  2.31k|      e->k = VKTRUE;
  952|  2.31k|      return;
  953|  4.71k|    } else if (expr_isk(e) || (LJ_HASFFI && e->k == VKCDATA)) {
  ------------------
  |  |   73|  9.42k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 2.78k, False: 1.93k]
  |  |  ------------------
  ------------------
                  } else if (expr_isk(e) || (LJ_HASFFI && e->k == VKCDATA)) {
  ------------------
  |  |  585|  3.86k|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (953:45): [True: 1, False: 1.93k]
  ------------------
  954|  2.78k|      e->k = VKFALSE;
  955|  2.78k|      return;
  956|  2.78k|    } else if (e->k == VJMP) {
  ------------------
  |  Branch (956:16): [True: 0, False: 1.93k]
  ------------------
  957|      0|      invertcond(fs, e);
  958|      0|      return;
  959|  1.93k|    } else if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (959:16): [True: 1.44k, False: 489]
  ------------------
  960|  1.44k|      bcreg_reserve(fs, 1);
  961|  1.44k|      setbc_a(bcptr(fs, e), fs->freereg-1);
  ------------------
  |  |   45|  1.44k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  1.44k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  1.44k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  962|  1.44k|      e->u.s.info = fs->freereg-1;
  963|  1.44k|      e->k = VNONRELOC;
  964|  1.44k|    } else {
  965|    489|      lj_assertFS(e->k == VNONRELOC, "bad expr type %d", e->k);
  ------------------
  |  |  167|    489|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    489|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    489|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 489, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    489|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  966|    489|    }
  967|  86.4k|  } else {
  968|  86.4k|    lj_assertFS(op == BC_UNM || op == BC_LEN, "bad unop %d", op);
  ------------------
  |  |  167|  86.4k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  86.4k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   161k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 11.3k, False: 75.1k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 75.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  86.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  969|  86.4k|    if (op == BC_UNM && !expr_hasjump(e)) {  /* Constant-fold negations. */
  ------------------
  |  |   71|  11.3k|#define expr_hasjump(e)		((e)->t != (e)->f)
  ------------------
  |  Branch (969:9): [True: 11.3k, False: 75.1k]
  |  Branch (969:25): [True: 11.3k, False: 0]
  ------------------
  970|  11.3k|#if LJ_HASFFI
  971|  11.3k|      if (e->k == VKCDATA) {  /* Fold in-place since cdata is not interned. */
  ------------------
  |  Branch (971:11): [True: 8.32k, False: 2.99k]
  ------------------
  972|  8.32k|	GCcdata *cd = cdataV(&e->u.nval);
  ------------------
  |  |  863|  8.32k|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|  8.32k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  8.32k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  8.32k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 8.32k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  8.32k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  973|  8.32k|	uint64_t *p = (uint64_t *)cdataptr(cd);
  ------------------
  |  |  360|  8.32k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  974|  8.32k|	if (cd->ctypeid == CTID_COMPLEX_DOUBLE)
  ------------------
  |  Branch (974:6): [True: 142, False: 8.18k]
  ------------------
  975|    142|	  p[1] ^= U64x(80000000,00000000);
  ------------------
  |  |   94|    142|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  976|  8.18k|	else
  977|  8.18k|	  *p = ~*p+1u;
  978|  8.32k|	return;
  979|  8.32k|      } else
  980|  2.99k|#endif
  981|  2.99k|      if (expr_isnumk(e) && !expr_numiszero(e)) {  /* Avoid folding to -0. */
  ------------------
  |  |   75|  5.99k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 1.39k, False: 1.60k]
  |  |  ------------------
  ------------------
  |  Branch (981:29): [True: 208, False: 1.18k]
  ------------------
  982|    208|	TValue *o = expr_numtv(e);
  ------------------
  |  |   79|    208|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  ------------------
  |  |  |  |  367|    208|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    208|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    208|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 208, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    208|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  983|    208|	if (tvisint(o)) {
  ------------------
  |  |  803|    208|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|    416|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  984|      0|	  int32_t k = intV(o), negk = (int32_t)(~(uint32_t)k+1u);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  985|      0|	  if (k == negk)
  ------------------
  |  Branch (985:8): [True: 0, False: 0]
  ------------------
  986|      0|	    setnumV(o, -(lua_Number)k);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  987|      0|	  else
  988|      0|	    setintV(o, negk);
  989|      0|	  return;
  990|    208|	} else {
  991|    208|	  o->u64 ^= U64x(80000000,00000000);
  ------------------
  |  |   94|    208|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  992|    208|	  return;
  993|    208|	}
  994|    208|      }
  995|  11.3k|    }
  996|  77.9k|    expr_toanyreg(fs, e);
  997|  77.9k|  }
  998|  79.8k|  expr_free(fs, e);
  999|  79.8k|  e->u.s.info = bcemit_AD(fs, op, 0, e->u.s.info);
  ------------------
  |  |  435|  79.8k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  79.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1000|  79.8k|  e->k = VRELOCABLE;
 1001|  79.8k|}
lj_parse.c:jmp_dropval:
  312|  14.0k|{
  313|  14.0k|  for (; list != NO_JMP; list = jmp_next(fs, list))
  ------------------
  |  |   31|  14.0k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (313:10): [True: 0, False: 14.0k]
  ------------------
  314|      0|    jmp_patchtestreg(fs, list, NO_REG);
  ------------------
  |  |   30|      0|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|      0|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  315|  14.0k|}
lj_parse.c:invertcond:
  711|    286|{
  712|    286|  BCIns *ip = &fs->bcbase[e->u.s.info - 1].ins;
  713|    286|  setbc_op(ip, bc_op(*ip)^1);
  ------------------
  |  |   44|    286|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|    286|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    286|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  714|    286|}
lj_parse.c:token2binop:
 2046|   607k|{
 2047|   607k|  switch (tok) {
 2048|    899|  case '+':	return OPR_ADD;
  ------------------
  |  Branch (2048:3): [True: 899, False: 606k]
  ------------------
 2049|  28.0k|  case '-':	return OPR_SUB;
  ------------------
  |  Branch (2049:3): [True: 28.0k, False: 579k]
  ------------------
 2050|  7.69k|  case '*':	return OPR_MUL;
  ------------------
  |  Branch (2050:3): [True: 7.69k, False: 600k]
  ------------------
 2051|  1.18k|  case '/':	return OPR_DIV;
  ------------------
  |  Branch (2051:3): [True: 1.18k, False: 606k]
  ------------------
 2052|  1.31k|  case '%':	return OPR_MOD;
  ------------------
  |  Branch (2052:3): [True: 1.31k, False: 606k]
  ------------------
 2053|   126k|  case '^':	return OPR_POW;
  ------------------
  |  Branch (2053:3): [True: 126k, False: 481k]
  ------------------
 2054|    440|  case TK_concat: return OPR_CONCAT;
  ------------------
  |  Branch (2054:3): [True: 440, False: 607k]
  ------------------
 2055|  1.53k|  case TK_ne:	return OPR_NE;
  ------------------
  |  Branch (2055:3): [True: 1.53k, False: 606k]
  ------------------
 2056|    687|  case TK_eq:	return OPR_EQ;
  ------------------
  |  Branch (2056:3): [True: 687, False: 607k]
  ------------------
 2057|  1.18k|  case '<':	return OPR_LT;
  ------------------
  |  Branch (2057:3): [True: 1.18k, False: 606k]
  ------------------
 2058|  1.16k|  case TK_le:	return OPR_LE;
  ------------------
  |  Branch (2058:3): [True: 1.16k, False: 606k]
  ------------------
 2059|  72.0k|  case '>':	return OPR_GT;
  ------------------
  |  Branch (2059:3): [True: 72.0k, False: 535k]
  ------------------
 2060|  74.8k|  case TK_ge:	return OPR_GE;
  ------------------
  |  Branch (2060:3): [True: 74.8k, False: 532k]
  ------------------
 2061|  2.16k|  case TK_and:	return OPR_AND;
  ------------------
  |  Branch (2061:3): [True: 2.16k, False: 605k]
  ------------------
 2062|  4.95k|  case TK_or:	return OPR_OR;
  ------------------
  |  Branch (2062:3): [True: 4.95k, False: 602k]
  ------------------
 2063|   283k|  default:	return OPR_NOBINOPR;
  ------------------
  |  Branch (2063:3): [True: 283k, False: 324k]
  ------------------
 2064|   607k|  }
 2065|   607k|}
lj_parse.c:bcemit_binop_left:
  884|   249k|{
  885|   249k|  if (op == OPR_AND) {
  ------------------
  |  Branch (885:7): [True: 1.58k, False: 247k]
  ------------------
  886|  1.58k|    bcemit_branch_t(fs, e);
  887|   247k|  } else if (op == OPR_OR) {
  ------------------
  |  Branch (887:14): [True: 4.42k, False: 243k]
  ------------------
  888|  4.42k|    bcemit_branch_f(fs, e);
  889|   243k|  } else if (op == OPR_CONCAT) {
  ------------------
  |  Branch (889:14): [True: 437, False: 242k]
  ------------------
  890|    437|    expr_tonextreg(fs, e);
  891|   242k|  } else if (op == OPR_EQ || op == OPR_NE) {
  ------------------
  |  Branch (891:14): [True: 432, False: 242k]
  |  Branch (891:30): [True: 1.10k, False: 241k]
  ------------------
  892|  1.53k|    if (!expr_isk_nojump(e)) expr_toanyreg(fs, e);
  ------------------
  |  |   74|  1.53k|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|  3.06k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 464, False: 1.07k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|    464|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 464, False: 0]
  |  |  ------------------
  ------------------
  893|   241k|  } else {
  894|   241k|    if (!expr_isnumk_nojump(e)) expr_toanyreg(fs, e);
  ------------------
  |  |   76|   241k|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|   482k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 24.8k, False: 216k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  24.8k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 24.8k, False: 0]
  |  |  ------------------
  ------------------
  895|   241k|  }
  896|   249k|}
lj_parse.c:bcemit_branch_f:
  757|  4.42k|{
  758|  4.42k|  BCPos pc;
  759|  4.42k|  expr_discharge(fs, e);
  760|  4.42k|  if (e->k == VKNIL || e->k == VKFALSE)
  ------------------
  |  Branch (760:7): [True: 414, False: 4.01k]
  |  Branch (760:24): [True: 14, False: 3.99k]
  ------------------
  761|    428|    pc = NO_JMP;  /* Never jump. */
  ------------------
  |  |   31|    428|#define NO_JMP		(~(BCPos)0)
  ------------------
  762|  3.99k|  else if (e->k == VJMP)
  ------------------
  |  Branch (762:12): [True: 132, False: 3.86k]
  ------------------
  763|    132|    pc = e->u.s.info;
  764|  3.86k|  else if (e->k == VKSTR || e->k == VKNUM || e->k == VKTRUE)
  ------------------
  |  Branch (764:12): [True: 683, False: 3.18k]
  |  Branch (764:29): [True: 659, False: 2.52k]
  |  Branch (764:46): [True: 12, False: 2.51k]
  ------------------
  765|  1.35k|    expr_toreg_nobranch(fs, e, NO_REG), pc = bcemit_jmp(fs);
  ------------------
  |  |   30|  1.35k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  1.35k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  766|  2.51k|  else
  767|  2.51k|    pc = bcemit_branch(fs, e, 1);
  768|  4.42k|  jmp_append(fs, &e->t, pc);
  769|  4.42k|  jmp_tohere(fs, e->f);
  770|  4.42k|  e->f = NO_JMP;
  ------------------
  |  |   31|  4.42k|#define NO_JMP		(~(BCPos)0)
  ------------------
  771|  4.42k|}
lj_parse.c:bcemit_branch:
  718|  4.07k|{
  719|  4.07k|  BCPos pc;
  720|  4.07k|  if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (720:7): [True: 3.55k, False: 512]
  ------------------
  721|  3.55k|    BCIns *ip = bcptr(fs, e);
  ------------------
  |  |  438|  3.55k|#define bcptr(fs, e)			(&(fs)->bcbase[(e)->u.s.info].ins)
  ------------------
  722|  3.55k|    if (bc_op(*ip) == BC_NOT) {
  ------------------
  |  |   34|  3.55k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (722:9): [True: 292, False: 3.26k]
  ------------------
  723|    292|      *ip = BCINS_AD(cond ? BC_ISF : BC_IST, 0, bc_d(*ip));
  ------------------
  |  |   56|    584|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:13): [True: 292, False: 0]
  |  |  ------------------
  ------------------
  724|    292|      return bcemit_jmp(fs);
  725|    292|    }
  726|  3.55k|  }
  727|  3.77k|  if (e->k != VNONRELOC) {
  ------------------
  |  Branch (727:7): [True: 3.29k, False: 486]
  ------------------
  728|  3.29k|    bcreg_reserve(fs, 1);
  729|  3.29k|    expr_toreg_nobranch(fs, e, fs->freereg-1);
  730|  3.29k|  }
  731|  3.77k|  bcemit_AD(fs, cond ? BC_ISTC : BC_ISFC, NO_REG, e->u.s.info);
  ------------------
  |  |  435|  3.77k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  7.55k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (56:13): [True: 2.21k, False: 1.56k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  732|  3.77k|  pc = bcemit_jmp(fs);
  733|  3.77k|  expr_free(fs, e);
  734|  3.77k|  return pc;
  735|  4.07k|}
lj_parse.c:bcemit_binop:
  900|   247k|{
  901|   247k|  if (op <= OPR_POW) {
  ------------------
  |  Branch (901:7): [True: 160k, False: 86.4k]
  ------------------
  902|   160k|    bcemit_arith(fs, op, e1, e2);
  903|   160k|  } else if (op == OPR_AND) {
  ------------------
  |  Branch (903:14): [True: 1.55k, False: 84.8k]
  ------------------
  904|  1.55k|    lj_assertFS(e1->t == NO_JMP, "jump list not closed");
  ------------------
  |  |  167|  1.55k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.55k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.55k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.55k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.55k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  905|  1.55k|    expr_discharge(fs, e2);
  906|  1.55k|    jmp_append(fs, &e2->f, e1->f);
  907|  1.55k|    *e1 = *e2;
  908|  84.8k|  } else if (op == OPR_OR) {
  ------------------
  |  Branch (908:14): [True: 4.28k, False: 80.5k]
  ------------------
  909|  4.28k|    lj_assertFS(e1->f == NO_JMP, "jump list not closed");
  ------------------
  |  |  167|  4.28k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  4.28k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  4.28k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 4.28k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  4.28k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  910|  4.28k|    expr_discharge(fs, e2);
  911|  4.28k|    jmp_append(fs, &e2->t, e1->t);
  912|  4.28k|    *e1 = *e2;
  913|  80.5k|  } else if (op == OPR_CONCAT) {
  ------------------
  |  Branch (913:14): [True: 436, False: 80.1k]
  ------------------
  914|    436|    expr_toval(fs, e2);
  915|    436|    if (e2->k == VRELOCABLE && bc_op(*bcptr(fs, e2)) == BC_CAT) {
  ------------------
  |  |   34|    322|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (915:9): [True: 322, False: 114]
  |  Branch (915:32): [True: 202, False: 120]
  ------------------
  916|    202|      lj_assertFS(e1->u.s.info == bc_b(*bcptr(fs, e2))-1,
  ------------------
  |  |  167|    202|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    202|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    202|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 202, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    202|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  917|    202|		  "bad CAT stack layout");
  918|    202|      expr_free(fs, e1);
  919|    202|      setbc_b(bcptr(fs, e2), e1->u.s.info);
  ------------------
  |  |   46|    202|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|    202|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    202|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  920|    202|      e1->u.s.info = e2->u.s.info;
  921|    234|    } else {
  922|    234|      expr_tonextreg(fs, e2);
  923|    234|      expr_free(fs, e2);
  924|    234|      expr_free(fs, e1);
  925|    234|      e1->u.s.info = bcemit_ABC(fs, BC_CAT, 0, e1->u.s.info, e2->u.s.info);
  ------------------
  |  |  434|    234|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|    234|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  926|    234|    }
  927|    436|    e1->k = VRELOCABLE;
  928|  80.1k|  } else {
  929|  80.1k|    lj_assertFS(op == OPR_NE || op == OPR_EQ ||
  ------------------
  |  |  167|  80.1k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  80.1k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   711k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.09k, False: 79.0k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 187, False: 78.8k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 952, False: 77.9k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 40.1k, False: 37.7k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 990, False: 36.8k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 36.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  80.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  930|  80.1k|	       op == OPR_LT || op == OPR_GE || op == OPR_LE || op == OPR_GT,
  931|  80.1k|	       "bad binop %d", op);
  932|  80.1k|    bcemit_comp(fs, op, e1, e2);
  933|  80.1k|  }
  934|   247k|}
lj_parse.c:bcemit_arith:
  797|   160k|{
  798|   160k|  BCReg rb, rc, t;
  799|   160k|  uint32_t op;
  800|   160k|  if (foldarith(opr, e1, e2))
  ------------------
  |  Branch (800:7): [True: 6.14k, False: 154k]
  ------------------
  801|  6.14k|    return;
  802|   154k|  if (opr == OPR_POW) {
  ------------------
  |  Branch (802:7): [True: 126k, False: 28.2k]
  ------------------
  803|   126k|    op = BC_POW;
  804|   126k|    rc = expr_toanyreg(fs, e2);
  805|   126k|    rb = expr_toanyreg(fs, e1);
  806|   126k|  } else {
  807|  28.2k|    op = opr-OPR_ADD+BC_ADDVV;
  808|       |    /* Must discharge 2nd operand first since VINDEXED might free regs. */
  809|  28.2k|    expr_toval(fs, e2);
  810|  28.2k|    if (expr_isnumk(e2) && (rc = const_num(fs, e2)) <= BCMAX_C)
  ------------------
  |  |   75|  56.5k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 5.80k, False: 22.4k]
  |  |  ------------------
  ------------------
                  if (expr_isnumk(e2) && (rc = const_num(fs, e2)) <= BCMAX_C)
  ------------------
  |  |   27|  5.80k|#define BCMAX_C		0xff
  ------------------
  |  Branch (810:28): [True: 5.80k, False: 0]
  ------------------
  811|  5.80k|      op -= BC_ADDVV-BC_ADDVN;
  812|  22.4k|    else
  813|  22.4k|      rc = expr_toanyreg(fs, e2);
  814|       |    /* 1st operand discharged by bcemit_binop_left, but need KNUM/KSHORT. */
  815|  28.2k|    lj_assertFS(expr_isnumk(e1) || e1->k == VNONRELOC,
  ------------------
  |  |  167|  28.2k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  28.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  39.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 17.1k, False: 11.1k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 11.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  28.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  816|  28.2k|		"bad expr type %d", e1->k);
  817|  28.2k|    expr_toval(fs, e1);
  818|       |    /* Avoid two consts to satisfy bytecode constraints. */
  819|  28.2k|    if (expr_isnumk(e1) && !expr_isnumk(e2) &&
  ------------------
  |  |   75|  56.5k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 17.1k, False: 11.1k]
  |  |  ------------------
  ------------------
                  if (expr_isnumk(e1) && !expr_isnumk(e2) &&
  ------------------
  |  |   75|  45.4k|#define expr_isnumk(e)		((e)->k == VKNUM)
  ------------------
  |  Branch (819:28): [True: 16.8k, False: 327]
  ------------------
  820|  28.2k|	(t = const_num(fs, e1)) <= BCMAX_B) {
  ------------------
  |  |   26|  16.8k|#define BCMAX_B		0xff
  ------------------
  |  Branch (820:2): [True: 16.8k, False: 0]
  ------------------
  821|  16.8k|      rb = rc; rc = t; op -= BC_ADDVV-BC_ADDNV;
  822|  16.8k|    } else {
  823|  11.4k|      rb = expr_toanyreg(fs, e1);
  824|  11.4k|    }
  825|  28.2k|  }
  826|       |  /* Using expr_free might cause asserts if the order is wrong. */
  827|   154k|  if (e1->k == VNONRELOC && e1->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (827:7): [True: 137k, False: 16.8k]
  |  Branch (827:29): [True: 137k, False: 358]
  ------------------
  828|   154k|  if (e2->k == VNONRELOC && e2->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (828:7): [True: 148k, False: 5.80k]
  |  Branch (828:29): [True: 147k, False: 1.01k]
  ------------------
  829|   154k|  e1->u.s.info = bcemit_ABC(fs, op, 0, rb, rc);
  ------------------
  |  |  434|   154k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|   154k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  830|   154k|  e1->k = VRELOCABLE;
  831|   154k|}
lj_parse.c:foldarith:
  777|   160k|{
  778|   160k|  TValue o;
  779|   160k|  lua_Number n;
  780|   160k|  if (!expr_isnumk_nojump(e1) || !expr_isnumk_nojump(e2)) return 0;
  ------------------
  |  |   76|   321k|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|   321k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 23.8k, False: 136k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  23.8k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 23.8k, False: 0]
  |  |  ------------------
  ------------------
                if (!expr_isnumk_nojump(e1) || !expr_isnumk_nojump(e2)) return 0;
  ------------------
  |  |   76|  23.8k|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|  47.6k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 6.47k, False: 17.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  6.47k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 6.47k, False: 0]
  |  |  ------------------
  ------------------
  781|  6.47k|  n = lj_vm_foldarith(expr_numberV(e1), expr_numberV(e2), (int)opr-OPR_ADD);
  ------------------
  |  |   80|  6.47k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|  6.47k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  6.47k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  6.47k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  6.47k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 6.47k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  6.47k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                n = lj_vm_foldarith(expr_numberV(e1), expr_numberV(e2), (int)opr-OPR_ADD);
  ------------------
  |  |   80|  6.47k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|  6.47k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  6.47k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  6.47k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  6.47k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 6.47k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  6.47k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  782|  6.47k|  setnumV(&o, n);
  ------------------
  |  |  945|  6.47k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  783|  6.47k|  if (tvisnan(&o) || tvismzero(&o)) return 0;  /* Avoid NaN and -0 as consts. */
  ------------------
  |  |  812|  12.9k|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 270, False: 6.20k]
  |  |  ------------------
  ------------------
                if (tvisnan(&o) || tvismzero(&o)) return 0;  /* Avoid NaN and -0 as consts. */
  ------------------
  |  |  819|  6.20k|#define tvismzero(o)	((o)->u64 == U64x(80000000,00000000))
  |  |  ------------------
  |  |  |  |   94|  6.20k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  |  |  |  Branch (819:22): [True: 57, False: 6.14k]
  |  |  ------------------
  ------------------
  784|  6.14k|  if (LJ_DUALNUM) {
  ------------------
  |  |  549|  6.14k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  785|      0|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  786|      0|    if ((lua_Number)k == n) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      setintV(&e1->u.nval, k);
  788|      0|      return 1;
  789|      0|    }
  790|      0|  }
  791|  6.14k|  setnumV(&e1->u.nval, n);
  ------------------
  |  |  945|  6.14k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  792|  6.14k|  return 1;
  793|  6.14k|}
lj_parse.c:bcemit_comp:
  835|  80.1k|{
  836|  80.1k|  ExpDesc *eret = e1;
  837|  80.1k|  BCIns ins;
  838|  80.1k|  expr_toval(fs, e1);
  839|  80.1k|  if (opr == OPR_EQ || opr == OPR_NE) {
  ------------------
  |  Branch (839:7): [True: 187, False: 79.9k]
  |  Branch (839:24): [True: 1.09k, False: 78.8k]
  ------------------
  840|  1.28k|    BCOp op = opr == OPR_EQ ? BC_ISEQV : BC_ISNEV;
  ------------------
  |  Branch (840:15): [True: 187, False: 1.09k]
  ------------------
  841|  1.28k|    BCReg ra;
  842|  1.28k|    if (expr_isk(e1)) { e1 = e2; e2 = eret; }  /* Need constant in 2nd arg. */
  ------------------
  |  |   73|  1.28k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 350, False: 930]
  |  |  ------------------
  ------------------
  843|  1.28k|    ra = expr_toanyreg(fs, e1);  /* First arg must be in a reg. */
  844|  1.28k|    expr_toval(fs, e2);
  845|  1.28k|    switch (e2->k) {
  846|    237|    case VKNIL: case VKFALSE: case VKTRUE:
  ------------------
  |  Branch (846:5): [True: 206, False: 1.07k]
  |  Branch (846:17): [True: 12, False: 1.26k]
  |  Branch (846:31): [True: 19, False: 1.26k]
  ------------------
  847|    237|      ins = BCINS_AD(op+(BC_ISEQP-BC_ISEQV), ra, const_pri(e2));
  ------------------
  |  |   56|    474|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 237, False: 0]
  |  |  ------------------
  ------------------
  848|      0|      break;
  849|     82|    case VKSTR:
  ------------------
  |  Branch (849:5): [True: 82, False: 1.19k]
  ------------------
  850|     82|      ins = BCINS_AD(op+(BC_ISEQS-BC_ISEQV), ra, const_str(fs, e2));
  ------------------
  |  |   56|     82|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  851|     82|      break;
  852|    527|    case VKNUM:
  ------------------
  |  Branch (852:5): [True: 527, False: 753]
  ------------------
  853|    527|      ins = BCINS_AD(op+(BC_ISEQN-BC_ISEQV), ra, const_num(fs, e2));
  ------------------
  |  |   56|    527|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  854|    527|      break;
  855|    433|    default:
  ------------------
  |  Branch (855:5): [True: 433, False: 847]
  ------------------
  856|    433|      ins = BCINS_AD(op, ra, expr_toanyreg(fs, e2));
  ------------------
  |  |   56|    433|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  857|    433|      break;
  858|  1.28k|    }
  859|  78.8k|  } else {
  860|  78.8k|    uint32_t op = opr-OPR_LT+BC_ISLT;
  861|  78.8k|    BCReg ra, rd;
  862|  78.8k|    if ((op-BC_ISLT) & 1) {  /* GT -> LT, GE -> LE */
  ------------------
  |  Branch (862:9): [True: 76.9k, False: 1.94k]
  ------------------
  863|  76.9k|      e1 = e2; e2 = eret;  /* Swap operands. */
  864|  76.9k|      op = ((op-BC_ISLT)^3)+BC_ISLT;
  865|  76.9k|      expr_toval(fs, e1);
  866|  76.9k|      ra = expr_toanyreg(fs, e1);
  867|  76.9k|      rd = expr_toanyreg(fs, e2);
  868|  76.9k|    } else {
  869|  1.94k|      rd = expr_toanyreg(fs, e2);
  870|  1.94k|      ra = expr_toanyreg(fs, e1);
  871|  1.94k|    }
  872|  78.8k|    ins = BCINS_AD(op, ra, rd);
  ------------------
  |  |   56|  78.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  873|  78.8k|  }
  874|       |  /* Using expr_free might cause asserts if the order is wrong. */
  875|  80.1k|  if (e1->k == VNONRELOC && e1->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (875:7): [True: 80.1k, False: 0]
  |  Branch (875:29): [True: 80.0k, False: 104]
  ------------------
  876|  80.1k|  if (e2->k == VNONRELOC && e2->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (876:7): [True: 79.3k, False: 846]
  |  Branch (876:29): [True: 79.1k, False: 129]
  ------------------
  877|  80.1k|  bcemit_INS(fs, ins);
  878|  80.1k|  eret->u.s.info = bcemit_jmp(fs);
  879|  80.1k|  eret->k = VJMP;
  880|  80.1k|}
lj_parse.c:bcemit_branch_t:
  739|  2.63k|{
  740|  2.63k|  BCPos pc;
  741|  2.63k|  expr_discharge(fs, e);
  742|  2.63k|  if (e->k == VKSTR || e->k == VKNUM || e->k == VKTRUE)
  ------------------
  |  Branch (742:7): [True: 459, False: 2.17k]
  |  Branch (742:24): [True: 147, False: 2.02k]
  |  Branch (742:41): [True: 17, False: 2.00k]
  ------------------
  743|    623|    pc = NO_JMP;  /* Never jump. */
  ------------------
  |  |   31|    623|#define NO_JMP		(~(BCPos)0)
  ------------------
  744|  2.00k|  else if (e->k == VJMP)
  ------------------
  |  Branch (744:12): [True: 286, False: 1.72k]
  ------------------
  745|    286|    invertcond(fs, e), pc = e->u.s.info;
  746|  1.72k|  else if (e->k == VKFALSE || e->k == VKNIL)
  ------------------
  |  Branch (746:12): [True: 11, False: 1.71k]
  |  Branch (746:31): [True: 152, False: 1.56k]
  ------------------
  747|    163|    expr_toreg_nobranch(fs, e, NO_REG), pc = bcemit_jmp(fs);
  ------------------
  |  |   30|    163|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|    163|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  748|  1.56k|  else
  749|  1.56k|    pc = bcemit_branch(fs, e, 0);
  750|  2.63k|  jmp_append(fs, &e->f, pc);
  751|  2.63k|  jmp_tohere(fs, e->t);
  752|  2.63k|  e->t = NO_JMP;
  ------------------
  |  |   31|  2.63k|#define NO_JMP		(~(BCPos)0)
  ------------------
  753|  2.63k|}
lj_parse.c:lex_check:
 1017|   305k|{
 1018|   305k|  if (ls->tok != tok)
  ------------------
  |  Branch (1018:7): [True: 875, False: 304k]
  ------------------
 1019|    875|    err_token(ls, tok);
 1020|   304k|  lj_lex_next(ls);
 1021|   304k|}
lj_parse.c:jmp_append:
  330|   271k|{
  331|   271k|  if (l2 == NO_JMP) {
  ------------------
  |  |   31|   271k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (331:7): [True: 178k, False: 93.2k]
  ------------------
  332|   178k|    return;
  333|   178k|  } else if (*l1 == NO_JMP) {
  ------------------
  |  |   31|  93.2k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (333:14): [True: 90.5k, False: 2.63k]
  ------------------
  334|  90.5k|    *l1 = l2;
  335|  90.5k|  } else {
  336|  2.63k|    BCPos list = *l1;
  337|  2.63k|    BCPos next;
  338|  23.0k|    while ((next = jmp_next(fs, list)) != NO_JMP)  /* Find last element. */
  ------------------
  |  |   31|  23.0k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (338:12): [True: 20.3k, False: 2.63k]
  ------------------
  339|  20.3k|      list = next;
  340|  2.63k|    jmp_patchins(fs, list, l2);
  341|  2.63k|  }
  342|   271k|}
lj_parse.c:bcemit_jmp:
  694|  91.1k|{
  695|  91.1k|  BCPos jpc = fs->jpc;
  696|  91.1k|  BCPos j = fs->pc - 1;
  697|  91.1k|  BCIns *ip = &fs->bcbase[j].ins;
  698|  91.1k|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|  91.1k|#define NO_JMP		(~(BCPos)0)
  ------------------
  699|  91.1k|  if ((int32_t)j >= (int32_t)fs->lasttarget && bc_op(*ip) == BC_UCLO) {
  ------------------
  |  |   34|  90.8k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (699:7): [True: 90.8k, False: 241]
  |  Branch (699:48): [True: 17, False: 90.8k]
  ------------------
  700|     17|    setbc_j(ip, NO_JMP);
  ------------------
  |  |   50|     17|#define setbc_j(p, x)	setbc_d(p, (BCPos)((int32_t)(x)+BCBIAS_J))
  |  |  ------------------
  |  |  |  |   49|     17|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|     17|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  701|     17|    fs->lasttarget = j+1;
  702|  91.1k|  } else {
  703|  91.1k|    j = bcemit_AJ(fs, BC_JMP, fs->freereg, NO_JMP);
  ------------------
  |  |  436|  91.1k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  91.1k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  91.1k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  704|  91.1k|  }
  705|  91.1k|  jmp_append(fs, &j, jpc);
  706|  91.1k|  return j;
  707|  91.1k|}
lj_parse.c:jmp_tohere:
  360|  88.1k|{
  361|  88.1k|  fs->lasttarget = fs->pc;
  362|  88.1k|  jmp_append(fs, &fs->jpc, list);
  363|  88.1k|}
lj_parse.c:parse_while:
 2430|  1.03k|{
 2431|  1.03k|  FuncState *fs = ls->fs;
 2432|  1.03k|  BCPos start, loop, condexit;
 2433|  1.03k|  FuncScope bl;
 2434|  1.03k|  lj_lex_next(ls);  /* Skip 'while'. */
 2435|  1.03k|  start = fs->lasttarget = fs->pc;
 2436|  1.03k|  condexit = expr_cond(ls);
 2437|  1.03k|  fscope_begin(fs, &bl, FSCOPE_LOOP);
  ------------------
  |  |  105|  1.03k|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
 2438|  1.03k|  lex_check(ls, TK_do);
 2439|  1.03k|  loop = bcemit_AD(fs, BC_LOOP, fs->nactvar, 0);
  ------------------
  |  |  435|  1.03k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  1.03k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2440|  1.03k|  parse_block(ls);
 2441|  1.03k|  jmp_patch(fs, bcemit_jmp(fs), start);
 2442|  1.03k|  lex_match(ls, TK_end, TK_while, line);
 2443|  1.03k|  fscope_end(fs);
 2444|  1.03k|  jmp_tohere(fs, condexit);
 2445|  1.03k|  jmp_patchins(fs, loop, fs->pc);
 2446|  1.03k|}
lj_parse.c:jmp_patch:
  367|  1.75k|{
  368|  1.75k|  if (target == fs->pc) {
  ------------------
  |  Branch (368:7): [True: 277, False: 1.48k]
  ------------------
  369|    277|    jmp_tohere(fs, list);
  370|  1.48k|  } else {
  371|  1.48k|    lj_assertFS(target < fs->pc, "bad jump target");
  ------------------
  |  |  167|  1.48k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.48k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.48k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.48k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.48k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  372|  1.48k|    jmp_patchval(fs, list, target, NO_REG, target);
  ------------------
  |  |   30|  1.48k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  1.48k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  373|  1.48k|  }
  374|  1.75k|}
lj_parse.c:fscope_end:
 1294|  23.5k|{
 1295|  23.5k|  FuncScope *bl = fs->bl;
 1296|  23.5k|  LexState *ls = fs->ls;
 1297|  23.5k|  fs->bl = bl->prev;
 1298|  23.5k|  var_remove(ls, bl->nactvar);
 1299|  23.5k|  fs->freereg = fs->nactvar;
 1300|  23.5k|  lj_assertFS(bl->nactvar == fs->nactvar, "bad regalloc");
  ------------------
  |  |  167|  23.5k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  23.5k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  23.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 23.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  23.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1301|  23.5k|  if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  108|  23.5k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
                if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  109|  23.5k|#define FSCOPE_NOCLOSE		0x10	/* Do not close upvalues. */
  ------------------
                if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  108|  23.5k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1301:7): [True: 113, False: 23.4k]
  ------------------
 1302|    113|    bcemit_AJ(fs, BC_UCLO, bl->nactvar, 0);
  ------------------
  |  |  436|    113|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|    113|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    113|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1303|  23.5k|  if ((bl->flags & FSCOPE_BREAK)) {
  ------------------
  |  |  106|  23.5k|#define FSCOPE_BREAK		0x02	/* Break used in scope. */
  ------------------
  |  Branch (1303:7): [True: 6, False: 23.5k]
  ------------------
 1304|      6|    if ((bl->flags & FSCOPE_LOOP)) {
  ------------------
  |  |  105|      6|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
  |  Branch (1304:9): [True: 0, False: 6]
  ------------------
 1305|      0|      MSize idx = gola_new(ls, NAME_BREAK, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  111|      0|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
                    MSize idx = gola_new(ls, NAME_BREAK, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  120|      0|#define VSTACK_LABEL		0x04	/* Label. */
  ------------------
 1306|      0|      ls->vtop = idx;  /* Drop break label immediately. */
 1307|      0|      gola_resolve(ls, bl, idx);
 1308|      6|    } else {  /* Need the fixup step to propagate the breaks. */
 1309|      6|      gola_fixup(ls, bl);
 1310|      6|      return;
 1311|      6|    }
 1312|      6|  }
 1313|  23.5k|  if ((bl->flags & FSCOPE_GOLA)) {
  ------------------
  |  |  107|  23.5k|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
  |  Branch (1313:7): [True: 353, False: 23.1k]
  ------------------
 1314|    353|    gola_fixup(ls, bl);
 1315|    353|  }
 1316|  23.5k|}
lj_parse.c:var_remove:
 1094|  23.5k|{
 1095|  23.5k|  FuncState *fs = ls->fs;
 1096|  43.1k|  while (fs->nactvar > tolevel)
  ------------------
  |  Branch (1096:10): [True: 19.5k, False: 23.5k]
  ------------------
 1097|  19.5k|    var_get(ls, fs, --fs->nactvar).endpc = fs->pc;
  ------------------
  |  | 1050|  19.5k|#define var_get(ls, fs, i)	((ls)->vstack[(fs)->varmap[(i)]])
  ------------------
 1098|  23.5k|}
lj_parse.c:gola_new:
 1163|  4.65k|{
 1164|  4.65k|  FuncState *fs = ls->fs;
 1165|  4.65k|  MSize vtop = ls->vtop;
 1166|  4.65k|  if (LJ_UNLIKELY(vtop >= ls->sizevstack)) {
  ------------------
  |  |  146|  4.65k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 397, False: 4.25k]
  |  |  ------------------
  ------------------
 1167|    397|    if (ls->sizevstack >= LJ_MAX_VSTACK)
  ------------------
  |  |  115|    397|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|    397|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1167:9): [True: 0, False: 397]
  ------------------
 1168|      0|      lj_lex_error(ls, 0, LJ_ERR_XLIMC, LJ_MAX_VSTACK);
  ------------------
  |  |  115|      0|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|      0|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
 1169|    397|    lj_mem_growvec(ls->L, ls->vstack, ls->sizevstack, LJ_MAX_VSTACK, VarInfo);
  ------------------
  |  |  129|    397|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
 1170|    397|  }
 1171|  4.65k|  lj_assertFS(name == NAME_BREAK || lj_tab_getstr(fs->kt, name) != NULL,
  ------------------
  |  |  167|  4.65k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  4.65k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  9.29k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 13, False: 4.64k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 4.64k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  4.65k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1172|  4.65k|	      "unanchored label name");
 1173|       |  /* NOBARRIER: name is anchored in fs->kt and ls->vstack is not a GCobj. */
 1174|  4.65k|  setgcref(ls->vstack[vtop].name, obj2gco(name));
  ------------------
  |  |   72|  4.65k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1175|  4.65k|  ls->vstack[vtop].startpc = pc;
 1176|  4.65k|  ls->vstack[vtop].slot = (uint8_t)fs->nactvar;
 1177|  4.65k|  ls->vstack[vtop].info = info;
 1178|  4.65k|  ls->vtop = vtop+1;
 1179|  4.65k|  return vtop;
 1180|  4.65k|}
lj_parse.c:gola_resolve:
 1216|    469|{
 1217|    469|  VarInfo *vg = ls->vstack + bl->vstart;
 1218|    469|  VarInfo *vl = ls->vstack + idx;
 1219|  2.33k|  for (; vg < vl; vg++)
  ------------------
  |  Branch (1219:10): [True: 1.87k, False: 468]
  ------------------
 1220|  1.87k|    if (gcrefeq(vg->name, vl->name) && gola_isgoto(vg)) {
  ------------------
  |  |   70|  3.74k|#define gcrefeq(r1, r2)	((r1).gcptr64 == (r2).gcptr64)
  |  |  ------------------
  |  |  |  Branch (70:25): [True: 459, False: 1.41k]
  |  |  ------------------
  ------------------
                  if (gcrefeq(vg->name, vl->name) && gola_isgoto(vg)) {
  ------------------
  |  | 1182|    459|#define gola_isgoto(v)		((v)->info & VSTACK_GOTO)
  |  |  ------------------
  |  |  |  |  119|    459|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |  |  Branch (1182:25): [True: 278, False: 181]
  |  |  ------------------
  ------------------
 1221|    278|      if (vg->slot < vl->slot) {
  ------------------
  |  Branch (1221:11): [True: 1, False: 277]
  ------------------
 1222|      1|	GCstr *name = strref(var_get(ls, ls->fs, vg->slot).name);
  ------------------
  |  |  315|      1|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|      1|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1223|      1|	lj_assertLS((uintptr_t)name >= VARNAME__MAX, "expected goto name");
  ------------------
  |  |   89|      1|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      1|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      1|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1224|      1|	ls->linenumber = ls->fs->bcbase[vg->startpc].line;
 1225|      1|	lj_assertLS(strref(vg->name) != NAME_BREAK, "unexpected break");
  ------------------
  |  |   89|      1|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      1|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      1|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1226|      1|	lj_lex_error(ls, 0, LJ_ERR_XGSCOPE,
 1227|      1|		     strdata(strref(vg->name)), strdata(name));
  ------------------
  |  |  316|      1|#define strdata(s)	((const char *)((s)+1))
  ------------------
              		     strdata(strref(vg->name)), strdata(name));
  ------------------
  |  |  316|      1|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1228|      1|      }
 1229|    277|      gola_patch(ls, vg, vl);
 1230|    277|    }
 1231|    469|}
lj_parse.c:gola_patch:
 1188|  1.09k|{
 1189|  1.09k|  FuncState *fs = ls->fs;
 1190|  1.09k|  BCPos pc = vg->startpc;
 1191|  1.09k|  setgcrefnull(vg->name);  /* Invalidate pending goto. */
  ------------------
  |  |   76|  1.09k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
 1192|  1.09k|  setbc_a(&fs->bcbase[pc].ins, vl->slot);
  ------------------
  |  |   45|  1.09k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  1.09k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  1.09k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1193|  1.09k|  jmp_patch(fs, pc, vl->startpc);
 1194|  1.09k|}
lj_parse.c:gola_fixup:
 1235|    359|{
 1236|    359|  VarInfo *v = ls->vstack + bl->vstart;
 1237|    359|  VarInfo *ve = ls->vstack + ls->vtop;
 1238|  3.15k|  for (; v < ve; v++) {
  ------------------
  |  Branch (1238:10): [True: 2.87k, False: 282]
  ------------------
 1239|  2.87k|    GCstr *name = strref(v->name);
  ------------------
  |  |  315|  2.87k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  2.87k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1240|  2.87k|    if (name != NULL) {  /* Only consider remaining valid gotos/labels. */
  ------------------
  |  Branch (1240:9): [True: 1.90k, False: 964]
  ------------------
 1241|  1.90k|      if (gola_islabel(v)) {
  ------------------
  |  | 1183|  1.90k|#define gola_islabel(v)		((v)->info & VSTACK_LABEL)
  |  |  ------------------
  |  |  |  |  120|  1.90k|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  |  |  |  Branch (1183:26): [True: 187, False: 1.71k]
  |  |  ------------------
  ------------------
 1242|    187|	VarInfo *vg;
 1243|    187|	setgcrefnull(v->name);  /* Invalidate label that goes out of scope. */
  ------------------
  |  |   76|    187|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
 1244|  1.72k|	for (vg = v+1; vg < ve; vg++)  /* Resolve pending backward gotos. */
  ------------------
  |  Branch (1244:17): [True: 1.54k, False: 187]
  ------------------
 1245|  1.54k|	  if (strref(vg->name) == name && gola_isgoto(vg)) {
  ------------------
  |  |  315|  1.54k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  1.54k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
              	  if (strref(vg->name) == name && gola_isgoto(vg)) {
  ------------------
  |  | 1182|    886|#define gola_isgoto(v)		((v)->info & VSTACK_GOTO)
  |  |  ------------------
  |  |  |  |  119|    886|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |  |  Branch (1182:25): [True: 814, False: 72]
  |  |  ------------------
  ------------------
  |  Branch (1245:8): [True: 886, False: 655]
  ------------------
 1246|    814|	    if ((bl->flags&FSCOPE_UPVAL) && vg->slot > v->slot)
  ------------------
  |  |  108|    814|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1246:10): [True: 732, False: 82]
  |  Branch (1246:38): [True: 354, False: 378]
  ------------------
 1247|    354|	      gola_close(ls, vg);
 1248|    814|	    gola_patch(ls, vg, v);
 1249|    814|	  }
 1250|  1.71k|      } else if (gola_isgoto(v)) {
  ------------------
  |  | 1182|  1.71k|#define gola_isgoto(v)		((v)->info & VSTACK_GOTO)
  |  |  ------------------
  |  |  |  |  119|  1.71k|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |  |  Branch (1182:25): [True: 915, False: 804]
  |  |  ------------------
  ------------------
 1251|    915|	if (bl->prev) {  /* Propagate goto or break to outer scope. */
  ------------------
  |  Branch (1251:6): [True: 838, False: 77]
  ------------------
 1252|    838|	  bl->prev->flags |= name == NAME_BREAK ? FSCOPE_BREAK : FSCOPE_GOLA;
  ------------------
  |  |  111|    838|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
              	  bl->prev->flags |= name == NAME_BREAK ? FSCOPE_BREAK : FSCOPE_GOLA;
  ------------------
  |  |  106|      6|#define FSCOPE_BREAK		0x02	/* Break used in scope. */
  ------------------
              	  bl->prev->flags |= name == NAME_BREAK ? FSCOPE_BREAK : FSCOPE_GOLA;
  ------------------
  |  |  107|  1.67k|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
  |  Branch (1252:23): [True: 6, False: 832]
  ------------------
 1253|    838|	  v->slot = bl->nactvar;
 1254|    838|	  if ((bl->flags & FSCOPE_UPVAL))
  ------------------
  |  |  108|    838|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1254:8): [True: 377, False: 461]
  ------------------
 1255|    377|	    gola_close(ls, v);
 1256|    838|	} else {  /* No outer scope: undefined goto label or no loop. */
 1257|     77|	  ls->linenumber = ls->fs->bcbase[v->startpc].line;
 1258|     77|	  if (name == NAME_BREAK)
  ------------------
  |  |  111|     77|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
  |  Branch (1258:8): [True: 0, False: 77]
  ------------------
 1259|      0|	    lj_lex_error(ls, 0, LJ_ERR_XBREAK);
 1260|     77|	  else
 1261|     77|	    lj_lex_error(ls, 0, LJ_ERR_XLUNDEF, strdata(name));
  ------------------
  |  |  316|     77|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1262|     77|	}
 1263|    915|      }
 1264|  1.90k|    }
 1265|  2.87k|  }
 1266|    359|}
lj_parse.c:gola_close:
 1198|    731|{
 1199|    731|  FuncState *fs = ls->fs;
 1200|    731|  BCPos pc = vg->startpc;
 1201|    731|  BCIns *ip = &fs->bcbase[pc].ins;
 1202|    731|  lj_assertFS(gola_isgoto(vg), "expected goto");
  ------------------
  |  |  167|    731|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    731|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    731|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 731, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    731|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1203|    731|  lj_assertFS(bc_op(*ip) == BC_JMP || bc_op(*ip) == BC_UCLO,
  ------------------
  |  |  167|    731|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    731|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    853|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 609, False: 122]
  |  |  |  |  |  |  |  Branch (355:5): [True: 122, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    731|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1204|    731|	      "bad bytecode op %d", bc_op(*ip));
 1205|    731|  setbc_a(ip, vg->slot);
  ------------------
  |  |   45|    731|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|    731|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    731|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1206|    731|  if (bc_op(*ip) == BC_JMP) {
  ------------------
  |  |   34|    731|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (1206:7): [True: 609, False: 122]
  ------------------
 1207|    609|    BCPos next = jmp_next(fs, pc);
 1208|    609|    if (next != NO_JMP) jmp_patch(fs, next, pc);  /* Jump to UCLO. */
  ------------------
  |  |   31|    609|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (1208:9): [True: 0, False: 609]
  ------------------
 1209|    609|    setbc_op(ip, BC_UCLO);  /* Turn into UCLO. */
  ------------------
  |  |   44|    609|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|    609|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    609|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1210|    609|    setbc_j(ip, NO_JMP);
  ------------------
  |  |   50|    609|#define setbc_j(p, x)	setbc_d(p, (BCPos)((int32_t)(x)+BCBIAS_J))
  |  |  ------------------
  |  |  |  |   49|    609|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    609|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1211|    609|  }
 1212|    731|}
lj_parse.c:parse_block:
 2420|  5.99k|{
 2421|  5.99k|  FuncState *fs = ls->fs;
 2422|  5.99k|  FuncScope bl;
 2423|  5.99k|  fscope_begin(fs, &bl, 0);
 2424|  5.99k|  parse_chunk(ls);
 2425|  5.99k|  fscope_end(fs);
 2426|  5.99k|}
lj_parse.c:lex_match:
 1025|  30.7k|{
 1026|  30.7k|  if (!lex_opt(ls, what)) {
  ------------------
  |  Branch (1026:7): [True: 3.06k, False: 27.6k]
  ------------------
 1027|  3.06k|    if (line == ls->linenumber) {
  ------------------
  |  Branch (1027:9): [True: 149, False: 2.92k]
  ------------------
 1028|    149|      err_token(ls, what);
 1029|  2.92k|    } else {
 1030|  2.92k|      const char *swhat = lj_lex_token2str(ls, what);
 1031|  2.92k|      const char *swho = lj_lex_token2str(ls, who);
 1032|  2.92k|      lj_lex_error(ls, ls->tok, LJ_ERR_XMATCH, swhat, swho, line);
 1033|  2.92k|    }
 1034|  3.06k|  }
 1035|  30.7k|}
lj_parse.c:parse_for:
 2590|    172|{
 2591|    172|  FuncState *fs = ls->fs;
 2592|    172|  GCstr *varname;
 2593|    172|  FuncScope bl;
 2594|    172|  fscope_begin(fs, &bl, FSCOPE_LOOP);
  ------------------
  |  |  105|    172|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
 2595|    172|  lj_lex_next(ls);  /* Skip 'for'. */
 2596|    172|  varname = lex_str(ls);  /* Get first variable name. */
 2597|    172|  if (ls->tok == '=')
  ------------------
  |  Branch (2597:7): [True: 13, False: 159]
  ------------------
 2598|     13|    parse_for_num(ls, varname, line);
 2599|    159|  else if (ls->tok == ',' || ls->tok == TK_in)
  ------------------
  |  Branch (2599:12): [True: 157, False: 2]
  |  Branch (2599:30): [True: 0, False: 2]
  ------------------
 2600|    156|    parse_for_iter(ls, varname);
 2601|      3|  else
 2602|      3|    err_syntax(ls, LJ_ERR_XFOR);
 2603|    169|  lex_match(ls, TK_end, TK_for, line);
 2604|    169|  fscope_end(fs);  /* Resolve break list. */
 2605|    169|}
lj_parse.c:parse_for_num:
 2477|     13|{
 2478|     13|  FuncState *fs = ls->fs;
 2479|     13|  BCReg base = fs->freereg;
 2480|     13|  FuncScope bl;
 2481|     13|  BCPos loop, loopend;
 2482|       |  /* Hidden control variables. */
 2483|     13|  var_new_fixed(ls, FORL_IDX, VARNAME_FOR_IDX);
  ------------------
  |  | 1076|     13|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2484|     13|  var_new_fixed(ls, FORL_STOP, VARNAME_FOR_STOP);
  ------------------
  |  | 1076|     13|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2485|     13|  var_new_fixed(ls, FORL_STEP, VARNAME_FOR_STEP);
  ------------------
  |  | 1076|     13|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2486|       |  /* Visible copy of index variable. */
 2487|     13|  var_new(ls, FORL_EXT, varname);
 2488|     13|  lex_check(ls, '=');
 2489|     13|  expr_next(ls);
 2490|     13|  lex_check(ls, ',');
 2491|     13|  expr_next(ls);
 2492|     13|  if (lex_opt(ls, ',')) {
  ------------------
  |  Branch (2492:7): [True: 1, False: 12]
  ------------------
 2493|      1|    expr_next(ls);
 2494|     12|  } else {
 2495|     12|    bcemit_AD(fs, BC_KSHORT, fs->freereg, 1);  /* Default step is 1. */
  ------------------
  |  |  435|     12|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|     12|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2496|     12|    bcreg_reserve(fs, 1);
 2497|     12|  }
 2498|     13|  var_add(ls, 3);  /* Hidden control variables. */
 2499|     13|  lex_check(ls, TK_do);
 2500|     13|  loop = bcemit_AJ(fs, BC_FORI, base, NO_JMP);
  ------------------
  |  |  436|     13|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|     13|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|     13|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2501|     13|  fscope_begin(fs, &bl, 0);  /* Scope for visible variables. */
 2502|     13|  var_add(ls, 1);
 2503|     13|  bcreg_reserve(fs, 1);
 2504|     13|  parse_block(ls);
 2505|     13|  fscope_end(fs);
 2506|       |  /* Perform loop inversion. Loop control instructions are at the end. */
 2507|     13|  loopend = bcemit_AJ(fs, BC_FORL, base, NO_JMP);
  ------------------
  |  |  436|     13|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|     13|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|     13|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2508|     13|  fs->bcbase[loopend].line = line;  /* Fix line for control ins. */
 2509|     13|  jmp_patchins(fs, loopend, loop+1);
 2510|     13|  jmp_patchins(fs, loop, fs->pc);
 2511|     13|}
lj_parse.c:expr_next:
 2132|     18|{
 2133|     18|  ExpDesc e;
 2134|     18|  expr(ls, &e);
 2135|     18|  expr_tonextreg(ls->fs, &e);
 2136|     18|}
lj_parse.c:parse_for_iter:
 2548|    156|{
 2549|    156|  FuncState *fs = ls->fs;
 2550|    156|  ExpDesc e;
 2551|    156|  BCReg nvars = 0;
 2552|    156|  BCLine line;
 2553|    156|  BCReg base = fs->freereg + 3;
 2554|    156|  BCPos loop, loopend, exprpc = fs->pc;
 2555|    156|  FuncScope bl;
 2556|    156|  int isnext;
 2557|       |  /* Hidden control variables. */
 2558|    156|  var_new_fixed(ls, nvars++, VARNAME_FOR_GEN);
  ------------------
  |  | 1076|    156|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2559|    156|  var_new_fixed(ls, nvars++, VARNAME_FOR_STATE);
  ------------------
  |  | 1076|    156|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2560|    156|  var_new_fixed(ls, nvars++, VARNAME_FOR_CTL);
  ------------------
  |  | 1076|    156|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2561|       |  /* Visible variables returned from iterator. */
 2562|    156|  var_new(ls, nvars++, indexname);
 2563|  4.02k|  while (lex_opt(ls, ','))
  ------------------
  |  Branch (2563:10): [True: 3.87k, False: 156]
  ------------------
 2564|  3.87k|    var_new(ls, nvars++, lex_str(ls));
 2565|    156|  lex_check(ls, TK_in);
 2566|    156|  line = ls->linenumber;
 2567|    156|  assign_adjust(ls, 3, expr_list(ls, &e), &e);
 2568|       |  /* The iterator needs another 3 [4] slots (func [pc] | state ctl). */
 2569|    156|  bcreg_bump(fs, 3+ls->fr2);
 2570|    156|  isnext = (nvars <= 5 && fs->pc > exprpc && predict_next(ls, fs, exprpc));
  ------------------
  |  Branch (2570:13): [True: 0, False: 156]
  |  Branch (2570:27): [True: 0, False: 0]
  |  Branch (2570:46): [True: 0, False: 0]
  ------------------
 2571|    156|  var_add(ls, 3);  /* Hidden control variables. */
 2572|    156|  lex_check(ls, TK_do);
 2573|    156|  loop = bcemit_AJ(fs, isnext ? BC_ISNEXT : BC_JMP, base, NO_JMP);
  ------------------
  |  |  436|    156|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|    156|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    312|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (56:13): [True: 0, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2574|    156|  fscope_begin(fs, &bl, 0);  /* Scope for visible variables. */
 2575|    156|  var_add(ls, nvars-3);
 2576|    156|  bcreg_reserve(fs, nvars-3);
 2577|    156|  parse_block(ls);
 2578|    156|  fscope_end(fs);
 2579|       |  /* Perform loop inversion. Loop control instructions are at the end. */
 2580|    156|  jmp_patchins(fs, loop, fs->pc);
 2581|    156|  bcemit_ABC(fs, isnext ? BC_ITERN : BC_ITERC, base, nvars-3+1, 2+1);
  ------------------
  |  |  434|    156|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|    312|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (54:13): [True: 0, False: 156]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2582|    156|  loopend = bcemit_AJ(fs, BC_ITERL, base, NO_JMP);
  ------------------
  |  |  436|    156|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|    156|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    156|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2583|    156|  fs->bcbase[loopend-1].line = line;  /* Fix line for control ins. */
 2584|    156|  fs->bcbase[loopend].line = line;
 2585|    156|  jmp_patchins(fs, loopend, loop+1);
 2586|    156|}
lj_parse.c:assign_adjust:
 2183|  32.0k|{
 2184|  32.0k|  FuncState *fs = ls->fs;
 2185|  32.0k|  int32_t extra = (int32_t)nvars - (int32_t)nexps;
 2186|  32.0k|  if (e->k == VCALL) {
  ------------------
  |  Branch (2186:7): [True: 20.9k, False: 11.0k]
  ------------------
 2187|  20.9k|    extra++;  /* Compensate for the VCALL itself. */
 2188|  20.9k|    if (extra < 0) extra = 0;
  ------------------
  |  Branch (2188:9): [True: 768, False: 20.1k]
  ------------------
 2189|  20.9k|    setbc_b(bcptr(fs, e), extra+1);  /* Fixup call results. */
  ------------------
  |  |   46|  20.9k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  20.9k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  20.9k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2190|  20.9k|    if (extra > 1) bcreg_reserve(fs, (BCReg)extra-1);
  ------------------
  |  Branch (2190:9): [True: 610, False: 20.3k]
  ------------------
 2191|  20.9k|  } else {
 2192|  11.0k|    if (e->k != VVOID)
  ------------------
  |  Branch (2192:9): [True: 6.57k, False: 4.50k]
  ------------------
 2193|  6.57k|      expr_tonextreg(fs, e);  /* Close last expression. */
 2194|  11.0k|    if (extra > 0) {  /* Leftover LHS are set to nil. */
  ------------------
  |  Branch (2194:9): [True: 5.86k, False: 5.22k]
  ------------------
 2195|  5.86k|      BCReg reg = fs->freereg;
 2196|  5.86k|      bcreg_reserve(fs, (BCReg)extra);
 2197|  5.86k|      bcemit_nil(fs, reg, (BCReg)extra);
 2198|  5.86k|    }
 2199|  11.0k|  }
 2200|  32.0k|  if (nexps > nvars)
  ------------------
  |  Branch (2200:7): [True: 4.22k, False: 27.8k]
  ------------------
 2201|  4.22k|    ls->fs->freereg -= nexps - nvars;  /* Drop leftover regs. */
 2202|  32.0k|}
lj_parse.c:parse_func:
 2291|  47.7k|{
 2292|  47.7k|  FuncState *fs;
 2293|  47.7k|  ExpDesc v, b;
 2294|  47.7k|  int needself = 0;
 2295|  47.7k|  lj_lex_next(ls);  /* Skip 'function'. */
 2296|       |  /* Parse function name. */
 2297|  47.7k|  var_lookup(ls, &v);
  ------------------
  |  | 1157|  47.7k|  var_lookup_((ls)->fs, lex_str(ls), (e), 1)
  ------------------
 2298|  48.6k|  while (ls->tok == '.')  /* Multiple dot-separated fields. */
  ------------------
  |  Branch (2298:10): [True: 970, False: 47.7k]
  ------------------
 2299|    970|    expr_field(ls, &v);
 2300|  47.7k|  if (ls->tok == ':') {  /* Optional colon to signify method call. */
  ------------------
  |  Branch (2300:7): [True: 5, False: 47.7k]
  ------------------
 2301|      5|    needself = 1;
 2302|      5|    expr_field(ls, &v);
 2303|      5|  }
 2304|  47.7k|  parse_body(ls, &b, needself, line);
 2305|  47.7k|  fs = ls->fs;
 2306|  47.7k|  bcemit_store(fs, &v, &b);
 2307|  47.7k|  fs->bcbase[fs->pc - 1].line = line;  /* Set line for the store. */
 2308|  47.7k|}
lj_parse.c:parse_local:
 2257|  27.8k|{
 2258|  27.8k|  if (lex_opt(ls, TK_function)) {  /* Local function declaration. */
  ------------------
  |  Branch (2258:7): [True: 1.93k, False: 25.8k]
  ------------------
 2259|  1.93k|    ExpDesc v, b;
 2260|  1.93k|    FuncState *fs = ls->fs;
 2261|  1.93k|    var_new(ls, 0, lex_str(ls));
 2262|  1.93k|    expr_init(&v, VLOCAL, fs->freereg);
 2263|  1.93k|    v.u.s.aux = fs->varmap[fs->freereg];
 2264|  1.93k|    bcreg_reserve(fs, 1);
 2265|  1.93k|    var_add(ls, 1);
 2266|  1.93k|    parse_body(ls, &b, 0, ls->linenumber);
 2267|       |    /* bcemit_store(fs, &v, &b) without setting VSTACK_VAR_RW. */
 2268|  1.93k|    expr_free(fs, &b);
 2269|  1.93k|    expr_toreg(fs, &b, v.u.s.info);
 2270|       |    /* The upvalue is in scope, but the local is only valid after the store. */
 2271|  1.93k|    var_get(ls, fs, fs->nactvar - 1).startpc = fs->pc;
  ------------------
  |  | 1050|  1.93k|#define var_get(ls, fs, i)	((ls)->vstack[(fs)->varmap[(i)]])
  ------------------
 2272|  25.8k|  } else {  /* Local variable declaration. */
 2273|  25.8k|    ExpDesc e;
 2274|  25.8k|    BCReg nexps, nvars = 0;
 2275|  27.0k|    do {  /* Collect LHS. */
 2276|  27.0k|      var_new(ls, nvars++, lex_str(ls));
 2277|  27.0k|    } while (lex_opt(ls, ','));
  ------------------
  |  Branch (2277:14): [True: 1.18k, False: 25.8k]
  ------------------
 2278|  25.8k|    if (lex_opt(ls, '=')) {  /* Optional RHS. */
  ------------------
  |  Branch (2278:9): [True: 21.3k, False: 4.51k]
  ------------------
 2279|  21.3k|      nexps = expr_list(ls, &e);
 2280|  21.3k|    } else {  /* Or implicitly set to nil. */
 2281|  4.51k|      e.k = VVOID;
 2282|  4.51k|      nexps = 0;
 2283|  4.51k|    }
 2284|  25.8k|    assign_adjust(ls, nvars, nexps, &e);
 2285|  25.8k|    var_add(ls, nvars);
 2286|  25.8k|  }
 2287|  27.8k|}
lj_parse.c:parse_return:
 2325|    320|{
 2326|    320|  BCIns ins;
 2327|    320|  FuncState *fs = ls->fs;
 2328|    320|  lj_lex_next(ls);  /* Skip 'return'. */
 2329|    320|  fs->flags |= PROTO_HAS_RETURN;
  ------------------
  |  |  405|    320|#define PROTO_HAS_RETURN	0x20	/* Already emitted a return. */
  ------------------
 2330|    320|  if (parse_isend(ls->tok) || ls->tok == ';') {  /* Bare return. */
  ------------------
  |  Branch (2330:7): [True: 0, False: 320]
  |  Branch (2330:31): [True: 6, False: 314]
  ------------------
 2331|      6|    ins = BCINS_AD(BC_RET0, 0, 1);
  ------------------
  |  |   56|      6|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 2332|    314|  } else {  /* Return with one or more values. */
 2333|    314|    ExpDesc e;  /* Receives the _last_ expression in the list. */
 2334|    314|    BCReg nret = expr_list(ls, &e);
 2335|    314|    if (nret == 1) {  /* Return one result. */
  ------------------
  |  Branch (2335:9): [True: 179, False: 135]
  ------------------
 2336|    179|      if (e.k == VCALL) {  /* Check for tail call. */
  ------------------
  |  Branch (2336:11): [True: 85, False: 94]
  ------------------
 2337|       |#ifdef LUAJIT_DISABLE_TAILCALL
 2338|       |	goto notailcall;
 2339|       |#else
 2340|     85|	BCIns *ip = bcptr(fs, &e);
  ------------------
  |  |  438|     85|#define bcptr(fs, e)			(&(fs)->bcbase[(e)->u.s.info].ins)
  ------------------
 2341|       |	/* It doesn't pay off to add BC_VARGT just for 'return ...'. */
 2342|     85|	if (bc_op(*ip) == BC_VARG) goto notailcall;
  ------------------
  |  |   34|     85|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2342:6): [True: 1, False: 84]
  ------------------
 2343|     84|	fs->pc--;
 2344|     84|	ins = BCINS_AD(bc_op(*ip)-BC_CALL+BC_CALLT, bc_a(*ip), bc_c(*ip));
  ------------------
  |  |   56|     84|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 2345|     84|#endif
 2346|     94|      } else {  /* Can return the result from any register. */
 2347|     94|	ins = BCINS_AD(BC_RET1, expr_toanyreg(fs, &e), 2);
  ------------------
  |  |   56|     94|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 2348|     94|      }
 2349|    179|    } else {
 2350|    135|      if (e.k == VCALL) {  /* Append all results from a call. */
  ------------------
  |  Branch (2350:11): [True: 77, False: 58]
  ------------------
 2351|     78|      notailcall:
 2352|     78|	setbc_b(bcptr(fs, &e), 0);
  ------------------
  |  |   46|     78|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|     78|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|     78|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|     78|	ins = BCINS_AD(BC_RETM, fs->nactvar, e.u.s.aux - fs->nactvar);
  ------------------
  |  |   56|     78|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 2354|     78|      } else {
 2355|     58|	expr_tonextreg(fs, &e);  /* Force contiguous registers. */
 2356|     58|	ins = BCINS_AD(BC_RET, fs->nactvar, nret+1);
  ------------------
  |  |   56|     58|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 2357|     58|      }
 2358|    135|    }
 2359|    314|  }
 2360|    320|  if (fs->flags & PROTO_CHILD)
  ------------------
  |  |  399|    320|#define PROTO_CHILD		0x01	/* Has child prototypes. */
  ------------------
  |  Branch (2360:7): [True: 45, False: 275]
  ------------------
 2361|     45|    bcemit_AJ(fs, BC_UCLO, 0, 0);  /* May need to close upvalues first. */
  ------------------
  |  |  436|     45|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|     45|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|     45|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2362|    320|  bcemit_INS(fs, ins);
 2363|    320|}
lj_parse.c:parse_break:
 2367|     13|{
 2368|     13|  ls->fs->bl->flags |= FSCOPE_BREAK;
  ------------------
  |  |  106|     13|#define FSCOPE_BREAK		0x02	/* Break used in scope. */
  ------------------
 2369|     13|  gola_new(ls, NAME_BREAK, VSTACK_GOTO, bcemit_jmp(ls->fs));
  ------------------
  |  |  111|     13|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
                gola_new(ls, NAME_BREAK, VSTACK_GOTO, bcemit_jmp(ls->fs));
  ------------------
  |  |  119|     13|#define VSTACK_GOTO		0x02	/* Pending goto. */
  ------------------
 2370|     13|}
lj_parse.c:parse_label:
 2386|    525|{
 2387|    525|  FuncState *fs = ls->fs;
 2388|    525|  GCstr *name;
 2389|    525|  MSize idx;
 2390|    525|  fs->lasttarget = fs->pc;
 2391|    525|  fs->bl->flags |= FSCOPE_GOLA;
  ------------------
  |  |  107|    525|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
 2392|    525|  lj_lex_next(ls);  /* Skip '::'. */
 2393|    525|  name = lex_str(ls);
 2394|    525|  if (gola_findlabel(ls, name))
  ------------------
  |  Branch (2394:7): [True: 7, False: 518]
  ------------------
 2395|      7|    lj_lex_error(ls, 0, LJ_ERR_XLDUP, strdata(name));
  ------------------
  |  |  316|      7|#define strdata(s)	((const char *)((s)+1))
  ------------------
 2396|    518|  idx = gola_new(ls, name, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  120|    518|#define VSTACK_LABEL		0x04	/* Label. */
  ------------------
 2397|    518|  lex_check(ls, TK_label);
 2398|       |  /* Recursively parse trailing statements: labels and ';' (Lua 5.2 only). */
 2399|    638|  for (;;) {
 2400|    638|    if (ls->tok == TK_label) {
  ------------------
  |  Branch (2400:9): [True: 169, False: 469]
  ------------------
 2401|    169|      synlevel_begin(ls);
 2402|    169|      parse_label(ls);
 2403|    169|      synlevel_end(ls);
  ------------------
  |  | 2042|    169|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2404|    469|    } else if (LJ_52 && ls->tok == ';') {
  ------------------
  |  |  697|    938|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (2404:25): [True: 0, False: 0]
  ------------------
 2405|      0|      lj_lex_next(ls);
 2406|    469|    } else {
 2407|    469|      break;
 2408|    469|    }
 2409|    638|  }
 2410|       |  /* Trailing label is considered to be outside of scope. */
 2411|    518|  if (parse_isend(ls->tok) && ls->tok != TK_until)
  ------------------
  |  Branch (2411:7): [True: 0, False: 518]
  |  Branch (2411:31): [True: 0, False: 0]
  ------------------
 2412|      0|    ls->vstack[idx].slot = fs->bl->nactvar;
 2413|    518|  gola_resolve(ls, fs->bl, idx);
 2414|    518|}
lj_parse.c:gola_findlabel:
 1270|  4.64k|{
 1271|  4.64k|  VarInfo *v = ls->vstack + ls->fs->bl->vstart;
 1272|  4.64k|  VarInfo *ve = ls->vstack + ls->vtop;
 1273|  46.6k|  for (; v < ve; v++)
  ------------------
  |  Branch (1273:10): [True: 42.8k, False: 3.81k]
  ------------------
 1274|  42.8k|    if (strref(v->name) == name && gola_islabel(v))
  ------------------
  |  |  315|  42.8k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  42.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                  if (strref(v->name) == name && gola_islabel(v))
  ------------------
  |  | 1183|  17.0k|#define gola_islabel(v)		((v)->info & VSTACK_LABEL)
  |  |  ------------------
  |  |  |  |  120|  17.0k|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  |  |  |  Branch (1183:26): [True: 831, False: 16.2k]
  |  |  ------------------
  ------------------
  |  Branch (1274:9): [True: 17.0k, False: 25.7k]
  ------------------
 1275|    831|      return v;
 1276|  3.81k|  return NULL;
 1277|  4.64k|}
lj_parse.c:parse_goto:
 2374|  4.12k|{
 2375|  4.12k|  FuncState *fs = ls->fs;
 2376|  4.12k|  GCstr *name = lex_str(ls);
 2377|  4.12k|  VarInfo *vl = gola_findlabel(ls, name);
 2378|  4.12k|  if (vl)  /* Treat backwards goto within same scope like a loop. */
  ------------------
  |  Branch (2378:7): [True: 824, False: 3.30k]
  ------------------
 2379|    824|    bcemit_AJ(fs, BC_LOOP, vl->slot, -1);  /* No BC range check. */
  ------------------
  |  |  436|    824|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|    824|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    824|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2380|  4.12k|  fs->bl->flags |= FSCOPE_GOLA;
  ------------------
  |  |  107|  4.12k|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
 2381|  4.12k|  gola_new(ls, name, VSTACK_GOTO, bcemit_jmp(fs));
  ------------------
  |  |  119|  4.12k|#define VSTACK_GOTO		0x02	/* Pending goto. */
  ------------------
 2382|  4.12k|}
lj_parse.c:parse_call_assign:
 2243|   215k|{
 2244|   215k|  FuncState *fs = ls->fs;
 2245|   215k|  LHSVarList vl;
 2246|   215k|  expr_primary(ls, &vl.v);
 2247|   215k|  if (vl.v.k == VCALL) {  /* Function call statement. */
  ------------------
  |  Branch (2247:7): [True: 65.5k, False: 149k]
  ------------------
 2248|  65.5k|    setbc_b(bcptr(fs, &vl.v), 1);  /* No results. */
  ------------------
  |  |   46|  65.5k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  65.5k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  65.5k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2249|   149k|  } else {  /* Start of an assignment. */
 2250|   149k|    vl.prev = NULL;
 2251|   149k|    parse_assignment(ls, &vl, 1);
 2252|   149k|  }
 2253|   215k|}
lj_parse.c:parse_assignment:
 2206|   155k|{
 2207|   155k|  ExpDesc e;
 2208|   155k|  checkcond(ls, VLOCAL <= lh->v.k && lh->v.k <= VINDEXED, LJ_ERR_XSYNTAX);
  ------------------
  |  |  194|   310k|#define checkcond(ls, c, em)		{ if (!(c)) err_syntax(ls, em); }
  |  |  ------------------
  |  |  |  Branch (194:39): [True: 155k, False: 1]
  |  |  |  Branch (194:39): [True: 155k, False: 10]
  |  |  ------------------
  ------------------
 2209|   155k|  if (lex_opt(ls, ',')) {  /* Collect LHS list and recurse upwards. */
  ------------------
  |  Branch (2209:7): [True: 8.54k, False: 146k]
  ------------------
 2210|  8.54k|    LHSVarList vl;
 2211|  8.54k|    vl.prev = lh;
 2212|  8.54k|    expr_primary(ls, &vl.v);
 2213|  8.54k|    if (vl.v.k == VLOCAL)
  ------------------
  |  Branch (2213:9): [True: 1.15k, False: 7.39k]
  ------------------
 2214|  1.15k|      assign_hazard(ls, lh, &vl.v);
 2215|  8.54k|    checklimit(ls->fs, ls->level + nvars, LJ_MAX_XLEVEL, "variable names");
  ------------------
  |  |  192|  8.54k|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 5, False: 8.54k]
  |  |  ------------------
  ------------------
 2216|  8.54k|    parse_assignment(ls, &vl, nvars+1);
 2217|   146k|  } else {  /* Parse RHS. */
 2218|   146k|    BCReg nexps;
 2219|   146k|    lex_check(ls, '=');
 2220|   146k|    nexps = expr_list(ls, &e);
 2221|   146k|    if (nexps == nvars) {
  ------------------
  |  Branch (2221:9): [True: 139k, False: 7.13k]
  ------------------
 2222|   139k|      if (e.k == VCALL) {
  ------------------
  |  Branch (2222:11): [True: 1.69k, False: 137k]
  ------------------
 2223|  1.69k|	if (bc_op(*bcptr(ls->fs, &e)) == BC_VARG) {  /* Vararg assignment. */
  ------------------
  |  |   34|  1.69k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2223:6): [True: 27, False: 1.66k]
  ------------------
 2224|     27|	  ls->fs->freereg--;
 2225|     27|	  e.k = VRELOCABLE;
 2226|  1.66k|	} else {  /* Multiple call results. */
 2227|  1.66k|	  e.u.s.info = e.u.s.aux;  /* Base of call is not relocatable. */
 2228|  1.66k|	  e.k = VNONRELOC;
 2229|  1.66k|	}
 2230|  1.69k|      }
 2231|   139k|      bcemit_store(ls->fs, &lh->v, &e);
 2232|   139k|      return;
 2233|   139k|    }
 2234|  7.13k|    assign_adjust(ls, nvars, nexps, &e);
 2235|  7.13k|  }
 2236|       |  /* Assign RHS to LHS and recurse downwards. */
 2237|  15.6k|  expr_init(&e, VNONRELOC, ls->fs->freereg-1);
 2238|  15.6k|  bcemit_store(ls->fs, &lh->v, &e);
 2239|  15.6k|}
lj_parse.c:assign_hazard:
 2158|  1.15k|{
 2159|  1.15k|  FuncState *fs = ls->fs;
 2160|  1.15k|  BCReg reg = v->u.s.info;  /* Check against this variable. */
 2161|  1.15k|  BCReg tmp = fs->freereg;  /* Rename to this temp. register (if needed). */
 2162|  1.15k|  int hazard = 0;
 2163|  46.2k|  for (; lh; lh = lh->prev) {
  ------------------
  |  Branch (2163:10): [True: 45.0k, False: 1.15k]
  ------------------
 2164|  45.0k|    if (lh->v.k == VINDEXED) {
  ------------------
  |  Branch (2164:9): [True: 8.35k, False: 36.7k]
  ------------------
 2165|  8.35k|      if (lh->v.u.s.info == reg) {  /* t[i], t = 1, 2 */
  ------------------
  |  Branch (2165:11): [True: 172, False: 8.17k]
  ------------------
 2166|    172|	hazard = 1;
 2167|    172|	lh->v.u.s.info = tmp;
 2168|    172|      }
 2169|  8.35k|      if (lh->v.u.s.aux == reg) {  /* t[i], i = 1, 2 */
  ------------------
  |  Branch (2169:11): [True: 0, False: 8.35k]
  ------------------
 2170|      0|	hazard = 1;
 2171|      0|	lh->v.u.s.aux = tmp;
 2172|      0|      }
 2173|  8.35k|    }
 2174|  45.0k|  }
 2175|  1.15k|  if (hazard) {
  ------------------
  |  Branch (2175:7): [True: 169, False: 986]
  ------------------
 2176|    169|    bcemit_AD(fs, BC_MOV, tmp, reg);  /* Rename conflicting variable. */
  ------------------
  |  |  435|    169|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|    169|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2177|    169|    bcreg_reserve(fs, 1);
 2178|    169|  }
 2179|  1.15k|}
lj_parse.c:lex_opt:
 1007|   808k|{
 1008|   808k|  if (ls->tok == tok) {
  ------------------
  |  Branch (1008:7): [True: 132k, False: 676k]
  ------------------
 1009|   132k|    lj_lex_next(ls);
 1010|   132k|    return 1;
 1011|   132k|  }
 1012|   676k|  return 0;
 1013|   808k|}
lj_parse.c:err_token:
  180|  1.24k|{
  181|  1.24k|  lj_lex_error(ls, ls->tok, LJ_ERR_XTOKEN, lj_lex_token2str(ls, tok));
  182|  1.24k|}
lj_parse.c:fs_finish:
 1577|  21.5k|{
 1578|  21.5k|  lua_State *L = ls->L;
 1579|  21.5k|  FuncState *fs = ls->fs;
 1580|  21.5k|  BCLine numline = line - fs->linedefined;
 1581|  21.5k|  size_t sizept, ofsk, ofsuv, ofsli, ofsdbg, ofsvar;
 1582|  21.5k|  GCproto *pt;
 1583|       |
 1584|       |  /* Apply final fixups. */
 1585|  21.5k|  fs_fixup_ret(fs);
 1586|       |
 1587|       |  /* Calculate total size of prototype including all colocated arrays. */
 1588|  21.5k|  sizept = sizeof(GCproto) + fs->pc*sizeof(BCIns) + fs->nkgc*sizeof(GCRef);
 1589|  21.5k|  sizept = (sizept + sizeof(TValue)-1) & ~(sizeof(TValue)-1);
 1590|  21.5k|  ofsk = sizept; sizept += fs->nkn*sizeof(TValue);
 1591|  21.5k|  ofsuv = sizept; sizept += ((fs->nuv+1)&~1)*2;
 1592|  21.5k|  ofsli = sizept; sizept += fs_prep_line(fs, numline);
 1593|  21.5k|  ofsdbg = sizept; sizept += fs_prep_var(ls, fs, &ofsvar);
 1594|       |
 1595|       |  /* Allocate prototype and initialize its fields. */
 1596|  21.5k|  pt = (GCproto *)lj_mem_newgco(L, (MSize)sizept);
 1597|  21.5k|  pt->gct = ~LJ_TPROTO;
  ------------------
  |  |  267|  21.5k|#define LJ_TPROTO		(~7u)
  ------------------
 1598|  21.5k|  pt->sizept = (MSize)sizept;
 1599|  21.5k|  pt->trace = 0;
 1600|  21.5k|  pt->flags = (uint8_t)(fs->flags & ~(PROTO_HAS_RETURN|PROTO_FIXUP_RETURN));
  ------------------
  |  |  405|  21.5k|#define PROTO_HAS_RETURN	0x20	/* Already emitted a return. */
  ------------------
                pt->flags = (uint8_t)(fs->flags & ~(PROTO_HAS_RETURN|PROTO_FIXUP_RETURN));
  ------------------
  |  |  406|  21.5k|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
 1601|  21.5k|  pt->numparams = fs->numparams;
 1602|  21.5k|  pt->framesize = fs->framesize;
 1603|  21.5k|  setgcref(pt->chunkname, obj2gco(ls->chunkname));
  ------------------
  |  |   72|  21.5k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1604|       |
 1605|       |  /* Close potentially uninitialized gap between bc and kgc. */
 1606|  21.5k|  *(uint32_t *)((char *)pt + ofsk - sizeof(GCRef)*(fs->nkgc+1)) = 0;
 1607|  21.5k|  fs_fixup_bc(fs, pt, (BCIns *)((char *)pt + sizeof(GCproto)), fs->pc);
 1608|  21.5k|  fs_fixup_k(fs, pt, (void *)((char *)pt + ofsk));
 1609|  21.5k|  fs_fixup_uv1(fs, pt, (uint16_t *)((char *)pt + ofsuv));
 1610|  21.5k|  fs_fixup_line(fs, pt, (void *)((char *)pt + ofsli), numline);
 1611|  21.5k|  fs_fixup_var(ls, pt, (uint8_t *)((char *)pt + ofsdbg), ofsvar);
 1612|       |
 1613|  21.5k|  lj_vmevent_send(L, BC,
  ------------------
  |  |   39|  21.5k|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|  21.5k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  21.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|  21.5k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 21.5k]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
 1614|  21.5k|    setprotoV(L, L->top++, pt);
 1615|  21.5k|  );
 1616|       |
 1617|  21.5k|  L->top--;  /* Pop table of constants. */
 1618|  21.5k|  ls->vtop = fs->vbase;  /* Reset variable stack. */
 1619|  21.5k|  ls->fs = fs->prev;
 1620|  21.5k|  lj_assertL(ls->fs != NULL || ls->tok == TK_eof, "bad parser state");
  ------------------
  |  |  365|  21.5k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  32.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 10.4k, False: 11.0k]
  |  |  |  |  |  Branch (355:5): [True: 11.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  21.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1621|  21.5k|  return pt;
 1622|  21.5k|}
lj_parse.c:fs_fixup_ret:
 1539|  21.5k|{
 1540|  21.5k|  BCPos lastpc = fs->pc;
 1541|  21.5k|  if (lastpc <= fs->lasttarget || !bcopisret(bc_op(fs->bcbase[lastpc-1].ins))) {
  ------------------
  |  |   34|  21.4k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (1541:7): [True: 181, False: 21.4k]
  |  Branch (1541:35): [True: 21.3k, False: 96]
  ------------------
 1542|  21.4k|    if ((fs->bl->flags & FSCOPE_UPVAL))
  ------------------
  |  |  108|  21.4k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1542:9): [True: 158, False: 21.3k]
  ------------------
 1543|    158|      bcemit_AJ(fs, BC_UCLO, 0, 0);
  ------------------
  |  |  436|    158|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|    158|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    158|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1544|  21.4k|    bcemit_AD(fs, BC_RET0, 0, 1);  /* Need final return. */
  ------------------
  |  |  435|  21.4k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  21.4k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1545|  21.4k|  }
 1546|  21.5k|  fs->bl->flags |= FSCOPE_NOCLOSE;  /* Handled above. */
  ------------------
  |  |  109|  21.5k|#define FSCOPE_NOCLOSE		0x10	/* Do not close upvalues. */
  ------------------
 1547|  21.5k|  fscope_end(fs);
 1548|  21.5k|  lj_assertFS(fs->bl == NULL, "bad scope nesting");
  ------------------
  |  |  167|  21.5k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  21.5k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  21.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 21.5k, False: 77]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  21.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1549|       |  /* May need to fixup returns encoded before first function was created. */
 1550|  21.5k|  if (fs->flags & PROTO_FIXUP_RETURN) {
  ------------------
  |  |  406|  21.5k|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
  |  Branch (1550:7): [True: 50, False: 21.4k]
  ------------------
 1551|     50|    BCPos pc;
 1552|  9.71k|    for (pc = 1; pc < lastpc; pc++) {
  ------------------
  |  Branch (1552:18): [True: 9.71k, False: 0]
  ------------------
 1553|  9.71k|      BCIns ins = fs->bcbase[pc].ins;
 1554|  9.71k|      BCPos offset;
 1555|  9.71k|      switch (bc_op(ins)) {
  ------------------
  |  |   34|  9.71k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
 1556|     24|      case BC_CALLMT: case BC_CALLT:
  ------------------
  |  Branch (1556:7): [True: 0, False: 9.71k]
  |  Branch (1556:23): [True: 24, False: 9.68k]
  ------------------
 1557|     67|      case BC_RETM: case BC_RET: case BC_RET0: case BC_RET1:
  ------------------
  |  Branch (1557:7): [True: 22, False: 9.68k]
  |  Branch (1557:21): [True: 6, False: 9.70k]
  |  Branch (1557:34): [True: 0, False: 9.71k]
  |  Branch (1557:48): [True: 15, False: 9.69k]
  ------------------
 1558|     67|	offset = bcemit_INS(fs, ins);  /* Copy original instruction. */
 1559|     67|	fs->bcbase[offset].line = fs->bcbase[pc].line;
 1560|     67|	offset = offset-(pc+1)+BCBIAS_J;
  ------------------
  |  |   29|     67|#define BCBIAS_J	0x8000
  ------------------
 1561|     67|	if (offset > BCMAX_D)
  ------------------
  |  |   28|     67|#define BCMAX_D		0xffff
  ------------------
  |  Branch (1561:6): [True: 0, False: 67]
  ------------------
 1562|      0|	  err_syntax(fs->ls, LJ_ERR_XFIXUP);
 1563|       |	/* Replace with UCLO plus branch. */
 1564|     67|	fs->bcbase[pc].ins = BCINS_AD(BC_UCLO, 0, offset);
  ------------------
  |  |   56|     67|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1565|     67|	break;
 1566|     50|      case BC_FNEW:
  ------------------
  |  Branch (1566:7): [True: 50, False: 9.66k]
  ------------------
 1567|     50|	return;  /* We're done. */
 1568|  9.59k|      default:
  ------------------
  |  Branch (1568:7): [True: 9.59k, False: 117]
  ------------------
 1569|  9.59k|	break;
 1570|  9.71k|      }
 1571|  9.71k|    }
 1572|     50|  }
 1573|  21.5k|}
lj_parse.c:bcopisret:
 1527|  21.4k|{
 1528|  21.4k|  switch (op) {
 1529|     26|  case BC_CALLMT: case BC_CALLT:
  ------------------
  |  Branch (1529:3): [True: 0, False: 21.4k]
  |  Branch (1529:19): [True: 26, False: 21.3k]
  ------------------
 1530|     96|  case BC_RETM: case BC_RET: case BC_RET0: case BC_RET1:
  ------------------
  |  Branch (1530:3): [True: 17, False: 21.3k]
  |  Branch (1530:17): [True: 9, False: 21.3k]
  |  Branch (1530:30): [True: 0, False: 21.4k]
  |  Branch (1530:44): [True: 44, False: 21.3k]
  ------------------
 1531|     96|    return 1;
 1532|  21.3k|  default:
  ------------------
  |  Branch (1532:3): [True: 21.3k, False: 96]
  ------------------
 1533|  21.3k|    return 0;
 1534|  21.4k|  }
 1535|  21.4k|}
lj_parse.c:fs_prep_line:
 1426|  21.5k|{
 1427|  21.5k|  return (fs->pc-1) << (numline < 256 ? 0 : numline < 65536 ? 1 : 2);
  ------------------
  |  Branch (1427:25): [True: 21.4k, False: 63]
  |  Branch (1427:45): [True: 63, False: 0]
  ------------------
 1428|  21.5k|}
lj_parse.c:fs_prep_var:
 1466|  21.5k|{
 1467|  21.5k|  VarInfo *vs =ls->vstack, *ve;
 1468|  21.5k|  MSize i, n;
 1469|  21.5k|  BCPos lastpc;
 1470|  21.5k|  lj_buf_reset(&ls->sb);  /* Copy to temp. string buffer. */
 1471|       |  /* Store upvalue names. */
 1472|  22.2k|  for (i = 0, n = fs->nuv; i < n; i++) {
  ------------------
  |  Branch (1472:28): [True: 746, False: 21.5k]
  ------------------
 1473|    746|    GCstr *s = strref(vs[fs->uvmap[i]].name);
  ------------------
  |  |  315|    746|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|    746|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1474|    746|    MSize len = s->len+1;
 1475|    746|    char *p = lj_buf_more(&ls->sb, len);
 1476|    746|    p = lj_buf_wmem(p, strdata(s), len);
  ------------------
  |  |  316|    746|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1477|    746|    ls->sb.w = p;
 1478|    746|  }
 1479|  21.5k|  *ofsvar = sbuflen(&ls->sb);
  ------------------
  |  |   36|  21.5k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1480|  21.5k|  lastpc = 0;
 1481|       |  /* Store local variable names and compressed ranges. */
 1482|  41.9k|  for (ve = vs + ls->vtop, vs += fs->vbase; vs < ve; vs++) {
  ------------------
  |  Branch (1482:45): [True: 20.4k, False: 21.5k]
  ------------------
 1483|  20.4k|    if (!gola_isgotolabel(vs)) {
  ------------------
  |  | 1184|  20.4k|#define gola_isgotolabel(v)	((v)->info & (VSTACK_GOTO|VSTACK_LABEL))
  |  |  ------------------
  |  |  |  |  119|  20.4k|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |               #define gola_isgotolabel(v)	((v)->info & (VSTACK_GOTO|VSTACK_LABEL))
  |  |  ------------------
  |  |  |  |  120|  20.4k|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  ------------------
  |  Branch (1483:9): [True: 19.3k, False: 1.05k]
  ------------------
 1484|  19.3k|      GCstr *s = strref(vs->name);
  ------------------
  |  |  315|  19.3k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  19.3k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1485|  19.3k|      BCPos startpc;
 1486|  19.3k|      char *p;
 1487|  19.3k|      if ((uintptr_t)s < VARNAME__MAX) {
  ------------------
  |  Branch (1487:11): [True: 0, False: 19.3k]
  ------------------
 1488|      0|	p = lj_buf_more(&ls->sb, 1 + 2*5);
 1489|      0|	*p++ = (char)(uintptr_t)s;
 1490|  19.3k|      } else {
 1491|  19.3k|	MSize len = s->len+1;
 1492|  19.3k|	p = lj_buf_more(&ls->sb, len + 2*5);
 1493|  19.3k|	p = lj_buf_wmem(p, strdata(s), len);
  ------------------
  |  |  316|  19.3k|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1494|  19.3k|      }
 1495|  19.3k|      startpc = vs->startpc;
 1496|  19.3k|      p = lj_strfmt_wuleb128(p, startpc-lastpc);
 1497|  19.3k|      p = lj_strfmt_wuleb128(p, vs->endpc-startpc);
 1498|  19.3k|      ls->sb.w = p;
 1499|  19.3k|      lastpc = startpc;
 1500|  19.3k|    }
 1501|  20.4k|  }
 1502|  21.5k|  lj_buf_putb(&ls->sb, '\0');  /* Terminator for varinfo. */
 1503|  21.5k|  return sbuflen(&ls->sb);
  ------------------
  |  |   36|  21.5k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1504|  21.5k|}
lj_parse.c:fs_fixup_bc:
 1332|  21.5k|{
 1333|  21.5k|  BCInsLine *base = fs->bcbase;
 1334|  21.5k|  MSize i;
 1335|  21.5k|  BCIns op;
 1336|  21.5k|  pt->sizebc = n;
 1337|  21.5k|  if (fs->ls->fr2 != LJ_FR2) op = BC_NOT;  /* Mark non-native prototype. */
  ------------------
  |  |  569|  21.5k|#define LJ_FR2			1
  ------------------
  |  Branch (1337:7): [True: 0, False: 21.5k]
  ------------------
 1338|  21.5k|  else if ((fs->flags & PROTO_VARARG)) op = BC_FUNCV;
  ------------------
  |  |  400|  21.5k|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
  |  Branch (1338:12): [True: 11.0k, False: 10.4k]
  ------------------
 1339|  10.4k|  else op = BC_FUNCF;
 1340|  21.5k|  bc[0] = BCINS_AD(op, fs->framesize, 0);
  ------------------
  |  |   56|  21.5k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1341|   894k|  for (i = 1; i < n; i++)
  ------------------
  |  Branch (1341:15): [True: 872k, False: 21.5k]
  ------------------
 1342|   872k|    bc[i] = base[i].ins;
 1343|  21.5k|}
lj_parse.c:fs_fixup_k:
 1364|  21.5k|{
 1365|  21.5k|  GCtab *kt;
 1366|  21.5k|  TValue *array;
 1367|  21.5k|  Node *node;
 1368|  21.5k|  MSize i, hmask;
 1369|  21.5k|  checklimitgt(fs, fs->nkn, BCMAX_D+1, "constants");
  ------------------
  |  |  193|  21.5k|#define checklimitgt(fs, v, l, m)	if ((v) > (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (193:39): [True: 0, False: 21.5k]
  |  |  ------------------
  ------------------
 1370|  21.5k|  checklimitgt(fs, fs->nkgc, BCMAX_D+1, "constants");
  ------------------
  |  |  193|  21.5k|#define checklimitgt(fs, v, l, m)	if ((v) > (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (193:39): [True: 0, False: 21.5k]
  |  |  ------------------
  ------------------
 1371|  21.5k|  setmref(pt->k, kptr);
  ------------------
  |  |   39|  21.5k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1372|  21.5k|  pt->sizekn = fs->nkn;
 1373|  21.5k|  pt->sizekgc = fs->nkgc;
 1374|  21.5k|  kt = fs->kt;
 1375|  21.5k|  array = tvref(kt->array);
  ------------------
  |  |  217|  21.5k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  21.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1376|  23.3k|  for (i = 0; i < kt->asize; i++)
  ------------------
  |  Branch (1376:15): [True: 1.83k, False: 21.5k]
  ------------------
 1377|  1.83k|    if (tvhaskslot(&array[i])) {
  ------------------
  |  |  201|  1.83k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 600, False: 1.23k]
  |  |  ------------------
  ------------------
 1378|    600|      TValue *tv = &((TValue *)kptr)[tvkslot(&array[i])];
  ------------------
  |  |  202|    600|#define tvkslot(o)	((o)->u32.lo)
  ------------------
 1379|    600|      if (LJ_DUALNUM)
  ------------------
  |  |  549|    600|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1380|      0|	setintV(tv, (int32_t)i);
 1381|    600|      else
 1382|    600|	setnumV(tv, (lua_Number)i);
  ------------------
  |  |  945|    600|#define setnumV(o, x)		((o)->n = (x))
  ------------------
 1383|    600|    }
 1384|  21.5k|  node = noderef(kt->node);
  ------------------
  |  |  515|  21.5k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  21.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1385|  21.5k|  hmask = kt->hmask;
 1386|   406k|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (1386:15): [True: 385k, False: 21.5k]
  ------------------
 1387|   385k|    Node *n = &node[i];
 1388|   385k|    if (tvhaskslot(&n->val)) {
  ------------------
  |  |  201|   385k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 209k, False: 175k]
  |  |  ------------------
  ------------------
 1389|   209k|      ptrdiff_t kidx = (ptrdiff_t)tvkslot(&n->val);
  ------------------
  |  |  202|   209k|#define tvkslot(o)	((o)->u32.lo)
  ------------------
 1390|   209k|      lj_assertFS(!tvisint(&n->key), "unexpected integer key");
  ------------------
  |  |  167|   209k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   209k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   209k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   209k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1391|   209k|      if (tvisnum(&n->key)) {
  ------------------
  |  |  804|   209k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   209k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   209k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   209k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 1.91k, False: 207k]
  |  |  ------------------
  ------------------
 1392|  1.91k|	TValue *tv = &((TValue *)kptr)[kidx];
 1393|  1.91k|	if (LJ_DUALNUM) {
  ------------------
  |  |  549|  1.91k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1394|      0|	  lua_Number nn = numV(&n->key);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1395|      0|	  int32_t k = lj_num2int(nn);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
 1396|      0|	  lj_assertFS(!tvismzero(&n->key), "unexpected -0 key");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1397|      0|	  if ((lua_Number)k == nn)
  ------------------
  |  Branch (1397:8): [True: 0, False: 0]
  ------------------
 1398|      0|	    setintV(tv, k);
 1399|      0|	  else
 1400|      0|	    *tv = n->key;
 1401|  1.91k|	} else {
 1402|  1.91k|	  *tv = n->key;
 1403|  1.91k|	}
 1404|   207k|      } else {
 1405|   207k|	GCobj *o = gcV(&n->key);
  ------------------
  |  |  858|   207k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|   207k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   207k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   207k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 207k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   207k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1406|   207k|	setgcref(((GCRef *)kptr)[~kidx], o);
  ------------------
  |  |   72|   207k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1407|   207k|	lj_gc_objbarrier(fs->L, pt, o);
  ------------------
  |  |  108|   207k|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   32|   414k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   207k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   207k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   207k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 190k, False: 17.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|   190k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|   190k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 190k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  109|   207k|      lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
 1408|   207k|	if (tvisproto(&n->key))
  ------------------
  |  |  798|   207k|#define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  781|   207k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  267|   207k|#define LJ_TPROTO		(~7u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 8.95k, False: 198k]
  |  |  ------------------
  ------------------
 1409|  8.95k|	  fs_fixup_uv2(fs, gco2pt(o));
  ------------------
  |  |  768|  8.95k|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|  8.95k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  8.95k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  8.95k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 8.95k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  8.95k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1410|   207k|      }
 1411|   209k|    }
 1412|   385k|  }
 1413|  21.5k|}
lj_parse.c:fs_fixup_uv2:
 1347|  8.95k|{
 1348|  8.95k|  VarInfo *vstack = fs->ls->vstack;
 1349|  8.95k|  uint16_t *uv = proto_uv(pt);
  ------------------
  |  |  422|  8.95k|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|  8.95k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1350|  8.95k|  MSize i, n = pt->sizeuv;
 1351|  9.50k|  for (i = 0; i < n; i++) {
  ------------------
  |  Branch (1351:15): [True: 559, False: 8.95k]
  ------------------
 1352|    559|    VarIndex vidx = uv[i];
 1353|    559|    if (vidx >= LJ_MAX_VSTACK)
  ------------------
  |  |  115|    559|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|    559|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1353:9): [True: 356, False: 203]
  ------------------
 1354|    356|      uv[i] = vidx - LJ_MAX_VSTACK;
  ------------------
  |  |  115|    356|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|    356|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
 1355|    203|    else if ((vstack[vidx].info & VSTACK_VAR_RW))
  ------------------
  |  |  118|    203|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  |  Branch (1355:14): [True: 82, False: 121]
  ------------------
 1356|     82|      uv[i] = vstack[vidx].slot | PROTO_UV_LOCAL;
  ------------------
  |  |  412|     82|#define PROTO_UV_LOCAL		0x8000	/* Upvalue for local slot. */
  ------------------
 1357|    121|    else
 1358|    121|      uv[i] = vstack[vidx].slot | PROTO_UV_LOCAL | PROTO_UV_IMMUTABLE;
  ------------------
  |  |  412|    121|#define PROTO_UV_LOCAL		0x8000	/* Upvalue for local slot. */
  ------------------
                    uv[i] = vstack[vidx].slot | PROTO_UV_LOCAL | PROTO_UV_IMMUTABLE;
  ------------------
  |  |  413|    121|#define PROTO_UV_IMMUTABLE	0x4000	/* Immutable upvalue. */
  ------------------
 1359|    559|  }
 1360|  8.95k|}
lj_parse.c:fs_fixup_uv1:
 1417|  21.5k|{
 1418|  21.5k|  setmref(pt->uv, uv);
  ------------------
  |  |   39|  21.5k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1419|  21.5k|  pt->sizeuv = fs->nuv;
 1420|  21.5k|  memcpy(uv, fs->uvtmp, fs->nuv*sizeof(VarIndex));
 1421|  21.5k|}
lj_parse.c:fs_fixup_line:
 1433|  21.5k|{
 1434|  21.5k|  BCInsLine *base = fs->bcbase + 1;
 1435|  21.5k|  BCLine first = fs->linedefined;
 1436|  21.5k|  MSize i = 0, n = fs->pc-1;
 1437|  21.5k|  pt->firstline = fs->linedefined;
 1438|  21.5k|  pt->numline = numline;
 1439|  21.5k|  setmref(pt->lineinfo, lineinfo);
  ------------------
  |  |   39|  21.5k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1440|  21.5k|  if (LJ_LIKELY(numline < 256)) {
  ------------------
  |  |  145|  21.5k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 21.4k, False: 63]
  |  |  ------------------
  ------------------
 1441|  21.4k|    uint8_t *li = (uint8_t *)lineinfo;
 1442|   870k|    do {
 1443|   870k|      BCLine delta = base[i].line - first;
 1444|   870k|      lj_assertFS(delta >= 0 && delta < 256, "bad line delta");
  ------------------
  |  |  167|   870k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   870k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.74M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 870k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 870k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   870k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1445|   870k|      li[i] = (uint8_t)delta;
 1446|   870k|    } while (++i < n);
  ------------------
  |  Branch (1446:14): [True: 849k, False: 21.4k]
  ------------------
 1447|  21.4k|  } else if (LJ_LIKELY(numline < 65536)) {
  ------------------
  |  |  145|     63|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 63, False: 0]
  |  |  ------------------
  ------------------
 1448|     63|    uint16_t *li = (uint16_t *)lineinfo;
 1449|  1.82k|    do {
 1450|  1.82k|      BCLine delta = base[i].line - first;
 1451|  1.82k|      lj_assertFS(delta >= 0 && delta < 65536, "bad line delta");
  ------------------
  |  |  167|  1.82k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.82k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.64k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.82k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.82k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.82k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1452|  1.82k|      li[i] = (uint16_t)delta;
 1453|  1.82k|    } while (++i < n);
  ------------------
  |  Branch (1453:14): [True: 1.75k, False: 63]
  ------------------
 1454|     63|  } else {
 1455|      0|    uint32_t *li = (uint32_t *)lineinfo;
 1456|      0|    do {
 1457|      0|      BCLine delta = base[i].line - first;
 1458|      0|      lj_assertFS(delta >= 0, "bad line delta");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1459|      0|      li[i] = (uint32_t)delta;
 1460|      0|    } while (++i < n);
  ------------------
  |  Branch (1460:14): [True: 0, False: 0]
  ------------------
 1461|      0|  }
 1462|  21.5k|}
lj_parse.c:fs_fixup_var:
 1508|  21.5k|{
 1509|  21.5k|  setmref(pt->uvinfo, p);
  ------------------
  |  |   39|  21.5k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1510|  21.5k|  setmref(pt->varinfo, (char *)p + ofsvar);
  ------------------
  |  |   39|  21.5k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1511|  21.5k|  memcpy(p, ls->sb.b, sbuflen(&ls->sb));  /* Copy from temp. buffer. */
  ------------------
  |  |   36|  21.5k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1512|  21.5k|}

lj_prng_u64:
   48|  92.5k|{
   49|  92.5k|  uint64_t z, r = 0;
   50|  92.5k|  TW223_STEP(rs, z, r)
  ------------------
  |  |   41|  92.5k|  TW223_GEN(rs, z, r, 0, 63, 31, 18) \
  |  |  ------------------
  |  |  |  |   36|  92.5k|  z = rs->u[i]; \
  |  |  |  |   37|  92.5k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  92.5k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   42|  92.5k|  TW223_GEN(rs, z, r, 1, 58, 19, 28) \
  |  |  ------------------
  |  |  |  |   36|  92.5k|  z = rs->u[i]; \
  |  |  |  |   37|  92.5k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  92.5k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   43|  92.5k|  TW223_GEN(rs, z, r, 2, 55, 24,  7) \
  |  |  ------------------
  |  |  |  |   36|  92.5k|  z = rs->u[i]; \
  |  |  |  |   37|  92.5k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  92.5k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   44|  92.5k|  TW223_GEN(rs, z, r, 3, 47, 21,  8)
  |  |  ------------------
  |  |  |  |   36|  92.5k|  z = rs->u[i]; \
  |  |  |  |   37|  92.5k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  92.5k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  ------------------
   51|  92.5k|  return r;
   52|  92.5k|}
lj_prng_seed_secure:
  167|  17.8k|{
  168|       |#if LJ_TARGET_XBOX360
  169|       |
  170|       |  if (XNetRandom(rs->u, (unsigned int)sizeof(rs->u)) == 0)
  171|       |    goto ok;
  172|       |
  173|       |#elif LJ_TARGET_PS3
  174|       |
  175|       |  if (sys_get_random_number(rs->u, sizeof(rs->u)) == 0)
  176|       |    goto ok;
  177|       |
  178|       |#elif LJ_TARGET_PS4 || LJ_TARGET_PS5 || LJ_TARGET_PSVITA
  179|       |
  180|       |  if (sceRandomGetRandomNumber(rs->u, sizeof(rs->u)) == 0)
  181|       |    goto ok;
  182|       |
  183|       |#elif LJ_TARGET_NX
  184|       |
  185|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  186|       |    goto ok;
  187|       |
  188|       |#elif LJ_TARGET_UWP || LJ_TARGET_XBOXONE
  189|       |
  190|       |  if (BCryptGenRandom(NULL, (PUCHAR)(rs->u), (ULONG)sizeof(rs->u),
  191|       |		      BCRYPT_USE_SYSTEM_PREFERRED_RNG) >= 0)
  192|       |    goto ok;
  193|       |
  194|       |#elif LJ_TARGET_WINDOWS
  195|       |
  196|       |  /* Keep the library loaded in case multiple VMs are started. */
  197|       |  if (!libfunc_rgr) {
  198|       |    HMODULE lib = LJ_WIN_LOADLIBA("advapi32.dll");
  199|       |    if (!lib) return 0;
  200|       |    libfunc_rgr = (PRGR)GetProcAddress(lib, "SystemFunction036");
  201|       |    if (!libfunc_rgr) return 0;
  202|       |  }
  203|       |  if (libfunc_rgr(rs->u, (ULONG)sizeof(rs->u)))
  204|       |    goto ok;
  205|       |
  206|       |#elif LJ_TARGET_POSIX
  207|       |
  208|  17.8k|#if LJ_TARGET_LINUX && defined(SYS_getrandom)
  209|       |
  210|  17.8k|  if (syscall(SYS_getrandom, rs->u, sizeof(rs->u), 0) == (long)sizeof(rs->u))
  ------------------
  |  Branch (210:7): [True: 17.8k, False: 0]
  ------------------
  211|  17.8k|    goto ok;
  212|       |
  213|       |#elif LJ_TARGET_HAS_GETENTROPY
  214|       |
  215|       |#ifdef __ELF__
  216|       |  if (&getentropy && getentropy(rs->u, sizeof(rs->u)) == 0)
  217|       |    goto ok;
  218|       |#else
  219|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  220|       |    goto ok;
  221|       |#endif
  222|       |
  223|       |#endif
  224|       |
  225|       |  /* Fallback to /dev/urandom. This may fail if the device is not
  226|       |  ** existent or accessible in a chroot or container, or if the process
  227|       |  ** or the OS ran out of file descriptors.
  228|       |  */
  229|      0|  {
  230|      0|    int fd = open("/dev/urandom", O_RDONLY|O_CLOEXEC);
  231|      0|    if (fd != -1) {
  ------------------
  |  Branch (231:9): [True: 0, False: 0]
  ------------------
  232|      0|      ssize_t n = read(fd, rs->u, sizeof(rs->u));
  233|      0|      (void)close(fd);
  234|      0|      if (n == (ssize_t)sizeof(rs->u))
  ------------------
  |  Branch (234:11): [True: 0, False: 0]
  ------------------
  235|      0|	goto ok;
  236|      0|    }
  237|      0|  }
  238|       |
  239|       |#else
  240|       |
  241|       |  /* Add an elif above for your OS with a secure PRNG seed.
  242|       |  ** Note that fiddling around with rand(), getpid(), time() or coercing
  243|       |  ** ASLR to yield a few bits of randomness is not helpful.
  244|       |  ** If you don't want any security, then don't pretend you have any
  245|       |  ** and simply define LUAJIT_SECURITY_PRNG=0 for the build.
  246|       |  */
  247|       |#error "Missing secure PRNG seed for this OS"
  248|       |
  249|       |#endif
  250|      0|  return 0;  /* Fail. */
  251|       |
  252|  17.8k|ok:
  253|  17.8k|  lj_prng_condition(rs);
  254|  17.8k|  (void)lj_prng_u64(rs);
  255|  17.8k|  return 1;  /* Success. */
  256|      0|}
lj_prng.c:lj_prng_condition:
   65|  17.8k|{
   66|  17.8k|  if (rs->u[0] < (1u << 1)) rs->u[0] += (1u << 1);
  ------------------
  |  Branch (66:7): [True: 0, False: 17.8k]
  ------------------
   67|  17.8k|  if (rs->u[1] < (1u << 6)) rs->u[1] += (1u << 6);
  ------------------
  |  Branch (67:7): [True: 0, False: 17.8k]
  ------------------
   68|  17.8k|  if (rs->u[2] < (1u << 9)) rs->u[2] += (1u << 9);
  ------------------
  |  Branch (68:7): [True: 0, False: 17.8k]
  ------------------
   69|  17.8k|  if (rs->u[3] < (1u << 17)) rs->u[3] += (1u << 17);
  ------------------
  |  Branch (69:7): [True: 0, False: 17.8k]
  ------------------
   70|  17.8k|}

lib_math.c:lj_prng_seed_fixed:
   17|  17.8k|{
   18|  17.8k|  rs->u[0] = U64x(a0d27757,0a345b8c);
  ------------------
  |  |   94|  17.8k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   19|  17.8k|  rs->u[1] = U64x(764a296c,5d4aa64f);
  ------------------
  |  |   94|  17.8k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   20|  17.8k|  rs->u[2] = U64x(51220704,070adeaa);
  ------------------
  |  |   94|  17.8k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   21|  17.8k|  rs->u[3] = U64x(2a2717b5,a7b7b927);
  ------------------
  |  |   94|  17.8k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   22|  17.8k|}

luaJIT_profile_stop:
  341|  17.8k|{
  342|  17.8k|  ProfileState *ps = &profile_state;
  343|  17.8k|  global_State *g = ps->g;
  344|  17.8k|  if (G(L) == g) {  /* Only stop profiler if started by this VM. */
  ------------------
  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (344:7): [True: 0, False: 17.8k]
  ------------------
  345|      0|    profile_timer_stop(ps);
  346|      0|    g->hookmask &= ~HOOK_PROFILE;
  ------------------
  |  |  677|      0|#define HOOK_PROFILE		0x80
  ------------------
  347|      0|    lj_dispatch_update(g);
  348|      0|#if LJ_HASJIT
  349|      0|    G2J(g)->prof_mode = 0;
  ------------------
  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  350|      0|    lj_trace_flushall(L);
  351|      0|#endif
  352|      0|    lj_buf_free(g, &ps->sb);
  353|      0|    ps->sb.w = ps->sb.e = NULL;
  354|      0|    ps->g = NULL;
  355|      0|  }
  356|  17.8k|}

lj_state_relimitstack:
   85|  21.2k|{
   86|  21.2k|  if (L->stacksize > LJ_STACK_MAXEX && L->top-tvref(L->stack) < LJ_STACK_MAX-1)
  ------------------
  |  |   39|  42.5k|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|  21.2k|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  21.2k|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|  21.2k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|  21.2k|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if (L->stacksize > LJ_STACK_MAXEX && L->top-tvref(L->stack) < LJ_STACK_MAX-1)
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (L->stacksize > LJ_STACK_MAXEX && L->top-tvref(L->stack) < LJ_STACK_MAX-1)
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  |  Branch (86:7): [True: 0, False: 21.2k]
  |  Branch (86:40): [True: 0, False: 0]
  ------------------
   87|      0|    resizestack(L, LJ_STACK_MAX);
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
   88|  21.2k|}
lj_state_shrinkstack:
   92|  4.69k|{
   93|  4.69k|  if (L->stacksize > LJ_STACK_MAXEX)
  ------------------
  |  |   39|  4.69k|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|  4.69k|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  4.69k|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|  4.69k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|  4.69k|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (93:7): [True: 0, False: 4.69k]
  ------------------
   94|      0|    return;  /* Avoid stack shrinking while handling stack overflow. */
   95|  4.69k|  if (4*used < L->stacksize &&
  ------------------
  |  Branch (95:7): [True: 3.92k, False: 771]
  ------------------
   96|  4.69k|      2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   38|  3.92k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  3.92k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  3.92k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   72|  3.92k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  3.92k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  |  Branch (96:7): [True: 20, False: 3.90k]
  ------------------
   97|       |      /* Don't shrink stack of live trace. */
   98|  4.69k|      (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  217|     20|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     20|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (98:8): [True: 20, False: 0]
  |  Branch (98:41): [True: 0, False: 0]
  ------------------
   99|     20|    resizestack(L, L->stacksize >> 1);
  100|  4.69k|}
lj_state_growstack:
  104|    568|{
  105|    568|  MSize n = L->stacksize + need;
  106|    568|  if (LJ_LIKELY(n < LJ_STACK_MAX)) {  /* The stack can grow as requested. */
  ------------------
  |  |  145|    568|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 568, False: 0]
  |  |  ------------------
  ------------------
  107|    568|    if (n < 2 * L->stacksize) {  /* Try to double the size. */
  ------------------
  |  Branch (107:9): [True: 504, False: 64]
  ------------------
  108|    504|      n = 2 * L->stacksize;
  109|    504|      if (n > LJ_STACK_MAX)
  ------------------
  |  |   37|    504|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|    504|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  |  Branch (109:11): [True: 0, False: 504]
  ------------------
  110|      0|	n = LJ_STACK_MAX;
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  111|    504|    }
  112|    568|    resizestack(L, n);
  113|    568|  } else {  /* Request would overflow. Raise a stack overflow error. */
  114|      0|    if (LJ_HASJIT) {
  ------------------
  |  |  578|      0|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  115|      0|      TValue *base = tvref(G(L)->jit_base);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  116|      0|      if (base) L->base = base;
  ------------------
  |  Branch (116:11): [True: 0, False: 0]
  ------------------
  117|      0|    }
  118|      0|    if (curr_funcisL(L)) {
  ------------------
  |  |  716|      0|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  119|      0|      L->top = curr_topL(L);
  ------------------
  |  |  718|      0|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|      0|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  120|      0|      if (L->top > tvref(L->maxstack)) {
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|       |	/* The current Lua frame violates the stack, so replace it with a
  122|       |	** dummy. This can happen when BC_IFUNCF is trying to grow the stack.
  123|       |	*/
  124|      0|	L->top = L->base;
  125|      0|	setframe_gc(L->base - 1 - LJ_FR2, obj2gco(L), LJ_TTHREAD);
  ------------------
  |  |   49|      0|#define setframe_gc(f, p, tp)	(setgcVraw((f), (p), (tp)))
  ------------------
  126|      0|      }
  127|      0|    }
  128|      0|    if (L->stacksize <= LJ_STACK_MAXEX) {
  ------------------
  |  |   39|      0|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|      0|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (128:9): [True: 0, False: 0]
  ------------------
  129|       |      /* An error handler might want to inspect the stack overflow error, but
  130|       |      ** will need some stack space to run in. We give it a stack size beyond
  131|       |      ** the normal limit in order to do so, then rely on lj_state_relimitstack
  132|       |      ** calls during unwinding to bring us back to a convential stack size.
  133|       |      ** The + 1 is space for the error message, and 2 * LUA_MINSTACK is for
  134|       |      ** the lj_state_checkstack() call in lj_err_run().
  135|       |      */
  136|      0|      resizestack(L, LJ_STACK_MAX + 1 + 2 * LUA_MINSTACK);
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
                    resizestack(L, LJ_STACK_MAX + 1 + 2 * LUA_MINSTACK);
  ------------------
  |  |   88|      0|#define LUA_MINSTACK	20
  ------------------
  137|      0|      lj_err_stkov(L);  /* May invoke an error handler. */
  138|      0|    } else {
  139|       |      /* If we're here, then the stack overflow error handler is requesting
  140|       |      ** to grow the stack even further. We have no choice but to abort the
  141|       |      ** error handler.
  142|       |      */
  143|      0|      GCstr *em = lj_err_str(L, LJ_ERR_STKOV);  /* Might OOM. */
  144|      0|      setstrV(L, L->top++, em);  /* There is always space to push an error. */
  145|      0|      lj_err_throw(L, LUA_ERRERR);  /* Does not invoke an error handler. */
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  146|      0|    }
  147|      0|  }
  148|    568|}
lj_state_growstack1:
  151|    422|{
  152|    422|  lj_state_growstack(L, 1);
  153|    422|}
lua_newstate:
  244|  17.8k|{
  245|  17.8k|  PRNGState prng;
  246|  17.8k|  GG_State *GG;
  247|  17.8k|  lua_State *L;
  248|  17.8k|  global_State *g;
  249|       |  /* We need the PRNG for the memory allocator, so initialize this first. */
  250|  17.8k|  if (!lj_prng_seed_secure(&prng)) {
  ------------------
  |  Branch (250:7): [True: 0, False: 17.8k]
  ------------------
  251|      0|    lj_assertX(0, "secure PRNG seeding failed");
  ------------------
  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  252|       |    /* Can only return NULL here, so this errors with "not enough memory". */
  253|      0|    return NULL;
  254|      0|  }
  255|  17.8k|#ifndef LUAJIT_USE_SYSMALLOC
  256|  17.8k|  if (allocf == LJ_ALLOCF_INTERNAL) {
  ------------------
  |  |   36|  17.8k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  |  Branch (256:7): [True: 17.8k, False: 0]
  ------------------
  257|  17.8k|    allocd = lj_alloc_create(&prng);
  258|  17.8k|    if (!allocd) return NULL;
  ------------------
  |  Branch (258:9): [True: 0, False: 17.8k]
  ------------------
  259|  17.8k|    allocf = lj_alloc_f;
  260|  17.8k|  }
  261|  17.8k|#endif
  262|  17.8k|  GG = (GG_State *)allocf(allocd, NULL, 0, sizeof(GG_State));
  263|  17.8k|  if (GG == NULL || !checkptrGC(GG)) return NULL;
  ------------------
  |  |  110|  17.8k|#define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  562|  17.8k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  109|  17.8k|#define checkptr47(x)	(((uint64_t)(uintptr_t)(x) >> 47) == 0)
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  640|      0|#define LJ_64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  107|      0|#define checkptr31(x)	(((uint64_t)(uintptr_t)(x) >> 31) == 0)
  |  |  ------------------
  ------------------
  |  Branch (263:7): [True: 0, False: 17.8k]
  |  Branch (263:21): [True: 0, False: 17.8k]
  ------------------
  264|  17.8k|  memset(GG, 0, sizeof(GG_State));
  265|  17.8k|  L = &GG->L;
  266|  17.8k|  g = &GG->g;
  267|  17.8k|  L->gct = ~LJ_TTHREAD;
  ------------------
  |  |  266|  17.8k|#define LJ_TTHREAD		(~6u)
  ------------------
  268|  17.8k|  L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   17|  17.8k|#define LJ_GC_WHITE0	0x01
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   24|  17.8k|#define LJ_GC_FIXED	0x20
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   25|  17.8k|#define LJ_GC_SFIXED	0x40
  ------------------
  269|  17.8k|  L->dummy_ffid = FF_C;
  ------------------
  |  |  475|  17.8k|#define FF_C		1
  ------------------
  270|  17.8k|  setmref(L->glref, g);
  ------------------
  |  |   39|  17.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  271|  17.8k|  g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   17|  17.8k|#define LJ_GC_WHITE0	0x01
  ------------------
                g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   24|  17.8k|#define LJ_GC_FIXED	0x20
  ------------------
  272|  17.8k|  g->strempty.marked = LJ_GC_WHITE0;
  ------------------
  |  |   17|  17.8k|#define LJ_GC_WHITE0	0x01
  ------------------
  273|  17.8k|  g->strempty.gct = ~LJ_TSTR;
  ------------------
  |  |  264|  17.8k|#define LJ_TSTR			(~4u)
  ------------------
  274|  17.8k|  g->allocf = allocf;
  275|  17.8k|  g->allocd = allocd;
  276|  17.8k|  g->prng = prng;
  277|  17.8k|#ifndef LUAJIT_USE_SYSMALLOC
  278|  17.8k|  if (allocf == lj_alloc_f) {
  ------------------
  |  Branch (278:7): [True: 17.8k, False: 0]
  ------------------
  279|  17.8k|    lj_alloc_setprng(allocd, &g->prng);
  280|  17.8k|  }
  281|  17.8k|#endif
  282|  17.8k|  setgcref(g->mainthref, obj2gco(L));
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  283|  17.8k|  setgcref(g->uvhead.prev, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  284|  17.8k|  setgcref(g->uvhead.next, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  285|  17.8k|  g->str.mask = ~(MSize)0;
  286|  17.8k|  setnilV(registry(L));
  ------------------
  |  |  872|  17.8k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  287|  17.8k|  setnilV(&g->nilnode.val);
  ------------------
  |  |  872|  17.8k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  288|  17.8k|  setnilV(&g->nilnode.key);
  ------------------
  |  |  872|  17.8k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  289|       |#if !LJ_GC64
  290|       |  setmref(g->nilnode.freetop, &g->nilnode);
  291|       |#endif
  292|  17.8k|  lj_buf_init(NULL, &g->tmpbuf);
  293|  17.8k|  g->gc.state = GCSpause;
  294|  17.8k|  setgcref(g->gc.root, obj2gco(L));
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  295|  17.8k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|  17.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  296|  17.8k|  g->gc.total = sizeof(GG_State);
  297|  17.8k|  g->gc.pause = LUAI_GCPAUSE;
  ------------------
  |  |   93|  17.8k|#define LUAI_GCPAUSE	200	/* Pause GC until memory is at 200%. */
  ------------------
  298|  17.8k|  g->gc.stepmul = LUAI_GCMUL;
  ------------------
  |  |   94|  17.8k|#define LUAI_GCMUL	200	/* Run GC at 200% of allocation speed. */
  ------------------
  299|  17.8k|  lj_dispatch_init((GG_State *)L);
  300|  17.8k|  L->status = LUA_ERRERR+1;  /* Avoid touching the stack upon memory error. */
  ------------------
  |  |   48|  17.8k|#define LUA_ERRERR	5
  ------------------
  301|  17.8k|  if (lj_vm_cpcall(L, NULL, NULL, cpluaopen) != 0) {
  ------------------
  |  Branch (301:7): [True: 0, False: 17.8k]
  ------------------
  302|       |    /* Memory allocation error: free partial state. */
  303|      0|    close_state(L);
  304|      0|    return NULL;
  305|      0|  }
  306|  17.8k|  L->status = LUA_OK;
  ------------------
  |  |   43|  17.8k|#define LUA_OK		0
  ------------------
  307|  17.8k|  return L;
  308|  17.8k|}
lua_close:
  321|  17.8k|{
  322|  17.8k|  global_State *g = G(L);
  ------------------
  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  323|  17.8k|  int i;
  324|  17.8k|  L = mainthread(g);  /* Only the main thread can be closed. */
  ------------------
  |  |  665|  17.8k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  17.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  325|  17.8k|#if LJ_HASPROFILE
  326|  17.8k|  luaJIT_profile_stop(L);
  327|  17.8k|#endif
  328|  17.8k|  setgcrefnull(g->cur_L);
  ------------------
  |  |   76|  17.8k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  329|  17.8k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  17.8k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  330|  17.8k|  lj_gc_separateudata(g, 1);  /* Separate udata which have GC metamethods. */
  331|  17.8k|#if LJ_HASJIT
  332|  17.8k|  G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |  116|  17.8k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  17.8k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  17.8k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |   16|  17.8k|#define JIT_F_ON		0x00000001
  ------------------
  333|  17.8k|  G2J(g)->state = LJ_TRACE_IDLE;
  ------------------
  |  |  116|  17.8k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  17.8k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  17.8k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  334|  17.8k|  lj_dispatch_update(g);
  335|  17.8k|#endif
  336|  17.8k|  for (i = 0;;) {
  337|  17.8k|    hook_enter(g);
  ------------------
  |  |  679|  17.8k|#define hook_enter(g)		((g)->hookmask |= HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|  17.8k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  338|  17.8k|    L->status = LUA_OK;
  ------------------
  |  |   43|  17.8k|#define LUA_OK		0
  ------------------
  339|  17.8k|    L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  217|  17.8k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  569|  17.8k|#define LJ_FR2			1
  ------------------
  340|  17.8k|    L->cframe = NULL;
  341|  17.8k|    if (lj_vm_cpcall(L, NULL, NULL, cpfinalize) == LUA_OK) {
  ------------------
  |  |   43|  17.8k|#define LUA_OK		0
  ------------------
  |  Branch (341:9): [True: 17.8k, False: 0]
  ------------------
  342|  17.8k|      if (++i >= 10) break;
  ------------------
  |  Branch (342:11): [True: 0, False: 17.8k]
  ------------------
  343|  17.8k|      lj_gc_separateudata(g, 1);  /* Separate udata again. */
  344|  17.8k|      if (gcref(g->gc.mmudata) == NULL)  /* Until nothing is left to do. */
  ------------------
  |  |   67|  17.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (344:11): [True: 17.8k, False: 0]
  ------------------
  345|  17.8k|	break;
  346|  17.8k|    }
  347|  17.8k|  }
  348|  17.8k|  close_state(L);
  349|  17.8k|}
lj_state.c:resizestack:
   58|    588|{
   59|    588|  TValue *st, *oldst = tvref(L->stack);
  ------------------
  |  |  217|    588|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    588|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   60|    588|  ptrdiff_t delta;
   61|    588|  MSize oldsize = L->stacksize;
   62|    588|  MSize realsize = n + 1 + LJ_STACK_EXTRA;
  ------------------
  |  |   72|    588|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|    588|#define LJ_FR2			1
  |  |  ------------------
  ------------------
   63|    588|  GCobj *up;
   64|    588|  lj_assertL((MSize)(tvref(L->maxstack)-oldst) == L->stacksize-LJ_STACK_EXTRA-1,
  ------------------
  |  |  365|    588|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    588|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 588, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    588|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   65|    588|	     "inconsistent stack size");
   66|    588|  st = (TValue *)lj_mem_realloc(L, tvref(L->stack),
  ------------------
  |  |  217|    588|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    588|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   67|    588|				(MSize)(oldsize*sizeof(TValue)),
   68|    588|				(MSize)(realsize*sizeof(TValue)));
   69|    588|  setmref(L->stack, st);
  ------------------
  |  |   39|    588|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   70|    588|  delta = (char *)st - (char *)oldst;
   71|    588|  setmref(L->maxstack, st + n);
  ------------------
  |  |   39|    588|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   72|  41.2k|  while (oldsize < realsize)  /* Clear new slots. */
  ------------------
  |  Branch (72:10): [True: 40.6k, False: 588]
  ------------------
   73|  40.6k|    setnilV(st + oldsize++);
  ------------------
  |  |  872|  41.2k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   74|    588|  L->stacksize = realsize;
   75|    588|  if ((size_t)(mref(G(L)->jit_base, char) - (char *)oldst) < oldsize)
  ------------------
  |  |   36|    588|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (75:7): [True: 0, False: 588]
  ------------------
   76|      0|    setmref(G(L)->jit_base, mref(G(L)->jit_base, char) + delta);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   77|    588|  L->base = (TValue *)((char *)L->base + delta);
   78|    588|  L->top = (TValue *)((char *)L->top + delta);
   79|    588|  for (up = gcref(L->openupval); up != NULL; up = gcnext(up))
  ------------------
  |  |   67|    588|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                for (up = gcref(L->openupval); up != NULL; up = gcnext(up))
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (79:34): [True: 0, False: 588]
  ------------------
   80|      0|    setmref(gco2uv(up)->v, (TValue *)((char *)uvval(gco2uv(up)) + delta));
  ------------------
  |  |   39|    588|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  |  Branch (39:55): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   81|    588|}
lj_state.c:cpluaopen:
  186|  17.8k|{
  187|  17.8k|  global_State *g = G(L);
  ------------------
  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  188|  17.8k|  UNUSED(dummy);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  189|  17.8k|  UNUSED(ud);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  190|  17.8k|  stack_init(L, L);
  191|       |  /* NOBARRIER: State initialization, all objects are white. */
  192|  17.8k|  setgcref(L->env, obj2gco(lj_tab_new(L, 0, LJ_MIN_GLOBAL)));
  ------------------
  |  |   72|  17.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  193|  17.8k|  settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |  706|  17.8k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |   78|  17.8k|#define LJ_MIN_REGISTRY	2		/* Min. registry size (hbits). */
  ------------------
  194|  17.8k|  lj_str_init(L);
  195|  17.8k|  lj_meta_init(L);
  196|  17.8k|  lj_lex_init(L);
  197|  17.8k|  fixstring(lj_err_str(L, LJ_ERR_ERRMEM));  /* Preallocate memory error msg. */
  ------------------
  |  |   45|  17.8k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  17.8k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  198|  17.8k|  g->gc.threshold = 4*g->gc.total;
  199|  17.8k|#if LJ_HASFFI
  200|  17.8k|  lj_ctype_initfin(L);
  201|  17.8k|#endif
  202|  17.8k|  lj_trace_initstate(g);
  203|  17.8k|  lj_err_verify();
  204|  17.8k|  return NULL;
  205|  17.8k|}
lj_state.c:close_state:
  208|  17.8k|{
  209|  17.8k|  global_State *g = G(L);
  ------------------
  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  210|  17.8k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  17.8k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  211|  17.8k|  lj_gc_freeall(g);
  212|  17.8k|  lj_assertG(gcref(g->gc.root) == obj2gco(L),
  ------------------
  |  |  364|  17.8k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  213|  17.8k|	     "main thread is not first GC object");
  214|  17.8k|  lj_assertG(g->str.num == 0, "leaked %d strings", g->str.num);
  ------------------
  |  |  364|  17.8k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  215|  17.8k|  lj_trace_freestate(g);
  216|  17.8k|#if LJ_HASFFI
  217|  17.8k|  lj_ctype_freestate(g);
  218|  17.8k|#endif
  219|  17.8k|  lj_str_freetab(g);
  ------------------
  |  |   25|  17.8k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  17.8k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  220|  17.8k|  lj_buf_free(g, &g->tmpbuf);
  221|  17.8k|  lj_mem_freevec(g, tvref(L->stack), L->stacksize, TValue);
  ------------------
  |  |  130|  17.8k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  222|  17.8k|#if LJ_64
  223|  17.8k|  if (mref(g->gc.lightudseg, uint32_t)) {
  ------------------
  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:20): [True: 0, False: 17.8k]
  |  |  ------------------
  ------------------
  224|      0|    MSize segnum = g->gc.lightudnum ? (2 << lj_fls(g->gc.lightudnum)) : 2;
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (224:20): [True: 0, False: 0]
  ------------------
  225|      0|    lj_mem_freevec(g, mref(g->gc.lightudseg, uint32_t), segnum, uint32_t);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  226|      0|  }
  227|  17.8k|#endif
  228|  17.8k|  lj_assertG(g->gc.total == sizeof(GG_State),
  ------------------
  |  |  364|  17.8k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  17.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 17.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  17.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  229|  17.8k|	     "memory leak of %lld bytes",
  230|  17.8k|	     (long long)(g->gc.total - sizeof(GG_State)));
  231|  17.8k|#ifndef LUAJIT_USE_SYSMALLOC
  232|  17.8k|  if (g->allocf == lj_alloc_f)
  ------------------
  |  Branch (232:7): [True: 17.8k, False: 0]
  ------------------
  233|  17.8k|    lj_alloc_destroy(g->allocd);
  234|      0|  else
  235|      0|#endif
  236|      0|    g->allocf(g->allocd, G2GG(g), sizeof(GG_State), 0);
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  237|  17.8k|}
lj_state.c:cpfinalize:
  311|  17.8k|{
  312|  17.8k|  UNUSED(dummy);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  313|  17.8k|  UNUSED(ud);
  ------------------
  |  |   91|  17.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  314|  17.8k|  lj_gc_finalize_cdata(L);
  315|  17.8k|  lj_gc_finalize_udata(L);
  316|       |  /* Frame pop omitted. */
  317|  17.8k|  return NULL;
  318|  17.8k|}
lj_state.c:stack_init:
  169|  17.8k|{
  170|  17.8k|  TValue *stend, *st = lj_mem_newvec(L, LJ_STACK_START+LJ_STACK_EXTRA, TValue);
  ------------------
  |  |  125|  17.8k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  17.8k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  171|  17.8k|  setmref(L1->stack, st);
  ------------------
  |  |   39|  17.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  172|  17.8k|  L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   38|  17.8k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  17.8k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   72|  17.8k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  17.8k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  173|  17.8k|  stend = st + L1->stacksize;
  174|  17.8k|  setmref(L1->maxstack, stend - LJ_STACK_EXTRA - 1);
  ------------------
  |  |   39|  17.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  175|  17.8k|  setthreadV(L1, st++, L1);  /* Needed for curr_funcisL() on empty stack. */
  176|  17.8k|  if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  569|  17.8k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  872|  17.8k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  177|  17.8k|  L1->base = L1->top = st;
  178|   838k|  while (st < stend)  /* Clear new slots. */
  ------------------
  |  Branch (178:10): [True: 820k, False: 17.8k]
  ------------------
  179|   820k|    setnilV(st++);
  ------------------
  |  |  872|   820k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  180|  17.8k|}

lj_str_resize:
  139|  33.4k|{
  140|  33.4k|  global_State *g = G(L);
  ------------------
  |  |  705|  33.4k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  33.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  141|  33.4k|  GCRef *newtab, *oldtab = g->str.tab;
  142|  33.4k|  MSize i;
  143|       |
  144|       |  /* No resizing during GC traversal or if already too big. */
  145|  33.4k|  if (g->gc.state == GCSsweepstring || newmask >= LJ_MAX_STRTAB-1)
  ------------------
  |  |   58|  32.7k|#define LJ_MAX_STRTAB	(1<<26)		/* Max. string table size. */
  ------------------
  |  Branch (145:7): [True: 641, False: 32.7k]
  |  Branch (145:40): [True: 0, False: 32.7k]
  ------------------
  146|    641|    return;
  147|       |
  148|  32.7k|  newtab = lj_mem_newvec(L, newmask+1, GCRef);
  ------------------
  |  |  125|  32.7k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  32.7k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  149|  32.7k|  memset(newtab, 0, (newmask+1)*sizeof(GCRef));
  150|       |
  151|  32.7k|#if LUAJIT_SECURITY_STRHASH
  152|       |  /* Check which chains need secondary hashes. */
  153|  32.7k|  if (g->str.second) {
  ------------------
  |  Branch (153:7): [True: 0, False: 32.7k]
  ------------------
  154|      0|    int newsecond = 0;
  155|       |    /* Compute primary chain lengths. */
  156|      0|    for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (156:27): [True: 0, False: 0]
  ------------------
  157|      0|      GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  158|      0|      while (o) {
  ------------------
  |  Branch (158:14): [True: 0, False: 0]
  ------------------
  159|      0|	GCstr *s = gco2str(o);
  ------------------
  |  |  765|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  160|      0|	MSize hash = s->hashalg ? hash_sparse(g->str.seed, strdata(s), s->len) :
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (160:15): [True: 0, False: 0]
  ------------------
  161|      0|				  s->hash;
  162|      0|	hash &= newmask;
  163|      0|	setgcrefp(newtab[hash], gcrefu(newtab[hash]) + 1);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  164|      0|	o = gcnext(o);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  165|      0|      }
  166|      0|    }
  167|       |    /* Mark secondary chains. */
  168|      0|    for (i = newmask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (168:23): [True: 0, False: 0]
  ------------------
  169|      0|      int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
                    int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |  135|      0|#define LJ_STR_MAXCOLL		32
  ------------------
  170|      0|      newsecond |= secondary;
  171|      0|      setgcrefp(newtab[i], secondary);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  172|      0|    }
  173|      0|    g->str.second = newsecond;
  174|      0|  }
  175|  32.7k|#endif
  176|       |
  177|       |  /* Reinsert all strings from the old table into the new table. */
  178|  3.86M|  for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (178:25): [True: 3.82M, False: 32.7k]
  ------------------
  179|  3.82M|    GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|  3.82M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  180|  7.67M|    while (o) {
  ------------------
  |  Branch (180:12): [True: 3.84M, False: 3.82M]
  ------------------
  181|  3.84M|      GCobj *next = gcnext(o);
  ------------------
  |  |   90|  3.84M|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  3.84M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  182|  3.84M|      GCstr *s = gco2str(o);
  ------------------
  |  |  765|  3.84M|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  3.84M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.84M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.84M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.84M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.84M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|      MSize hash = s->hash;
  184|  3.84M|#if LUAJIT_SECURITY_STRHASH
  185|  3.84M|      uintptr_t u;
  186|  3.84M|      if (LJ_LIKELY(!s->hashalg)) {  /* String hashed with primary hash. */
  ------------------
  |  |  145|  3.84M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 3.84M, False: 0]
  |  |  ------------------
  ------------------
  187|  3.84M|	hash &= newmask;
  188|  3.84M|	u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|  3.84M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  189|  3.84M|	if (LJ_UNLIKELY(u & 1)) {  /* Switch string to secondary hash. */
  ------------------
  |  |  146|  3.84M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 3.84M]
  |  |  ------------------
  ------------------
  190|      0|	  s->hash = hash = hash_dense(g->str.seed, s->hash, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  191|      0|	  s->hashalg = 1;
  192|      0|	  hash &= newmask;
  193|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  194|      0|	}
  195|  3.84M|      } else {  /* String hashed with secondary hash. */
  196|      0|	MSize shash = hash_sparse(g->str.seed, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  197|      0|	u = gcrefu(newtab[shash & newmask]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  198|      0|	if (u & 1) {
  ------------------
  |  Branch (198:6): [True: 0, False: 0]
  ------------------
  199|      0|	  hash &= newmask;
  200|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  201|      0|	} else {  /* Revert string back to primary hash. */
  202|      0|	  s->hash = shash;
  203|      0|	  s->hashalg = 0;
  204|      0|	  hash = (shash & newmask);
  205|      0|	}
  206|      0|      }
  207|       |      /* NOBARRIER: The string table is a GC root. */
  208|  3.84M|      setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  3.84M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  209|  3.84M|      setgcrefp(newtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|  3.84M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  210|       |#else
  211|       |      hash &= newmask;
  212|       |      /* NOBARRIER: The string table is a GC root. */
  213|       |      setgcrefr(o->gch.nextgc, newtab[hash]);
  214|       |      setgcref(newtab[hash], o);
  215|       |#endif
  216|  3.84M|      o = next;
  217|  3.84M|    }
  218|  3.82M|  }
  219|       |
  220|       |  /* Free old table and replace with new table. */
  221|  32.7k|  lj_str_freetab(g);
  ------------------
  |  |   25|  32.7k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  32.7k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  222|  32.7k|  g->str.tab = newtab;
  223|  32.7k|  g->str.mask = newmask;
  224|  32.7k|}
lj_str_new:
  324|  8.96M|{
  325|  8.96M|  global_State *g = G(L);
  ------------------
  |  |  705|  8.96M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  8.96M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  326|  8.96M|  if (lenx-1 < LJ_MAX_STR-1) {
  ------------------
  |  |   54|  8.96M|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|  8.96M|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (326:7): [True: 8.78M, False: 178k]
  ------------------
  327|  8.78M|    MSize len = (MSize)lenx;
  328|  8.78M|    StrHash hash = hash_sparse(g->str.seed, str, len);
  329|  8.78M|    MSize coll = 0;
  330|  8.78M|    int hashalg = 0;
  331|       |    /* Check if the string has already been interned. */
  332|  8.78M|    GCobj *o = gcref(g->str.tab[hash & g->str.mask]);
  ------------------
  |  |   67|  8.78M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  333|  8.78M|#if LUAJIT_SECURITY_STRHASH
  334|  8.78M|    if (LJ_UNLIKELY((uintptr_t)o & 1)) {  /* Secondary hash for this chain? */
  ------------------
  |  |  146|  8.78M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 8.78M]
  |  |  ------------------
  ------------------
  335|      0|      hashalg = 1;
  336|      0|      hash = hash_dense(g->str.seed, hash, str, len);
  337|      0|      o = (GCobj *)(gcrefu(g->str.tab[hash & g->str.mask]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  338|      0|    }
  339|  8.78M|#endif
  340|  12.4M|    while (o != NULL) {
  ------------------
  |  Branch (340:12): [True: 6.65M, False: 5.78M]
  ------------------
  341|  6.65M|      GCstr *sx = gco2str(o);
  ------------------
  |  |  765|  6.65M|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  6.65M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  6.65M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  6.65M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 6.65M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  6.65M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  342|  6.65M|      if (sx->hash == hash && sx->len == len) {
  ------------------
  |  Branch (342:11): [True: 3.00M, False: 3.65M]
  |  Branch (342:31): [True: 3.00M, False: 149]
  ------------------
  343|  3.00M|	if (memcmp(str, strdata(sx), len) == 0) {
  ------------------
  |  |  316|  3.00M|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (343:6): [True: 3.00M, False: 418]
  ------------------
  344|  3.00M|	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   37|  3.00M|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|  3.00M|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  3.00M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  3.00M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  3.00M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  3.00M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  3.00M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  3.00M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 525, False: 3.00M]
  |  |  ------------------
  ------------------
              	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   43|    525|#define flipwhite(x)	((x)->gch.marked ^= LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|    525|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|    525|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|    525|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  345|  3.00M|	  return sx;  /* Return existing string. */
  346|  3.00M|	}
  347|    418|	coll++;
  348|    418|      }
  349|  3.65M|      coll++;
  350|  3.65M|      o = gcnext(o);
  ------------------
  |  |   90|  3.65M|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  3.65M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  351|  3.65M|    }
  352|  5.78M|#if LUAJIT_SECURITY_STRHASH
  353|       |    /* Rehash chain if there are too many collisions. */
  354|  5.78M|    if (LJ_UNLIKELY(coll > LJ_STR_MAXCOLL) && !hashalg) {
  ------------------
  |  |  146|  11.5M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 5.78M]
  |  |  ------------------
  ------------------
  |  Branch (354:47): [True: 0, False: 0]
  ------------------
  355|      0|      return lj_str_rehash_chain(L, hash, str, len);
  356|      0|    }
  357|  5.78M|#endif
  358|       |    /* Otherwise allocate a new string. */
  359|  5.78M|    return lj_str_alloc(L, str, len, hash, hashalg);
  360|  5.78M|  } else {
  361|   178k|    if (lenx)
  ------------------
  |  Branch (361:9): [True: 0, False: 178k]
  ------------------
  362|      0|      lj_err_msg(L, LJ_ERR_STROV);
  363|   178k|    return &g->strempty;
  364|   178k|  }
  365|  8.96M|}
lj_str_free:
  368|  5.78M|{
  369|  5.78M|  g->str.num--;
  370|  5.78M|  lj_mem_free(g, s, lj_str_size(s->len));
  ------------------
  |  |   29|  5.78M|#define lj_str_size(len)	(sizeof(GCstr) + (((len)+4) & ~(MSize)3))
  ------------------
  371|  5.78M|}
lj_str_init:
  374|  17.8k|{
  375|  17.8k|  global_State *g = G(L);
  ------------------
  |  |  705|  17.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  17.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  376|  17.8k|  g->str.seed = lj_prng_u64(&g->prng);
  377|  17.8k|  lj_str_resize(L, LJ_MIN_STRTAB-1);
  ------------------
  |  |   79|  17.8k|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  378|  17.8k|}
lj_str.c:hash_sparse:
   86|  8.78M|{
   87|       |  /* Constants taken from lookup3 hash by Bob Jenkins. */
   88|  8.78M|  StrHash a, b, h = len ^ (StrHash)seed;
   89|  8.78M|  if (len >= 4) {  /* Caveat: unaligned access! */
  ------------------
  |  Branch (89:7): [True: 6.82M, False: 1.95M]
  ------------------
   90|  6.82M|    a = lj_getu32(str);
   91|  6.82M|    h ^= lj_getu32(str+len-4);
   92|  6.82M|    b = lj_getu32(str+(len>>1)-2);
   93|  6.82M|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  6.82M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   94|  6.82M|    b += lj_getu32(str+(len>>2)-1);
   95|  6.82M|  } else {
   96|  1.95M|    a = *(const uint8_t *)str;
   97|  1.95M|    h ^= *(const uint8_t *)(str+len-1);
   98|  1.95M|    b = *(const uint8_t *)(str+(len>>1));
   99|  1.95M|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  1.95M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  100|  1.95M|  }
  101|  8.78M|  a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|  8.78M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  102|  8.78M|  b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|  8.78M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  103|  8.78M|  h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|  8.78M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  104|  8.78M|  return h;
  105|  8.78M|}
lj_str.c:lj_str_alloc:
  286|  5.78M|{
  287|  5.78M|  GCstr *s = lj_mem_newt(L, lj_str_size(len), GCstr);
  ------------------
  |  |  133|  5.78M|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  5.78M|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  288|  5.78M|  global_State *g = G(L);
  ------------------
  |  |  705|  5.78M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  5.78M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|  5.78M|  uintptr_t u;
  290|  5.78M|  newwhite(g, s);
  ------------------
  |  |   40|  5.78M|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|  5.78M|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  5.78M|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  5.78M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  5.78M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  5.78M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  291|  5.78M|  s->gct = ~LJ_TSTR;
  ------------------
  |  |  264|  5.78M|#define LJ_TSTR			(~4u)
  ------------------
  292|  5.78M|  s->len = len;
  293|  5.78M|  s->hash = hash;
  294|       |#ifndef STRID_RESEED_INTERVAL
  295|       |  s->sid = g->str.id++;
  296|       |#elif STRID_RESEED_INTERVAL
  297|  5.78M|  if (!g->str.idreseed--) {
  ------------------
  |  Branch (297:7): [True: 56.8k, False: 5.72M]
  ------------------
  298|  56.8k|    uint64_t r = lj_prng_u64(&g->prng);
  299|  56.8k|    g->str.id = (StrID)r;
  300|  56.8k|    g->str.idreseed = (uint8_t)(r >> (64 - STRID_RESEED_INTERVAL));
  ------------------
  |  |  276|  56.8k|#define STRID_RESEED_INTERVAL	8
  ------------------
  301|  56.8k|  }
  302|  5.78M|  s->sid = g->str.id++;
  303|       |#else
  304|       |  s->sid = (StrID)lj_prng_u64(&g->prng);
  305|       |#endif
  306|  5.78M|  s->reserved = 0;
  307|  5.78M|  s->hashalg = (uint8_t)hashalg;
  308|       |  /* Clear last 4 bytes of allocated memory. Implies zero-termination, too. */
  309|  5.78M|  *(uint32_t *)(strdatawr(s)+(len & ~(MSize)3)) = 0;
  ------------------
  |  |  317|  5.78M|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  310|  5.78M|  memcpy(strdatawr(s), str, len);
  ------------------
  |  |  317|  5.78M|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  311|       |  /* Add to string hash table. */
  312|  5.78M|  hash &= g->str.mask;
  313|  5.78M|  u = gcrefu(g->str.tab[hash]);
  ------------------
  |  |   69|  5.78M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  314|  5.78M|  setgcrefp(s->nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  5.78M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  315|       |  /* NOBARRIER: The string table is a GC root. */
  316|  5.78M|  setgcrefp(g->str.tab[hash], ((uintptr_t)s | (u & 1)));
  ------------------
  |  |   75|  5.78M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  317|  5.78M|  if (g->str.num++ > g->str.mask)  /* Allow a 100% load factor. */
  ------------------
  |  Branch (317:7): [True: 15.6k, False: 5.76M]
  ------------------
  318|  15.6k|    lj_str_resize(L, (g->str.mask<<1)+1);  /* Grow string table. */
  319|  5.78M|  return s;  /* Return newly interned string. */
  320|  5.78M|}

lj_strfmt_parse:
   35|   231k|{
   36|   231k|  const uint8_t *p = fs->p, *e = fs->e;
   37|   231k|  fs->str = (const char *)p;
   38|   767k|  for (; p < e; p++) {
  ------------------
  |  Branch (38:10): [True: 687k, False: 80.3k]
  ------------------
   39|   687k|    if (*p == '%') {  /* Escape char? */
  ------------------
  |  Branch (39:9): [True: 151k, False: 535k]
  ------------------
   40|   151k|      if (p[1] == '%') {  /* '%%'? */
  ------------------
  |  Branch (40:11): [True: 0, False: 151k]
  ------------------
   41|      0|	fs->p = ++p+1;
   42|      0|	goto retlit;
   43|   151k|      } else {
   44|   151k|	SFormat sf = 0;
   45|   151k|	uint32_t c;
   46|   151k|	if (p != (const uint8_t *)fs->str)
  ------------------
  |  Branch (46:6): [True: 56.3k, False: 95.0k]
  ------------------
   47|  56.3k|	  break;
   48|  95.0k|	for (p++; (uint32_t)*p - ' ' <= (uint32_t)('0' - ' '); p++) {
  ------------------
  |  Branch (48:12): [True: 0, False: 95.0k]
  ------------------
   49|       |	  /* Parse flags. */
   50|      0|	  if (*p == '-') sf |= STRFMT_F_LEFT;
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (50:8): [True: 0, False: 0]
  ------------------
   51|      0|	  else if (*p == '+') sf |= STRFMT_F_PLUS;
  ------------------
  |  |   38|      0|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (51:13): [True: 0, False: 0]
  ------------------
   52|      0|	  else if (*p == '0') sf |= STRFMT_F_ZERO;
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (52:13): [True: 0, False: 0]
  ------------------
   53|      0|	  else if (*p == ' ') sf |= STRFMT_F_SPACE;
  ------------------
  |  |   40|      0|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (53:13): [True: 0, False: 0]
  ------------------
   54|      0|	  else if (*p == '#') sf |= STRFMT_F_ALT;
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (54:13): [True: 0, False: 0]
  ------------------
   55|      0|	  else break;
   56|      0|	}
   57|  95.0k|	if ((uint32_t)*p - '0' < 10) {  /* Parse width. */
  ------------------
  |  Branch (57:6): [True: 0, False: 95.0k]
  ------------------
   58|      0|	  uint32_t width = (uint32_t)*p++ - '0';
   59|      0|	  if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (59:8): [True: 0, False: 0]
  ------------------
   60|      0|	    width = (uint32_t)*p++ - '0' + width*10;
   61|      0|	  sf |= (width << STRFMT_SH_WIDTH);
  ------------------
  |  |   45|      0|#define STRFMT_SH_WIDTH	16
  ------------------
   62|      0|	}
   63|  95.0k|	if (*p == '.') {  /* Parse precision. */
  ------------------
  |  Branch (63:6): [True: 0, False: 95.0k]
  ------------------
   64|      0|	  uint32_t prec = 0;
   65|      0|	  p++;
   66|      0|	  if ((uint32_t)*p - '0' < 10) {
  ------------------
  |  Branch (66:8): [True: 0, False: 0]
  ------------------
   67|      0|	    prec = (uint32_t)*p++ - '0';
   68|      0|	    if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (68:10): [True: 0, False: 0]
  ------------------
   69|      0|	      prec = (uint32_t)*p++ - '0' + prec*10;
   70|      0|	  }
   71|      0|	  sf |= ((prec+1) << STRFMT_SH_PREC);
  ------------------
  |  |   46|      0|#define STRFMT_SH_PREC	24
  ------------------
   72|      0|	}
   73|       |	/* Parse conversion. */
   74|  95.0k|	c = (uint32_t)*p - 'A';
   75|  95.0k|	if (LJ_LIKELY(c <= (uint32_t)('x' - 'A'))) {
  ------------------
  |  |  145|  95.0k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 95.0k, False: 0]
  |  |  ------------------
  ------------------
   76|  95.0k|	  uint32_t sx = strfmt_map[c];
   77|  95.0k|	  if (sx) {
  ------------------
  |  Branch (77:8): [True: 95.0k, False: 0]
  ------------------
   78|  95.0k|	    fs->p = p+1;
   79|  95.0k|	    return (sf | sx | ((c & 0x20) ? 0 : STRFMT_F_UPPER));
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (79:25): [True: 95.0k, False: 0]
  ------------------
   80|  95.0k|	  }
   81|  95.0k|	}
   82|       |	/* Return error location. */
   83|      0|	if (*p >= 32) p++;
  ------------------
  |  Branch (83:6): [True: 0, False: 0]
  ------------------
   84|      0|	fs->len = (MSize)(p - (const uint8_t *)fs->str);
   85|      0|	fs->p = fs->e;
   86|      0|	return STRFMT_ERR;
   87|  95.0k|      }
   88|   151k|    }
   89|   687k|  }
   90|   136k|  fs->p = p;
   91|   136k|retlit:
   92|   136k|  fs->len = (MSize)(p - (const uint8_t *)fs->str);
   93|   136k|  return fs->len ? STRFMT_LIT : STRFMT_EOF;
  ------------------
  |  Branch (93:10): [True: 83.9k, False: 52.7k]
  ------------------
   94|   136k|}
lj_strfmt_wuleb128:
  161|  38.7k|{
  162|  41.4k|  for (; v >= 0x80; v >>= 7)
  ------------------
  |  Branch (162:10): [True: 2.78k, False: 38.7k]
  ------------------
  163|  2.78k|    *p++ = (char)((v & 0x7f) | 0x80);
  164|  38.7k|  *p++ = (char)v;
  165|  38.7k|  return p;
  166|  38.7k|}
lj_strfmt_putfxint:
  285|  20.4k|{
  286|  20.4k|  char buf[STRFMT_MAXBUF_XINT], *q = buf + sizeof(buf), *w;
  287|  20.4k|#ifdef LUA_USE_ASSERT
  288|  20.4k|  char *ws;
  289|  20.4k|#endif
  290|  20.4k|  MSize prefix = 0, len, prec, pprec, width, need;
  291|       |
  292|       |  /* Figure out signed prefixes. */
  293|  20.4k|  if (STRFMT_TYPE(sf) == STRFMT_INT) {
  ------------------
  |  |   48|  20.4k|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  |  Branch (293:7): [True: 20.4k, False: 0]
  ------------------
  294|  20.4k|    if ((int64_t)k < 0) {
  ------------------
  |  Branch (294:9): [True: 0, False: 20.4k]
  ------------------
  295|      0|      k = ~k+1u;
  296|      0|      prefix = 256 + '-';
  297|  20.4k|    } else if ((sf & STRFMT_F_PLUS)) {
  ------------------
  |  |   38|  20.4k|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (297:16): [True: 0, False: 20.4k]
  ------------------
  298|      0|      prefix = 256 + '+';
  299|  20.4k|    } else if ((sf & STRFMT_F_SPACE)) {
  ------------------
  |  |   40|  20.4k|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (299:16): [True: 0, False: 20.4k]
  ------------------
  300|      0|      prefix = 256 + ' ';
  301|      0|    }
  302|  20.4k|  }
  303|       |
  304|       |  /* Convert number and store to fixed-size buffer in reverse order. */
  305|  20.4k|  prec = STRFMT_PREC(sf);
  ------------------
  |  |   50|  20.4k|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|  20.4k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  306|  20.4k|  if ((int32_t)prec >= 0) sf &= ~STRFMT_F_ZERO;
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (306:7): [True: 0, False: 20.4k]
  ------------------
  307|  20.4k|  if (k == 0) {  /* Special-case zero argument. */
  ------------------
  |  Branch (307:7): [True: 0, False: 20.4k]
  ------------------
  308|      0|    if (prec != 0 ||
  ------------------
  |  Branch (308:9): [True: 0, False: 0]
  ------------------
  309|      0|	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   29|      0|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   29|      0|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (309:2): [True: 0, False: 0]
  ------------------
  310|      0|      *--q = '0';
  311|  20.4k|  } else if (!(sf & (STRFMT_T_HEX|STRFMT_T_OCT))) {  /* Decimal. */
  ------------------
  |  |   28|  20.4k|#define STRFMT_T_HEX	0x0010	/* STRFMT_UINT */
  ------------------
                } else if (!(sf & (STRFMT_T_HEX|STRFMT_T_OCT))) {  /* Decimal. */
  ------------------
  |  |   29|  20.4k|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
  |  Branch (311:14): [True: 20.4k, False: 0]
  ------------------
  312|  20.4k|    uint32_t k2;
  313|  20.4k|    while ((k >> 32)) { *--q = (char)('0' + k % 10); k /= 10; }
  ------------------
  |  Branch (313:12): [True: 0, False: 20.4k]
  ------------------
  314|  20.4k|    k2 = (uint32_t)k;
  315|  27.6k|    do { *--q = (char)('0' + k2 % 10); k2 /= 10; } while (k2);
  ------------------
  |  Branch (315:59): [True: 7.24k, False: 20.4k]
  ------------------
  316|  20.4k|  } else if ((sf & STRFMT_T_HEX)) {  /* Hex. */
  ------------------
  |  |   28|      0|#define STRFMT_T_HEX	0x0010	/* STRFMT_UINT */
  ------------------
  |  Branch (316:14): [True: 0, False: 0]
  ------------------
  317|      0|    const char *hexdig = (sf & STRFMT_F_UPPER) ? "0123456789ABCDEF" :
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (317:26): [True: 0, False: 0]
  ------------------
  318|      0|						 "0123456789abcdef";
  319|      0|    do { *--q = hexdig[(k & 15)]; k >>= 4; } while (k);
  ------------------
  |  Branch (319:53): [True: 0, False: 0]
  ------------------
  320|      0|    if ((sf & STRFMT_F_ALT)) prefix = 512 + ((sf & STRFMT_F_UPPER) ? 'X' : 'x');
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
                  if ((sf & STRFMT_F_ALT)) prefix = 512 + ((sf & STRFMT_F_UPPER) ? 'X' : 'x');
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (320:9): [True: 0, False: 0]
  |  Branch (320:46): [True: 0, False: 0]
  ------------------
  321|      0|  } else {  /* Octal. */
  322|      0|    do { *--q = (char)('0' + (uint32_t)(k & 7)); k >>= 3; } while (k);
  ------------------
  |  Branch (322:68): [True: 0, False: 0]
  ------------------
  323|      0|    if ((sf & STRFMT_F_ALT)) *--q = '0';
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (323:9): [True: 0, False: 0]
  ------------------
  324|      0|  }
  325|       |
  326|       |  /* Calculate sizes. */
  327|  20.4k|  len = (MSize)(buf + sizeof(buf) - q);
  328|  20.4k|  if ((int32_t)len >= (int32_t)prec) prec = len;
  ------------------
  |  Branch (328:7): [True: 20.4k, False: 0]
  ------------------
  329|  20.4k|  width = STRFMT_WIDTH(sf);
  ------------------
  |  |   49|  20.4k|#define STRFMT_WIDTH(sf)	(((sf) >> STRFMT_SH_WIDTH) & 255u)
  |  |  ------------------
  |  |  |  |   45|  20.4k|#define STRFMT_SH_WIDTH	16
  |  |  ------------------
  ------------------
  330|  20.4k|  pprec = prec + (prefix >> 8);
  331|  20.4k|  need = width > pprec ? width : pprec;
  ------------------
  |  Branch (331:10): [True: 0, False: 20.4k]
  ------------------
  332|  20.4k|  w = lj_buf_more(sb, need);
  333|  20.4k|#ifdef LUA_USE_ASSERT
  334|  20.4k|  ws = w;
  335|  20.4k|#endif
  336|       |
  337|       |  /* Format number with leading/trailing whitespace and zeros. */
  338|  20.4k|  if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == 0)
  ------------------
  |  |   37|  20.4k|#define STRFMT_F_LEFT	0x0100
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == 0)
  ------------------
  |  |   39|  20.4k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (338:7): [True: 20.4k, False: 0]
  ------------------
  339|  20.4k|    while (width-- > pprec) *w++ = ' ';
  ------------------
  |  Branch (339:12): [True: 0, False: 20.4k]
  ------------------
  340|  20.4k|  if (prefix) {
  ------------------
  |  Branch (340:7): [True: 0, False: 20.4k]
  ------------------
  341|      0|    if ((char)prefix >= 'X') *w++ = '0';
  ------------------
  |  Branch (341:9): [True: 0, False: 0]
  ------------------
  342|      0|    *w++ = (char)prefix;
  343|      0|  }
  344|  20.4k|  if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   37|  20.4k|#define STRFMT_F_LEFT	0x0100
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   39|  20.4k|#define STRFMT_F_ZERO	0x0400
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   39|  20.4k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (344:7): [True: 0, False: 20.4k]
  ------------------
  345|      0|    while (width-- > pprec) *w++ = '0';
  ------------------
  |  Branch (345:12): [True: 0, False: 0]
  ------------------
  346|  20.4k|  while (prec-- > len) *w++ = '0';
  ------------------
  |  Branch (346:10): [True: 0, False: 20.4k]
  ------------------
  347|  48.1k|  while (q < buf + sizeof(buf)) *w++ = *q++;  /* Add number itself. */
  ------------------
  |  Branch (347:10): [True: 27.6k, False: 20.4k]
  ------------------
  348|  20.4k|  if ((sf & STRFMT_F_LEFT))
  ------------------
  |  |   37|  20.4k|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (348:7): [True: 0, False: 20.4k]
  ------------------
  349|      0|    while (width-- > pprec) *w++ = ' ';
  ------------------
  |  Branch (349:12): [True: 0, False: 0]
  ------------------
  350|       |
  351|  20.4k|  lj_assertX(need == (MSize)(w - ws), "miscalculated format size");
  ------------------
  |  |  366|  20.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  20.4k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 20.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  20.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  352|  20.4k|  sb->w = w;
  353|  20.4k|  return sb;
  354|  20.4k|}
lj_strfmt_pushvf:
  556|  52.7k|{
  557|  52.7k|  SBuf *sb = lj_buf_tmp_(L);
  558|  52.7k|  FormatState fs;
  559|  52.7k|  SFormat sf;
  560|  52.7k|  GCstr *str;
  561|  52.7k|  lj_strfmt_init(&fs, fmt, (MSize)strlen(fmt));
  562|   231k|  while ((sf = lj_strfmt_parse(&fs)) != STRFMT_EOF) {
  ------------------
  |  Branch (562:10): [True: 178k, False: 52.7k]
  ------------------
  563|   178k|    switch (STRFMT_TYPE(sf)) {
  ------------------
  |  |   48|   178k|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  564|  83.9k|    case STRFMT_LIT:
  ------------------
  |  Branch (564:5): [True: 83.9k, False: 95.0k]
  ------------------
  565|  83.9k|      lj_buf_putmem(sb, fs.str, fs.len);
  566|  83.9k|      break;
  567|  20.4k|    case STRFMT_INT:
  ------------------
  |  Branch (567:5): [True: 20.4k, False: 158k]
  ------------------
  568|  20.4k|      lj_strfmt_putfxint(sb, sf, va_arg(argp, int32_t));
  569|  20.4k|      break;
  570|      0|    case STRFMT_UINT:
  ------------------
  |  Branch (570:5): [True: 0, False: 178k]
  ------------------
  571|      0|      lj_strfmt_putfxint(sb, sf, va_arg(argp, uint32_t));
  572|      0|      break;
  573|      0|    case STRFMT_NUM:
  ------------------
  |  Branch (573:5): [True: 0, False: 178k]
  ------------------
  574|      0|      lj_strfmt_putfnum(sb, STRFMT_G14, va_arg(argp, lua_Number));
  ------------------
  |  |   67|      0|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|      0|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      0|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  575|      0|      break;
  576|  66.9k|    case STRFMT_STR: {
  ------------------
  |  Branch (576:5): [True: 66.9k, False: 112k]
  ------------------
  577|  66.9k|      const char *s = va_arg(argp, char *);
  578|  66.9k|      if (s == NULL) s = "(null)";
  ------------------
  |  Branch (578:11): [True: 0, False: 66.9k]
  ------------------
  579|  66.9k|      lj_buf_putmem(sb, s, (MSize)strlen(s));
  580|  66.9k|      break;
  581|      0|      }
  582|  7.65k|    case STRFMT_CHAR:
  ------------------
  |  Branch (582:5): [True: 7.65k, False: 171k]
  ------------------
  583|  7.65k|      lj_buf_putb(sb, va_arg(argp, int));
  584|  7.65k|      break;
  585|      0|    case STRFMT_PTR:
  ------------------
  |  Branch (585:5): [True: 0, False: 178k]
  ------------------
  586|      0|      lj_strfmt_putptr(sb, va_arg(argp, void *));
  587|      0|      break;
  588|      0|    case STRFMT_ERR:
  ------------------
  |  Branch (588:5): [True: 0, False: 178k]
  ------------------
  589|      0|    default:
  ------------------
  |  Branch (589:5): [True: 0, False: 178k]
  ------------------
  590|      0|      lj_buf_putb(sb, '?');
  591|      0|      lj_assertL(0, "bad string format near offset %d", fs.len);
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  592|      0|      break;
  593|   178k|    }
  594|   178k|  }
  595|  52.7k|  str = lj_buf_str(L, sb);
  596|  52.7k|  setstrV(L, L->top, str);
  597|  52.7k|  incr_top(L);
  ------------------
  |  |   12|  52.7k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   105k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  52.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 29, False: 52.7k]
  |  |  |  Branch (12:38): [True: 0, False: 29]
  |  |  ------------------
  ------------------
  598|  52.7k|  return strdata(str);
  ------------------
  |  |  316|  52.7k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  599|  52.7k|}
lj_strfmt_pushf:
  603|  38.7k|{
  604|  38.7k|  const char *msg;
  605|  38.7k|  va_list argp;
  606|  38.7k|  va_start(argp, fmt);
  607|  38.7k|  msg = lj_strfmt_pushvf(L, fmt, argp);
  608|  38.7k|  va_end(argp);
  609|  38.7k|  return msg;
  610|  38.7k|}

lj_strfmt.c:lj_strfmt_init:
   79|  52.7k|{
   80|  52.7k|  fs->p = (const uint8_t *)p;
   81|  52.7k|  fs->e = (const uint8_t *)p + len;
   82|       |  /* Must be NUL-terminated. May have NULs inside, too. */
   83|  52.7k|  lj_assertX(*fs->e == 0, "format not NUL-terminated");
  ------------------
  |  |  366|  52.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  52.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 52.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  52.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|  52.7k|}

lj_strscan_scan:
  377|   163k|{
  378|   163k|  int32_t neg = 0;
  379|   163k|  const uint8_t *pe = p + len;
  380|       |
  381|       |  /* Remove leading space, parse sign and non-numbers. */
  382|   163k|  if (LJ_UNLIKELY(!lj_char_isdigit(*p))) {
  ------------------
  |  |  146|   163k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 183, False: 163k]
  |  |  ------------------
  ------------------
  383|    183|    while (lj_char_isspace(*p)) p++;
  384|    183|    if (*p == '+' || *p == '-') neg = (*p++ == '-');
  ------------------
  |  Branch (384:9): [True: 0, False: 183]
  |  Branch (384:22): [True: 0, False: 183]
  ------------------
  385|    183|    if (LJ_UNLIKELY(*p >= 'A')) {  /* Parse "inf", "infinity" or "nan". */
  ------------------
  |  |  146|    183|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 183]
  |  |  ------------------
  ------------------
  386|      0|      TValue tmp;
  387|      0|      setnanV(&tmp);
  ------------------
  |  |  946|      0|#define setnanV(o)		((o)->u64 = U64x(fff80000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  388|      0|      if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  389|      0|	if (neg) setminfV(&tmp); else setpinfV(&tmp);
  ------------------
  |  |  948|      0|#define setminfV(o)		((o)->u64 = U64x(fff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
              	if (neg) setminfV(&tmp); else setpinfV(&tmp);
  ------------------
  |  |  947|      0|#define setpinfV(o)		((o)->u64 = U64x(7ff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (389:6): [True: 0, False: 0]
  ------------------
  390|      0|	p += 3;
  391|      0|	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  392|      0|	    casecmp(p[3],'t') && casecmp(p[4],'y')) p += 5;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	    casecmp(p[3],'t') && casecmp(p[4],'y')) p += 5;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  393|      0|      } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  394|      0|	p += 3;
  395|      0|      }
  396|      0|      while (lj_char_isspace(*p)) p++;
  397|      0|      if (*p || p < pe) return STRSCAN_ERROR;
  ------------------
  |  Branch (397:11): [True: 0, False: 0]
  |  Branch (397:17): [True: 0, False: 0]
  ------------------
  398|      0|      o->u64 = tmp.u64;
  399|      0|      return STRSCAN_NUM;
  400|      0|    }
  401|    183|  }
  402|       |
  403|       |  /* Parse regular number. */
  404|   163k|  {
  405|   163k|    StrScanFmt fmt = STRSCAN_INT;
  406|   163k|    int cmask = LJ_CHAR_DIGIT;
  ------------------
  |  |   14|   163k|#define LJ_CHAR_DIGIT	0x08
  ------------------
  407|   163k|    int base = (opt & STRSCAN_OPT_C) && *p == '0' ? 0 : 10;
  ------------------
  |  |   16|   163k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (407:16): [True: 217, False: 163k]
  |  Branch (407:41): [True: 90, False: 127]
  ------------------
  408|   163k|    const uint8_t *sp, *dp = NULL;
  409|   163k|    uint32_t dig = 0, hasdig = 0, x = 0;
  410|   163k|    int32_t ex = 0;
  411|       |
  412|       |    /* Determine base and skip leading zeros. */
  413|   163k|    if (LJ_UNLIKELY(*p <= '0')) {
  ------------------
  |  |  146|   163k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 37.0k, False: 126k]
  |  |  ------------------
  ------------------
  414|  37.0k|      if (*p == '0') {
  ------------------
  |  Branch (414:11): [True: 36.8k, False: 183]
  ------------------
  415|  36.8k|	if (casecmp(p[1], 'x'))
  ------------------
  |  |   73|  36.8k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 1.26k, False: 35.6k]
  |  |  ------------------
  ------------------
  416|  1.26k|	  base = 16, cmask = LJ_CHAR_XDIGIT, p += 2;
  ------------------
  |  |   15|  1.26k|#define LJ_CHAR_XDIGIT	0x10
  ------------------
  417|  35.6k|	else if (casecmp(p[1], 'b'))
  ------------------
  |  |   73|  35.6k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 1.08k, False: 34.5k]
  |  |  ------------------
  ------------------
  418|  1.08k|	  base = 2, cmask = LJ_CHAR_DIGIT, p += 2;
  ------------------
  |  |   14|  1.08k|#define LJ_CHAR_DIGIT	0x08
  ------------------
  419|  36.8k|      }
  420|   229k|      for ( ; ; p++) {
  421|   229k|	if (*p == '0') {
  ------------------
  |  Branch (421:6): [True: 192k, False: 37.3k]
  ------------------
  422|   192k|	  hasdig = 1;
  423|   192k|	} else if (*p == '.') {
  ------------------
  |  Branch (423:13): [True: 326, False: 37.0k]
  ------------------
  424|    326|	  if (dp) return STRSCAN_ERROR;
  ------------------
  |  Branch (424:8): [True: 2, False: 324]
  ------------------
  425|    324|	  dp = p;
  426|  37.0k|	} else {
  427|  37.0k|	  break;
  428|  37.0k|	}
  429|   229k|      }
  430|  37.0k|    }
  431|       |
  432|       |    /* Preliminary digit and decimal point scan. */
  433|   506k|    for (sp = p; ; p++) {
  434|   506k|      if (LJ_LIKELY(lj_char_isa(*p, cmask))) {
  ------------------
  |  |  145|   506k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 338k, False: 168k]
  |  |  ------------------
  ------------------
  435|   338k|	x = x * 10 + (*p & 15);  /* For fast path below. */
  436|   338k|	dig++;
  437|   338k|      } else if (*p == '.') {
  ------------------
  |  Branch (437:18): [True: 4.35k, False: 163k]
  ------------------
  438|  4.35k|	if (dp) return STRSCAN_ERROR;
  ------------------
  |  Branch (438:6): [True: 8, False: 4.34k]
  ------------------
  439|  4.34k|	dp = p;
  440|   163k|      } else {
  441|   163k|	break;
  442|   163k|      }
  443|   506k|    }
  444|   163k|    if (!(hasdig | dig)) return STRSCAN_ERROR;
  ------------------
  |  Branch (444:9): [True: 21, False: 163k]
  ------------------
  445|       |
  446|       |    /* Handle decimal point. */
  447|   163k|    if (dp) {
  ------------------
  |  Branch (447:9): [True: 4.66k, False: 159k]
  ------------------
  448|  4.66k|      if (base == 2) return STRSCAN_ERROR;
  ------------------
  |  Branch (448:11): [True: 4, False: 4.65k]
  ------------------
  449|  4.65k|      fmt = STRSCAN_NUM;
  450|  4.65k|      if (dig) {
  ------------------
  |  Branch (450:11): [True: 4.60k, False: 56]
  ------------------
  451|  4.60k|	ex = (int32_t)(dp-(p-1)); dp = p-1;
  452|  57.1k|	while (ex < 0 && *dp-- == '0') ex++, dig--;  /* Skip trailing zeros. */
  ------------------
  |  Branch (452:9): [True: 56.8k, False: 325]
  |  Branch (452:19): [True: 52.5k, False: 4.27k]
  ------------------
  453|  4.60k|	if (ex <= -STRSCAN_MAXEXP) return STRSCAN_ERROR;
  ------------------
  |  |   66|  4.60k|#define STRSCAN_MAXEXP	(1 << 20)
  ------------------
  |  Branch (453:6): [True: 0, False: 4.60k]
  ------------------
  454|  4.60k|	if (base == 16) ex *= 4;
  ------------------
  |  Branch (454:6): [True: 475, False: 4.12k]
  ------------------
  455|  4.60k|      }
  456|  4.65k|    }
  457|       |
  458|       |    /* Parse exponent. */
  459|   163k|    if (base >= 10 && casecmp(*p, (uint32_t)(base == 16 ? 'p' : 'e'))) {
  ------------------
  |  |   73|   325k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 226, False: 162k]
  |  |  |  Branch (73:40): [True: 1.23k, False: 161k]
  |  |  ------------------
  ------------------
  |  Branch (459:9): [True: 162k, False: 1.17k]
  ------------------
  460|    226|      uint32_t xx;
  461|    226|      int negx = 0;
  462|    226|      fmt = STRSCAN_NUM; p++;
  463|    226|      if (*p == '+' || *p == '-') negx = (*p++ == '-');
  ------------------
  |  Branch (463:11): [True: 1, False: 225]
  |  Branch (463:24): [True: 7, False: 218]
  ------------------
  464|    226|      if (!lj_char_isdigit(*p)) return STRSCAN_ERROR;
  ------------------
  |  |   28|    226|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    226|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (464:11): [True: 5, False: 221]
  ------------------
  465|    221|      xx = (*p++ & 15);
  466|    700|      while (lj_char_isdigit(*p)) {
  467|    700|	xx = xx * 10 + (*p & 15);
  468|    700|	if (xx >= STRSCAN_MAXEXP) return STRSCAN_ERROR;
  ------------------
  |  |   66|    700|#define STRSCAN_MAXEXP	(1 << 20)
  ------------------
  |  Branch (468:6): [True: 1, False: 699]
  ------------------
  469|    699|	p++;
  470|    699|      }
  471|    220|      ex += negx ? (int32_t)(~xx+1u) : (int32_t)xx;
  ------------------
  |  Branch (471:13): [True: 7, False: 213]
  ------------------
  472|    220|    }
  473|       |
  474|       |    /* Parse suffix. */
  475|   163k|    if (*p) {
  ------------------
  |  Branch (475:9): [True: 121k, False: 42.7k]
  ------------------
  476|       |      /* I (IMAG), U (U32), LL (I64), ULL/LLU (U64), L (long), UL/LU (ulong). */
  477|       |      /* NYI: f (float). Not needed until cp_number() handles non-integers. */
  478|   121k|      if (casecmp(*p, 'i')) {
  ------------------
  |  |   73|   121k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 112k, False: 8.46k]
  |  |  ------------------
  ------------------
  479|   112k|	if (!(opt & STRSCAN_OPT_IMAG)) return STRSCAN_ERROR;
  ------------------
  |  |   14|   112k|#define STRSCAN_OPT_IMAG	0x04
  ------------------
  |  Branch (479:6): [True: 0, False: 112k]
  ------------------
  480|   112k|	p++; fmt = STRSCAN_IMAG;
  481|   112k|      } else if (fmt == STRSCAN_INT) {
  ------------------
  |  Branch (481:18): [True: 8.45k, False: 10]
  ------------------
  482|  8.45k|	if (casecmp(*p, 'u')) p++, fmt = STRSCAN_U32;
  ------------------
  |  |   73|  8.45k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 1, False: 8.45k]
  |  |  ------------------
  ------------------
  483|  8.45k|	if (casecmp(*p, 'l')) {
  ------------------
  |  |   73|  8.45k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 8.41k, False: 36]
  |  |  ------------------
  ------------------
  484|  8.41k|	  p++;
  485|  8.41k|	  if (casecmp(*p, 'l')) p++, fmt += STRSCAN_I64 - STRSCAN_INT;
  ------------------
  |  |   73|  8.41k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 8.41k, False: 4]
  |  |  ------------------
  ------------------
  486|      4|	  else if (!(opt & STRSCAN_OPT_C)) return STRSCAN_ERROR;
  ------------------
  |  |   16|      4|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (486:13): [True: 4, False: 0]
  ------------------
  487|      0|	  else if (sizeof(long) == 8) fmt += STRSCAN_I64 - STRSCAN_INT;
  ------------------
  |  Branch (487:13): [Folded - Ignored]
  ------------------
  488|  8.41k|	}
  489|  8.45k|	if (casecmp(*p, 'u') && (fmt == STRSCAN_INT || fmt == STRSCAN_I64))
  ------------------
  |  |   73|  16.9k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 4, False: 8.44k]
  |  |  ------------------
  ------------------
  |  Branch (489:27): [True: 0, False: 4]
  |  Branch (489:49): [True: 3, False: 1]
  ------------------
  490|      3|	  p++, fmt += STRSCAN_U32 - STRSCAN_INT;
  491|  8.45k|	if ((fmt == STRSCAN_U32 && !(opt & STRSCAN_OPT_C)) ||
  ------------------
  |  |   16|      1|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (491:7): [True: 1, False: 8.44k]
  |  Branch (491:29): [True: 1, False: 0]
  ------------------
  492|  8.45k|	    (fmt >= STRSCAN_I64 && !(opt & STRSCAN_OPT_LL)))
  ------------------
  |  |   15|  8.41k|#define STRSCAN_OPT_LL		0x08
  ------------------
  |  Branch (492:7): [True: 8.41k, False: 35]
  |  Branch (492:29): [True: 0, False: 8.41k]
  ------------------
  493|      1|	  return STRSCAN_ERROR;
  494|  8.45k|      }
  495|   121k|      while (lj_char_isspace(*p)) p++;
  496|   121k|      if (*p) return STRSCAN_ERROR;
  ------------------
  |  Branch (496:11): [True: 62, False: 121k]
  ------------------
  497|   121k|    }
  498|   163k|    if (p < pe) return STRSCAN_ERROR;
  ------------------
  |  Branch (498:9): [True: 0, False: 163k]
  ------------------
  499|       |
  500|       |    /* Fast path for decimal 32 bit integers. */
  501|   163k|    if (fmt == STRSCAN_INT && base == 10 &&
  ------------------
  |  Branch (501:9): [True: 37.8k, False: 125k]
  |  Branch (501:31): [True: 36.2k, False: 1.66k]
  ------------------
  502|   163k|	(dig < 10 || (dig == 10 && *sp <= '2' && x < 0x80000000u+neg))) {
  ------------------
  |  Branch (502:3): [True: 32.6k, False: 3.56k]
  |  Branch (502:16): [True: 194, False: 3.36k]
  |  Branch (502:29): [True: 104, False: 90]
  |  Branch (502:43): [True: 58, False: 46]
  ------------------
  503|  32.7k|      if ((opt & STRSCAN_OPT_TONUM)) {
  ------------------
  |  |   13|  32.7k|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (503:11): [True: 32.6k, False: 124]
  ------------------
  504|  32.6k|	o->n = neg ? -(double)x : (double)x;
  ------------------
  |  Branch (504:9): [True: 0, False: 32.6k]
  ------------------
  505|  32.6k|	return STRSCAN_NUM;
  506|  32.6k|      } else if (x == 0 && neg) {
  ------------------
  |  Branch (506:18): [True: 0, False: 124]
  |  Branch (506:28): [True: 0, False: 0]
  ------------------
  507|      0|	o->n = -0.0;
  508|      0|	return STRSCAN_NUM;
  509|    124|      } else {
  510|    124|	o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (510:9): [True: 0, False: 124]
  ------------------
  511|    124|	return STRSCAN_INT;
  512|    124|      }
  513|  32.7k|    }
  514|       |
  515|       |    /* Dispatch to base-specific parser. */
  516|   131k|    if (base == 0 && !(fmt == STRSCAN_NUM || fmt == STRSCAN_IMAG))
  ------------------
  |  Branch (516:9): [True: 90, False: 130k]
  |  Branch (516:24): [True: 0, False: 90]
  |  Branch (516:46): [True: 0, False: 90]
  ------------------
  517|     90|      return strscan_oct(sp, o, fmt, neg, dig);
  518|   130k|    if (base == 16)
  ------------------
  |  Branch (518:9): [True: 1.23k, False: 129k]
  ------------------
  519|  1.23k|      fmt = strscan_hex(sp, o, fmt, opt, ex, neg, dig);
  520|   129k|    else if (base == 2)
  ------------------
  |  Branch (520:14): [True: 1.08k, False: 128k]
  ------------------
  521|  1.08k|      fmt = strscan_bin(sp, o, fmt, opt, ex, neg, dig);
  522|   128k|    else
  523|   128k|      fmt = strscan_dec(sp, o, fmt, opt, ex, neg, dig);
  524|       |
  525|       |    /* Try to convert number to integer, if requested. */
  526|   130k|    if (fmt == STRSCAN_NUM && (opt & STRSCAN_OPT_TOINT) && !tvismzero(o)) {
  ------------------
  |  |   12|  9.92k|#define STRSCAN_OPT_TOINT	0x01  /* Convert to int32_t, if possible. */
  ------------------
                  if (fmt == STRSCAN_NUM && (opt & STRSCAN_OPT_TOINT) && !tvismzero(o)) {
  ------------------
  |  |  819|      0|#define tvismzero(o)	((o)->u64 == U64x(80000000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (526:9): [True: 9.92k, False: 121k]
  |  Branch (526:31): [True: 0, False: 9.92k]
  |  Branch (526:60): [True: 0, False: 0]
  ------------------
  527|      0|      double n = o->n;
  528|      0|      int32_t i = lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  529|      0|      if (n == (lua_Number)i) { o->i = i; return STRSCAN_INT; }
  ------------------
  |  Branch (529:11): [True: 0, False: 0]
  ------------------
  530|      0|    }
  531|   130k|    return fmt;
  532|   130k|  }
  533|   130k|}
lj_strscan.c:strscan_oct:
  154|     90|{
  155|     90|  uint64_t x = 0;
  156|       |
  157|       |  /* Scan octal digits. */
  158|     90|  if (dig > 22 || (dig == 22 && *p > '1')) return STRSCAN_ERROR;
  ------------------
  |  Branch (158:7): [True: 0, False: 90]
  |  Branch (158:20): [True: 0, False: 90]
  |  Branch (158:33): [True: 0, False: 0]
  ------------------
  159|     90|  while (dig-- > 0) {
  ------------------
  |  Branch (159:10): [True: 0, False: 90]
  ------------------
  160|      0|    if (!(*p >= '0' && *p <= '7')) return STRSCAN_ERROR;
  ------------------
  |  Branch (160:11): [True: 0, False: 0]
  |  Branch (160:24): [True: 0, False: 0]
  ------------------
  161|      0|    x = (x << 3) + (*p++ & 7);
  162|      0|  }
  163|       |
  164|       |  /* Format-specific handling. */
  165|     90|  switch (fmt) {
  166|     90|  case STRSCAN_INT:
  ------------------
  |  Branch (166:3): [True: 90, False: 0]
  ------------------
  167|     90|    if (x >= 0x80000000u+neg) fmt = STRSCAN_U32;
  ------------------
  |  Branch (167:9): [True: 0, False: 90]
  ------------------
  168|       |    /* fallthrough */
  169|     90|  case STRSCAN_U32:
  ------------------
  |  Branch (169:3): [True: 0, False: 90]
  ------------------
  170|     90|    if ((x >> 32)) return STRSCAN_ERROR;
  ------------------
  |  Branch (170:9): [True: 0, False: 90]
  ------------------
  171|     90|    o->i = neg ? (int32_t)(~(uint32_t)x+1u) : (int32_t)x;
  ------------------
  |  Branch (171:12): [True: 0, False: 90]
  ------------------
  172|     90|    break;
  173|      0|  default:
  ------------------
  |  Branch (173:3): [True: 0, False: 90]
  ------------------
  174|      0|  case STRSCAN_I64:
  ------------------
  |  Branch (174:3): [True: 0, False: 90]
  ------------------
  175|      0|  case STRSCAN_U64:
  ------------------
  |  Branch (175:3): [True: 0, False: 90]
  ------------------
  176|      0|    o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (176:14): [True: 0, False: 0]
  ------------------
  177|      0|    break;
  178|     90|  }
  179|     90|  return fmt;
  180|     90|}
lj_strscan.c:strscan_hex:
  108|  1.23k|{
  109|  1.23k|  uint64_t x = 0;
  110|  1.23k|  uint32_t i;
  111|       |
  112|       |  /* Scan hex digits. */
  113|  12.3k|  for (i = dig > 16 ? 16 : dig ; i; i--, p++) {
  ------------------
  |  Branch (113:12): [True: 568, False: 670]
  |  Branch (113:34): [True: 11.1k, False: 1.23k]
  ------------------
  114|  11.1k|    uint32_t d = (*p != '.' ? *p : *++p); if (d > '9') d += 9;
  ------------------
  |  Branch (114:19): [True: 10.9k, False: 200]
  |  Branch (114:47): [True: 90, False: 11.0k]
  ------------------
  115|  11.1k|    x = (x << 4) + (d & 15);
  116|  11.1k|  }
  117|       |
  118|       |  /* Summarize rounding-effect of excess digits. */
  119|  11.4k|  for (i = 16; i < dig; i++, p++)
  ------------------
  |  Branch (119:16): [True: 10.2k, False: 1.23k]
  ------------------
  120|  10.2k|    x |= ((*p != '.' ? *p : *++p) != '0'), ex2 += 4;
  ------------------
  |  Branch (120:12): [True: 10.1k, False: 63]
  ------------------
  121|       |
  122|       |  /* Format-specific handling. */
  123|  1.23k|  switch (fmt) {
  124|    752|  case STRSCAN_INT:
  ------------------
  |  Branch (124:3): [True: 752, False: 486]
  ------------------
  125|    752|    if (!(opt & STRSCAN_OPT_TONUM) && x < 0x80000000u+neg &&
  ------------------
  |  |   13|    752|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (125:9): [True: 0, False: 752]
  |  Branch (125:39): [True: 0, False: 0]
  ------------------
  126|    752|	!(x == 0 && neg)) {
  ------------------
  |  Branch (126:4): [True: 0, False: 0]
  |  Branch (126:14): [True: 0, False: 0]
  ------------------
  127|      0|      o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (127:14): [True: 0, False: 0]
  ------------------
  128|      0|      return STRSCAN_INT;  /* Fast path for 32 bit integers. */
  129|      0|    }
  130|    752|    if (!(opt & STRSCAN_OPT_C)) { fmt = STRSCAN_NUM; break; }
  ------------------
  |  |   16|    752|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (130:9): [True: 752, False: 0]
  ------------------
  131|       |    /* fallthrough */
  132|      0|  case STRSCAN_U32:
  ------------------
  |  Branch (132:3): [True: 0, False: 1.23k]
  ------------------
  133|      0|    if (dig > 8) return STRSCAN_ERROR;
  ------------------
  |  Branch (133:9): [True: 0, False: 0]
  ------------------
  134|      0|    o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (134:12): [True: 0, False: 0]
  ------------------
  135|      0|    return STRSCAN_U32;
  136|      2|  case STRSCAN_I64:
  ------------------
  |  Branch (136:3): [True: 2, False: 1.23k]
  ------------------
  137|      3|  case STRSCAN_U64:
  ------------------
  |  Branch (137:3): [True: 1, False: 1.23k]
  ------------------
  138|      3|    if (dig > 16) return STRSCAN_ERROR;
  ------------------
  |  Branch (138:9): [True: 1, False: 2]
  ------------------
  139|      2|    o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (139:14): [True: 0, False: 2]
  ------------------
  140|      2|    return fmt;
  141|    483|  default:
  ------------------
  |  Branch (141:3): [True: 483, False: 755]
  ------------------
  142|    483|    break;
  143|  1.23k|  }
  144|       |
  145|       |  /* Reduce range, then convert to double. */
  146|  1.23k|  if ((x & U64x(c0000000,0000000))) { x = (x >> 2) | (x & 3); ex2 += 2; }
  ------------------
  |  |   94|  1.23k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (146:7): [True: 567, False: 668]
  ------------------
  147|  1.23k|  strscan_double(x, o, ex2, neg);
  148|  1.23k|  return fmt;
  149|  1.23k|}
lj_strscan.c:strscan_double:
   77|  8.47k|{
   78|  8.47k|  double n;
   79|       |
   80|       |  /* Avoid double rounding for denormals. */
   81|  8.47k|  if (LJ_UNLIKELY(ex2 <= -1075 && x != 0)) {
  ------------------
  |  |  146|  8.51k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 38, False: 8.43k]
  |  |  |  Branch (146:44): [True: 38, False: 8.43k]
  |  |  |  Branch (146:44): [True: 38, False: 0]
  |  |  ------------------
  ------------------
   82|       |    /* NYI: all of this generates way too much code on 32 bit CPUs. */
   83|     38|#if (defined(__GNUC__) || defined(__clang__)) && LJ_64
   84|     38|    int32_t b = (int32_t)(__builtin_clzll(x)^63);
   85|       |#else
   86|       |    int32_t b = (x>>32) ? 32+(int32_t)lj_fls((uint32_t)(x>>32)) :
   87|       |			  (int32_t)lj_fls((uint32_t)x);
   88|       |#endif
   89|     38|    if ((int32_t)b + ex2 <= -1023 && (int32_t)b + ex2 >= -1075) {
  ------------------
  |  Branch (89:9): [True: 37, False: 1]
  |  Branch (89:38): [True: 23, False: 14]
  ------------------
   90|     23|      uint64_t rb = (uint64_t)1 << (-1075-ex2);
   91|     23|      if ((x & rb) && ((x & (rb+rb+rb-1)))) x += rb+rb;
  ------------------
  |  Branch (91:11): [True: 18, False: 5]
  |  Branch (91:23): [True: 18, False: 0]
  ------------------
   92|     23|      x = (x & ~(rb+rb-1));
   93|     23|    }
   94|     38|  }
   95|       |
   96|       |  /* Convert to double using a signed int64_t conversion, then rescale. */
   97|  8.47k|  lj_assertX((int64_t)x >= 0, "bad double conversion");
  ------------------
  |  |  366|  8.47k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  8.47k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 8.47k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  8.47k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   98|  8.47k|  n = (double)(int64_t)x;
   99|  8.47k|  if (neg) n = -n;
  ------------------
  |  Branch (99:7): [True: 0, False: 8.47k]
  ------------------
  100|  8.47k|  if (ex2) n = ldexp(n, ex2);
  ------------------
  |  Branch (100:7): [True: 6.77k, False: 1.69k]
  ------------------
  101|  8.47k|  o->n = n;
  102|  8.47k|}
lj_strscan.c:strscan_bin:
  335|  1.08k|{
  336|  1.08k|  uint64_t x = 0;
  337|  1.08k|  uint32_t i;
  338|       |
  339|  1.08k|  if (ex2 || dig > 64) return STRSCAN_ERROR;
  ------------------
  |  Branch (339:7): [True: 0, False: 1.08k]
  |  Branch (339:14): [True: 1, False: 1.08k]
  ------------------
  340|       |
  341|       |  /* Scan binary digits. */
  342|  2.06k|  for (i = dig; i; i--, p++) {
  ------------------
  |  Branch (342:17): [True: 989, False: 1.07k]
  ------------------
  343|    989|    if ((*p & ~1) != '0') return STRSCAN_ERROR;
  ------------------
  |  Branch (343:9): [True: 6, False: 983]
  ------------------
  344|    983|    x = (x << 1) | (*p & 1);
  345|    983|  }
  346|       |
  347|       |  /* Format-specific handling. */
  348|  1.07k|  switch (fmt) {
  349|    812|  case STRSCAN_INT:
  ------------------
  |  Branch (349:3): [True: 812, False: 266]
  ------------------
  350|    812|    if (!(opt & STRSCAN_OPT_TONUM) && x < 0x80000000u+neg) {
  ------------------
  |  |   13|    812|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (350:9): [True: 0, False: 812]
  |  Branch (350:39): [True: 0, False: 0]
  ------------------
  351|      0|      o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (351:14): [True: 0, False: 0]
  ------------------
  352|      0|      return STRSCAN_INT;  /* Fast path for 32 bit integers. */
  353|      0|    }
  354|    812|    if (!(opt & STRSCAN_OPT_C)) { fmt = STRSCAN_NUM; break; }
  ------------------
  |  |   16|    812|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (354:9): [True: 812, False: 0]
  ------------------
  355|       |    /* fallthrough */
  356|      0|  case STRSCAN_U32:
  ------------------
  |  Branch (356:3): [True: 0, False: 1.07k]
  ------------------
  357|      0|    if (dig > 32) return STRSCAN_ERROR;
  ------------------
  |  Branch (357:9): [True: 0, False: 0]
  ------------------
  358|      0|    o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (358:12): [True: 0, False: 0]
  ------------------
  359|      0|    return STRSCAN_U32;
  360|      2|  case STRSCAN_I64:
  ------------------
  |  Branch (360:3): [True: 2, False: 1.07k]
  ------------------
  361|      3|  case STRSCAN_U64:
  ------------------
  |  Branch (361:3): [True: 1, False: 1.07k]
  ------------------
  362|      3|    o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (362:14): [True: 0, False: 3]
  ------------------
  363|      3|    return fmt;
  364|    263|  default:
  ------------------
  |  Branch (364:3): [True: 263, False: 815]
  ------------------
  365|    263|    break;
  366|  1.07k|  }
  367|       |
  368|       |  /* Reduce range, then convert to double. */
  369|  1.07k|  if ((x & U64x(c0000000,0000000))) { x = (x >> 2) | (x & 3); ex2 += 2; }
  ------------------
  |  |   94|  1.07k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (369:7): [True: 0, False: 1.07k]
  ------------------
  370|  1.07k|  strscan_double(x, o, ex2, neg);
  371|  1.07k|  return fmt;
  372|  1.07k|}
lj_strscan.c:strscan_dec:
  186|   128k|{
  187|   128k|  uint8_t xi[STRSCAN_DDIG], *xip = xi;
  188|       |
  189|   128k|  if (dig) {
  ------------------
  |  Branch (189:7): [True: 125k, False: 2.72k]
  ------------------
  190|   125k|    uint32_t i = dig;
  191|   125k|    if (i > STRSCAN_MAXDIG) {
  ------------------
  |  |   63|   125k|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  |  Branch (191:9): [True: 15, False: 125k]
  ------------------
  192|     15|      ex10 += (int32_t)(i - STRSCAN_MAXDIG);
  ------------------
  |  |   63|     15|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  193|     15|      i = STRSCAN_MAXDIG;
  ------------------
  |  |   63|     15|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  194|     15|    }
  195|       |    /* Scan unaligned leading digit. */
  196|   125k|    if (((ex10^i) & 1))
  ------------------
  |  Branch (196:9): [True: 123k, False: 2.63k]
  ------------------
  197|   123k|      *xip++ = ((*p != '.' ? *p : *++p) & 15), i--, p++;
  ------------------
  |  Branch (197:18): [True: 123k, False: 0]
  ------------------
  198|       |    /* Scan aligned double-digits. */
  199|   183k|    for ( ; i > 1; i -= 2) {
  ------------------
  |  Branch (199:13): [True: 57.4k, False: 125k]
  ------------------
  200|  57.4k|      uint32_t d = 10 * ((*p != '.' ? *p : *++p) & 15); p++;
  ------------------
  |  Branch (200:27): [True: 57.0k, False: 473]
  ------------------
  201|  57.4k|      *xip++ = d + ((*p != '.' ? *p : *++p) & 15); p++;
  ------------------
  |  Branch (201:22): [True: 57.4k, False: 1]
  ------------------
  202|  57.4k|    }
  203|       |    /* Scan and realign trailing digit. */
  204|   125k|    if (i) *xip++ = 10 * ((*p != '.' ? *p : *++p) & 15), ex10--, dig++, p++;
  ------------------
  |  Branch (204:9): [True: 3.71k, False: 122k]
  |  Branch (204:28): [True: 438, False: 3.27k]
  ------------------
  205|       |
  206|       |    /* Summarize rounding-effect of excess digits. */
  207|   125k|    if (dig > STRSCAN_MAXDIG) {
  ------------------
  |  |   63|   125k|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  |  Branch (207:9): [True: 15, False: 125k]
  ------------------
  208|    373|      do {
  209|    373|	if ((*p != '.' ? *p : *++p) != '0') { xip[-1] |= 1; break; }
  ------------------
  |  Branch (209:6): [True: 11, False: 362]
  |  Branch (209:7): [True: 371, False: 2]
  ------------------
  210|    362|	p++;
  211|    362|      } while (--dig > STRSCAN_MAXDIG);
  ------------------
  |  |   63|    362|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  |  Branch (211:16): [True: 358, False: 4]
  ------------------
  212|     15|      dig = STRSCAN_MAXDIG;
  ------------------
  |  |   63|     15|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  213|   125k|    } else {  /* Simplify exponent. */
  214|   126k|      while (ex10 > 0 && dig <= 18) *xip++ = 0, ex10 -= 2, dig += 2;
  ------------------
  |  Branch (214:14): [True: 1.10k, False: 125k]
  |  Branch (214:26): [True: 947, False: 161]
  ------------------
  215|   125k|    }
  216|   125k|  } else {  /* Only got zeros. */
  217|  2.72k|    ex10 = 0;
  218|  2.72k|    xi[0] = 0;
  219|  2.72k|  }
  220|       |
  221|       |  /* Fast path for numbers in integer format (but handles e.g. 1e6, too). */
  222|   128k|  if (dig <= 20 && ex10 == 0) {
  ------------------
  |  Branch (222:7): [True: 126k, False: 2.23k]
  |  Branch (222:20): [True: 122k, False: 3.65k]
  ------------------
  223|   122k|    uint8_t *xis;
  224|   122k|    uint64_t x = xi[0];
  225|   122k|    double n;
  226|   138k|    for (xis = xi+1; xis < xip; xis++) x = x * 100 + *xis;
  ------------------
  |  Branch (226:22): [True: 15.4k, False: 122k]
  ------------------
  227|   122k|    if (!(dig == 20 && (xi[0] > 18 || (int64_t)x >= 0))) {  /* No overflow? */
  ------------------
  |  Branch (227:11): [True: 443, False: 122k]
  |  Branch (227:25): [True: 348, False: 95]
  |  Branch (227:39): [True: 13, False: 82]
  ------------------
  228|       |      /* Format-specific handling. */
  229|   122k|      switch (fmt) {
  230|  1.62k|      case STRSCAN_INT:
  ------------------
  |  Branch (230:7): [True: 1.62k, False: 120k]
  ------------------
  231|  1.62k|	if (!(opt & STRSCAN_OPT_TONUM) && x < 0x80000000u+neg) {
  ------------------
  |  |   13|  1.62k|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (231:6): [True: 3, False: 1.62k]
  |  Branch (231:36): [True: 0, False: 3]
  ------------------
  232|      0|	  o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (232:11): [True: 0, False: 0]
  ------------------
  233|      0|	  return STRSCAN_INT;  /* Fast path for 32 bit integers. */
  234|      0|	}
  235|  1.62k|	if (!(opt & STRSCAN_OPT_C)) { fmt = STRSCAN_NUM; goto plainnumber; }
  ------------------
  |  |   16|  1.62k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (235:6): [True: 1.62k, False: 3]
  ------------------
  236|       |	/* fallthrough */
  237|      3|      case STRSCAN_U32:
  ------------------
  |  Branch (237:7): [True: 0, False: 122k]
  ------------------
  238|      3|	if ((x >> 32) != 0) return STRSCAN_ERROR;
  ------------------
  |  Branch (238:6): [True: 0, False: 3]
  ------------------
  239|      3|	o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (239:9): [True: 0, False: 3]
  ------------------
  240|      3|	return STRSCAN_U32;
  241|  8.40k|      case STRSCAN_I64:
  ------------------
  |  Branch (241:7): [True: 8.40k, False: 113k]
  ------------------
  242|  8.40k|      case STRSCAN_U64:
  ------------------
  |  Branch (242:7): [True: 1, False: 122k]
  ------------------
  243|  8.40k|	o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (243:11): [True: 0, False: 8.40k]
  ------------------
  244|  8.40k|	return fmt;
  245|   112k|      default:
  ------------------
  |  Branch (245:7): [True: 112k, False: 10.0k]
  ------------------
  246|   113k|      plainnumber:  /* Fast path for plain numbers < 2^63. */
  247|   113k|	if ((int64_t)x < 0) break;
  ------------------
  |  Branch (247:6): [True: 106, False: 113k]
  ------------------
  248|   113k|	n = (double)(int64_t)x;
  249|   113k|	if (neg) n = -n;
  ------------------
  |  Branch (249:6): [True: 0, False: 113k]
  ------------------
  250|   113k|	o->n = n;
  251|   113k|	return fmt;
  252|   122k|      }
  253|   122k|    }
  254|   122k|  }
  255|       |
  256|       |  /* Slow non-integer path. */
  257|  6.35k|  if (fmt == STRSCAN_INT) {
  ------------------
  |  Branch (257:7): [True: 1.87k, False: 4.47k]
  ------------------
  258|  1.87k|    if ((opt & STRSCAN_OPT_C)) return STRSCAN_ERROR;
  ------------------
  |  |   16|  1.87k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (258:9): [True: 0, False: 1.87k]
  ------------------
  259|  1.87k|    fmt = STRSCAN_NUM;
  260|  4.47k|  } else if (fmt > STRSCAN_INT) {
  ------------------
  |  Branch (260:14): [True: 2, False: 4.47k]
  ------------------
  261|      2|    return STRSCAN_ERROR;
  262|      2|  }
  263|  6.35k|  {
  264|  6.35k|    uint32_t hi = 0, lo = (uint32_t)(xip-xi);
  265|  6.35k|    int32_t ex2 = 0, idig = (int32_t)lo + (ex10 >> 1);
  266|       |
  267|  6.35k|    lj_assertX(lo > 0 && (ex10 & 1) == 0, "bad lo %d ex10 %d", lo, ex10);
  ------------------
  |  |  366|  6.35k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  12.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 6.35k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 6.35k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.35k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  268|       |
  269|       |    /* Handle simple overflow/underflow. */
  270|  6.35k|    if (idig > 310/2) { if (neg) setminfV(o); else setpinfV(o); return fmt; }
  ------------------
  |  |  948|      0|#define setminfV(o)		((o)->u64 = U64x(fff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
                  if (idig > 310/2) { if (neg) setminfV(o); else setpinfV(o); return fmt; }
  ------------------
  |  |  947|    166|#define setpinfV(o)		((o)->u64 = U64x(7ff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|    166|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (270:9): [True: 166, False: 6.18k]
  |  Branch (270:29): [True: 0, False: 166]
  ------------------
  271|  6.18k|    else if (idig < -326/2) { o->n = neg ? -0.0 : 0.0; return fmt; }
  ------------------
  |  Branch (271:14): [True: 19, False: 6.16k]
  |  Branch (271:38): [True: 0, False: 19]
  ------------------
  272|       |
  273|       |    /* Scale up until we have at least 17 or 18 integer part digits. */
  274|  49.8k|    while (idig < 9 && idig < DLEN(lo, hi)) {
  ------------------
  |  |   71|  43.7k|#define DLEN(lo, hi)	((int32_t)(((lo)-(hi)) & STRSCAN_DMASK))
  |  |  ------------------
  |  |  |  |   65|  43.7k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  43.7k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  43.7k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (274:12): [True: 43.7k, False: 6.14k]
  |  Branch (274:24): [True: 43.6k, False: 16]
  ------------------
  275|  43.6k|      uint32_t i, cy = 0;
  276|  43.6k|      ex2 -= 6;
  277|   935k|      for (i = DPREV(lo); ; i = DPREV(i)) {
  ------------------
  |  |   70|  43.6k|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  43.6k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  43.6k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  43.6k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    for (i = DPREV(lo); ; i = DPREV(i)) {
  ------------------
  |  |   70|   892k|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   892k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   892k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   892k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  278|   935k|	uint32_t d = (xi[i] << 6) + cy;
  279|   935k|	cy = (((d >> 2) * 5243) >> 17); d = d - cy * 100;  /* Div/mod 100. */
  280|   935k|	xi[i] = (uint8_t)d;
  281|   935k|	if (i == hi) break;
  ------------------
  |  Branch (281:6): [True: 43.6k, False: 892k]
  ------------------
  282|   892k|	if (d == 0 && i == DPREV(lo)) lo = i;
  ------------------
  |  |   70|  32.7k|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  32.7k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  32.7k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  32.7k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (282:6): [True: 32.7k, False: 859k]
  |  Branch (282:16): [True: 72, False: 32.6k]
  ------------------
  283|   892k|      }
  284|  43.6k|      if (cy) {
  ------------------
  |  Branch (284:11): [True: 39.0k, False: 4.59k]
  ------------------
  285|  39.0k|	hi = DPREV(hi);
  ------------------
  |  |   70|  39.0k|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  39.0k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  39.0k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.0k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  286|  39.0k|	if (xi[DPREV(lo)] == 0) lo = DPREV(lo);
  ------------------
  |  |   70|  39.0k|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  39.0k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  39.0k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.0k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	if (xi[DPREV(lo)] == 0) lo = DPREV(lo);
  ------------------
  |  |   70|     57|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|     57|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|     57|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     57|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (286:6): [True: 57, False: 39.0k]
  ------------------
  287|  39.0k|	else if (hi == lo) { lo = DPREV(lo); xi[DPREV(lo)] |= xi[lo]; }
  ------------------
  |  |   70|      0|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|      0|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|      0|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	else if (hi == lo) { lo = DPREV(lo); xi[DPREV(lo)] |= xi[lo]; }
  ------------------
  |  |   70|      0|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|      0|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|      0|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (287:11): [True: 0, False: 39.0k]
  ------------------
  288|  39.0k|	xi[hi] = (uint8_t)cy; idig++;
  289|  39.0k|      }
  290|  43.6k|    }
  291|       |
  292|       |    /* Scale down until no more than 17 or 18 integer part digits remain. */
  293|  19.2k|    while (idig > 9) {
  ------------------
  |  Branch (293:12): [True: 13.1k, False: 6.16k]
  ------------------
  294|  13.1k|      uint32_t i = hi, cy = 0;
  295|  13.1k|      ex2 += 6;
  296|   915k|      do {
  297|   915k|	cy += xi[i];
  298|   915k|	xi[i] = (cy >> 6);
  299|   915k|	cy = 100 * (cy & 0x3f);
  300|   915k|	if (xi[i] == 0 && i == hi) hi = DNEXT(hi), idig--;
  ------------------
  |  |   69|  11.8k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  11.8k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  11.8k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.8k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (300:6): [True: 69.0k, False: 846k]
  |  Branch (300:20): [True: 11.8k, False: 57.1k]
  ------------------
  301|   915k|	i = DNEXT(i);
  ------------------
  |  |   69|   915k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   915k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   915k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   915k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  302|   915k|      } while (i != lo);
  ------------------
  |  Branch (302:16): [True: 902k, False: 13.1k]
  ------------------
  303|  43.3k|      while (cy) {
  ------------------
  |  Branch (303:14): [True: 30.3k, False: 13.0k]
  ------------------
  304|  30.3k|	if (hi == lo) { xi[DPREV(lo)] |= 1; break; }
  ------------------
  |  |   70|     99|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|     99|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|     99|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     99|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (304:6): [True: 99, False: 30.2k]
  ------------------
  305|  30.2k|	xi[lo] = (cy >> 6); lo = DNEXT(lo);
  ------------------
  |  |   69|  30.2k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  30.2k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  30.2k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.2k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  306|  30.2k|	cy = 100 * (cy & 0x3f);
  307|  30.2k|      }
  308|  13.1k|    }
  309|       |
  310|       |    /* Collect integer part digits and convert to rescaled double. */
  311|  6.16k|    {
  312|  6.16k|      uint64_t x = xi[hi];
  313|  6.16k|      uint32_t i;
  314|  55.3k|      for (i = DNEXT(hi); --idig > 0 && i != lo; i = DNEXT(i))
  ------------------
  |  |   69|  6.16k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  6.16k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  6.16k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.16k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    for (i = DNEXT(hi); --idig > 0 && i != lo; i = DNEXT(i))
  ------------------
  |  |   69|  49.2k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  49.2k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  49.2k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  49.2k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (314:27): [True: 49.2k, False: 6.15k]
  |  Branch (314:41): [True: 49.2k, False: 9]
  ------------------
  315|  49.2k|	x = x * 100 + xi[i];
  316|  6.16k|      if (i == lo) {
  ------------------
  |  Branch (316:11): [True: 801, False: 5.36k]
  ------------------
  317|    824|	while (--idig >= 0) x = x * 100;
  ------------------
  |  Branch (317:9): [True: 23, False: 801]
  ------------------
  318|  5.36k|      } else {  /* Gather round bit from remaining digits. */
  319|  5.36k|	x <<= 1; ex2--;
  320|  6.10k|	do {
  321|  6.10k|	  if (xi[i]) { x |= 1; break; }
  ------------------
  |  Branch (321:8): [True: 5.36k, False: 743]
  ------------------
  322|    743|	  i = DNEXT(i);
  ------------------
  |  |   69|    743|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|    743|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|    743|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    743|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  323|    743|	} while (i != lo);
  ------------------
  |  Branch (323:11): [True: 742, False: 1]
  ------------------
  324|  5.36k|      }
  325|      0|      strscan_double(x, o, ex2, neg);
  326|  6.16k|    }
  327|  6.16k|  }
  328|      0|  return fmt;
  329|  6.35k|}

lj_tab_new:
  140|   561k|{
  141|   561k|  GCtab *t = newtab(L, asize, hbits);
  142|   561k|  clearapart(t);
  143|   561k|  if (t->hmask > 0) clearhpart(t);
  ------------------
  |  Branch (143:7): [True: 445k, False: 115k]
  ------------------
  144|   561k|  return t;
  145|   561k|}
lj_tab_new_ah:
  149|   339k|{
  150|   339k|  return lj_tab_new(L, (uint32_t)(a > 0 ? a+1 : 0), hsize2hbits(h));
  ------------------
  |  |   53|   339k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|   303k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 321k, False: 17.8k]
  |  |  |  Branch (53:32): [True: 17.8k, False: 303k]
  |  |  ------------------
  ------------------
  |  Branch (150:35): [True: 17.8k, False: 321k]
  ------------------
  151|   339k|}
lj_tab_free:
  217|   561k|{
  218|   561k|  if (t->hmask > 0)
  ------------------
  |  Branch (218:7): [True: 527k, False: 33.4k]
  ------------------
  219|   527k|    lj_mem_freevec(g, noderef(t->node), t->hmask+1, Node);
  ------------------
  |  |  130|   527k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  220|   561k|  if (t->asize > 0 && LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|  36.7k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (220:7): [True: 36.7k, False: 524k]
  |  Branch (220:23): [Folded - Ignored]
  |  Branch (220:47): [True: 17.1k, False: 19.6k]
  ------------------
  221|  17.1k|    lj_mem_freevec(g, tvref(t->array), t->asize, TValue);
  ------------------
  |  |  130|  17.1k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  222|   561k|  if (LJ_MAX_COLOSIZE != 0 && t->colo)
  ------------------
  |  |   62|   561k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (222:7): [Folded - Ignored]
  |  Branch (222:31): [True: 34.4k, False: 526k]
  ------------------
  223|  34.4k|    lj_mem_free(g, t, sizetabcolo((uint32_t)t->colo & 0x7f));
  ------------------
  |  |  513|  34.4k|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
  224|   526k|  else
  225|   526k|    lj_mem_freet(g, t);
  ------------------
  |  |  134|   526k|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  226|   561k|}
lj_tab_resize:
  232|   280k|{
  233|   280k|  Node *oldnode = noderef(t->node);
  ------------------
  |  |  515|   280k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   280k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  234|   280k|  uint32_t oldasize = t->asize;
  235|   280k|  uint32_t oldhmask = t->hmask;
  236|   280k|  if (asize > oldasize) {  /* Array part grows? */
  ------------------
  |  Branch (236:7): [True: 17.6k, False: 262k]
  ------------------
  237|  17.6k|    TValue *array;
  238|  17.6k|    uint32_t i;
  239|  17.6k|    if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|  17.6k|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|  17.6k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (239:9): [True: 0, False: 17.6k]
  ------------------
  240|      0|      lj_err_msg(L, LJ_ERR_TABOV);
  241|  17.6k|    if (LJ_MAX_COLOSIZE != 0 && t->colo > 0) {
  ------------------
  |  |   62|  17.6k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (241:9): [Folded - Ignored]
  |  Branch (241:33): [True: 14.7k, False: 2.90k]
  ------------------
  242|       |      /* A colocated array must be separated and copied. */
  243|  14.7k|      TValue *oarray = tvref(t->array);
  ------------------
  |  |  217|  14.7k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  14.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  244|  14.7k|      array = lj_mem_newvec(L, asize, TValue);
  ------------------
  |  |  125|  14.7k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  14.7k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  245|  14.7k|      t->colo = (int8_t)(t->colo | 0x80);  /* Mark as separated (colo < 0). */
  246|  44.3k|      for (i = 0; i < oldasize; i++)
  ------------------
  |  Branch (246:19): [True: 29.5k, False: 14.7k]
  ------------------
  247|  29.5k|	copyTV(L, &array[i], &oarray[i]);
  248|  14.7k|    } else {
  249|  2.90k|      array = (TValue *)lj_mem_realloc(L, tvref(t->array),
  ------------------
  |  |  217|  2.90k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  2.90k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  250|  2.90k|			  oldasize*sizeof(TValue), asize*sizeof(TValue));
  251|  2.90k|    }
  252|  17.6k|    setmref(t->array, array);
  ------------------
  |  |   39|  17.6k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  253|  17.6k|    t->asize = asize;
  254|  43.9k|    for (i = oldasize; i < asize; i++)  /* Clear newly allocated slots. */
  ------------------
  |  Branch (254:24): [True: 26.2k, False: 17.6k]
  ------------------
  255|  26.2k|      setnilV(&array[i]);
  ------------------
  |  |  872|  43.9k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  256|  17.6k|  }
  257|       |  /* Create new (empty) hash part. */
  258|   280k|  if (hbits) {
  ------------------
  |  Branch (258:7): [True: 279k, False: 829]
  ------------------
  259|   279k|    newhpart(L, t, hbits);
  260|   279k|    clearhpart(t);
  261|   279k|  } else {
  262|    829|    global_State *g = G(L);
  ------------------
  |  |  705|    829|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    829|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  263|    829|    setmref(t->node, &g->nilnode);
  ------------------
  |  |   39|    829|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  264|    829|#if LJ_GC64
  265|    829|    setmref(t->freetop, &g->nilnode);
  ------------------
  |  |   39|    829|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  266|    829|#endif
  267|    829|    t->hmask = 0;
  268|    829|  }
  269|   280k|  if (asize < oldasize) {  /* Array part shrinks? */
  ------------------
  |  Branch (269:7): [True: 67, False: 280k]
  ------------------
  270|     67|    TValue *array = tvref(t->array);
  ------------------
  |  |  217|     67|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     67|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  271|     67|    uint32_t i;
  272|     67|    t->asize = asize;  /* Note: This 'shrinks' even colocated arrays. */
  273|  1.07k|    for (i = asize; i < oldasize; i++)  /* Reinsert old array values. */
  ------------------
  |  Branch (273:21): [True: 1.01k, False: 67]
  ------------------
  274|  1.01k|      if (!tvisnil(&array[i]))
  ------------------
  |  |  782|  1.01k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (274:11): [True: 62, False: 950]
  ------------------
  275|     62|	copyTV(L, lj_tab_setinth(L, t, (int32_t)i), &array[i]);
  276|       |    /* Physically shrink only separated arrays. */
  277|     67|    if (LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|     67|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (277:9): [Folded - Ignored]
  |  Branch (277:33): [True: 11, False: 56]
  ------------------
  278|     11|      setmref(t->array, lj_mem_realloc(L, array,
  ------------------
  |  |   39|     11|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  279|     67|	      oldasize*sizeof(TValue), asize*sizeof(TValue)));
  280|     67|  }
  281|   280k|  if (oldhmask > 0) {  /* Reinsert pairs from old hash part. */
  ------------------
  |  Branch (281:7): [True: 197k, False: 82.6k]
  ------------------
  282|   197k|    global_State *g;
  283|   197k|    uint32_t i;
  284|  1.32M|    for (i = 0; i <= oldhmask; i++) {
  ------------------
  |  Branch (284:17): [True: 1.12M, False: 197k]
  ------------------
  285|  1.12M|      Node *n = &oldnode[i];
  286|  1.12M|      if (!tvisnil(&n->val))
  ------------------
  |  |  782|  1.12M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (286:11): [True: 1.12M, False: 1.08k]
  ------------------
  287|  1.12M|	copyTV(L, lj_tab_set(L, t, &n->key), &n->val);
  288|  1.12M|    }
  289|   197k|    g = G(L);
  ------------------
  |  |  705|   197k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   197k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  290|   197k|    lj_mem_freevec(g, oldnode, oldhmask+1, Node);
  ------------------
  |  |  130|   197k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  291|   197k|  }
  292|   280k|}
lj_tab_reasize:
  372|  1.10k|{
  373|  1.10k|  lj_tab_resize(L, t, nasize+1, t->hmask > 0 ? lj_fls(t->hmask)+1 : 0);
  ------------------
  |  |  149|  1.08k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (373:33): [True: 1.08k, False: 23]
  ------------------
  374|  1.10k|}
lj_tab_getstr:
  392|  1.97M|{
  393|  1.97M|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|  1.97M|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  394|  2.48M|  do {
  395|  3.41M|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  795|  4.97M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  2.48M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  2.48M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 1.70M, False: 779k]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  859|  1.70M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  1.70M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.70M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.70M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.70M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.70M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (395:29): [True: 620k, False: 1.08M]
  ------------------
  396|   620k|      return &n->val;
  397|  2.48M|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  1.86M|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  1.86M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (397:12): [True: 506k, False: 1.35M]
  ------------------
  398|  1.35M|  return NULL;
  399|  1.97M|}
lj_tab_get:
  402|  1.77M|{
  403|  1.77M|  if (tvisstr(key)) {
  ------------------
  |  |  795|  1.77M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  1.77M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  1.77M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 1.77M, False: 0]
  |  |  ------------------
  ------------------
  404|  1.77M|    cTValue *tv = lj_tab_getstr(t, strV(key));
  ------------------
  |  |  859|  1.77M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  1.77M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.77M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.77M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.77M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.77M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  1.77M|    if (tv)
  ------------------
  |  Branch (405:9): [True: 420k, False: 1.35M]
  ------------------
  406|   420k|      return tv;
  407|  1.77M|  } else if (tvisint(key)) {
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  408|      0|    cTValue *tv = lj_tab_getint(t, intV(key));
  ------------------
  |  |   82|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (79:35): [Folded - Ignored]
  |  |  |  |  |  Branch (79:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:47): [Folded - Ignored]
  |  |  |  |  |  Branch (80:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (82:71): [Folded - Ignored]
  |  |  |  Branch (82:71): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  409|      0|    if (tv)
  ------------------
  |  Branch (409:9): [True: 0, False: 0]
  ------------------
  410|      0|      return tv;
  411|      0|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|      0|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  412|      0|    lua_Number nk = numV(key);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  413|      0|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  414|      0|    if (nk == (lua_Number)k) {
  ------------------
  |  Branch (414:9): [True: 0, False: 0]
  ------------------
  415|      0|      cTValue *tv = lj_tab_getint(t, k);
  ------------------
  |  |   82|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  416|      0|      if (tv)
  ------------------
  |  Branch (416:11): [True: 0, False: 0]
  ------------------
  417|      0|	return tv;
  418|      0|    } else {
  419|      0|      goto genlookup;  /* Else use the generic lookup. */
  420|      0|    }
  421|      0|  } else if (!tvisnil(key)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (421:14): [True: 0, False: 0]
  ------------------
  422|      0|    Node *n;
  423|      0|  genlookup:
  424|      0|    n = hashkey(t, key);
  425|      0|    do {
  426|      0|      if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (426:11): [True: 0, False: 0]
  ------------------
  427|      0|	return &n->val;
  428|      0|    } while ((n = nextnode(n)));
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (428:14): [True: 0, False: 0]
  ------------------
  429|      0|  }
  430|  1.35M|  return niltv(L);
  ------------------
  |  |  667|  1.35M|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  1.35M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.35M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.35M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.35M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.35M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  431|  1.35M|}
lj_tab_newkey:
  437|  6.46M|{
  438|  6.46M|  Node *n = hashkey(t, key);
  439|  6.46M|  if (!tvisnil(&n->val) || t->hmask == 0) {
  ------------------
  |  |  782|  12.9M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (439:7): [True: 1.37M, False: 5.08M]
  |  Branch (439:28): [True: 82.5k, False: 5.00M]
  ------------------
  440|  1.45M|    Node *nodebase = noderef(t->node);
  ------------------
  |  |  515|  1.45M|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  1.45M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  441|  1.45M|    Node *collide, *freenode = getfreetop(t, nodebase);
  ------------------
  |  |  518|  1.45M|#define getfreetop(t, n)	(noderef((t)->freetop))
  |  |  ------------------
  |  |  |  |  515|  1.45M|#define noderef(r)	(mref((r), Node))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.45M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  442|  1.45M|    lj_assertL(freenode >= nodebase && freenode <= nodebase+t->hmask+1,
  ------------------
  |  |  365|  1.45M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.91M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 1.45M, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1.45M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.45M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  443|  1.45M|	       "bad freenode");
  444|  2.92M|    do {
  445|  2.92M|      if (freenode == nodebase) {  /* No free node found? */
  ------------------
  |  Branch (445:11): [True: 279k, False: 2.64M]
  ------------------
  446|   279k|	rehashtab(L, t, key);  /* Rehash table. */
  447|   279k|	return lj_tab_set(L, t, key);  /* Retry key insertion. */
  448|   279k|      }
  449|  2.92M|    } while (!tvisnil(&(--freenode)->key));
  ------------------
  |  |  782|  2.64M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (449:14): [True: 1.46M, False: 1.17M]
  ------------------
  450|  1.17M|    setfreetop(t, nodebase, freenode);
  ------------------
  |  |  519|  1.17M|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|  1.17M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  451|  1.17M|    lj_assertL(freenode != &G(L)->nilnode, "store to fallback hash");
  ------------------
  |  |  365|  1.17M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.17M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.17M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.17M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  452|  1.17M|    collide = hashkey(t, &n->key);
  453|  1.17M|    if (collide != n) {  /* Colliding node not the main node? */
  ------------------
  |  Branch (453:9): [True: 177k, False: 1.00M]
  ------------------
  454|   219k|      while (noderef(collide->next) != n)  /* Find predecessor. */
  ------------------
  |  |  515|   219k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   219k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (454:14): [True: 41.5k, False: 177k]
  ------------------
  455|  41.5k|	collide = nextnode(collide);
  ------------------
  |  |  516|  41.5k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  41.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  456|   177k|      setmref(collide->next, freenode);  /* Relink chain. */
  ------------------
  |  |   39|   177k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  457|       |      /* Copy colliding node into free node and free main node. */
  458|   177k|      freenode->val = n->val;
  459|   177k|      freenode->key = n->key;
  460|   177k|      freenode->next = n->next;
  461|   177k|      setmref(n->next, NULL);
  ------------------
  |  |   39|   177k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  462|   177k|      setnilV(&n->val);
  ------------------
  |  |  872|   177k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  463|       |      /* Rechain pseudo-resurrected string keys with colliding hashes. */
  464|   213k|      while (nextnode(freenode)) {
  ------------------
  |  |  516|   213k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   213k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (516:21): [True: 35.9k, False: 177k]
  |  |  ------------------
  ------------------
  465|  35.9k|	Node *nn = nextnode(freenode);
  ------------------
  |  |  516|  35.9k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  35.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  466|  35.9k|	if (!tvisnil(&nn->val) && hashkey(t, &nn->key) == n) {
  ------------------
  |  |  782|  71.8k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (466:6): [True: 35.9k, False: 0]
  |  Branch (466:28): [True: 0, False: 35.9k]
  ------------------
  467|      0|	  freenode->next = nn->next;
  468|      0|	  nn->next = n->next;
  469|      0|	  setmref(n->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  470|       |	  /*
  471|       |	  ** Rechaining a resurrected string key creates a new dilemma:
  472|       |	  ** Another string key may have originally been resurrected via
  473|       |	  ** _any_ of the previous nodes as a chain anchor. Including
  474|       |	  ** a node that had to be moved, which makes them unreachable.
  475|       |	  ** It's not feasible to check for all previous nodes, so rechain
  476|       |	  ** any string key that's currently in a non-main positions.
  477|       |	  */
  478|      0|	  while ((nn = nextnode(freenode))) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (478:11): [True: 0, False: 0]
  ------------------
  479|      0|	    if (!tvisnil(&nn->val)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (479:10): [True: 0, False: 0]
  ------------------
  480|      0|	      Node *mn = hashkey(t, &nn->key);
  481|      0|	      if (mn != freenode && mn != nn) {
  ------------------
  |  Branch (481:12): [True: 0, False: 0]
  |  Branch (481:30): [True: 0, False: 0]
  ------------------
  482|      0|		freenode->next = nn->next;
  483|      0|		nn->next = mn->next;
  484|      0|		setmref(mn->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  485|      0|	      } else {
  486|      0|		freenode = nn;
  487|      0|	      }
  488|      0|	    } else {
  489|      0|	      freenode = nn;
  490|      0|	    }
  491|      0|	  }
  492|      0|	  break;
  493|  35.9k|	} else {
  494|  35.9k|	  freenode = nn;
  495|  35.9k|	}
  496|  35.9k|      }
  497|  1.00M|    } else {  /* Otherwise use free node. */
  498|  1.00M|      setmrefr(freenode->next, n->next);  /* Insert into chain. */
  ------------------
  |  |   41|  1.00M|#define setmrefr(r, v)	((r).ptr64 = (v).ptr64)
  ------------------
  499|  1.00M|      setmref(n->next, freenode);
  ------------------
  |  |   39|  1.00M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  500|  1.00M|      n = freenode;
  501|  1.00M|    }
  502|  1.17M|  }
  503|  6.18M|  n->key.u64 = key->u64;
  504|  6.18M|  if (LJ_UNLIKELY(tvismzero(&n->key)))
  ------------------
  |  |  146|  6.18M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 6.18M]
  |  |  ------------------
  ------------------
  505|      0|    n->key.u64 = 0;
  506|  6.18M|  lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|  6.18M|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  6.18M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 4.42k, False: 6.17M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|  4.42k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  4.42k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  507|  6.18M|  lj_assertL(tvisnil(&n->val), "new hash slot is not empty");
  ------------------
  |  |  365|  6.18M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.18M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 6.18M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.18M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  508|  6.18M|  return &n->val;
  509|  6.18M|}
lj_tab_setinth:
  512|  28.0k|{
  513|  28.0k|  TValue k;
  514|  28.0k|  Node *n;
  515|  28.0k|  k.n = (lua_Number)key;
  516|  28.0k|  n = hashnum(t, &k);
  ------------------
  |  |   45|  28.0k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  28.0k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  517|  30.7k|  do {
  518|  30.7k|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  804|  61.4k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  30.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  30.7k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  30.7k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 3.55k, False: 27.1k]
  |  |  ------------------
  ------------------
  |  Branch (518:29): [True: 2.59k, False: 962]
  ------------------
  519|  2.59k|      return &n->val;
  520|  30.7k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  28.1k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  28.1k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (520:12): [True: 2.68k, False: 25.4k]
  ------------------
  521|  25.4k|  return lj_tab_newkey(L, t, &k);
  522|  28.0k|}
lj_tab_setstr:
  525|  6.54M|{
  526|  6.54M|  TValue k;
  527|  6.54M|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|  6.54M|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  528|  6.98M|  do {
  529|  6.98M|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  795|  13.9M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  6.98M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  6.98M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 2.26M, False: 4.71M]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  859|  2.26M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  2.26M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.26M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.26M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.26M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.26M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (529:29): [True: 1.33M, False: 932k]
  ------------------
  530|  1.33M|      return &n->val;
  531|  6.98M|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  5.64M|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  5.64M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (531:12): [True: 439k, False: 5.20M]
  ------------------
  532|  5.20M|  setstrV(L, &k, key);
  533|  5.20M|  return lj_tab_newkey(L, t, &k);
  534|  6.54M|}
lj_tab_set:
  537|  2.71M|{
  538|  2.71M|  Node *n;
  539|  2.71M|  t->nomm = 0;  /* Invalidate negative metamethod cache. */
  540|  2.71M|  if (tvisstr(key)) {
  ------------------
  |  |  795|  2.71M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  2.71M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  2.71M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 2.18M, False: 533k]
  |  |  ------------------
  ------------------
  541|  2.18M|    return lj_tab_setstr(L, t, strV(key));
  ------------------
  |  |  859|  2.18M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  2.18M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.18M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.18M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.18M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.18M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  542|  2.18M|  } else if (tvisint(key)) {
  ------------------
  |  |  803|   533k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  1.06M|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  543|      0|    return lj_tab_setint(L, t, intV(key));
  ------------------
  |  |   84|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (79:35): [Folded - Ignored]
  |  |  |  |  |  Branch (79:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:47): [Folded - Ignored]
  |  |  |  |  |  Branch (80:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (84:74): [Folded - Ignored]
  |  |  |  Branch (84:74): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  544|   533k|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|   533k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   533k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   533k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   533k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 56.8k, False: 477k]
  |  |  ------------------
  ------------------
  545|  56.8k|    lua_Number nk = numV(key);
  ------------------
  |  |  866|  56.8k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  56.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  56.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  56.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 56.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  56.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  546|  56.8k|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|  56.8k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  547|  56.8k|    if (nk == (lua_Number)k)
  ------------------
  |  Branch (547:9): [True: 45.9k, False: 10.9k]
  ------------------
  548|  45.9k|      return lj_tab_setint(L, t, k);
  ------------------
  |  |   84|  45.9k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   79|  45.9k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 35.7k, False: 10.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   80|  35.7k|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|  35.7k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|  35.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  549|  10.9k|    if (tvisnan(key))
  ------------------
  |  |  812|  10.9k|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 0, False: 10.9k]
  |  |  ------------------
  ------------------
  550|      0|      lj_err_msg(L, LJ_ERR_NANIDX);
  551|       |    /* Else use the generic lookup. */
  552|   477k|  } else if (tvisnil(key)) {
  ------------------
  |  |  782|   477k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 477k]
  |  |  ------------------
  ------------------
  553|      0|    lj_err_msg(L, LJ_ERR_NILIDX);
  554|      0|  }
  555|   488k|  n = hashkey(t, key);
  556|   874k|  do {
  557|   874k|    if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (557:9): [True: 126k, False: 748k]
  ------------------
  558|   126k|      return &n->val;
  559|   874k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|   748k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   748k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (559:12): [True: 386k, False: 361k]
  ------------------
  560|   361k|  return lj_tab_newkey(L, t, key);
  561|   488k|}
lj_tab.c:newtab:
   82|   561k|{
   83|   561k|  GCtab *t;
   84|       |  /* First try to colocate the array part. */
   85|   561k|  if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|   561k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
                if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|  34.5k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (85:7): [Folded - Ignored]
  |  Branch (85:31): [True: 34.5k, False: 526k]
  |  Branch (85:44): [True: 34.4k, False: 81]
  ------------------
   86|  34.4k|    Node *nilnode;
   87|  34.4k|    lj_assertL((sizeof(GCtab) & 7) == 0, "bad GCtab size");
  ------------------
  |  |  365|  34.4k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  34.4k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|  34.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   88|  34.4k|    t = (GCtab *)lj_mem_newgco(L, sizetabcolo(asize));
  ------------------
  |  |  513|  34.4k|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
   89|  34.4k|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|  34.4k|#define LJ_TTAB			(~11u)
  ------------------
   90|  34.4k|    t->nomm = (uint8_t)~0;
   91|  34.4k|    t->colo = (int8_t)asize;
   92|  34.4k|    setmref(t->array, (TValue *)((char *)t + sizeof(GCtab)));
  ------------------
  |  |   39|  34.4k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   93|  34.4k|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|  34.4k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   94|  34.4k|    t->asize = asize;
   95|  34.4k|    t->hmask = 0;
   96|  34.4k|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  705|  34.4k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  34.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   97|  34.4k|    setmref(t->node, nilnode);
  ------------------
  |  |   39|  34.4k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   98|  34.4k|#if LJ_GC64
   99|  34.4k|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|  34.4k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  100|  34.4k|#endif
  101|   526k|  } else {  /* Otherwise separately allocate the array part. */
  102|   526k|    Node *nilnode;
  103|   526k|    t = lj_mem_newobj(L, GCtab);
  ------------------
  |  |  132|   526k|#define lj_mem_newobj(L, t)	((t *)lj_mem_newgco(L, sizeof(t)))
  ------------------
  104|   526k|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|   526k|#define LJ_TTAB			(~11u)
  ------------------
  105|   526k|    t->nomm = (uint8_t)~0;
  106|   526k|    t->colo = 0;
  107|   526k|    setmref(t->array, NULL);
  ------------------
  |  |   39|   526k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|   526k|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|   526k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  109|   526k|    t->asize = 0;  /* In case the array allocation fails. */
  110|   526k|    t->hmask = 0;
  111|   526k|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  705|   526k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   526k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  112|   526k|    setmref(t->node, nilnode);
  ------------------
  |  |   39|   526k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  113|   526k|#if LJ_GC64
  114|   526k|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|   526k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  115|   526k|#endif
  116|   526k|    if (asize > 0) {
  ------------------
  |  Branch (116:9): [True: 81, False: 526k]
  ------------------
  117|     81|      if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|     81|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|     81|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (117:11): [True: 0, False: 81]
  ------------------
  118|      0|	lj_err_msg(L, LJ_ERR_TABOV);
  119|     81|      setmref(t->array, lj_mem_newvec(L, asize, TValue));
  ------------------
  |  |   39|     81|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  120|     81|      t->asize = asize;
  121|     81|    }
  122|   526k|  }
  123|   561k|  if (hbits)
  ------------------
  |  Branch (123:7): [True: 445k, False: 115k]
  ------------------
  124|   445k|    newhpart(L, t, hbits);
  125|   561k|  return t;
  126|   561k|}
lj_tab.c:clearapart:
   73|   561k|{
   74|   561k|  uint32_t i, asize = t->asize;
   75|   561k|  TValue *array = tvref(t->array);
  ------------------
  |  |  217|   561k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   561k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   76|   687k|  for (i = 0; i < asize; i++)
  ------------------
  |  Branch (76:15): [True: 126k, False: 561k]
  ------------------
   77|   126k|    setnilV(&array[i]);
  ------------------
  |  |  872|   126k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   78|   561k|}
lj_tab.c:clearhpart:
   59|   725k|{
   60|   725k|  uint32_t i, hmask = t->hmask;
   61|   725k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|   725k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   725k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   62|   725k|  lj_assertX(t->hmask != 0, "empty hash part");
  ------------------
  |  |  366|   725k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   725k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 725k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   725k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|  9.00M|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (63:15): [True: 8.28M, False: 725k]
  ------------------
   64|  8.28M|    Node *n = &node[i];
   65|  8.28M|    setmref(n->next, NULL);
  ------------------
  |  |   39|  8.28M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   66|  8.28M|    setnilV(&n->key);
  ------------------
  |  |  872|  8.28M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   67|  8.28M|    setnilV(&n->val);
  ------------------
  |  |  872|  8.28M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   68|  8.28M|  }
   69|   725k|}
lj_tab.c:newhpart:
   38|   725k|{
   39|   725k|  uint32_t hsize;
   40|   725k|  Node *node;
   41|   725k|  lj_assertL(hbits != 0, "zero hash size");
  ------------------
  |  |  365|   725k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   725k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 725k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   725k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   42|   725k|  if (hbits > LJ_MAX_HBITS)
  ------------------
  |  |   59|   725k|#define LJ_MAX_HBITS	26		/* Max. hash bits. */
  ------------------
  |  Branch (42:7): [True: 0, False: 725k]
  ------------------
   43|      0|    lj_err_msg(L, LJ_ERR_TABOV);
   44|   725k|  hsize = 1u << hbits;
   45|   725k|  node = lj_mem_newvec(L, hsize, Node);
  ------------------
  |  |  125|   725k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|   725k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   46|   725k|  setmref(t->node, node);
  ------------------
  |  |   39|   725k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   47|   725k|  setfreetop(t, node, &node[hsize]);
  ------------------
  |  |  519|   725k|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|   725k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   48|   725k|  t->hmask = hsize-1;
   49|   725k|}
lj_tab.c:hashkey:
   21|  8.16M|{
   22|  8.16M|  lj_assertX(!tvisint(key), "attempt to hash integer");
  ------------------
  |  |  366|  8.16M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  8.16M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  8.16M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   23|  8.16M|  if (tvisstr(key))
  ------------------
  |  |  795|  8.16M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  8.16M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  8.16M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 7.02M, False: 1.13M]
  |  |  ------------------
  ------------------
   24|  8.16M|    return hashstr(t, strV(key));
  ------------------
  |  |   42|  14.0M|#define hashstr(t, s)		hashmask(t, (s)->sid)
  |  |  ------------------
  |  |  |  Branch (42:37): [True: 7.02M, False: 0]
  |  |  ------------------
  ------------------
   25|  1.13M|  else if (tvisnum(key))
  ------------------
  |  |  804|  1.13M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  1.13M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.13M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.13M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 46.2k, False: 1.09M]
  |  |  ------------------
  ------------------
   26|  46.2k|    return hashnum(t, key);
  ------------------
  |  |   45|  46.2k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  46.2k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   27|  1.09M|  else if (tvisbool(key))
  ------------------
  |  |  789|  1.09M|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|  2.18M|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  1.09M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|  1.09M|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 0, False: 1.09M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|  1.09M|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  1.09M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|  1.09M|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 0, False: 1.09M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   28|      0|    return hashmask(t, boolV(key));
  ------------------
  |  |  837|      0|#define boolV(o)	check_exp(tvisbool(o), (LJ_TFALSE - itype(o)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   29|  1.09M|  else
   30|  1.09M|    return hashgcref(t, key->gcr);
  ------------------
  |  |   48|  1.09M|  hashlohi((t), (uint32_t)gcrefu(r), (uint32_t)(gcrefu(r) >> 32))
  |  |  ------------------
  |  |  |  |   44|  1.09M|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   31|       |  /* Only hash 32 bits of lightuserdata on a 64 bit CPU. Good enough? */
   32|  8.16M|}
lj_tab.c:rehashtab:
  358|   279k|{
  359|   279k|  uint32_t bins[LJ_MAX_ABITS];
  360|   279k|  uint32_t total, asize, na, i;
  361|  8.10M|  for (i = 0; i < LJ_MAX_ABITS; i++) bins[i] = 0;
  ------------------
  |  |   60|  8.10M|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  ------------------
  |  Branch (361:15): [True: 7.82M, False: 279k]
  ------------------
  362|   279k|  asize = countarray(t, bins);
  363|   279k|  total = 1 + asize;
  364|   279k|  total += counthash(t, bins, &asize);
  365|   279k|  asize += countint(ek, bins);
  366|   279k|  na = bestasize(bins, &asize);
  367|   279k|  total -= na;
  368|   279k|  lj_tab_resize(L, t, asize, hsize2hbits(total));
  ------------------
  |  |   53|   279k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|   196k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 278k, False: 806]
  |  |  |  Branch (53:32): [True: 81.7k, False: 196k]
  |  |  ------------------
  ------------------
  369|   279k|}
lj_tab.c:countarray:
  309|   279k|{
  310|   279k|  uint32_t na, b, i;
  311|   279k|  if (t->asize == 0) return 0;
  ------------------
  |  Branch (311:7): [True: 261k, False: 17.5k]
  ------------------
  312|  36.0k|  for (na = i = b = 0; b < LJ_MAX_ABITS; b++) {
  ------------------
  |  |   60|  36.0k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  ------------------
  |  Branch (312:24): [True: 36.0k, False: 0]
  ------------------
  313|  36.0k|    uint32_t n, top = 2u << b;
  314|  36.0k|    TValue *array;
  315|  36.0k|    if (top >= t->asize) {
  ------------------
  |  Branch (315:9): [True: 32.2k, False: 3.88k]
  ------------------
  316|  32.2k|      top = t->asize-1;
  317|  32.2k|      if (i > top)
  ------------------
  |  Branch (317:11): [True: 17.5k, False: 14.6k]
  ------------------
  318|  17.5k|	break;
  319|  32.2k|    }
  320|  18.5k|    array = tvref(t->array);
  ------------------
  |  |  217|  18.5k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  18.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  321|  60.8k|    for (n = 0; i <= top; i++)
  ------------------
  |  Branch (321:17): [True: 42.2k, False: 18.5k]
  ------------------
  322|  42.2k|      if (!tvisnil(&array[i]))
  ------------------
  |  |  782|  42.2k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (322:11): [True: 20.1k, False: 22.1k]
  ------------------
  323|  20.1k|	n++;
  324|  18.5k|    bins[b] += n;
  325|  18.5k|    na += n;
  326|  18.5k|  }
  327|  17.5k|  return na;
  328|   279k|}
lj_tab.c:counthash:
  331|   279k|{
  332|   279k|  uint32_t total, na, i, hmask = t->hmask;
  333|   279k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|   279k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   279k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  334|  1.48M|  for (total = na = 0, i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (334:31): [True: 1.20M, False: 279k]
  ------------------
  335|  1.20M|    Node *n = &node[i];
  336|  1.20M|    if (!tvisnil(&n->val)) {
  ------------------
  |  |  782|  1.20M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (336:9): [True: 1.12M, False: 82.5k]
  ------------------
  337|  1.12M|      na += countint(&n->key, bins);
  338|  1.12M|      total++;
  339|  1.12M|    }
  340|  1.20M|  }
  341|   279k|  *narray += na;
  342|   279k|  return total;
  343|   279k|}
lj_tab.c:countint:
  295|  1.40M|{
  296|  1.40M|  lj_assertX(!tvisint(key), "bad integer key");
  ------------------
  |  |  366|  1.40M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.40M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.40M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  297|  1.40M|  if (tvisnum(key)) {
  ------------------
  |  |  804|  1.40M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  1.40M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.40M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.40M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 8.77k, False: 1.39M]
  |  |  ------------------
  ------------------
  298|  8.77k|    lua_Number nk = numV(key);
  ------------------
  |  |  866|  8.77k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  8.77k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  8.77k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  8.77k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 8.77k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  8.77k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  299|  8.77k|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|  8.77k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  300|  8.77k|    if ((uint32_t)k < LJ_MAX_ASIZE && nk == (lua_Number)k) {
  ------------------
  |  |   61|  17.5k|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|  8.77k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (300:9): [True: 5.37k, False: 3.39k]
  |  Branch (300:39): [True: 5.11k, False: 264]
  ------------------
  301|  5.11k|      bins[(k > 2 ? lj_fls((uint32_t)(k-1)) : 0)]++;
  ------------------
  |  |  149|  3.57k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (301:13): [True: 3.57k, False: 1.53k]
  ------------------
  302|  5.11k|      return 1;
  303|  5.11k|    }
  304|  8.77k|  }
  305|  1.39M|  return 0;
  306|  1.40M|}
lj_tab.c:bestasize:
  346|   279k|{
  347|   279k|  uint32_t b, sum, na = 0, sz = 0, nn = *narray;
  348|   302k|  for (b = 0, sum = 0; 2*nn > (1u<<b) && sum != nn; b++)
  ------------------
  |  Branch (348:24): [True: 23.4k, False: 278k]
  |  Branch (348:42): [True: 22.7k, False: 723]
  ------------------
  349|  22.7k|    if (bins[b] > 0 && 2*(sum += bins[b]) > (1u<<b)) {
  ------------------
  |  Branch (349:9): [True: 20.8k, False: 1.87k]
  |  Branch (349:24): [True: 20.2k, False: 612]
  ------------------
  350|  20.2k|      sz = (2u<<b)+1;
  351|  20.2k|      na = sum;
  352|  20.2k|    }
  353|   279k|  *narray = sz;
  354|   279k|  return na;
  355|   279k|}

lj_ctype.c:hashrot:
   19|  1.39M|{
   20|  1.39M|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|  1.39M|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|  1.39M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|  1.39M|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|  1.39M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|  1.39M|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|  1.39M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|  1.39M|  return hi;
   32|  1.39M|}
lj_tab.c:hashmask:
   36|  16.7M|{
   37|  16.7M|  Node *n = noderef(t->node);
  ------------------
  |  |  515|  16.7M|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  16.7M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   38|  16.7M|  return &n[hash & t->hmask];
   39|  16.7M|}
lj_tab.c:hashrot:
   19|  1.16M|{
   20|  1.16M|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|  1.16M|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|  1.16M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|  1.16M|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|  1.16M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|  1.16M|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|  1.16M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|  1.16M|  return hi;
   32|  1.16M|}

lj_trace_initstate:
  307|  17.8k|{
  308|  17.8k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  17.8k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  17.8k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  17.8k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  309|  17.8k|  TValue *tv;
  310|       |
  311|       |  /* Initialize aligned SIMD constants. */
  312|  17.8k|  tv = LJ_KSIMD(J, LJ_KSIMD_ABS);
  ------------------
  |  |  403|  17.8k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  313|  17.8k|  tv[0].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  17.8k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  314|  17.8k|  tv[1].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  17.8k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  315|  17.8k|  tv = LJ_KSIMD(J, LJ_KSIMD_NEG);
  ------------------
  |  |  403|  17.8k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  316|  17.8k|  tv[0].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  17.8k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  317|  17.8k|  tv[1].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  17.8k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  318|       |
  319|       |  /* Initialize 32/64 bit constants. */
  320|  17.8k|#if LJ_TARGET_X86ORX64
  321|  17.8k|  J->k64[LJ_K64_TOBIT].u64 = U64x(43380000,00000000);
  ------------------
  |  |   94|  17.8k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  322|       |#if LJ_32
  323|       |  J->k64[LJ_K64_M2P64_31].u64 = U64x(c1e00000,00000000);
  324|       |#endif
  325|  17.8k|  J->k64[LJ_K64_2P64].u64 = U64x(43f00000,00000000);
  ------------------
  |  |   94|  17.8k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  326|  17.8k|  J->k32[LJ_K32_M2P64_31] = LJ_64 ? 0xdf800000 : 0xcf000000;
  ------------------
  |  |  640|  17.8k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  327|  17.8k|#endif
  328|  17.8k|#if LJ_TARGET_X86ORX64 || LJ_TARGET_MIPS64
  329|  17.8k|  J->k64[LJ_K64_M2P64].u64 = U64x(c3f00000,00000000);
  ------------------
  |  |   94|  17.8k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  330|  17.8k|#endif
  331|       |#if LJ_TARGET_PPC
  332|       |  J->k32[LJ_K32_2P52_2P31] = 0x59800004;
  333|       |  J->k32[LJ_K32_2P52] = 0x59800000;
  334|       |#endif
  335|       |#if LJ_TARGET_PPC || LJ_TARGET_MIPS
  336|       |  J->k32[LJ_K32_2P31] = 0x4f000000;
  337|       |#endif
  338|       |#if LJ_TARGET_MIPS
  339|       |  J->k64[LJ_K64_2P31].u64 = U64x(41e00000,00000000);
  340|       |#if LJ_64
  341|       |  J->k64[LJ_K64_2P63].u64 = U64x(43e00000,00000000);
  342|       |  J->k32[LJ_K32_2P63] = 0x5f000000;
  343|       |  J->k32[LJ_K32_M2P64] = 0xdf800000;
  344|       |#endif
  345|       |#endif
  346|  17.8k|}
lj_trace_freestate:
  350|  17.8k|{
  351|  17.8k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  17.8k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  17.8k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  17.8k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  352|  17.8k|#ifdef LUA_USE_ASSERT
  353|  17.8k|  {  /* This assumes all traces have already been freed. */
  354|  17.8k|    ptrdiff_t i;
  355|  17.8k|    for (i = 1; i < (ptrdiff_t)J->sizetrace; i++)
  ------------------
  |  Branch (355:17): [True: 0, False: 17.8k]
  ------------------
  356|  17.8k|      lj_assertG(i == (ptrdiff_t)J->cur.traceno || traceref(J, i) == NULL,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  357|  17.8k|		 "trace still allocated");
  358|  17.8k|  }
  359|  17.8k|#endif
  360|  17.8k|  lj_mcode_free(J);
  361|  17.8k|  lj_mem_freevec(g, J->snapmapbuf, J->sizesnapmap, SnapEntry);
  ------------------
  |  |  130|  17.8k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  362|  17.8k|  lj_mem_freevec(g, J->snapbuf, J->sizesnap, SnapShot);
  ------------------
  |  |  130|  17.8k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  363|  17.8k|  lj_mem_freevec(g, J->irbuf + J->irbotlim, J->irtoplim - J->irbotlim, IRIns);
  ------------------
  |  |  130|  17.8k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  364|  17.8k|  lj_mem_freevec(g, J->trace, J->sizetrace, GCRef);
  ------------------
  |  |  130|  17.8k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  365|  17.8k|}

lj_udata_new:
   15|  84.9k|{
   16|  84.9k|  GCudata *ud = lj_mem_newt(L, sizeof(GCudata) + sz, GCudata);
  ------------------
  |  |  133|  84.9k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  84.9k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   17|  84.9k|  global_State *g = G(L);
  ------------------
  |  |  705|  84.9k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  84.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   18|  84.9k|  newwhite(g, ud);  /* Not finalized. */
  ------------------
  |  |   40|  84.9k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|  84.9k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  84.9k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  84.9k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  84.9k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  84.9k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   19|  84.9k|  ud->gct = ~LJ_TUDATA;
  ------------------
  |  |  272|  84.9k|#define LJ_TUDATA		(~12u)
  ------------------
   20|  84.9k|  ud->udtype = UDTYPE_USERDATA;
   21|  84.9k|  ud->len = sz;
   22|       |  /* NOBARRIER: The GCudata is new (marked white). */
   23|  84.9k|  setgcrefnull(ud->metatable);
  ------------------
  |  |   76|  84.9k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   24|  84.9k|  setgcref(ud->env, obj2gco(env));
  ------------------
  |  |   72|  84.9k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   25|       |  /* Chain to userdata list (after main thread). */
   26|  84.9k|  setgcrefr(ud->nextgc, mainthread(g)->nextgc);
  ------------------
  |  |   77|  84.9k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   27|  84.9k|  setgcref(mainthread(g)->nextgc, obj2gco(ud));
  ------------------
  |  |   72|  84.9k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   28|  84.9k|  return ud;
   29|  84.9k|}
lj_udata_free:
   32|  84.9k|{
   33|  84.9k|  lj_mem_free(g, ud, sizeudata(ud));
  ------------------
  |  |  343|  84.9k|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  ------------------
   34|  84.9k|}

lj_vm_foldarith:
   51|  6.47k|{
   52|  6.47k|  switch (op) {
   53|    108|  case IR_ADD - IR_ADD: return x+y; break;
  ------------------
  |  Branch (53:3): [True: 108, False: 6.36k]
  ------------------
   54|  3.59k|  case IR_SUB - IR_ADD: return x-y; break;
  ------------------
  |  Branch (54:3): [True: 3.59k, False: 2.87k]
  ------------------
   55|  1.75k|  case IR_MUL - IR_ADD: return x*y; break;
  ------------------
  |  Branch (55:3): [True: 1.75k, False: 4.71k]
  ------------------
   56|    455|  case IR_DIV - IR_ADD: return x/y; break;
  ------------------
  |  Branch (56:3): [True: 455, False: 6.01k]
  ------------------
   57|    399|  case IR_MOD - IR_ADD: return x-lj_vm_floormul(x, y); break;
  ------------------
  |  Branch (57:3): [True: 399, False: 6.07k]
  ------------------
   58|    158|  case IR_POW - IR_ADD: return pow(x, y); break;
  ------------------
  |  Branch (58:3): [True: 158, False: 6.31k]
  ------------------
   59|      0|  case IR_NEG - IR_ADD: return -x; break;
  ------------------
  |  Branch (59:3): [True: 0, False: 6.47k]
  ------------------
   60|      0|  case IR_ABS - IR_ADD: return fabs(x); break;
  ------------------
  |  Branch (60:3): [True: 0, False: 6.47k]
  ------------------
   61|      0|#if LJ_HASJIT
   62|      0|  case IR_LDEXP - IR_ADD: return ldexp(x, (int)y); break;
  ------------------
  |  Branch (62:3): [True: 0, False: 6.47k]
  ------------------
   63|      0|  case IR_MIN - IR_ADD: return x < y ? x : y; break;
  ------------------
  |  Branch (63:3): [True: 0, False: 6.47k]
  |  Branch (63:32): [True: 0, False: 0]
  ------------------
   64|      0|  case IR_MAX - IR_ADD: return x > y ? x : y; break;
  ------------------
  |  Branch (64:3): [True: 0, False: 6.47k]
  |  Branch (64:32): [True: 0, False: 0]
  ------------------
   65|      0|#endif
   66|      0|  default: return x;
  ------------------
  |  Branch (66:3): [True: 0, False: 6.47k]
  ------------------
   67|  6.47k|  }
   68|  6.47k|}
lj_vmmath.c:lj_vm_floormul:
   46|    399|{
   47|    399|  return lj_vm_floor(x / y) * y;
   48|    399|}

_ZN6google8protobuf3Any13GetDescriptorEv:
   93|   986k|  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
   94|   986k|    return default_instance().GetMetadata().descriptor;
   95|   986k|  }
_ZN6google8protobuf3Any16default_instanceEv:
   99|   986k|  static const Any& default_instance() {
  100|   986k|    return *internal_default_instance();
  101|   986k|  }
_ZN6google8protobuf3Any25internal_default_instanceEv:
  102|   986k|  static inline const Any* internal_default_instance() {
  103|   986k|    return reinterpret_cast<const Any*>(
  104|   986k|               &_Any_default_instance_);
  105|   986k|  }

_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef10IdentifierEEEPT_PS1_:
  577|  15.4k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  15.4k|    static_assert(
  579|  15.4k|        InternalHelper<T>::is_arena_constructable::value,
  580|  15.4k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  15.4k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 15.4k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  15.4k|      return InternalHelper<T>::New();
  585|  15.4k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  15.4k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef10IdentifierEE3NewEv:
  491|  15.4k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  15.4k|      return new T(nullptr);
  493|  15.4k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef15IdentifiersListEEEPT_PS1_:
  577|  2.18k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  2.18k|    static_assert(
  579|  2.18k|        InternalHelper<T>::is_arena_constructable::value,
  580|  2.18k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  2.18k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 2.18k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  2.18k|      return InternalHelper<T>::New();
  585|  2.18k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  2.18k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef15IdentifiersListEE3NewEv:
  491|  2.18k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  2.18k|      return new T(nullptr);
  493|  2.18k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef9ParameterEEEPT_PS1_:
  577|  1.28k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  1.28k|    static_assert(
  579|  1.28k|        InternalHelper<T>::is_arena_constructable::value,
  580|  1.28k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  1.28k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 1.28k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  1.28k|      return InternalHelper<T>::New();
  585|  1.28k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  1.28k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef9ParameterEE3NewEv:
  491|  1.28k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  1.28k|      return new T(nullptr);
  493|  1.28k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef10ParametersEEEPT_PS1_:
  577|  3.04k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  3.04k|    static_assert(
  579|  3.04k|        InternalHelper<T>::is_arena_constructable::value,
  580|  3.04k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  3.04k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 3.04k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  3.04k|      return InternalHelper<T>::New();
  585|  3.04k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  3.04k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef10ParametersEE3NewEv:
  491|  3.04k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  3.04k|      return new T(nullptr);
  493|  3.04k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef14ParametersListEEEPT_PS1_:
  577|  5.18k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  5.18k|    static_assert(
  579|  5.18k|        InternalHelper<T>::is_arena_constructable::value,
  580|  5.18k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  5.18k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 5.18k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  5.18k|      return InternalHelper<T>::New();
  585|  5.18k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  5.18k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef14ParametersListEE3NewEv:
  491|  5.18k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  5.18k|      return new T(nullptr);
  493|  5.18k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef9SpecifierEEEPT_PS1_:
  577|  53.3k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  53.3k|    static_assert(
  579|  53.3k|        InternalHelper<T>::is_arena_constructable::value,
  580|  53.3k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  53.3k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 53.3k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  53.3k|      return InternalHelper<T>::New();
  585|  53.3k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  53.3k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef9SpecifierEE3NewEv:
  491|  53.3k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  53.3k|      return new T(nullptr);
  493|  53.3k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef14SpecifiersListEEEPT_PS1_:
  577|  30.9k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  30.9k|    static_assert(
  579|  30.9k|        InternalHelper<T>::is_arena_constructable::value,
  580|  30.9k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  30.9k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 30.9k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  30.9k|      return InternalHelper<T>::New();
  585|  30.9k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  30.9k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef14SpecifiersListEE3NewEv:
  491|  30.9k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  30.9k|      return new T(nullptr);
  493|  30.9k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef9QualifierEEEPT_PS1_:
  577|  7.05k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  7.05k|    static_assert(
  579|  7.05k|        InternalHelper<T>::is_arena_constructable::value,
  580|  7.05k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  7.05k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 7.05k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  7.05k|      return InternalHelper<T>::New();
  585|  7.05k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  7.05k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef9QualifierEE3NewEv:
  491|  7.05k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  7.05k|      return new T(nullptr);
  493|  7.05k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef14QualifiersListEEEPT_PS1_:
  577|  10.8k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  10.8k|    static_assert(
  579|  10.8k|        InternalHelper<T>::is_arena_constructable::value,
  580|  10.8k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  10.8k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 10.8k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  10.8k|      return InternalHelper<T>::New();
  585|  10.8k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  10.8k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef14QualifiersListEE3NewEv:
  491|  10.8k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  10.8k|      return new T(nullptr);
  493|  10.8k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef8BitfieldEEEPT_PS1_:
  577|  3.24k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  3.24k|    static_assert(
  579|  3.24k|        InternalHelper<T>::is_arena_constructable::value,
  580|  3.24k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  3.24k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 3.24k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  3.24k|      return InternalHelper<T>::New();
  585|  3.24k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  3.24k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef8BitfieldEE3NewEv:
  491|  3.24k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  3.24k|      return new T(nullptr);
  493|  3.24k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef18FunctionDeclaratorEEEPT_PS1_:
  577|  9.79k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  9.79k|    static_assert(
  579|  9.79k|        InternalHelper<T>::is_arena_constructable::value,
  580|  9.79k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  9.79k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 9.79k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  9.79k|      return InternalHelper<T>::New();
  585|  9.79k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  9.79k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef18FunctionDeclaratorEE3NewEv:
  491|  9.79k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  9.79k|      return new T(nullptr);
  493|  9.79k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef17PointerDeclaratorEEEPT_PS1_:
  577|  4.33k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  4.33k|    static_assert(
  579|  4.33k|        InternalHelper<T>::is_arena_constructable::value,
  580|  4.33k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  4.33k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 4.33k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  4.33k|      return InternalHelper<T>::New();
  585|  4.33k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  4.33k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef17PointerDeclaratorEE3NewEv:
  491|  4.33k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  4.33k|      return new T(nullptr);
  493|  4.33k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef15ArrayDeclaratorEEEPT_PS1_:
  577|  5.24k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  5.24k|    static_assert(
  579|  5.24k|        InternalHelper<T>::is_arena_constructable::value,
  580|  5.24k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  5.24k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 5.24k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  5.24k|      return InternalHelper<T>::New();
  585|  5.24k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  5.24k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef15ArrayDeclaratorEE3NewEv:
  491|  5.24k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  5.24k|      return new T(nullptr);
  493|  5.24k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef17FunctionSpecifierEEEPT_PS1_:
  577|  3.37k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  3.37k|    static_assert(
  579|  3.37k|        InternalHelper<T>::is_arena_constructable::value,
  580|  3.37k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  3.37k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 3.37k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  3.37k|      return InternalHelper<T>::New();
  585|  3.37k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  3.37k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef17FunctionSpecifierEE3NewEv:
  491|  3.37k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  3.37k|      return new T(nullptr);
  493|  3.37k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef21StorageClassSpecifierEEEPT_PS1_:
  577|  3.60k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  3.60k|    static_assert(
  579|  3.60k|        InternalHelper<T>::is_arena_constructable::value,
  580|  3.60k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  3.60k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 3.60k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  3.60k|      return InternalHelper<T>::New();
  585|  3.60k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  3.60k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef21StorageClassSpecifierEE3NewEv:
  491|  3.60k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  3.60k|      return new T(nullptr);
  493|  3.60k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef14TypeOfOperatorEEEPT_PS1_:
  577|  2.45k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  2.45k|    static_assert(
  579|  2.45k|        InternalHelper<T>::is_arena_constructable::value,
  580|  2.45k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  2.45k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 2.45k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  2.45k|      return InternalHelper<T>::New();
  585|  2.45k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  2.45k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef14TypeOfOperatorEE3NewEv:
  491|  2.45k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  2.45k|      return new T(nullptr);
  493|  2.45k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef8EnumTypeEEEPT_PS1_:
  577|  1.80k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  1.80k|    static_assert(
  579|  1.80k|        InternalHelper<T>::is_arena_constructable::value,
  580|  1.80k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  1.80k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 1.80k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  1.80k|      return InternalHelper<T>::New();
  585|  1.80k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  1.80k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef8EnumTypeEE3NewEv:
  491|  1.80k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  1.80k|      return new T(nullptr);
  493|  1.80k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef15StaticAssertionEEEPT_PS1_:
  577|  28.1k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  28.1k|    static_assert(
  579|  28.1k|        InternalHelper<T>::is_arena_constructable::value,
  580|  28.1k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  28.1k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 28.1k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  28.1k|      return InternalHelper<T>::New();
  585|  28.1k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  28.1k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef15StaticAssertionEE3NewEv:
  491|  28.1k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  28.1k|      return new T(nullptr);
  493|  28.1k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef17StructDeclarationEEEPT_PS1_:
  577|  35.1k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  35.1k|    static_assert(
  579|  35.1k|        InternalHelper<T>::is_arena_constructable::value,
  580|  35.1k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  35.1k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 35.1k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  35.1k|      return InternalHelper<T>::New();
  585|  35.1k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  35.1k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef17StructDeclarationEE3NewEv:
  491|  35.1k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  35.1k|      return new T(nullptr);
  493|  35.1k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef21StructDeclarationListEEEPT_PS1_:
  577|  18.2k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  18.2k|    static_assert(
  579|  18.2k|        InternalHelper<T>::is_arena_constructable::value,
  580|  18.2k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  18.2k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 18.2k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  18.2k|      return InternalHelper<T>::New();
  585|  18.2k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  18.2k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef21StructDeclarationListEE3NewEv:
  491|  18.2k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  18.2k|      return new T(nullptr);
  493|  18.2k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef9UnionTypeEEEPT_PS1_:
  577|  15.6k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  15.6k|    static_assert(
  579|  15.6k|        InternalHelper<T>::is_arena_constructable::value,
  580|  15.6k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  15.6k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 15.6k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  15.6k|      return InternalHelper<T>::New();
  585|  15.6k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  15.6k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef9UnionTypeEE3NewEv:
  491|  15.6k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  15.6k|      return new T(nullptr);
  493|  15.6k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef10StructTypeEEEPT_PS1_:
  577|  2.58k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  2.58k|    static_assert(
  579|  2.58k|        InternalHelper<T>::is_arena_constructable::value,
  580|  2.58k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  2.58k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 2.58k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  2.58k|      return InternalHelper<T>::New();
  585|  2.58k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  2.58k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef10StructTypeEE3NewEv:
  491|  2.58k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  2.58k|      return new T(nullptr);
  493|  2.58k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef11TypedefTypeEEEPT_PS1_:
  577|  1.58k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  1.58k|    static_assert(
  579|  1.58k|        InternalHelper<T>::is_arena_constructable::value,
  580|  1.58k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  1.58k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 1.58k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  1.58k|      return InternalHelper<T>::New();
  585|  1.58k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  1.58k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef11TypedefTypeEE3NewEv:
  491|  1.58k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  1.58k|      return new T(nullptr);
  493|  1.58k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef14ArithmeticTypeEEEPT_PS1_:
  577|  3.47k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  3.47k|    static_assert(
  579|  3.47k|        InternalHelper<T>::is_arena_constructable::value,
  580|  3.47k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  3.47k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 3.47k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  3.47k|      return InternalHelper<T>::New();
  585|  3.47k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  3.47k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef14ArithmeticTypeEE3NewEv:
  491|  3.47k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  3.47k|      return new T(nullptr);
  493|  3.47k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef10AtomicTypeEEEPT_PS1_:
  577|  1.16k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  1.16k|    static_assert(
  579|  1.16k|        InternalHelper<T>::is_arena_constructable::value,
  580|  1.16k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  1.16k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 1.16k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  1.16k|      return InternalHelper<T>::New();
  585|  1.16k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  1.16k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef10AtomicTypeEE3NewEv:
  491|  1.16k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  1.16k|      return new T(nullptr);
  493|  1.16k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef13TypeSpecifierEEEPT_PS1_:
  577|  32.2k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  32.2k|    static_assert(
  579|  32.2k|        InternalHelper<T>::is_arena_constructable::value,
  580|  32.2k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  32.2k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 32.2k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  32.2k|      return InternalHelper<T>::New();
  585|  32.2k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  32.2k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef13TypeSpecifierEE3NewEv:
  491|  32.2k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  32.2k|      return new T(nullptr);
  493|  32.2k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef13TypeQualifierEEEPT_PS1_:
  577|  4.31k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  4.31k|    static_assert(
  579|  4.31k|        InternalHelper<T>::is_arena_constructable::value,
  580|  4.31k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  4.31k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 4.31k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  4.31k|      return InternalHelper<T>::New();
  585|  4.31k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  4.31k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef13TypeQualifierEE3NewEv:
  491|  4.31k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  4.31k|      return new T(nullptr);
  493|  4.31k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef18AlignmentSpecifierEEEPT_PS1_:
  577|  4.68k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  4.68k|    static_assert(
  579|  4.68k|        InternalHelper<T>::is_arena_constructable::value,
  580|  4.68k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  4.68k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 4.68k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  4.68k|      return InternalHelper<T>::New();
  585|  4.68k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  4.68k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef18AlignmentSpecifierEE3NewEv:
  491|  4.68k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  4.68k|      return new T(nullptr);
  493|  4.68k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef14DeclaratorAttrEEEPT_PS1_:
  577|  4.43k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  4.43k|    static_assert(
  579|  4.43k|        InternalHelper<T>::is_arena_constructable::value,
  580|  4.43k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  4.43k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 4.43k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  4.43k|      return InternalHelper<T>::New();
  585|  4.43k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  4.43k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef14DeclaratorAttrEE3NewEv:
  491|  4.43k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  4.43k|      return new T(nullptr);
  493|  4.43k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef21DeclaratorParenthesesEEEPT_PS1_:
  577|  3.07k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  3.07k|    static_assert(
  579|  3.07k|        InternalHelper<T>::is_arena_constructable::value,
  580|  3.07k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  3.07k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 3.07k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  3.07k|      return InternalHelper<T>::New();
  585|  3.07k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  3.07k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef21DeclaratorParenthesesEE3NewEv:
  491|  3.07k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  3.07k|      return new T(nullptr);
  493|  3.07k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef10DeclaratorEEEPT_PS1_:
  577|  40.4k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  40.4k|    static_assert(
  579|  40.4k|        InternalHelper<T>::is_arena_constructable::value,
  580|  40.4k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  40.4k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 40.4k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  40.4k|      return InternalHelper<T>::New();
  585|  40.4k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  40.4k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef10DeclaratorEE3NewEv:
  491|  40.4k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  40.4k|      return new T(nullptr);
  493|  40.4k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef11InitializerEEEPT_PS1_:
  577|  2.93k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  2.93k|    static_assert(
  579|  2.93k|        InternalHelper<T>::is_arena_constructable::value,
  580|  2.93k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  2.93k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 2.93k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  2.93k|      return InternalHelper<T>::New();
  585|  2.93k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  2.93k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef11InitializerEE3NewEv:
  491|  2.93k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  2.93k|      return new T(nullptr);
  493|  2.93k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef26DeclaratorsAndInitializersEEEPT_PS1_:
  577|  12.6k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  12.6k|    static_assert(
  579|  12.6k|        InternalHelper<T>::is_arena_constructable::value,
  580|  12.6k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  12.6k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 12.6k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  12.6k|      return InternalHelper<T>::New();
  585|  12.6k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  12.6k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef26DeclaratorsAndInitializersEE3NewEv:
  491|  12.6k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  12.6k|      return new T(nullptr);
  493|  12.6k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef21SpecifierAndQualifierEEEPT_PS1_:
  577|  37.2k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  37.2k|    static_assert(
  579|  37.2k|        InternalHelper<T>::is_arena_constructable::value,
  580|  37.2k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  37.2k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 37.2k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  37.2k|      return InternalHelper<T>::New();
  585|  37.2k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  37.2k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef21SpecifierAndQualifierEE3NewEv:
  491|  37.2k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  37.2k|      return new T(nullptr);
  493|  37.2k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef27SpecifiersAndQualifiersListEEEPT_PS1_:
  577|  25.1k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  25.1k|    static_assert(
  579|  25.1k|        InternalHelper<T>::is_arena_constructable::value,
  580|  25.1k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  25.1k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 25.1k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  25.1k|      return InternalHelper<T>::New();
  585|  25.1k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  25.1k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef27SpecifiersAndQualifiersListEE3NewEv:
  491|  25.1k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  25.1k|      return new T(nullptr);
  493|  25.1k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef11AttrSpecSeqEEEPT_PS1_:
  577|  6.60k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  6.60k|    static_assert(
  579|  6.60k|        InternalHelper<T>::is_arena_constructable::value,
  580|  6.60k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  6.60k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 6.60k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  6.60k|      return InternalHelper<T>::New();
  585|  6.60k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  6.60k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef11AttrSpecSeqEE3NewEv:
  491|  6.60k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  6.60k|      return new T(nullptr);
  493|  6.60k|    }
_ZN6google8protobuf5Arena21CreateMessageInternalIN4cdef11DeclarationEEEPT_PS1_:
  577|  32.2k|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|  32.2k|    static_assert(
  579|  32.2k|        InternalHelper<T>::is_arena_constructable::value,
  580|  32.2k|        "CreateMessage can only construct types that are ArenaConstructable");
  581|  32.2k|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 32.2k, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|  32.2k|      return InternalHelper<T>::New();
  585|  32.2k|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|  32.2k|  }
_ZN6google8protobuf5Arena14InternalHelperIN4cdef11DeclarationEE3NewEv:
  491|  32.2k|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|  32.2k|      return new T(nullptr);
  493|  32.2k|    }

_ZN6google8protobuf8internal15TaggedStringPtrC2EPNS1_21ExplicitlyConstructedINSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEELm8EEE:
  133|  48.1k|      : ptr_(ptr) {}
_ZNK6google8protobuf8internal15TaggedStringPtr3GetEv:
  189|  43.3k|  inline std::string* Get() const {
  190|  43.3k|    return reinterpret_cast<std::string*>(as_int() & ~kMask);
  191|  43.3k|  }
_ZNK6google8protobuf8internal15TaggedStringPtr6as_intEv:
  210|   136k|  uintptr_t as_int() const { return reinterpret_cast<uintptr_t>(ptr_); }
_ZNK6google8protobuf8internal14ArenaStringPtr3GetEv:
  295|  43.3k|  PROTOBUF_NDEBUG_INLINE const std::string& Get() const {
  296|       |    // Unconditionally mask away the tag.
  297|  43.3k|    return *tagged_ptr_.Get();
  298|  43.3k|  }
_ZN6google8protobuf8internal14ArenaStringPtr11InitDefaultEv:
  391|  48.1k|inline void ArenaStringPtr::InitDefault() {
  392|  48.1k|  tagged_ptr_ = TaggedStringPtr(&fixed_address_empty_string);
  393|  48.1k|}

_ZNK6google8protobuf10Descriptor4fileEv:
 2083|   615k|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf10Descriptor11field_countEv:
 2083|  4.83M|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf10Descriptor5fieldEi:
 2096|  3.23M|  inline TYPE CLASS::FIELD(int index) const { return FIELD##s_ + index; }
_ZNK6google8protobuf10Descriptor7optionsEv:
 2099|  2.37M|  inline const TYPE& CLASS::options() const { return *options_; }
_ZNK6google8protobuf15OneofDescriptor11field_countEv:
 2083|  6.21M|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf15OneofDescriptor5fieldEi:
 2096|   114k|  inline TYPE CLASS::FIELD(int index) const { return FIELD##s_ + index; }
_ZNK6google8protobuf14EnumDescriptor11value_countEv:
 2083|    119|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf14EnumDescriptor5valueEi:
 2096|    101|  inline TYPE CLASS::FIELD(int index) const { return FIELD##s_ + index; }
_ZNK6google8protobuf19EnumValueDescriptor4typeEv:
 2083|    272|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf14FileDescriptor4poolEv:
 2083|     40|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf15FieldDescriptor16containing_oneofEv:
 2268|  14.7M|inline const OneofDescriptor* FieldDescriptor::containing_oneof() const {
 2269|  14.7M|  return is_oneof_ ? scope_.containing_oneof : nullptr;
  ------------------
  |  Branch (2269:10): [True: 9.51M, False: 5.23M]
  ------------------
 2270|  14.7M|}
_ZNK6google8protobuf15FieldDescriptor5labelEv:
 2282|  10.2M|inline FieldDescriptor::Label FieldDescriptor::label() const {
 2283|  10.2M|  return static_cast<Label>(label_);
 2284|  10.2M|}
_ZNK6google8protobuf15FieldDescriptor4typeEv:
 2286|  9.94M|inline FieldDescriptor::Type FieldDescriptor::type() const {
 2287|  9.94M|  if (type_once_) {
  ------------------
  |  Branch (2287:7): [True: 0, False: 9.94M]
  ------------------
 2288|      0|    internal::call_once(*type_once_, &FieldDescriptor::TypeOnceInit, this);
 2289|      0|  }
 2290|  9.94M|  return static_cast<Type>(type_);
 2291|  9.94M|}
_ZNK6google8protobuf15FieldDescriptor11is_requiredEv:
 2293|  1.61M|inline bool FieldDescriptor::is_required() const {
 2294|  1.61M|  return label() == LABEL_REQUIRED;
 2295|  1.61M|}
_ZNK6google8protobuf15FieldDescriptor11is_repeatedEv:
 2301|  4.17M|inline bool FieldDescriptor::is_repeated() const {
 2302|  4.17M|  return label() == LABEL_REPEATED;
 2303|  4.17M|}
_ZNK6google8protobuf15FieldDescriptor8cpp_typeEv:
 2394|  6.44M|inline FieldDescriptor::CppType FieldDescriptor::cpp_type() const {
 2395|  6.44M|  return kTypeToCppTypeMap[type()];
 2396|  6.44M|}

_ZNK6google8protobuf14MessageOptions19_internal_map_entryEv:
13032|  2.37M|inline bool MessageOptions::_internal_map_entry() const {
13033|  2.37M|  return _impl_.map_entry_;
13034|  2.37M|}
_ZNK6google8protobuf14MessageOptions9map_entryEv:
13035|  2.37M|inline bool MessageOptions::map_entry() const {
13036|       |  // @@protoc_insertion_point(field_get:google.protobuf.MessageOptions.map_entry)
13037|  2.37M|  return _internal_map_entry();
13038|  2.37M|}

_ZN6google8protobuf8internal14ZeroFieldsBaseC2EPNS0_5ArenaEb:
   67|  6.97k|      : Message(arena, is_message_owned) {}

_ZN6google8protobuf8internal10CachedSize3SetEi:
  191|      6|  void Set(int size) { size_.store(size, std::memory_order_relaxed); }
_ZN6google8protobuf8internal17AllAreInitializedIN4cdef10IdentifierEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|  3.98k|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|  9.90k|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 5.91k, False: 3.98k]
  ------------------
  116|  5.91k|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 5.91k]
  ------------------
  117|  5.91k|  }
  118|  3.98k|  return true;
  119|  3.98k|}
_ZN6google8protobuf8internal17AllAreInitializedIN4cdef9ParameterEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|  3.04k|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|  4.33k|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 1.28k, False: 3.04k]
  ------------------
  116|  1.28k|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 1.28k]
  ------------------
  117|  1.28k|  }
  118|  3.04k|  return true;
  119|  3.04k|}
_ZN6google8protobuf8internal17AllAreInitializedIN4cdef9SpecifierEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|  30.9k|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|  84.3k|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 53.3k, False: 30.9k]
  ------------------
  116|  53.3k|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 53.3k]
  ------------------
  117|  53.3k|  }
  118|  30.9k|  return true;
  119|  30.9k|}
_ZN6google8protobuf8internal17AllAreInitializedIN4cdef17StructDeclarationEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|  18.2k|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|  53.4k|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 35.1k, False: 18.2k]
  ------------------
  116|  35.1k|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 35.1k]
  ------------------
  117|  35.1k|  }
  118|  18.2k|  return true;
  119|  18.2k|}
_ZN6google8protobuf8internal17AllAreInitializedIN4cdef10DeclaratorEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|  12.6k|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|  35.9k|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 23.2k, False: 12.6k]
  ------------------
  116|  23.2k|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 23.2k]
  ------------------
  117|  23.2k|  }
  118|  12.6k|  return true;
  119|  12.6k|}
_ZN6google8protobuf8internal17AllAreInitializedIN4cdef21SpecifierAndQualifierEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|  25.1k|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|  62.4k|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 37.2k, False: 25.1k]
  ------------------
  116|  37.2k|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 37.2k]
  ------------------
  117|  37.2k|  }
  118|  25.1k|  return true;
  119|  25.1k|}
_ZN6google8protobuf8internal17AllAreInitializedIN4cdef11DeclarationEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|  17.8k|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|  50.0k|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 32.2k, False: 17.8k]
  ------------------
  116|  32.2k|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 32.2k]
  ------------------
  117|  32.2k|  }
  118|  17.8k|  return true;
  119|  17.8k|}

_ZNK6google8protobuf8internal7HasBitsILm1EEixEi:
   61|   581k|  PROTOBUF_NDEBUG_INLINE const uint32_t& operator[](int index) const {
   62|   581k|    return has_bits_[index];
   63|   581k|  }
_ZN6google8protobuf8internal7HasBitsILm1EEixEi:
   57|  4.60k|  PROTOBUF_NDEBUG_INLINE uint32_t& operator[](int index) {
   58|  4.60k|    return has_bits_[index];
   59|  4.60k|  }
_ZN6google8protobuf8internal7HasBitsILm1EEC2Ev:
   51|   192k|  PROTOBUF_NDEBUG_INLINE constexpr HasBits() : has_bits_{} {}
_ZN6google8protobuf8internal7HasBitsILm1EE5ClearEv:
   53|     15|  PROTOBUF_NDEBUG_INLINE void Clear() {
   54|     15|    memset(has_bits_, 0, sizeof(has_bits_));
   55|     15|  }
_ZN6google8protobuf8internal7HasBitsILm1EE2OrERKS3_:
   73|  1.26k|  void Or(const HasBits<doublewords>& rhs) {
   74|  2.52k|    for (size_t i = 0; i < doublewords; i++) has_bits_[i] |= rhs[i];
  ------------------
  |  Branch (74:24): [True: 1.26k, False: 1.26k]
  ------------------
   75|  1.26k|  }

_ZN6google8protobuf2io19EpsCopyOutputStream11EnsureSpaceEPh:
  673|      7|  PROTOBUF_NODISCARD uint8_t* EnsureSpace(uint8_t* ptr) {
  674|      7|    if (PROTOBUF_PREDICT_FALSE(ptr >= end_)) {
  ------------------
  |  |  490|      7|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 7]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 7]
  |  |  ------------------
  ------------------
  675|      0|      return EnsureSpaceFallback(ptr);
  676|      0|    }
  677|      7|    return ptr;
  678|      7|  }
_ZN6google8protobuf2io19EpsCopyOutputStream23WriteStringMaybeAliasedEjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPh:
  707|     10|                                   uint8_t* ptr) {
  708|     10|    std::ptrdiff_t size = s.size();
  709|     10|    if (PROTOBUF_PREDICT_FALSE(
  ------------------
  |  |  490|     20|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 10]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:64): [True: 0, False: 10]
  |  |  |  Branch (490:64): [True: 0, False: 10]
  |  |  ------------------
  ------------------
  710|     10|            size >= 128 || end_ - ptr + 16 - TagSize(num << 3) - 1 < size)) {
  711|      0|      return WriteStringMaybeAliasedOutline(num, s, ptr);
  712|      0|    }
  713|     10|    ptr = UnsafeVarint((num << 3) | 2, ptr);
  714|     10|    *ptr++ = static_cast<uint8_t>(size);
  715|     10|    std::memcpy(ptr, s.data(), size);
  716|     10|    return ptr + size;
  717|     10|  }
_ZN6google8protobuf2io19EpsCopyOutputStream7TagSizeEj:
  846|     10|  static constexpr int TagSize(uint32_t tag) {
  847|     10|    return (tag < (1 << 7))    ? 1
  ------------------
  |  Branch (847:12): [True: 6, False: 4]
  ------------------
  848|     10|           : (tag < (1 << 14)) ? 2
  ------------------
  |  Branch (848:14): [True: 4, False: 0]
  ------------------
  849|      4|           : (tag < (1 << 21)) ? 3
  ------------------
  |  Branch (849:14): [True: 0, False: 0]
  ------------------
  850|      0|           : (tag < (1 << 28)) ? 4
  ------------------
  |  Branch (850:14): [True: 0, False: 0]
  ------------------
  851|      0|                               : 5;
  852|     10|  }
_ZN6google8protobuf2io17CodedOutputStream20WriteVarint32ToArrayEjPh:
 1646|     13|                                                        uint8_t* target) {
 1647|     13|  return EpsCopyOutputStream::UnsafeVarint(value, target);
 1648|     13|}
_ZN6google8protobuf2io17CodedOutputStream20WriteVarint64ToArrayEmPh:
 1661|      1|                                                        uint8_t* target) {
 1662|      1|  return EpsCopyOutputStream::UnsafeVarint(value, target);
 1663|      1|}
_ZN6google8protobuf2io17CodedOutputStream32WriteVarint32SignExtendedToArrayEiPh:
 1670|      1|    int32_t value, uint8_t* target) {
 1671|      1|  return WriteVarint64ToArray(static_cast<uint64_t>(value), target);
 1672|      1|}
_ZN6google8protobuf2io17CodedOutputStream15WriteTagToArrayEjPh:
 1724|      7|                                                   uint8_t* target) {
 1725|      7|  return WriteVarint32ToArray(value, target);
 1726|      7|}
_ZN6google8protobuf2io17CodedOutputStream12VarintSize32Ej:
 1728|     10|inline size_t CodedOutputStream::VarintSize32(uint32_t value) {
 1729|       |  // This computes value == 0 ? 1 : floor(log2(value)) / 7 + 1
 1730|       |  // Use an explicit multiplication to implement the divide of
 1731|       |  // a number in the 1..31 range.
 1732|       |  // Explicit OR 0x1 to avoid calling Bits::Log2FloorNonZero(0), which is
 1733|       |  // undefined.
 1734|     10|  uint32_t log2value = Bits::Log2FloorNonZero(value | 0x1);
 1735|     10|  return static_cast<size_t>((log2value * 9 + 73) / 64);
 1736|     10|}
_ZN6google8protobuf2io17CodedOutputStream12VarintSize64Em:
 1744|      1|inline size_t CodedOutputStream::VarintSize64(uint64_t value) {
 1745|       |  // This computes value == 0 ? 1 : floor(log2(value)) / 7 + 1
 1746|       |  // Use an explicit multiplication to implement the divide of
 1747|       |  // a number in the 1..63 range.
 1748|       |  // Explicit OR 0x1 to avoid calling Bits::Log2FloorNonZero(0), which is
 1749|       |  // undefined.
 1750|      1|  uint32_t log2value = Bits::Log2FloorNonZero64(value | 0x1);
 1751|      1|  return static_cast<size_t>((log2value * 9 + 73) / 64);
 1752|      1|}
_ZN6google8protobuf2io17CodedOutputStream24VarintSize32SignExtendedEi:
 1760|      1|inline size_t CodedOutputStream::VarintSize32SignExtended(int32_t value) {
 1761|      1|  return VarintSize64(static_cast<uint64_t>(int64_t{value}));
 1762|      1|}
_ZN6google8protobuf2io19EpsCopyOutputStream12UnsafeVarintIjEEPhT_S4_:
  899|     23|  PROTOBUF_ALWAYS_INLINE static uint8_t* UnsafeVarint(T value, uint8_t* ptr) {
  900|     23|    static_assert(std::is_unsigned<T>::value,
  901|     23|                  "Varint serialization must be unsigned");
  902|     23|    ptr[0] = static_cast<uint8_t>(value);
  903|     23|    if (value < 0x80) {
  ------------------
  |  Branch (903:9): [True: 18, False: 5]
  ------------------
  904|     18|      return ptr + 1;
  905|     18|    }
  906|       |    // Turn on continuation bit in the byte we just wrote.
  907|      5|    ptr[0] |= static_cast<uint8_t>(0x80);
  908|      5|    value >>= 7;
  909|      5|    ptr[1] = static_cast<uint8_t>(value);
  910|      5|    if (value < 0x80) {
  ------------------
  |  Branch (910:9): [True: 5, False: 0]
  ------------------
  911|      5|      return ptr + 2;
  912|      5|    }
  913|      0|    ptr += 2;
  914|      0|    do {
  915|       |      // Turn on continuation bit in the byte we just wrote.
  916|      0|      ptr[-1] |= static_cast<uint8_t>(0x80);
  917|      0|      value >>= 7;
  918|      0|      *ptr = static_cast<uint8_t>(value);
  919|      0|      ++ptr;
  920|      0|    } while (value >= 0x80);
  ------------------
  |  Branch (920:14): [True: 0, False: 0]
  ------------------
  921|      0|    return ptr;
  922|      5|  }
_ZN6google8protobuf2io19EpsCopyOutputStream12UnsafeVarintImEEPhT_S4_:
  899|      1|  PROTOBUF_ALWAYS_INLINE static uint8_t* UnsafeVarint(T value, uint8_t* ptr) {
  900|      1|    static_assert(std::is_unsigned<T>::value,
  901|      1|                  "Varint serialization must be unsigned");
  902|      1|    ptr[0] = static_cast<uint8_t>(value);
  903|      1|    if (value < 0x80) {
  ------------------
  |  Branch (903:9): [True: 1, False: 0]
  ------------------
  904|      1|      return ptr + 1;
  905|      1|    }
  906|       |    // Turn on continuation bit in the byte we just wrote.
  907|      0|    ptr[0] |= static_cast<uint8_t>(0x80);
  908|      0|    value >>= 7;
  909|      0|    ptr[1] = static_cast<uint8_t>(value);
  910|      0|    if (value < 0x80) {
  ------------------
  |  Branch (910:9): [True: 0, False: 0]
  ------------------
  911|      0|      return ptr + 2;
  912|      0|    }
  913|      0|    ptr += 2;
  914|      0|    do {
  915|       |      // Turn on continuation bit in the byte we just wrote.
  916|      0|      ptr[-1] |= static_cast<uint8_t>(0x80);
  917|      0|      value >>= 7;
  918|      0|      *ptr = static_cast<uint8_t>(value);
  919|      0|      ++ptr;
  920|      0|    } while (value >= 0x80);
  ------------------
  |  Branch (920:14): [True: 0, False: 0]
  ------------------
  921|      0|    return ptr;
  922|      0|  }

_ZNK6google8protobuf7Message13GetDescriptorEv:
  357|  3.22M|  const Descriptor* GetDescriptor() const { return GetMetadata().descriptor; }
_ZNK6google8protobuf7Message13GetReflectionEv:
  363|  1.60M|  const Reflection* GetReflection() const { return GetMetadata().reflection; }
_ZN6google8protobuf7MessageC2EPNS0_5ArenaEb:
  394|   494k|      : MessageLite(arena, is_message_owned) {}

_ZN6google8protobuf11MessageLiteC2EPNS0_5ArenaEb:
  429|   494k|      : _internal_metadata_(arena, is_message_owned) {}
_ZNK6google8protobuf11MessageLite21GetArenaForAllocationEv:
  440|  1.15M|  Arena* GetArenaForAllocation() const { return _internal_metadata_.arena(); }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef10IdentifierEEEPT_PNS0_5ArenaE:
  424|  15.4k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  15.4k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  15.4k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef15IdentifiersListEEEPT_PNS0_5ArenaE:
  424|  2.18k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  2.18k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  2.18k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef9ParameterEEEPT_PNS0_5ArenaE:
  424|  1.28k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  1.28k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  1.28k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef10ParametersEEEPT_PNS0_5ArenaE:
  424|  3.04k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  3.04k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  3.04k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef14ParametersListEEEPT_PNS0_5ArenaE:
  424|  5.18k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  5.18k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  5.18k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef9SpecifierEEEPT_PNS0_5ArenaE:
  424|  53.3k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  53.3k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  53.3k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef14SpecifiersListEEEPT_PNS0_5ArenaE:
  424|  30.9k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  30.9k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  30.9k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef9QualifierEEEPT_PNS0_5ArenaE:
  424|  7.05k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  7.05k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  7.05k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef14QualifiersListEEEPT_PNS0_5ArenaE:
  424|  10.8k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  10.8k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  10.8k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef8BitfieldEEEPT_PNS0_5ArenaE:
  424|  3.24k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  3.24k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  3.24k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef18FunctionDeclaratorEEEPT_PNS0_5ArenaE:
  424|  9.79k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  9.79k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  9.79k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef17PointerDeclaratorEEEPT_PNS0_5ArenaE:
  424|  4.33k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  4.33k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  4.33k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef15ArrayDeclaratorEEEPT_PNS0_5ArenaE:
  424|  5.24k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  5.24k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  5.24k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef17FunctionSpecifierEEEPT_PNS0_5ArenaE:
  424|  3.37k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  3.37k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  3.37k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef21StorageClassSpecifierEEEPT_PNS0_5ArenaE:
  424|  3.60k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  3.60k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  3.60k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef14TypeOfOperatorEEEPT_PNS0_5ArenaE:
  424|  2.45k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  2.45k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  2.45k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef8EnumTypeEEEPT_PNS0_5ArenaE:
  424|  1.80k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  1.80k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  1.80k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef15StaticAssertionEEEPT_PNS0_5ArenaE:
  424|  28.1k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  28.1k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  28.1k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef17StructDeclarationEEEPT_PNS0_5ArenaE:
  424|  35.1k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  35.1k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  35.1k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef21StructDeclarationListEEEPT_PNS0_5ArenaE:
  424|  18.2k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  18.2k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  18.2k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef9UnionTypeEEEPT_PNS0_5ArenaE:
  424|  15.6k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  15.6k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  15.6k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef10StructTypeEEEPT_PNS0_5ArenaE:
  424|  2.58k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  2.58k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  2.58k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef11TypedefTypeEEEPT_PNS0_5ArenaE:
  424|  1.58k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  1.58k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  1.58k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef14ArithmeticTypeEEEPT_PNS0_5ArenaE:
  424|  3.47k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  3.47k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  3.47k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef10AtomicTypeEEEPT_PNS0_5ArenaE:
  424|  1.16k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  1.16k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  1.16k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef13TypeSpecifierEEEPT_PNS0_5ArenaE:
  424|  32.2k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  32.2k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  32.2k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef13TypeQualifierEEEPT_PNS0_5ArenaE:
  424|  4.31k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  4.31k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  4.31k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef18AlignmentSpecifierEEEPT_PNS0_5ArenaE:
  424|  4.68k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  4.68k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  4.68k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef14DeclaratorAttrEEEPT_PNS0_5ArenaE:
  424|  4.43k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  4.43k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  4.43k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef21DeclaratorParenthesesEEEPT_PNS0_5ArenaE:
  424|  3.07k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  3.07k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  3.07k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef10DeclaratorEEEPT_PNS0_5ArenaE:
  424|  40.4k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  40.4k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  40.4k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef11InitializerEEEPT_PNS0_5ArenaE:
  424|  2.93k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  2.93k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  2.93k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef26DeclaratorsAndInitializersEEEPT_PNS0_5ArenaE:
  424|  12.6k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  12.6k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  12.6k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef21SpecifierAndQualifierEEEPT_PNS0_5ArenaE:
  424|  37.2k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  37.2k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  37.2k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef27SpecifiersAndQualifiersListEEEPT_PNS0_5ArenaE:
  424|  25.1k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  25.1k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  25.1k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef11AttrSpecSeqEEEPT_PNS0_5ArenaE:
  424|  6.60k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  6.60k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  6.60k|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageIN4cdef11DeclarationEEEPT_PNS0_5ArenaE:
  424|  32.2k|  static T* CreateMaybeMessage(Arena* arena) {
  425|  32.2k|    return Arena::CreateMaybeMessage<T>(arena);
  426|  32.2k|  }
_ZN6google8protobuf11MessageLiteD2Ev:
  171|   494k|  virtual ~MessageLite() = default;

_ZN6google8protobuf8internal16InternalMetadataC2EPNS0_5ArenaEb:
   66|   494k|  explicit InternalMetadata(Arena* arena, bool is_message_owned = false) {
   67|   494k|    SetArena(arena, is_message_owned);
   68|   494k|  }
_ZN6google8protobuf8internal16InternalMetadata8SetArenaEPNS0_5ArenaEb:
   70|   494k|  void SetArena(Arena* arena, bool is_message_owned) {
   71|   494k|    ptr_ = is_message_owned
  ------------------
  |  Branch (71:12): [True: 0, False: 494k]
  ------------------
   72|   494k|               ? reinterpret_cast<intptr_t>(arena) | kMessageOwnedArenaTagMask
   73|   494k|               : reinterpret_cast<intptr_t>(arena);
   74|   494k|    GOOGLE_DCHECK(!is_message_owned || arena != nullptr);
  ------------------
  |  |  192|   494k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|   494k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   494k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:5): [True: 494k, False: 0]
  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   75|   494k|  }
_ZN6google8protobuf8internal16InternalMetadataD2Ev:
   81|   494k|  ~InternalMetadata() {
   82|       |#if defined(NDEBUG) || defined(_MSC_VER)
   83|       |    if (HasMessageOwnedArenaTag()) {
   84|       |      delete reinterpret_cast<Arena*>(ptr_ - kMessageOwnedArenaTagMask);
   85|       |    }
   86|       |#else
   87|   494k|    CheckedDestruct();
   88|   494k|#endif
   89|   494k|  }
_ZNK6google8protobuf8internal16InternalMetadata5arenaEv:
  124|  1.15M|  PROTOBUF_NDEBUG_INLINE Arena* arena() const {
  125|  1.15M|    if (PROTOBUF_PREDICT_FALSE(have_unknown_fields())) {
  ------------------
  |  |  490|  1.15M|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 1.15M]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
  126|      0|      return PtrValue<ContainerBase>()->arena;
  127|  1.15M|    } else {
  128|  1.15M|      return PtrValue<Arena>();
  129|  1.15M|    }
  130|  1.15M|  }
_ZNK6google8protobuf8internal16InternalMetadata19have_unknown_fieldsEv:
  132|  1.68M|  PROTOBUF_NDEBUG_INLINE bool have_unknown_fields() const {
  133|  1.68M|    return HasUnknownFieldsTag();
  134|  1.68M|  }
_ZNK6google8protobuf8internal16InternalMetadata19HasUnknownFieldsTagEv:
  201|  1.68M|  PROTOBUF_ALWAYS_INLINE bool HasUnknownFieldsTag() const {
  202|  1.68M|    return ptr_ & kUnknownFieldsTagMask;
  203|  1.68M|  }
_ZNK6google8protobuf8internal16InternalMetadata23HasMessageOwnedArenaTagEv:
  204|   494k|  PROTOBUF_ALWAYS_INLINE bool HasMessageOwnedArenaTag() const {
  205|   494k|    return ptr_ & kMessageOwnedArenaTagMask;
  206|   494k|  }
_ZNK6google8protobuf8internal16InternalMetadata8PtrValueINS0_5ArenaEEEPT_v:
  209|  1.64M|  U* PtrValue() const {
  210|  1.64M|    return reinterpret_cast<U*>(ptr_ & kPtrValueMask);
  211|  1.64M|  }
_ZNK6google8protobuf8internal16InternalMetadata14unknown_fieldsINS0_15UnknownFieldSetEEERKT_PFS7_vE:
  142|      6|      const T& (*default_instance)()) const {
  143|      6|    if (PROTOBUF_PREDICT_FALSE(have_unknown_fields())) {
  ------------------
  |  |  490|      6|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 6]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 6]
  |  |  ------------------
  ------------------
  144|      0|      return PtrValue<Container<T>>()->unknown_fields;
  145|      6|    } else {
  146|      6|      return default_instance();
  147|      6|    }
  148|      6|  }
_ZN6google8protobuf8internal16InternalMetadata17DeleteReturnArenaINS0_15UnknownFieldSetEEEPNS0_5ArenaEv:
  107|   494k|  Arena* DeleteReturnArena() {
  108|   494k|    if (have_unknown_fields()) {
  ------------------
  |  Branch (108:9): [True: 0, False: 494k]
  ------------------
  109|      0|      return DeleteOutOfLineHelper<T>();
  110|   494k|    } else {
  111|   494k|      return PtrValue<Arena>();
  112|   494k|    }
  113|   494k|  }
_ZN6google8protobuf8internal16InternalMetadata5ClearINS0_15UnknownFieldSetEEEvv:
  184|  35.6k|  PROTOBUF_NDEBUG_INLINE void Clear() {
  185|  35.6k|    if (have_unknown_fields()) {
  ------------------
  |  Branch (185:9): [True: 0, False: 35.6k]
  ------------------
  186|      0|      DoClear<T>();
  187|      0|    }
  188|  35.6k|  }

_ZN6google8protobuf8internal18EpsCopyInputStream13DataAvailableEPKc:
  209|  1.22k|  bool DataAvailable(const char* ptr) { return ptr < limit_end_; }
_ZN6google8protobuf8internal18EpsCopyInputStream13DoneWithCheckEPPKci:
  215|  6.17k|  bool DoneWithCheck(const char** ptr, int d) {
  216|  6.17k|    GOOGLE_DCHECK(*ptr);
  ------------------
  |  |  192|  6.17k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  6.17k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  6.17k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 6.17k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  217|  6.17k|    if (PROTOBUF_PREDICT_TRUE(*ptr < limit_end_)) return false;
  ------------------
  |  |  489|  6.17k|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 4.90k, False: 1.26k]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 4.90k, False: 1.26k]
  |  |  ------------------
  ------------------
  218|  1.26k|    int overrun = static_cast<int>(*ptr - buffer_end_);
  219|  1.26k|    GOOGLE_DCHECK_LE(overrun, kSlopBytes);  // Guaranteed by parse loop.
  ------------------
  |  |  197|  1.26k|#define GOOGLE_DCHECK_LE GOOGLE_CHECK_LE
  |  |  ------------------
  |  |  |  |  157|  1.26k|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  1.26k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  1.26k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 1.26k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  220|  1.26k|    if (overrun ==
  ------------------
  |  Branch (220:9): [True: 1.26k, False: 3]
  ------------------
  221|  1.26k|        limit_) {  //  No need to flip buffers if we ended on a limit.
  222|       |      // If we actually overrun the buffer and next_chunk_ is null. It means
  223|       |      // the stream ended and we passed the stream end.
  224|  1.26k|      if (overrun > 0 && next_chunk_ == nullptr) *ptr = nullptr;
  ------------------
  |  Branch (224:11): [True: 20, False: 1.24k]
  |  Branch (224:26): [True: 0, False: 20]
  ------------------
  225|  1.26k|      return true;
  226|  1.26k|    }
  227|      3|    auto res = DoneFallback(overrun, d);
  228|      3|    *ptr = res.first;
  229|      3|    return res.second;
  230|  1.26k|  }
_ZN6google8protobuf8internal12ParseContext4DoneEPPKc:
  401|  6.17k|  bool Done(const char** ptr) { return DoneWithCheck(ptr, group_depth_); }
_ZN6google8protobuf8internal15VarintParseSlowEPKcjPj:
  525|     27|inline const char* VarintParseSlow(const char* p, uint32_t res, uint32_t* out) {
  526|     27|  auto tmp = VarintParseSlow32(p, res);
  527|     27|  *out = tmp.second;
  528|     27|  return tmp.first;
  529|     27|}
_ZN6google8protobuf8internal7ReadTagEPKcPjj:
  562|  4.91k|                           uint32_t /*max_tag*/ = 0) {
  563|  4.91k|  uint32_t res = static_cast<uint8_t>(p[0]);
  564|  4.91k|  if (res < 128) {
  ------------------
  |  Branch (564:7): [True: 4.89k, False: 20]
  ------------------
  565|  4.89k|    *out = res;
  566|  4.89k|    return p + 1;
  567|  4.89k|  }
  568|     20|  uint32_t second = static_cast<uint8_t>(p[1]);
  569|     20|  res += (second - 1) << 7;
  570|     20|  if (second < 128) {
  ------------------
  |  Branch (570:7): [True: 20, False: 0]
  ------------------
  571|     20|    *out = res;
  572|     20|    return p + 2;
  573|     20|  }
  574|      0|  auto tmp = ReadTagFallback(p, res);
  575|      0|  *out = tmp.second;
  576|      0|  return tmp.first;
  577|     20|}
_ZN6google8protobuf8internal12ReadVarint32EPPKc:
  728|  1.28k|inline uint32_t ReadVarint32(const char** p) {
  729|  1.28k|  uint32_t tmp;
  730|  1.28k|  *p = VarintParse(*p, &tmp);
  731|  1.28k|  return tmp;
  732|  1.28k|}
_ZN6google8protobuf8internal10VerifyUTF8EPKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKc:
  872|  1.60k|inline bool VerifyUTF8(const std::string* s, const char* field_name) {
  873|  1.60k|  return VerifyUTF8(*s, field_name);
  874|  1.60k|}
_ZN6google8protobuf8internal11VarintParseIjEEPKcS4_PT_:
  538|  1.28k|PROTOBUF_NODISCARD const char* VarintParse(const char* p, T* out) {
  539|  1.28k|  auto ptr = reinterpret_cast<const uint8_t*>(p);
  540|  1.28k|  uint32_t res = ptr[0];
  541|  1.28k|  if (!(res & 0x80)) {
  ------------------
  |  Branch (541:7): [True: 1.20k, False: 81]
  ------------------
  542|  1.20k|    *out = res;
  543|  1.20k|    return p + 1;
  544|  1.20k|  }
  545|     81|  uint32_t byte = ptr[1];
  546|     81|  res += (byte - 1) << 7;
  547|     81|  if (!(byte & 0x80)) {
  ------------------
  |  Branch (547:7): [True: 54, False: 27]
  ------------------
  548|     54|    *out = res;
  549|     54|    return p + 2;
  550|     54|  }
  551|     27|  return VarintParseSlow(p, res, out);
  552|     81|}
_ZN6google8protobuf8internal9ExpectTagILj18EEEbPKc:
  467|    792|bool ExpectTag(const char* ptr) {
  468|    792|  if (tag < 128) {
  ------------------
  |  Branch (468:7): [Folded - Ignored]
  ------------------
  469|    792|    return *ptr == static_cast<char>(tag);
  470|    792|  } else {
  471|      0|    static_assert(tag < 128 * 128, "We only expect tags for 1 or 2 bytes");
  472|      0|    char buf[2] = {static_cast<char>(tag | 0x80), static_cast<char>(tag >> 7)};
  473|      0|    return std::memcmp(ptr, buf, 2) == 0;
  474|      0|  }
  475|    792|}

_ZN6google8protobuf8internal20RepeatedPtrFieldBaseC2EPNS0_5ArenaE:
  171|   137k|      : arena_(arena), current_size_(0), total_size_(0), rep_(nullptr) {}
_ZN6google8protobuf8internal20RepeatedPtrFieldBaseD2Ev:
  176|   137k|  ~RepeatedPtrFieldBase() {
  177|   137k|#ifndef NDEBUG
  178|       |    // Try to trigger segfault / asan failure in non-opt builds. If arena_
  179|       |    // lifetime has ended before the destructor.
  180|   137k|    if (arena_) (void)arena_->SpaceAllocated();
  ------------------
  |  Branch (180:9): [True: 0, False: 137k]
  ------------------
  181|   137k|#endif
  182|   137k|  }
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase4sizeEv:
  185|  1.01M|  int size() const { return current_size_; }
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase12NeedsDestroyEv:
  260|   137k|  bool NeedsDestroy() const { return rep_ != nullptr && arena_ == nullptr; }
  ------------------
  |  Branch (260:38): [True: 107k, False: 29.0k]
  |  Branch (260:57): [True: 107k, False: 0]
  ------------------
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase8raw_dataEv:
  347|  1.43k|  void* const* raw_data() const { return rep_ ? rep_->elements : nullptr; }
  ------------------
  |  Branch (347:42): [True: 236, False: 1.20k]
  ------------------
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase14GetOwningArenaEv:
  618|   164k|  inline Arena* GetOwningArena() const { return arena_; }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef10IdentifierEE4sizeEv:
 1247|  16.2k|inline int RepeatedPtrField<Element>::size() const {
 1248|  16.2k|  return RepeatedPtrFieldBase::size();
 1249|  16.2k|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldIN4cdef10IdentifierEE11TypeHandlerEEEPNT_4TypeEPv:
  649|  11.8k|  static inline typename TypeHandler::Type* cast(void* element) {
  650|  11.8k|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|  11.8k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef10IdentifierEE3GetEi:
 1252|  11.8k|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|  11.8k|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|  11.8k|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN4cdef10IdentifierEE11TypeHandlerEEERKNT_4TypeEi:
  269|  11.8k|  const typename TypeHandler::Type& Get(int index) const {
  270|  11.8k|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|  11.8k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|  11.8k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  11.8k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  11.8k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 11.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|  11.8k|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|  11.8k|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|  11.8k|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  11.8k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  11.8k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 11.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|  11.8k|    return *cast<TypeHandler>(rep_->elements[index]);
  273|  11.8k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef9ParameterEE4sizeEv:
 1247|  8.66k|inline int RepeatedPtrField<Element>::size() const {
 1248|  8.66k|  return RepeatedPtrFieldBase::size();
 1249|  8.66k|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldIN4cdef9ParameterEE11TypeHandlerEEEPNT_4TypeEPv:
  649|  2.57k|  static inline typename TypeHandler::Type* cast(void* element) {
  650|  2.57k|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|  2.57k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef9ParameterEE3GetEi:
 1252|  2.57k|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|  2.57k|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|  2.57k|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN4cdef9ParameterEE11TypeHandlerEEERKNT_4TypeEi:
  269|  2.57k|  const typename TypeHandler::Type& Get(int index) const {
  270|  2.57k|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|  2.57k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|  2.57k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  2.57k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  2.57k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 2.57k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|  2.57k|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|  2.57k|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|  2.57k|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  2.57k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  2.57k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 2.57k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|  2.57k|    return *cast<TypeHandler>(rep_->elements[index]);
  273|  2.57k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef9SpecifierEE4sizeEv:
 1247|   115k|inline int RepeatedPtrField<Element>::size() const {
 1248|   115k|  return RepeatedPtrFieldBase::size();
 1249|   115k|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldIN4cdef9SpecifierEE11TypeHandlerEEEPNT_4TypeEPv:
  649|   106k|  static inline typename TypeHandler::Type* cast(void* element) {
  650|   106k|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|   106k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef9SpecifierEE3GetEi:
 1252|   106k|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|   106k|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|   106k|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN4cdef9SpecifierEE11TypeHandlerEEERKNT_4TypeEi:
  269|   106k|  const typename TypeHandler::Type& Get(int index) const {
  270|   106k|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|   106k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|   106k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|   106k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|   106k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 106k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|   106k|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|   106k|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|   106k|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|   106k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|   106k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 106k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|   106k|    return *cast<TypeHandler>(rep_->elements[index]);
  273|   106k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef9QualifierEE4sizeEv:
 1247|  17.9k|inline int RepeatedPtrField<Element>::size() const {
 1248|  17.9k|  return RepeatedPtrFieldBase::size();
 1249|  17.9k|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldIN4cdef9QualifierEE11TypeHandlerEEEPNT_4TypeEPv:
  649|  10.9k|  static inline typename TypeHandler::Type* cast(void* element) {
  650|  10.9k|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|  10.9k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef9QualifierEE3GetEi:
 1252|  10.9k|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|  10.9k|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|  10.9k|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN4cdef9QualifierEE11TypeHandlerEEERKNT_4TypeEi:
  269|  10.9k|  const typename TypeHandler::Type& Get(int index) const {
  270|  10.9k|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|  10.9k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|  10.9k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  10.9k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  10.9k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 10.9k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|  10.9k|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|  10.9k|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|  10.9k|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  10.9k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  10.9k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 10.9k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|  10.9k|    return *cast<TypeHandler>(rep_->elements[index]);
  273|  10.9k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef17StructDeclarationEE4sizeEv:
 1247|  71.6k|inline int RepeatedPtrField<Element>::size() const {
 1248|  71.6k|  return RepeatedPtrFieldBase::size();
 1249|  71.6k|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldIN4cdef17StructDeclarationEE11TypeHandlerEEEPNT_4TypeEPv:
  649|  70.3k|  static inline typename TypeHandler::Type* cast(void* element) {
  650|  70.3k|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|  70.3k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef17StructDeclarationEE3GetEi:
 1252|  70.3k|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|  70.3k|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|  70.3k|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN4cdef17StructDeclarationEE11TypeHandlerEEERKNT_4TypeEi:
  269|  70.3k|  const typename TypeHandler::Type& Get(int index) const {
  270|  70.3k|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|  70.3k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|  70.3k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  70.3k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  70.3k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 70.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|  70.3k|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|  70.3k|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|  70.3k|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  70.3k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  70.3k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 70.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|  70.3k|    return *cast<TypeHandler>(rep_->elements[index]);
  273|  70.3k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef10DeclaratorEE4sizeEv:
 1247|  91.3k|inline int RepeatedPtrField<Element>::size() const {
 1248|  91.3k|  return RepeatedPtrFieldBase::size();
 1249|  91.3k|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldIN4cdef10DeclaratorEE11TypeHandlerEEEPNT_4TypeEPv:
  649|  46.4k|  static inline typename TypeHandler::Type* cast(void* element) {
  650|  46.4k|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|  46.4k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef10DeclaratorEE3GetEi:
 1252|  46.4k|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|  46.4k|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|  46.4k|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN4cdef10DeclaratorEE11TypeHandlerEEERKNT_4TypeEi:
  269|  46.4k|  const typename TypeHandler::Type& Get(int index) const {
  270|  46.4k|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|  46.4k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|  46.4k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  46.4k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  46.4k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 46.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|  46.4k|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|  46.4k|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|  46.4k|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  46.4k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  46.4k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 46.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|  46.4k|    return *cast<TypeHandler>(rep_->elements[index]);
  273|  46.4k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef11InitializerEE4sizeEv:
 1247|  35.1k|inline int RepeatedPtrField<Element>::size() const {
 1248|  35.1k|  return RepeatedPtrFieldBase::size();
 1249|  35.1k|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldIN4cdef11InitializerEE11TypeHandlerEEEPNT_4TypeEPv:
  649|  2.93k|  static inline typename TypeHandler::Type* cast(void* element) {
  650|  2.93k|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|  2.93k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef11InitializerEE3GetEi:
 1252|  2.93k|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|  2.93k|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|  2.93k|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN4cdef11InitializerEE11TypeHandlerEEERKNT_4TypeEi:
  269|  2.93k|  const typename TypeHandler::Type& Get(int index) const {
  270|  2.93k|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|  2.93k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|  2.93k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  2.93k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  2.93k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 2.93k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|  2.93k|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|  2.93k|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|  2.93k|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  2.93k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  2.93k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 2.93k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|  2.93k|    return *cast<TypeHandler>(rep_->elements[index]);
  273|  2.93k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef21SpecifierAndQualifierEE4sizeEv:
 1247|   119k|inline int RepeatedPtrField<Element>::size() const {
 1248|   119k|  return RepeatedPtrFieldBase::size();
 1249|   119k|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldIN4cdef21SpecifierAndQualifierEE11TypeHandlerEEEPNT_4TypeEPv:
  649|  74.5k|  static inline typename TypeHandler::Type* cast(void* element) {
  650|  74.5k|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|  74.5k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef21SpecifierAndQualifierEE3GetEi:
 1252|  74.5k|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|  74.5k|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|  74.5k|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN4cdef21SpecifierAndQualifierEE11TypeHandlerEEERKNT_4TypeEi:
  269|  74.5k|  const typename TypeHandler::Type& Get(int index) const {
  270|  74.5k|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|  74.5k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|  74.5k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  74.5k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  74.5k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 74.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|  74.5k|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|  74.5k|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|  74.5k|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  74.5k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  74.5k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 74.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|  74.5k|    return *cast<TypeHandler>(rep_->elements[index]);
  273|  74.5k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef11DeclarationEE4sizeEv:
 1247|  67.9k|inline int RepeatedPtrField<Element>::size() const {
 1248|  67.9k|  return RepeatedPtrFieldBase::size();
 1249|  67.9k|}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef11DeclarationEE5ClearEv:
 1402|  35.6k|inline void RepeatedPtrField<Element>::Clear() {
 1403|  35.6k|  RepeatedPtrFieldBase::Clear<TypeHandler>();
 1404|  35.6k|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase5ClearINS0_16RepeatedPtrFieldIN4cdef11DeclarationEE11TypeHandlerEEEvv:
  282|  35.6k|  void Clear() {
  283|  35.6k|    const int n = current_size_;
  284|  35.6k|    GOOGLE_DCHECK_GE(n, 0);
  ------------------
  |  |  199|  35.6k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|  35.6k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  35.6k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  35.6k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 35.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|  35.6k|    if (n > 0) {
  ------------------
  |  Branch (285:9): [True: 0, False: 35.6k]
  ------------------
  286|      0|      void* const* elements = rep_->elements;
  287|      0|      int i = 0;
  288|      0|      do {
  289|      0|        TypeHandler::Clear(cast<TypeHandler>(elements[i++]));
  290|      0|      } while (i < n);
  ------------------
  |  Branch (290:16): [True: 0, False: 0]
  ------------------
  291|      0|      current_size_ = 0;
  292|      0|    }
  293|  35.6k|  }
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldIN4cdef11DeclarationEE11TypeHandlerEEEPNT_4TypeEPv:
  649|  64.4k|  static inline typename TypeHandler::Type* cast(void* element) {
  650|  64.4k|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|  64.4k|  }
_ZNK6google8protobuf16RepeatedPtrFieldIN4cdef11DeclarationEE3GetEi:
 1252|  64.4k|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|  64.4k|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|  64.4k|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN4cdef11DeclarationEE11TypeHandlerEEERKNT_4TypeEi:
  269|  64.4k|  const typename TypeHandler::Type& Get(int index) const {
  270|  64.4k|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|  64.4k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|  64.4k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  64.4k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  64.4k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 64.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|  64.4k|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|  64.4k|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|  64.4k|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  64.4k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  64.4k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 64.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|  64.4k|    return *cast<TypeHandler>(rep_->elements[index]);
  273|  64.4k|  }
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef10IdentifierEEC2EPNS0_5ArenaE:
 1169|  3.98k|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef10IdentifierEED2Ev:
 1185|  3.98k|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|  3.98k|#ifdef __cpp_if_constexpr
 1187|  3.98k|  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|       |  if (std::is_base_of<MessageLite, Element>::value) {
 1190|       |#endif
 1191|  3.98k|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 2.01k, False: 1.96k]
  ------------------
 1192|       |  } else {
 1193|       |    Destroy<TypeHandler>();
 1194|       |  }
 1195|  3.98k|}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef9ParameterEEC2EPNS0_5ArenaE:
 1169|  3.04k|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef9ParameterEED2Ev:
 1185|  3.04k|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|  3.04k|#ifdef __cpp_if_constexpr
 1187|  3.04k|  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|       |  if (std::is_base_of<MessageLite, Element>::value) {
 1190|       |#endif
 1191|  3.04k|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 1.00k, False: 2.03k]
  ------------------
 1192|       |  } else {
 1193|       |    Destroy<TypeHandler>();
 1194|       |  }
 1195|  3.04k|}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef9SpecifierEEC2EPNS0_5ArenaE:
 1169|  30.9k|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef9SpecifierEED2Ev:
 1185|  30.9k|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|  30.9k|#ifdef __cpp_if_constexpr
 1187|  30.9k|  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|       |  if (std::is_base_of<MessageLite, Element>::value) {
 1190|       |#endif
 1191|  30.9k|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 28.9k, False: 1.99k]
  ------------------
 1192|       |  } else {
 1193|       |    Destroy<TypeHandler>();
 1194|       |  }
 1195|  30.9k|}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef9QualifierEEC2EPNS0_5ArenaE:
 1169|  10.8k|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef9QualifierEED2Ev:
 1185|  10.8k|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|  10.8k|#ifdef __cpp_if_constexpr
 1187|  10.8k|  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|       |  if (std::is_base_of<MessageLite, Element>::value) {
 1190|       |#endif
 1191|  10.8k|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 5.82k, False: 5.03k]
  ------------------
 1192|       |  } else {
 1193|       |    Destroy<TypeHandler>();
 1194|       |  }
 1195|  10.8k|}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef17StructDeclarationEEC2EPNS0_5ArenaE:
 1169|  18.2k|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef17StructDeclarationEED2Ev:
 1185|  18.2k|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|  18.2k|#ifdef __cpp_if_constexpr
 1187|  18.2k|  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|       |  if (std::is_base_of<MessageLite, Element>::value) {
 1190|       |#endif
 1191|  18.2k|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 15.3k, False: 2.88k]
  ------------------
 1192|       |  } else {
 1193|       |    Destroy<TypeHandler>();
 1194|       |  }
 1195|  18.2k|}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef10DeclaratorEEC2EPNS0_5ArenaE:
 1169|  12.6k|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef11InitializerEEC2EPNS0_5ArenaE:
 1169|  12.6k|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef11InitializerEED2Ev:
 1185|  12.6k|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|  12.6k|#ifdef __cpp_if_constexpr
 1187|  12.6k|  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|       |  if (std::is_base_of<MessageLite, Element>::value) {
 1190|       |#endif
 1191|  12.6k|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 2.51k, False: 10.1k]
  ------------------
 1192|       |  } else {
 1193|       |    Destroy<TypeHandler>();
 1194|       |  }
 1195|  12.6k|}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef21SpecifierAndQualifierEEC2EPNS0_5ArenaE:
 1169|  25.1k|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef21SpecifierAndQualifierEED2Ev:
 1185|  25.1k|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|  25.1k|#ifdef __cpp_if_constexpr
 1187|  25.1k|  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|       |  if (std::is_base_of<MessageLite, Element>::value) {
 1190|       |#endif
 1191|  25.1k|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 23.5k, False: 1.62k]
  ------------------
 1192|       |  } else {
 1193|       |    Destroy<TypeHandler>();
 1194|       |  }
 1195|  25.1k|}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef11DeclarationEEC2EPNS0_5ArenaE:
 1169|  17.8k|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef11DeclarationEED2Ev:
 1185|  17.8k|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|  17.8k|#ifdef __cpp_if_constexpr
 1187|  17.8k|  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|       |  if (std::is_base_of<MessageLite, Element>::value) {
 1190|       |#endif
 1191|  17.8k|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 17.8k, False: 0]
  ------------------
 1192|       |  } else {
 1193|       |    Destroy<TypeHandler>();
 1194|       |  }
 1195|  17.8k|}
_ZN6google8protobuf16RepeatedPtrFieldIN4cdef10DeclaratorEED2Ev:
 1185|  12.6k|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|  12.6k|#ifdef __cpp_if_constexpr
 1187|  12.6k|  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|       |  if (std::is_base_of<MessageLite, Element>::value) {
 1190|       |#endif
 1191|  12.6k|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 10.5k, False: 2.15k]
  ------------------
 1192|       |  } else {
 1193|       |    Destroy<TypeHandler>();
 1194|       |  }
 1195|  12.6k|}

_ZN6google8protobuf4Bits16Log2FloorNonZeroEj:
  290|     10|  static uint32_t Log2FloorNonZero(uint32_t n) {
  291|     10|#if defined(__GNUC__)
  292|     10|  return 31 ^ static_cast<uint32_t>(__builtin_clz(n));
  293|       |#elif defined(_MSC_VER)
  294|       |  unsigned long where;
  295|       |  _BitScanReverse(&where, n);
  296|       |  return where;
  297|       |#else
  298|       |  return Log2FloorNonZero_Portable(n);
  299|       |#endif
  300|     10|  }
_ZN6google8protobuf4Bits18Log2FloorNonZero64Em:
  302|      1|  static uint32_t Log2FloorNonZero64(uint64_t n) {
  303|       |    // Older versions of clang run into an instruction-selection failure when
  304|       |    // it encounters __builtin_clzll:
  305|       |    // https://bugs.chromium.org/p/nativeclient/issues/detail?id=4395
  306|       |    // This includes arm-nacl-clang and clang in older Android NDK versions.
  307|       |    // To work around this, when we build with those we use the portable
  308|       |    // implementation instead.
  309|      1|#if defined(__GNUC__) && !defined(GOOGLE_PROTOBUF_USE_PORTABLE_LOG2)
  310|      1|  return 63 ^ static_cast<uint32_t>(__builtin_clzll(n));
  311|       |#elif defined(_MSC_VER) && defined(_M_X64)
  312|       |  unsigned long where;
  313|       |  _BitScanReverse64(&where, n);
  314|       |  return where;
  315|       |#else
  316|       |  return Log2FloorNonZero64_Portable(n);
  317|       |#endif
  318|      1|  }

_ZN6google8protobuf20stringpiece_internal11StringPiece9CheckSizeEm:
  185|  1.26M|  static size_type CheckSize(size_type size) {
  186|  1.26M|#if !defined(NDEBUG) || defined(_FORTIFY_SOURCE) && _FORTIFY_SOURCE > 0
  187|  1.26M|    if (PROTOBUF_PREDICT_FALSE(size > kMaxSize)) {
  ------------------
  |  |  490|  1.26M|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 1.26M]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 1.26M]
  |  |  ------------------
  ------------------
  188|       |      // Some people grep for this message in logs
  189|       |      // so take care if you ever change it.
  190|      0|      LogFatalSizeTooBig(size, "string length exceeds max size");
  191|      0|    }
  192|  1.26M|#endif
  193|  1.26M|    return size;
  194|  1.26M|  }
_ZN6google8protobuf20stringpiece_internal11StringPieceC2INSt3__19allocatorIcEEEERKNS4_12basic_stringIcNS4_11char_traitsIcEET_EE:
  218|  1.25M|      : ptr_(str.data()), length_(0) {
  219|  1.25M|    length_ = CheckSize(str.size());
  220|  1.25M|  }

_ZN6google8protobuf10TextFormat6Parser19AllowPartialMessageEb:
  598|  17.8k|    void AllowPartialMessage(bool allow) { allow_partial_ = allow; }
_ZN6google8protobuf10TextFormat6Parser17AllowUnknownFieldEb:
  629|  17.8k|    void AllowUnknownField(bool allow) { allow_unknown_field_ = allow; }
_ZN6google8protobuf10TextFormat6Parser17SetRecursionLimitEi:
  636|  17.8k|    void SetRecursionLimit(int limit) { recursion_limit_ = limit; }

_ZN6google8protobuf15UnknownFieldSetC2Ev:
  300|      1|inline UnknownFieldSet::UnknownFieldSet() {}

_ZN6google8protobuf8internal10WireFormat26VerifyUTF8StringNamedFieldEPKciNS2_9OperationES4_:
  371|     10|                                                   const char* field_name) {
  372|     10|#ifdef GOOGLE_PROTOBUF_UTF8_VALIDATION_ENABLED
  373|     10|  WireFormatLite::VerifyUtf8String(
  374|     10|      data, size, static_cast<WireFormatLite::Operation>(op), field_name);
  375|       |#else
  376|       |  // Avoid the compiler warning about unused variables.
  377|       |  (void)data;
  378|       |  (void)size;
  379|       |  (void)op;
  380|       |  (void)field_name;
  381|       |#endif
  382|     10|}

_ZN6google8protobuf8internal14WireFormatLite7MakeTagEiNS2_8WireTypeE:
  796|      7|                                                  WireType type) {
  797|      7|  return GOOGLE_PROTOBUF_WIRE_FORMAT_MAKE_TAG(field_number, type);
  ------------------
  |  |  207|      7|  static_cast<uint32_t>((static_cast<uint32_t>(FIELD_NUMBER) << 3) | (TYPE))
  ------------------
  798|      7|}
_ZN6google8protobuf8internal14WireFormatLite15WriteTagToArrayEiNS2_8WireTypeEPh:
 1372|      7|                                                uint8_t* target) {
 1373|      7|  return io::CodedOutputStream::WriteTagToArray(MakeTag(field_number, type),
 1374|      7|                                                target);
 1375|      7|}
_ZN6google8protobuf8internal14WireFormatLite10StringSizeERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE:
 1782|     10|inline size_t WireFormatLite::StringSize(const std::string& value) {
 1783|     10|  return LengthDelimitedSize(value.size());
 1784|     10|}
_ZN6google8protobuf8internal14WireFormatLite19LengthDelimitedSizeEm:
 1813|     10|inline size_t WireFormatLite::LengthDelimitedSize(size_t length) {
 1814|       |  // The static_cast here prevents an error in certain compiler configurations
 1815|       |  // but is not technically correct--if length is too large to fit in a uint32_t
 1816|       |  // then it will be silently truncated. We will need to fix this if we ever
 1817|       |  // decide to start supporting serialized messages greater than 2 GiB in size.
 1818|     10|  return length +
 1819|     10|         io::CodedOutputStream::VarintSize32(static_cast<uint32_t>(length));
 1820|     10|}

_ZN6google8protobuf8internal22GetAnyFieldDescriptorsERKNS0_7MessageEPPKNS0_15FieldDescriptorES8_:
   65|   615k|                            const FieldDescriptor** value_field) {
   66|   615k|  const Descriptor* descriptor = message.GetDescriptor();
   67|   615k|  if (descriptor->full_name() != kAnyFullTypeName) {
  ------------------
  |  Branch (67:7): [True: 615k, False: 0]
  ------------------
   68|   615k|    return false;
   69|   615k|  }
   70|      0|  *type_url_field = descriptor->FindFieldByNumber(1);
   71|      0|  *value_field = descriptor->FindFieldByNumber(2);
   72|      0|  return (*type_url_field != nullptr &&
  ------------------
  |  Branch (72:11): [True: 0, False: 0]
  ------------------
   73|      0|          (*type_url_field)->type() == FieldDescriptor::TYPE_STRING &&
  ------------------
  |  Branch (73:11): [True: 0, False: 0]
  ------------------
   74|      0|          *value_field != nullptr &&
  ------------------
  |  Branch (74:11): [True: 0, False: 0]
  ------------------
   75|      0|          (*value_field)->type() == FieldDescriptor::TYPE_BYTES);
  ------------------
  |  Branch (75:11): [True: 0, False: 0]
  ------------------
   76|   615k|}

_Z55descriptor_table_google_2fprotobuf_2fany_2eproto_getterv:
   83|      1|PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2fany_2eproto_getter() {
   84|      1|  return &descriptor_table_google_2fprotobuf_2fany_2eproto;
   85|      1|}
_ZNK6google8protobuf3Any11GetMetadataEv:
  349|   986k|::PROTOBUF_NAMESPACE_ID::Metadata Any::GetMetadata() const {
  350|   986k|  return ::_pbi::AssignDescriptors(
  351|   986k|      &descriptor_table_google_2fprotobuf_2fany_2eproto_getter, &descriptor_table_google_2fprotobuf_2fany_2eproto_once,
  352|   986k|      file_level_metadata_google_2fprotobuf_2fany_2eproto[0]);
  353|   986k|}

_ZN6google8protobuf5Arena21CreateMessageInternalINS0_30DescriptorProto_ExtensionRangeEEEPT_PS1_:
  577|     27|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|     27|    static_assert(
  579|     27|        InternalHelper<T>::is_arena_constructable::value,
  580|     27|        "CreateMessage can only construct types that are ArenaConstructable");
  581|     27|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 27, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|     27|      return InternalHelper<T>::New();
  585|     27|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|     27|  }
_ZN6google8protobuf5Arena14InternalHelperINS0_30DescriptorProto_ExtensionRangeEE3NewEv:
  491|     27|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|     27|      return new T(nullptr);
  493|     27|    }
_ZN6google8protobuf5Arena21CreateMessageInternalINS0_29DescriptorProto_ReservedRangeEEEPT_PS1_:
  577|     24|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|     24|    static_assert(
  579|     24|        InternalHelper<T>::is_arena_constructable::value,
  580|     24|        "CreateMessage can only construct types that are ArenaConstructable");
  581|     24|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 24, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|     24|      return InternalHelper<T>::New();
  585|     24|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|     24|  }
_ZN6google8protobuf5Arena14InternalHelperINS0_29DescriptorProto_ReservedRangeEE3NewEv:
  491|     24|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|     24|      return new T(nullptr);
  493|     24|    }
_ZN6google8protobuf5Arena21CreateMessageInternalINS0_15DescriptorProtoEEEPT_PS1_:
  577|    201|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|    201|    static_assert(
  579|    201|        InternalHelper<T>::is_arena_constructable::value,
  580|    201|        "CreateMessage can only construct types that are ArenaConstructable");
  581|    201|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 201, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|    201|      return InternalHelper<T>::New();
  585|    201|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|    201|  }
_ZN6google8protobuf5Arena14InternalHelperINS0_15DescriptorProtoEE3NewEv:
  491|    201|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|    201|      return new T(nullptr);
  493|    201|    }
_ZN6google8protobuf5Arena21CreateMessageInternalINS0_20FieldDescriptorProtoEEEPT_PS1_:
  577|    825|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|    825|    static_assert(
  579|    825|        InternalHelper<T>::is_arena_constructable::value,
  580|    825|        "CreateMessage can only construct types that are ArenaConstructable");
  581|    825|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 825, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|    825|      return InternalHelper<T>::New();
  585|    825|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|    825|  }
_ZN6google8protobuf5Arena14InternalHelperINS0_20FieldDescriptorProtoEE3NewEv:
  491|    825|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|    825|      return new T(nullptr);
  493|    825|    }
_ZN6google8protobuf5Arena21CreateMessageInternalINS0_20OneofDescriptorProtoEEEPT_PS1_:
  577|     33|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|     33|    static_assert(
  579|     33|        InternalHelper<T>::is_arena_constructable::value,
  580|     33|        "CreateMessage can only construct types that are ArenaConstructable");
  581|     33|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 33, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|     33|      return InternalHelper<T>::New();
  585|     33|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|     33|  }
_ZN6google8protobuf5Arena14InternalHelperINS0_20OneofDescriptorProtoEE3NewEv:
  491|     33|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|     33|      return new T(nullptr);
  493|     33|    }
_ZN6google8protobuf5Arena21CreateMessageInternalINS0_19EnumDescriptorProtoEEEPT_PS1_:
  577|     18|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|     18|    static_assert(
  579|     18|        InternalHelper<T>::is_arena_constructable::value,
  580|     18|        "CreateMessage can only construct types that are ArenaConstructable");
  581|     18|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 18, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|     18|      return InternalHelper<T>::New();
  585|     18|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|     18|  }
_ZN6google8protobuf5Arena14InternalHelperINS0_19EnumDescriptorProtoEE3NewEv:
  491|     18|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|     18|      return new T(nullptr);
  493|     18|    }
_ZN6google8protobuf5Arena21CreateMessageInternalINS0_24EnumValueDescriptorProtoEEEPT_PS1_:
  577|     99|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|     99|    static_assert(
  579|     99|        InternalHelper<T>::is_arena_constructable::value,
  580|     99|        "CreateMessage can only construct types that are ArenaConstructable");
  581|     99|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 99, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|     99|      return InternalHelper<T>::New();
  585|     99|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|     99|  }
_ZN6google8protobuf5Arena14InternalHelperINS0_24EnumValueDescriptorProtoEE3NewEv:
  491|     99|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|     99|      return new T(nullptr);
  493|     99|    }
_ZN6google8protobuf5Arena21CreateMessageInternalINS0_11FileOptionsEEEPT_PS1_:
  577|      6|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|      6|    static_assert(
  579|      6|        InternalHelper<T>::is_arena_constructable::value,
  580|      6|        "CreateMessage can only construct types that are ArenaConstructable");
  581|      6|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 6, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|      6|      return InternalHelper<T>::New();
  585|      6|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|      6|  }
_ZN6google8protobuf5Arena14InternalHelperINS0_11FileOptionsEE3NewEv:
  491|      6|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|      6|      return new T(nullptr);
  493|      6|    }
_ZN6google8protobuf5Arena21CreateMessageInternalINS0_12FieldOptionsEEEPT_PS1_:
  577|     12|  PROTOBUF_NDEBUG_INLINE static T* CreateMessageInternal(Arena* arena) {
  578|     12|    static_assert(
  579|     12|        InternalHelper<T>::is_arena_constructable::value,
  580|     12|        "CreateMessage can only construct types that are ArenaConstructable");
  581|     12|    if (arena == NULL) {
  ------------------
  |  Branch (581:9): [True: 12, False: 0]
  ------------------
  582|       |      // Generated arena constructor T(Arena*) is protected. Call via
  583|       |      // InternalHelper.
  584|     12|      return InternalHelper<T>::New();
  585|     12|    } else {
  586|      0|      return arena->DoCreateMessage<T>();
  587|      0|    }
  588|     12|  }
_ZN6google8protobuf5Arena14InternalHelperINS0_12FieldOptionsEE3NewEv:
  491|     12|    static inline PROTOBUF_ALWAYS_INLINE T* New() {
  492|     12|      return new T(nullptr);
  493|     12|    }

_ZN6google8protobuf8internal14ArenaStringPtr3SetEONSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPNS0_5ArenaE:
  131|  42.1k|void ArenaStringPtr::Set(std::string&& value, Arena* arena) {
  132|  42.1k|  ScopedCheckPtrInvariants check(&tagged_ptr_);
  133|  42.1k|  if (IsDefault()) {
  ------------------
  |  Branch (133:7): [True: 42.1k, False: 0]
  ------------------
  134|  42.1k|    NewString(arena, std::move(value));
  135|  42.1k|  } else if (IsFixedSizeArena()) {
  ------------------
  |  Branch (135:14): [True: 0, False: 0]
  ------------------
  136|      0|    std::string* current = tagged_ptr_.Get();
  137|      0|    auto* s = new (current) std::string(std::move(value));
  138|      0|    arena->OwnDestructor(s);
  139|      0|    tagged_ptr_.SetMutableArena(s);
  140|      0|  } else /* !IsFixedSizeArena() */ {
  141|      0|    *UnsafeMutablePointer() = std::move(value);
  142|      0|  }
  143|  42.1k|}
_ZN6google8protobuf8internal14ArenaStringPtr7MutableEPNS0_5ArenaE:
  145|  1.60k|std::string* ArenaStringPtr::Mutable(Arena* arena) {
  146|  1.60k|  ScopedCheckPtrInvariants check(&tagged_ptr_);
  147|  1.60k|  if (tagged_ptr_.IsMutable()) {
  ------------------
  |  Branch (147:7): [True: 0, False: 1.60k]
  ------------------
  148|      0|    return tagged_ptr_.Get();
  149|  1.60k|  } else {
  150|  1.60k|    return MutableSlow(arena);
  151|  1.60k|  }
  152|  1.60k|}
_ZN6google8protobuf8internal14ArenaStringPtr7DestroyEv:
  219|  48.1k|void ArenaStringPtr::Destroy() {
  220|  48.1k|  delete tagged_ptr_.GetIfAllocated();
  221|  48.1k|}
arenastring.cc:_ZN6google8protobuf8internal12_GLOBAL__N_124ScopedCheckPtrInvariantsC2EPKNS1_15TaggedStringPtrE:
   94|  43.7k|  explicit ScopedCheckPtrInvariants(const TaggedStringPtr*) {}
_ZN6google8protobuf8internal14ArenaStringPtr11MutableSlowIJEEEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEPNS0_5ArenaEDpRKT_:
  177|  1.60k|                                         const Lazy&... lazy_default) {
  178|  1.60k|  GOOGLE_DCHECK(IsDefault());
  ------------------
  |  |  192|  1.60k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  1.60k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  1.60k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 1.60k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  179|       |
  180|       |  // For empty defaults, this ends up calling the default constructor which is
  181|       |  // more efficient than a copy construction from
  182|       |  // GetEmptyStringAlreadyInited().
  183|  1.60k|  return NewString(arena, lazy_default.get()...);
  184|  1.60k|}

_ZN6google8protobuf8internal15TaggedStringPtr12SetAllocatedEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE:
  144|  43.7k|  inline std::string* SetAllocated(std::string* p) {
  145|  43.7k|    return TagAs(kAllocated, p);
  146|  43.7k|  }
_ZNK6google8protobuf8internal15TaggedStringPtr9IsMutableEv:
  163|  1.60k|  inline bool IsMutable() const { return as_int() & kMutableBit; }
_ZNK6google8protobuf8internal15TaggedStringPtr9IsDefaultEv:
  166|  43.7k|  inline bool IsDefault() const { return (as_int() & kMask) == kDefault; }
_ZNK6google8protobuf8internal15TaggedStringPtr14GetIfAllocatedEv:
  170|  48.1k|  inline std::string *GetIfAllocated() const {
  171|  48.1k|    auto allocated = as_int() ^ kAllocated;
  172|  48.1k|    if (allocated & kMask) return nullptr;
  ------------------
  |  Branch (172:9): [True: 4.40k, False: 43.7k]
  ------------------
  173|       |
  174|  43.7k|    auto ptr = reinterpret_cast<std::string*>(allocated);
  175|  43.7k|    PROTOBUF_ASSUME(ptr != nullptr);
  ------------------
  |  |  558|  43.7k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  43.7k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  43.7k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  43.7k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 43.7k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  43.7k|  __builtin_assume(pred)
  ------------------
  176|  43.7k|    return ptr;
  177|  48.1k|  }
_ZN6google8protobuf8internal15TaggedStringPtr14assert_alignedEPKv:
  199|  43.7k|  static inline void assert_aligned(const void* p) {
  200|  43.7k|    GOOGLE_DCHECK_EQ(reinterpret_cast<uintptr_t>(p) & kMask, 0UL);
  ------------------
  |  |  194|  43.7k|#define GOOGLE_DCHECK_EQ GOOGLE_CHECK_EQ
  |  |  ------------------
  |  |  |  |  154|  43.7k|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  43.7k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  43.7k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 43.7k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  201|  43.7k|  }
_ZN6google8protobuf8internal15TaggedStringPtr5TagAsENS2_4TypeEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
  203|  43.7k|  inline std::string* TagAs(Type type, std::string* p) {
  204|  43.7k|    GOOGLE_DCHECK(p != nullptr);
  ------------------
  |  |  192|  43.7k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  43.7k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  43.7k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 43.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  205|  43.7k|    assert_aligned(p);
  206|  43.7k|    ptr_ = reinterpret_cast<void*>(reinterpret_cast<uintptr_t>(p) | type);
  207|  43.7k|    return p;
  208|  43.7k|  }
_ZNK6google8protobuf8internal14ArenaStringPtr9IsDefaultEv:
  353|  43.7k|  inline bool IsDefault() const { return tagged_ptr_.IsDefault(); }
_ZN6google8protobuf8internal14ArenaStringPtr9NewStringIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEPSA_PNS0_5ArenaEDpOT_:
  357|  42.1k|  inline std::string* NewString(Arena* arena, Args&&... args) {
  358|  42.1k|    if (arena == nullptr) {
  ------------------
  |  Branch (358:9): [True: 42.1k, False: 0]
  ------------------
  359|  42.1k|      auto* s = new std::string(std::forward<Args>(args)...);
  360|  42.1k|      return tagged_ptr_.SetAllocated(s);
  361|  42.1k|    } else {
  362|      0|      auto* s = Arena::Create<std::string>(arena, std::forward<Args>(args)...);
  363|      0|      return tagged_ptr_.SetMutableArena(s);
  364|      0|    }
  365|  42.1k|  }
_ZN6google8protobuf8internal14ArenaStringPtr9NewStringIJEEEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEPNS0_5ArenaEDpOT_:
  357|  1.60k|  inline std::string* NewString(Arena* arena, Args&&... args) {
  358|  1.60k|    if (arena == nullptr) {
  ------------------
  |  Branch (358:9): [True: 1.60k, False: 0]
  ------------------
  359|  1.60k|      auto* s = new std::string(std::forward<Args>(args)...);
  360|  1.60k|      return tagged_ptr_.SetAllocated(s);
  361|  1.60k|    } else {
  362|      0|      auto* s = Arena::Create<std::string>(arena, std::forward<Args>(args)...);
  363|      0|      return tagged_ptr_.SetMutableArena(s);
  364|      0|    }
  365|  1.60k|  }

_ZN6google8protobuf14DescriptorPool6TablesC2Ev:
 1424|      1|DescriptorPool::Tables::Tables() {
 1425|      1|  well_known_types_.insert({
 1426|      1|      {"google.protobuf.DoubleValue", Descriptor::WELLKNOWNTYPE_DOUBLEVALUE},
 1427|      1|      {"google.protobuf.FloatValue", Descriptor::WELLKNOWNTYPE_FLOATVALUE},
 1428|      1|      {"google.protobuf.Int64Value", Descriptor::WELLKNOWNTYPE_INT64VALUE},
 1429|      1|      {"google.protobuf.UInt64Value", Descriptor::WELLKNOWNTYPE_UINT64VALUE},
 1430|      1|      {"google.protobuf.Int32Value", Descriptor::WELLKNOWNTYPE_INT32VALUE},
 1431|      1|      {"google.protobuf.UInt32Value", Descriptor::WELLKNOWNTYPE_UINT32VALUE},
 1432|      1|      {"google.protobuf.StringValue", Descriptor::WELLKNOWNTYPE_STRINGVALUE},
 1433|      1|      {"google.protobuf.BytesValue", Descriptor::WELLKNOWNTYPE_BYTESVALUE},
 1434|      1|      {"google.protobuf.BoolValue", Descriptor::WELLKNOWNTYPE_BOOLVALUE},
 1435|      1|      {"google.protobuf.Any", Descriptor::WELLKNOWNTYPE_ANY},
 1436|      1|      {"google.protobuf.FieldMask", Descriptor::WELLKNOWNTYPE_FIELDMASK},
 1437|      1|      {"google.protobuf.Duration", Descriptor::WELLKNOWNTYPE_DURATION},
 1438|      1|      {"google.protobuf.Timestamp", Descriptor::WELLKNOWNTYPE_TIMESTAMP},
 1439|      1|      {"google.protobuf.Value", Descriptor::WELLKNOWNTYPE_VALUE},
 1440|      1|      {"google.protobuf.ListValue", Descriptor::WELLKNOWNTYPE_LISTVALUE},
 1441|      1|      {"google.protobuf.Struct", Descriptor::WELLKNOWNTYPE_STRUCT},
 1442|      1|  });
 1443|      1|}
_ZN6google8protobuf20FileDescriptorTablesC2Ev:
 1447|      3|FileDescriptorTables::FileDescriptorTables() {}
_ZN6google8protobuf14DescriptorPool6Tables13AddCheckpointEv:
 1460|      3|void DescriptorPool::Tables::AddCheckpoint() {
 1461|      3|  checkpoints_.push_back(CheckPoint(this));
 1462|      3|}
_ZN6google8protobuf14DescriptorPool6Tables19ClearLastCheckpointEv:
 1464|      3|void DescriptorPool::Tables::ClearLastCheckpoint() {
 1465|      3|  GOOGLE_DCHECK(!checkpoints_.empty());
  ------------------
  |  |  192|      3|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1466|      3|  checkpoints_.pop_back();
 1467|      3|  if (checkpoints_.empty()) {
  ------------------
  |  Branch (1467:7): [True: 3, False: 0]
  ------------------
 1468|       |    // All checkpoints have been cleared: we can now commit all of the pending
 1469|       |    // data.
 1470|      3|    symbols_after_checkpoint_.clear();
 1471|      3|    files_after_checkpoint_.clear();
 1472|      3|    extensions_after_checkpoint_.clear();
 1473|      3|  }
 1474|      3|}
_ZN6google8protobuf14DescriptorPool6Tables9AddSymbolERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_6SymbolE:
 1741|    395|                                       Symbol symbol) {
 1742|    395|  GOOGLE_DCHECK_EQ(full_name, symbol.full_name());
  ------------------
  |  |  194|    395|#define GOOGLE_DCHECK_EQ GOOGLE_CHECK_EQ
  |  |  ------------------
  |  |  |  |  154|    395|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|    395|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    395|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 395, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1743|    395|  if (symbols_by_name_.insert(symbol).second) {
  ------------------
  |  Branch (1743:7): [True: 395, False: 0]
  ------------------
 1744|    395|    symbols_after_checkpoint_.push_back(symbol);
 1745|    395|    return true;
 1746|    395|  } else {
 1747|      0|    return false;
 1748|      0|  }
 1749|    395|}
_ZN6google8protobuf20FileDescriptorTables19AddAliasUnderParentEPKvRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_6SymbolE:
 1753|    425|                                               Symbol symbol) {
 1754|    425|  GOOGLE_DCHECK_EQ(name, symbol.parent_name_key().second);
  ------------------
  |  |  194|    425|#define GOOGLE_DCHECK_EQ GOOGLE_CHECK_EQ
  |  |  ------------------
  |  |  |  |  154|    425|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|    425|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    425|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 425, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1755|    425|  GOOGLE_DCHECK_EQ(parent, symbol.parent_name_key().first);
  ------------------
  |  |  194|    425|#define GOOGLE_DCHECK_EQ GOOGLE_CHECK_EQ
  |  |  ------------------
  |  |  |  |  154|    425|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|    425|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    425|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 425, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1756|    425|  return symbols_by_parent_.insert(symbol).second;
 1757|    425|}
_ZN6google8protobuf14DescriptorPool6Tables7AddFileEPKNS0_14FileDescriptorE:
 1759|      3|bool DescriptorPool::Tables::AddFile(const FileDescriptor* file) {
 1760|      3|  if (InsertIfNotPresent(&files_by_name_, file->name(), file)) {
  ------------------
  |  Branch (1760:7): [True: 3, False: 0]
  ------------------
 1761|      3|    files_after_checkpoint_.push_back(file);
 1762|      3|    return true;
 1763|      3|  } else {
 1764|      0|    return false;
 1765|      0|  }
 1766|      3|}
_ZN6google8protobuf20FileDescriptorTables14FinalizeTablesEv:
 1768|      3|void FileDescriptorTables::FinalizeTables() {}
_ZN6google8protobuf20FileDescriptorTables16AddFieldByNumberEPNS0_15FieldDescriptorE:
 1770|    275|bool FileDescriptorTables::AddFieldByNumber(FieldDescriptor* field) {
 1771|       |  // Skip fields that are at the start of the sequence.
 1772|    275|  if (field->containing_type() != nullptr && field->number() >= 1 &&
  ------------------
  |  Branch (1772:7): [True: 275, False: 0]
  |  Branch (1772:46): [True: 275, False: 0]
  ------------------
 1773|    275|      field->number() <= field->containing_type()->sequential_field_limit_) {
  ------------------
  |  Branch (1773:7): [True: 201, False: 74]
  ------------------
 1774|    201|    if (field->is_extension()) {
  ------------------
  |  Branch (1774:9): [True: 0, False: 201]
  ------------------
 1775|       |      // Conflicts with the field that already exists in the sequential range.
 1776|      0|      return false;
 1777|      0|    }
 1778|       |    // Only return true if the field at that index matches. Otherwise it
 1779|       |    // conflicts with the existing field in the sequential range.
 1780|    201|    return field->containing_type()->field(field->number() - 1) == field;
 1781|    201|  }
 1782|       |
 1783|     74|  return fields_by_number_.insert(Symbol(field)).second;
 1784|    275|}
_ZN6google8protobuf20FileDescriptorTables20AddEnumValueByNumberEPNS0_19EnumValueDescriptorE:
 1786|     33|bool FileDescriptorTables::AddEnumValueByNumber(EnumValueDescriptor* value) {
 1787|       |  // Skip values that are at the start of the sequence.
 1788|     33|  const int base = value->type()->value(0)->number();
 1789|     33|  if (base <= value->number() &&
  ------------------
  |  Branch (1789:7): [True: 33, False: 0]
  ------------------
 1790|     33|      value->number() <=
  ------------------
  |  Branch (1790:7): [True: 33, False: 0]
  ------------------
 1791|     33|          static_cast<int64_t>(base) + value->type()->sequential_value_limit_)
 1792|     33|    return true;
 1793|      0|  return enum_values_by_number_.insert(Symbol::EnumValue(value, 0)).second;
 1794|     33|}
_ZN6google8protobuf14DescriptorPool6Tables13AllocateBytesEi:
 1815|      1|void* DescriptorPool::Tables::AllocateBytes(int size) {
 1816|      1|  if (size == 0) return nullptr;
  ------------------
  |  Branch (1816:7): [True: 0, False: 1]
  ------------------
 1817|      1|  void* p = ::operator new(size + RoundUpTo<8>(sizeof(int)));
 1818|      1|  int* sizep = static_cast<int*>(p);
 1819|      1|  misc_allocs_.emplace_back(sizep);
 1820|      1|  *sizep = size;
 1821|      1|  return static_cast<char*>(p) + RoundUpTo<8>(sizeof(int));
 1822|      1|}
_ZN6google8protobuf14DescriptorPoolC2EPNS0_18DescriptorDatabaseEPNS1_14ErrorCollectorE:
 1877|      1|    : mutex_(new internal::WrappedMutex),
 1878|      1|      fallback_database_(fallback_database),
 1879|      1|      default_error_collector_(error_collector),
 1880|      1|      underlay_(nullptr),
 1881|      1|      tables_(new Tables),
 1882|      1|      enforce_dependencies_(true),
 1883|      1|      lazily_build_dependencies_(false),
 1884|      1|      allow_unknown_(false),
 1885|      1|      enforce_weak_(false),
 1886|      1|      disallow_enforce_utf8_(false) {}
_ZN6google8protobuf14DescriptorPool31InternalDontEnforceDependenciesEv:
 1907|      1|void DescriptorPool::InternalDontEnforceDependencies() {
 1908|      1|  enforce_dependencies_ = false;
 1909|      1|}
_ZN6google8protobuf14DescriptorPool23internal_generated_poolEv:
 1948|    110|DescriptorPool* DescriptorPool::internal_generated_pool() {
 1949|    110|  static DescriptorPool* generated_pool =
 1950|    110|      internal::OnShutdownDelete(NewGeneratedPool());
 1951|    110|  return generated_pool;
 1952|    110|}
_ZN6google8protobuf14DescriptorPool14generated_poolEv:
 1954|     40|const DescriptorPool* DescriptorPool::generated_pool() {
 1955|     40|  const DescriptorPool* pool = internal_generated_pool();
 1956|       |  // Ensure that descriptor.proto has been registered in the generated pool.
 1957|     40|  DescriptorProto::descriptor();
 1958|     40|  return pool;
 1959|     40|}
_ZN6google8protobuf14DescriptorPool24InternalAddGeneratedFileEPKvi:
 1963|      6|    const void* encoded_file_descriptor, int size) {
 1964|       |  // So, this function is called in the process of initializing the
 1965|       |  // descriptors for generated proto classes.  Each generated .pb.cc file
 1966|       |  // has an internal procedure called AddDescriptors() which is called at
 1967|       |  // process startup, and that function calls this one in order to register
 1968|       |  // the raw bytes of the FileDescriptorProto representing the file.
 1969|       |  //
 1970|       |  // We do not actually construct the descriptor objects right away.  We just
 1971|       |  // hang on to the bytes until they are actually needed.  We actually construct
 1972|       |  // the descriptor the first time one of the following things happens:
 1973|       |  // * Someone calls a method like descriptor(), GetDescriptor(), or
 1974|       |  //   GetReflection() on the generated types, which requires returning the
 1975|       |  //   descriptor or an object based on it.
 1976|       |  // * Someone looks up the descriptor in DescriptorPool::generated_pool().
 1977|       |  //
 1978|       |  // Once one of these happens, the DescriptorPool actually parses the
 1979|       |  // FileDescriptorProto and generates a FileDescriptor (and all its children)
 1980|       |  // based on it.
 1981|       |  //
 1982|       |  // Note that FileDescriptorProto is itself a generated protocol message.
 1983|       |  // Therefore, when we parse one, we have to be very careful to avoid using
 1984|       |  // any descriptor-based operations, since this might cause infinite recursion
 1985|       |  // or deadlock.
 1986|      6|  GOOGLE_CHECK(GeneratedDatabase()->Add(encoded_file_descriptor, size));
  ------------------
  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1987|      6|}
_ZNK6google8protobuf14DescriptorPool14FindFileByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
 1997|      3|    ConstStringParam name) const {
 1998|      3|  MutexLockMaybe lock(mutex_);
 1999|      3|  if (fallback_database_ != nullptr) {
  ------------------
  |  Branch (1999:7): [True: 3, False: 0]
  ------------------
 2000|      3|    tables_->known_bad_symbols_.clear();
 2001|      3|    tables_->known_bad_files_.clear();
 2002|      3|  }
 2003|      3|  const FileDescriptor* result = tables_->FindFile(name);
 2004|      3|  if (result != nullptr) return result;
  ------------------
  |  Branch (2004:7): [True: 0, False: 3]
  ------------------
 2005|      3|  if (underlay_ != nullptr) {
  ------------------
  |  Branch (2005:7): [True: 0, False: 3]
  ------------------
 2006|      0|    result = underlay_->FindFileByName(name);
 2007|      0|    if (result != nullptr) return result;
  ------------------
  |  Branch (2007:9): [True: 0, False: 0]
  ------------------
 2008|      0|  }
 2009|      3|  if (TryFindFileInFallbackDatabase(name)) {
  ------------------
  |  Branch (2009:7): [True: 3, False: 0]
  ------------------
 2010|      3|    result = tables_->FindFile(name);
 2011|      3|    if (result != nullptr) return result;
  ------------------
  |  Branch (2011:9): [True: 3, False: 0]
  ------------------
 2012|      3|  }
 2013|      0|  return nullptr;
 2014|      3|}
_ZNK6google8protobuf10Descriptor15FindFieldByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
 2232|   615k|const FieldDescriptor* Descriptor::FindFieldByName(ConstStringParam key) const {
 2233|   615k|  const FieldDescriptor* field =
 2234|   615k|      file()->tables_->FindNestedSymbol(this, key).field_descriptor();
 2235|   615k|  return field != nullptr && !field->is_extension() ? field : nullptr;
  ------------------
  |  Branch (2235:10): [True: 615k, False: 0]
  |  Branch (2235:30): [True: 615k, False: 0]
  ------------------
 2236|   615k|}
_ZNK6google8protobuf14DescriptorPool29TryFindFileInFallbackDatabaseENS0_20stringpiece_internal11StringPieceE:
 2411|      3|    StringPiece name) const {
 2412|      3|  if (fallback_database_ == nullptr) return false;
  ------------------
  |  Branch (2412:7): [True: 0, False: 3]
  ------------------
 2413|       |
 2414|      3|  auto name_string = std::string(name);
 2415|      3|  if (tables_->known_bad_files_.count(name_string) > 0) return false;
  ------------------
  |  Branch (2415:7): [True: 0, False: 3]
  ------------------
 2416|       |
 2417|      3|  FileDescriptorProto file_proto;
 2418|      3|  if (!fallback_database_->FindFileByName(name_string, &file_proto) ||
  ------------------
  |  Branch (2418:7): [True: 0, False: 3]
  ------------------
 2419|      3|      BuildFileFromDatabase(file_proto) == nullptr) {
  ------------------
  |  Branch (2419:7): [True: 0, False: 3]
  ------------------
 2420|      0|    tables_->known_bad_files_.insert(std::move(name_string));
 2421|      0|    return false;
 2422|      0|  }
 2423|      3|  return true;
 2424|      3|}
_ZNK6google8protobuf15FieldDescriptor19is_map_message_typeEv:
 2517|   866k|bool FieldDescriptor::is_map_message_type() const {
 2518|   866k|  return type_descriptor_.message_type->options().map_entry();
 2519|   866k|}
_ZNK6google8protobuf10Descriptor15GetLocationPathEPNSt3__16vectorIiNS2_9allocatorIiEEEE:
 3584|      7|void Descriptor::GetLocationPath(std::vector<int>* output) const {
 3585|      7|  if (containing_type()) {
  ------------------
  |  Branch (3585:7): [True: 3, False: 4]
  ------------------
 3586|      3|    containing_type()->GetLocationPath(output);
 3587|      3|    output->push_back(DescriptorProto::kNestedTypeFieldNumber);
 3588|      3|    output->push_back(index());
 3589|      4|  } else {
 3590|      4|    output->push_back(FileDescriptorProto::kMessageTypeFieldNumber);
 3591|      4|    output->push_back(index());
 3592|      4|  }
 3593|      7|}
_ZNK6google8protobuf15FieldDescriptor15GetLocationPathEPNSt3__16vectorIiNS2_9allocatorIiEEEE:
 3595|      4|void FieldDescriptor::GetLocationPath(std::vector<int>* output) const {
 3596|      4|  if (is_extension()) {
  ------------------
  |  Branch (3596:7): [True: 0, False: 4]
  ------------------
 3597|      0|    if (extension_scope() == nullptr) {
  ------------------
  |  Branch (3597:9): [True: 0, False: 0]
  ------------------
 3598|      0|      output->push_back(FileDescriptorProto::kExtensionFieldNumber);
 3599|      0|      output->push_back(index());
 3600|      0|    } else {
 3601|      0|      extension_scope()->GetLocationPath(output);
 3602|      0|      output->push_back(DescriptorProto::kExtensionFieldNumber);
 3603|      0|      output->push_back(index());
 3604|      0|    }
 3605|      4|  } else {
 3606|      4|    containing_type()->GetLocationPath(output);
 3607|      4|    output->push_back(DescriptorProto::kFieldFieldNumber);
 3608|      4|    output->push_back(index());
 3609|      4|  }
 3610|      4|}
_ZNK6google8protobuf14DescriptorPool21BuildFileFromDatabaseERKNS0_19FileDescriptorProtoE:
 4167|      3|    const FileDescriptorProto& proto) const {
 4168|      3|  mutex_->AssertHeld();
 4169|      3|  if (tables_->known_bad_files_.count(proto.name()) > 0) {
  ------------------
  |  Branch (4169:7): [True: 0, False: 3]
  ------------------
 4170|      0|    return nullptr;
 4171|      0|  }
 4172|      3|  const FileDescriptor* result =
 4173|      3|      DescriptorBuilder(this, tables_.get(), default_error_collector_)
 4174|      3|          .BuildFile(proto);
 4175|      3|  if (result == nullptr) {
  ------------------
  |  Branch (4175:7): [True: 0, False: 3]
  ------------------
 4176|      0|    tables_->known_bad_files_.insert(proto.name());
 4177|      0|  }
 4178|      3|  return result;
 4179|      3|}
_ZN6google8protobuf17DescriptorBuilderC2EPKNS0_14DescriptorPoolEPNS2_6TablesEPNS2_14ErrorCollectorE:
 4184|      3|    : pool_(pool),
 4185|      3|      tables_(tables),
 4186|      3|      error_collector_(error_collector),
 4187|      3|      had_errors_(false),
 4188|      3|      possible_undeclared_dependency_(nullptr),
 4189|      3|      undefine_resolved_name_("") {}
_ZN6google8protobuf17DescriptorBuilderD2Ev:
 4191|      3|DescriptorBuilder::~DescriptorBuilder() {}
_ZN6google8protobuf17DescriptorBuilder32FindSymbolNotEnforcingDepsHelperEPKNS0_14DescriptorPoolERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEb:
 4275|    103|    const DescriptorPool* pool, const std::string& name, bool build_it) {
 4276|       |  // If we are looking at an underlay, we must lock its mutex_, since we are
 4277|       |  // accessing the underlay's tables_ directly.
 4278|    103|  MutexLockMaybe lock((pool == pool_) ? nullptr : pool->mutex_);
  ------------------
  |  Branch (4278:23): [True: 103, False: 0]
  ------------------
 4279|       |
 4280|    103|  Symbol result = pool->tables_->FindSymbol(name);
 4281|    103|  if (result.IsNull() && pool->underlay_ != nullptr) {
  ------------------
  |  Branch (4281:7): [True: 0, False: 103]
  |  Branch (4281:26): [True: 0, False: 0]
  ------------------
 4282|       |    // Symbol not found; check the underlay.
 4283|      0|    result = FindSymbolNotEnforcingDepsHelper(pool->underlay_, name);
 4284|      0|  }
 4285|       |
 4286|    103|  if (result.IsNull()) {
  ------------------
  |  Branch (4286:7): [True: 0, False: 103]
  ------------------
 4287|       |    // With lazily_build_dependencies_, a symbol lookup at cross link time is
 4288|       |    // not guaranteed to be successful. In most cases, build_it will be false,
 4289|       |    // which intentionally prevents us from building an import until it's
 4290|       |    // actually needed. In some cases, like registering an extension, we want
 4291|       |    // to build the file containing the symbol, and build_it will be set.
 4292|       |    // Also, build_it will be true when !lazily_build_dependencies_, to provide
 4293|       |    // better error reporting of missing dependencies.
 4294|      0|    if (build_it && pool->TryFindSymbolInFallbackDatabase(name)) {
  ------------------
  |  Branch (4294:9): [True: 0, False: 0]
  |  Branch (4294:9): [True: 0, False: 0]
  |  Branch (4294:21): [True: 0, False: 0]
  ------------------
 4295|      0|      result = pool->tables_->FindSymbol(name);
 4296|      0|    }
 4297|      0|  }
 4298|       |
 4299|    103|  return result;
 4300|    103|}
_ZN6google8protobuf17DescriptorBuilder26FindSymbolNotEnforcingDepsERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb:
 4303|    103|                                                     bool build_it) {
 4304|    103|  Symbol result = FindSymbolNotEnforcingDepsHelper(pool_, name, build_it);
 4305|       |  // Only find symbols which were defined in this file or one of its
 4306|       |  // dependencies.
 4307|    103|  const FileDescriptor* file = result.GetFile();
 4308|    103|  if (file == file_ || dependencies_.count(file) > 0) {
  ------------------
  |  Branch (4308:7): [True: 103, False: 0]
  |  Branch (4308:24): [True: 0, False: 0]
  ------------------
 4309|    103|    unused_dependency_.erase(file);
 4310|    103|  }
 4311|    103|  return result;
 4312|    103|}
_ZN6google8protobuf17DescriptorBuilder10FindSymbolERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb:
 4314|    103|Symbol DescriptorBuilder::FindSymbol(const std::string& name, bool build_it) {
 4315|    103|  Symbol result = FindSymbolNotEnforcingDeps(name, build_it);
 4316|       |
 4317|    103|  if (result.IsNull()) return result;
  ------------------
  |  Branch (4317:7): [True: 0, False: 103]
  ------------------
 4318|       |
 4319|    103|  if (!pool_->enforce_dependencies_) {
  ------------------
  |  Branch (4319:7): [True: 103, False: 0]
  ------------------
 4320|       |    // Hack for CompilerUpgrader, and also used for lazily_build_dependencies_
 4321|    103|    return result;
 4322|    103|  }
 4323|       |
 4324|       |  // Only find symbols which were defined in this file or one of its
 4325|       |  // dependencies.
 4326|      0|  const FileDescriptor* file = result.GetFile();
 4327|      0|  if (file == file_ || dependencies_.count(file) > 0) {
  ------------------
  |  Branch (4327:7): [True: 0, False: 0]
  |  Branch (4327:24): [True: 0, False: 0]
  ------------------
 4328|      0|    return result;
 4329|      0|  }
 4330|       |
 4331|      0|  if (result.IsPackage()) {
  ------------------
  |  Branch (4331:7): [True: 0, False: 0]
  ------------------
 4332|       |    // Arg, this is overcomplicated.  The symbol is a package name.  It could
 4333|       |    // be that the package was defined in multiple files.  result.GetFile()
 4334|       |    // returns the first file we saw that used this package.  We've determined
 4335|       |    // that that file is not a direct dependency of the file we are currently
 4336|       |    // building, but it could be that some other file which *is* a direct
 4337|       |    // dependency also defines the same package.  We can't really rule out this
 4338|       |    // symbol unless none of the dependencies define it.
 4339|      0|    if (IsInPackage(file_, name)) return result;
  ------------------
  |  Branch (4339:9): [True: 0, False: 0]
  ------------------
 4340|      0|    for (std::set<const FileDescriptor*>::const_iterator it =
 4341|      0|             dependencies_.begin();
 4342|      0|         it != dependencies_.end(); ++it) {
  ------------------
  |  Branch (4342:10): [True: 0, False: 0]
  ------------------
 4343|       |      // Note:  A dependency may be nullptr if it was not found or had errors.
 4344|      0|      if (*it != nullptr && IsInPackage(*it, name)) return result;
  ------------------
  |  Branch (4344:11): [True: 0, False: 0]
  |  Branch (4344:29): [True: 0, False: 0]
  ------------------
 4345|      0|    }
 4346|      0|  }
 4347|       |
 4348|      0|  possible_undeclared_dependency_ = file;
 4349|      0|  possible_undeclared_dependency_name_ = name;
 4350|      0|  return Symbol();
 4351|      0|}
_ZN6google8protobuf17DescriptorBuilder25LookupSymbolNoPlaceholderERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_NS1_11ResolveModeEb:
 4355|    103|    ResolveMode resolve_mode, bool build_it) {
 4356|    103|  possible_undeclared_dependency_ = nullptr;
 4357|    103|  undefine_resolved_name_.clear();
 4358|       |
 4359|    103|  if (!name.empty() && name[0] == '.') {
  ------------------
  |  Branch (4359:7): [True: 103, False: 0]
  |  Branch (4359:24): [True: 99, False: 4]
  ------------------
 4360|       |    // Fully-qualified name.
 4361|     99|    return FindSymbol(name.substr(1), build_it);
 4362|     99|  }
 4363|       |
 4364|       |  // If name is something like "Foo.Bar.baz", and symbols named "Foo" are
 4365|       |  // defined in multiple parent scopes, we only want to find "Bar.baz" in the
 4366|       |  // innermost one.  E.g., the following should produce an error:
 4367|       |  //   message Bar { message Baz {} }
 4368|       |  //   message Foo {
 4369|       |  //     message Bar {
 4370|       |  //     }
 4371|       |  //     optional Bar.Baz baz = 1;
 4372|       |  //   }
 4373|       |  // So, we look for just "Foo" first, then look for "Bar.baz" within it if
 4374|       |  // found.
 4375|      4|  std::string::size_type name_dot_pos = name.find_first_of('.');
 4376|      4|  std::string first_part_of_name;
 4377|      4|  if (name_dot_pos == std::string::npos) {
  ------------------
  |  Branch (4377:7): [True: 4, False: 0]
  ------------------
 4378|      4|    first_part_of_name = name;
 4379|      4|  } else {
 4380|      0|    first_part_of_name = name.substr(0, name_dot_pos);
 4381|      0|  }
 4382|       |
 4383|      4|  std::string scope_to_try(relative_to);
 4384|       |
 4385|      4|  while (true) {
  ------------------
  |  Branch (4385:10): [Folded - Ignored]
  ------------------
 4386|       |    // Chop off the last component of the scope.
 4387|      4|    std::string::size_type dot_pos = scope_to_try.find_last_of('.');
 4388|      4|    if (dot_pos == std::string::npos) {
  ------------------
  |  Branch (4388:9): [True: 0, False: 4]
  ------------------
 4389|      0|      return FindSymbol(name, build_it);
 4390|      4|    } else {
 4391|      4|      scope_to_try.erase(dot_pos);
 4392|      4|    }
 4393|       |
 4394|       |    // Append ".first_part_of_name" and try to find.
 4395|      4|    std::string::size_type old_size = scope_to_try.size();
 4396|      4|    scope_to_try.append(1, '.');
 4397|      4|    scope_to_try.append(first_part_of_name);
 4398|      4|    Symbol result = FindSymbol(scope_to_try, build_it);
 4399|      4|    if (!result.IsNull()) {
  ------------------
  |  Branch (4399:9): [True: 4, False: 0]
  ------------------
 4400|      4|      if (first_part_of_name.size() < name.size()) {
  ------------------
  |  Branch (4400:11): [True: 0, False: 4]
  ------------------
 4401|       |        // name is a compound symbol, of which we only found the first part.
 4402|       |        // Now try to look up the rest of it.
 4403|      0|        if (result.IsAggregate()) {
  ------------------
  |  Branch (4403:13): [True: 0, False: 0]
  ------------------
 4404|      0|          scope_to_try.append(name, first_part_of_name.size(),
 4405|      0|                              name.size() - first_part_of_name.size());
 4406|      0|          result = FindSymbol(scope_to_try, build_it);
 4407|      0|          if (result.IsNull()) {
  ------------------
  |  Branch (4407:15): [True: 0, False: 0]
  ------------------
 4408|      0|            undefine_resolved_name_ = scope_to_try;
 4409|      0|          }
 4410|      0|          return result;
 4411|      0|        } else {
 4412|       |          // We found a symbol but it's not an aggregate.  Continue the loop.
 4413|      0|        }
 4414|      4|      } else {
 4415|      4|        if (resolve_mode == LOOKUP_TYPES && !result.IsType()) {
  ------------------
  |  Branch (4415:13): [True: 0, False: 4]
  |  Branch (4415:45): [True: 0, False: 0]
  ------------------
 4416|       |          // We found a symbol but it's not a type.  Continue the loop.
 4417|      4|        } else {
 4418|      4|          return result;
 4419|      4|        }
 4420|      4|      }
 4421|      4|    }
 4422|       |
 4423|       |    // Not found.  Remove the name so we can try again.
 4424|      0|    scope_to_try.erase(old_size);
 4425|      0|  }
 4426|      4|}
_ZN6google8protobuf17DescriptorBuilder12LookupSymbolERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_NS0_14DescriptorPool15PlaceholderTypeENS1_11ResolveModeEb:
 4431|     99|    bool build_it) {
 4432|     99|  Symbol result =
 4433|     99|      LookupSymbolNoPlaceholder(name, relative_to, resolve_mode, build_it);
 4434|     99|  if (result.IsNull() && pool_->allow_unknown_) {
  ------------------
  |  Branch (4434:7): [True: 0, False: 99]
  |  Branch (4434:26): [True: 0, False: 0]
  ------------------
 4435|       |    // Not found, but AllowUnknownDependencies() is enabled.  Return a
 4436|       |    // placeholder instead.
 4437|      0|    result = pool_->NewPlaceholderWithMutexHeld(name, placeholder_type);
 4438|      0|  }
 4439|     99|  return result;
 4440|     99|}
_ZN6google8protobuf17DescriptorBuilder9AddSymbolERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKvSA_RKNS0_7MessageENS0_6SymbolE:
 4618|    392|                                  const Message& proto, Symbol symbol) {
 4619|       |  // If the caller passed nullptr for the parent, the symbol is at file scope.
 4620|       |  // Use its file as the parent instead.
 4621|    392|  if (parent == nullptr) parent = file_;
  ------------------
  |  Branch (4621:7): [True: 61, False: 331]
  ------------------
 4622|       |
 4623|    392|  if (full_name.find('\0') != std::string::npos) {
  ------------------
  |  Branch (4623:7): [True: 0, False: 392]
  ------------------
 4624|      0|    AddError(full_name, proto, DescriptorPool::ErrorCollector::NAME,
 4625|      0|             "\"" + full_name + "\" contains null character.");
 4626|      0|    return false;
 4627|      0|  }
 4628|    392|  if (tables_->AddSymbol(full_name, symbol)) {
  ------------------
  |  Branch (4628:7): [True: 392, False: 0]
  ------------------
 4629|    392|    if (!file_tables_->AddAliasUnderParent(parent, name, symbol)) {
  ------------------
  |  Branch (4629:9): [True: 0, False: 392]
  ------------------
 4630|       |      // This is only possible if there was already an error adding something of
 4631|       |      // the same name.
 4632|      0|      if (!had_errors_) {
  ------------------
  |  Branch (4632:11): [True: 0, False: 0]
  ------------------
 4633|      0|        GOOGLE_LOG(DFATAL) << "\"" << full_name
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
 4634|      0|                    << "\" not previously defined in "
 4635|      0|                       "symbols_by_name_, but was defined in "
 4636|      0|                       "symbols_by_parent_; this shouldn't be possible.";
 4637|      0|      }
 4638|      0|      return false;
 4639|      0|    }
 4640|    392|    return true;
 4641|    392|  } else {
 4642|      0|    const FileDescriptor* other_file = tables_->FindSymbol(full_name).GetFile();
 4643|      0|    if (other_file == file_) {
  ------------------
  |  Branch (4643:9): [True: 0, False: 0]
  ------------------
 4644|      0|      std::string::size_type dot_pos = full_name.find_last_of('.');
 4645|      0|      if (dot_pos == std::string::npos) {
  ------------------
  |  Branch (4645:11): [True: 0, False: 0]
  ------------------
 4646|      0|        AddError(full_name, proto, DescriptorPool::ErrorCollector::NAME,
 4647|      0|                 "\"" + full_name + "\" is already defined.");
 4648|      0|      } else {
 4649|      0|        AddError(full_name, proto, DescriptorPool::ErrorCollector::NAME,
 4650|      0|                 "\"" + full_name.substr(dot_pos + 1) +
 4651|      0|                     "\" is already defined in \"" +
 4652|      0|                     full_name.substr(0, dot_pos) + "\".");
 4653|      0|      }
 4654|      0|    } else {
 4655|       |      // Symbol seems to have been defined in a different file.
 4656|      0|      AddError(full_name, proto, DescriptorPool::ErrorCollector::NAME,
 4657|      0|               "\"" + full_name + "\" is already defined in file \"" +
 4658|      0|                   (other_file == nullptr ? "null" : other_file->name()) +
  ------------------
  |  Branch (4658:21): [True: 0, False: 0]
  ------------------
 4659|      0|                   "\".");
 4660|      0|    }
 4661|      0|    return false;
 4662|      0|  }
 4663|    392|}
_ZN6google8protobuf17DescriptorBuilder10AddPackageERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS0_7MessageEPNS0_14FileDescriptorE:
 4666|      4|                                   const Message& proto, FileDescriptor* file) {
 4667|      4|  if (name.find('\0') != std::string::npos) {
  ------------------
  |  Branch (4667:7): [True: 0, False: 4]
  ------------------
 4668|      0|    AddError(name, proto, DescriptorPool::ErrorCollector::NAME,
 4669|      0|             "\"" + name + "\" contains null character.");
 4670|      0|    return;
 4671|      0|  }
 4672|       |
 4673|      4|  Symbol existing_symbol = tables_->FindSymbol(name);
 4674|       |  // It's OK to redefine a package.
 4675|      4|  if (existing_symbol.IsNull()) {
  ------------------
  |  Branch (4675:7): [True: 3, False: 1]
  ------------------
 4676|      3|    if (&name == &file->package()) {
  ------------------
  |  Branch (4676:9): [True: 2, False: 1]
  ------------------
 4677|       |      // It is the toplevel package name, so insert the descriptor directly.
 4678|      2|      tables_->AddSymbol(file->package(), Symbol(file));
 4679|      2|    } else {
 4680|      1|      auto* package = tables_->Allocate<Symbol::Subpackage>();
 4681|       |      // If the name is the package name, then it is already in the arena.
 4682|       |      // If not, copy it there. It came from the call to AddPackage below.
 4683|      1|      package->name_size = static_cast<int>(name.size());
 4684|      1|      package->file = file;
 4685|      1|      tables_->AddSymbol(name, Symbol(package));
 4686|      1|    }
 4687|       |    // Also add parent package, if any.
 4688|      3|    std::string::size_type dot_pos = name.find_last_of('.');
 4689|      3|    if (dot_pos == std::string::npos) {
  ------------------
  |  Branch (4689:9): [True: 2, False: 1]
  ------------------
 4690|       |      // No parents.
 4691|      2|      ValidateSymbolName(name, name, proto);
 4692|      2|    } else {
 4693|       |      // Has parent.
 4694|      1|      AddPackage(name.substr(0, dot_pos), proto, file);
 4695|      1|      ValidateSymbolName(name.substr(dot_pos + 1), name, proto);
 4696|      1|    }
 4697|      3|  } else if (!existing_symbol.IsPackage()) {
  ------------------
  |  Branch (4697:14): [True: 0, False: 1]
  ------------------
 4698|       |    // Symbol seems to have been defined in a different file.
 4699|      0|    const FileDescriptor* other_file = existing_symbol.GetFile();
 4700|      0|    AddError(name, proto, DescriptorPool::ErrorCollector::NAME,
 4701|      0|             "\"" + name +
 4702|      0|                 "\" is already defined (as something other than "
 4703|      0|                 "a package) in file \"" +
 4704|      0|                 (other_file == nullptr ? "null" : other_file->name()) + "\".");
  ------------------
  |  Branch (4704:19): [True: 0, False: 0]
  ------------------
 4705|      0|  }
 4706|      4|}
_ZN6google8protobuf17DescriptorBuilder18ValidateSymbolNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_RKNS0_7MessageE:
 4710|    395|                                           const Message& proto) {
 4711|    395|  if (name.empty()) {
  ------------------
  |  Branch (4711:7): [True: 0, False: 395]
  ------------------
 4712|      0|    AddError(full_name, proto, DescriptorPool::ErrorCollector::NAME,
 4713|      0|             "Missing name.");
 4714|    395|  } else {
 4715|  5.37k|    for (char character : name) {
  ------------------
  |  Branch (4715:25): [True: 5.37k, False: 395]
  ------------------
 4716|       |      // I don't trust isalnum() due to locales.  :(
 4717|  5.37k|      if ((character < 'a' || 'z' < character) &&
  ------------------
  |  Branch (4717:12): [True: 917, False: 4.45k]
  |  Branch (4717:31): [True: 0, False: 4.45k]
  ------------------
 4718|  5.37k|          (character < 'A' || 'Z' < character) &&
  ------------------
  |  Branch (4718:12): [True: 68, False: 849]
  |  Branch (4718:31): [True: 383, False: 466]
  ------------------
 4719|  5.37k|          (character < '0' || '9' < character) && (character != '_')) {
  ------------------
  |  Branch (4719:12): [True: 0, False: 451]
  |  Branch (4719:31): [True: 383, False: 68]
  |  Branch (4719:51): [True: 0, False: 383]
  ------------------
 4720|      0|        AddError(full_name, proto, DescriptorPool::ErrorCollector::NAME,
 4721|      0|                 "\"" + name + "\" is not a valid identifier.");
 4722|      0|        return;
 4723|      0|      }
 4724|  5.37k|    }
 4725|    395|  }
 4726|    395|}
_ZN6google8protobuf17DescriptorBuilder15AllocateOptionsERKNS0_11FileOptionsEPNS0_14FileDescriptorERNS0_8internal13FlatAllocatorE:
 4748|      2|                                        internal::FlatAllocator& alloc) {
 4749|      2|  std::vector<int> options_path;
 4750|      2|  options_path.push_back(FileDescriptorProto::kOptionsFieldNumber);
 4751|       |  // We add the dummy token so that LookupSymbol does the right thing.
 4752|      2|  AllocateOptionsImpl(descriptor->package() + ".dummy", descriptor->name(),
 4753|      2|                      orig_options, descriptor, options_path,
 4754|      2|                      "google.protobuf.FileOptions", alloc);
 4755|      2|}
_ZN6google8protobuf17DescriptorBuilder9BuildFileERKNS0_19FileDescriptorProtoE:
 5000|      3|    const FileDescriptorProto& proto) {
 5001|      3|  filename_ = proto.name();
 5002|       |
 5003|       |  // Check if the file already exists and is identical to the one being built.
 5004|       |  // Note:  This only works if the input is canonical -- that is, it
 5005|       |  //   fully-qualifies all type names, has no UninterpretedOptions, etc.
 5006|       |  //   This is fine, because this idempotency "feature" really only exists to
 5007|       |  //   accommodate one hack in the proto1->proto2 migration layer.
 5008|      3|  const FileDescriptor* existing_file = tables_->FindFile(filename_);
 5009|      3|  if (existing_file != nullptr) {
  ------------------
  |  Branch (5009:7): [True: 0, False: 3]
  ------------------
 5010|       |    // File already in pool.  Compare the existing one to the input.
 5011|      0|    if (ExistingFileMatchesProto(existing_file, proto)) {
  ------------------
  |  Branch (5011:9): [True: 0, False: 0]
  ------------------
 5012|       |      // They're identical.  Return the existing descriptor.
 5013|      0|      return existing_file;
 5014|      0|    }
 5015|       |
 5016|       |    // Not a match.  The error will be detected and handled later.
 5017|      0|  }
 5018|       |
 5019|       |  // Check to see if this file is already on the pending files list.
 5020|       |  // TODO(kenton):  Allow recursive imports?  It may not work with some
 5021|       |  //   (most?) programming languages.  E.g., in C++, a forward declaration
 5022|       |  //   of a type is not sufficient to allow it to be used even in a
 5023|       |  //   generated header file due to inlining.  This could perhaps be
 5024|       |  //   worked around using tricks involving inserting #include statements
 5025|       |  //   mid-file, but that's pretty ugly, and I'm pretty sure there are
 5026|       |  //   some languages out there that do not allow recursive dependencies
 5027|       |  //   at all.
 5028|      3|  for (size_t i = 0; i < tables_->pending_files_.size(); i++) {
  ------------------
  |  Branch (5028:22): [True: 0, False: 3]
  ------------------
 5029|      0|    if (tables_->pending_files_[i] == proto.name()) {
  ------------------
  |  Branch (5029:9): [True: 0, False: 0]
  ------------------
 5030|      0|      AddRecursiveImportError(proto, i);
 5031|      0|      return nullptr;
 5032|      0|    }
 5033|      0|  }
 5034|       |
 5035|      3|  static const int kMaximumPackageLength = 511;
 5036|      3|  if (proto.package().size() > kMaximumPackageLength) {
  ------------------
  |  Branch (5036:7): [True: 0, False: 3]
  ------------------
 5037|      0|    AddError(proto.package(), proto, DescriptorPool::ErrorCollector::NAME,
 5038|      0|             "Package name is too long");
 5039|      0|    return nullptr;
 5040|      0|  }
 5041|       |
 5042|       |  // If we have a fallback_database_, and we aren't doing lazy import building,
 5043|       |  // attempt to load all dependencies now, before checkpointing tables_.  This
 5044|       |  // avoids confusion with recursive checkpoints.
 5045|      3|  if (!pool_->lazily_build_dependencies_) {
  ------------------
  |  Branch (5045:7): [True: 0, False: 3]
  ------------------
 5046|      0|    if (pool_->fallback_database_ != nullptr) {
  ------------------
  |  Branch (5046:9): [True: 0, False: 0]
  ------------------
 5047|      0|      tables_->pending_files_.push_back(proto.name());
 5048|      0|      for (int i = 0; i < proto.dependency_size(); i++) {
  ------------------
  |  Branch (5048:23): [True: 0, False: 0]
  ------------------
 5049|      0|        if (tables_->FindFile(proto.dependency(i)) == nullptr &&
  ------------------
  |  Branch (5049:13): [True: 0, False: 0]
  |  Branch (5049:13): [True: 0, False: 0]
  ------------------
 5050|      0|            (pool_->underlay_ == nullptr ||
  ------------------
  |  Branch (5050:14): [True: 0, False: 0]
  ------------------
 5051|      0|             pool_->underlay_->FindFileByName(proto.dependency(i)) ==
  ------------------
  |  Branch (5051:14): [True: 0, False: 0]
  ------------------
 5052|      0|                 nullptr)) {
 5053|       |          // We don't care what this returns since we'll find out below anyway.
 5054|      0|          pool_->TryFindFileInFallbackDatabase(proto.dependency(i));
 5055|      0|        }
 5056|      0|      }
 5057|      0|      tables_->pending_files_.pop_back();
 5058|      0|    }
 5059|      0|  }
 5060|       |
 5061|       |  // Checkpoint the tables so that we can roll back if something goes wrong.
 5062|      3|  tables_->AddCheckpoint();
 5063|       |
 5064|      3|  internal::FlatAllocator alloc;
 5065|      3|  PlanAllocationSize(proto, alloc);
 5066|      3|  alloc.FinalizePlanning(tables_);
 5067|      3|  FileDescriptor* result = BuildFileImpl(proto, alloc);
 5068|       |
 5069|      3|  file_tables_->FinalizeTables();
 5070|      3|  if (result) {
  ------------------
  |  Branch (5070:7): [True: 3, False: 0]
  ------------------
 5071|      3|    tables_->ClearLastCheckpoint();
 5072|      3|    result->finished_building_ = true;
 5073|      3|    alloc.ExpectConsumed();
 5074|      3|  } else {
 5075|      0|    tables_->RollbackToLastCheckpoint();
 5076|      0|  }
 5077|       |
 5078|      3|  return result;
 5079|      3|}
_ZN6google8protobuf17DescriptorBuilder13BuildFileImplERKNS0_19FileDescriptorProtoERNS0_8internal13FlatAllocatorE:
 5082|      3|    const FileDescriptorProto& proto, internal::FlatAllocator& alloc) {
 5083|      3|  FileDescriptor* result = alloc.AllocateArray<FileDescriptor>(1);
 5084|      3|  file_ = result;
 5085|       |
 5086|      3|  result->is_placeholder_ = false;
 5087|      3|  result->finished_building_ = false;
 5088|      3|  SourceCodeInfo* info = nullptr;
 5089|      3|  if (proto.has_source_code_info()) {
  ------------------
  |  Branch (5089:7): [True: 0, False: 3]
  ------------------
 5090|      0|    info = alloc.AllocateArray<SourceCodeInfo>(1);
 5091|      0|    info->CopyFrom(proto.source_code_info());
 5092|      0|    result->source_code_info_ = info;
 5093|      3|  } else {
 5094|      3|    result->source_code_info_ = &SourceCodeInfo::default_instance();
 5095|      3|  }
 5096|       |
 5097|      3|  file_tables_ = alloc.AllocateArray<FileDescriptorTables>(1);
 5098|      3|  file_->tables_ = file_tables_;
 5099|       |
 5100|      3|  if (!proto.has_name()) {
  ------------------
  |  Branch (5100:7): [True: 0, False: 3]
  ------------------
 5101|      0|    AddError("", proto, DescriptorPool::ErrorCollector::OTHER,
 5102|      0|             "Missing field: FileDescriptorProto.name.");
 5103|      0|  }
 5104|       |
 5105|       |  // TODO(liujisi): Report error when the syntax is empty after all the protos
 5106|       |  // have added the syntax statement.
 5107|      3|  if (proto.syntax().empty() || proto.syntax() == "proto2") {
  ------------------
  |  Branch (5107:7): [True: 2, False: 1]
  |  Branch (5107:33): [True: 0, False: 1]
  ------------------
 5108|      2|    file_->syntax_ = FileDescriptor::SYNTAX_PROTO2;
 5109|      2|  } else if (proto.syntax() == "proto3") {
  ------------------
  |  Branch (5109:14): [True: 1, False: 0]
  ------------------
 5110|      1|    file_->syntax_ = FileDescriptor::SYNTAX_PROTO3;
 5111|      1|  } else {
 5112|      0|    file_->syntax_ = FileDescriptor::SYNTAX_UNKNOWN;
 5113|      0|    AddError(proto.name(), proto, DescriptorPool::ErrorCollector::OTHER,
 5114|      0|             "Unrecognized syntax: " + proto.syntax());
 5115|      0|  }
 5116|       |
 5117|      3|  result->name_ = alloc.AllocateStrings(proto.name());
 5118|      3|  if (proto.has_package()) {
  ------------------
  |  Branch (5118:7): [True: 3, False: 0]
  ------------------
 5119|      3|    result->package_ = alloc.AllocateStrings(proto.package());
 5120|      3|  } else {
 5121|       |    // We cannot rely on proto.package() returning a valid string if
 5122|       |    // proto.has_package() is false, because we might be running at static
 5123|       |    // initialization time, in which case default values have not yet been
 5124|       |    // initialized.
 5125|      0|    result->package_ = alloc.AllocateStrings("");
 5126|      0|  }
 5127|      3|  result->pool_ = pool_;
 5128|       |
 5129|      3|  if (result->name().find('\0') != std::string::npos) {
  ------------------
  |  Branch (5129:7): [True: 0, False: 3]
  ------------------
 5130|      0|    AddError(result->name(), proto, DescriptorPool::ErrorCollector::NAME,
 5131|      0|             "\"" + result->name() + "\" contains null character.");
 5132|      0|    return nullptr;
 5133|      0|  }
 5134|       |
 5135|       |  // Add to tables.
 5136|      3|  if (!tables_->AddFile(result)) {
  ------------------
  |  Branch (5136:7): [True: 0, False: 3]
  ------------------
 5137|      0|    AddError(proto.name(), proto, DescriptorPool::ErrorCollector::OTHER,
 5138|      0|             "A file with this name is already in the pool.");
 5139|       |    // Bail out early so that if this is actually the exact same file, we
 5140|       |    // don't end up reporting that every single symbol is already defined.
 5141|      0|    return nullptr;
 5142|      0|  }
 5143|      3|  if (!result->package().empty()) {
  ------------------
  |  Branch (5143:7): [True: 3, False: 0]
  ------------------
 5144|      3|    if (std::count(result->package().begin(), result->package().end(), '.') >
  ------------------
  |  Branch (5144:9): [True: 0, False: 3]
  ------------------
 5145|      3|        kPackageLimit) {
 5146|      0|      AddError(result->package(), proto, DescriptorPool::ErrorCollector::NAME,
 5147|      0|               "Exceeds Maximum Package Depth");
 5148|      0|      return nullptr;
 5149|      0|    }
 5150|      3|    AddPackage(result->package(), proto, result);
 5151|      3|  }
 5152|       |
 5153|       |  // Make sure all dependencies are loaded.
 5154|      3|  std::set<std::string> seen_dependencies;
 5155|      3|  result->dependency_count_ = proto.dependency_size();
 5156|      3|  result->dependencies_ =
 5157|      3|      alloc.AllocateArray<const FileDescriptor*>(proto.dependency_size());
 5158|      3|  result->dependencies_once_ = nullptr;
 5159|      3|  unused_dependency_.clear();
 5160|      3|  std::set<int> weak_deps;
 5161|      3|  for (int i = 0; i < proto.weak_dependency_size(); ++i) {
  ------------------
  |  Branch (5161:19): [True: 0, False: 3]
  ------------------
 5162|      0|    weak_deps.insert(proto.weak_dependency(i));
 5163|      0|  }
 5164|       |
 5165|      3|  bool need_lazy_deps = false;
 5166|      3|  for (int i = 0; i < proto.dependency_size(); i++) {
  ------------------
  |  Branch (5166:19): [True: 0, False: 3]
  ------------------
 5167|      0|    if (!seen_dependencies.insert(proto.dependency(i)).second) {
  ------------------
  |  Branch (5167:9): [True: 0, False: 0]
  ------------------
 5168|      0|      AddTwiceListedError(proto, i);
 5169|      0|    }
 5170|       |
 5171|      0|    const FileDescriptor* dependency = tables_->FindFile(proto.dependency(i));
 5172|      0|    if (dependency == nullptr && pool_->underlay_ != nullptr) {
  ------------------
  |  Branch (5172:9): [True: 0, False: 0]
  |  Branch (5172:34): [True: 0, False: 0]
  ------------------
 5173|      0|      dependency = pool_->underlay_->FindFileByName(proto.dependency(i));
 5174|      0|    }
 5175|       |
 5176|      0|    if (dependency == result) {
  ------------------
  |  Branch (5176:9): [True: 0, False: 0]
  ------------------
 5177|       |      // Recursive import.  dependency/result is not fully initialized, and it's
 5178|       |      // dangerous to try to do anything with it.  The recursive import error
 5179|       |      // will be detected and reported in DescriptorBuilder::BuildFile().
 5180|      0|      return nullptr;
 5181|      0|    }
 5182|       |
 5183|      0|    if (dependency == nullptr) {
  ------------------
  |  Branch (5183:9): [True: 0, False: 0]
  ------------------
 5184|      0|      if (!pool_->lazily_build_dependencies_) {
  ------------------
  |  Branch (5184:11): [True: 0, False: 0]
  ------------------
 5185|      0|        if (pool_->allow_unknown_ ||
  ------------------
  |  Branch (5185:13): [True: 0, False: 0]
  |  Branch (5185:13): [True: 0, False: 0]
  ------------------
 5186|      0|            (!pool_->enforce_weak_ && weak_deps.find(i) != weak_deps.end())) {
  ------------------
  |  Branch (5186:14): [True: 0, False: 0]
  |  Branch (5186:39): [True: 0, False: 0]
  ------------------
 5187|      0|          internal::FlatAllocator lazy_dep_alloc;
 5188|      0|          lazy_dep_alloc.PlanArray<FileDescriptor>(1);
 5189|      0|          lazy_dep_alloc.PlanArray<std::string>(1);
 5190|      0|          lazy_dep_alloc.FinalizePlanning(tables_);
 5191|      0|          dependency = pool_->NewPlaceholderFileWithMutexHeld(
 5192|      0|              proto.dependency(i), lazy_dep_alloc);
 5193|      0|        } else {
 5194|      0|          AddImportError(proto, i);
 5195|      0|        }
 5196|      0|      }
 5197|      0|    } else {
 5198|       |      // Add to unused_dependency_ to track unused imported files.
 5199|       |      // Note: do not track unused imported files for public import.
 5200|      0|      if (pool_->enforce_dependencies_ &&
  ------------------
  |  Branch (5200:11): [True: 0, False: 0]
  |  Branch (5200:11): [True: 0, False: 0]
  ------------------
 5201|      0|          (pool_->unused_import_track_files_.find(proto.name()) !=
  ------------------
  |  Branch (5201:11): [True: 0, False: 0]
  ------------------
 5202|      0|           pool_->unused_import_track_files_.end()) &&
 5203|      0|          (dependency->public_dependency_count() == 0)) {
  ------------------
  |  Branch (5203:11): [True: 0, False: 0]
  ------------------
 5204|      0|        unused_dependency_.insert(dependency);
 5205|      0|      }
 5206|      0|    }
 5207|       |
 5208|      0|    result->dependencies_[i] = dependency;
 5209|      0|    if (pool_->lazily_build_dependencies_ && !dependency) {
  ------------------
  |  Branch (5209:9): [True: 0, False: 0]
  |  Branch (5209:46): [True: 0, False: 0]
  ------------------
 5210|      0|      need_lazy_deps = true;
 5211|      0|    }
 5212|      0|  }
 5213|      3|  if (need_lazy_deps) {
  ------------------
  |  Branch (5213:7): [True: 0, False: 3]
  ------------------
 5214|      0|    int total_char_size = 0;
 5215|      0|    for (int i = 0; i < proto.dependency_size(); i++) {
  ------------------
  |  Branch (5215:21): [True: 0, False: 0]
  ------------------
 5216|      0|      if (result->dependencies_[i] == nullptr) {
  ------------------
  |  Branch (5216:11): [True: 0, False: 0]
  ------------------
 5217|      0|        total_char_size += static_cast<int>(proto.dependency(i).size());
 5218|      0|      }
 5219|      0|      ++total_char_size;  // For NUL char
 5220|      0|    }
 5221|       |
 5222|      0|    void* data = tables_->AllocateBytes(
 5223|      0|        static_cast<int>(sizeof(internal::once_flag) + total_char_size));
 5224|      0|    result->dependencies_once_ = ::new (data) internal::once_flag{};
 5225|      0|    char* name_data = reinterpret_cast<char*>(result->dependencies_once_ + 1);
 5226|       |
 5227|      0|    for (int i = 0; i < proto.dependency_size(); i++) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 0]
  ------------------
 5228|      0|      if (result->dependencies_[i] == nullptr) {
  ------------------
  |  Branch (5228:11): [True: 0, False: 0]
  ------------------
 5229|      0|        memcpy(name_data, proto.dependency(i).c_str(),
 5230|      0|               proto.dependency(i).size());
 5231|      0|        name_data += proto.dependency(i).size();
 5232|      0|      }
 5233|      0|      *name_data++ = '\0';
 5234|      0|    }
 5235|      0|  }
 5236|       |
 5237|       |  // Check public dependencies.
 5238|      3|  int public_dependency_count = 0;
 5239|      3|  result->public_dependencies_ =
 5240|      3|      alloc.AllocateArray<int>(proto.public_dependency_size());
 5241|      3|  for (int i = 0; i < proto.public_dependency_size(); i++) {
  ------------------
  |  Branch (5241:19): [True: 0, False: 3]
  ------------------
 5242|       |    // Only put valid public dependency indexes.
 5243|      0|    int index = proto.public_dependency(i);
 5244|      0|    if (index >= 0 && index < proto.dependency_size()) {
  ------------------
  |  Branch (5244:9): [True: 0, False: 0]
  |  Branch (5244:23): [True: 0, False: 0]
  ------------------
 5245|      0|      result->public_dependencies_[public_dependency_count++] = index;
 5246|       |      // Do not track unused imported files for public import.
 5247|       |      // Calling dependency(i) builds that file when doing lazy imports,
 5248|       |      // need to avoid doing this. Unused dependency detection isn't done
 5249|       |      // when building lazily, anyways.
 5250|      0|      if (!pool_->lazily_build_dependencies_) {
  ------------------
  |  Branch (5250:11): [True: 0, False: 0]
  ------------------
 5251|      0|        unused_dependency_.erase(result->dependency(index));
 5252|      0|      }
 5253|      0|    } else {
 5254|      0|      AddError(proto.name(), proto, DescriptorPool::ErrorCollector::OTHER,
 5255|      0|               "Invalid public dependency index.");
 5256|      0|    }
 5257|      0|  }
 5258|      3|  result->public_dependency_count_ = public_dependency_count;
 5259|       |
 5260|       |  // Build dependency set
 5261|      3|  dependencies_.clear();
 5262|       |  // We don't/can't do proper dependency error checking when
 5263|       |  // lazily_build_dependencies_, and calling dependency(i) will force
 5264|       |  // a dependency to be built, which we don't want.
 5265|      3|  if (!pool_->lazily_build_dependencies_) {
  ------------------
  |  Branch (5265:7): [True: 0, False: 3]
  ------------------
 5266|      0|    for (int i = 0; i < result->dependency_count(); i++) {
  ------------------
  |  Branch (5266:21): [True: 0, False: 0]
  ------------------
 5267|      0|      RecordPublicDependencies(result->dependency(i));
 5268|      0|    }
 5269|      0|  }
 5270|       |
 5271|       |  // Check weak dependencies.
 5272|      3|  int weak_dependency_count = 0;
 5273|      3|  result->weak_dependencies_ =
 5274|      3|      alloc.AllocateArray<int>(proto.weak_dependency_size());
 5275|      3|  for (int i = 0; i < proto.weak_dependency_size(); i++) {
  ------------------
  |  Branch (5275:19): [True: 0, False: 3]
  ------------------
 5276|      0|    int index = proto.weak_dependency(i);
 5277|      0|    if (index >= 0 && index < proto.dependency_size()) {
  ------------------
  |  Branch (5277:9): [True: 0, False: 0]
  |  Branch (5277:23): [True: 0, False: 0]
  ------------------
 5278|      0|      result->weak_dependencies_[weak_dependency_count++] = index;
 5279|      0|    } else {
 5280|      0|      AddError(proto.name(), proto, DescriptorPool::ErrorCollector::OTHER,
 5281|      0|               "Invalid weak dependency index.");
 5282|      0|    }
 5283|      0|  }
 5284|      3|  result->weak_dependency_count_ = weak_dependency_count;
 5285|       |
 5286|       |  // Convert children.
 5287|      3|  BUILD_ARRAY(proto, result, message_type, BuildMessage, nullptr);
  ------------------
  |  | 4814|      3|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|      3|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|      3|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|      3|      INPUT.NAME##_size());                                            \
  |  | 4818|     64|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 61, False: 3]
  |  |  ------------------
  |  | 4819|     61|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|     61|  }
  ------------------
 5288|      3|  BUILD_ARRAY(proto, result, enum_type, BuildEnum, nullptr);
  ------------------
  |  | 4814|      3|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|      3|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|      3|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|      3|      INPUT.NAME##_size());                                            \
  |  | 4818|      3|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 0, False: 3]
  |  |  ------------------
  |  | 4819|      0|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|      0|  }
  ------------------
 5289|      3|  BUILD_ARRAY(proto, result, service, BuildService, nullptr);
  ------------------
  |  | 4814|      3|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|      3|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|      3|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|      3|      INPUT.NAME##_size());                                            \
  |  | 4818|      3|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 0, False: 3]
  |  |  ------------------
  |  | 4819|      0|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|      0|  }
  ------------------
 5290|      3|  BUILD_ARRAY(proto, result, extension, BuildExtension, nullptr);
  ------------------
  |  | 4814|      3|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|      3|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|      3|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|      3|      INPUT.NAME##_size());                                            \
  |  | 4818|      3|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 0, False: 3]
  |  |  ------------------
  |  | 4819|      0|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|      0|  }
  ------------------
 5291|       |
 5292|       |  // Copy options.
 5293|      3|  result->options_ = nullptr;  // Set to default_instance later if necessary.
 5294|      3|  if (proto.has_options()) {
  ------------------
  |  Branch (5294:7): [True: 2, False: 1]
  ------------------
 5295|      2|    AllocateOptions(proto.options(), result, alloc);
 5296|      2|  }
 5297|       |
 5298|       |  // Note that the following steps must occur in exactly the specified order.
 5299|       |
 5300|       |  // Cross-link.
 5301|      3|  CrossLinkFile(result, proto);
 5302|       |
 5303|      3|  if (!message_hints_.empty()) {
  ------------------
  |  Branch (5303:7): [True: 0, False: 3]
  ------------------
 5304|      0|    SuggestFieldNumbers(result, proto);
 5305|      0|  }
 5306|       |
 5307|       |  // Interpret any remaining uninterpreted options gathered into
 5308|       |  // options_to_interpret_ during descriptor building.  Cross-linking has made
 5309|       |  // extension options known, so all interpretations should now succeed.
 5310|      3|  if (!had_errors_) {
  ------------------
  |  Branch (5310:7): [True: 3, False: 0]
  ------------------
 5311|      3|    OptionInterpreter option_interpreter(this);
 5312|      3|    for (std::vector<OptionsToInterpret>::iterator iter =
 5313|      3|             options_to_interpret_.begin();
 5314|      3|         iter != options_to_interpret_.end(); ++iter) {
  ------------------
  |  Branch (5314:10): [True: 0, False: 3]
  ------------------
 5315|      0|      option_interpreter.InterpretOptions(&(*iter));
 5316|      0|    }
 5317|      3|    options_to_interpret_.clear();
 5318|      3|    if (info != nullptr) {
  ------------------
  |  Branch (5318:9): [True: 0, False: 3]
  ------------------
 5319|      0|      option_interpreter.UpdateSourceCodeInfo(info);
 5320|      0|    }
 5321|      3|  }
 5322|       |
 5323|       |  // Validate options. See comments at InternalSetLazilyBuildDependencies about
 5324|       |  // error checking and lazy import building.
 5325|      3|  if (!had_errors_ && !pool_->lazily_build_dependencies_) {
  ------------------
  |  Branch (5325:7): [True: 3, False: 0]
  |  Branch (5325:23): [True: 0, False: 3]
  ------------------
 5326|      0|    ValidateFileOptions(result, proto);
 5327|      0|  }
 5328|       |
 5329|       |  // Additional naming conflict check for map entry types. Only need to check
 5330|       |  // this if there are already errors.
 5331|      3|  if (had_errors_) {
  ------------------
  |  Branch (5331:7): [True: 0, False: 3]
  ------------------
 5332|      0|    for (int i = 0; i < proto.message_type_size(); ++i) {
  ------------------
  |  Branch (5332:21): [True: 0, False: 0]
  ------------------
 5333|      0|      DetectMapConflicts(result->message_type(i), proto.message_type(i));
 5334|      0|    }
 5335|      0|  }
 5336|       |
 5337|       |
 5338|       |  // Again, see comments at InternalSetLazilyBuildDependencies about error
 5339|       |  // checking. Also, don't log unused dependencies if there were previous
 5340|       |  // errors, since the results might be inaccurate.
 5341|      3|  if (!had_errors_ && !unused_dependency_.empty() &&
  ------------------
  |  Branch (5341:7): [True: 3, False: 0]
  |  Branch (5341:23): [True: 0, False: 3]
  ------------------
 5342|      3|      !pool_->lazily_build_dependencies_) {
  ------------------
  |  Branch (5342:7): [True: 0, False: 0]
  ------------------
 5343|      0|    LogUnusedDependency(proto, result);
 5344|      0|  }
 5345|       |
 5346|      3|  if (had_errors_) {
  ------------------
  |  Branch (5346:7): [True: 0, False: 3]
  ------------------
 5347|      0|    return nullptr;
 5348|      3|  } else {
 5349|      3|    return result;
 5350|      3|  }
 5351|      3|}
_ZN6google8protobuf17DescriptorBuilder19AllocateNameStringsERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_RNS0_8internal13FlatAllocatorE:
 5356|     84|    internal::FlatAllocator& alloc) {
 5357|     84|  if (scope.empty()) {
  ------------------
  |  Branch (5357:7): [True: 0, False: 84]
  ------------------
 5358|      0|    return alloc.AllocateStrings(proto_name, proto_name);
 5359|     84|  } else {
 5360|     84|    return alloc.AllocateStrings(proto_name,
 5361|     84|                                 StrCat(scope, ".", proto_name));
 5362|     84|  }
 5363|     84|}
_ZN6google8protobuf17DescriptorBuilder12BuildMessageERKNS0_15DescriptorProtoEPKNS0_10DescriptorEPS5_RNS0_8internal13FlatAllocatorE:
 5378|     67|                                     internal::FlatAllocator& alloc) {
 5379|     67|  const std::string& scope =
 5380|     67|      (parent == nullptr) ? file_->package() : parent->full_name();
  ------------------
  |  Branch (5380:7): [True: 61, False: 6]
  ------------------
 5381|     67|  result->all_names_ = AllocateNameStrings(scope, proto.name(), alloc);
 5382|     67|  ValidateSymbolName(proto.name(), result->full_name(), proto);
 5383|       |
 5384|     67|  result->file_ = file_;
 5385|     67|  result->containing_type_ = parent;
 5386|     67|  result->is_placeholder_ = false;
 5387|     67|  result->is_unqualified_placeholder_ = false;
 5388|     67|  result->well_known_type_ = Descriptor::WELLKNOWNTYPE_UNSPECIFIED;
 5389|     67|  result->options_ = nullptr;  // Set to default_instance later if necessary.
 5390|       |
 5391|     67|  auto it = pool_->tables_->well_known_types_.find(result->full_name());
 5392|     67|  if (it != pool_->tables_->well_known_types_.end()) {
  ------------------
  |  Branch (5392:7): [True: 1, False: 66]
  ------------------
 5393|      1|    result->well_known_type_ = it->second;
 5394|      1|  }
 5395|       |
 5396|       |  // Calculate the continuous sequence of fields.
 5397|       |  // These can be fast-path'd during lookup and don't need to be added to the
 5398|       |  // tables.
 5399|       |  // We use uint16_t to save space for sequential_field_limit_, so stop before
 5400|       |  // overflowing it. Worst case, we are not taking full advantage on huge
 5401|       |  // messages, but it is unlikely.
 5402|     67|  result->sequential_field_limit_ = 0;
 5403|    268|  for (int i = 0; i < std::numeric_limits<uint16_t>::max() &&
  ------------------
  |  Branch (5403:19): [True: 268, False: 0]
  ------------------
 5404|    268|                  i < proto.field_size() && proto.field(i).number() == i + 1;
  ------------------
  |  Branch (5404:19): [True: 215, False: 53]
  |  Branch (5404:45): [True: 201, False: 14]
  ------------------
 5405|    201|       ++i) {
 5406|    201|    result->sequential_field_limit_ = i + 1;
 5407|    201|  }
 5408|       |
 5409|       |  // Build oneofs first so that fields and extension ranges can refer to them.
 5410|     67|  BUILD_ARRAY(proto, result, oneof_decl, BuildOneof, result);
  ------------------
  |  | 4814|     67|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|     67|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|     67|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|     67|      INPUT.NAME##_size());                                            \
  |  | 4818|     78|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 11, False: 67]
  |  |  ------------------
  |  | 4819|     11|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|     11|  }
  ------------------
 5411|     67|  BUILD_ARRAY(proto, result, field, BuildField, result);
  ------------------
  |  | 4814|     67|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|     67|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|     67|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|     67|      INPUT.NAME##_size());                                            \
  |  | 4818|    342|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 275, False: 67]
  |  |  ------------------
  |  | 4819|    275|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|    275|  }
  ------------------
 5412|     67|  BUILD_ARRAY(proto, result, enum_type, BuildEnum, result);
  ------------------
  |  | 4814|     67|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|     67|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|     67|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|     67|      INPUT.NAME##_size());                                            \
  |  | 4818|     73|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 6, False: 67]
  |  |  ------------------
  |  | 4819|      6|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|      6|  }
  ------------------
 5413|     67|  BUILD_ARRAY(proto, result, extension_range, BuildExtensionRange, result);
  ------------------
  |  | 4814|     67|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|     67|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|     67|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|     67|      INPUT.NAME##_size());                                            \
  |  | 4818|     76|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 9, False: 67]
  |  |  ------------------
  |  | 4819|      9|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|      9|  }
  ------------------
 5414|     67|  BUILD_ARRAY(proto, result, extension, BuildExtension, result);
  ------------------
  |  | 4814|     67|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|     67|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|     67|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|     67|      INPUT.NAME##_size());                                            \
  |  | 4818|     67|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 0, False: 67]
  |  |  ------------------
  |  | 4819|      0|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|      0|  }
  ------------------
 5415|     67|  BUILD_ARRAY(proto, result, reserved_range, BuildReservedRange, result);
  ------------------
  |  | 4814|     67|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|     67|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|     67|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|     67|      INPUT.NAME##_size());                                            \
  |  | 4818|     75|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 8, False: 67]
  |  |  ------------------
  |  | 4819|      8|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|      8|  }
  ------------------
 5416|       |
 5417|       |  // Before building submessages, check recursion limit.
 5418|     67|  --recursion_depth_;
 5419|     67|  IncrementWhenDestroyed revert{recursion_depth_};
 5420|     67|  if (recursion_depth_ <= 0) {
  ------------------
  |  Branch (5420:7): [True: 0, False: 67]
  ------------------
 5421|      0|    AddError(result->full_name(), proto, DescriptorPool::ErrorCollector::OTHER,
 5422|      0|             "Reached maximum recursion limit for nested messages.");
 5423|      0|    result->nested_types_ = nullptr;
 5424|      0|    result->nested_type_count_ = 0;
 5425|      0|    return;
 5426|      0|  }
 5427|     67|  BUILD_ARRAY(proto, result, nested_type, BuildMessage, result);
  ------------------
  |  | 4814|     67|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|     67|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|     67|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|     67|      INPUT.NAME##_size());                                            \
  |  | 4818|     73|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 6, False: 67]
  |  |  ------------------
  |  | 4819|      6|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|      6|  }
  ------------------
 5428|       |
 5429|       |  // Copy reserved names.
 5430|     67|  int reserved_name_count = proto.reserved_name_size();
 5431|     67|  result->reserved_name_count_ = reserved_name_count;
 5432|     67|  result->reserved_names_ =
 5433|     67|      alloc.AllocateArray<const std::string*>(reserved_name_count);
 5434|     67|  for (int i = 0; i < reserved_name_count; ++i) {
  ------------------
  |  Branch (5434:19): [True: 0, False: 67]
  ------------------
 5435|      0|    result->reserved_names_[i] =
 5436|      0|        alloc.AllocateStrings(proto.reserved_name(i));
 5437|      0|  }
 5438|       |
 5439|       |  // Copy options.
 5440|     67|  if (proto.has_options()) {
  ------------------
  |  Branch (5440:7): [True: 0, False: 67]
  ------------------
 5441|      0|    AllocateOptions(proto.options(), result,
 5442|      0|                    DescriptorProto::kOptionsFieldNumber,
 5443|      0|                    "google.protobuf.MessageOptions", alloc);
 5444|      0|  }
 5445|       |
 5446|     67|  AddSymbol(result->full_name(), parent, result->name(), proto, Symbol(result));
 5447|       |
 5448|     75|  for (int i = 0; i < proto.reserved_range_size(); i++) {
  ------------------
  |  Branch (5448:19): [True: 8, False: 67]
  ------------------
 5449|      8|    const DescriptorProto_ReservedRange& range1 = proto.reserved_range(i);
 5450|     18|    for (int j = i + 1; j < proto.reserved_range_size(); j++) {
  ------------------
  |  Branch (5450:25): [True: 10, False: 8]
  ------------------
 5451|     10|      const DescriptorProto_ReservedRange& range2 = proto.reserved_range(j);
 5452|     10|      if (range1.end() > range2.start() && range2.end() > range1.start()) {
  ------------------
  |  Branch (5452:11): [True: 0, False: 10]
  |  Branch (5452:44): [True: 0, False: 0]
  ------------------
 5453|      0|        AddError(result->full_name(), proto.reserved_range(i),
 5454|      0|                 DescriptorPool::ErrorCollector::NUMBER,
 5455|      0|                 strings::Substitute("Reserved range $0 to $1 overlaps with "
 5456|      0|                                  "already-defined range $2 to $3.",
 5457|      0|                                  range2.start(), range2.end() - 1,
 5458|      0|                                  range1.start(), range1.end() - 1));
 5459|      0|      }
 5460|     10|    }
 5461|      8|  }
 5462|       |
 5463|     67|  HASH_SET<std::string> reserved_name_set;
  ------------------
  |  |  984|     67|#define HASH_SET std::unordered_set
  ------------------
 5464|     67|  for (int i = 0; i < proto.reserved_name_size(); i++) {
  ------------------
  |  Branch (5464:19): [True: 0, False: 67]
  ------------------
 5465|      0|    const std::string& name = proto.reserved_name(i);
 5466|      0|    if (reserved_name_set.find(name) == reserved_name_set.end()) {
  ------------------
  |  Branch (5466:9): [True: 0, False: 0]
  ------------------
 5467|      0|      reserved_name_set.insert(name);
 5468|      0|    } else {
 5469|      0|      AddError(name, proto, DescriptorPool::ErrorCollector::NAME,
 5470|      0|               strings::Substitute("Field name \"$0\" is reserved multiple times.",
 5471|      0|                                name));
 5472|      0|    }
 5473|      0|  }
 5474|       |
 5475|       |
 5476|    342|  for (int i = 0; i < result->field_count(); i++) {
  ------------------
  |  Branch (5476:19): [True: 275, False: 67]
  ------------------
 5477|    275|    const FieldDescriptor* field = result->field(i);
 5478|    321|    for (int j = 0; j < result->extension_range_count(); j++) {
  ------------------
  |  Branch (5478:21): [True: 46, False: 275]
  ------------------
 5479|     46|      const Descriptor::ExtensionRange* range = result->extension_range(j);
 5480|     46|      if (range->start <= field->number() && field->number() < range->end) {
  ------------------
  |  Branch (5480:11): [True: 0, False: 46]
  |  Branch (5480:46): [True: 0, False: 0]
  ------------------
 5481|      0|        message_hints_[result].RequestHintOnFieldNumbers(
 5482|      0|            proto.extension_range(j), DescriptorPool::ErrorCollector::NUMBER);
 5483|      0|        AddError(
 5484|      0|            field->full_name(), proto.extension_range(j),
 5485|      0|            DescriptorPool::ErrorCollector::NUMBER,
 5486|      0|            strings::Substitute(
 5487|      0|                "Extension range $0 to $1 includes field \"$2\" ($3).",
 5488|      0|                range->start, range->end - 1, field->name(), field->number()));
 5489|      0|      }
 5490|     46|    }
 5491|    332|    for (int j = 0; j < result->reserved_range_count(); j++) {
  ------------------
  |  Branch (5491:21): [True: 57, False: 275]
  ------------------
 5492|     57|      const Descriptor::ReservedRange* range = result->reserved_range(j);
 5493|     57|      if (range->start <= field->number() && field->number() < range->end) {
  ------------------
  |  Branch (5493:11): [True: 21, False: 36]
  |  Branch (5493:46): [True: 0, False: 21]
  ------------------
 5494|      0|        message_hints_[result].RequestHintOnFieldNumbers(
 5495|      0|            proto.reserved_range(j), DescriptorPool::ErrorCollector::NUMBER);
 5496|      0|        AddError(field->full_name(), proto.reserved_range(j),
 5497|      0|                 DescriptorPool::ErrorCollector::NUMBER,
 5498|      0|                 strings::Substitute("Field \"$0\" uses reserved number $1.",
 5499|      0|                                  field->name(), field->number()));
 5500|      0|      }
 5501|     57|    }
 5502|    275|    if (reserved_name_set.find(field->name()) != reserved_name_set.end()) {
  ------------------
  |  Branch (5502:9): [True: 0, False: 275]
  ------------------
 5503|      0|      AddError(
 5504|      0|          field->full_name(), proto.field(i),
 5505|      0|          DescriptorPool::ErrorCollector::NAME,
 5506|      0|          strings::Substitute("Field name \"$0\" is reserved.", field->name()));
 5507|      0|    }
 5508|       |
 5509|    275|  }
 5510|       |
 5511|       |  // Check that extension ranges don't overlap and don't include
 5512|       |  // reserved field numbers or names.
 5513|     76|  for (int i = 0; i < result->extension_range_count(); i++) {
  ------------------
  |  Branch (5513:19): [True: 9, False: 67]
  ------------------
 5514|      9|    const Descriptor::ExtensionRange* range1 = result->extension_range(i);
 5515|     17|    for (int j = 0; j < result->reserved_range_count(); j++) {
  ------------------
  |  Branch (5515:21): [True: 8, False: 9]
  ------------------
 5516|      8|      const Descriptor::ReservedRange* range2 = result->reserved_range(j);
 5517|      8|      if (range1->end > range2->start && range2->end > range1->start) {
  ------------------
  |  Branch (5517:11): [True: 8, False: 0]
  |  Branch (5517:42): [True: 0, False: 8]
  ------------------
 5518|      0|        AddError(result->full_name(), proto.extension_range(i),
 5519|      0|                 DescriptorPool::ErrorCollector::NUMBER,
 5520|      0|                 strings::Substitute("Extension range $0 to $1 overlaps with "
 5521|      0|                                  "reserved range $2 to $3.",
 5522|      0|                                  range1->start, range1->end - 1, range2->start,
 5523|      0|                                  range2->end - 1));
 5524|      0|      }
 5525|      8|    }
 5526|      9|    for (int j = i + 1; j < result->extension_range_count(); j++) {
  ------------------
  |  Branch (5526:25): [True: 0, False: 9]
  ------------------
 5527|      0|      const Descriptor::ExtensionRange* range2 = result->extension_range(j);
 5528|      0|      if (range1->end > range2->start && range2->end > range1->start) {
  ------------------
  |  Branch (5528:11): [True: 0, False: 0]
  |  Branch (5528:42): [True: 0, False: 0]
  ------------------
 5529|      0|        AddError(result->full_name(), proto.extension_range(i),
 5530|      0|                 DescriptorPool::ErrorCollector::NUMBER,
 5531|      0|                 strings::Substitute("Extension range $0 to $1 overlaps with "
 5532|      0|                                  "already-defined range $2 to $3.",
 5533|      0|                                  range2->start, range2->end - 1, range1->start,
 5534|      0|                                  range1->end - 1));
 5535|      0|      }
 5536|      0|    }
 5537|      9|  }
 5538|     67|}
_ZN6google8protobuf17DescriptorBuilder21BuildFieldOrExtensionERKNS0_20FieldDescriptorProtoEPNS0_10DescriptorEPNS0_15FieldDescriptorEbRNS0_8internal13FlatAllocatorE:
 5544|    275|                                              internal::FlatAllocator& alloc) {
 5545|    275|  const std::string& scope =
 5546|    275|      (parent == nullptr) ? file_->package() : parent->full_name();
  ------------------
  |  Branch (5546:7): [True: 0, False: 275]
  ------------------
 5547|       |
 5548|       |  // We allocate all names in a single array, and dedup them.
 5549|       |  // We remember the indices for the potentially deduped values.
 5550|    275|  auto all_names = alloc.AllocateFieldNames(
 5551|    275|      proto.name(), scope,
 5552|    275|      proto.has_json_name() ? &proto.json_name() : nullptr);
  ------------------
  |  Branch (5552:7): [True: 0, False: 275]
  ------------------
 5553|    275|  result->all_names_ = all_names.array;
 5554|    275|  result->lowercase_name_index_ = all_names.lowercase_index;
 5555|    275|  result->camelcase_name_index_ = all_names.camelcase_index;
 5556|    275|  result->json_name_index_ = all_names.json_index;
 5557|       |
 5558|    275|  ValidateSymbolName(proto.name(), result->full_name(), proto);
 5559|       |
 5560|    275|  result->file_ = file_;
 5561|    275|  result->number_ = proto.number();
 5562|    275|  result->is_extension_ = is_extension;
 5563|    275|  result->is_oneof_ = false;
 5564|    275|  result->proto3_optional_ = proto.proto3_optional();
 5565|       |
 5566|    275|  if (proto.proto3_optional() &&
  ------------------
  |  Branch (5566:7): [True: 0, False: 275]
  ------------------
 5567|    275|      file_->syntax() != FileDescriptor::SYNTAX_PROTO3) {
  ------------------
  |  Branch (5567:7): [True: 0, False: 0]
  ------------------
 5568|      0|    AddError(result->full_name(), proto, DescriptorPool::ErrorCollector::TYPE,
 5569|      0|             "The [proto3_optional=true] option may only be set on proto3"
 5570|      0|             "fields, not " +
 5571|      0|                 result->full_name());
 5572|      0|  }
 5573|       |
 5574|    275|  result->has_json_name_ = proto.has_json_name();
 5575|       |
 5576|       |  // Some compilers do not allow static_cast directly between two enum types,
 5577|       |  // so we must cast to int first.
 5578|    275|  result->type_ = static_cast<FieldDescriptor::Type>(
 5579|    275|      implicit_cast<int>(proto.type()));
 5580|    275|  result->label_ = static_cast<FieldDescriptor::Label>(
 5581|    275|      implicit_cast<int>(proto.label()));
 5582|       |
 5583|    275|  if (result->label_ == FieldDescriptor::LABEL_REQUIRED) {
  ------------------
  |  Branch (5583:7): [True: 15, False: 260]
  ------------------
 5584|       |    // An extension cannot have a required field (b/13365836).
 5585|     15|    if (result->is_extension_) {
  ------------------
  |  Branch (5585:9): [True: 0, False: 15]
  ------------------
 5586|      0|      AddError(result->full_name(), proto,
 5587|       |               // Error location `TYPE`: we would really like to indicate
 5588|       |               // `LABEL`, but the `ErrorLocation` enum has no entry for this,
 5589|       |               // and we don't necessarily know about all implementations of the
 5590|       |               // `ErrorCollector` interface to extend them to handle the new
 5591|       |               // error location type properly.
 5592|      0|               DescriptorPool::ErrorCollector::TYPE,
 5593|      0|               "The extension " + result->full_name() + " cannot be required.");
 5594|      0|    }
 5595|     15|  }
 5596|       |
 5597|       |  // Some of these may be filled in when cross-linking.
 5598|    275|  result->containing_type_ = nullptr;
 5599|    275|  result->type_once_ = nullptr;
 5600|    275|  result->default_value_enum_ = nullptr;
 5601|       |
 5602|    275|  result->has_default_value_ = proto.has_default_value();
 5603|    275|  if (proto.has_default_value() && result->is_repeated()) {
  ------------------
  |  Branch (5603:7): [True: 25, False: 250]
  |  Branch (5603:36): [True: 0, False: 25]
  ------------------
 5604|      0|    AddError(result->full_name(), proto,
 5605|      0|             DescriptorPool::ErrorCollector::DEFAULT_VALUE,
 5606|      0|             "Repeated fields can't have default values.");
 5607|      0|  }
 5608|       |
 5609|    275|  if (proto.has_type()) {
  ------------------
  |  Branch (5609:7): [True: 275, False: 0]
  ------------------
 5610|    275|    if (proto.has_default_value()) {
  ------------------
  |  Branch (5610:9): [True: 25, False: 250]
  ------------------
 5611|     25|      char* end_pos = nullptr;
 5612|     25|      switch (result->cpp_type()) {
  ------------------
  |  Branch (5612:15): [True: 0, False: 25]
  ------------------
 5613|      0|        case FieldDescriptor::CPPTYPE_INT32:
  ------------------
  |  Branch (5613:9): [True: 0, False: 25]
  ------------------
 5614|      0|          result->default_value_int32_t_ =
 5615|      0|              strtol(proto.default_value().c_str(), &end_pos, 0);
 5616|      0|          break;
 5617|      0|        case FieldDescriptor::CPPTYPE_INT64:
  ------------------
  |  Branch (5617:9): [True: 0, False: 25]
  ------------------
 5618|      0|          result->default_value_int64_t_ =
 5619|      0|              strto64(proto.default_value().c_str(), &end_pos, 0);
 5620|      0|          break;
 5621|      0|        case FieldDescriptor::CPPTYPE_UINT32:
  ------------------
  |  Branch (5621:9): [True: 0, False: 25]
  ------------------
 5622|      0|          result->default_value_uint32_t_ =
 5623|      0|              strtoul(proto.default_value().c_str(), &end_pos, 0);
 5624|      0|          break;
 5625|      0|        case FieldDescriptor::CPPTYPE_UINT64:
  ------------------
  |  Branch (5625:9): [True: 0, False: 25]
  ------------------
 5626|      0|          result->default_value_uint64_t_ =
 5627|      0|              strtou64(proto.default_value().c_str(), &end_pos, 0);
 5628|      0|          break;
 5629|      0|        case FieldDescriptor::CPPTYPE_FLOAT:
  ------------------
  |  Branch (5629:9): [True: 0, False: 25]
  ------------------
 5630|      0|          if (proto.default_value() == "inf") {
  ------------------
  |  Branch (5630:15): [True: 0, False: 0]
  ------------------
 5631|      0|            result->default_value_float_ =
 5632|      0|                std::numeric_limits<float>::infinity();
 5633|      0|          } else if (proto.default_value() == "-inf") {
  ------------------
  |  Branch (5633:22): [True: 0, False: 0]
  ------------------
 5634|      0|            result->default_value_float_ =
 5635|      0|                -std::numeric_limits<float>::infinity();
 5636|      0|          } else if (proto.default_value() == "nan") {
  ------------------
  |  Branch (5636:22): [True: 0, False: 0]
  ------------------
 5637|      0|            result->default_value_float_ =
 5638|      0|                std::numeric_limits<float>::quiet_NaN();
 5639|      0|          } else {
 5640|      0|            result->default_value_float_ = io::SafeDoubleToFloat(
 5641|      0|                io::NoLocaleStrtod(proto.default_value().c_str(), &end_pos));
 5642|      0|          }
 5643|      0|          break;
 5644|      0|        case FieldDescriptor::CPPTYPE_DOUBLE:
  ------------------
  |  Branch (5644:9): [True: 0, False: 25]
  ------------------
 5645|      0|          if (proto.default_value() == "inf") {
  ------------------
  |  Branch (5645:15): [True: 0, False: 0]
  ------------------
 5646|      0|            result->default_value_double_ =
 5647|      0|                std::numeric_limits<double>::infinity();
 5648|      0|          } else if (proto.default_value() == "-inf") {
  ------------------
  |  Branch (5648:22): [True: 0, False: 0]
  ------------------
 5649|      0|            result->default_value_double_ =
 5650|      0|                -std::numeric_limits<double>::infinity();
 5651|      0|          } else if (proto.default_value() == "nan") {
  ------------------
  |  Branch (5651:22): [True: 0, False: 0]
  ------------------
 5652|      0|            result->default_value_double_ =
 5653|      0|                std::numeric_limits<double>::quiet_NaN();
 5654|      0|          } else {
 5655|      0|            result->default_value_double_ =
 5656|      0|                io::NoLocaleStrtod(proto.default_value().c_str(), &end_pos);
 5657|      0|          }
 5658|      0|          break;
 5659|     21|        case FieldDescriptor::CPPTYPE_BOOL:
  ------------------
  |  Branch (5659:9): [True: 21, False: 4]
  ------------------
 5660|     21|          if (proto.default_value() == "true") {
  ------------------
  |  Branch (5660:15): [True: 1, False: 20]
  ------------------
 5661|      1|            result->default_value_bool_ = true;
 5662|     20|          } else if (proto.default_value() == "false") {
  ------------------
  |  Branch (5662:22): [True: 20, False: 0]
  ------------------
 5663|     20|            result->default_value_bool_ = false;
 5664|     20|          } else {
 5665|      0|            AddError(result->full_name(), proto,
 5666|      0|                     DescriptorPool::ErrorCollector::DEFAULT_VALUE,
 5667|      0|                     "Boolean default must be true or false.");
 5668|      0|          }
 5669|     21|          break;
 5670|      4|        case FieldDescriptor::CPPTYPE_ENUM:
  ------------------
  |  Branch (5670:9): [True: 4, False: 21]
  ------------------
 5671|       |          // This will be filled in when cross-linking.
 5672|      4|          result->default_value_enum_ = nullptr;
 5673|      4|          break;
 5674|      0|        case FieldDescriptor::CPPTYPE_STRING:
  ------------------
  |  Branch (5674:9): [True: 0, False: 25]
  ------------------
 5675|      0|          if (result->type() == FieldDescriptor::TYPE_BYTES) {
  ------------------
  |  Branch (5675:15): [True: 0, False: 0]
  ------------------
 5676|      0|            result->default_value_string_ = alloc.AllocateStrings(
 5677|      0|                UnescapeCEscapeString(proto.default_value()));
 5678|      0|          } else {
 5679|      0|            result->default_value_string_ =
 5680|      0|                alloc.AllocateStrings(proto.default_value());
 5681|      0|          }
 5682|      0|          break;
 5683|      0|        case FieldDescriptor::CPPTYPE_MESSAGE:
  ------------------
  |  Branch (5683:9): [True: 0, False: 25]
  ------------------
 5684|      0|          AddError(result->full_name(), proto,
 5685|      0|                   DescriptorPool::ErrorCollector::DEFAULT_VALUE,
 5686|      0|                   "Messages can't have default values.");
 5687|      0|          result->has_default_value_ = false;
 5688|      0|          result->default_generated_instance_ = nullptr;
 5689|      0|          break;
 5690|     25|      }
 5691|       |
 5692|     25|      if (end_pos != nullptr) {
  ------------------
  |  Branch (5692:11): [True: 0, False: 25]
  ------------------
 5693|       |        // end_pos is only set non-null by the parsers for numeric types,
 5694|       |        // above. This checks that the default was non-empty and had no extra
 5695|       |        // junk after the end of the number.
 5696|      0|        if (proto.default_value().empty() || *end_pos != '\0') {
  ------------------
  |  Branch (5696:13): [True: 0, False: 0]
  |  Branch (5696:46): [True: 0, False: 0]
  ------------------
 5697|      0|          AddError(result->full_name(), proto,
 5698|      0|                   DescriptorPool::ErrorCollector::DEFAULT_VALUE,
 5699|      0|                   "Couldn't parse default value \"" + proto.default_value() +
 5700|      0|                       "\".");
 5701|      0|        }
 5702|      0|      }
 5703|    250|    } else {
 5704|       |      // No explicit default value
 5705|    250|      switch (result->cpp_type()) {
  ------------------
  |  Branch (5705:15): [True: 0, False: 250]
  ------------------
 5706|    100|        case FieldDescriptor::CPPTYPE_INT32:
  ------------------
  |  Branch (5706:9): [True: 100, False: 150]
  ------------------
 5707|    100|          result->default_value_int32_t_ = 0;
 5708|    100|          break;
 5709|      1|        case FieldDescriptor::CPPTYPE_INT64:
  ------------------
  |  Branch (5709:9): [True: 1, False: 249]
  ------------------
 5710|      1|          result->default_value_int64_t_ = 0;
 5711|      1|          break;
 5712|      5|        case FieldDescriptor::CPPTYPE_UINT32:
  ------------------
  |  Branch (5712:9): [True: 5, False: 245]
  ------------------
 5713|      5|          result->default_value_uint32_t_ = 0;
 5714|      5|          break;
 5715|      1|        case FieldDescriptor::CPPTYPE_UINT64:
  ------------------
  |  Branch (5715:9): [True: 1, False: 249]
  ------------------
 5716|      1|          result->default_value_uint64_t_ = 0;
 5717|      1|          break;
 5718|      0|        case FieldDescriptor::CPPTYPE_FLOAT:
  ------------------
  |  Branch (5718:9): [True: 0, False: 250]
  ------------------
 5719|      0|          result->default_value_float_ = 0.0f;
 5720|      0|          break;
 5721|      1|        case FieldDescriptor::CPPTYPE_DOUBLE:
  ------------------
  |  Branch (5721:9): [True: 1, False: 249]
  ------------------
 5722|      1|          result->default_value_double_ = 0.0;
 5723|      1|          break;
 5724|      6|        case FieldDescriptor::CPPTYPE_BOOL:
  ------------------
  |  Branch (5724:9): [True: 6, False: 244]
  ------------------
 5725|      6|          result->default_value_bool_ = false;
 5726|      6|          break;
 5727|      2|        case FieldDescriptor::CPPTYPE_ENUM:
  ------------------
  |  Branch (5727:9): [True: 2, False: 248]
  ------------------
 5728|       |          // This will be filled in when cross-linking.
 5729|      2|          result->default_value_enum_ = nullptr;
 5730|      2|          break;
 5731|     41|        case FieldDescriptor::CPPTYPE_STRING:
  ------------------
  |  Branch (5731:9): [True: 41, False: 209]
  ------------------
 5732|     41|          result->default_value_string_ = &internal::GetEmptyString();
 5733|     41|          break;
 5734|     93|        case FieldDescriptor::CPPTYPE_MESSAGE:
  ------------------
  |  Branch (5734:9): [True: 93, False: 157]
  ------------------
 5735|     93|          result->default_generated_instance_ = nullptr;
 5736|     93|          break;
 5737|    250|      }
 5738|    250|    }
 5739|    275|  }
 5740|       |
 5741|    275|  if (result->number() <= 0) {
  ------------------
  |  Branch (5741:7): [True: 0, False: 275]
  ------------------
 5742|      0|    message_hints_[parent].RequestHintOnFieldNumbers(
 5743|      0|        proto, DescriptorPool::ErrorCollector::NUMBER);
 5744|      0|    AddError(result->full_name(), proto, DescriptorPool::ErrorCollector::NUMBER,
 5745|      0|             "Field numbers must be positive integers.");
 5746|    275|  } else if (!is_extension && result->number() > FieldDescriptor::kMaxNumber) {
  ------------------
  |  Branch (5746:14): [True: 275, False: 0]
  |  Branch (5746:31): [True: 0, False: 275]
  ------------------
 5747|       |    // Only validate that the number is within the valid field range if it is
 5748|       |    // not an extension. Since extension numbers are validated with the
 5749|       |    // extendee's valid set of extension numbers, and those are in turn
 5750|       |    // validated against the max allowed number, the check is unnecessary for
 5751|       |    // extension fields.
 5752|       |    // This avoids cross-linking issues that arise when attempting to check if
 5753|       |    // the extendee is a message_set_wire_format message, which has a higher max
 5754|       |    // on extension numbers.
 5755|      0|    message_hints_[parent].RequestHintOnFieldNumbers(
 5756|      0|        proto, DescriptorPool::ErrorCollector::NUMBER);
 5757|      0|    AddError(result->full_name(), proto, DescriptorPool::ErrorCollector::NUMBER,
 5758|      0|             strings::Substitute("Field numbers cannot be greater than $0.",
 5759|      0|                              FieldDescriptor::kMaxNumber));
 5760|    275|  } else if (result->number() >= FieldDescriptor::kFirstReservedNumber &&
  ------------------
  |  Branch (5760:14): [True: 0, False: 275]
  ------------------
 5761|    275|             result->number() <= FieldDescriptor::kLastReservedNumber) {
  ------------------
  |  Branch (5761:14): [True: 0, False: 0]
  ------------------
 5762|      0|    message_hints_[parent].RequestHintOnFieldNumbers(
 5763|      0|        proto, DescriptorPool::ErrorCollector::NUMBER);
 5764|      0|    AddError(result->full_name(), proto, DescriptorPool::ErrorCollector::NUMBER,
 5765|      0|             strings::Substitute(
 5766|      0|                 "Field numbers $0 through $1 are reserved for the protocol "
 5767|      0|                 "buffer library implementation.",
 5768|      0|                 FieldDescriptor::kFirstReservedNumber,
 5769|      0|                 FieldDescriptor::kLastReservedNumber));
 5770|      0|  }
 5771|       |
 5772|    275|  if (is_extension) {
  ------------------
  |  Branch (5772:7): [True: 0, False: 275]
  ------------------
 5773|      0|    if (!proto.has_extendee()) {
  ------------------
  |  Branch (5773:9): [True: 0, False: 0]
  ------------------
 5774|      0|      AddError(result->full_name(), proto,
 5775|      0|               DescriptorPool::ErrorCollector::EXTENDEE,
 5776|      0|               "FieldDescriptorProto.extendee not set for extension field.");
 5777|      0|    }
 5778|       |
 5779|      0|    result->scope_.extension_scope = parent;
 5780|       |
 5781|      0|    if (proto.has_oneof_index()) {
  ------------------
  |  Branch (5781:9): [True: 0, False: 0]
  ------------------
 5782|      0|      AddError(result->full_name(), proto, DescriptorPool::ErrorCollector::TYPE,
 5783|      0|               "FieldDescriptorProto.oneof_index should not be set for "
 5784|      0|               "extensions.");
 5785|      0|    }
 5786|    275|  } else {
 5787|    275|    if (proto.has_extendee()) {
  ------------------
  |  Branch (5787:9): [True: 0, False: 275]
  ------------------
 5788|      0|      AddError(result->full_name(), proto,
 5789|      0|               DescriptorPool::ErrorCollector::EXTENDEE,
 5790|      0|               "FieldDescriptorProto.extendee set for non-extension field.");
 5791|      0|    }
 5792|       |
 5793|    275|    result->containing_type_ = parent;
 5794|       |
 5795|    275|    if (proto.has_oneof_index()) {
  ------------------
  |  Branch (5795:9): [True: 87, False: 188]
  ------------------
 5796|     87|      if (proto.oneof_index() < 0 ||
  ------------------
  |  Branch (5796:11): [True: 0, False: 87]
  ------------------
 5797|     87|          proto.oneof_index() >= parent->oneof_decl_count()) {
  ------------------
  |  Branch (5797:11): [True: 0, False: 87]
  ------------------
 5798|      0|        AddError(result->full_name(), proto,
 5799|      0|                 DescriptorPool::ErrorCollector::TYPE,
 5800|      0|                 strings::Substitute("FieldDescriptorProto.oneof_index $0 is "
 5801|      0|                                  "out of range for type \"$1\".",
 5802|      0|                                  proto.oneof_index(), parent->name()));
 5803|     87|      } else {
 5804|     87|        result->is_oneof_ = true;
 5805|     87|        result->scope_.containing_oneof =
 5806|     87|            parent->oneof_decl(proto.oneof_index());
 5807|     87|      }
 5808|     87|    }
 5809|    275|  }
 5810|       |
 5811|       |  // Copy options.
 5812|    275|  result->options_ = nullptr;  // Set to default_instance later if necessary.
 5813|    275|  if (proto.has_options()) {
  ------------------
  |  Branch (5813:7): [True: 4, False: 271]
  ------------------
 5814|      4|    AllocateOptions(proto.options(), result,
 5815|      4|                    FieldDescriptorProto::kOptionsFieldNumber,
 5816|      4|                    "google.protobuf.FieldOptions", alloc);
 5817|      4|  }
 5818|       |
 5819|    275|  AddSymbol(result->full_name(), parent, result->name(), proto, Symbol(result));
 5820|    275|}
_ZN6google8protobuf17DescriptorBuilder19BuildExtensionRangeERKNS0_30DescriptorProto_ExtensionRangeEPKNS0_10DescriptorEPNS5_14ExtensionRangeERNS0_8internal13FlatAllocatorE:
 5824|      9|    Descriptor::ExtensionRange* result, internal::FlatAllocator& alloc) {
 5825|      9|  result->start = proto.start();
 5826|      9|  result->end = proto.end();
 5827|      9|  if (result->start <= 0) {
  ------------------
  |  Branch (5827:7): [True: 0, False: 9]
  ------------------
 5828|      0|    message_hints_[parent].RequestHintOnFieldNumbers(
 5829|      0|        proto, DescriptorPool::ErrorCollector::NUMBER, result->start,
 5830|      0|        result->end);
 5831|      0|    AddError(parent->full_name(), proto, DescriptorPool::ErrorCollector::NUMBER,
 5832|      0|             "Extension numbers must be positive integers.");
 5833|      0|  }
 5834|       |
 5835|       |  // Checking of the upper bound of the extension range is deferred until after
 5836|       |  // options interpreting. This allows messages with message_set_wire_format to
 5837|       |  // have extensions beyond FieldDescriptor::kMaxNumber, since the extension
 5838|       |  // numbers are actually used as int32s in the message_set_wire_format.
 5839|       |
 5840|      9|  if (result->start >= result->end) {
  ------------------
  |  Branch (5840:7): [True: 0, False: 9]
  ------------------
 5841|      0|    AddError(parent->full_name(), proto, DescriptorPool::ErrorCollector::NUMBER,
 5842|      0|             "Extension range end number must be greater than start number.");
 5843|      0|  }
 5844|       |
 5845|      9|  result->options_ = nullptr;  // Set to default_instance later if necessary.
 5846|      9|  if (proto.has_options()) {
  ------------------
  |  Branch (5846:7): [True: 0, False: 9]
  ------------------
 5847|      0|    std::vector<int> options_path;
 5848|      0|    parent->GetLocationPath(&options_path);
 5849|      0|    options_path.push_back(DescriptorProto::kExtensionRangeFieldNumber);
 5850|       |    // find index of this extension range in order to compute path
 5851|      0|    int index;
 5852|      0|    for (index = 0; parent->extension_ranges_ + index != result; index++) {
  ------------------
  |  Branch (5852:21): [True: 0, False: 0]
  ------------------
 5853|      0|    }
 5854|      0|    options_path.push_back(index);
 5855|      0|    options_path.push_back(DescriptorProto_ExtensionRange::kOptionsFieldNumber);
 5856|      0|    AllocateOptionsImpl(parent->full_name(), parent->full_name(),
 5857|      0|                        proto.options(), result, options_path,
 5858|      0|                        "google.protobuf.ExtensionRangeOptions", alloc);
 5859|      0|  }
 5860|      9|}
_ZN6google8protobuf17DescriptorBuilder18BuildReservedRangeERKNS0_29DescriptorProto_ReservedRangeEPKNS0_10DescriptorEPNS5_13ReservedRangeERNS0_8internal13FlatAllocatorE:
 5864|      8|    Descriptor::ReservedRange* result, internal::FlatAllocator&) {
 5865|      8|  result->start = proto.start();
 5866|      8|  result->end = proto.end();
 5867|      8|  if (result->start <= 0) {
  ------------------
  |  Branch (5867:7): [True: 0, False: 8]
  ------------------
 5868|      0|    message_hints_[parent].RequestHintOnFieldNumbers(
 5869|      0|        proto, DescriptorPool::ErrorCollector::NUMBER, result->start,
 5870|      0|        result->end);
 5871|      0|    AddError(parent->full_name(), proto, DescriptorPool::ErrorCollector::NUMBER,
 5872|      0|             "Reserved numbers must be positive integers.");
 5873|      0|  }
 5874|      8|}
_ZN6google8protobuf17DescriptorBuilder10BuildOneofERKNS0_20OneofDescriptorProtoEPNS0_10DescriptorEPNS0_15OneofDescriptorERNS0_8internal13FlatAllocatorE:
 5891|     11|                                   internal::FlatAllocator& alloc) {
 5892|     11|  result->all_names_ =
 5893|     11|      AllocateNameStrings(parent->full_name(), proto.name(), alloc);
 5894|     11|  ValidateSymbolName(proto.name(), result->full_name(), proto);
 5895|       |
 5896|     11|  result->containing_type_ = parent;
 5897|       |
 5898|       |  // We need to fill these in later.
 5899|     11|  result->field_count_ = 0;
 5900|     11|  result->fields_ = nullptr;
 5901|     11|  result->options_ = nullptr;
 5902|       |
 5903|       |  // Copy options.
 5904|     11|  if (proto.has_options()) {
  ------------------
  |  Branch (5904:7): [True: 0, False: 11]
  ------------------
 5905|      0|    AllocateOptions(proto.options(), result,
 5906|      0|                    OneofDescriptorProto::kOptionsFieldNumber,
 5907|      0|                    "google.protobuf.OneofOptions", alloc);
 5908|      0|  }
 5909|       |
 5910|     11|  AddSymbol(result->full_name(), parent, result->name(), proto, Symbol(result));
 5911|     11|}
_ZN6google8protobuf17DescriptorBuilder24CheckEnumValueUniquenessERKNS0_19EnumDescriptorProtoEPKNS0_14EnumDescriptorE:
 5914|      6|    const EnumDescriptorProto& proto, const EnumDescriptor* result) {
 5915|       |
 5916|       |  // Check that enum labels are still unique when we remove the enum prefix from
 5917|       |  // values that have it.
 5918|       |  //
 5919|       |  // This will fail for something like:
 5920|       |  //
 5921|       |  //   enum MyEnum {
 5922|       |  //     MY_ENUM_FOO = 0;
 5923|       |  //     FOO = 1;
 5924|       |  //   }
 5925|       |  //
 5926|       |  // By enforcing this reasonable constraint, we allow code generators to strip
 5927|       |  // the prefix and/or PascalCase it without creating conflicts.  This can lead
 5928|       |  // to much nicer language-specific enums like:
 5929|       |  //
 5930|       |  //   enum NameType {
 5931|       |  //     FirstName = 1,
 5932|       |  //     LastName = 2,
 5933|       |  //   }
 5934|       |  //
 5935|       |  // Instead of:
 5936|       |  //
 5937|       |  //   enum NameType {
 5938|       |  //     NAME_TYPE_FIRST_NAME = 1,
 5939|       |  //     NAME_TYPE_LAST_NAME = 2,
 5940|       |  //   }
 5941|      6|  PrefixRemover remover(result->name());
 5942|      6|  std::map<std::string, const EnumValueDescriptor*> values;
 5943|     39|  for (int i = 0; i < result->value_count(); i++) {
  ------------------
  |  Branch (5943:19): [True: 33, False: 6]
  ------------------
 5944|     33|    const EnumValueDescriptor* value = result->value(i);
 5945|     33|    std::string stripped =
 5946|     33|        EnumValueToPascalCase(remover.MaybeRemove(value->name()));
 5947|     33|    std::pair<std::map<std::string, const EnumValueDescriptor*>::iterator, bool>
 5948|     33|        insert_result = values.insert(std::make_pair(stripped, value));
 5949|     33|    bool inserted = insert_result.second;
 5950|       |
 5951|       |    // We don't throw the error if the two conflicting symbols are identical, or
 5952|       |    // if they map to the same number.  In the former case, the normal symbol
 5953|       |    // duplication error will fire so we don't need to (and its error message
 5954|       |    // will make more sense). We allow the latter case so users can create
 5955|       |    // aliases which add or remove the prefix (code generators that do prefix
 5956|       |    // stripping should de-dup the labels in this case).
 5957|     33|    if (!inserted && insert_result.first->second->name() != value->name() &&
  ------------------
  |  Branch (5957:9): [True: 0, False: 33]
  |  Branch (5957:22): [True: 0, False: 0]
  ------------------
 5958|     33|        insert_result.first->second->number() != value->number()) {
  ------------------
  |  Branch (5958:9): [True: 0, False: 0]
  ------------------
 5959|      0|      std::string error_message =
 5960|      0|          "Enum name " + value->name() + " has the same name as " +
 5961|      0|          values[stripped]->name() +
 5962|      0|          " if you ignore case and strip out the enum name prefix (if any). "
 5963|      0|          "This is error-prone and can lead to undefined behavior. "
 5964|      0|          "Please avoid doing this. If you are using allow_alias, please "
 5965|      0|          "assign the same numeric value to both enums.";
 5966|       |      // There are proto2 enums out there with conflicting names, so to preserve
 5967|       |      // compatibility we issue only a warning for proto2.
 5968|      0|      if (result->file()->syntax() == FileDescriptor::SYNTAX_PROTO2) {
  ------------------
  |  Branch (5968:11): [True: 0, False: 0]
  ------------------
 5969|      0|        AddWarning(value->full_name(), proto.value(i),
 5970|      0|                   DescriptorPool::ErrorCollector::NAME, error_message);
 5971|      0|      } else {
 5972|      0|        AddError(value->full_name(), proto.value(i),
 5973|      0|                 DescriptorPool::ErrorCollector::NAME, error_message);
 5974|      0|      }
 5975|      0|    }
 5976|     33|  }
 5977|      6|}
_ZN6google8protobuf17DescriptorBuilder9BuildEnumERKNS0_19EnumDescriptorProtoEPKNS0_10DescriptorEPNS0_14EnumDescriptorERNS0_8internal13FlatAllocatorE:
 5982|      6|                                  internal::FlatAllocator& alloc) {
 5983|      6|  const std::string& scope =
 5984|      6|      (parent == nullptr) ? file_->package() : parent->full_name();
  ------------------
  |  Branch (5984:7): [True: 0, False: 6]
  ------------------
 5985|       |
 5986|      6|  result->all_names_ = AllocateNameStrings(scope, proto.name(), alloc);
 5987|      6|  ValidateSymbolName(proto.name(), result->full_name(), proto);
 5988|      6|  result->file_ = file_;
 5989|      6|  result->containing_type_ = parent;
 5990|      6|  result->is_placeholder_ = false;
 5991|      6|  result->is_unqualified_placeholder_ = false;
 5992|       |
 5993|      6|  if (proto.value_size() == 0) {
  ------------------
  |  Branch (5993:7): [True: 0, False: 6]
  ------------------
 5994|       |    // We cannot allow enums with no values because this would mean there
 5995|       |    // would be no valid default value for fields of this type.
 5996|      0|    AddError(result->full_name(), proto, DescriptorPool::ErrorCollector::NAME,
 5997|      0|             "Enums must contain at least one value.");
 5998|      0|  }
 5999|       |
 6000|       |  // Calculate the continuous sequence of the labels.
 6001|       |  // These can be fast-path'd during lookup and don't need to be added to the
 6002|       |  // tables.
 6003|       |  // We use uint16_t to save space for sequential_value_limit_, so stop before
 6004|       |  // overflowing it. Worst case, we are not taking full advantage on huge
 6005|       |  // enums, but it is unlikely.
 6006|      6|  for (int i = 0;
 6007|     39|       i < std::numeric_limits<uint16_t>::max() && i < proto.value_size() &&
  ------------------
  |  Branch (6007:8): [True: 39, False: 0]
  |  Branch (6007:52): [True: 33, False: 6]
  ------------------
 6008|       |       // We do the math in int64_t to avoid overflows.
 6009|     39|       proto.value(i).number() ==
  ------------------
  |  Branch (6009:8): [True: 33, False: 0]
  ------------------
 6010|     33|           static_cast<int64_t>(i) + proto.value(0).number();
 6011|     33|       ++i) {
 6012|     33|    result->sequential_value_limit_ = i;
 6013|     33|  }
 6014|       |
 6015|      6|  BUILD_ARRAY(proto, result, value, BuildEnumValue, result);
  ------------------
  |  | 4814|      6|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|      6|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|      6|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|      6|      INPUT.NAME##_size());                                            \
  |  | 4818|     39|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 33, False: 6]
  |  |  ------------------
  |  | 4819|     33|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|     33|  }
  ------------------
 6016|      6|  BUILD_ARRAY(proto, result, reserved_range, BuildReservedRange, result);
  ------------------
  |  | 4814|      6|  OUTPUT->NAME##_count_ = INPUT.NAME##_size();                         \
  |  | 4815|      6|  OUTPUT->NAME##s_ = alloc.AllocateArray<                              \
  |  | 4816|      6|      typename std::remove_pointer<decltype(OUTPUT->NAME##s_)>::type>( \
  |  | 4817|      6|      INPUT.NAME##_size());                                            \
  |  | 4818|      6|  for (int i = 0; i < INPUT.NAME##_size(); i++) {                      \
  |  |  ------------------
  |  |  |  Branch (4818:19): [True: 0, False: 6]
  |  |  ------------------
  |  | 4819|      0|    METHOD(INPUT.NAME(i), PARENT, OUTPUT->NAME##s_ + i, alloc);        \
  |  | 4820|      0|  }
  ------------------
 6017|       |
 6018|       |  // Copy reserved names.
 6019|      6|  int reserved_name_count = proto.reserved_name_size();
 6020|      6|  result->reserved_name_count_ = reserved_name_count;
 6021|      6|  result->reserved_names_ =
 6022|      6|      alloc.AllocateArray<const std::string*>(reserved_name_count);
 6023|      6|  for (int i = 0; i < reserved_name_count; ++i) {
  ------------------
  |  Branch (6023:19): [True: 0, False: 6]
  ------------------
 6024|      0|    result->reserved_names_[i] =
 6025|      0|        alloc.AllocateStrings(proto.reserved_name(i));
 6026|      0|  }
 6027|       |
 6028|      6|  CheckEnumValueUniqueness(proto, result);
 6029|       |
 6030|       |  // Copy options.
 6031|      6|  result->options_ = nullptr;  // Set to default_instance later if necessary.
 6032|      6|  if (proto.has_options()) {
  ------------------
  |  Branch (6032:7): [True: 0, False: 6]
  ------------------
 6033|      0|    AllocateOptions(proto.options(), result,
 6034|      0|                    EnumDescriptorProto::kOptionsFieldNumber,
 6035|      0|                    "google.protobuf.EnumOptions", alloc);
 6036|      0|  }
 6037|       |
 6038|      6|  AddSymbol(result->full_name(), parent, result->name(), proto, Symbol(result));
 6039|       |
 6040|      6|  for (int i = 0; i < proto.reserved_range_size(); i++) {
  ------------------
  |  Branch (6040:19): [True: 0, False: 6]
  ------------------
 6041|      0|    const EnumDescriptorProto_EnumReservedRange& range1 =
 6042|      0|        proto.reserved_range(i);
 6043|      0|    for (int j = i + 1; j < proto.reserved_range_size(); j++) {
  ------------------
  |  Branch (6043:25): [True: 0, False: 0]
  ------------------
 6044|      0|      const EnumDescriptorProto_EnumReservedRange& range2 =
 6045|      0|          proto.reserved_range(j);
 6046|      0|      if (range1.end() >= range2.start() && range2.end() >= range1.start()) {
  ------------------
  |  Branch (6046:11): [True: 0, False: 0]
  |  Branch (6046:45): [True: 0, False: 0]
  ------------------
 6047|      0|        AddError(result->full_name(), proto.reserved_range(i),
 6048|      0|                 DescriptorPool::ErrorCollector::NUMBER,
 6049|      0|                 strings::Substitute("Reserved range $0 to $1 overlaps with "
 6050|      0|                                  "already-defined range $2 to $3.",
 6051|      0|                                  range2.start(), range2.end(), range1.start(),
 6052|      0|                                  range1.end()));
 6053|      0|      }
 6054|      0|    }
 6055|      0|  }
 6056|       |
 6057|      6|  HASH_SET<std::string> reserved_name_set;
  ------------------
  |  |  984|      6|#define HASH_SET std::unordered_set
  ------------------
 6058|      6|  for (int i = 0; i < proto.reserved_name_size(); i++) {
  ------------------
  |  Branch (6058:19): [True: 0, False: 6]
  ------------------
 6059|      0|    const std::string& name = proto.reserved_name(i);
 6060|      0|    if (reserved_name_set.find(name) == reserved_name_set.end()) {
  ------------------
  |  Branch (6060:9): [True: 0, False: 0]
  ------------------
 6061|      0|      reserved_name_set.insert(name);
 6062|      0|    } else {
 6063|      0|      AddError(name, proto, DescriptorPool::ErrorCollector::NAME,
 6064|      0|               strings::Substitute("Enum value \"$0\" is reserved multiple times.",
 6065|      0|                                name));
 6066|      0|    }
 6067|      0|  }
 6068|       |
 6069|     39|  for (int i = 0; i < result->value_count(); i++) {
  ------------------
  |  Branch (6069:19): [True: 33, False: 6]
  ------------------
 6070|     33|    const EnumValueDescriptor* value = result->value(i);
 6071|     33|    for (int j = 0; j < result->reserved_range_count(); j++) {
  ------------------
  |  Branch (6071:21): [True: 0, False: 33]
  ------------------
 6072|      0|      const EnumDescriptor::ReservedRange* range = result->reserved_range(j);
 6073|      0|      if (range->start <= value->number() && value->number() <= range->end) {
  ------------------
  |  Branch (6073:11): [True: 0, False: 0]
  |  Branch (6073:46): [True: 0, False: 0]
  ------------------
 6074|      0|        AddError(value->full_name(), proto.reserved_range(j),
 6075|      0|                 DescriptorPool::ErrorCollector::NUMBER,
 6076|      0|                 strings::Substitute("Enum value \"$0\" uses reserved number $1.",
 6077|      0|                                  value->name(), value->number()));
 6078|      0|      }
 6079|      0|    }
 6080|     33|    if (reserved_name_set.find(value->name()) != reserved_name_set.end()) {
  ------------------
  |  Branch (6080:9): [True: 0, False: 33]
  ------------------
 6081|      0|      AddError(
 6082|      0|          value->full_name(), proto.value(i),
 6083|      0|          DescriptorPool::ErrorCollector::NAME,
 6084|      0|          strings::Substitute("Enum value \"$0\" is reserved.", value->name()));
 6085|      0|    }
 6086|     33|  }
 6087|      6|}
_ZN6google8protobuf17DescriptorBuilder14BuildEnumValueERKNS0_24EnumValueDescriptorProtoEPKNS0_14EnumDescriptorEPNS0_19EnumValueDescriptorERNS0_8internal13FlatAllocatorE:
 6092|     33|                                       internal::FlatAllocator& alloc) {
 6093|       |  // Note:  full_name for enum values is a sibling to the parent's name, not a
 6094|       |  //   child of it.
 6095|     33|  std::string full_name;
 6096|     33|  size_t scope_len = parent->full_name().size() - parent->name().size();
 6097|     33|  full_name.reserve(scope_len + proto.name().size());
 6098|     33|  full_name.append(parent->full_name().data(), scope_len);
 6099|     33|  full_name.append(proto.name());
 6100|       |
 6101|     33|  result->all_names_ =
 6102|     33|      alloc.AllocateStrings(proto.name(), std::move(full_name));
 6103|     33|  result->number_ = proto.number();
 6104|     33|  result->type_ = parent;
 6105|       |
 6106|     33|  ValidateSymbolName(proto.name(), result->full_name(), proto);
 6107|       |
 6108|       |  // Copy options.
 6109|     33|  result->options_ = nullptr;  // Set to default_instance later if necessary.
 6110|     33|  if (proto.has_options()) {
  ------------------
  |  Branch (6110:7): [True: 0, False: 33]
  ------------------
 6111|      0|    AllocateOptions(proto.options(), result,
 6112|      0|                    EnumValueDescriptorProto::kOptionsFieldNumber,
 6113|      0|                    "google.protobuf.EnumValueOptions", alloc);
 6114|      0|  }
 6115|       |
 6116|       |  // Again, enum values are weird because we makes them appear as siblings
 6117|       |  // of the enum type instead of children of it.  So, we use
 6118|       |  // parent->containing_type() as the value's parent.
 6119|     33|  bool added_to_outer_scope =
 6120|     33|      AddSymbol(result->full_name(), parent->containing_type(), result->name(),
 6121|     33|                proto, Symbol::EnumValue(result, 0));
 6122|       |
 6123|       |  // However, we also want to be able to search for values within a single
 6124|       |  // enum type, so we add it as a child of the enum type itself, too.
 6125|       |  // Note:  This could fail, but if it does, the error has already been
 6126|       |  //   reported by the above AddSymbol() call, so we ignore the return code.
 6127|     33|  bool added_to_inner_scope = file_tables_->AddAliasUnderParent(
 6128|     33|      parent, result->name(), Symbol::EnumValue(result, 1));
 6129|       |
 6130|     33|  if (added_to_inner_scope && !added_to_outer_scope) {
  ------------------
  |  Branch (6130:7): [True: 33, False: 0]
  |  Branch (6130:31): [True: 0, False: 33]
  ------------------
 6131|       |    // This value did not conflict with any values defined in the same enum,
 6132|       |    // but it did conflict with some other symbol defined in the enum type's
 6133|       |    // scope.  Let's print an additional error to explain this.
 6134|      0|    std::string outer_scope;
 6135|      0|    if (parent->containing_type() == nullptr) {
  ------------------
  |  Branch (6135:9): [True: 0, False: 0]
  ------------------
 6136|      0|      outer_scope = file_->package();
 6137|      0|    } else {
 6138|      0|      outer_scope = parent->containing_type()->full_name();
 6139|      0|    }
 6140|       |
 6141|      0|    if (outer_scope.empty()) {
  ------------------
  |  Branch (6141:9): [True: 0, False: 0]
  ------------------
 6142|      0|      outer_scope = "the global scope";
 6143|      0|    } else {
 6144|      0|      outer_scope = "\"" + outer_scope + "\"";
 6145|      0|    }
 6146|       |
 6147|      0|    AddError(result->full_name(), proto, DescriptorPool::ErrorCollector::NAME,
 6148|      0|             "Note that enum values use C++ scoping rules, meaning that "
 6149|      0|             "enum values are siblings of their type, not children of it.  "
 6150|      0|             "Therefore, \"" +
 6151|      0|                 result->name() + "\" must be unique within " + outer_scope +
 6152|      0|                 ", not just within \"" + parent->name() + "\".");
 6153|      0|  }
 6154|       |
 6155|       |  // An enum is allowed to define two numbers that refer to the same value.
 6156|       |  // FindValueByNumber() should return the first such value, so we simply
 6157|       |  // ignore AddEnumValueByNumber()'s return code.
 6158|     33|  file_tables_->AddEnumValueByNumber(result);
 6159|     33|}
_ZN6google8protobuf17DescriptorBuilder13CrossLinkFileEPNS0_14FileDescriptorERKNS0_19FileDescriptorProtoE:
 6217|      3|                                      const FileDescriptorProto& proto) {
 6218|      3|  if (file->options_ == nullptr) {
  ------------------
  |  Branch (6218:7): [True: 1, False: 2]
  ------------------
 6219|      1|    file->options_ = &FileOptions::default_instance();
 6220|      1|  }
 6221|       |
 6222|     64|  for (int i = 0; i < file->message_type_count(); i++) {
  ------------------
  |  Branch (6222:19): [True: 61, False: 3]
  ------------------
 6223|     61|    CrossLinkMessage(&file->message_types_[i], proto.message_type(i));
 6224|     61|  }
 6225|       |
 6226|      3|  for (int i = 0; i < file->extension_count(); i++) {
  ------------------
  |  Branch (6226:19): [True: 0, False: 3]
  ------------------
 6227|      0|    CrossLinkField(&file->extensions_[i], proto.extension(i));
 6228|      0|  }
 6229|       |
 6230|      3|  for (int i = 0; i < file->enum_type_count(); i++) {
  ------------------
  |  Branch (6230:19): [True: 0, False: 3]
  ------------------
 6231|      0|    CrossLinkEnum(&file->enum_types_[i], proto.enum_type(i));
 6232|      0|  }
 6233|       |
 6234|      3|  for (int i = 0; i < file->service_count(); i++) {
  ------------------
  |  Branch (6234:19): [True: 0, False: 3]
  ------------------
 6235|      0|    CrossLinkService(&file->services_[i], proto.service(i));
 6236|      0|  }
 6237|      3|}
_ZN6google8protobuf17DescriptorBuilder16CrossLinkMessageEPNS0_10DescriptorERKNS0_15DescriptorProtoE:
 6240|     67|                                         const DescriptorProto& proto) {
 6241|     67|  if (message->options_ == nullptr) {
  ------------------
  |  Branch (6241:7): [True: 67, False: 0]
  ------------------
 6242|     67|    message->options_ = &MessageOptions::default_instance();
 6243|     67|  }
 6244|       |
 6245|     73|  for (int i = 0; i < message->nested_type_count(); i++) {
  ------------------
  |  Branch (6245:19): [True: 6, False: 67]
  ------------------
 6246|      6|    CrossLinkMessage(&message->nested_types_[i], proto.nested_type(i));
 6247|      6|  }
 6248|       |
 6249|     73|  for (int i = 0; i < message->enum_type_count(); i++) {
  ------------------
  |  Branch (6249:19): [True: 6, False: 67]
  ------------------
 6250|      6|    CrossLinkEnum(&message->enum_types_[i], proto.enum_type(i));
 6251|      6|  }
 6252|       |
 6253|    342|  for (int i = 0; i < message->field_count(); i++) {
  ------------------
  |  Branch (6253:19): [True: 275, False: 67]
  ------------------
 6254|    275|    CrossLinkField(&message->fields_[i], proto.field(i));
 6255|    275|  }
 6256|       |
 6257|     67|  for (int i = 0; i < message->extension_count(); i++) {
  ------------------
  |  Branch (6257:19): [True: 0, False: 67]
  ------------------
 6258|      0|    CrossLinkField(&message->extensions_[i], proto.extension(i));
 6259|      0|  }
 6260|       |
 6261|     76|  for (int i = 0; i < message->extension_range_count(); i++) {
  ------------------
  |  Branch (6261:19): [True: 9, False: 67]
  ------------------
 6262|      9|    CrossLinkExtensionRange(&message->extension_ranges_[i],
 6263|      9|                            proto.extension_range(i));
 6264|      9|  }
 6265|       |
 6266|       |  // Set up field array for each oneof.
 6267|       |
 6268|       |  // First count the number of fields per oneof.
 6269|    342|  for (int i = 0; i < message->field_count(); i++) {
  ------------------
  |  Branch (6269:19): [True: 275, False: 67]
  ------------------
 6270|    275|    const OneofDescriptor* oneof_decl = message->field(i)->containing_oneof();
 6271|    275|    if (oneof_decl != nullptr) {
  ------------------
  |  Branch (6271:9): [True: 87, False: 188]
  ------------------
 6272|       |      // Make sure fields belonging to the same oneof are defined consecutively.
 6273|       |      // This enables optimizations in codegens and reflection libraries to
 6274|       |      // skip fields in the oneof group, as only one of the field can be set.
 6275|       |      // Note that field_count() returns how many fields in this oneof we have
 6276|       |      // seen so far. field_count() > 0 guarantees that i > 0, so field(i-1) is
 6277|       |      // safe.
 6278|     87|      if (oneof_decl->field_count() > 0 &&
  ------------------
  |  Branch (6278:11): [True: 76, False: 11]
  ------------------
 6279|     87|          message->field(i - 1)->containing_oneof() != oneof_decl) {
  ------------------
  |  Branch (6279:11): [True: 0, False: 76]
  ------------------
 6280|      0|        AddError(message->full_name() + "." + message->field(i - 1)->name(),
 6281|      0|                 proto.field(i - 1), DescriptorPool::ErrorCollector::TYPE,
 6282|      0|                 strings::Substitute(
 6283|      0|                     "Fields in the same oneof must be defined consecutively. "
 6284|      0|                     "\"$0\" cannot be defined before the completion of the "
 6285|      0|                     "\"$1\" oneof definition.",
 6286|      0|                     message->field(i - 1)->name(), oneof_decl->name()));
 6287|      0|      }
 6288|       |      // Must go through oneof_decls_ array to get a non-const version of the
 6289|       |      // OneofDescriptor.
 6290|     87|      auto& out_oneof_decl = message->oneof_decls_[oneof_decl->index()];
 6291|     87|      if (out_oneof_decl.field_count_ == 0) {
  ------------------
  |  Branch (6291:11): [True: 11, False: 76]
  ------------------
 6292|     11|        out_oneof_decl.fields_ = message->field(i);
 6293|     11|      }
 6294|       |
 6295|     87|      if (!had_errors_) {
  ------------------
  |  Branch (6295:11): [True: 87, False: 0]
  ------------------
 6296|       |        // Verify that they are contiguous.
 6297|       |        // This is assumed by OneofDescriptor::field(i).
 6298|       |        // But only if there are no errors.
 6299|     87|        GOOGLE_CHECK_EQ(out_oneof_decl.fields_ + out_oneof_decl.field_count_,
  ------------------
  |  |  154|     87|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|     87|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     87|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 87, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6300|     87|                 message->field(i));
 6301|     87|      }
 6302|     87|      ++out_oneof_decl.field_count_;
 6303|     87|    }
 6304|    275|  }
 6305|       |
 6306|       |  // Then verify the sizes.
 6307|     78|  for (int i = 0; i < message->oneof_decl_count(); i++) {
  ------------------
  |  Branch (6307:19): [True: 11, False: 67]
  ------------------
 6308|     11|    OneofDescriptor* oneof_decl = &message->oneof_decls_[i];
 6309|       |
 6310|     11|    if (oneof_decl->field_count() == 0) {
  ------------------
  |  Branch (6310:9): [True: 0, False: 11]
  ------------------
 6311|      0|      AddError(message->full_name() + "." + oneof_decl->name(),
 6312|      0|               proto.oneof_decl(i), DescriptorPool::ErrorCollector::NAME,
 6313|      0|               "Oneof must have at least one field.");
 6314|      0|    }
 6315|       |
 6316|     11|    if (oneof_decl->options_ == nullptr) {
  ------------------
  |  Branch (6316:9): [True: 11, False: 0]
  ------------------
 6317|     11|      oneof_decl->options_ = &OneofOptions::default_instance();
 6318|     11|    }
 6319|     11|  }
 6320|       |
 6321|    342|  for (int i = 0; i < message->field_count(); i++) {
  ------------------
  |  Branch (6321:19): [True: 275, False: 67]
  ------------------
 6322|    275|    const FieldDescriptor* field = message->field(i);
 6323|    275|    if (field->proto3_optional_) {
  ------------------
  |  Branch (6323:9): [True: 0, False: 275]
  ------------------
 6324|      0|      if (!field->containing_oneof() ||
  ------------------
  |  Branch (6324:11): [True: 0, False: 0]
  ------------------
 6325|      0|          !field->containing_oneof()->is_synthetic()) {
  ------------------
  |  Branch (6325:11): [True: 0, False: 0]
  ------------------
 6326|      0|        AddError(message->full_name(), proto.field(i),
 6327|      0|                 DescriptorPool::ErrorCollector::OTHER,
 6328|      0|                 "Fields with proto3_optional set must be "
 6329|      0|                 "a member of a one-field oneof");
 6330|      0|      }
 6331|      0|    }
 6332|    275|  }
 6333|       |
 6334|       |  // Synthetic oneofs must be last.
 6335|     67|  int first_synthetic = -1;
 6336|     78|  for (int i = 0; i < message->oneof_decl_count(); i++) {
  ------------------
  |  Branch (6336:19): [True: 11, False: 67]
  ------------------
 6337|     11|    const OneofDescriptor* oneof = message->oneof_decl(i);
 6338|     11|    if (oneof->is_synthetic()) {
  ------------------
  |  Branch (6338:9): [True: 0, False: 11]
  ------------------
 6339|      0|      if (first_synthetic == -1) {
  ------------------
  |  Branch (6339:11): [True: 0, False: 0]
  ------------------
 6340|      0|        first_synthetic = i;
 6341|      0|      }
 6342|     11|    } else {
 6343|     11|      if (first_synthetic != -1) {
  ------------------
  |  Branch (6343:11): [True: 0, False: 11]
  ------------------
 6344|      0|        AddError(message->full_name(), proto.oneof_decl(i),
 6345|      0|                 DescriptorPool::ErrorCollector::OTHER,
 6346|      0|                 "Synthetic oneofs must be after all other oneofs");
 6347|      0|      }
 6348|     11|    }
 6349|     11|  }
 6350|       |
 6351|     67|  if (first_synthetic == -1) {
  ------------------
  |  Branch (6351:7): [True: 67, False: 0]
  ------------------
 6352|     67|    message->real_oneof_decl_count_ = message->oneof_decl_count_;
 6353|     67|  } else {
 6354|      0|    message->real_oneof_decl_count_ = first_synthetic;
 6355|      0|  }
 6356|     67|}
_ZN6google8protobuf17DescriptorBuilder23CrossLinkExtensionRangeEPNS0_10Descriptor14ExtensionRangeERKNS0_30DescriptorProto_ExtensionRangeE:
 6360|      9|    const DescriptorProto::ExtensionRange& /*proto*/) {
 6361|      9|  if (range->options_ == nullptr) {
  ------------------
  |  Branch (6361:7): [True: 9, False: 0]
  ------------------
 6362|      9|    range->options_ = &ExtensionRangeOptions::default_instance();
 6363|      9|  }
 6364|      9|}
_ZN6google8protobuf17DescriptorBuilder14CrossLinkFieldEPNS0_15FieldDescriptorERKNS0_20FieldDescriptorProtoE:
 6367|    275|                                       const FieldDescriptorProto& proto) {
 6368|    275|  if (field->options_ == nullptr) {
  ------------------
  |  Branch (6368:7): [True: 271, False: 4]
  ------------------
 6369|    271|    field->options_ = &FieldOptions::default_instance();
 6370|    271|  }
 6371|       |
 6372|    275|  if (proto.has_extendee()) {
  ------------------
  |  Branch (6372:7): [True: 0, False: 275]
  ------------------
 6373|      0|    Symbol extendee =
 6374|      0|        LookupSymbol(proto.extendee(), field->full_name(),
 6375|      0|                     DescriptorPool::PLACEHOLDER_EXTENDABLE_MESSAGE);
 6376|      0|    if (extendee.IsNull()) {
  ------------------
  |  Branch (6376:9): [True: 0, False: 0]
  ------------------
 6377|      0|      AddNotDefinedError(field->full_name(), proto,
 6378|      0|                         DescriptorPool::ErrorCollector::EXTENDEE,
 6379|      0|                         proto.extendee());
 6380|      0|      return;
 6381|      0|    } else if (extendee.type() != Symbol::MESSAGE) {
  ------------------
  |  Branch (6381:16): [True: 0, False: 0]
  ------------------
 6382|      0|      AddError(field->full_name(), proto,
 6383|      0|               DescriptorPool::ErrorCollector::EXTENDEE,
 6384|      0|               "\"" + proto.extendee() + "\" is not a message type.");
 6385|      0|      return;
 6386|      0|    }
 6387|      0|    field->containing_type_ = extendee.descriptor();
 6388|       |
 6389|      0|    const Descriptor::ExtensionRange* extension_range =
 6390|      0|        field->containing_type()->FindExtensionRangeContainingNumber(
 6391|      0|            field->number());
 6392|       |
 6393|      0|    if (extension_range == nullptr) {
  ------------------
  |  Branch (6393:9): [True: 0, False: 0]
  ------------------
 6394|       |      // Set of valid extension numbers for MessageSet is different (< 2^32)
 6395|       |      // from other extendees (< 2^29). If unknown deps are allowed, we may not
 6396|       |      // have that information, and wrongly deem the extension as invalid.
 6397|      0|      auto skip_check = get_allow_unknown(pool_) &&
  ------------------
  |  Branch (6397:25): [True: 0, False: 0]
  ------------------
 6398|      0|                        proto.extendee() == "google.protobuf.bridge.MessageSet";
  ------------------
  |  Branch (6398:25): [True: 0, False: 0]
  ------------------
 6399|      0|      if (!skip_check) {
  ------------------
  |  Branch (6399:11): [True: 0, False: 0]
  ------------------
 6400|      0|        AddError(field->full_name(), proto,
 6401|      0|                 DescriptorPool::ErrorCollector::NUMBER,
 6402|      0|                 strings::Substitute("\"$0\" does not declare $1 as an "
 6403|      0|                                  "extension number.",
 6404|      0|                                  field->containing_type()->full_name(),
 6405|      0|                                  field->number()));
 6406|      0|      }
 6407|      0|    }
 6408|      0|  }
 6409|       |
 6410|    275|  if (field->containing_oneof() != nullptr) {
  ------------------
  |  Branch (6410:7): [True: 87, False: 188]
  ------------------
 6411|     87|    if (field->label() != FieldDescriptor::LABEL_OPTIONAL) {
  ------------------
  |  Branch (6411:9): [True: 0, False: 87]
  ------------------
 6412|       |      // Note that this error will never happen when parsing .proto files.
 6413|       |      // It can only happen if you manually construct a FileDescriptorProto
 6414|       |      // that is incorrect.
 6415|      0|      AddError(field->full_name(), proto, DescriptorPool::ErrorCollector::NAME,
 6416|      0|               "Fields of oneofs must themselves have label LABEL_OPTIONAL.");
 6417|      0|    }
 6418|     87|  }
 6419|       |
 6420|    275|  if (proto.has_type_name()) {
  ------------------
  |  Branch (6420:7): [True: 99, False: 176]
  ------------------
 6421|       |    // Assume we are expecting a message type unless the proto contains some
 6422|       |    // evidence that it expects an enum type.  This only makes a difference if
 6423|       |    // we end up creating a placeholder.
 6424|     99|    bool expecting_enum = (proto.type() == FieldDescriptorProto::TYPE_ENUM) ||
  ------------------
  |  Branch (6424:27): [True: 6, False: 93]
  ------------------
 6425|     99|                          proto.has_default_value();
  ------------------
  |  Branch (6425:27): [True: 0, False: 93]
  ------------------
 6426|       |
 6427|       |    // In case of weak fields we force building the dependency. We need to know
 6428|       |    // if the type exist or not. If it doesn't exist we substitute Empty which
 6429|       |    // should only be done if the type can't be found in the generated pool.
 6430|       |    // TODO(gerbens) Ideally we should query the database directly to check
 6431|       |    // if weak fields exist or not so that we don't need to force building
 6432|       |    // weak dependencies. However the name lookup rules for symbols are
 6433|       |    // somewhat complicated, so I defer it too another CL.
 6434|     99|    bool is_weak = !pool_->enforce_weak_ && proto.options().weak();
  ------------------
  |  Branch (6434:20): [True: 99, False: 0]
  |  Branch (6434:45): [True: 0, False: 99]
  ------------------
 6435|     99|    bool is_lazy = pool_->lazily_build_dependencies_ && !is_weak;
  ------------------
  |  Branch (6435:20): [True: 99, False: 0]
  |  Branch (6435:57): [True: 99, False: 0]
  ------------------
 6436|       |
 6437|     99|    Symbol type =
 6438|     99|        LookupSymbol(proto.type_name(), field->full_name(),
 6439|     99|                     expecting_enum ? DescriptorPool::PLACEHOLDER_ENUM
  ------------------
  |  Branch (6439:22): [True: 6, False: 93]
  ------------------
 6440|     99|                                    : DescriptorPool::PLACEHOLDER_MESSAGE,
 6441|     99|                     LOOKUP_TYPES, !is_lazy);
 6442|       |
 6443|     99|    if (type.IsNull()) {
  ------------------
  |  Branch (6443:9): [True: 0, False: 99]
  ------------------
 6444|      0|      if (is_lazy) {
  ------------------
  |  Branch (6444:11): [True: 0, False: 0]
  ------------------
 6445|       |        // Save the symbol names for later for lookup, and allocate the once
 6446|       |        // object needed for the accessors.
 6447|      0|        const std::string& name = proto.type_name();
 6448|       |
 6449|      0|        int name_sizes = static_cast<int>(name.size() + 1 +
 6450|      0|                                          proto.default_value().size() + 1);
 6451|       |
 6452|      0|        field->type_once_ = ::new (tables_->AllocateBytes(static_cast<int>(
 6453|      0|            sizeof(internal::once_flag) + name_sizes))) internal::once_flag{};
 6454|      0|        char* names = reinterpret_cast<char*>(field->type_once_ + 1);
 6455|       |
 6456|      0|        memcpy(names, name.c_str(), name.size() + 1);
 6457|      0|        memcpy(names + name.size() + 1, proto.default_value().c_str(),
 6458|      0|               proto.default_value().size() + 1);
 6459|       |
 6460|       |        // AddFieldByNumber and AddExtension are done later in this function,
 6461|       |        // and can/must be done if the field type was not found. The related
 6462|       |        // error checking is not necessary when in lazily_build_dependencies_
 6463|       |        // mode, and can't be done without building the type's descriptor,
 6464|       |        // which we don't want to do.
 6465|      0|        file_tables_->AddFieldByNumber(field);
 6466|      0|        if (field->is_extension()) {
  ------------------
  |  Branch (6466:13): [True: 0, False: 0]
  ------------------
 6467|      0|          tables_->AddExtension(field);
 6468|      0|        }
 6469|      0|        return;
 6470|      0|      } else {
 6471|       |        // If the type is a weak type, we change the type to a google.protobuf.Empty
 6472|       |        // field.
 6473|      0|        if (is_weak) {
  ------------------
  |  Branch (6473:13): [True: 0, False: 0]
  ------------------
 6474|      0|          type = FindSymbol(kNonLinkedWeakMessageReplacementName);
 6475|      0|        }
 6476|      0|        if (type.IsNull()) {
  ------------------
  |  Branch (6476:13): [True: 0, False: 0]
  ------------------
 6477|      0|          AddNotDefinedError(field->full_name(), proto,
 6478|      0|                             DescriptorPool::ErrorCollector::TYPE,
 6479|      0|                             proto.type_name());
 6480|      0|          return;
 6481|      0|        }
 6482|      0|      }
 6483|      0|    }
 6484|       |
 6485|     99|    if (!proto.has_type()) {
  ------------------
  |  Branch (6485:9): [True: 0, False: 99]
  ------------------
 6486|       |      // Choose field type based on symbol.
 6487|      0|      if (type.type() == Symbol::MESSAGE) {
  ------------------
  |  Branch (6487:11): [True: 0, False: 0]
  ------------------
 6488|      0|        field->type_ = FieldDescriptor::TYPE_MESSAGE;
 6489|      0|      } else if (type.type() == Symbol::ENUM) {
  ------------------
  |  Branch (6489:18): [True: 0, False: 0]
  ------------------
 6490|      0|        field->type_ = FieldDescriptor::TYPE_ENUM;
 6491|      0|      } else {
 6492|      0|        AddError(field->full_name(), proto,
 6493|      0|                 DescriptorPool::ErrorCollector::TYPE,
 6494|      0|                 "\"" + proto.type_name() + "\" is not a type.");
 6495|      0|        return;
 6496|      0|      }
 6497|      0|    }
 6498|       |
 6499|     99|    if (field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE) {
  ------------------
  |  Branch (6499:9): [True: 93, False: 6]
  ------------------
 6500|     93|      field->type_descriptor_.message_type = type.descriptor();
 6501|     93|      if (field->type_descriptor_.message_type == nullptr) {
  ------------------
  |  Branch (6501:11): [True: 0, False: 93]
  ------------------
 6502|      0|        AddError(field->full_name(), proto,
 6503|      0|                 DescriptorPool::ErrorCollector::TYPE,
 6504|      0|                 "\"" + proto.type_name() + "\" is not a message type.");
 6505|      0|        return;
 6506|      0|      }
 6507|       |
 6508|     93|      if (field->has_default_value()) {
  ------------------
  |  Branch (6508:11): [True: 0, False: 93]
  ------------------
 6509|      0|        AddError(field->full_name(), proto,
 6510|      0|                 DescriptorPool::ErrorCollector::DEFAULT_VALUE,
 6511|      0|                 "Messages can't have default values.");
 6512|      0|      }
 6513|     93|    } else if (field->cpp_type() == FieldDescriptor::CPPTYPE_ENUM) {
  ------------------
  |  Branch (6513:16): [True: 6, False: 0]
  ------------------
 6514|      6|      field->type_descriptor_.enum_type = type.enum_descriptor();
 6515|      6|      if (field->type_descriptor_.enum_type == nullptr) {
  ------------------
  |  Branch (6515:11): [True: 0, False: 6]
  ------------------
 6516|      0|        AddError(field->full_name(), proto,
 6517|      0|                 DescriptorPool::ErrorCollector::TYPE,
 6518|      0|                 "\"" + proto.type_name() + "\" is not an enum type.");
 6519|      0|        return;
 6520|      0|      }
 6521|       |
 6522|      6|      if (field->enum_type()->is_placeholder_) {
  ------------------
  |  Branch (6522:11): [True: 0, False: 6]
  ------------------
 6523|       |        // We can't look up default values for placeholder types.  We'll have
 6524|       |        // to just drop them.
 6525|      0|        field->has_default_value_ = false;
 6526|      0|      }
 6527|       |
 6528|      6|      if (field->has_default_value()) {
  ------------------
  |  Branch (6528:11): [True: 4, False: 2]
  ------------------
 6529|       |        // Ensure that the default value is an identifier. Parser cannot always
 6530|       |        // verify this because it does not have complete type information.
 6531|       |        // N.B. that this check yields better error messages but is not
 6532|       |        // necessary for correctness (an enum symbol must be a valid identifier
 6533|       |        // anyway), only for better errors.
 6534|      4|        if (!io::Tokenizer::IsIdentifier(proto.default_value())) {
  ------------------
  |  Branch (6534:13): [True: 0, False: 4]
  ------------------
 6535|      0|          AddError(field->full_name(), proto,
 6536|      0|                   DescriptorPool::ErrorCollector::DEFAULT_VALUE,
 6537|      0|                   "Default value for an enum field must be an identifier.");
 6538|      4|        } else {
 6539|       |          // We can't just use field->enum_type()->FindValueByName() here
 6540|       |          // because that locks the pool's mutex, which we have already locked
 6541|       |          // at this point.
 6542|      4|          const EnumValueDescriptor* default_value =
 6543|      4|              LookupSymbolNoPlaceholder(proto.default_value(),
 6544|      4|                                        field->enum_type()->full_name())
 6545|      4|                  .enum_value_descriptor();
 6546|       |
 6547|      4|          if (default_value != nullptr &&
  ------------------
  |  Branch (6547:15): [True: 4, False: 0]
  ------------------
 6548|      4|              default_value->type() == field->enum_type()) {
  ------------------
  |  Branch (6548:15): [True: 4, False: 0]
  ------------------
 6549|      4|            field->default_value_enum_ = default_value;
 6550|      4|          } else {
 6551|      0|            AddError(field->full_name(), proto,
 6552|      0|                     DescriptorPool::ErrorCollector::DEFAULT_VALUE,
 6553|      0|                     "Enum type \"" + field->enum_type()->full_name() +
 6554|      0|                         "\" has no value named \"" + proto.default_value() +
 6555|      0|                         "\".");
 6556|      0|          }
 6557|      4|        }
 6558|      4|      } else if (field->enum_type()->value_count() > 0) {
  ------------------
  |  Branch (6558:18): [True: 2, False: 0]
  ------------------
 6559|       |        // All enums must have at least one value, or we would have reported
 6560|       |        // an error elsewhere.  We use the first defined value as the default
 6561|       |        // if a default is not explicitly defined.
 6562|      2|        field->default_value_enum_ = field->enum_type()->value(0);
 6563|      2|      }
 6564|      6|    } else {
 6565|      0|      AddError(field->full_name(), proto, DescriptorPool::ErrorCollector::TYPE,
 6566|      0|               "Field with primitive type has type_name.");
 6567|      0|    }
 6568|    176|  } else {
 6569|    176|    if (field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE ||
  ------------------
  |  Branch (6569:9): [True: 0, False: 176]
  ------------------
 6570|    176|        field->cpp_type() == FieldDescriptor::CPPTYPE_ENUM) {
  ------------------
  |  Branch (6570:9): [True: 0, False: 176]
  ------------------
 6571|      0|      AddError(field->full_name(), proto, DescriptorPool::ErrorCollector::TYPE,
 6572|      0|               "Field with message or enum type missing type_name.");
 6573|      0|    }
 6574|    176|  }
 6575|       |
 6576|       |  // Add the field to the fields-by-number table.
 6577|       |  // Note:  We have to do this *after* cross-linking because extensions do not
 6578|       |  // know their containing type until now. If we're in
 6579|       |  // lazily_build_dependencies_ mode, we're guaranteed there's no errors, so no
 6580|       |  // risk to calling containing_type() or other accessors that will build
 6581|       |  // dependencies.
 6582|    275|  if (!file_tables_->AddFieldByNumber(field)) {
  ------------------
  |  Branch (6582:7): [True: 0, False: 275]
  ------------------
 6583|      0|    const FieldDescriptor* conflicting_field = file_tables_->FindFieldByNumber(
 6584|      0|        field->containing_type(), field->number());
 6585|      0|    std::string containing_type_name =
 6586|      0|        field->containing_type() == nullptr
  ------------------
  |  Branch (6586:9): [True: 0, False: 0]
  ------------------
 6587|      0|            ? "unknown"
 6588|      0|            : field->containing_type()->full_name();
 6589|      0|    if (field->is_extension()) {
  ------------------
  |  Branch (6589:9): [True: 0, False: 0]
  ------------------
 6590|      0|      AddError(field->full_name(), proto,
 6591|      0|               DescriptorPool::ErrorCollector::NUMBER,
 6592|      0|               strings::Substitute("Extension number $0 has already been used "
 6593|      0|                                "in \"$1\" by extension \"$2\".",
 6594|      0|                                field->number(), containing_type_name,
 6595|      0|                                conflicting_field->full_name()));
 6596|      0|    } else {
 6597|      0|      AddError(field->full_name(), proto,
 6598|      0|               DescriptorPool::ErrorCollector::NUMBER,
 6599|      0|               strings::Substitute("Field number $0 has already been used in "
 6600|      0|                                "\"$1\" by field \"$2\".",
 6601|      0|                                field->number(), containing_type_name,
 6602|      0|                                conflicting_field->name()));
 6603|      0|    }
 6604|    275|  } else {
 6605|    275|    if (field->is_extension()) {
  ------------------
  |  Branch (6605:9): [True: 0, False: 275]
  ------------------
 6606|      0|      if (!tables_->AddExtension(field)) {
  ------------------
  |  Branch (6606:11): [True: 0, False: 0]
  ------------------
 6607|      0|        const FieldDescriptor* conflicting_field =
 6608|      0|            tables_->FindExtension(field->containing_type(), field->number());
 6609|      0|        std::string containing_type_name =
 6610|      0|            field->containing_type() == nullptr
  ------------------
  |  Branch (6610:13): [True: 0, False: 0]
  ------------------
 6611|      0|                ? "unknown"
 6612|      0|                : field->containing_type()->full_name();
 6613|      0|        std::string error_msg = strings::Substitute(
 6614|      0|            "Extension number $0 has already been used in \"$1\" by extension "
 6615|      0|            "\"$2\" defined in $3.",
 6616|      0|            field->number(), containing_type_name,
 6617|      0|            conflicting_field->full_name(), conflicting_field->file()->name());
 6618|       |        // Conflicting extension numbers should be an error. However, before
 6619|       |        // turning this into an error we need to fix all existing broken
 6620|       |        // protos first.
 6621|       |        // TODO(xiaofeng): Change this to an error.
 6622|      0|        AddWarning(field->full_name(), proto,
 6623|      0|                   DescriptorPool::ErrorCollector::NUMBER, error_msg);
 6624|      0|      }
 6625|      0|    }
 6626|    275|  }
 6627|    275|}
_ZN6google8protobuf17DescriptorBuilder13CrossLinkEnumEPNS0_14EnumDescriptorERKNS0_19EnumDescriptorProtoE:
 6630|      6|                                      const EnumDescriptorProto& proto) {
 6631|      6|  if (enum_type->options_ == nullptr) {
  ------------------
  |  Branch (6631:7): [True: 6, False: 0]
  ------------------
 6632|      6|    enum_type->options_ = &EnumOptions::default_instance();
 6633|      6|  }
 6634|       |
 6635|     39|  for (int i = 0; i < enum_type->value_count(); i++) {
  ------------------
  |  Branch (6635:19): [True: 33, False: 6]
  ------------------
 6636|     33|    CrossLinkEnumValue(&enum_type->values_[i], proto.value(i));
 6637|     33|  }
 6638|      6|}
_ZN6google8protobuf17DescriptorBuilder18CrossLinkEnumValueEPNS0_19EnumValueDescriptorERKNS0_24EnumValueDescriptorProtoE:
 6642|     33|    const EnumValueDescriptorProto& /* proto */) {
 6643|     33|  if (enum_value->options_ == nullptr) {
  ------------------
  |  Branch (6643:7): [True: 33, False: 0]
  ------------------
 6644|     33|    enum_value->options_ = &EnumValueOptions::default_instance();
 6645|     33|  }
 6646|     33|}
_ZN6google8protobuf17DescriptorBuilder17OptionInterpreterC2EPS1_:
 7273|      3|    : builder_(builder) {
 7274|      3|  GOOGLE_CHECK(builder_);
  ------------------
  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7275|      3|}
_ZN6google8protobuf17DescriptorBuilder17OptionInterpreterD2Ev:
 7277|      3|DescriptorBuilder::OptionInterpreter::~OptionInterpreter() {}
_ZNK6google8protobuf15FieldDescriptor12message_typeEv:
 8236|   107k|const Descriptor* FieldDescriptor::message_type() const {
 8237|   107k|  if (type_once_) {
  ------------------
  |  Branch (8237:7): [True: 0, False: 107k]
  ------------------
 8238|      0|    internal::call_once(*type_once_, FieldDescriptor::TypeOnceInit, this);
 8239|      0|  }
 8240|   107k|  return type_ == TYPE_MESSAGE || type_ == TYPE_GROUP
  ------------------
  |  Branch (8240:10): [True: 107k, False: 0]
  |  Branch (8240:35): [True: 0, False: 0]
  ------------------
 8241|   107k|             ? type_descriptor_.message_type
 8242|   107k|             : nullptr;
 8243|   107k|}
_ZNK6google8protobuf15FieldDescriptor9enum_typeEv:
 8245|     18|const EnumDescriptor* FieldDescriptor::enum_type() const {
 8246|     18|  if (type_once_) {
  ------------------
  |  Branch (8246:7): [True: 0, False: 18]
  ------------------
 8247|      0|    internal::call_once(*type_once_, FieldDescriptor::TypeOnceInit, this);
 8248|      0|  }
 8249|     18|  return type_ == TYPE_ENUM ? type_descriptor_.enum_type : nullptr;
  ------------------
  |  Branch (8249:10): [True: 18, False: 0]
  ------------------
 8250|     18|}
_ZN6google8protobuf14DescriptorPool6Tables10CheckPointC2EPKS2_:
 1403|      3|              static_cast<int>(tables->flat_allocs_.size())),
 1404|       |          misc_allocations_before_checkpoint(
 1405|      3|              static_cast<int>(tables->misc_allocs_.size())),
 1406|       |          pending_symbols_before_checkpoint(
 1407|      3|              tables->symbols_after_checkpoint_.size()),
 1408|       |          pending_files_before_checkpoint(
 1409|      3|              tables->files_after_checkpoint_.size()),
 1410|       |          pending_extensions_before_checkpoint(
 1411|      3|              tables->extensions_after_checkpoint_.size()) {}
_ZNK6google8protobuf14DescriptorPool6Tables10FindSymbolENS0_20stringpiece_internal11StringPieceE:
 1506|    107|inline Symbol DescriptorPool::Tables::FindSymbol(StringPiece key) const {
 1507|    107|  Symbol::QueryKey name;
 1508|    107|  name.name = key;
 1509|    107|  auto it = symbols_by_name_.find(name);
 1510|    107|  return it == symbols_by_name_.end() ? Symbol() : *it;
  ------------------
  |  Branch (1510:10): [True: 3, False: 104]
  ------------------
 1511|    107|}
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_120SymbolByFullNameHashclINS0_6SymbolEEEmRKT_:
 1030|    502|  size_t operator()(const T& s) const {
 1031|    502|    return HASH_FXN<StringPiece>{}(s.full_name());
  ------------------
  |  |  985|  1.00k|#define HASH_FXN hash
  ------------------
 1032|    502|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_118SymbolByFullNameEqclINS0_6SymbolES4_EEbRKT_RKT0_:
 1038|    104|  bool operator()(const T& a, const U& b) const {
 1039|    104|    return a.full_name() == b.full_name();
 1040|    104|  }
_ZN6google8protobuf6SymbolC2ERNS1_8QueryKeyE:
  667|   615k|  Symbol(QueryKey& value) : ptr_(&value) {  // NOLINT
  668|   615k|    value.symbol_type_ = QUERY_KEY;
  669|   615k|  }
_ZNK6google8protobuf6Symbol6IsNullEv:
  676|    515|  bool IsNull() const { return type() == NULL_SYMBOL; }
_ZNK6google8protobuf6Symbol16field_descriptorEv:
  596|  1.23M|  const TYPE* FIELD() const {                                                  \
  597|  1.23M|    return type() == TYPE_CONSTANT ? static_cast<const TYPE*>(ptr_) : nullptr; \
  ------------------
  |  Branch (597:12): [True: 1.23M, False: 0]
  ------------------
  598|  1.23M|  }
_ZNK6google8protobuf6Symbol9full_nameEv:
  710|  1.10k|  StringPiece full_name() const {
  711|  1.10k|    switch (type()) {
  712|    227|      case MESSAGE:
  ------------------
  |  Branch (712:7): [True: 227, False: 878]
  ------------------
  713|    227|        return descriptor()->full_name();
  714|    550|      case FIELD:
  ------------------
  |  Branch (714:7): [True: 550, False: 555]
  ------------------
  715|    550|        return field_descriptor()->full_name();
  716|     22|      case ONEOF:
  ------------------
  |  Branch (716:7): [True: 22, False: 1.08k]
  ------------------
  717|     22|        return oneof_descriptor()->full_name();
  718|     18|      case ENUM:
  ------------------
  |  Branch (718:7): [True: 18, False: 1.08k]
  ------------------
  719|     18|        return enum_descriptor()->full_name();
  720|     70|      case ENUM_VALUE:
  ------------------
  |  Branch (720:7): [True: 70, False: 1.03k]
  ------------------
  721|     70|        return enum_value_descriptor()->full_name();
  722|      0|      case SERVICE:
  ------------------
  |  Branch (722:7): [True: 0, False: 1.10k]
  ------------------
  723|      0|        return service_descriptor()->full_name();
  724|      0|      case METHOD:
  ------------------
  |  Branch (724:7): [True: 0, False: 1.10k]
  ------------------
  725|      0|        return method_descriptor()->full_name();
  726|      5|      case FULL_PACKAGE:
  ------------------
  |  Branch (726:7): [True: 5, False: 1.10k]
  ------------------
  727|      5|        return file_descriptor()->package();
  728|      2|      case SUB_PACKAGE:
  ------------------
  |  Branch (728:7): [True: 2, False: 1.10k]
  ------------------
  729|      2|        return StringPiece(sub_package_file_descriptor()->file->package())
  730|      2|            .substr(0, sub_package_file_descriptor()->name_size);
  731|    211|      case QUERY_KEY:
  ------------------
  |  Branch (731:7): [True: 211, False: 894]
  ------------------
  732|    211|        return query_key()->full_name();
  733|      0|      default:
  ------------------
  |  Branch (733:7): [True: 0, False: 1.10k]
  ------------------
  734|      0|        GOOGLE_CHECK(false);
  ------------------
  |  |  152|      0|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      0|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  735|  1.10k|    }
  736|      0|    return "";
  737|  1.10k|  }
_ZNK6google8protobuf6Symbol15file_descriptorEv:
  596|      5|  const TYPE* FIELD() const {                                                  \
  597|      5|    return type() == TYPE_CONSTANT ? static_cast<const TYPE*>(ptr_) : nullptr; \
  ------------------
  |  Branch (597:12): [True: 5, False: 0]
  ------------------
  598|      5|  }
_ZNK6google8protobuf6Symbol27sub_package_file_descriptorEv:
  596|      4|  const TYPE* FIELD() const {                                                  \
  597|      4|    return type() == TYPE_CONSTANT ? static_cast<const TYPE*>(ptr_) : nullptr; \
  ------------------
  |  Branch (597:12): [True: 4, False: 0]
  ------------------
  598|      4|  }
_ZNK6google8protobuf6Symbol9query_keyEv:
  670|  1.23M|  const QueryKey* query_key() const {
  671|  1.23M|    return type() == QUERY_KEY ? static_cast<const QueryKey*>(ptr_) : nullptr;
  ------------------
  |  Branch (671:12): [True: 1.23M, False: 0]
  ------------------
  672|  1.23M|  }
_ZNK6google8protobuf6Symbol8QueryKey9full_nameEv:
  655|    211|    StringPiece full_name() const { return name; }
_ZNK6google8protobuf6Symbol15parent_name_keyEv:
  739|  1.84M|  std::pair<const void*, StringPiece> parent_name_key() const {
  740|  1.84M|    const auto or_file = [&](const void* p) { return p ? p : GetFile(); };
  741|  1.84M|    switch (type()) {
  742|    201|      case MESSAGE:
  ------------------
  |  Branch (742:7): [True: 201, False: 1.84M]
  ------------------
  743|    201|        return {or_file(descriptor()->containing_type()), descriptor()->name()};
  744|   616k|      case FIELD: {
  ------------------
  |  Branch (744:7): [True: 616k, False: 1.23M]
  ------------------
  745|   616k|        auto* field = field_descriptor();
  746|   616k|        return {or_file(field->is_extension() ? field->extension_scope()
  ------------------
  |  Branch (746:25): [True: 0, False: 616k]
  ------------------
  747|   616k|                                              : field->containing_type()),
  748|   616k|                field->name()};
  749|      0|      }
  750|     33|      case ONEOF:
  ------------------
  |  Branch (750:7): [True: 33, False: 1.84M]
  ------------------
  751|     33|        return {oneof_descriptor()->containing_type(),
  752|     33|                oneof_descriptor()->name()};
  753|     18|      case ENUM:
  ------------------
  |  Branch (753:7): [True: 18, False: 1.84M]
  ------------------
  754|     18|        return {or_file(enum_descriptor()->containing_type()),
  755|     18|                enum_descriptor()->name()};
  756|     99|      case ENUM_VALUE:
  ------------------
  |  Branch (756:7): [True: 99, False: 1.84M]
  ------------------
  757|     99|        return {or_file(enum_value_descriptor()->type()->containing_type()),
  758|     99|                enum_value_descriptor()->name()};
  759|     99|      case ENUM_VALUE_OTHER_PARENT:
  ------------------
  |  Branch (759:7): [True: 99, False: 1.84M]
  ------------------
  760|     99|        return {enum_value_descriptor()->type(),
  761|     99|                enum_value_descriptor()->name()};
  762|      0|      case SERVICE:
  ------------------
  |  Branch (762:7): [True: 0, False: 1.84M]
  ------------------
  763|      0|        return {GetFile(), service_descriptor()->name()};
  764|      0|      case METHOD:
  ------------------
  |  Branch (764:7): [True: 0, False: 1.84M]
  ------------------
  765|      0|        return {method_descriptor()->service(), method_descriptor()->name()};
  766|  1.23M|      case QUERY_KEY:
  ------------------
  |  Branch (766:7): [True: 1.23M, False: 616k]
  ------------------
  767|  1.23M|        return query_key()->parent_name_key();
  768|      0|      default:
  ------------------
  |  Branch (768:7): [True: 0, False: 1.84M]
  ------------------
  769|      0|        GOOGLE_CHECK(false);
  ------------------
  |  |  152|      0|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      0|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  770|  1.84M|    }
  771|      0|    return {};
  772|  1.84M|  }
_ZZNK6google8protobuf6Symbol15parent_name_keyEvENKUlPKvE_clES3_:
  740|   616k|    const auto or_file = [&](const void* p) { return p ? p : GetFile(); };
  ------------------
  |  Branch (740:54): [True: 616k, False: 183]
  ------------------
_ZNK6google8protobuf6Symbol8QueryKey15parent_name_keyEv:
  659|  1.23M|    std::pair<const void*, StringPiece> parent_name_key() const {
  660|  1.23M|      return {parent, name};
  661|  1.23M|    }
_ZN6google8protobuf6SymbolC2EPNS0_15FieldDescriptorE:
  593|    349|  explicit Symbol(TYPE* value) : ptr_(value) {                                 \
  594|    349|    value->symbol_type_ = TYPE_CONSTANT;                                       \
  595|    349|  }                                                                            \
_ZN6google8protobuf6Symbol9EnumValueEPNS0_19EnumValueDescriptorEi:
  620|     66|  static Symbol EnumValue(EnumValueDescriptor* value, int n) {
  621|     66|    Symbol s;
  622|     66|    internal::SymbolBase* ptr;
  623|     66|    if (n == 0) {
  ------------------
  |  Branch (623:9): [True: 33, False: 33]
  ------------------
  624|     33|      ptr = static_cast<internal::SymbolBaseN<0>*>(value);
  625|     33|      ptr->symbol_type_ = ENUM_VALUE;
  626|     33|    } else {
  627|     33|      ptr = static_cast<internal::SymbolBaseN<1>*>(value);
  628|     33|      ptr->symbol_type_ = ENUM_VALUE_OTHER_PARENT;
  629|     33|    }
  630|     66|    s.ptr_ = ptr;
  631|     66|    return s;
  632|     66|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_19RoundUpToILi8EEEmm:
  148|  1.20k|constexpr size_t RoundUpTo(size_t n) {
  149|  1.20k|  static_assert((R & (R - 1)) == 0, "Must be power of two");
  150|  1.20k|  return (n + (R - 1)) & ~(R - 1);
  151|  1.20k|}
_ZNK6google8protobuf14DescriptorPool6Tables8FindFileENS0_20stringpiece_internal11StringPieceE:
 1555|      9|    StringPiece key) const {
 1556|      9|  return FindPtrOrNull(files_by_name_, key);
 1557|      9|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117GeneratedDatabaseEv:
 1930|      7|EncodedDescriptorDatabase* GeneratedDatabase() {
 1931|      7|  static auto generated_database =
 1932|      7|      internal::OnShutdownDelete(new EncodedDescriptorDatabase());
 1933|      7|  return generated_database;
 1934|      7|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_116NewGeneratedPoolEv:
 1936|      1|DescriptorPool* NewGeneratedPool() {
 1937|      1|  auto generated_pool = new DescriptorPool(GeneratedDatabase());
 1938|      1|  generated_pool->InternalSetLazilyBuildDependencies();
 1939|      1|  return generated_pool;
 1940|      1|}
_ZNK6google8protobuf6Symbol7GetFileEv:
  685|    286|  const FileDescriptor* GetFile() const {
  686|    286|    switch (type()) {
  687|    276|      case MESSAGE:
  ------------------
  |  Branch (687:7): [True: 276, False: 10]
  ------------------
  688|    276|        return descriptor()->file();
  689|      0|      case FIELD:
  ------------------
  |  Branch (689:7): [True: 0, False: 286]
  ------------------
  690|      0|        return field_descriptor()->file();
  691|      0|      case ONEOF:
  ------------------
  |  Branch (691:7): [True: 0, False: 286]
  ------------------
  692|      0|        return oneof_descriptor()->containing_type()->file();
  693|      6|      case ENUM:
  ------------------
  |  Branch (693:7): [True: 6, False: 280]
  ------------------
  694|      6|        return enum_descriptor()->file();
  695|      4|      case ENUM_VALUE:
  ------------------
  |  Branch (695:7): [True: 4, False: 282]
  ------------------
  696|      4|        return enum_value_descriptor()->type()->file();
  697|      0|      case SERVICE:
  ------------------
  |  Branch (697:7): [True: 0, False: 286]
  ------------------
  698|      0|        return service_descriptor()->file();
  699|      0|      case METHOD:
  ------------------
  |  Branch (699:7): [True: 0, False: 286]
  ------------------
  700|      0|        return method_descriptor()->service()->file();
  701|      0|      case FULL_PACKAGE:
  ------------------
  |  Branch (701:7): [True: 0, False: 286]
  ------------------
  702|      0|        return file_descriptor();
  703|      0|      case SUB_PACKAGE:
  ------------------
  |  Branch (703:7): [True: 0, False: 286]
  ------------------
  704|      0|        return sub_package_file_descriptor()->file;
  705|      0|      default:
  ------------------
  |  Branch (705:7): [True: 0, False: 286]
  ------------------
  706|      0|        return nullptr;
  707|    286|    }
  708|    286|  }
_ZNK6google8protobuf6Symbol10descriptorEv:
  596|    998|  const TYPE* FIELD() const {                                                  \
  597|    998|    return type() == TYPE_CONSTANT ? static_cast<const TYPE*>(ptr_) : nullptr; \
  ------------------
  |  Branch (597:12): [True: 998, False: 0]
  ------------------
  598|    998|  }
_ZNK6google8protobuf6Symbol16oneof_descriptorEv:
  596|     88|  const TYPE* FIELD() const {                                                  \
  597|     88|    return type() == TYPE_CONSTANT ? static_cast<const TYPE*>(ptr_) : nullptr; \
  ------------------
  |  Branch (597:12): [True: 88, False: 0]
  ------------------
  598|     88|  }
_ZNK6google8protobuf6Symbol15enum_descriptorEv:
  596|     66|  const TYPE* FIELD() const {                                                  \
  597|     66|    return type() == TYPE_CONSTANT ? static_cast<const TYPE*>(ptr_) : nullptr; \
  ------------------
  |  Branch (597:12): [True: 66, False: 0]
  ------------------
  598|     66|  }
_ZNK6google8protobuf6Symbol21enum_value_descriptorEv:
  634|    474|  const EnumValueDescriptor* enum_value_descriptor() const {
  635|    474|    return type() == ENUM_VALUE
  ------------------
  |  Branch (635:12): [True: 276, False: 198]
  ------------------
  636|    474|               ? static_cast<const EnumValueDescriptor*>(
  637|    276|                     static_cast<const internal::SymbolBaseN<0>*>(ptr_))
  638|    474|           : type() == ENUM_VALUE_OTHER_PARENT
  ------------------
  |  Branch (638:14): [True: 198, False: 0]
  ------------------
  639|    198|               ? static_cast<const EnumValueDescriptor*>(
  640|    198|                     static_cast<const internal::SymbolBaseN<1>*>(ptr_))
  641|    198|               : nullptr;
  642|    474|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_118FieldsByNumberHashclINS0_6SymbolEEEmRKT_:
 1076|     74|  size_t operator()(const T& s) const {
 1077|     74|    return PointerIntegerPairHash<std::pair<const void*, int>>{}(
 1078|     74|        s.parent_number_key());
 1079|     74|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_122PointerIntegerPairHashINSt3__14pairIPKviEEEclERKS7_:
  989|     74|  size_t operator()(const PairType& p) const {
  990|     74|    static const size_t prime1 = 16777499;
  991|     74|    static const size_t prime2 = 16777619;
  992|     74|    return reinterpret_cast<size_t>(p.first) * prime1 ^
  993|     74|           static_cast<size_t>(p.second) * prime2;
  994|     74|  }
_ZNK6google8protobuf6Symbol17parent_number_keyEv:
  774|     74|  std::pair<const void*, int> parent_number_key() const {
  775|     74|    switch (type()) {
  776|     74|      case FIELD:
  ------------------
  |  Branch (776:7): [True: 74, False: 0]
  ------------------
  777|     74|        return {field_descriptor()->containing_type(),
  778|     74|                field_descriptor()->number()};
  779|      0|      case ENUM_VALUE:
  ------------------
  |  Branch (779:7): [True: 0, False: 74]
  ------------------
  780|      0|        return {enum_value_descriptor()->type(),
  781|      0|                enum_value_descriptor()->number()};
  782|      0|      case QUERY_KEY:
  ------------------
  |  Branch (782:7): [True: 0, False: 74]
  ------------------
  783|      0|        return query_key()->parent_number_key();
  784|      0|      default:
  ------------------
  |  Branch (784:7): [True: 0, False: 74]
  ------------------
  785|      0|        GOOGLE_CHECK(false);
  ------------------
  |  |  152|      0|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      0|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  786|     74|    }
  787|      0|    return {};
  788|     74|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_121PointerStringPairHashclERKNSt3__14pairIPKvNS0_20stringpiece_internal11StringPieceEEE:
 1007|   616k|  size_t operator()(const PointerStringPair& p) const {
 1008|   616k|    static const size_t prime = 16777619;
 1009|   616k|    hash<StringPiece> string_hash;
 1010|   616k|    return reinterpret_cast<size_t>(p.first) * prime ^
 1011|   616k|           static_cast<size_t>(string_hash(p.second));
 1012|   616k|  }
_ZNK6google8protobuf20FileDescriptorTables16FindNestedSymbolEPKvNS0_20stringpiece_internal11StringPieceE:
 1514|   615k|    const void* parent, StringPiece name) const {
 1515|   615k|  Symbol::QueryKey query;
 1516|   615k|  query.name = name;
 1517|   615k|  query.parent = parent;
 1518|   615k|  auto it = symbols_by_parent_.find(query);
 1519|   615k|  return it == symbols_by_parent_.end() ? Symbol() : *it;
  ------------------
  |  Branch (1519:10): [True: 0, False: 615k]
  ------------------
 1520|   615k|}
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_118SymbolByParentHashclINS0_6SymbolEEEmRKT_:
 1049|   616k|  size_t operator()(const T& s) const {
 1050|   616k|    return PointerStringPairHash{}(s.parent_name_key());
 1051|   616k|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_116SymbolByParentEqclINS0_6SymbolES4_EEbRKT_RKT0_:
 1057|   615k|  bool operator()(const T& a, const U& b) const {
 1058|   615k|    return a.parent_name_key() == b.parent_name_key();
 1059|   615k|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayIS9_EEPT_i:
  386|    398|  U* AllocateArray(int array_size) {
  387|    398|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|    398|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|    398|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|    398|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|    398|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 398, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|    398|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|    398|    int& used = used_.template Get<TypeToUse>();
  395|    398|    U* res = reinterpret_cast<U*>(data + used);
  396|    398|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|    398|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|    398|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|    398|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|    398|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 398, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|    398|    return res;
  399|    398|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13has_allocatedEv:
  527|  2.69k|  bool has_allocated() const {
  528|  2.69k|    return pointers_.template Get<char>() != nullptr;
  529|  2.69k|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetIcEERKPT_v:
  229|  2.69k|  const ValueT<K>& Get() const {
  230|  2.69k|    return static_cast<const Base<K>&>(payload_).value;
  231|  2.69k|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISA_EERPT_v:
  224|    401|  ValueT<K>& Get() {
  225|    401|    return static_cast<Base<K>&>(payload_).value;
  226|    401|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISA_EERiv:
  224|  1.36k|  ValueT<K>& Get() {
  225|  1.36k|    return static_cast<Base<K>&>(payload_).value;
  226|  1.36k|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_14FoldESt16initializer_listINS1_15ExpressionEaterEE:
  145|    409|void Fold(std::initializer_list<ExpressionEater>) {}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEOT_:
  143|    973|  ExpressionEater(T&&) {}  // NOLINT
_ZNK6google8protobuf6Symbol9IsPackageEv:
  681|      1|  bool IsPackage() const {
  682|      1|    return type() == FULL_PACKAGE || type() == SUB_PACKAGE;
  ------------------
  |  Branch (682:12): [True: 1, False: 0]
  |  Branch (682:38): [True: 0, False: 0]
  ------------------
  683|      1|  }
_ZN6google8protobuf6SymbolC2Ev:
  581|     69|  Symbol() {
  582|     69|    static constexpr internal::SymbolBase null_symbol{};
  583|     69|    static_assert(null_symbol.symbol_type_ == NULL_SYMBOL, "");
  584|       |    // Initialize with a sentinel to make sure `ptr_` is never null.
  585|     69|    ptr_ = &null_symbol;
  586|     69|  }
_ZN6google8protobuf6SymbolC2EPNS0_14EnumDescriptorE:
  593|      6|  explicit Symbol(TYPE* value) : ptr_(value) {                                 \
  594|      6|    value->symbol_type_ = TYPE_CONSTANT;                                       \
  595|      6|  }                                                                            \
_ZN6google8protobuf6SymbolC2EPNS0_10DescriptorE:
  593|     67|  explicit Symbol(TYPE* value) : ptr_(value) {                                 \
  594|     67|    value->symbol_type_ = TYPE_CONSTANT;                                       \
  595|     67|  }                                                                            \
_ZN6google8protobuf6SymbolC2EPNS0_14FileDescriptorE:
  593|      2|  explicit Symbol(TYPE* value) : ptr_(value) {                                 \
  594|      2|    value->symbol_type_ = TYPE_CONSTANT;                                       \
  595|      2|  }                                                                            \
_ZN6google8protobuf6SymbolC2EPNS1_10SubpackageE:
  593|      1|  explicit Symbol(TYPE* value) : ptr_(value) {                                 \
  594|      1|    value->symbol_type_ = TYPE_CONSTANT;                                       \
  595|      1|  }                                                                            \
descriptor.cc:_ZN6google8protobufL18PlanAllocationSizeERKNS0_19FileDescriptorProtoERNS0_8internal13FlatAllocatorE:
 4982|      3|                               internal::FlatAllocator& alloc) {
 4983|      3|  alloc.PlanArray<FileDescriptor>(1);
 4984|      3|  alloc.PlanArray<FileDescriptorTables>(1);
 4985|      3|  alloc.PlanArray<std::string>(2);  // name + package
 4986|      3|  if (proto.has_options()) alloc.PlanArray<FileOptions>(1);
  ------------------
  |  Branch (4986:7): [True: 2, False: 1]
  ------------------
 4987|      3|  if (proto.has_source_code_info()) alloc.PlanArray<SourceCodeInfo>(1);
  ------------------
  |  Branch (4987:7): [True: 0, False: 3]
  ------------------
 4988|       |
 4989|      3|  PlanAllocationSize(proto.service(), alloc);
 4990|      3|  PlanAllocationSize(proto.message_type(), alloc);
 4991|      3|  PlanAllocationSize(proto.enum_type(), alloc);
 4992|      3|  PlanAllocationSize(proto.extension(), alloc);
 4993|       |
 4994|      3|  alloc.PlanArray<int>(proto.weak_dependency_size());
 4995|      3|  alloc.PlanArray<int>(proto.public_dependency_size());
 4996|      3|  alloc.PlanArray<const FileDescriptor*>(proto.dependency_size());
 4997|      3|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayISB_EEvi:
  368|      3|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|      3|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|      3|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|      0|      static_assert(alignof(U) <= 8, "");
  374|      0|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|      3|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      3|      using TypeToUse =
  379|      3|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      3|                                    char, U>::type;
  381|      3|      total_.template Get<TypeToUse>() += array_size;
  382|      3|    }
  383|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISC_EERiv:
  224|     15|  ValueT<K>& Get() {
  225|     15|    return static_cast<Base<K>&>(payload_).value;
  226|     15|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayISK_EEvi:
  368|      2|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|      2|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|      2|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      2|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 2, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|      2|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|      0|      static_assert(alignof(U) <= 8, "");
  374|      0|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|      2|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      2|      using TypeToUse =
  379|      2|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      2|                                    char, U>::type;
  381|      2|      total_.template Get<TypeToUse>() += array_size;
  382|      2|    }
  383|      2|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISL_EERiv:
  224|     15|  ValueT<K>& Get() {
  225|     15|    return static_cast<Base<K>&>(payload_).value;
  226|     15|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISB_EERiv:
  224|      6|  ValueT<K>& Get() {
  225|      6|    return static_cast<Base<K>&>(payload_).value;
  226|      6|  }
descriptor.cc:_ZN6google8protobufL18PlanAllocationSizeERKNS0_16RepeatedPtrFieldINS0_22ServiceDescriptorProtoEEERNS0_8internal13FlatAllocatorE:
 4972|      3|    internal::FlatAllocator& alloc) {
 4973|      3|  alloc.PlanArray<ServiceDescriptor>(services.size());
 4974|      3|  alloc.PlanArray<std::string>(2 * services.size());  // name + full_name
 4975|      3|  for (const auto& service : services) {
  ------------------
  |  Branch (4975:28): [True: 0, False: 3]
  ------------------
 4976|      0|    if (service.has_options()) alloc.PlanArray<ServiceOptions>(1);
  ------------------
  |  Branch (4976:9): [True: 0, False: 0]
  ------------------
 4977|      0|    PlanAllocationSize(service.method(), alloc);
 4978|      0|  }
 4979|      3|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayINS0_17ServiceDescriptorEEEvi:
  368|      3|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|      3|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|      3|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|      3|      static_assert(alignof(U) <= 8, "");
  374|      3|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|      3|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetIcEERiv:
  224|  1.74k|  ValueT<K>& Get() {
  225|  1.74k|    return static_cast<Base<K>&>(payload_).value;
  226|  1.74k|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISJ_EERiv:
  224|      6|  ValueT<K>& Get() {
  225|      6|    return static_cast<Base<K>&>(payload_).value;
  226|      6|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISK_EERiv:
  224|      6|  ValueT<K>& Get() {
  225|      6|    return static_cast<Base<K>&>(payload_).value;
  226|      6|  }
descriptor.cc:_ZN6google8protobufL18PlanAllocationSizeERKNS0_16RepeatedPtrFieldINS0_15DescriptorProtoEEERNS0_8internal13FlatAllocatorE:
 4942|     70|    internal::FlatAllocator& alloc) {
 4943|     70|  alloc.PlanArray<Descriptor>(messages.size());
 4944|     70|  alloc.PlanArray<std::string>(2 * messages.size());  // name + full_name
 4945|       |
 4946|     70|  for (const auto& message : messages) {
  ------------------
  |  Branch (4946:28): [True: 67, False: 70]
  ------------------
 4947|     67|    if (message.has_options()) alloc.PlanArray<MessageOptions>(1);
  ------------------
  |  Branch (4947:9): [True: 0, False: 67]
  ------------------
 4948|     67|    PlanAllocationSize(message.nested_type(), alloc);
 4949|     67|    PlanAllocationSize(message.field(), alloc);
 4950|     67|    PlanAllocationSize(message.extension(), alloc);
 4951|     67|    PlanAllocationSize(message.extension_range(), alloc);
 4952|     67|    alloc.PlanArray<Descriptor::ReservedRange>(message.reserved_range_size());
 4953|     67|    alloc.PlanArray<const std::string*>(message.reserved_name_size());
 4954|     67|    alloc.PlanArray<std::string>(message.reserved_name_size());
 4955|     67|    PlanAllocationSize(message.enum_type(), alloc);
 4956|     67|    PlanAllocationSize(message.oneof_decl(), alloc);
 4957|     67|  }
 4958|     70|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISD_EERiv:
  224|      6|  ValueT<K>& Get() {
  225|      6|    return static_cast<Base<K>&>(payload_).value;
  226|      6|  }
descriptor.cc:_ZN6google8protobufL18PlanAllocationSizeERKNS0_16RepeatedPtrFieldINS0_30DescriptorProto_ExtensionRangeEEERNS0_8internal13FlatAllocatorE:
 4933|     67|    internal::FlatAllocator& alloc) {
 4934|     67|  alloc.PlanArray<Descriptor::ExtensionRange>(ranges.size());
 4935|     67|  for (const auto& r : ranges) {
  ------------------
  |  Branch (4935:22): [True: 9, False: 67]
  ------------------
 4936|      9|    if (r.has_options()) alloc.PlanArray<ExtensionRangeOptions>(1);
  ------------------
  |  Branch (4936:9): [True: 0, False: 9]
  ------------------
 4937|      9|  }
 4938|     67|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISH_EERiv:
  224|      6|  ValueT<K>& Get() {
  225|      6|    return static_cast<Base<K>&>(payload_).value;
  226|      6|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayINS0_10Descriptor13ReservedRangeEEEvi:
  368|     67|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|     67|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|     67|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|     67|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 67, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|     67|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|     67|      static_assert(alignof(U) <= 8, "");
  374|     67|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|     67|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|     67|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayIPKS9_EEvi:
  368|     73|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|     73|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|     73|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|     73|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 73, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|     73|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|     73|      static_assert(alignof(U) <= 8, "");
  374|     73|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|     73|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|     73|  }
descriptor.cc:_ZN6google8protobufL18PlanAllocationSizeERKNS0_16RepeatedPtrFieldINS0_20OneofDescriptorProtoEEERNS0_8internal13FlatAllocatorE:
 4906|     67|    internal::FlatAllocator& alloc) {
 4907|     67|  alloc.PlanArray<OneofDescriptor>(oneofs.size());
 4908|     67|  alloc.PlanArray<std::string>(2 * oneofs.size());  // name + full_name
 4909|     67|  for (const auto& oneof : oneofs) {
  ------------------
  |  Branch (4909:26): [True: 11, False: 67]
  ------------------
 4910|     11|    if (oneof.has_options()) alloc.PlanArray<OneofOptions>(1);
  ------------------
  |  Branch (4910:9): [True: 0, False: 11]
  ------------------
 4911|     11|  }
 4912|     67|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayINS0_15OneofDescriptorEEEvi:
  368|     67|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|     67|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|     67|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|     67|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 67, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|     67|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|     67|      static_assert(alignof(U) <= 8, "");
  374|     67|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|     67|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|     67|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISI_EERiv:
  224|      6|  ValueT<K>& Get() {
  225|      6|    return static_cast<Base<K>&>(payload_).value;
  226|      6|  }
descriptor.cc:_ZN6google8protobufL18PlanAllocationSizeERKNS0_16RepeatedPtrFieldINS0_19EnumDescriptorProtoEEERNS0_8internal13FlatAllocatorE:
 4892|     70|    internal::FlatAllocator& alloc) {
 4893|     70|  alloc.PlanArray<EnumDescriptor>(enums.size());
 4894|     70|  alloc.PlanArray<std::string>(2 * enums.size());  // name + full_name
 4895|     70|  for (const auto& e : enums) {
  ------------------
  |  Branch (4895:22): [True: 6, False: 70]
  ------------------
 4896|      6|    if (e.has_options()) alloc.PlanArray<EnumOptions>(1);
  ------------------
  |  Branch (4896:9): [True: 0, False: 6]
  ------------------
 4897|      6|    PlanAllocationSize(e.value(), alloc);
 4898|      6|    alloc.PlanArray<EnumDescriptor::ReservedRange>(e.reserved_range_size());
 4899|      6|    alloc.PlanArray<const std::string*>(e.reserved_name_size());
 4900|      6|    alloc.PlanArray<std::string>(e.reserved_name_size());
 4901|      6|  }
 4902|     70|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISF_EERiv:
  224|      6|  ValueT<K>& Get() {
  225|      6|    return static_cast<Base<K>&>(payload_).value;
  226|      6|  }
descriptor.cc:_ZN6google8protobufL18PlanAllocationSizeERKNS0_16RepeatedPtrFieldINS0_24EnumValueDescriptorProtoEEERNS0_8internal13FlatAllocatorE:
 4882|      6|    internal::FlatAllocator& alloc) {
 4883|      6|  alloc.PlanArray<EnumValueDescriptor>(values.size());
 4884|      6|  alloc.PlanArray<std::string>(2 * values.size());  // name + full_name
 4885|     33|  for (const auto& v : values) {
  ------------------
  |  Branch (4885:22): [True: 33, False: 6]
  ------------------
 4886|     33|    if (v.has_options()) alloc.PlanArray<EnumValueOptions>(1);
  ------------------
  |  Branch (4886:9): [True: 0, False: 33]
  ------------------
 4887|     33|  }
 4888|      6|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISG_EERiv:
  224|      6|  ValueT<K>& Get() {
  225|      6|    return static_cast<Base<K>&>(payload_).value;
  226|      6|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayINS0_14EnumDescriptor13ReservedRangeEEEvi:
  368|      6|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|      6|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|      6|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|      6|      static_assert(alignof(U) <= 8, "");
  374|      6|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|      6|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|      6|  }
descriptor.cc:_ZN6google8protobufL18PlanAllocationSizeERKNS0_16RepeatedPtrFieldINS0_20FieldDescriptorProtoEEERNS0_8internal13FlatAllocatorE:
 4916|    137|    internal::FlatAllocator& alloc) {
 4917|    137|  alloc.PlanArray<FieldDescriptor>(fields.size());
 4918|    275|  for (const auto& field : fields) {
  ------------------
  |  Branch (4918:26): [True: 275, False: 137]
  ------------------
 4919|    275|    if (field.has_options()) alloc.PlanArray<FieldOptions>(1);
  ------------------
  |  Branch (4919:9): [True: 4, False: 271]
  ------------------
 4920|    275|    alloc.PlanFieldNames(field.name(),
 4921|    275|                         field.has_json_name() ? &field.json_name() : nullptr);
  ------------------
  |  Branch (4921:26): [True: 0, False: 275]
  ------------------
 4922|    275|    if (field.has_default_value() && field.has_type() &&
  ------------------
  |  Branch (4922:9): [True: 25, False: 250]
  |  Branch (4922:38): [True: 25, False: 0]
  ------------------
 4923|    275|        (field.type() == FieldDescriptorProto::TYPE_STRING ||
  ------------------
  |  Branch (4923:10): [True: 0, False: 25]
  ------------------
 4924|     25|         field.type() == FieldDescriptorProto::TYPE_BYTES)) {
  ------------------
  |  Branch (4924:10): [True: 0, False: 25]
  ------------------
 4925|       |      // For the default string value.
 4926|      0|      alloc.PlanArray<std::string>(1);
 4927|      0|    }
 4928|    275|  }
 4929|    137|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayINS0_15FieldDescriptorEEEvi:
  368|    137|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|    137|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|    137|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|    137|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 137, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|    137|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|    137|      static_assert(alignof(U) <= 8, "");
  374|    137|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|    137|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|    137|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayISD_EEvi:
  368|      4|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|      4|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|      4|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      4|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 4, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|      4|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|      0|      static_assert(alignof(U) <= 8, "");
  374|      0|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|      4|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      4|      using TypeToUse =
  379|      4|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      4|                                    char, U>::type;
  381|      4|      total_.template Get<TypeToUse>() += array_size;
  382|      4|    }
  383|      4|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISE_EERiv:
  224|     18|  ValueT<K>& Get() {
  225|     18|    return static_cast<Base<K>&>(payload_).value;
  226|     18|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14PlanFieldNamesERKS9_PSM_:
  415|    275|                      const std::string* opt_json_name) {
  416|    275|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|    275|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|    275|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 275, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  417|       |
  418|       |    // Fast path for snake_case names, which follow the style guide.
  419|    275|    if (opt_json_name == nullptr) {
  ------------------
  |  Branch (419:9): [True: 275, False: 0]
  ------------------
  420|    275|      switch (GetFieldNameCase(name)) {
  421|     80|        case FieldNameCase::kAllLower:
  ------------------
  |  Branch (421:9): [True: 80, False: 195]
  ------------------
  422|       |          // Case 1: they are all the same.
  423|     80|          return PlanArray<std::string>(2);
  424|    191|        case FieldNameCase::kSnakeCase:
  ------------------
  |  Branch (424:9): [True: 191, False: 84]
  ------------------
  425|       |          // Case 2: name==lower, camel==json
  426|    191|          return PlanArray<std::string>(3);
  427|      4|        default:
  ------------------
  |  Branch (427:9): [True: 4, False: 271]
  ------------------
  428|      4|          break;
  429|    275|      }
  430|    275|    }
  431|       |
  432|      4|    std::string lowercase_name = name;
  433|      4|    LowerString(&lowercase_name);
  434|       |
  435|      4|    std::string camelcase_name = ToCamelCase(name, /* lower_first = */ true);
  436|      4|    std::string json_name =
  437|      4|        opt_json_name != nullptr ? *opt_json_name : ToJsonName(name);
  ------------------
  |  Branch (437:9): [True: 0, False: 4]
  ------------------
  438|       |
  439|      4|    StringPiece all_names[] = {name, lowercase_name, camelcase_name,
  440|      4|                                     json_name};
  441|      4|    std::sort(all_names, all_names + 4);
  442|      4|    int unique =
  443|      4|        static_cast<int>(std::unique(all_names, all_names + 4) - all_names);
  444|       |
  445|      4|    PlanArray<std::string>(unique + 1);
  446|      4|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE16GetFieldNameCaseERKS9_:
  536|    550|  FieldNameCase GetFieldNameCase(const std::string& name) {
  537|    550|    if (!IsLower(name[0])) return FieldNameCase::kOther;
  ------------------
  |  Branch (537:9): [True: 0, False: 550]
  ------------------
  538|    550|    FieldNameCase best = FieldNameCase::kAllLower;
  539|  7.46k|    for (char c : name) {
  ------------------
  |  Branch (539:17): [True: 7.46k, False: 542]
  ------------------
  540|  7.46k|      if (IsLowerOrDigit(c)) {
  ------------------
  |  Branch (540:11): [True: 6.79k, False: 678]
  ------------------
  541|       |        // nothing to do
  542|  6.79k|      } else if (c == '_') {
  ------------------
  |  Branch (542:18): [True: 670, False: 8]
  ------------------
  543|    670|        best = FieldNameCase::kSnakeCase;
  544|    670|      } else {
  545|      8|        return FieldNameCase::kOther;
  546|      8|      }
  547|  7.46k|    }
  548|    542|    return best;
  549|    550|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE7IsLowerEc:
  531|  8.01k|  static bool IsLower(char c) { return 'a' <= c && c <= 'z'; }
  ------------------
  |  Branch (531:40): [True: 7.25k, False: 760]
  |  Branch (531:52): [True: 7.25k, False: 0]
  ------------------
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14IsLowerOrDigitEc:
  533|  7.46k|  static bool IsLowerOrDigit(char c) { return IsLower(c) || IsDigit(c); }
  ------------------
  |  Branch (533:47): [True: 6.70k, False: 760]
  |  Branch (533:61): [True: 82, False: 678]
  ------------------
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE7IsDigitEc:
  532|    760|  static bool IsDigit(char c) { return '0' <= c && c <= '9'; }
  ------------------
  |  Branch (532:40): [True: 760, False: 0]
  |  Branch (532:52): [True: 82, False: 678]
  ------------------
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayIiEEvi:
  368|      6|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|      6|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|      6|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|      6|      static_assert(alignof(U) <= 8, "");
  374|      6|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|      6|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|      6|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayIPKNS0_14FileDescriptorEEEvi:
  368|      3|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|      3|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|      3|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|      3|      static_assert(alignof(U) <= 8, "");
  374|      3|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|      3|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|      3|  }
_ZN6google8protobuf17DescriptorBuilder10BuildFieldERKNS0_20FieldDescriptorProtoEPNS0_10DescriptorEPNS0_15FieldDescriptorERNS0_8internal13FlatAllocatorE:
 3883|    275|                  FieldDescriptor* result, internal::FlatAllocator& alloc) {
 3884|    275|    BuildFieldOrExtension(proto, parent, result, false, alloc);
 3885|    275|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_122IncrementWhenDestroyedD2Ev:
 5369|     67|  ~IncrementWhenDestroyed() { ++to_increment; }
_ZN6google8protobuf6SymbolC2EPNS0_15OneofDescriptorE:
  593|     11|  explicit Symbol(TYPE* value) : ptr_(value) {                                 \
  594|     11|    value->symbol_type_ = TYPE_CONSTANT;                                       \
  595|     11|  }                                                                            \
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_113PrefixRemoverC2ENS0_20stringpiece_internal11StringPieceE:
  911|      6|  PrefixRemover(StringPiece prefix) {
  912|       |    // Strip underscores and lower-case the prefix.
  913|     48|    for (char character : prefix) {
  ------------------
  |  Branch (913:25): [True: 48, False: 6]
  ------------------
  914|     48|      if (character != '_') {
  ------------------
  |  Branch (914:11): [True: 48, False: 0]
  ------------------
  915|     48|        prefix_ += ascii_tolower(character);
  916|     48|      }
  917|     48|    }
  918|      6|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_121EnumValueToPascalCaseERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  887|     33|std::string EnumValueToPascalCase(const std::string& input) {
  888|     33|  bool next_upper = true;
  889|     33|  std::string result;
  890|     33|  result.reserve(input.size());
  891|       |
  892|    249|  for (char character : input) {
  ------------------
  |  Branch (892:23): [True: 249, False: 33]
  ------------------
  893|    249|    if (character == '_') {
  ------------------
  |  Branch (893:9): [True: 9, False: 240]
  ------------------
  894|      9|      next_upper = true;
  895|    240|    } else {
  896|    240|      if (next_upper) {
  ------------------
  |  Branch (896:11): [True: 42, False: 198]
  ------------------
  897|     42|        result.push_back(ToUpper(character));
  898|    198|      } else {
  899|    198|        result.push_back(ToLower(character));
  900|    198|      }
  901|    240|      next_upper = false;
  902|    240|    }
  903|    249|  }
  904|       |
  905|     33|  return result;
  906|     33|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17ToUpperEc:
   87|    388|char ToUpper(char ch) {
   88|    388|  return (ch >= 'a' && ch <= 'z') ? (ch - 'a' + 'A') : ch;
  ------------------
  |  Branch (88:11): [True: 305, False: 83]
  |  Branch (88:24): [True: 305, False: 0]
  ------------------
   89|    388|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17ToLowerEc:
   91|    397|char ToLower(char ch) {
   92|    397|  return (ch >= 'A' && ch <= 'Z') ? (ch - 'A' + 'a') : ch;
  ------------------
  |  Branch (92:11): [True: 377, False: 20]
  |  Branch (92:24): [True: 178, False: 199]
  ------------------
   93|    397|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_113PrefixRemover11MaybeRemoveENS0_20stringpiece_internal11StringPieceE:
  922|     33|  std::string MaybeRemove(StringPiece str) {
  923|       |    // We can't just lowercase and strip str and look for a prefix.
  924|       |    // We need to properly recognize the difference between:
  925|       |    //
  926|       |    //   enum Foo {
  927|       |    //     FOO_BAR_BAZ = 0;
  928|       |    //     FOO_BARBAZ = 1;
  929|       |    //   }
  930|       |    //
  931|       |    // This is acceptable (though perhaps not advisable) because even when
  932|       |    // we PascalCase, these two will still be distinct (BarBaz vs. Barbaz).
  933|     33|    size_t i, j;
  934|       |
  935|       |    // Skip past prefix_ in str if we can.
  936|    151|    for (i = 0, j = 0; i < str.size() && j < prefix_.size(); i++) {
  ------------------
  |  Branch (936:24): [True: 151, False: 0]
  |  Branch (936:42): [True: 130, False: 21]
  ------------------
  937|    130|      if (str[i] == '_') {
  ------------------
  |  Branch (937:11): [True: 4, False: 126]
  ------------------
  938|      4|        continue;
  939|      4|      }
  940|       |
  941|    126|      if (ascii_tolower(str[i]) != prefix_[j++]) {
  ------------------
  |  Branch (941:11): [True: 12, False: 114]
  ------------------
  942|     12|        return std::string(str);
  943|     12|      }
  944|    126|    }
  945|       |
  946|       |    // If we didn't make it through the prefix, we've failed to strip the
  947|       |    // prefix.
  948|     21|    if (j < prefix_.size()) {
  ------------------
  |  Branch (948:9): [True: 0, False: 21]
  ------------------
  949|      0|      return std::string(str);
  950|      0|    }
  951|       |
  952|       |    // Skip underscores between prefix and further characters.
  953|     42|    while (i < str.size() && str[i] == '_') {
  ------------------
  |  Branch (953:12): [True: 42, False: 0]
  |  Branch (953:30): [True: 21, False: 21]
  ------------------
  954|     21|      i++;
  955|     21|    }
  956|       |
  957|       |    // Enum label can't be the empty string.
  958|     21|    if (i == str.size()) {
  ------------------
  |  Branch (958:9): [True: 0, False: 21]
  ------------------
  959|      0|      return std::string(str);
  960|      0|    }
  961|       |
  962|       |    // We successfully stripped the prefix.
  963|     21|    str.remove_prefix(i);
  964|     21|    return std::string(str);
  965|     21|  }
_ZNK6google8protobuf6Symbol4typeEv:
  675|  4.31M|  Type type() const { return static_cast<Type>(ptr_->symbol_type_); }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_110ToJsonNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  119|      8|std::string ToJsonName(const std::string& input) {
  120|      8|  bool capitalize_next = false;
  121|      8|  std::string result;
  122|      8|  result.reserve(input.size());
  123|       |
  124|    140|  for (char character : input) {
  ------------------
  |  Branch (124:23): [True: 140, False: 8]
  ------------------
  125|    140|    if (character == '_') {
  ------------------
  |  Branch (125:9): [True: 10, False: 130]
  ------------------
  126|     10|      capitalize_next = true;
  127|    130|    } else if (capitalize_next) {
  ------------------
  |  Branch (127:16): [True: 10, False: 120]
  ------------------
  128|     10|      result.push_back(ToUpper(character));
  129|     10|      capitalize_next = false;
  130|    120|    } else {
  131|    120|      result.push_back(character);
  132|    120|    }
  133|    140|  }
  134|       |
  135|      8|  return result;
  136|      8|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_111ToCamelCaseERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb:
   95|    199|std::string ToCamelCase(const std::string& input, bool lower_first) {
   96|    199|  bool capitalize_next = !lower_first;
   97|    199|  std::string result;
   98|    199|  result.reserve(input.size());
   99|       |
  100|  3.31k|  for (char character : input) {
  ------------------
  |  Branch (100:23): [True: 3.31k, False: 199]
  ------------------
  101|  3.31k|    if (character == '_') {
  ------------------
  |  Branch (101:9): [True: 340, False: 2.97k]
  ------------------
  102|    340|      capitalize_next = true;
  103|  2.97k|    } else if (capitalize_next) {
  ------------------
  |  Branch (103:16): [True: 336, False: 2.64k]
  ------------------
  104|    336|      result.push_back(ToUpper(character));
  105|    336|      capitalize_next = false;
  106|  2.64k|    } else {
  107|  2.64k|      result.push_back(character);
  108|  2.64k|    }
  109|  3.31k|  }
  110|       |
  111|       |  // Lower-case the first letter.
  112|    199|  if (lower_first && !result.empty()) {
  ------------------
  |  Branch (112:7): [True: 199, False: 0]
  |  Branch (112:22): [True: 199, False: 0]
  ------------------
  113|    199|    result[0] = ToLower(result[0]);
  114|    199|  }
  115|       |
  116|    199|  return result;
  117|    199|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IbEEOT_:
  143|     78|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginIS9_EEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 0, False: 3]
  ------------------
  313|      3|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetIS9_EEiv:
  288|      6|  int BeginOffset() const {
  289|      6|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      6|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      6|    using PrevType =
  293|      6|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      6|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      6|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      6|                           : ends_.template Get<PrevType>();
  298|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetIcEERKiv:
  229|     18|  const ValueT<K>& Get() const {
  230|     18|    return static_cast<const Base<K>&>(payload_).value;
  231|     18|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetIS9_EEiv:
  301|      6|  int EndOffset() const {
  302|      6|    return ends_.template Get<U>();
  303|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISA_EERKiv:
  229|     21|  const ValueT<K>& Get() const {
  230|     21|    return static_cast<const Base<K>&>(payload_).value;
  231|     21|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4dataEv:
  343|     84|  char* data() const {
  344|     84|    return const_cast<char*>(reinterpret_cast<const char*>(this));
  345|     84|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginISA_EEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 3, False: 0]
  ------------------
  313|      0|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetISA_EEiv:
  288|      6|  int BeginOffset() const {
  289|      6|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      6|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      6|    using PrevType =
  293|      6|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      6|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      6|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      6|                           : ends_.template Get<PrevType>();
  298|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetISA_EEiv:
  301|      6|  int EndOffset() const {
  302|      6|    return ends_.template Get<U>();
  303|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISB_EERKiv:
  229|     21|  const ValueT<K>& Get() const {
  230|     21|    return static_cast<const Base<K>&>(payload_).value;
  231|     21|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginISB_EEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 0, False: 3]
  ------------------
  313|      3|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetISB_EEiv:
  288|      6|  int BeginOffset() const {
  289|      6|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      6|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      6|    using PrevType =
  293|      6|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      6|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      6|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      6|                           : ends_.template Get<PrevType>();
  298|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetISB_EEiv:
  301|      6|  int EndOffset() const {
  302|      6|    return ends_.template Get<U>();
  303|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISC_EERKiv:
  229|     21|  const ValueT<K>& Get() const {
  230|     21|    return static_cast<const Base<K>&>(payload_).value;
  231|     21|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginISC_EEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 3, False: 0]
  ------------------
  313|      0|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetISC_EEiv:
  288|      6|  int BeginOffset() const {
  289|      6|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      6|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      6|    using PrevType =
  293|      6|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      6|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      6|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      6|                           : ends_.template Get<PrevType>();
  298|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetISC_EEiv:
  301|      6|  int EndOffset() const {
  302|      6|    return ends_.template Get<U>();
  303|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISD_EERKiv:
  229|     21|  const ValueT<K>& Get() const {
  230|     21|    return static_cast<const Base<K>&>(payload_).value;
  231|     21|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginISD_EEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 2, False: 1]
  ------------------
  313|      1|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetISD_EEiv:
  288|      6|  int BeginOffset() const {
  289|      6|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      6|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      6|    using PrevType =
  293|      6|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      6|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      6|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      6|                           : ends_.template Get<PrevType>();
  298|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetISD_EEiv:
  301|      6|  int EndOffset() const {
  302|      6|    return ends_.template Get<U>();
  303|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISE_EERKiv:
  229|     21|  const ValueT<K>& Get() const {
  230|     21|    return static_cast<const Base<K>&>(payload_).value;
  231|     21|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginISE_EEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 3, False: 0]
  ------------------
  313|      0|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetISE_EEiv:
  288|      6|  int BeginOffset() const {
  289|      6|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      6|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      6|    using PrevType =
  293|      6|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      6|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      6|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      6|                           : ends_.template Get<PrevType>();
  298|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetISE_EEiv:
  301|      6|  int EndOffset() const {
  302|      6|    return ends_.template Get<U>();
  303|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISF_EERKiv:
  229|     21|  const ValueT<K>& Get() const {
  230|     21|    return static_cast<const Base<K>&>(payload_).value;
  231|     21|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginISF_EEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 3, False: 0]
  ------------------
  313|      0|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetISF_EEiv:
  288|      6|  int BeginOffset() const {
  289|      6|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      6|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      6|    using PrevType =
  293|      6|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      6|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      6|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      6|                           : ends_.template Get<PrevType>();
  298|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetISF_EEiv:
  301|      6|  int EndOffset() const {
  302|      6|    return ends_.template Get<U>();
  303|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISG_EERKiv:
  229|     21|  const ValueT<K>& Get() const {
  230|     21|    return static_cast<const Base<K>&>(payload_).value;
  231|     21|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginISG_EEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 3, False: 0]
  ------------------
  313|      0|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetISG_EEiv:
  288|      6|  int BeginOffset() const {
  289|      6|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      6|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      6|    using PrevType =
  293|      6|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      6|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      6|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      6|                           : ends_.template Get<PrevType>();
  298|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetISG_EEiv:
  301|      6|  int EndOffset() const {
  302|      6|    return ends_.template Get<U>();
  303|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISH_EERKiv:
  229|     21|  const ValueT<K>& Get() const {
  230|     21|    return static_cast<const Base<K>&>(payload_).value;
  231|     21|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginISH_EEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 3, False: 0]
  ------------------
  313|      0|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetISH_EEiv:
  288|      6|  int BeginOffset() const {
  289|      6|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      6|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      6|    using PrevType =
  293|      6|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      6|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      6|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      6|                           : ends_.template Get<PrevType>();
  298|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetISH_EEiv:
  301|      6|  int EndOffset() const {
  302|      6|    return ends_.template Get<U>();
  303|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISI_EERKiv:
  229|     21|  const ValueT<K>& Get() const {
  230|     21|    return static_cast<const Base<K>&>(payload_).value;
  231|     21|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginISI_EEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 3, False: 0]
  ------------------
  313|      0|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetISI_EEiv:
  288|      6|  int BeginOffset() const {
  289|      6|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      6|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      6|    using PrevType =
  293|      6|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      6|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      6|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      6|                           : ends_.template Get<PrevType>();
  298|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetISI_EEiv:
  301|      6|  int EndOffset() const {
  302|      6|    return ends_.template Get<U>();
  303|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISJ_EERKiv:
  229|     21|  const ValueT<K>& Get() const {
  230|     21|    return static_cast<const Base<K>&>(payload_).value;
  231|     21|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginISJ_EEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 3, False: 0]
  ------------------
  313|      0|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetISJ_EEiv:
  288|      6|  int BeginOffset() const {
  289|      6|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      6|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      6|    using PrevType =
  293|      6|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      6|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      6|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      6|                           : ends_.template Get<PrevType>();
  298|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetISJ_EEiv:
  301|      6|  int EndOffset() const {
  302|      6|    return ends_.template Get<U>();
  303|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISK_EERKiv:
  229|     21|  const ValueT<K>& Get() const {
  230|     21|    return static_cast<const Base<K>&>(payload_).value;
  231|     21|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginISK_EEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 1, False: 2]
  ------------------
  313|      2|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetISK_EEiv:
  288|      6|  int BeginOffset() const {
  289|      6|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      6|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      6|    using PrevType =
  293|      6|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      6|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      6|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      6|                           : ends_.template Get<PrevType>();
  298|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetISK_EEiv:
  301|      6|  int EndOffset() const {
  302|      6|    return ends_.template Get<U>();
  303|      6|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_17TypeMapINS1_4IntTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISL_EERKiv:
  229|     15|  const ValueT<K>& Get() const {
  230|     15|    return static_cast<const Base<K>&>(payload_).value;
  231|     15|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayINS0_19EnumValueDescriptorEEEvi:
  368|      6|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|      6|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|      6|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|      6|      static_assert(alignof(U) <= 8, "");
  374|      6|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|      6|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|      6|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayIS9_EEvi:
  368|    567|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|    567|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|    567|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|    567|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 567, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|    567|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|      0|      static_assert(alignof(U) <= 8, "");
  374|      0|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|    567|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|    567|      using TypeToUse =
  379|    567|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|    567|                                    char, U>::type;
  381|    567|      total_.template Get<TypeToUse>() += array_size;
  382|    567|    }
  383|    567|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE16FinalizePlanningIPNS0_14DescriptorPool6TablesEEEvRT_:
  512|      3|  void FinalizePlanning(Alloc& alloc) {
  513|      3|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  514|       |
  515|      3|    pointers_ = alloc->CreateFlatAlloc(total_)->Pointers();
  516|       |
  517|      3|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  518|      3|  }
descriptor.cc:_ZN6google8protobuf14DescriptorPool6Tables15CreateFlatAllocIJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEEEPNS0_12_GLOBAL__N_114FlatAllocationIJcSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKNSM_7TypeMapINSM_4IntTEJDpT_EEE:
 1826|      3|    const TypeMap<IntT, T...>& sizes) {
 1827|      3|  auto ends = CalculateEnds(sizes);
 1828|      3|  using FlatAlloc = internal::FlatAllocator::Allocation;
 1829|       |
 1830|      3|  int last_end = ends.template Get<
 1831|      3|      typename std::tuple_element<sizeof...(T) - 1, std::tuple<T...>>::type>();
 1832|      3|  size_t total_size =
 1833|      3|      last_end + RoundUpTo<FlatAlloc::kMaxAlign>(sizeof(FlatAlloc));
 1834|      3|  char* data = static_cast<char*>(::operator new(total_size));
 1835|      3|  auto* res = ::new (data) FlatAlloc(ends);
 1836|      3|  flat_allocs_.emplace_back(res);
 1837|       |
 1838|      3|  return res;
 1839|      3|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_113CalculateEndsIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEEENS1_7TypeMapINS1_4IntTEJDpT_EEERKSP_:
  351|      3|TypeMap<IntT, T...> CalculateEnds(const TypeMap<IntT, T...>& sizes) {
  352|      3|  int total = 0;
  353|      3|  TypeMap<IntT, T...> out;
  354|      3|  Fold({(out.template Get<T>() = total +=
  355|      3|         sizeof(T) * sizes.template Get<T>())...});
  356|      3|  return out;
  357|      3|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRiEEOT_:
  143|     78|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEEC2ERKNS1_7TypeMapINS1_4IntTEJcS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEE:
  255|      3|  FlatAllocation(const TypeMap<IntT, T...>& ends) : ends_(ends) {
  256|       |    // The arrays start just after FlatAllocation, so adjust the ends.
  257|      3|    Fold({(ends_.template Get<T>() +=
  258|      3|           RoundUpTo<kMaxAlign>(sizeof(FlatAllocation)))...});
  259|      3|    Fold({Init<T>()...});
  260|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitIcEEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      0|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|      0|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 0, False: 0]
  ------------------
  329|      0|      ::new (p) U{};
  330|      0|    }
  331|      0|    return true;
  332|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitIS9_EEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      3|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|    992|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 989, False: 3]
  ------------------
  329|    989|      ::new (p) U{};
  330|    989|    }
  331|      3|    return true;
  332|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitISA_EEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      3|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|      3|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 0, False: 3]
  ------------------
  329|      0|      ::new (p) U{};
  330|      0|    }
  331|      3|    return true;
  332|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitISB_EEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      3|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|      6|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 3, False: 3]
  ------------------
  329|      3|      ::new (p) U{};
  330|      3|    }
  331|      3|    return true;
  332|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitISC_EEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      3|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|      3|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 0, False: 3]
  ------------------
  329|      0|      ::new (p) U{};
  330|      0|    }
  331|      3|    return true;
  332|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitISD_EEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      3|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|      7|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 4, False: 3]
  ------------------
  329|      4|      ::new (p) U{};
  330|      4|    }
  331|      3|    return true;
  332|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitISE_EEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      3|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|      3|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 0, False: 3]
  ------------------
  329|      0|      ::new (p) U{};
  330|      0|    }
  331|      3|    return true;
  332|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitISF_EEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      3|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|      3|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 0, False: 3]
  ------------------
  329|      0|      ::new (p) U{};
  330|      0|    }
  331|      3|    return true;
  332|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitISG_EEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      3|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|      3|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 0, False: 3]
  ------------------
  329|      0|      ::new (p) U{};
  330|      0|    }
  331|      3|    return true;
  332|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitISH_EEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      3|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|      3|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 0, False: 3]
  ------------------
  329|      0|      ::new (p) U{};
  330|      0|    }
  331|      3|    return true;
  332|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitISI_EEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      3|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|      3|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 0, False: 3]
  ------------------
  329|      0|      ::new (p) U{};
  330|      0|    }
  331|      3|    return true;
  332|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitISJ_EEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      3|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|      3|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 0, False: 3]
  ------------------
  329|      0|      ::new (p) U{};
  330|      0|    }
  331|      3|    return true;
  332|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE4InitISK_EEbv:
  324|      3|  bool Init() {
  325|       |    // Skip for the `char` block. No need to zero initialize it.
  326|      3|    if (std::is_same<U, char>::value) return true;
  ------------------
  |  Branch (326:9): [Folded - Ignored]
  ------------------
  327|      3|    for (char *p = data() + BeginOffset<U>(), *end = data() + EndOffset<U>();
  328|      5|         p != end; p += sizeof(U)) {
  ------------------
  |  Branch (328:10): [True: 2, False: 3]
  ------------------
  329|      2|      ::new (p) U{};
  330|      2|    }
  331|      3|    return true;
  332|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE8PointersEv:
  271|      3|  TypeMap<PointerT, T...> Pointers() const {
  272|      3|    TypeMap<PointerT, T...> out;
  273|      3|    Fold({(out.template Get<T>() = Begin<T>())...});
  274|      3|    return out;
  275|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE5BeginIcEEPT_v:
  310|      3|  U* Begin() const {
  311|      3|    int begin = BeginOffset<U>(), end = EndOffset<U>();
  312|      3|    if (begin == end) return nullptr;
  ------------------
  |  Branch (312:9): [True: 0, False: 3]
  ------------------
  313|      3|    return reinterpret_cast<U*>(data() + begin);
  314|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE11BeginOffsetIcEEiv:
  288|      3|  int BeginOffset() const {
  289|      3|    constexpr int type_index = FindTypeIndex<U, T...>();
  290|       |    // Avoid a negative value here to keep it compiling when type_index == 0
  291|      3|    constexpr int prev_type_index = type_index == 0 ? 0 : type_index - 1;
  ------------------
  |  Branch (291:37): [Folded - Ignored]
  ------------------
  292|      3|    using PrevType =
  293|      3|        typename std::tuple_element<prev_type_index, std::tuple<T...>>::type;
  294|       |    // Ensure the types are properly aligned.
  295|      3|    static_assert(EffectiveAlignof<PrevType>() >= EffectiveAlignof<U>(), "");
  296|      3|    return type_index == 0 ? RoundUpTo<kMaxAlign>(sizeof(FlatAllocation))
  ------------------
  |  Branch (296:12): [Folded - Ignored]
  ------------------
  297|      3|                           : ends_.template Get<PrevType>();
  298|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_114FlatAllocationIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9EndOffsetIcEEiv:
  301|      3|  int EndOffset() const {
  302|      3|    return ends_.template Get<U>();
  303|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetIcEERPT_v:
  224|    581|  ValueT<K>& Get() {
  225|    581|    return static_cast<Base<K>&>(payload_).value;
  226|    581|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPcEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISB_EERPT_v:
  224|      3|  ValueT<K>& Get() {
  225|      3|    return static_cast<Base<K>&>(payload_).value;
  226|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPNS0_14SourceCodeInfoEEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISC_EERPT_v:
  224|      6|  ValueT<K>& Get() {
  225|      6|    return static_cast<Base<K>&>(payload_).value;
  226|      6|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPNS0_20FileDescriptorTablesEEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISD_EERPT_v:
  224|      3|  ValueT<K>& Get() {
  225|      3|    return static_cast<Base<K>&>(payload_).value;
  226|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPNS0_14MessageOptionsEEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISE_EERPT_v:
  224|      7|  ValueT<K>& Get() {
  225|      7|    return static_cast<Base<K>&>(payload_).value;
  226|      7|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPNS0_12FieldOptionsEEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISF_EERPT_v:
  224|      3|  ValueT<K>& Get() {
  225|      3|    return static_cast<Base<K>&>(payload_).value;
  226|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPNS0_11EnumOptionsEEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISG_EERPT_v:
  224|      3|  ValueT<K>& Get() {
  225|      3|    return static_cast<Base<K>&>(payload_).value;
  226|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPNS0_16EnumValueOptionsEEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISH_EERPT_v:
  224|      3|  ValueT<K>& Get() {
  225|      3|    return static_cast<Base<K>&>(payload_).value;
  226|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPNS0_21ExtensionRangeOptionsEEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISI_EERPT_v:
  224|      3|  ValueT<K>& Get() {
  225|      3|    return static_cast<Base<K>&>(payload_).value;
  226|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPNS0_12OneofOptionsEEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISJ_EERPT_v:
  224|      3|  ValueT<K>& Get() {
  225|      3|    return static_cast<Base<K>&>(payload_).value;
  226|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPNS0_14ServiceOptionsEEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISK_EERPT_v:
  224|      3|  ValueT<K>& Get() {
  225|      3|    return static_cast<Base<K>&>(payload_).value;
  226|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPNS0_13MethodOptionsEEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_17TypeMapINS1_8PointerTEJcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE3GetISL_EERPT_v:
  224|      5|  ValueT<K>& Get() {
  225|      5|    return static_cast<Base<K>&>(payload_).value;
  226|      5|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_115ExpressionEaterC2IRPNS0_11FileOptionsEEEOT_:
  143|      3|  ExpressionEater(T&&) {}  // NOLINT
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayINS0_19EnumValueDescriptorEEEPT_i:
  386|      6|  U* AllocateArray(int array_size) {
  387|      6|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|      6|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|      6|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|      6|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|      6|    int& used = used_.template Get<TypeToUse>();
  395|      6|    U* res = reinterpret_cast<U*>(data + used);
  396|      6|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|      6|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|      6|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|      6|    return res;
  399|      6|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayINS0_14FileDescriptorEEEvi:
  368|      3|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|      3|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|      3|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|      3|      static_assert(alignof(U) <= 8, "");
  374|      3|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|      3|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayINS0_14EnumDescriptorEEEvi:
  368|     70|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|     70|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|     70|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|     70|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 70, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|     70|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|     70|      static_assert(alignof(U) <= 8, "");
  374|     70|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|     70|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|     70|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayINS0_10DescriptorEEEvi:
  368|     70|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|     70|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|     70|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|     70|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 70, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|     70|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|     70|      static_assert(alignof(U) <= 8, "");
  374|     70|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|     70|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|     70|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE9PlanArrayINS0_10Descriptor14ExtensionRangeEEEvi:
  368|     67|  void PlanArray(int array_size) {
  369|       |    // We can't call PlanArray after FinalizePlanning has been called.
  370|     67|    GOOGLE_CHECK(!has_allocated());
  ------------------
  |  |  152|     67|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|     67|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 67, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  371|     67|    if (std::is_trivially_destructible<U>::value) {
  ------------------
  |  Branch (371:9): [Folded - Ignored]
  ------------------
  372|       |      // Trivial types are aligned to 8 bytes.
  373|     67|      static_assert(alignof(U) <= 8, "");
  374|     67|      total_.template Get<char>() += RoundUpTo<8>(array_size * sizeof(U));
  375|     67|    } else {
  376|       |      // Since we can't use `if constexpr`, just make the expression compile
  377|       |      // when this path is not taken.
  378|      0|      using TypeToUse =
  379|      0|          typename std::conditional<std::is_trivially_destructible<U>::value,
  380|      0|                                    char, U>::type;
  381|      0|      total_.template Get<TypeToUse>() += array_size;
  382|      0|    }
  383|     67|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayINS0_14EnumDescriptorEEEPT_i:
  386|     70|  U* AllocateArray(int array_size) {
  387|     70|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|     70|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|     70|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|     70|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|     70|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 70, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|     70|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|     70|    int& used = used_.template Get<TypeToUse>();
  395|     70|    U* res = reinterpret_cast<U*>(data + used);
  396|     70|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|     70|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|     70|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|     70|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     70|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 70, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|     70|    return res;
  399|     70|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayINS0_10DescriptorEEEPT_i:
  386|     70|  U* AllocateArray(int array_size) {
  387|     70|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|     70|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|     70|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|     70|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|     70|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 70, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|     70|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|     70|    int& used = used_.template Get<TypeToUse>();
  395|     70|    U* res = reinterpret_cast<U*>(data + used);
  396|     70|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|     70|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|     70|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|     70|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     70|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 70, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|     70|    return res;
  399|     70|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayINS0_10Descriptor14ExtensionRangeEEEPT_i:
  386|     67|  U* AllocateArray(int array_size) {
  387|     67|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|     67|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|     67|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|     67|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|     67|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 67, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|     67|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|     67|    int& used = used_.template Get<TypeToUse>();
  395|     67|    U* res = reinterpret_cast<U*>(data + used);
  396|     67|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|     67|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|     67|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|     67|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     67|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 67, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|     67|    return res;
  399|     67|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayINS0_14FileDescriptorEEEPT_i:
  386|      3|  U* AllocateArray(int array_size) {
  387|      3|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|      3|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|      3|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|      3|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|      3|    int& used = used_.template Get<TypeToUse>();
  395|      3|    U* res = reinterpret_cast<U*>(data + used);
  396|      3|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|      3|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|      3|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|      3|    return res;
  399|      3|  }
_ZN6google8protobuf14DescriptorPool6Tables8AllocateINS0_6Symbol10SubpackageEEEPT_v:
 1809|      1|Type* DescriptorPool::Tables::Allocate() {
 1810|      1|  static_assert(std::is_trivially_destructible<Type>::value, "");
 1811|      1|  static_assert(alignof(Type) <= 8, "");
 1812|      1|  return ::new (AllocateBytes(sizeof(Type))) Type{};
 1813|      1|}
_ZN6google8protobuf17DescriptorBuilder19AllocateOptionsImplINS0_14FileDescriptorEEEvRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_RKNT_11OptionsTypeEPSD_RKNS4_6vectorIiNS8_IiEEEESC_RNS0_8internal13FlatAllocatorE:
 4762|      2|    const std::string& option_name, internal::FlatAllocator& alloc) {
 4763|      2|  auto* options = alloc.AllocateArray<typename DescriptorT::OptionsType>(1);
 4764|       |
 4765|      2|  if (!orig_options.IsInitialized()) {
  ------------------
  |  Branch (4765:7): [True: 0, False: 2]
  ------------------
 4766|      0|    AddError(name_scope + "." + element_name, orig_options,
 4767|      0|             DescriptorPool::ErrorCollector::OPTION_NAME,
 4768|      0|             "Uninterpreted option is missing name or value.");
 4769|      0|    return;
 4770|      0|  }
 4771|       |
 4772|       |  // Avoid using MergeFrom()/CopyFrom() in this class to make it -fno-rtti
 4773|       |  // friendly. Without RTTI, MergeFrom() and CopyFrom() will fallback to the
 4774|       |  // reflection based method, which requires the Descriptor. However, we are in
 4775|       |  // the middle of building the descriptors, thus the deadlock.
 4776|      2|  options->ParseFromString(orig_options.SerializeAsString());
 4777|      2|  descriptor->options_ = options;
 4778|       |
 4779|       |  // Don't add to options_to_interpret_ unless there were uninterpreted
 4780|       |  // options.  This not only avoids unnecessary work, but prevents a
 4781|       |  // bootstrapping problem when building descriptors for descriptor.proto.
 4782|       |  // descriptor.proto does not contain any uninterpreted options, but
 4783|       |  // attempting to interpret options anyway will cause
 4784|       |  // OptionsType::GetDescriptor() to be called which may then deadlock since
 4785|       |  // we're still trying to build it.
 4786|      2|  if (options->uninterpreted_option_size() > 0) {
  ------------------
  |  Branch (4786:7): [True: 0, False: 2]
  ------------------
 4787|      0|    options_to_interpret_.push_back(OptionsToInterpret(
 4788|      0|        name_scope, element_name, options_path, &orig_options, options));
 4789|      0|  }
 4790|       |
 4791|       |  // If the custom option is in unknown fields, no need to interpret it.
 4792|       |  // Remove the dependency file from unused_dependency.
 4793|      2|  const UnknownFieldSet& unknown_fields = orig_options.unknown_fields();
 4794|      2|  if (!unknown_fields.empty()) {
  ------------------
  |  Branch (4794:7): [True: 0, False: 2]
  ------------------
 4795|       |    // Can not use options->GetDescriptor() which may case deadlock.
 4796|      0|    Symbol msg_symbol = tables_->FindSymbol(option_name);
 4797|      0|    if (msg_symbol.type() == Symbol::MESSAGE) {
  ------------------
  |  Branch (4797:9): [True: 0, False: 0]
  ------------------
 4798|      0|      for (int i = 0; i < unknown_fields.field_count(); ++i) {
  ------------------
  |  Branch (4798:23): [True: 0, False: 0]
  ------------------
 4799|      0|        assert_mutex_held(pool_);
 4800|      0|        const FieldDescriptor* field =
 4801|      0|            pool_->InternalFindExtensionByNumberNoLock(
 4802|      0|                msg_symbol.descriptor(), unknown_fields.field(i).number());
 4803|      0|        if (field) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 0]
  ------------------
 4804|      0|          unused_dependency_.erase(field->file());
 4805|      0|        }
 4806|      0|      }
 4807|      0|    }
 4808|      0|  }
 4809|      2|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayISK_EEPT_i:
  386|      2|  U* AllocateArray(int array_size) {
  387|      2|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|      2|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|      2|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|      2|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      2|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 2, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|      2|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|      2|    int& used = used_.template Get<TypeToUse>();
  395|      2|    U* res = reinterpret_cast<U*>(data + used);
  396|      2|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|      2|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|      2|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|      2|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      2|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|      2|    return res;
  399|      2|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedEv:
  520|      3|  void ExpectConsumed() const {
  521|       |    // We verify that we consumed all the memory requested if there was no
  522|       |    // error in processing.
  523|      3|    Fold({ExpectConsumed<T>()...});
  524|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedIcEEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedIS9_EEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedISA_EEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedISB_EEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedISC_EEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedISD_EEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedISE_EEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedISF_EEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedISG_EEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedISH_EEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedISI_EEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedISJ_EEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZNK6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE14ExpectConsumedISK_EEbv:
  552|      3|  bool ExpectConsumed() const {
  553|      3|    GOOGLE_CHECK_EQ(total_.template Get<U>(), used_.template Get<U>());
  ------------------
  |  |  154|      3|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  554|      3|    return true;
  555|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayISB_EEPT_i:
  386|      3|  U* AllocateArray(int array_size) {
  387|      3|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|      3|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|      3|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|      3|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|      3|    int& used = used_.template Get<TypeToUse>();
  395|      3|    U* res = reinterpret_cast<U*>(data + used);
  396|      3|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|      3|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|      3|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|      3|    return res;
  399|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE15AllocateStringsIJRKS9_EEEPSN_DpOT_:
  402|      6|  const std::string* AllocateStrings(In&&... in) {
  403|      6|    std::string* strings = AllocateArray<std::string>(sizeof...(in));
  404|      6|    std::string* res = strings;
  405|      6|    Fold({(*strings++ = std::string(std::forward<In>(in)))...});
  406|      6|    return res;
  407|      6|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayIPKNS0_14FileDescriptorEEEPT_i:
  386|      3|  U* AllocateArray(int array_size) {
  387|      3|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|      3|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|      3|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|      3|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|      3|    int& used = used_.template Get<TypeToUse>();
  395|      3|    U* res = reinterpret_cast<U*>(data + used);
  396|      3|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|      3|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|      3|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|      3|    return res;
  399|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayIiEEPT_i:
  386|      6|  U* AllocateArray(int array_size) {
  387|      6|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|      6|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|      6|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|      6|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|      6|    int& used = used_.template Get<TypeToUse>();
  395|      6|    U* res = reinterpret_cast<U*>(data + used);
  396|      6|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|      6|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|      6|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|      6|    return res;
  399|      6|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayINS0_17ServiceDescriptorEEEPT_i:
  386|      3|  U* AllocateArray(int array_size) {
  387|      3|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|      3|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|      3|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|      3|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|      3|    int& used = used_.template Get<TypeToUse>();
  395|      3|    U* res = reinterpret_cast<U*>(data + used);
  396|      3|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|      3|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|      3|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|      3|    return res;
  399|      3|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayINS0_15FieldDescriptorEEEPT_i:
  386|    137|  U* AllocateArray(int array_size) {
  387|    137|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|    137|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|    137|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|    137|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|    137|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 137, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|    137|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|    137|    int& used = used_.template Get<TypeToUse>();
  395|    137|    U* res = reinterpret_cast<U*>(data + used);
  396|    137|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|    137|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|    137|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|    137|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|    137|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 137, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|    137|    return res;
  399|    137|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE15AllocateStringsIJRKS9_S9_EEEPSN_DpOT_:
  402|    197|  const std::string* AllocateStrings(In&&... in) {
  403|    197|    std::string* strings = AllocateArray<std::string>(sizeof...(in));
  404|    197|    std::string* res = strings;
  405|    197|    Fold({(*strings++ = std::string(std::forward<In>(in)))...});
  406|    197|    return res;
  407|    197|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayINS0_15OneofDescriptorEEEPT_i:
  386|     67|  U* AllocateArray(int array_size) {
  387|     67|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|     67|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|     67|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|     67|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|     67|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 67, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|     67|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|     67|    int& used = used_.template Get<TypeToUse>();
  395|     67|    U* res = reinterpret_cast<U*>(data + used);
  396|     67|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|     67|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|     67|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|     67|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     67|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 67, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|     67|    return res;
  399|     67|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayINS0_10Descriptor13ReservedRangeEEEPT_i:
  386|     67|  U* AllocateArray(int array_size) {
  387|     67|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|     67|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|     67|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|     67|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|     67|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 67, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|     67|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|     67|    int& used = used_.template Get<TypeToUse>();
  395|     67|    U* res = reinterpret_cast<U*>(data + used);
  396|     67|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|     67|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|     67|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|     67|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     67|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 67, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|     67|    return res;
  399|     67|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayIPKS9_EEPT_i:
  386|     73|  U* AllocateArray(int array_size) {
  387|     73|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|     73|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|     73|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|     73|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|     73|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 73, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|     73|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|     73|    int& used = used_.template Get<TypeToUse>();
  395|     73|    U* res = reinterpret_cast<U*>(data + used);
  396|     73|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|     73|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|     73|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|     73|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     73|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 73, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|     73|    return res;
  399|     73|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE18AllocateFieldNamesERKS9_SN_PSM_:
  456|    275|                                      const std::string* opt_json_name) {
  457|    275|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|    275|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|    275|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 275, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  458|       |
  459|    275|    std::string full_name =
  460|    275|        scope.empty() ? name : StrCat(scope, ".", name);
  ------------------
  |  Branch (460:9): [True: 0, False: 275]
  ------------------
  461|       |
  462|       |    // Fast path for snake_case names, which follow the style guide.
  463|    275|    if (opt_json_name == nullptr) {
  ------------------
  |  Branch (463:9): [True: 275, False: 0]
  ------------------
  464|    275|      switch (GetFieldNameCase(name)) {
  465|     80|        case FieldNameCase::kAllLower:
  ------------------
  |  Branch (465:9): [True: 80, False: 195]
  ------------------
  466|       |          // Case 1: they are all the same.
  467|     80|          return {AllocateStrings(name, std::move(full_name)), 0, 0, 0};
  468|    191|        case FieldNameCase::kSnakeCase:
  ------------------
  |  Branch (468:9): [True: 191, False: 84]
  ------------------
  469|       |          // Case 2: name==lower, camel==json
  470|    191|          return {AllocateStrings(name, std::move(full_name),
  471|    191|                                  ToCamelCase(name, /* lower_first = */ true)),
  472|    191|                  0, 2, 2};
  473|      4|        default:
  ------------------
  |  Branch (473:9): [True: 4, False: 271]
  ------------------
  474|      4|          break;
  475|    275|      }
  476|    275|    }
  477|       |
  478|      4|    std::vector<std::string> names;
  479|      4|    names.push_back(name);
  480|      4|    names.push_back(std::move(full_name));
  481|       |
  482|      4|    const auto push_name = [&](std::string new_name) {
  483|      4|      for (size_t i = 0; i < names.size(); ++i) {
  484|       |        // Do not compare the full_name. It is unlikely to match, except in
  485|       |        // custom json_name. We are not taking this into account in
  486|       |        // PlanFieldNames so better to not try it.
  487|      4|        if (i == 1) continue;
  488|      4|        if (names[i] == new_name) return i;
  489|      4|      }
  490|      4|      names.push_back(std::move(new_name));
  491|      4|      return names.size() - 1;
  492|      4|    };
  493|       |
  494|      4|    FieldNamesResult result{nullptr, 0, 0, 0};
  495|       |
  496|      4|    std::string lowercase_name = name;
  497|      4|    LowerString(&lowercase_name);
  498|      4|    result.lowercase_index = push_name(std::move(lowercase_name));
  499|      4|    result.camelcase_index =
  500|      4|        push_name(ToCamelCase(name, /* lower_first = */ true));
  501|      4|    result.json_index =
  502|      4|        push_name(opt_json_name != nullptr ? *opt_json_name : ToJsonName(name));
  ------------------
  |  Branch (502:19): [True: 0, False: 4]
  ------------------
  503|       |
  504|      4|    std::string* all_names = AllocateArray<std::string>(names.size());
  505|      4|    result.array = all_names;
  506|      4|    std::move(names.begin(), names.end(), all_names);
  507|       |
  508|      4|    return result;
  509|    275|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE15AllocateStringsIJRKS9_S9_S9_EEEPSN_DpOT_:
  402|    191|  const std::string* AllocateStrings(In&&... in) {
  403|    191|    std::string* strings = AllocateArray<std::string>(sizeof...(in));
  404|    191|    std::string* res = strings;
  405|    191|    Fold({(*strings++ = std::string(std::forward<In>(in)))...});
  406|    191|    return res;
  407|    191|  }
descriptor.cc:_ZZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE18AllocateFieldNamesERKS9_SN_PSM_ENKUlS9_E_clES9_:
  482|     12|    const auto push_name = [&](std::string new_name) {
  483|     44|      for (size_t i = 0; i < names.size(); ++i) {
  ------------------
  |  Branch (483:26): [True: 36, False: 8]
  ------------------
  484|       |        // Do not compare the full_name. It is unlikely to match, except in
  485|       |        // custom json_name. We are not taking this into account in
  486|       |        // PlanFieldNames so better to not try it.
  487|     36|        if (i == 1) continue;
  ------------------
  |  Branch (487:13): [True: 12, False: 24]
  ------------------
  488|     24|        if (names[i] == new_name) return i;
  ------------------
  |  Branch (488:13): [True: 4, False: 20]
  ------------------
  489|     24|      }
  490|      8|      names.push_back(std::move(new_name));
  491|      8|      return names.size() - 1;
  492|     12|    };
_ZN6google8protobuf17DescriptorBuilder15AllocateOptionsINS0_15FieldDescriptorEEEvRKNT_11OptionsTypeEPS4_iRKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERNS0_8internal13FlatAllocatorE:
 4736|      4|    const std::string& option_name, internal::FlatAllocator& alloc) {
 4737|      4|  std::vector<int> options_path;
 4738|      4|  descriptor->GetLocationPath(&options_path);
 4739|      4|  options_path.push_back(options_field_tag);
 4740|      4|  AllocateOptionsImpl(descriptor->full_name(), descriptor->full_name(),
 4741|      4|                      orig_options, descriptor, options_path, option_name,
 4742|      4|                      alloc);
 4743|      4|}
_ZN6google8protobuf17DescriptorBuilder19AllocateOptionsImplINS0_15FieldDescriptorEEEvRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_RKNT_11OptionsTypeEPSD_RKNS4_6vectorIiNS8_IiEEEESC_RNS0_8internal13FlatAllocatorE:
 4762|      4|    const std::string& option_name, internal::FlatAllocator& alloc) {
 4763|      4|  auto* options = alloc.AllocateArray<typename DescriptorT::OptionsType>(1);
 4764|       |
 4765|      4|  if (!orig_options.IsInitialized()) {
  ------------------
  |  Branch (4765:7): [True: 0, False: 4]
  ------------------
 4766|      0|    AddError(name_scope + "." + element_name, orig_options,
 4767|      0|             DescriptorPool::ErrorCollector::OPTION_NAME,
 4768|      0|             "Uninterpreted option is missing name or value.");
 4769|      0|    return;
 4770|      0|  }
 4771|       |
 4772|       |  // Avoid using MergeFrom()/CopyFrom() in this class to make it -fno-rtti
 4773|       |  // friendly. Without RTTI, MergeFrom() and CopyFrom() will fallback to the
 4774|       |  // reflection based method, which requires the Descriptor. However, we are in
 4775|       |  // the middle of building the descriptors, thus the deadlock.
 4776|      4|  options->ParseFromString(orig_options.SerializeAsString());
 4777|      4|  descriptor->options_ = options;
 4778|       |
 4779|       |  // Don't add to options_to_interpret_ unless there were uninterpreted
 4780|       |  // options.  This not only avoids unnecessary work, but prevents a
 4781|       |  // bootstrapping problem when building descriptors for descriptor.proto.
 4782|       |  // descriptor.proto does not contain any uninterpreted options, but
 4783|       |  // attempting to interpret options anyway will cause
 4784|       |  // OptionsType::GetDescriptor() to be called which may then deadlock since
 4785|       |  // we're still trying to build it.
 4786|      4|  if (options->uninterpreted_option_size() > 0) {
  ------------------
  |  Branch (4786:7): [True: 0, False: 4]
  ------------------
 4787|      0|    options_to_interpret_.push_back(OptionsToInterpret(
 4788|      0|        name_scope, element_name, options_path, &orig_options, options));
 4789|      0|  }
 4790|       |
 4791|       |  // If the custom option is in unknown fields, no need to interpret it.
 4792|       |  // Remove the dependency file from unused_dependency.
 4793|      4|  const UnknownFieldSet& unknown_fields = orig_options.unknown_fields();
 4794|      4|  if (!unknown_fields.empty()) {
  ------------------
  |  Branch (4794:7): [True: 0, False: 4]
  ------------------
 4795|       |    // Can not use options->GetDescriptor() which may case deadlock.
 4796|      0|    Symbol msg_symbol = tables_->FindSymbol(option_name);
 4797|      0|    if (msg_symbol.type() == Symbol::MESSAGE) {
  ------------------
  |  Branch (4797:9): [True: 0, False: 0]
  ------------------
 4798|      0|      for (int i = 0; i < unknown_fields.field_count(); ++i) {
  ------------------
  |  Branch (4798:23): [True: 0, False: 0]
  ------------------
 4799|      0|        assert_mutex_held(pool_);
 4800|      0|        const FieldDescriptor* field =
 4801|      0|            pool_->InternalFindExtensionByNumberNoLock(
 4802|      0|                msg_symbol.descriptor(), unknown_fields.field(i).number());
 4803|      0|        if (field) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 0]
  ------------------
 4804|      0|          unused_dependency_.erase(field->file());
 4805|      0|        }
 4806|      0|      }
 4807|      0|    }
 4808|      0|  }
 4809|      4|}
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayISD_EEPT_i:
  386|      4|  U* AllocateArray(int array_size) {
  387|      4|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|      4|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|      4|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|      4|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      4|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 4, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|      4|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|      4|    int& used = used_.template Get<TypeToUse>();
  395|      4|    U* res = reinterpret_cast<U*>(data + used);
  396|      4|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|      4|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|      4|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|      4|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      4|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 4, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|      4|    return res;
  399|      4|  }
descriptor.cc:_ZN6google8protobuf12_GLOBAL__N_117FlatAllocatorImplIJcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_14SourceCodeInfoENS0_20FileDescriptorTablesENS0_14MessageOptionsENS0_12FieldOptionsENS0_11EnumOptionsENS0_16EnumValueOptionsENS0_21ExtensionRangeOptionsENS0_12OneofOptionsENS0_14ServiceOptionsENS0_13MethodOptionsENS0_11FileOptionsEEE13AllocateArrayINS0_14EnumDescriptor13ReservedRangeEEEPT_i:
  386|      6|  U* AllocateArray(int array_size) {
  387|      6|    constexpr bool trivial = std::is_trivially_destructible<U>::value;
  388|      6|    using TypeToUse = typename std::conditional<trivial, char, U>::type;
  389|       |
  390|       |    // We can only allocate after FinalizePlanning has been called.
  391|      6|    GOOGLE_CHECK(has_allocated());
  ------------------
  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|       |
  393|      6|    TypeToUse*& data = pointers_.template Get<TypeToUse>();
  394|      6|    int& used = used_.template Get<TypeToUse>();
  395|      6|    U* res = reinterpret_cast<U*>(data + used);
  396|      6|    used += trivial ? RoundUpTo<8>(array_size * sizeof(U)) : array_size;
  ------------------
  |  Branch (396:13): [Folded - Ignored]
  ------------------
  397|      6|    GOOGLE_CHECK_LE(used, total_.template Get<TypeToUse>());
  ------------------
  |  |  157|      6|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  398|      6|    return res;
  399|      6|  }

_ZN6google8protobuf14DescriptorPool34InternalSetLazilyBuildDependenciesEv:
 1967|      1|  void InternalSetLazilyBuildDependencies() {
 1968|      1|    lazily_build_dependencies_ = true;
 1969|       |    // This needs to be set when lazily building dependencies, as it breaks
 1970|       |    // dependency checking.
 1971|      1|    InternalDontEnforceDependencies();
 1972|      1|  }
_ZNK6google8protobuf10Descriptor4nameEv:
 2091|    268|  inline const std::string& CLASS::name() const { return all_names_[0]; } \
_ZNK6google8protobuf10Descriptor9full_nameEv:
 2092|   616k|  inline const std::string& CLASS::full_name() const { return all_names_[1]; }
_ZNK6google8protobuf10Descriptor15containing_typeEv:
 2083|    211|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf10Descriptor16oneof_decl_countEv:
 2083|    243|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf10Descriptor17nested_type_countEv:
 2083|    146|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf10Descriptor15enum_type_countEv:
 2083|    146|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf10Descriptor10oneof_declEi:
 2096|     98|  inline TYPE CLASS::FIELD(int index) const { return FIELD##s_ + index; }
_ZNK6google8protobuf10Descriptor11nested_typeEi:
 2096|      6|  inline TYPE CLASS::FIELD(int index) const { return FIELD##s_ + index; }
_ZNK6google8protobuf10Descriptor9enum_typeEi:
 2096|      6|  inline TYPE CLASS::FIELD(int index) const { return FIELD##s_ + index; }
_ZNK6google8protobuf10Descriptor21extension_range_countEv:
 2083|    482|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf10Descriptor15extension_countEv:
 2083|     67|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf10Descriptor15extension_rangeEi:
 2096|     55|  inline TYPE CLASS::FIELD(int index) const { return FIELD##s_ + index; }
_ZNK6google8protobuf10Descriptor20reserved_range_countEv:
 2083|    349|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf10Descriptor14reserved_rangeEi:
 2096|     65|  inline TYPE CLASS::FIELD(int index) const { return FIELD##s_ + index; }
_ZNK6google8protobuf15FieldDescriptor4nameEv:
 2091|   617k|  inline const std::string& CLASS::name() const { return all_names_[0]; } \
_ZNK6google8protobuf15FieldDescriptor9full_nameEv:
 2092|  1.20k|  inline const std::string& CLASS::full_name() const { return all_names_[1]; }
_ZNK6google8protobuf15FieldDescriptor6numberEv:
 2083|  2.46M|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf15FieldDescriptor12is_extensionEv:
 2083|  5.65M|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf15FieldDescriptor15containing_typeEv:
 2083|  9.27M|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf15FieldDescriptor7optionsEv:
 2099|  1.94M|  inline const TYPE& CLASS::options() const { return *options_; }
_ZNK6google8protobuf15FieldDescriptor17has_default_valueEv:
 2083|     99|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf15OneofDescriptor4nameEv:
 2091|     44|  inline const std::string& CLASS::name() const { return all_names_[0]; } \
_ZNK6google8protobuf15OneofDescriptor9full_nameEv:
 2092|     44|  inline const std::string& CLASS::full_name() const { return all_names_[1]; }
_ZNK6google8protobuf15OneofDescriptor15containing_typeEv:
 2083|     33|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf14EnumDescriptor4nameEv:
 2091|     63|  inline const std::string& CLASS::name() const { return all_names_[0]; } \
_ZNK6google8protobuf14EnumDescriptor9full_nameEv:
 2092|    100|  inline const std::string& CLASS::full_name() const { return all_names_[1]; }
_ZNK6google8protobuf14EnumDescriptor4fileEv:
 2083|     10|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf14EnumDescriptor15containing_typeEv:
 2083|    150|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf14EnumDescriptor20reserved_range_countEv:
 2083|     33|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf19EnumValueDescriptor4nameEv:
 2091|    330|  inline const std::string& CLASS::name() const { return all_names_[0]; } \
_ZNK6google8protobuf19EnumValueDescriptor9full_nameEv:
 2092|    136|  inline const std::string& CLASS::full_name() const { return all_names_[1]; }
_ZNK6google8protobuf19EnumValueDescriptor6numberEv:
 2083|     99|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf14FileDescriptor4nameEv:
 2087|      9|  inline const std::string& CLASS::FIELD() const { return *FIELD##_; }
_ZNK6google8protobuf14FileDescriptor7packageEv:
 2087|     87|  inline const std::string& CLASS::FIELD() const { return *FIELD##_; }
_ZNK6google8protobuf14FileDescriptor18message_type_countEv:
 2083|    128|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf14FileDescriptor15enum_type_countEv:
 2083|      6|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf14FileDescriptor13service_countEv:
 2083|      3|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf14FileDescriptor15extension_countEv:
 2083|      3|  inline TYPE CLASS::FIELD() const { return FIELD##_; }
_ZNK6google8protobuf14FileDescriptor7optionsEv:
 2099|      3|  inline const TYPE& CLASS::options() const { return *options_; }
_ZNK6google8protobuf14FileDescriptor12message_typeEi:
 2096|     61|  inline TYPE CLASS::FIELD(int index) const { return FIELD##s_ + index; }
_ZNK6google8protobuf15FieldDescriptor6is_mapEv:
 2309|   866k|inline bool FieldDescriptor::is_map() const {
 2310|   866k|  return type() == TYPE_MESSAGE && is_map_message_type();
  ------------------
  |  Branch (2310:10): [True: 866k, False: 0]
  |  Branch (2310:36): [True: 0, False: 866k]
  ------------------
 2311|   866k|}
_ZNK6google8protobuf15FieldDescriptor5indexEv:
 2332|  3.61M|inline int FieldDescriptor::index() const {
 2333|  3.61M|  if (!is_extension_) {
  ------------------
  |  Branch (2333:7): [True: 3.61M, False: 0]
  ------------------
 2334|  3.61M|    return static_cast<int>(this - containing_type()->fields_);
 2335|  3.61M|  } else if (extension_scope() != nullptr) {
  ------------------
  |  Branch (2335:14): [True: 0, False: 0]
  ------------------
 2336|      0|    return static_cast<int>(this - extension_scope()->extensions_);
 2337|      0|  } else {
 2338|      0|    return static_cast<int>(this - file_->extensions_);
 2339|      0|  }
 2340|  3.61M|}
_ZNK6google8protobuf10Descriptor5indexEv:
 2342|      7|inline int Descriptor::index() const {
 2343|      7|  if (containing_type_ == nullptr) {
  ------------------
  |  Branch (2343:7): [True: 4, False: 3]
  ------------------
 2344|      4|    return static_cast<int>(this - file_->message_types_);
 2345|      4|  } else {
 2346|      3|    return static_cast<int>(this - containing_type_->nested_types_);
 2347|      3|  }
 2348|      7|}
_ZNK6google8protobuf15OneofDescriptor5indexEv:
 2354|  3.43M|inline int OneofDescriptor::index() const {
 2355|  3.43M|  return static_cast<int>(this - containing_type_->oneof_decls_);
 2356|  3.43M|}
_ZNK6google8protobuf15OneofDescriptor12is_syntheticEv:
 2358|  6.21M|inline bool OneofDescriptor::is_synthetic() const {
 2359|  6.21M|  return field_count() == 1 && field(0)->proto3_optional_;
  ------------------
  |  Branch (2359:10): [True: 114k, False: 6.10M]
  |  Branch (2359:32): [True: 0, False: 114k]
  ------------------
 2360|  6.21M|}

_Z62descriptor_table_google_2fprotobuf_2fdescriptor_2eproto_getterv:
 1147|      1|PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2fdescriptor_2eproto_getter() {
 1148|      1|  return &descriptor_table_google_2fprotobuf_2fdescriptor_2eproto;
 1149|      1|}
_ZN6google8protobuf33FieldDescriptorProto_Type_IsValidEi:
 1158|  1.65k|bool FieldDescriptorProto_Type_IsValid(int value) {
 1159|  1.65k|  switch (value) {
 1160|      6|    case 1:
  ------------------
  |  Branch (1160:5): [True: 6, False: 1.64k]
  ------------------
 1161|      6|    case 2:
  ------------------
  |  Branch (1161:5): [True: 0, False: 1.65k]
  ------------------
 1162|     12|    case 3:
  ------------------
  |  Branch (1162:5): [True: 6, False: 1.64k]
  ------------------
 1163|     18|    case 4:
  ------------------
  |  Branch (1163:5): [True: 6, False: 1.64k]
  ------------------
 1164|    618|    case 5:
  ------------------
  |  Branch (1164:5): [True: 600, False: 1.05k]
  ------------------
 1165|    618|    case 6:
  ------------------
  |  Branch (1165:5): [True: 0, False: 1.65k]
  ------------------
 1166|    618|    case 7:
  ------------------
  |  Branch (1166:5): [True: 0, False: 1.65k]
  ------------------
 1167|    780|    case 8:
  ------------------
  |  Branch (1167:5): [True: 162, False: 1.48k]
  ------------------
 1168|  1.01k|    case 9:
  ------------------
  |  Branch (1168:5): [True: 234, False: 1.41k]
  ------------------
 1169|  1.01k|    case 10:
  ------------------
  |  Branch (1169:5): [True: 0, False: 1.65k]
  ------------------
 1170|  1.57k|    case 11:
  ------------------
  |  Branch (1170:5): [True: 558, False: 1.09k]
  ------------------
 1171|  1.58k|    case 12:
  ------------------
  |  Branch (1171:5): [True: 12, False: 1.63k]
  ------------------
 1172|  1.61k|    case 13:
  ------------------
  |  Branch (1172:5): [True: 30, False: 1.62k]
  ------------------
 1173|  1.65k|    case 14:
  ------------------
  |  Branch (1173:5): [True: 36, False: 1.61k]
  ------------------
 1174|  1.65k|    case 15:
  ------------------
  |  Branch (1174:5): [True: 0, False: 1.65k]
  ------------------
 1175|  1.65k|    case 16:
  ------------------
  |  Branch (1175:5): [True: 0, False: 1.65k]
  ------------------
 1176|  1.65k|    case 17:
  ------------------
  |  Branch (1176:5): [True: 0, False: 1.65k]
  ------------------
 1177|  1.65k|    case 18:
  ------------------
  |  Branch (1177:5): [True: 0, False: 1.65k]
  ------------------
 1178|  1.65k|      return true;
 1179|      0|    default:
  ------------------
  |  Branch (1179:5): [True: 0, False: 1.65k]
  ------------------
 1180|      0|      return false;
 1181|  1.65k|  }
 1182|  1.65k|}
_ZN6google8protobuf34FieldDescriptorProto_Label_IsValidEi:
 1211|  1.65k|bool FieldDescriptorProto_Label_IsValid(int value) {
 1212|  1.65k|  switch (value) {
 1213|  1.28k|    case 1:
  ------------------
  |  Branch (1213:5): [True: 1.28k, False: 366]
  ------------------
 1214|  1.37k|    case 2:
  ------------------
  |  Branch (1214:5): [True: 90, False: 1.56k]
  ------------------
 1215|  1.65k|    case 3:
  ------------------
  |  Branch (1215:5): [True: 276, False: 1.37k]
  ------------------
 1216|  1.65k|      return true;
 1217|      0|    default:
  ------------------
  |  Branch (1217:5): [True: 0, False: 1.65k]
  ------------------
 1218|      0|      return false;
 1219|  1.65k|  }
 1220|  1.65k|}
_ZN6google8protobuf32FileOptions_OptimizeMode_IsValidEi:
 1234|      8|bool FileOptions_OptimizeMode_IsValid(int value) {
 1235|      8|  switch (value) {
 1236|      8|    case 1:
  ------------------
  |  Branch (1236:5): [True: 8, False: 0]
  ------------------
 1237|      8|    case 2:
  ------------------
  |  Branch (1237:5): [True: 0, False: 8]
  ------------------
 1238|      8|    case 3:
  ------------------
  |  Branch (1238:5): [True: 0, False: 8]
  ------------------
 1239|      8|      return true;
 1240|      0|    default:
  ------------------
  |  Branch (1240:5): [True: 0, False: 8]
  ------------------
 1241|      0|      return false;
 1242|      8|  }
 1243|      8|}
_ZN6google8protobuf19FileDescriptorProtoC2EPNS0_5ArenaEb:
 1544|      9|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 1545|      9|  SharedCtor(arena, is_message_owned);
 1546|       |  // @@protoc_insertion_point(arena_constructor:google.protobuf.FileDescriptorProto)
 1547|      9|}
_ZN6google8protobuf19FileDescriptorProtoD2Ev:
 1635|      9|FileDescriptorProto::~FileDescriptorProto() {
 1636|       |  // @@protoc_insertion_point(destructor:google.protobuf.FileDescriptorProto)
 1637|      9|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (1637:13): [True: 0, False: 9]
  ------------------
 1638|      0|  (void)arena;
 1639|      0|    return;
 1640|      0|  }
 1641|      9|  SharedDtor();
 1642|      9|}
_ZN6google8protobuf19FileDescriptorProto5ClearEv:
 1664|      9|void FileDescriptorProto::Clear() {
 1665|       |// @@protoc_insertion_point(message_clear_start:google.protobuf.FileDescriptorProto)
 1666|      9|  uint32_t cached_has_bits = 0;
 1667|       |  // Prevent compiler warnings about cached_has_bits being unused
 1668|      9|  (void) cached_has_bits;
 1669|       |
 1670|      9|  _impl_.dependency_.Clear();
 1671|      9|  _impl_.message_type_.Clear();
 1672|      9|  _impl_.enum_type_.Clear();
 1673|      9|  _impl_.service_.Clear();
 1674|      9|  _impl_.extension_.Clear();
 1675|      9|  _impl_.public_dependency_.Clear();
 1676|      9|  _impl_.weak_dependency_.Clear();
 1677|      9|  cached_has_bits = _impl_._has_bits_[0];
 1678|      9|  if (cached_has_bits & 0x0000001fu) {
  ------------------
  |  Branch (1678:7): [True: 0, False: 9]
  ------------------
 1679|      0|    if (cached_has_bits & 0x00000001u) {
  ------------------
  |  Branch (1679:9): [True: 0, False: 0]
  ------------------
 1680|      0|      _impl_.name_.ClearNonDefaultToEmpty();
 1681|      0|    }
 1682|      0|    if (cached_has_bits & 0x00000002u) {
  ------------------
  |  Branch (1682:9): [True: 0, False: 0]
  ------------------
 1683|      0|      _impl_.package_.ClearNonDefaultToEmpty();
 1684|      0|    }
 1685|      0|    if (cached_has_bits & 0x00000004u) {
  ------------------
  |  Branch (1685:9): [True: 0, False: 0]
  ------------------
 1686|      0|      _impl_.syntax_.ClearNonDefaultToEmpty();
 1687|      0|    }
 1688|      0|    if (cached_has_bits & 0x00000008u) {
  ------------------
  |  Branch (1688:9): [True: 0, False: 0]
  ------------------
 1689|      0|      GOOGLE_DCHECK(_impl_.options_ != nullptr);
  ------------------
  |  |  192|      0|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      0|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      0|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1690|      0|      _impl_.options_->Clear();
 1691|      0|    }
 1692|      0|    if (cached_has_bits & 0x00000010u) {
  ------------------
  |  Branch (1692:9): [True: 0, False: 0]
  ------------------
 1693|      0|      GOOGLE_DCHECK(_impl_.source_code_info_ != nullptr);
  ------------------
  |  |  192|      0|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      0|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      0|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1694|      0|      _impl_.source_code_info_->Clear();
 1695|      0|    }
 1696|      0|  }
 1697|      9|  _impl_._has_bits_.Clear();
 1698|      9|  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
 1699|      9|}
_ZN6google8protobuf19FileDescriptorProto14_InternalParseEPKcPNS0_8internal12ParseContextE:
 1701|      9|const char* FileDescriptorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
 1702|      9|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
 1703|      9|  _Internal::HasBits has_bits{};
 1704|     45|  while (!ctx->Done(&ptr)) {
  ------------------
  |  Branch (1704:10): [True: 36, False: 9]
  ------------------
 1705|     36|    uint32_t tag;
 1706|     36|    ptr = ::_pbi::ReadTag(ptr, &tag);
 1707|     36|    switch (tag >> 3) {
 1708|       |      // optional string name = 1;
 1709|      9|      case 1:
  ------------------
  |  Branch (1709:7): [True: 9, False: 27]
  ------------------
 1710|      9|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
  ------------------
  |  |  489|      9|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 9, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 9, False: 0]
  |  |  ------------------
  ------------------
 1711|      9|          auto str = _internal_mutable_name();
 1712|      9|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 1713|      9|          CHK_(ptr);
  ------------------
  |  | 1702|      9|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      9|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 9]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 9]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1714|      9|          #ifndef NDEBUG
 1715|      9|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileDescriptorProto.name");
 1716|      9|          #endif  // !NDEBUG
 1717|      9|        } else
 1718|      0|          goto handle_unusual;
 1719|      9|        continue;
 1720|       |      // optional string package = 2;
 1721|      9|      case 2:
  ------------------
  |  Branch (1721:7): [True: 9, False: 27]
  ------------------
 1722|      9|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
  ------------------
  |  |  489|      9|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 9, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 9, False: 0]
  |  |  ------------------
  ------------------
 1723|      9|          auto str = _internal_mutable_package();
 1724|      9|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 1725|      9|          CHK_(ptr);
  ------------------
  |  | 1702|      9|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      9|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 9]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 9]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1726|      9|          #ifndef NDEBUG
 1727|      9|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileDescriptorProto.package");
 1728|      9|          #endif  // !NDEBUG
 1729|      9|        } else
 1730|      0|          goto handle_unusual;
 1731|      9|        continue;
 1732|       |      // repeated string dependency = 3;
 1733|      9|      case 3:
  ------------------
  |  Branch (1733:7): [True: 0, False: 36]
  ------------------
 1734|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1735|      0|          ptr -= 1;
 1736|      0|          do {
 1737|      0|            ptr += 1;
 1738|      0|            auto str = _internal_add_dependency();
 1739|      0|            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 1740|      0|            CHK_(ptr);
  ------------------
  |  | 1702|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1741|      0|            #ifndef NDEBUG
 1742|      0|            ::_pbi::VerifyUTF8(str, "google.protobuf.FileDescriptorProto.dependency");
 1743|      0|            #endif  // !NDEBUG
 1744|      0|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (1744:17): [True: 0, False: 0]
  ------------------
 1745|      0|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
  ------------------
  |  Branch (1745:20): [True: 0, False: 0]
  ------------------
 1746|      0|        } else
 1747|      0|          goto handle_unusual;
 1748|      0|        continue;
 1749|       |      // repeated .google.protobuf.DescriptorProto message_type = 4;
 1750|      9|      case 4:
  ------------------
  |  Branch (1750:7): [True: 9, False: 27]
  ------------------
 1751|      9|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
  ------------------
  |  |  489|      9|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 9, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 9, False: 0]
  |  |  ------------------
  ------------------
 1752|      9|          ptr -= 1;
 1753|    183|          do {
 1754|    183|            ptr += 1;
 1755|    183|            ptr = ctx->ParseMessage(_internal_add_message_type(), ptr);
 1756|    183|            CHK_(ptr);
  ------------------
  |  | 1702|    183|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|    183|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 183]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 183]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1757|    183|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (1757:17): [True: 3, False: 180]
  ------------------
 1758|    183|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
  ------------------
  |  Branch (1758:20): [True: 174, False: 6]
  ------------------
 1759|      9|        } else
 1760|      0|          goto handle_unusual;
 1761|      9|        continue;
 1762|       |      // repeated .google.protobuf.EnumDescriptorProto enum_type = 5;
 1763|      9|      case 5:
  ------------------
  |  Branch (1763:7): [True: 0, False: 36]
  ------------------
 1764|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1765|      0|          ptr -= 1;
 1766|      0|          do {
 1767|      0|            ptr += 1;
 1768|      0|            ptr = ctx->ParseMessage(_internal_add_enum_type(), ptr);
 1769|      0|            CHK_(ptr);
  ------------------
  |  | 1702|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1770|      0|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (1770:17): [True: 0, False: 0]
  ------------------
 1771|      0|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
  ------------------
  |  Branch (1771:20): [True: 0, False: 0]
  ------------------
 1772|      0|        } else
 1773|      0|          goto handle_unusual;
 1774|      0|        continue;
 1775|       |      // repeated .google.protobuf.ServiceDescriptorProto service = 6;
 1776|      0|      case 6:
  ------------------
  |  Branch (1776:7): [True: 0, False: 36]
  ------------------
 1777|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1778|      0|          ptr -= 1;
 1779|      0|          do {
 1780|      0|            ptr += 1;
 1781|      0|            ptr = ctx->ParseMessage(_internal_add_service(), ptr);
 1782|      0|            CHK_(ptr);
  ------------------
  |  | 1702|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1783|      0|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (1783:17): [True: 0, False: 0]
  ------------------
 1784|      0|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
  ------------------
  |  Branch (1784:20): [True: 0, False: 0]
  ------------------
 1785|      0|        } else
 1786|      0|          goto handle_unusual;
 1787|      0|        continue;
 1788|       |      // repeated .google.protobuf.FieldDescriptorProto extension = 7;
 1789|      0|      case 7:
  ------------------
  |  Branch (1789:7): [True: 0, False: 36]
  ------------------
 1790|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1791|      0|          ptr -= 1;
 1792|      0|          do {
 1793|      0|            ptr += 1;
 1794|      0|            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
 1795|      0|            CHK_(ptr);
  ------------------
  |  | 1702|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1796|      0|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (1796:17): [True: 0, False: 0]
  ------------------
 1797|      0|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
  ------------------
  |  Branch (1797:20): [True: 0, False: 0]
  ------------------
 1798|      0|        } else
 1799|      0|          goto handle_unusual;
 1800|      0|        continue;
 1801|       |      // optional .google.protobuf.FileOptions options = 8;
 1802|      6|      case 8:
  ------------------
  |  Branch (1802:7): [True: 6, False: 30]
  ------------------
 1803|      6|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
  ------------------
  |  |  489|      6|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 6, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 1804|      6|          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
 1805|      6|          CHK_(ptr);
  ------------------
  |  | 1702|      6|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      6|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 6]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 6]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1806|      6|        } else
 1807|      0|          goto handle_unusual;
 1808|      6|        continue;
 1809|       |      // optional .google.protobuf.SourceCodeInfo source_code_info = 9;
 1810|      6|      case 9:
  ------------------
  |  Branch (1810:7): [True: 0, False: 36]
  ------------------
 1811|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1812|      0|          ptr = ctx->ParseMessage(_internal_mutable_source_code_info(), ptr);
 1813|      0|          CHK_(ptr);
  ------------------
  |  | 1702|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1814|      0|        } else
 1815|      0|          goto handle_unusual;
 1816|      0|        continue;
 1817|       |      // repeated int32 public_dependency = 10;
 1818|      0|      case 10:
  ------------------
  |  Branch (1818:7): [True: 0, False: 36]
  ------------------
 1819|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1820|      0|          ptr -= 1;
 1821|      0|          do {
 1822|      0|            ptr += 1;
 1823|      0|            _internal_add_public_dependency(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
 1824|      0|            CHK_(ptr);
  ------------------
  |  | 1702|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1825|      0|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (1825:17): [True: 0, False: 0]
  ------------------
 1826|      0|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
  ------------------
  |  Branch (1826:20): [True: 0, False: 0]
  ------------------
 1827|      0|        } else if (static_cast<uint8_t>(tag) == 82) {
  ------------------
  |  Branch (1827:20): [True: 0, False: 0]
  ------------------
 1828|      0|          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_public_dependency(), ptr, ctx);
 1829|      0|          CHK_(ptr);
  ------------------
  |  | 1702|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1830|      0|        } else
 1831|      0|          goto handle_unusual;
 1832|      0|        continue;
 1833|       |      // repeated int32 weak_dependency = 11;
 1834|      0|      case 11:
  ------------------
  |  Branch (1834:7): [True: 0, False: 36]
  ------------------
 1835|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1836|      0|          ptr -= 1;
 1837|      0|          do {
 1838|      0|            ptr += 1;
 1839|      0|            _internal_add_weak_dependency(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
 1840|      0|            CHK_(ptr);
  ------------------
  |  | 1702|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1841|      0|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (1841:17): [True: 0, False: 0]
  ------------------
 1842|      0|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
  ------------------
  |  Branch (1842:20): [True: 0, False: 0]
  ------------------
 1843|      0|        } else if (static_cast<uint8_t>(tag) == 90) {
  ------------------
  |  Branch (1843:20): [True: 0, False: 0]
  ------------------
 1844|      0|          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_weak_dependency(), ptr, ctx);
 1845|      0|          CHK_(ptr);
  ------------------
  |  | 1702|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1846|      0|        } else
 1847|      0|          goto handle_unusual;
 1848|      0|        continue;
 1849|       |      // optional string syntax = 12;
 1850|      3|      case 12:
  ------------------
  |  Branch (1850:7): [True: 3, False: 33]
  ------------------
 1851|      3|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
  ------------------
  |  |  489|      3|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 3, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 3, False: 0]
  |  |  ------------------
  ------------------
 1852|      3|          auto str = _internal_mutable_syntax();
 1853|      3|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 1854|      3|          CHK_(ptr);
  ------------------
  |  | 1702|      3|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      3|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 3]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 3]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1855|      3|          #ifndef NDEBUG
 1856|      3|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileDescriptorProto.syntax");
 1857|      3|          #endif  // !NDEBUG
 1858|      3|        } else
 1859|      0|          goto handle_unusual;
 1860|      3|        continue;
 1861|      3|      default:
  ------------------
  |  Branch (1861:7): [True: 0, False: 36]
  ------------------
 1862|      0|        goto handle_unusual;
 1863|     36|    }  // switch
 1864|      0|  handle_unusual:
 1865|      0|    if ((tag == 0) || ((tag & 7) == 4)) {
  ------------------
  |  Branch (1865:9): [True: 0, False: 0]
  |  Branch (1865:23): [True: 0, False: 0]
  ------------------
 1866|      0|      CHK_(ptr);
  ------------------
  |  | 1702|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1867|      0|      ctx->SetLastTag(tag);
 1868|      0|      goto message_done;
 1869|      0|    }
 1870|      0|    ptr = UnknownFieldParse(
 1871|      0|        tag,
 1872|      0|        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
 1873|      0|        ptr, ctx);
 1874|      0|    CHK_(ptr != nullptr);
  ------------------
  |  | 1702|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1875|      0|  }  // while
 1876|      9|message_done:
 1877|      9|  _impl_._has_bits_.Or(has_bits);
 1878|      9|  return ptr;
 1879|      0|failure:
 1880|      0|  ptr = nullptr;
 1881|      0|  goto message_done;
 1882|      9|#undef CHK_
 1883|      9|}
_ZNK6google8protobuf19FileDescriptorProto13IsInitializedEv:
 2153|      9|bool FileDescriptorProto::IsInitialized() const {
 2154|      9|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.message_type_))
  ------------------
  |  Branch (2154:7): [True: 0, False: 9]
  ------------------
 2155|      0|    return false;
 2156|      9|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.enum_type_))
  ------------------
  |  Branch (2156:7): [True: 0, False: 9]
  ------------------
 2157|      0|    return false;
 2158|      9|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.service_))
  ------------------
  |  Branch (2158:7): [True: 0, False: 9]
  ------------------
 2159|      0|    return false;
 2160|      9|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.extension_))
  ------------------
  |  Branch (2160:7): [True: 0, False: 9]
  ------------------
 2161|      0|    return false;
 2162|      9|  if (_internal_has_options()) {
  ------------------
  |  Branch (2162:7): [True: 6, False: 3]
  ------------------
 2163|      6|    if (!_impl_.options_->IsInitialized()) return false;
  ------------------
  |  Branch (2163:9): [True: 0, False: 6]
  ------------------
 2164|      6|  }
 2165|      9|  return true;
 2166|      9|}
_ZN6google8protobuf30DescriptorProto_ExtensionRangeC2EPNS0_5ArenaEb:
 2230|     27|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 2231|     27|  SharedCtor(arena, is_message_owned);
 2232|       |  // @@protoc_insertion_point(arena_constructor:google.protobuf.DescriptorProto.ExtensionRange)
 2233|     27|}
_ZN6google8protobuf30DescriptorProto_ExtensionRangeD2Ev:
 2267|     27|DescriptorProto_ExtensionRange::~DescriptorProto_ExtensionRange() {
 2268|       |  // @@protoc_insertion_point(destructor:google.protobuf.DescriptorProto.ExtensionRange)
 2269|     27|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (2269:13): [True: 0, False: 27]
  ------------------
 2270|      0|  (void)arena;
 2271|      0|    return;
 2272|      0|  }
 2273|     27|  SharedDtor();
 2274|     27|}
_ZN6google8protobuf30DescriptorProto_ExtensionRange14_InternalParseEPKcPNS0_8internal12ParseContextE:
 2305|     27|const char* DescriptorProto_ExtensionRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
 2306|     27|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
 2307|     27|  _Internal::HasBits has_bits{};
 2308|     81|  while (!ctx->Done(&ptr)) {
  ------------------
  |  Branch (2308:10): [True: 54, False: 27]
  ------------------
 2309|     54|    uint32_t tag;
 2310|     54|    ptr = ::_pbi::ReadTag(ptr, &tag);
 2311|     54|    switch (tag >> 3) {
 2312|       |      // optional int32 start = 1;
 2313|     27|      case 1:
  ------------------
  |  Branch (2313:7): [True: 27, False: 27]
  ------------------
 2314|     27|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
  ------------------
  |  |  489|     27|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 27, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 27, False: 0]
  |  |  ------------------
  ------------------
 2315|     27|          _Internal::set_has_start(&has_bits);
 2316|     27|          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
 2317|     27|          CHK_(ptr);
  ------------------
  |  | 2306|     27|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     27|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 27]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 27]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2318|     27|        } else
 2319|      0|          goto handle_unusual;
 2320|     27|        continue;
 2321|       |      // optional int32 end = 2;
 2322|     27|      case 2:
  ------------------
  |  Branch (2322:7): [True: 27, False: 27]
  ------------------
 2323|     27|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
  ------------------
  |  |  489|     27|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 27, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 27, False: 0]
  |  |  ------------------
  ------------------
 2324|     27|          _Internal::set_has_end(&has_bits);
 2325|     27|          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
 2326|     27|          CHK_(ptr);
  ------------------
  |  | 2306|     27|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     27|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 27]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 27]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2327|     27|        } else
 2328|      0|          goto handle_unusual;
 2329|     27|        continue;
 2330|       |      // optional .google.protobuf.ExtensionRangeOptions options = 3;
 2331|     27|      case 3:
  ------------------
  |  Branch (2331:7): [True: 0, False: 54]
  ------------------
 2332|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2333|      0|          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
 2334|      0|          CHK_(ptr);
  ------------------
  |  | 2306|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2335|      0|        } else
 2336|      0|          goto handle_unusual;
 2337|      0|        continue;
 2338|      0|      default:
  ------------------
  |  Branch (2338:7): [True: 0, False: 54]
  ------------------
 2339|      0|        goto handle_unusual;
 2340|     54|    }  // switch
 2341|      0|  handle_unusual:
 2342|      0|    if ((tag == 0) || ((tag & 7) == 4)) {
  ------------------
  |  Branch (2342:9): [True: 0, False: 0]
  |  Branch (2342:23): [True: 0, False: 0]
  ------------------
 2343|      0|      CHK_(ptr);
  ------------------
  |  | 2306|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2344|      0|      ctx->SetLastTag(tag);
 2345|      0|      goto message_done;
 2346|      0|    }
 2347|      0|    ptr = UnknownFieldParse(
 2348|      0|        tag,
 2349|      0|        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
 2350|      0|        ptr, ctx);
 2351|      0|    CHK_(ptr != nullptr);
  ------------------
  |  | 2306|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2352|      0|  }  // while
 2353|     27|message_done:
 2354|     27|  _impl_._has_bits_.Or(has_bits);
 2355|     27|  return ptr;
 2356|      0|failure:
 2357|      0|  ptr = nullptr;
 2358|      0|  goto message_done;
 2359|     27|#undef CHK_
 2360|     27|}
_ZNK6google8protobuf30DescriptorProto_ExtensionRange13IsInitializedEv:
 2466|     27|bool DescriptorProto_ExtensionRange::IsInitialized() const {
 2467|     27|  if (_internal_has_options()) {
  ------------------
  |  Branch (2467:7): [True: 0, False: 27]
  ------------------
 2468|      0|    if (!_impl_.options_->IsInitialized()) return false;
  ------------------
  |  Branch (2468:9): [True: 0, False: 0]
  ------------------
 2469|      0|  }
 2470|     27|  return true;
 2471|     27|}
_ZN6google8protobuf29DescriptorProto_ReservedRangeC2EPNS0_5ArenaEb:
 2506|     24|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 2507|     24|  SharedCtor(arena, is_message_owned);
 2508|       |  // @@protoc_insertion_point(arena_constructor:google.protobuf.DescriptorProto.ReservedRange)
 2509|     24|}
_ZN6google8protobuf29DescriptorProto_ReservedRangeD2Ev:
 2538|     24|DescriptorProto_ReservedRange::~DescriptorProto_ReservedRange() {
 2539|       |  // @@protoc_insertion_point(destructor:google.protobuf.DescriptorProto.ReservedRange)
 2540|     24|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (2540:13): [True: 0, False: 24]
  ------------------
 2541|      0|  (void)arena;
 2542|      0|    return;
 2543|      0|  }
 2544|     24|  SharedDtor();
 2545|     24|}
_ZN6google8protobuf29DescriptorProto_ReservedRange14_InternalParseEPKcPNS0_8internal12ParseContextE:
 2571|     24|const char* DescriptorProto_ReservedRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
 2572|     24|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
 2573|     24|  _Internal::HasBits has_bits{};
 2574|     72|  while (!ctx->Done(&ptr)) {
  ------------------
  |  Branch (2574:10): [True: 48, False: 24]
  ------------------
 2575|     48|    uint32_t tag;
 2576|     48|    ptr = ::_pbi::ReadTag(ptr, &tag);
 2577|     48|    switch (tag >> 3) {
 2578|       |      // optional int32 start = 1;
 2579|     24|      case 1:
  ------------------
  |  Branch (2579:7): [True: 24, False: 24]
  ------------------
 2580|     24|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
  ------------------
  |  |  489|     24|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 24, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 2581|     24|          _Internal::set_has_start(&has_bits);
 2582|     24|          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
 2583|     24|          CHK_(ptr);
  ------------------
  |  | 2572|     24|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     24|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 24]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 24]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2584|     24|        } else
 2585|      0|          goto handle_unusual;
 2586|     24|        continue;
 2587|       |      // optional int32 end = 2;
 2588|     24|      case 2:
  ------------------
  |  Branch (2588:7): [True: 24, False: 24]
  ------------------
 2589|     24|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
  ------------------
  |  |  489|     24|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 24, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 2590|     24|          _Internal::set_has_end(&has_bits);
 2591|     24|          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
 2592|     24|          CHK_(ptr);
  ------------------
  |  | 2572|     24|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     24|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 24]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 24]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2593|     24|        } else
 2594|      0|          goto handle_unusual;
 2595|     24|        continue;
 2596|     24|      default:
  ------------------
  |  Branch (2596:7): [True: 0, False: 48]
  ------------------
 2597|      0|        goto handle_unusual;
 2598|     48|    }  // switch
 2599|      0|  handle_unusual:
 2600|      0|    if ((tag == 0) || ((tag & 7) == 4)) {
  ------------------
  |  Branch (2600:9): [True: 0, False: 0]
  |  Branch (2600:23): [True: 0, False: 0]
  ------------------
 2601|      0|      CHK_(ptr);
  ------------------
  |  | 2572|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2602|      0|      ctx->SetLastTag(tag);
 2603|      0|      goto message_done;
 2604|      0|    }
 2605|      0|    ptr = UnknownFieldParse(
 2606|      0|        tag,
 2607|      0|        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
 2608|      0|        ptr, ctx);
 2609|      0|    CHK_(ptr != nullptr);
  ------------------
  |  | 2572|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2610|      0|  }  // while
 2611|     24|message_done:
 2612|     24|  _impl_._has_bits_.Or(has_bits);
 2613|     24|  return ptr;
 2614|      0|failure:
 2615|      0|  ptr = nullptr;
 2616|      0|  goto message_done;
 2617|     24|#undef CHK_
 2618|     24|}
_ZN6google8protobuf15DescriptorProtoC2EPNS0_5ArenaEb:
 2748|    201|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 2749|    201|  SharedCtor(arena, is_message_owned);
 2750|       |  // @@protoc_insertion_point(arena_constructor:google.protobuf.DescriptorProto)
 2751|    201|}
_ZN6google8protobuf15DescriptorProtoD2Ev:
 2808|    201|DescriptorProto::~DescriptorProto() {
 2809|       |  // @@protoc_insertion_point(destructor:google.protobuf.DescriptorProto)
 2810|    201|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (2810:13): [True: 0, False: 201]
  ------------------
 2811|      0|  (void)arena;
 2812|      0|    return;
 2813|      0|  }
 2814|    201|  SharedDtor();
 2815|    201|}
_ZN6google8protobuf15DescriptorProto14_InternalParseEPKcPNS0_8internal12ParseContextE:
 2863|    201|const char* DescriptorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
 2864|    201|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
 2865|    201|  _Internal::HasBits has_bits{};
 2866|    693|  while (!ctx->Done(&ptr)) {
  ------------------
  |  Branch (2866:10): [True: 492, False: 201]
  ------------------
 2867|    492|    uint32_t tag;
 2868|    492|    ptr = ::_pbi::ReadTag(ptr, &tag);
 2869|    492|    switch (tag >> 3) {
 2870|       |      // optional string name = 1;
 2871|    201|      case 1:
  ------------------
  |  Branch (2871:7): [True: 201, False: 291]
  ------------------
 2872|    201|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
  ------------------
  |  |  489|    201|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 201, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 201, False: 0]
  |  |  ------------------
  ------------------
 2873|    201|          auto str = _internal_mutable_name();
 2874|    201|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 2875|    201|          CHK_(ptr);
  ------------------
  |  | 2864|    201|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|    201|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 201]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 201]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2876|    201|          #ifndef NDEBUG
 2877|    201|          ::_pbi::VerifyUTF8(str, "google.protobuf.DescriptorProto.name");
 2878|    201|          #endif  // !NDEBUG
 2879|    201|        } else
 2880|      0|          goto handle_unusual;
 2881|    201|        continue;
 2882|       |      // repeated .google.protobuf.FieldDescriptorProto field = 2;
 2883|    201|      case 2:
  ------------------
  |  Branch (2883:7): [True: 192, False: 300]
  ------------------
 2884|    192|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
  ------------------
  |  |  489|    192|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 192, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 192, False: 0]
  |  |  ------------------
  ------------------
 2885|    192|          ptr -= 1;
 2886|    825|          do {
 2887|    825|            ptr += 1;
 2888|    825|            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
 2889|    825|            CHK_(ptr);
  ------------------
  |  | 2864|    825|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|    825|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 825]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 825]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2890|    825|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (2890:17): [True: 114, False: 711]
  ------------------
 2891|    825|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
  ------------------
  |  Branch (2891:20): [True: 633, False: 78]
  ------------------
 2892|    192|        } else
 2893|      0|          goto handle_unusual;
 2894|    192|        continue;
 2895|       |      // repeated .google.protobuf.DescriptorProto nested_type = 3;
 2896|    192|      case 3:
  ------------------
  |  Branch (2896:7): [True: 15, False: 477]
  ------------------
 2897|     15|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
  ------------------
  |  |  489|     15|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 15, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 15, False: 0]
  |  |  ------------------
  ------------------
 2898|     15|          ptr -= 1;
 2899|     18|          do {
 2900|     18|            ptr += 1;
 2901|     18|            ptr = ctx->ParseMessage(_internal_add_nested_type(), ptr);
 2902|     18|            CHK_(ptr);
  ------------------
  |  | 2864|     18|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     18|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 18]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 18]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2903|     18|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (2903:17): [True: 15, False: 3]
  ------------------
 2904|     18|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
  ------------------
  |  Branch (2904:20): [True: 3, False: 0]
  ------------------
 2905|     15|        } else
 2906|      0|          goto handle_unusual;
 2907|     15|        continue;
 2908|       |      // repeated .google.protobuf.EnumDescriptorProto enum_type = 4;
 2909|     15|      case 4:
  ------------------
  |  Branch (2909:7): [True: 12, False: 480]
  ------------------
 2910|     12|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
  ------------------
  |  |  489|     12|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 12, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 2911|     12|          ptr -= 1;
 2912|     18|          do {
 2913|     18|            ptr += 1;
 2914|     18|            ptr = ctx->ParseMessage(_internal_add_enum_type(), ptr);
 2915|     18|            CHK_(ptr);
  ------------------
  |  | 2864|     18|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     18|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 18]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 18]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2916|     18|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (2916:17): [True: 3, False: 15]
  ------------------
 2917|     18|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
  ------------------
  |  Branch (2917:20): [True: 6, False: 9]
  ------------------
 2918|     12|        } else
 2919|      0|          goto handle_unusual;
 2920|     12|        continue;
 2921|       |      // repeated .google.protobuf.DescriptorProto.ExtensionRange extension_range = 5;
 2922|     27|      case 5:
  ------------------
  |  Branch (2922:7): [True: 27, False: 465]
  ------------------
 2923|     27|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
  ------------------
  |  |  489|     27|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 27, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 27, False: 0]
  |  |  ------------------
  ------------------
 2924|     27|          ptr -= 1;
 2925|     27|          do {
 2926|     27|            ptr += 1;
 2927|     27|            ptr = ctx->ParseMessage(_internal_add_extension_range(), ptr);
 2928|     27|            CHK_(ptr);
  ------------------
  |  | 2864|     27|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     27|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 27]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 27]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2929|     27|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (2929:17): [True: 15, False: 12]
  ------------------
 2930|     27|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
  ------------------
  |  Branch (2930:20): [True: 0, False: 12]
  ------------------
 2931|     27|        } else
 2932|      0|          goto handle_unusual;
 2933|     27|        continue;
 2934|       |      // repeated .google.protobuf.FieldDescriptorProto extension = 6;
 2935|     27|      case 6:
  ------------------
  |  Branch (2935:7): [True: 0, False: 492]
  ------------------
 2936|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2937|      0|          ptr -= 1;
 2938|      0|          do {
 2939|      0|            ptr += 1;
 2940|      0|            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
 2941|      0|            CHK_(ptr);
  ------------------
  |  | 2864|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2942|      0|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (2942:17): [True: 0, False: 0]
  ------------------
 2943|      0|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
  ------------------
  |  Branch (2943:20): [True: 0, False: 0]
  ------------------
 2944|      0|        } else
 2945|      0|          goto handle_unusual;
 2946|      0|        continue;
 2947|       |      // optional .google.protobuf.MessageOptions options = 7;
 2948|      0|      case 7:
  ------------------
  |  Branch (2948:7): [True: 0, False: 492]
  ------------------
 2949|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2950|      0|          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
 2951|      0|          CHK_(ptr);
  ------------------
  |  | 2864|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2952|      0|        } else
 2953|      0|          goto handle_unusual;
 2954|      0|        continue;
 2955|       |      // repeated .google.protobuf.OneofDescriptorProto oneof_decl = 8;
 2956|     33|      case 8:
  ------------------
  |  Branch (2956:7): [True: 33, False: 459]
  ------------------
 2957|     33|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
  ------------------
  |  |  489|     33|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 33, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 33, False: 0]
  |  |  ------------------
  ------------------
 2958|     33|          ptr -= 1;
 2959|     33|          do {
 2960|     33|            ptr += 1;
 2961|     33|            ptr = ctx->ParseMessage(_internal_add_oneof_decl(), ptr);
 2962|     33|            CHK_(ptr);
  ------------------
  |  | 2864|     33|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     33|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 33]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 33]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2963|     33|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (2963:17): [True: 33, False: 0]
  ------------------
 2964|     33|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
  ------------------
  |  Branch (2964:20): [True: 0, False: 0]
  ------------------
 2965|     33|        } else
 2966|      0|          goto handle_unusual;
 2967|     33|        continue;
 2968|       |      // repeated .google.protobuf.DescriptorProto.ReservedRange reserved_range = 9;
 2969|     33|      case 9:
  ------------------
  |  Branch (2969:7): [True: 12, False: 480]
  ------------------
 2970|     12|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
  ------------------
  |  |  489|     12|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 12, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 2971|     12|          ptr -= 1;
 2972|     24|          do {
 2973|     24|            ptr += 1;
 2974|     24|            ptr = ctx->ParseMessage(_internal_add_reserved_range(), ptr);
 2975|     24|            CHK_(ptr);
  ------------------
  |  | 2864|     24|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     24|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 24]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 24]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2976|     24|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (2976:17): [True: 12, False: 12]
  ------------------
 2977|     24|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
  ------------------
  |  Branch (2977:20): [True: 12, False: 0]
  ------------------
 2978|     12|        } else
 2979|      0|          goto handle_unusual;
 2980|     12|        continue;
 2981|       |      // repeated string reserved_name = 10;
 2982|     12|      case 10:
  ------------------
  |  Branch (2982:7): [True: 0, False: 492]
  ------------------
 2983|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2984|      0|          ptr -= 1;
 2985|      0|          do {
 2986|      0|            ptr += 1;
 2987|      0|            auto str = _internal_add_reserved_name();
 2988|      0|            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 2989|      0|            CHK_(ptr);
  ------------------
  |  | 2864|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2990|      0|            #ifndef NDEBUG
 2991|      0|            ::_pbi::VerifyUTF8(str, "google.protobuf.DescriptorProto.reserved_name");
 2992|      0|            #endif  // !NDEBUG
 2993|      0|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (2993:17): [True: 0, False: 0]
  ------------------
 2994|      0|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
  ------------------
  |  Branch (2994:20): [True: 0, False: 0]
  ------------------
 2995|      0|        } else
 2996|      0|          goto handle_unusual;
 2997|      0|        continue;
 2998|      0|      default:
  ------------------
  |  Branch (2998:7): [True: 0, False: 492]
  ------------------
 2999|      0|        goto handle_unusual;
 3000|    492|    }  // switch
 3001|      0|  handle_unusual:
 3002|      0|    if ((tag == 0) || ((tag & 7) == 4)) {
  ------------------
  |  Branch (3002:9): [True: 0, False: 0]
  |  Branch (3002:23): [True: 0, False: 0]
  ------------------
 3003|      0|      CHK_(ptr);
  ------------------
  |  | 2864|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3004|      0|      ctx->SetLastTag(tag);
 3005|      0|      goto message_done;
 3006|      0|    }
 3007|      0|    ptr = UnknownFieldParse(
 3008|      0|        tag,
 3009|      0|        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
 3010|      0|        ptr, ctx);
 3011|      0|    CHK_(ptr != nullptr);
  ------------------
  |  | 2864|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3012|      0|  }  // while
 3013|    201|message_done:
 3014|    201|  _impl_._has_bits_.Or(has_bits);
 3015|    201|  return ptr;
 3016|      0|failure:
 3017|      0|  ptr = nullptr;
 3018|      0|  goto message_done;
 3019|    201|#undef CHK_
 3020|    201|}
_ZNK6google8protobuf15DescriptorProto13IsInitializedEv:
 3248|    201|bool DescriptorProto::IsInitialized() const {
 3249|    201|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.field_))
  ------------------
  |  Branch (3249:7): [True: 0, False: 201]
  ------------------
 3250|      0|    return false;
 3251|    201|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.nested_type_))
  ------------------
  |  Branch (3251:7): [True: 0, False: 201]
  ------------------
 3252|      0|    return false;
 3253|    201|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.enum_type_))
  ------------------
  |  Branch (3253:7): [True: 0, False: 201]
  ------------------
 3254|      0|    return false;
 3255|    201|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.extension_range_))
  ------------------
  |  Branch (3255:7): [True: 0, False: 201]
  ------------------
 3256|      0|    return false;
 3257|    201|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.extension_))
  ------------------
  |  Branch (3257:7): [True: 0, False: 201]
  ------------------
 3258|      0|    return false;
 3259|    201|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.oneof_decl_))
  ------------------
  |  Branch (3259:7): [True: 0, False: 201]
  ------------------
 3260|      0|    return false;
 3261|    201|  if (_internal_has_options()) {
  ------------------
  |  Branch (3261:7): [True: 0, False: 201]
  ------------------
 3262|      0|    if (!_impl_.options_->IsInitialized()) return false;
  ------------------
  |  Branch (3262:9): [True: 0, False: 0]
  ------------------
 3263|      0|  }
 3264|    201|  return true;
 3265|    201|}
_ZNK6google8protobuf15DescriptorProto11GetMetadataEv:
 3288|     40|::PROTOBUF_NAMESPACE_ID::Metadata DescriptorProto::GetMetadata() const {
 3289|     40|  return ::_pbi::AssignDescriptors(
 3290|     40|      &descriptor_table_google_2fprotobuf_2fdescriptor_2eproto_getter, &descriptor_table_google_2fprotobuf_2fdescriptor_2eproto_once,
 3291|     40|      file_level_metadata_google_2fprotobuf_2fdescriptor_2eproto[4]);
 3292|     40|}
_ZN6google8protobuf20FieldDescriptorProtoC2EPNS0_5ArenaEb:
 3550|    825|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 3551|    825|  SharedCtor(arena, is_message_owned);
 3552|       |  // @@protoc_insertion_point(arena_constructor:google.protobuf.FieldDescriptorProto)
 3553|    825|}
_ZN6google8protobuf20FieldDescriptorProtoD2Ev:
 3663|    825|FieldDescriptorProto::~FieldDescriptorProto() {
 3664|       |  // @@protoc_insertion_point(destructor:google.protobuf.FieldDescriptorProto)
 3665|    825|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 825]
  ------------------
 3666|      0|  (void)arena;
 3667|      0|    return;
 3668|      0|  }
 3669|    825|  SharedDtor();
 3670|    825|}
_ZN6google8protobuf20FieldDescriptorProto14_InternalParseEPKcPNS0_8internal12ParseContextE:
 3728|    825|const char* FieldDescriptorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
 3729|    825|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
 3730|    825|  _Internal::HasBits has_bits{};
 3731|  4.77k|  while (!ctx->Done(&ptr)) {
  ------------------
  |  Branch (3731:10): [True: 3.94k, False: 825]
  ------------------
 3732|  3.94k|    uint32_t tag;
 3733|  3.94k|    ptr = ::_pbi::ReadTag(ptr, &tag);
 3734|  3.94k|    switch (tag >> 3) {
 3735|       |      // optional string name = 1;
 3736|    825|      case 1:
  ------------------
  |  Branch (3736:7): [True: 825, False: 3.12k]
  ------------------
 3737|    825|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
  ------------------
  |  |  489|    825|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 825, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 825, False: 0]
  |  |  ------------------
  ------------------
 3738|    825|          auto str = _internal_mutable_name();
 3739|    825|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 3740|    825|          CHK_(ptr);
  ------------------
  |  | 3729|    825|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|    825|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 825]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 825]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3741|    825|          #ifndef NDEBUG
 3742|    825|          ::_pbi::VerifyUTF8(str, "google.protobuf.FieldDescriptorProto.name");
 3743|    825|          #endif  // !NDEBUG
 3744|    825|        } else
 3745|      0|          goto handle_unusual;
 3746|    825|        continue;
 3747|       |      // optional string extendee = 2;
 3748|    825|      case 2:
  ------------------
  |  Branch (3748:7): [True: 0, False: 3.94k]
  ------------------
 3749|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3750|      0|          auto str = _internal_mutable_extendee();
 3751|      0|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 3752|      0|          CHK_(ptr);
  ------------------
  |  | 3729|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3753|      0|          #ifndef NDEBUG
 3754|      0|          ::_pbi::VerifyUTF8(str, "google.protobuf.FieldDescriptorProto.extendee");
 3755|      0|          #endif  // !NDEBUG
 3756|      0|        } else
 3757|      0|          goto handle_unusual;
 3758|      0|        continue;
 3759|       |      // optional int32 number = 3;
 3760|    825|      case 3:
  ------------------
  |  Branch (3760:7): [True: 825, False: 3.12k]
  ------------------
 3761|    825|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
  ------------------
  |  |  489|    825|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 825, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 825, False: 0]
  |  |  ------------------
  ------------------
 3762|    825|          _Internal::set_has_number(&has_bits);
 3763|    825|          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
 3764|    825|          CHK_(ptr);
  ------------------
  |  | 3729|    825|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|    825|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 825]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 825]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3765|    825|        } else
 3766|      0|          goto handle_unusual;
 3767|    825|        continue;
 3768|       |      // optional .google.protobuf.FieldDescriptorProto.Label label = 4;
 3769|    825|      case 4:
  ------------------
  |  Branch (3769:7): [True: 825, False: 3.12k]
  ------------------
 3770|    825|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
  ------------------
  |  |  489|    825|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 825, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 825, False: 0]
  |  |  ------------------
  ------------------
 3771|    825|          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 3772|    825|          CHK_(ptr);
  ------------------
  |  | 3729|    825|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|    825|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 825]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 825]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3773|    825|          if (PROTOBUF_PREDICT_TRUE(::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Label_IsValid(val))) {
  ------------------
  |  |  489|    825|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 825, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 825, False: 0]
  |  |  ------------------
  ------------------
 3774|    825|            _internal_set_label(static_cast<::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Label>(val));
 3775|    825|          } else {
 3776|      0|            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
 3777|      0|          }
 3778|    825|        } else
 3779|      0|          goto handle_unusual;
 3780|    825|        continue;
 3781|       |      // optional .google.protobuf.FieldDescriptorProto.Type type = 5;
 3782|    825|      case 5:
  ------------------
  |  Branch (3782:7): [True: 825, False: 3.12k]
  ------------------
 3783|    825|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
  ------------------
  |  |  489|    825|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 825, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 825, False: 0]
  |  |  ------------------
  ------------------
 3784|    825|          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 3785|    825|          CHK_(ptr);
  ------------------
  |  | 3729|    825|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|    825|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 825]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 825]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3786|    825|          if (PROTOBUF_PREDICT_TRUE(::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type_IsValid(val))) {
  ------------------
  |  |  489|    825|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 825, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 825, False: 0]
  |  |  ------------------
  ------------------
 3787|    825|            _internal_set_type(static_cast<::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type>(val));
 3788|    825|          } else {
 3789|      0|            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
 3790|      0|          }
 3791|    825|        } else
 3792|      0|          goto handle_unusual;
 3793|    825|        continue;
 3794|       |      // optional string type_name = 6;
 3795|    825|      case 6:
  ------------------
  |  Branch (3795:7): [True: 297, False: 3.64k]
  ------------------
 3796|    297|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
  ------------------
  |  |  489|    297|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 297, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 297, False: 0]
  |  |  ------------------
  ------------------
 3797|    297|          auto str = _internal_mutable_type_name();
 3798|    297|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 3799|    297|          CHK_(ptr);
  ------------------
  |  | 3729|    297|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|    297|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 297]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 297]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3800|    297|          #ifndef NDEBUG
 3801|    297|          ::_pbi::VerifyUTF8(str, "google.protobuf.FieldDescriptorProto.type_name");
 3802|    297|          #endif  // !NDEBUG
 3803|    297|        } else
 3804|      0|          goto handle_unusual;
 3805|    297|        continue;
 3806|       |      // optional string default_value = 7;
 3807|    297|      case 7:
  ------------------
  |  Branch (3807:7): [True: 75, False: 3.87k]
  ------------------
 3808|     75|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
  ------------------
  |  |  489|     75|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 75, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 75, False: 0]
  |  |  ------------------
  ------------------
 3809|     75|          auto str = _internal_mutable_default_value();
 3810|     75|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 3811|     75|          CHK_(ptr);
  ------------------
  |  | 3729|     75|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     75|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 75]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 75]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3812|     75|          #ifndef NDEBUG
 3813|     75|          ::_pbi::VerifyUTF8(str, "google.protobuf.FieldDescriptorProto.default_value");
 3814|     75|          #endif  // !NDEBUG
 3815|     75|        } else
 3816|      0|          goto handle_unusual;
 3817|     75|        continue;
 3818|       |      // optional .google.protobuf.FieldOptions options = 8;
 3819|     75|      case 8:
  ------------------
  |  Branch (3819:7): [True: 12, False: 3.93k]
  ------------------
 3820|     12|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
  ------------------
  |  |  489|     12|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 12, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 3821|     12|          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
 3822|     12|          CHK_(ptr);
  ------------------
  |  | 3729|     12|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     12|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 12]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 12]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3823|     12|        } else
 3824|      0|          goto handle_unusual;
 3825|     12|        continue;
 3826|       |      // optional int32 oneof_index = 9;
 3827|    261|      case 9:
  ------------------
  |  Branch (3827:7): [True: 261, False: 3.68k]
  ------------------
 3828|    261|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
  ------------------
  |  |  489|    261|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 261, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 261, False: 0]
  |  |  ------------------
  ------------------
 3829|    261|          _Internal::set_has_oneof_index(&has_bits);
 3830|    261|          _impl_.oneof_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
 3831|    261|          CHK_(ptr);
  ------------------
  |  | 3729|    261|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|    261|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 261]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 261]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3832|    261|        } else
 3833|      0|          goto handle_unusual;
 3834|    261|        continue;
 3835|       |      // optional string json_name = 10;
 3836|    261|      case 10:
  ------------------
  |  Branch (3836:7): [True: 0, False: 3.94k]
  ------------------
 3837|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3838|      0|          auto str = _internal_mutable_json_name();
 3839|      0|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 3840|      0|          CHK_(ptr);
  ------------------
  |  | 3729|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3841|      0|          #ifndef NDEBUG
 3842|      0|          ::_pbi::VerifyUTF8(str, "google.protobuf.FieldDescriptorProto.json_name");
 3843|      0|          #endif  // !NDEBUG
 3844|      0|        } else
 3845|      0|          goto handle_unusual;
 3846|      0|        continue;
 3847|       |      // optional bool proto3_optional = 17;
 3848|      0|      case 17:
  ------------------
  |  Branch (3848:7): [True: 0, False: 3.94k]
  ------------------
 3849|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3850|      0|          _Internal::set_has_proto3_optional(&has_bits);
 3851|      0|          _impl_.proto3_optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 3852|      0|          CHK_(ptr);
  ------------------
  |  | 3729|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3853|      0|        } else
 3854|      0|          goto handle_unusual;
 3855|      0|        continue;
 3856|      0|      default:
  ------------------
  |  Branch (3856:7): [True: 0, False: 3.94k]
  ------------------
 3857|      0|        goto handle_unusual;
 3858|  3.94k|    }  // switch
 3859|      0|  handle_unusual:
 3860|      0|    if ((tag == 0) || ((tag & 7) == 4)) {
  ------------------
  |  Branch (3860:9): [True: 0, False: 0]
  |  Branch (3860:23): [True: 0, False: 0]
  ------------------
 3861|      0|      CHK_(ptr);
  ------------------
  |  | 3729|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3862|      0|      ctx->SetLastTag(tag);
 3863|      0|      goto message_done;
 3864|      0|    }
 3865|      0|    ptr = UnknownFieldParse(
 3866|      0|        tag,
 3867|      0|        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
 3868|      0|        ptr, ctx);
 3869|      0|    CHK_(ptr != nullptr);
  ------------------
  |  | 3729|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3870|      0|  }  // while
 3871|    825|message_done:
 3872|    825|  _impl_._has_bits_.Or(has_bits);
 3873|    825|  return ptr;
 3874|      0|failure:
 3875|      0|  ptr = nullptr;
 3876|      0|  goto message_done;
 3877|    825|#undef CHK_
 3878|    825|}
_ZNK6google8protobuf20FieldDescriptorProto13IsInitializedEv:
 4135|    825|bool FieldDescriptorProto::IsInitialized() const {
 4136|    825|  if (_internal_has_options()) {
  ------------------
  |  Branch (4136:7): [True: 12, False: 813]
  ------------------
 4137|     12|    if (!_impl_.options_->IsInitialized()) return false;
  ------------------
  |  Branch (4137:9): [True: 0, False: 12]
  ------------------
 4138|     12|  }
 4139|    825|  return true;
 4140|    825|}
_ZN6google8protobuf20OneofDescriptorProtoC2EPNS0_5ArenaEb:
 4204|     33|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 4205|     33|  SharedCtor(arena, is_message_owned);
 4206|       |  // @@protoc_insertion_point(arena_constructor:google.protobuf.OneofDescriptorProto)
 4207|     33|}
_ZN6google8protobuf20OneofDescriptorProtoD2Ev:
 4248|     33|OneofDescriptorProto::~OneofDescriptorProto() {
 4249|       |  // @@protoc_insertion_point(destructor:google.protobuf.OneofDescriptorProto)
 4250|     33|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 33]
  ------------------
 4251|      0|  (void)arena;
 4252|      0|    return;
 4253|      0|  }
 4254|     33|  SharedDtor();
 4255|     33|}
_ZN6google8protobuf20OneofDescriptorProto14_InternalParseEPKcPNS0_8internal12ParseContextE:
 4287|     33|const char* OneofDescriptorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
 4288|     33|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
 4289|     33|  _Internal::HasBits has_bits{};
 4290|     66|  while (!ctx->Done(&ptr)) {
  ------------------
  |  Branch (4290:10): [True: 33, False: 33]
  ------------------
 4291|     33|    uint32_t tag;
 4292|     33|    ptr = ::_pbi::ReadTag(ptr, &tag);
 4293|     33|    switch (tag >> 3) {
 4294|       |      // optional string name = 1;
 4295|     33|      case 1:
  ------------------
  |  Branch (4295:7): [True: 33, False: 0]
  ------------------
 4296|     33|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
  ------------------
  |  |  489|     33|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 33, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 33, False: 0]
  |  |  ------------------
  ------------------
 4297|     33|          auto str = _internal_mutable_name();
 4298|     33|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 4299|     33|          CHK_(ptr);
  ------------------
  |  | 4288|     33|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     33|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 33]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 33]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4300|     33|          #ifndef NDEBUG
 4301|     33|          ::_pbi::VerifyUTF8(str, "google.protobuf.OneofDescriptorProto.name");
 4302|     33|          #endif  // !NDEBUG
 4303|     33|        } else
 4304|      0|          goto handle_unusual;
 4305|     33|        continue;
 4306|       |      // optional .google.protobuf.OneofOptions options = 2;
 4307|     33|      case 2:
  ------------------
  |  Branch (4307:7): [True: 0, False: 33]
  ------------------
 4308|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4309|      0|          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
 4310|      0|          CHK_(ptr);
  ------------------
  |  | 4288|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4311|      0|        } else
 4312|      0|          goto handle_unusual;
 4313|      0|        continue;
 4314|      0|      default:
  ------------------
  |  Branch (4314:7): [True: 0, False: 33]
  ------------------
 4315|      0|        goto handle_unusual;
 4316|     33|    }  // switch
 4317|      0|  handle_unusual:
 4318|      0|    if ((tag == 0) || ((tag & 7) == 4)) {
  ------------------
  |  Branch (4318:9): [True: 0, False: 0]
  |  Branch (4318:23): [True: 0, False: 0]
  ------------------
 4319|      0|      CHK_(ptr);
  ------------------
  |  | 4288|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4320|      0|      ctx->SetLastTag(tag);
 4321|      0|      goto message_done;
 4322|      0|    }
 4323|      0|    ptr = UnknownFieldParse(
 4324|      0|        tag,
 4325|      0|        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
 4326|      0|        ptr, ctx);
 4327|      0|    CHK_(ptr != nullptr);
  ------------------
  |  | 4288|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4328|      0|  }  // while
 4329|     33|message_done:
 4330|     33|  _impl_._has_bits_.Or(has_bits);
 4331|     33|  return ptr;
 4332|      0|failure:
 4333|      0|  ptr = nullptr;
 4334|      0|  goto message_done;
 4335|     33|#undef CHK_
 4336|     33|}
_ZNK6google8protobuf20OneofDescriptorProto13IsInitializedEv:
 4433|     33|bool OneofDescriptorProto::IsInitialized() const {
 4434|     33|  if (_internal_has_options()) {
  ------------------
  |  Branch (4434:7): [True: 0, False: 33]
  ------------------
 4435|      0|    if (!_impl_.options_->IsInitialized()) return false;
  ------------------
  |  Branch (4435:9): [True: 0, False: 0]
  ------------------
 4436|      0|  }
 4437|     33|  return true;
 4438|     33|}
_ZN6google8protobuf19EnumDescriptorProtoC2EPNS0_5ArenaEb:
 4716|     18|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 4717|     18|  SharedCtor(arena, is_message_owned);
 4718|       |  // @@protoc_insertion_point(arena_constructor:google.protobuf.EnumDescriptorProto)
 4719|     18|}
_ZN6google8protobuf19EnumDescriptorProtoD2Ev:
 4766|     18|EnumDescriptorProto::~EnumDescriptorProto() {
 4767|       |  // @@protoc_insertion_point(destructor:google.protobuf.EnumDescriptorProto)
 4768|     18|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (4768:13): [True: 0, False: 18]
  ------------------
 4769|      0|  (void)arena;
 4770|      0|    return;
 4771|      0|  }
 4772|     18|  SharedDtor();
 4773|     18|}
_ZN6google8protobuf19EnumDescriptorProto14_InternalParseEPKcPNS0_8internal12ParseContextE:
 4811|     18|const char* EnumDescriptorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
 4812|     18|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
 4813|     18|  _Internal::HasBits has_bits{};
 4814|     54|  while (!ctx->Done(&ptr)) {
  ------------------
  |  Branch (4814:10): [True: 36, False: 18]
  ------------------
 4815|     36|    uint32_t tag;
 4816|     36|    ptr = ::_pbi::ReadTag(ptr, &tag);
 4817|     36|    switch (tag >> 3) {
 4818|       |      // optional string name = 1;
 4819|     18|      case 1:
  ------------------
  |  Branch (4819:7): [True: 18, False: 18]
  ------------------
 4820|     18|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
  ------------------
  |  |  489|     18|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 18, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 4821|     18|          auto str = _internal_mutable_name();
 4822|     18|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 4823|     18|          CHK_(ptr);
  ------------------
  |  | 4812|     18|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     18|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 18]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 18]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4824|     18|          #ifndef NDEBUG
 4825|     18|          ::_pbi::VerifyUTF8(str, "google.protobuf.EnumDescriptorProto.name");
 4826|     18|          #endif  // !NDEBUG
 4827|     18|        } else
 4828|      0|          goto handle_unusual;
 4829|     18|        continue;
 4830|       |      // repeated .google.protobuf.EnumValueDescriptorProto value = 2;
 4831|     18|      case 2:
  ------------------
  |  Branch (4831:7): [True: 18, False: 18]
  ------------------
 4832|     18|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
  ------------------
  |  |  489|     18|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 18, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 4833|     18|          ptr -= 1;
 4834|     99|          do {
 4835|     99|            ptr += 1;
 4836|     99|            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
 4837|     99|            CHK_(ptr);
  ------------------
  |  | 4812|     99|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     99|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 99]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 99]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4838|     99|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (4838:17): [True: 18, False: 81]
  ------------------
 4839|     99|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
  ------------------
  |  Branch (4839:20): [True: 81, False: 0]
  ------------------
 4840|     18|        } else
 4841|      0|          goto handle_unusual;
 4842|     18|        continue;
 4843|       |      // optional .google.protobuf.EnumOptions options = 3;
 4844|     18|      case 3:
  ------------------
  |  Branch (4844:7): [True: 0, False: 36]
  ------------------
 4845|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4846|      0|          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
 4847|      0|          CHK_(ptr);
  ------------------
  |  | 4812|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4848|      0|        } else
 4849|      0|          goto handle_unusual;
 4850|      0|        continue;
 4851|       |      // repeated .google.protobuf.EnumDescriptorProto.EnumReservedRange reserved_range = 4;
 4852|      0|      case 4:
  ------------------
  |  Branch (4852:7): [True: 0, False: 36]
  ------------------
 4853|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4854|      0|          ptr -= 1;
 4855|      0|          do {
 4856|      0|            ptr += 1;
 4857|      0|            ptr = ctx->ParseMessage(_internal_add_reserved_range(), ptr);
 4858|      0|            CHK_(ptr);
  ------------------
  |  | 4812|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4859|      0|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (4859:17): [True: 0, False: 0]
  ------------------
 4860|      0|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
  ------------------
  |  Branch (4860:20): [True: 0, False: 0]
  ------------------
 4861|      0|        } else
 4862|      0|          goto handle_unusual;
 4863|      0|        continue;
 4864|       |      // repeated string reserved_name = 5;
 4865|      0|      case 5:
  ------------------
  |  Branch (4865:7): [True: 0, False: 36]
  ------------------
 4866|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4867|      0|          ptr -= 1;
 4868|      0|          do {
 4869|      0|            ptr += 1;
 4870|      0|            auto str = _internal_add_reserved_name();
 4871|      0|            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 4872|      0|            CHK_(ptr);
  ------------------
  |  | 4812|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4873|      0|            #ifndef NDEBUG
 4874|      0|            ::_pbi::VerifyUTF8(str, "google.protobuf.EnumDescriptorProto.reserved_name");
 4875|      0|            #endif  // !NDEBUG
 4876|      0|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (4876:17): [True: 0, False: 0]
  ------------------
 4877|      0|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
  ------------------
  |  Branch (4877:20): [True: 0, False: 0]
  ------------------
 4878|      0|        } else
 4879|      0|          goto handle_unusual;
 4880|      0|        continue;
 4881|      0|      default:
  ------------------
  |  Branch (4881:7): [True: 0, False: 36]
  ------------------
 4882|      0|        goto handle_unusual;
 4883|     36|    }  // switch
 4884|      0|  handle_unusual:
 4885|      0|    if ((tag == 0) || ((tag & 7) == 4)) {
  ------------------
  |  Branch (4885:9): [True: 0, False: 0]
  |  Branch (4885:23): [True: 0, False: 0]
  ------------------
 4886|      0|      CHK_(ptr);
  ------------------
  |  | 4812|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4887|      0|      ctx->SetLastTag(tag);
 4888|      0|      goto message_done;
 4889|      0|    }
 4890|      0|    ptr = UnknownFieldParse(
 4891|      0|        tag,
 4892|      0|        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
 4893|      0|        ptr, ctx);
 4894|      0|    CHK_(ptr != nullptr);
  ------------------
  |  | 4812|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4895|      0|  }  // while
 4896|     18|message_done:
 4897|     18|  _impl_._has_bits_.Or(has_bits);
 4898|     18|  return ptr;
 4899|      0|failure:
 4900|      0|  ptr = nullptr;
 4901|      0|  goto message_done;
 4902|     18|#undef CHK_
 4903|     18|}
_ZNK6google8protobuf19EnumDescriptorProto13IsInitializedEv:
 5051|     18|bool EnumDescriptorProto::IsInitialized() const {
 5052|     18|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.value_))
  ------------------
  |  Branch (5052:7): [True: 0, False: 18]
  ------------------
 5053|      0|    return false;
 5054|     18|  if (_internal_has_options()) {
  ------------------
  |  Branch (5054:7): [True: 0, False: 18]
  ------------------
 5055|      0|    if (!_impl_.options_->IsInitialized()) return false;
  ------------------
  |  Branch (5055:9): [True: 0, False: 0]
  ------------------
 5056|      0|  }
 5057|     18|  return true;
 5058|     18|}
_ZN6google8protobuf24EnumValueDescriptorProtoC2EPNS0_5ArenaEb:
 5105|     99|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 5106|     99|  SharedCtor(arena, is_message_owned);
 5107|       |  // @@protoc_insertion_point(arena_constructor:google.protobuf.EnumValueDescriptorProto)
 5108|     99|}
_ZN6google8protobuf24EnumValueDescriptorProtoD2Ev:
 5152|     99|EnumValueDescriptorProto::~EnumValueDescriptorProto() {
 5153|       |  // @@protoc_insertion_point(destructor:google.protobuf.EnumValueDescriptorProto)
 5154|     99|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (5154:13): [True: 0, False: 99]
  ------------------
 5155|      0|  (void)arena;
 5156|      0|    return;
 5157|      0|  }
 5158|     99|  SharedDtor();
 5159|     99|}
_ZN6google8protobuf24EnumValueDescriptorProto14_InternalParseEPKcPNS0_8internal12ParseContextE:
 5192|     99|const char* EnumValueDescriptorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
 5193|     99|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
 5194|     99|  _Internal::HasBits has_bits{};
 5195|    297|  while (!ctx->Done(&ptr)) {
  ------------------
  |  Branch (5195:10): [True: 198, False: 99]
  ------------------
 5196|    198|    uint32_t tag;
 5197|    198|    ptr = ::_pbi::ReadTag(ptr, &tag);
 5198|    198|    switch (tag >> 3) {
 5199|       |      // optional string name = 1;
 5200|     99|      case 1:
  ------------------
  |  Branch (5200:7): [True: 99, False: 99]
  ------------------
 5201|     99|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
  ------------------
  |  |  489|     99|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 99, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 99, False: 0]
  |  |  ------------------
  ------------------
 5202|     99|          auto str = _internal_mutable_name();
 5203|     99|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 5204|     99|          CHK_(ptr);
  ------------------
  |  | 5193|     99|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     99|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 99]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 99]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5205|     99|          #ifndef NDEBUG
 5206|     99|          ::_pbi::VerifyUTF8(str, "google.protobuf.EnumValueDescriptorProto.name");
 5207|     99|          #endif  // !NDEBUG
 5208|     99|        } else
 5209|      0|          goto handle_unusual;
 5210|     99|        continue;
 5211|       |      // optional int32 number = 2;
 5212|     99|      case 2:
  ------------------
  |  Branch (5212:7): [True: 99, False: 99]
  ------------------
 5213|     99|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
  ------------------
  |  |  489|     99|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 99, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 99, False: 0]
  |  |  ------------------
  ------------------
 5214|     99|          _Internal::set_has_number(&has_bits);
 5215|     99|          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
 5216|     99|          CHK_(ptr);
  ------------------
  |  | 5193|     99|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     99|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 99]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 99]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5217|     99|        } else
 5218|      0|          goto handle_unusual;
 5219|     99|        continue;
 5220|       |      // optional .google.protobuf.EnumValueOptions options = 3;
 5221|     99|      case 3:
  ------------------
  |  Branch (5221:7): [True: 0, False: 198]
  ------------------
 5222|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5223|      0|          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
 5224|      0|          CHK_(ptr);
  ------------------
  |  | 5193|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5225|      0|        } else
 5226|      0|          goto handle_unusual;
 5227|      0|        continue;
 5228|      0|      default:
  ------------------
  |  Branch (5228:7): [True: 0, False: 198]
  ------------------
 5229|      0|        goto handle_unusual;
 5230|    198|    }  // switch
 5231|      0|  handle_unusual:
 5232|      0|    if ((tag == 0) || ((tag & 7) == 4)) {
  ------------------
  |  Branch (5232:9): [True: 0, False: 0]
  |  Branch (5232:23): [True: 0, False: 0]
  ------------------
 5233|      0|      CHK_(ptr);
  ------------------
  |  | 5193|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5234|      0|      ctx->SetLastTag(tag);
 5235|      0|      goto message_done;
 5236|      0|    }
 5237|      0|    ptr = UnknownFieldParse(
 5238|      0|        tag,
 5239|      0|        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
 5240|      0|        ptr, ctx);
 5241|      0|    CHK_(ptr != nullptr);
  ------------------
  |  | 5193|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5242|      0|  }  // while
 5243|     99|message_done:
 5244|     99|  _impl_._has_bits_.Or(has_bits);
 5245|     99|  return ptr;
 5246|      0|failure:
 5247|      0|  ptr = nullptr;
 5248|      0|  goto message_done;
 5249|     99|#undef CHK_
 5250|     99|}
_ZNK6google8protobuf24EnumValueDescriptorProto13IsInitializedEv:
 5362|     99|bool EnumValueDescriptorProto::IsInitialized() const {
 5363|     99|  if (_internal_has_options()) {
  ------------------
  |  Branch (5363:7): [True: 0, False: 99]
  ------------------
 5364|      0|    if (!_impl_.options_->IsInitialized()) return false;
  ------------------
  |  Branch (5364:9): [True: 0, False: 0]
  ------------------
 5365|      0|  }
 5366|     99|  return true;
 5367|     99|}
_ZN6google8protobuf11FileOptionsC2EPNS0_5ArenaEb:
 6230|      8|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 6231|      8|  SharedCtor(arena, is_message_owned);
 6232|       |  // @@protoc_insertion_point(arena_constructor:google.protobuf.FileOptions)
 6233|      8|}
_ZN6google8protobuf11FileOptionsD2Ev:
 6423|      6|FileOptions::~FileOptions() {
 6424|       |  // @@protoc_insertion_point(destructor:google.protobuf.FileOptions)
 6425|      6|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (6425:13): [True: 0, False: 6]
  ------------------
 6426|      0|  (void)arena;
 6427|      0|    return;
 6428|      0|  }
 6429|      6|  SharedDtor();
 6430|      6|}
_ZN6google8protobuf11FileOptions5ClearEv:
 6452|      2|void FileOptions::Clear() {
 6453|       |// @@protoc_insertion_point(message_clear_start:google.protobuf.FileOptions)
 6454|      2|  uint32_t cached_has_bits = 0;
 6455|       |  // Prevent compiler warnings about cached_has_bits being unused
 6456|      2|  (void) cached_has_bits;
 6457|       |
 6458|      2|  _impl_._extensions_.Clear();
 6459|      2|  _impl_.uninterpreted_option_.Clear();
 6460|      2|  cached_has_bits = _impl_._has_bits_[0];
 6461|      2|  if (cached_has_bits & 0x000000ffu) {
  ------------------
  |  Branch (6461:7): [True: 0, False: 2]
  ------------------
 6462|      0|    if (cached_has_bits & 0x00000001u) {
  ------------------
  |  Branch (6462:9): [True: 0, False: 0]
  ------------------
 6463|      0|      _impl_.java_package_.ClearNonDefaultToEmpty();
 6464|      0|    }
 6465|      0|    if (cached_has_bits & 0x00000002u) {
  ------------------
  |  Branch (6465:9): [True: 0, False: 0]
  ------------------
 6466|      0|      _impl_.java_outer_classname_.ClearNonDefaultToEmpty();
 6467|      0|    }
 6468|      0|    if (cached_has_bits & 0x00000004u) {
  ------------------
  |  Branch (6468:9): [True: 0, False: 0]
  ------------------
 6469|      0|      _impl_.go_package_.ClearNonDefaultToEmpty();
 6470|      0|    }
 6471|      0|    if (cached_has_bits & 0x00000008u) {
  ------------------
  |  Branch (6471:9): [True: 0, False: 0]
  ------------------
 6472|      0|      _impl_.objc_class_prefix_.ClearNonDefaultToEmpty();
 6473|      0|    }
 6474|      0|    if (cached_has_bits & 0x00000010u) {
  ------------------
  |  Branch (6474:9): [True: 0, False: 0]
  ------------------
 6475|      0|      _impl_.csharp_namespace_.ClearNonDefaultToEmpty();
 6476|      0|    }
 6477|      0|    if (cached_has_bits & 0x00000020u) {
  ------------------
  |  Branch (6477:9): [True: 0, False: 0]
  ------------------
 6478|      0|      _impl_.swift_prefix_.ClearNonDefaultToEmpty();
 6479|      0|    }
 6480|      0|    if (cached_has_bits & 0x00000040u) {
  ------------------
  |  Branch (6480:9): [True: 0, False: 0]
  ------------------
 6481|      0|      _impl_.php_class_prefix_.ClearNonDefaultToEmpty();
 6482|      0|    }
 6483|      0|    if (cached_has_bits & 0x00000080u) {
  ------------------
  |  Branch (6483:9): [True: 0, False: 0]
  ------------------
 6484|      0|      _impl_.php_namespace_.ClearNonDefaultToEmpty();
 6485|      0|    }
 6486|      0|  }
 6487|      2|  if (cached_has_bits & 0x00000300u) {
  ------------------
  |  Branch (6487:7): [True: 0, False: 2]
  ------------------
 6488|      0|    if (cached_has_bits & 0x00000100u) {
  ------------------
  |  Branch (6488:9): [True: 0, False: 0]
  ------------------
 6489|      0|      _impl_.php_metadata_namespace_.ClearNonDefaultToEmpty();
 6490|      0|    }
 6491|      0|    if (cached_has_bits & 0x00000200u) {
  ------------------
  |  Branch (6491:9): [True: 0, False: 0]
  ------------------
 6492|      0|      _impl_.ruby_package_.ClearNonDefaultToEmpty();
 6493|      0|    }
 6494|      0|  }
 6495|      2|  if (cached_has_bits & 0x0000fc00u) {
  ------------------
  |  Branch (6495:7): [True: 0, False: 2]
  ------------------
 6496|      0|    ::memset(&_impl_.java_multiple_files_, 0, static_cast<size_t>(
 6497|      0|        reinterpret_cast<char*>(&_impl_.py_generic_services_) -
 6498|      0|        reinterpret_cast<char*>(&_impl_.java_multiple_files_)) + sizeof(_impl_.py_generic_services_));
 6499|      0|  }
 6500|      2|  if (cached_has_bits & 0x000f0000u) {
  ------------------
  |  Branch (6500:7): [True: 0, False: 2]
  ------------------
 6501|      0|    ::memset(&_impl_.php_generic_services_, 0, static_cast<size_t>(
 6502|      0|        reinterpret_cast<char*>(&_impl_.deprecated_) -
 6503|      0|        reinterpret_cast<char*>(&_impl_.php_generic_services_)) + sizeof(_impl_.deprecated_));
 6504|      0|    _impl_.optimize_for_ = 1;
 6505|      0|    _impl_.cc_enable_arenas_ = true;
 6506|      0|  }
 6507|      2|  _impl_._has_bits_.Clear();
 6508|      2|  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
 6509|      2|}
_ZN6google8protobuf11FileOptions14_InternalParseEPKcPNS0_8internal12ParseContextE:
 6511|      8|const char* FileOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
 6512|      8|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
 6513|      8|  _Internal::HasBits has_bits{};
 6514|     60|  while (!ctx->Done(&ptr)) {
  ------------------
  |  Branch (6514:10): [True: 52, False: 8]
  ------------------
 6515|     52|    uint32_t tag;
 6516|     52|    ptr = ::_pbi::ReadTag(ptr, &tag);
 6517|     52|    switch (tag >> 3) {
 6518|       |      // optional string java_package = 1;
 6519|      8|      case 1:
  ------------------
  |  Branch (6519:7): [True: 8, False: 44]
  ------------------
 6520|      8|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
  ------------------
  |  |  489|      8|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 8, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 6521|      8|          auto str = _internal_mutable_java_package();
 6522|      8|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 6523|      8|          CHK_(ptr);
  ------------------
  |  | 6512|      8|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      8|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 8]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6524|      8|          #ifndef NDEBUG
 6525|      8|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileOptions.java_package");
 6526|      8|          #endif  // !NDEBUG
 6527|      8|        } else
 6528|      0|          goto handle_unusual;
 6529|      8|        continue;
 6530|       |      // optional string java_outer_classname = 8;
 6531|      8|      case 8:
  ------------------
  |  Branch (6531:7): [True: 8, False: 44]
  ------------------
 6532|      8|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
  ------------------
  |  |  489|      8|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 8, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 6533|      8|          auto str = _internal_mutable_java_outer_classname();
 6534|      8|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 6535|      8|          CHK_(ptr);
  ------------------
  |  | 6512|      8|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      8|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 8]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6536|      8|          #ifndef NDEBUG
 6537|      8|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileOptions.java_outer_classname");
 6538|      8|          #endif  // !NDEBUG
 6539|      8|        } else
 6540|      0|          goto handle_unusual;
 6541|      8|        continue;
 6542|       |      // optional .google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = SPEED];
 6543|      8|      case 9:
  ------------------
  |  Branch (6543:7): [True: 4, False: 48]
  ------------------
 6544|      4|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
  ------------------
  |  |  489|      4|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 4, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 6545|      4|          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 6546|      4|          CHK_(ptr);
  ------------------
  |  | 6512|      4|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      4|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 4]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 4]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6547|      4|          if (PROTOBUF_PREDICT_TRUE(::PROTOBUF_NAMESPACE_ID::FileOptions_OptimizeMode_IsValid(val))) {
  ------------------
  |  |  489|      4|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 4, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 6548|      4|            _internal_set_optimize_for(static_cast<::PROTOBUF_NAMESPACE_ID::FileOptions_OptimizeMode>(val));
 6549|      4|          } else {
 6550|      0|            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
 6551|      0|          }
 6552|      4|        } else
 6553|      0|          goto handle_unusual;
 6554|      4|        continue;
 6555|       |      // optional bool java_multiple_files = 10 [default = false];
 6556|      4|      case 10:
  ------------------
  |  Branch (6556:7): [True: 4, False: 48]
  ------------------
 6557|      4|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
  ------------------
  |  |  489|      4|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 4, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 6558|      4|          _Internal::set_has_java_multiple_files(&has_bits);
 6559|      4|          _impl_.java_multiple_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 6560|      4|          CHK_(ptr);
  ------------------
  |  | 6512|      4|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      4|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 4]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 4]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6561|      4|        } else
 6562|      0|          goto handle_unusual;
 6563|      4|        continue;
 6564|       |      // optional string go_package = 11;
 6565|      8|      case 11:
  ------------------
  |  Branch (6565:7): [True: 8, False: 44]
  ------------------
 6566|      8|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
  ------------------
  |  |  489|      8|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 8, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 6567|      8|          auto str = _internal_mutable_go_package();
 6568|      8|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 6569|      8|          CHK_(ptr);
  ------------------
  |  | 6512|      8|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      8|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 8]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6570|      8|          #ifndef NDEBUG
 6571|      8|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileOptions.go_package");
 6572|      8|          #endif  // !NDEBUG
 6573|      8|        } else
 6574|      0|          goto handle_unusual;
 6575|      8|        continue;
 6576|       |      // optional bool cc_generic_services = 16 [default = false];
 6577|      8|      case 16:
  ------------------
  |  Branch (6577:7): [True: 0, False: 52]
  ------------------
 6578|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6579|      0|          _Internal::set_has_cc_generic_services(&has_bits);
 6580|      0|          _impl_.cc_generic_services_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 6581|      0|          CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6582|      0|        } else
 6583|      0|          goto handle_unusual;
 6584|      0|        continue;
 6585|       |      // optional bool java_generic_services = 17 [default = false];
 6586|      0|      case 17:
  ------------------
  |  Branch (6586:7): [True: 0, False: 52]
  ------------------
 6587|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6588|      0|          _Internal::set_has_java_generic_services(&has_bits);
 6589|      0|          _impl_.java_generic_services_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 6590|      0|          CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6591|      0|        } else
 6592|      0|          goto handle_unusual;
 6593|      0|        continue;
 6594|       |      // optional bool py_generic_services = 18 [default = false];
 6595|      0|      case 18:
  ------------------
  |  Branch (6595:7): [True: 0, False: 52]
  ------------------
 6596|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6597|      0|          _Internal::set_has_py_generic_services(&has_bits);
 6598|      0|          _impl_.py_generic_services_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 6599|      0|          CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6600|      0|        } else
 6601|      0|          goto handle_unusual;
 6602|      0|        continue;
 6603|       |      // optional bool java_generate_equals_and_hash = 20 [deprecated = true];
 6604|      0|      case 20:
  ------------------
  |  Branch (6604:7): [True: 0, False: 52]
  ------------------
 6605|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6606|      0|          _Internal::set_has_java_generate_equals_and_hash(&has_bits);
 6607|      0|          _impl_.java_generate_equals_and_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 6608|      0|          CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6609|      0|        } else
 6610|      0|          goto handle_unusual;
 6611|      0|        continue;
 6612|       |      // optional bool deprecated = 23 [default = false];
 6613|      0|      case 23:
  ------------------
  |  Branch (6613:7): [True: 0, False: 52]
  ------------------
 6614|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6615|      0|          _Internal::set_has_deprecated(&has_bits);
 6616|      0|          _impl_.deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 6617|      0|          CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6618|      0|        } else
 6619|      0|          goto handle_unusual;
 6620|      0|        continue;
 6621|       |      // optional bool java_string_check_utf8 = 27 [default = false];
 6622|      0|      case 27:
  ------------------
  |  Branch (6622:7): [True: 0, False: 52]
  ------------------
 6623|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6624|      0|          _Internal::set_has_java_string_check_utf8(&has_bits);
 6625|      0|          _impl_.java_string_check_utf8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 6626|      0|          CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6627|      0|        } else
 6628|      0|          goto handle_unusual;
 6629|      0|        continue;
 6630|       |      // optional bool cc_enable_arenas = 31 [default = true];
 6631|      4|      case 31:
  ------------------
  |  Branch (6631:7): [True: 4, False: 48]
  ------------------
 6632|      4|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
  ------------------
  |  |  489|      4|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 4, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 6633|      4|          _Internal::set_has_cc_enable_arenas(&has_bits);
 6634|      4|          _impl_.cc_enable_arenas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 6635|      4|          CHK_(ptr);
  ------------------
  |  | 6512|      4|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      4|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 4]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 4]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6636|      4|        } else
 6637|      0|          goto handle_unusual;
 6638|      4|        continue;
 6639|       |      // optional string objc_class_prefix = 36;
 6640|      8|      case 36:
  ------------------
  |  Branch (6640:7): [True: 8, False: 44]
  ------------------
 6641|      8|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
  ------------------
  |  |  489|      8|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 8, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 6642|      8|          auto str = _internal_mutable_objc_class_prefix();
 6643|      8|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 6644|      8|          CHK_(ptr);
  ------------------
  |  | 6512|      8|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      8|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 8]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6645|      8|          #ifndef NDEBUG
 6646|      8|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileOptions.objc_class_prefix");
 6647|      8|          #endif  // !NDEBUG
 6648|      8|        } else
 6649|      0|          goto handle_unusual;
 6650|      8|        continue;
 6651|       |      // optional string csharp_namespace = 37;
 6652|      8|      case 37:
  ------------------
  |  Branch (6652:7): [True: 8, False: 44]
  ------------------
 6653|      8|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
  ------------------
  |  |  489|      8|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 8, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 6654|      8|          auto str = _internal_mutable_csharp_namespace();
 6655|      8|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 6656|      8|          CHK_(ptr);
  ------------------
  |  | 6512|      8|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      8|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 8]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6657|      8|          #ifndef NDEBUG
 6658|      8|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileOptions.csharp_namespace");
 6659|      8|          #endif  // !NDEBUG
 6660|      8|        } else
 6661|      0|          goto handle_unusual;
 6662|      8|        continue;
 6663|       |      // optional string swift_prefix = 39;
 6664|      8|      case 39:
  ------------------
  |  Branch (6664:7): [True: 0, False: 52]
  ------------------
 6665|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6666|      0|          auto str = _internal_mutable_swift_prefix();
 6667|      0|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 6668|      0|          CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6669|      0|          #ifndef NDEBUG
 6670|      0|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileOptions.swift_prefix");
 6671|      0|          #endif  // !NDEBUG
 6672|      0|        } else
 6673|      0|          goto handle_unusual;
 6674|      0|        continue;
 6675|       |      // optional string php_class_prefix = 40;
 6676|      0|      case 40:
  ------------------
  |  Branch (6676:7): [True: 0, False: 52]
  ------------------
 6677|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6678|      0|          auto str = _internal_mutable_php_class_prefix();
 6679|      0|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 6680|      0|          CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6681|      0|          #ifndef NDEBUG
 6682|      0|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileOptions.php_class_prefix");
 6683|      0|          #endif  // !NDEBUG
 6684|      0|        } else
 6685|      0|          goto handle_unusual;
 6686|      0|        continue;
 6687|       |      // optional string php_namespace = 41;
 6688|      0|      case 41:
  ------------------
  |  Branch (6688:7): [True: 0, False: 52]
  ------------------
 6689|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6690|      0|          auto str = _internal_mutable_php_namespace();
 6691|      0|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 6692|      0|          CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6693|      0|          #ifndef NDEBUG
 6694|      0|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileOptions.php_namespace");
 6695|      0|          #endif  // !NDEBUG
 6696|      0|        } else
 6697|      0|          goto handle_unusual;
 6698|      0|        continue;
 6699|       |      // optional bool php_generic_services = 42 [default = false];
 6700|      0|      case 42:
  ------------------
  |  Branch (6700:7): [True: 0, False: 52]
  ------------------
 6701|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6702|      0|          _Internal::set_has_php_generic_services(&has_bits);
 6703|      0|          _impl_.php_generic_services_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 6704|      0|          CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6705|      0|        } else
 6706|      0|          goto handle_unusual;
 6707|      0|        continue;
 6708|       |      // optional string php_metadata_namespace = 44;
 6709|      0|      case 44:
  ------------------
  |  Branch (6709:7): [True: 0, False: 52]
  ------------------
 6710|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6711|      0|          auto str = _internal_mutable_php_metadata_namespace();
 6712|      0|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 6713|      0|          CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6714|      0|          #ifndef NDEBUG
 6715|      0|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileOptions.php_metadata_namespace");
 6716|      0|          #endif  // !NDEBUG
 6717|      0|        } else
 6718|      0|          goto handle_unusual;
 6719|      0|        continue;
 6720|       |      // optional string ruby_package = 45;
 6721|      0|      case 45:
  ------------------
  |  Branch (6721:7): [True: 0, False: 52]
  ------------------
 6722|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6723|      0|          auto str = _internal_mutable_ruby_package();
 6724|      0|          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
 6725|      0|          CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6726|      0|          #ifndef NDEBUG
 6727|      0|          ::_pbi::VerifyUTF8(str, "google.protobuf.FileOptions.ruby_package");
 6728|      0|          #endif  // !NDEBUG
 6729|      0|        } else
 6730|      0|          goto handle_unusual;
 6731|      0|        continue;
 6732|       |      // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
 6733|      0|      case 999:
  ------------------
  |  Branch (6733:7): [True: 0, False: 52]
  ------------------
 6734|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6735|      0|          ptr -= 2;
 6736|      0|          do {
 6737|      0|            ptr += 2;
 6738|      0|            ptr = ctx->ParseMessage(_internal_add_uninterpreted_option(), ptr);
 6739|      0|            CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6740|      0|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (6740:17): [True: 0, False: 0]
  ------------------
 6741|      0|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<7994>(ptr));
  ------------------
  |  Branch (6741:20): [True: 0, False: 0]
  ------------------
 6742|      0|        } else
 6743|      0|          goto handle_unusual;
 6744|      0|        continue;
 6745|      0|      default:
  ------------------
  |  Branch (6745:7): [True: 0, False: 52]
  ------------------
 6746|      0|        goto handle_unusual;
 6747|     52|    }  // switch
 6748|      0|  handle_unusual:
 6749|      0|    if ((tag == 0) || ((tag & 7) == 4)) {
  ------------------
  |  Branch (6749:9): [True: 0, False: 0]
  |  Branch (6749:23): [True: 0, False: 0]
  ------------------
 6750|      0|      CHK_(ptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6751|      0|      ctx->SetLastTag(tag);
 6752|      0|      goto message_done;
 6753|      0|    }
 6754|      0|    if ((8000u <= tag)) {
  ------------------
  |  Branch (6754:9): [True: 0, False: 0]
  ------------------
 6755|      0|      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
 6756|      0|      CHK_(ptr != nullptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6757|      0|      continue;
 6758|      0|    }
 6759|      0|    ptr = UnknownFieldParse(
 6760|      0|        tag,
 6761|      0|        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
 6762|      0|        ptr, ctx);
 6763|      0|    CHK_(ptr != nullptr);
  ------------------
  |  | 6512|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6764|      0|  }  // while
 6765|      8|message_done:
 6766|      8|  _impl_._has_bits_.Or(has_bits);
 6767|      8|  return ptr;
 6768|      0|failure:
 6769|      0|  ptr = nullptr;
 6770|      0|  goto message_done;
 6771|      8|#undef CHK_
 6772|      8|}
_ZNK6google8protobuf11FileOptions18_InternalSerializeEPhPNS0_2io19EpsCopyOutputStreamE:
 6775|      2|    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
 6776|       |  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.FileOptions)
 6777|      2|  uint32_t cached_has_bits = 0;
 6778|      2|  (void) cached_has_bits;
 6779|       |
 6780|      2|  cached_has_bits = _impl_._has_bits_[0];
 6781|       |  // optional string java_package = 1;
 6782|      2|  if (cached_has_bits & 0x00000001u) {
  ------------------
  |  Branch (6782:7): [True: 2, False: 0]
  ------------------
 6783|      2|    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
 6784|      2|      this->_internal_java_package().data(), static_cast<int>(this->_internal_java_package().length()),
 6785|      2|      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
 6786|      2|      "google.protobuf.FileOptions.java_package");
 6787|      2|    target = stream->WriteStringMaybeAliased(
 6788|      2|        1, this->_internal_java_package(), target);
 6789|      2|  }
 6790|       |
 6791|       |  // optional string java_outer_classname = 8;
 6792|      2|  if (cached_has_bits & 0x00000002u) {
  ------------------
  |  Branch (6792:7): [True: 2, False: 0]
  ------------------
 6793|      2|    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
 6794|      2|      this->_internal_java_outer_classname().data(), static_cast<int>(this->_internal_java_outer_classname().length()),
 6795|      2|      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
 6796|      2|      "google.protobuf.FileOptions.java_outer_classname");
 6797|      2|    target = stream->WriteStringMaybeAliased(
 6798|      2|        8, this->_internal_java_outer_classname(), target);
 6799|      2|  }
 6800|       |
 6801|       |  // optional .google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = SPEED];
 6802|      2|  if (cached_has_bits & 0x00040000u) {
  ------------------
  |  Branch (6802:7): [True: 1, False: 1]
  ------------------
 6803|      1|    target = stream->EnsureSpace(target);
 6804|      1|    target = ::_pbi::WireFormatLite::WriteEnumToArray(
 6805|      1|      9, this->_internal_optimize_for(), target);
 6806|      1|  }
 6807|       |
 6808|       |  // optional bool java_multiple_files = 10 [default = false];
 6809|      2|  if (cached_has_bits & 0x00000400u) {
  ------------------
  |  Branch (6809:7): [True: 1, False: 1]
  ------------------
 6810|      1|    target = stream->EnsureSpace(target);
 6811|      1|    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_java_multiple_files(), target);
 6812|      1|  }
 6813|       |
 6814|       |  // optional string go_package = 11;
 6815|      2|  if (cached_has_bits & 0x00000004u) {
  ------------------
  |  Branch (6815:7): [True: 2, False: 0]
  ------------------
 6816|      2|    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
 6817|      2|      this->_internal_go_package().data(), static_cast<int>(this->_internal_go_package().length()),
 6818|      2|      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
 6819|      2|      "google.protobuf.FileOptions.go_package");
 6820|      2|    target = stream->WriteStringMaybeAliased(
 6821|      2|        11, this->_internal_go_package(), target);
 6822|      2|  }
 6823|       |
 6824|       |  // optional bool cc_generic_services = 16 [default = false];
 6825|      2|  if (cached_has_bits & 0x00002000u) {
  ------------------
  |  Branch (6825:7): [True: 0, False: 2]
  ------------------
 6826|      0|    target = stream->EnsureSpace(target);
 6827|      0|    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_cc_generic_services(), target);
 6828|      0|  }
 6829|       |
 6830|       |  // optional bool java_generic_services = 17 [default = false];
 6831|      2|  if (cached_has_bits & 0x00004000u) {
  ------------------
  |  Branch (6831:7): [True: 0, False: 2]
  ------------------
 6832|      0|    target = stream->EnsureSpace(target);
 6833|      0|    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_java_generic_services(), target);
 6834|      0|  }
 6835|       |
 6836|       |  // optional bool py_generic_services = 18 [default = false];
 6837|      2|  if (cached_has_bits & 0x00008000u) {
  ------------------
  |  Branch (6837:7): [True: 0, False: 2]
  ------------------
 6838|      0|    target = stream->EnsureSpace(target);
 6839|      0|    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_py_generic_services(), target);
 6840|      0|  }
 6841|       |
 6842|       |  // optional bool java_generate_equals_and_hash = 20 [deprecated = true];
 6843|      2|  if (cached_has_bits & 0x00000800u) {
  ------------------
  |  Branch (6843:7): [True: 0, False: 2]
  ------------------
 6844|      0|    target = stream->EnsureSpace(target);
 6845|      0|    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_java_generate_equals_and_hash(), target);
 6846|      0|  }
 6847|       |
 6848|       |  // optional bool deprecated = 23 [default = false];
 6849|      2|  if (cached_has_bits & 0x00020000u) {
  ------------------
  |  Branch (6849:7): [True: 0, False: 2]
  ------------------
 6850|      0|    target = stream->EnsureSpace(target);
 6851|      0|    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_deprecated(), target);
 6852|      0|  }
 6853|       |
 6854|       |  // optional bool java_string_check_utf8 = 27 [default = false];
 6855|      2|  if (cached_has_bits & 0x00001000u) {
  ------------------
  |  Branch (6855:7): [True: 0, False: 2]
  ------------------
 6856|      0|    target = stream->EnsureSpace(target);
 6857|      0|    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_java_string_check_utf8(), target);
 6858|      0|  }
 6859|       |
 6860|       |  // optional bool cc_enable_arenas = 31 [default = true];
 6861|      2|  if (cached_has_bits & 0x00080000u) {
  ------------------
  |  Branch (6861:7): [True: 1, False: 1]
  ------------------
 6862|      1|    target = stream->EnsureSpace(target);
 6863|      1|    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_cc_enable_arenas(), target);
 6864|      1|  }
 6865|       |
 6866|       |  // optional string objc_class_prefix = 36;
 6867|      2|  if (cached_has_bits & 0x00000008u) {
  ------------------
  |  Branch (6867:7): [True: 2, False: 0]
  ------------------
 6868|      2|    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
 6869|      2|      this->_internal_objc_class_prefix().data(), static_cast<int>(this->_internal_objc_class_prefix().length()),
 6870|      2|      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
 6871|      2|      "google.protobuf.FileOptions.objc_class_prefix");
 6872|      2|    target = stream->WriteStringMaybeAliased(
 6873|      2|        36, this->_internal_objc_class_prefix(), target);
 6874|      2|  }
 6875|       |
 6876|       |  // optional string csharp_namespace = 37;
 6877|      2|  if (cached_has_bits & 0x00000010u) {
  ------------------
  |  Branch (6877:7): [True: 2, False: 0]
  ------------------
 6878|      2|    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
 6879|      2|      this->_internal_csharp_namespace().data(), static_cast<int>(this->_internal_csharp_namespace().length()),
 6880|      2|      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
 6881|      2|      "google.protobuf.FileOptions.csharp_namespace");
 6882|      2|    target = stream->WriteStringMaybeAliased(
 6883|      2|        37, this->_internal_csharp_namespace(), target);
 6884|      2|  }
 6885|       |
 6886|       |  // optional string swift_prefix = 39;
 6887|      2|  if (cached_has_bits & 0x00000020u) {
  ------------------
  |  Branch (6887:7): [True: 0, False: 2]
  ------------------
 6888|      0|    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
 6889|      0|      this->_internal_swift_prefix().data(), static_cast<int>(this->_internal_swift_prefix().length()),
 6890|      0|      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
 6891|      0|      "google.protobuf.FileOptions.swift_prefix");
 6892|      0|    target = stream->WriteStringMaybeAliased(
 6893|      0|        39, this->_internal_swift_prefix(), target);
 6894|      0|  }
 6895|       |
 6896|       |  // optional string php_class_prefix = 40;
 6897|      2|  if (cached_has_bits & 0x00000040u) {
  ------------------
  |  Branch (6897:7): [True: 0, False: 2]
  ------------------
 6898|      0|    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
 6899|      0|      this->_internal_php_class_prefix().data(), static_cast<int>(this->_internal_php_class_prefix().length()),
 6900|      0|      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
 6901|      0|      "google.protobuf.FileOptions.php_class_prefix");
 6902|      0|    target = stream->WriteStringMaybeAliased(
 6903|      0|        40, this->_internal_php_class_prefix(), target);
 6904|      0|  }
 6905|       |
 6906|       |  // optional string php_namespace = 41;
 6907|      2|  if (cached_has_bits & 0x00000080u) {
  ------------------
  |  Branch (6907:7): [True: 0, False: 2]
  ------------------
 6908|      0|    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
 6909|      0|      this->_internal_php_namespace().data(), static_cast<int>(this->_internal_php_namespace().length()),
 6910|      0|      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
 6911|      0|      "google.protobuf.FileOptions.php_namespace");
 6912|      0|    target = stream->WriteStringMaybeAliased(
 6913|      0|        41, this->_internal_php_namespace(), target);
 6914|      0|  }
 6915|       |
 6916|       |  // optional bool php_generic_services = 42 [default = false];
 6917|      2|  if (cached_has_bits & 0x00010000u) {
  ------------------
  |  Branch (6917:7): [True: 0, False: 2]
  ------------------
 6918|      0|    target = stream->EnsureSpace(target);
 6919|      0|    target = ::_pbi::WireFormatLite::WriteBoolToArray(42, this->_internal_php_generic_services(), target);
 6920|      0|  }
 6921|       |
 6922|       |  // optional string php_metadata_namespace = 44;
 6923|      2|  if (cached_has_bits & 0x00000100u) {
  ------------------
  |  Branch (6923:7): [True: 0, False: 2]
  ------------------
 6924|      0|    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
 6925|      0|      this->_internal_php_metadata_namespace().data(), static_cast<int>(this->_internal_php_metadata_namespace().length()),
 6926|      0|      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
 6927|      0|      "google.protobuf.FileOptions.php_metadata_namespace");
 6928|      0|    target = stream->WriteStringMaybeAliased(
 6929|      0|        44, this->_internal_php_metadata_namespace(), target);
 6930|      0|  }
 6931|       |
 6932|       |  // optional string ruby_package = 45;
 6933|      2|  if (cached_has_bits & 0x00000200u) {
  ------------------
  |  Branch (6933:7): [True: 0, False: 2]
  ------------------
 6934|      0|    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
 6935|      0|      this->_internal_ruby_package().data(), static_cast<int>(this->_internal_ruby_package().length()),
 6936|      0|      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
 6937|      0|      "google.protobuf.FileOptions.ruby_package");
 6938|      0|    target = stream->WriteStringMaybeAliased(
 6939|      0|        45, this->_internal_ruby_package(), target);
 6940|      0|  }
 6941|       |
 6942|       |  // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
 6943|      2|  for (unsigned i = 0,
 6944|      2|      n = static_cast<unsigned>(this->_internal_uninterpreted_option_size()); i < n; i++) {
  ------------------
  |  Branch (6944:79): [True: 0, False: 2]
  ------------------
 6945|      0|    const auto& repfield = this->_internal_uninterpreted_option(i);
 6946|      0|    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
 6947|      0|        InternalWriteMessage(999, repfield, repfield.GetCachedSize(), target, stream);
 6948|      0|  }
 6949|       |
 6950|       |  // Extension range [1000, 536870912)
 6951|      2|  target = _impl_._extensions_._InternalSerialize(
 6952|      2|  internal_default_instance(), 1000, 536870912, target, stream);
 6953|       |
 6954|      2|  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
  ------------------
  |  |  490|      2|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 2]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 2]
  |  |  ------------------
  ------------------
 6955|      0|    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
 6956|      0|        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
 6957|      0|  }
 6958|       |  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.FileOptions)
 6959|      2|  return target;
 6960|      2|}
_ZNK6google8protobuf11FileOptions12ByteSizeLongEv:
 6962|      2|size_t FileOptions::ByteSizeLong() const {
 6963|       |// @@protoc_insertion_point(message_byte_size_start:google.protobuf.FileOptions)
 6964|      2|  size_t total_size = 0;
 6965|       |
 6966|      2|  total_size += _impl_._extensions_.ByteSize();
 6967|       |
 6968|      2|  uint32_t cached_has_bits = 0;
 6969|       |  // Prevent compiler warnings about cached_has_bits being unused
 6970|      2|  (void) cached_has_bits;
 6971|       |
 6972|       |  // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
 6973|      2|  total_size += 2UL * this->_internal_uninterpreted_option_size();
 6974|      2|  for (const auto& msg : this->_impl_.uninterpreted_option_) {
  ------------------
  |  Branch (6974:24): [True: 0, False: 2]
  ------------------
 6975|      0|    total_size +=
 6976|      0|      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
 6977|      0|  }
 6978|       |
 6979|      2|  cached_has_bits = _impl_._has_bits_[0];
 6980|      2|  if (cached_has_bits & 0x000000ffu) {
  ------------------
  |  Branch (6980:7): [True: 2, False: 0]
  ------------------
 6981|       |    // optional string java_package = 1;
 6982|      2|    if (cached_has_bits & 0x00000001u) {
  ------------------
  |  Branch (6982:9): [True: 2, False: 0]
  ------------------
 6983|      2|      total_size += 1 +
 6984|      2|        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
 6985|      2|          this->_internal_java_package());
 6986|      2|    }
 6987|       |
 6988|       |    // optional string java_outer_classname = 8;
 6989|      2|    if (cached_has_bits & 0x00000002u) {
  ------------------
  |  Branch (6989:9): [True: 2, False: 0]
  ------------------
 6990|      2|      total_size += 1 +
 6991|      2|        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
 6992|      2|          this->_internal_java_outer_classname());
 6993|      2|    }
 6994|       |
 6995|       |    // optional string go_package = 11;
 6996|      2|    if (cached_has_bits & 0x00000004u) {
  ------------------
  |  Branch (6996:9): [True: 2, False: 0]
  ------------------
 6997|      2|      total_size += 1 +
 6998|      2|        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
 6999|      2|          this->_internal_go_package());
 7000|      2|    }
 7001|       |
 7002|       |    // optional string objc_class_prefix = 36;
 7003|      2|    if (cached_has_bits & 0x00000008u) {
  ------------------
  |  Branch (7003:9): [True: 2, False: 0]
  ------------------
 7004|      2|      total_size += 2 +
 7005|      2|        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
 7006|      2|          this->_internal_objc_class_prefix());
 7007|      2|    }
 7008|       |
 7009|       |    // optional string csharp_namespace = 37;
 7010|      2|    if (cached_has_bits & 0x00000010u) {
  ------------------
  |  Branch (7010:9): [True: 2, False: 0]
  ------------------
 7011|      2|      total_size += 2 +
 7012|      2|        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
 7013|      2|          this->_internal_csharp_namespace());
 7014|      2|    }
 7015|       |
 7016|       |    // optional string swift_prefix = 39;
 7017|      2|    if (cached_has_bits & 0x00000020u) {
  ------------------
  |  Branch (7017:9): [True: 0, False: 2]
  ------------------
 7018|      0|      total_size += 2 +
 7019|      0|        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
 7020|      0|          this->_internal_swift_prefix());
 7021|      0|    }
 7022|       |
 7023|       |    // optional string php_class_prefix = 40;
 7024|      2|    if (cached_has_bits & 0x00000040u) {
  ------------------
  |  Branch (7024:9): [True: 0, False: 2]
  ------------------
 7025|      0|      total_size += 2 +
 7026|      0|        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
 7027|      0|          this->_internal_php_class_prefix());
 7028|      0|    }
 7029|       |
 7030|       |    // optional string php_namespace = 41;
 7031|      2|    if (cached_has_bits & 0x00000080u) {
  ------------------
  |  Branch (7031:9): [True: 0, False: 2]
  ------------------
 7032|      0|      total_size += 2 +
 7033|      0|        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
 7034|      0|          this->_internal_php_namespace());
 7035|      0|    }
 7036|       |
 7037|      2|  }
 7038|      2|  if (cached_has_bits & 0x0000ff00u) {
  ------------------
  |  Branch (7038:7): [True: 1, False: 1]
  ------------------
 7039|       |    // optional string php_metadata_namespace = 44;
 7040|      1|    if (cached_has_bits & 0x00000100u) {
  ------------------
  |  Branch (7040:9): [True: 0, False: 1]
  ------------------
 7041|      0|      total_size += 2 +
 7042|      0|        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
 7043|      0|          this->_internal_php_metadata_namespace());
 7044|      0|    }
 7045|       |
 7046|       |    // optional string ruby_package = 45;
 7047|      1|    if (cached_has_bits & 0x00000200u) {
  ------------------
  |  Branch (7047:9): [True: 0, False: 1]
  ------------------
 7048|      0|      total_size += 2 +
 7049|      0|        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
 7050|      0|          this->_internal_ruby_package());
 7051|      0|    }
 7052|       |
 7053|       |    // optional bool java_multiple_files = 10 [default = false];
 7054|      1|    if (cached_has_bits & 0x00000400u) {
  ------------------
  |  Branch (7054:9): [True: 1, False: 0]
  ------------------
 7055|      1|      total_size += 1 + 1;
 7056|      1|    }
 7057|       |
 7058|       |    // optional bool java_generate_equals_and_hash = 20 [deprecated = true];
 7059|      1|    if (cached_has_bits & 0x00000800u) {
  ------------------
  |  Branch (7059:9): [True: 0, False: 1]
  ------------------
 7060|      0|      total_size += 2 + 1;
 7061|      0|    }
 7062|       |
 7063|       |    // optional bool java_string_check_utf8 = 27 [default = false];
 7064|      1|    if (cached_has_bits & 0x00001000u) {
  ------------------
  |  Branch (7064:9): [True: 0, False: 1]
  ------------------
 7065|      0|      total_size += 2 + 1;
 7066|      0|    }
 7067|       |
 7068|       |    // optional bool cc_generic_services = 16 [default = false];
 7069|      1|    if (cached_has_bits & 0x00002000u) {
  ------------------
  |  Branch (7069:9): [True: 0, False: 1]
  ------------------
 7070|      0|      total_size += 2 + 1;
 7071|      0|    }
 7072|       |
 7073|       |    // optional bool java_generic_services = 17 [default = false];
 7074|      1|    if (cached_has_bits & 0x00004000u) {
  ------------------
  |  Branch (7074:9): [True: 0, False: 1]
  ------------------
 7075|      0|      total_size += 2 + 1;
 7076|      0|    }
 7077|       |
 7078|       |    // optional bool py_generic_services = 18 [default = false];
 7079|      1|    if (cached_has_bits & 0x00008000u) {
  ------------------
  |  Branch (7079:9): [True: 0, False: 1]
  ------------------
 7080|      0|      total_size += 2 + 1;
 7081|      0|    }
 7082|       |
 7083|      1|  }
 7084|      2|  if (cached_has_bits & 0x000f0000u) {
  ------------------
  |  Branch (7084:7): [True: 1, False: 1]
  ------------------
 7085|       |    // optional bool php_generic_services = 42 [default = false];
 7086|      1|    if (cached_has_bits & 0x00010000u) {
  ------------------
  |  Branch (7086:9): [True: 0, False: 1]
  ------------------
 7087|      0|      total_size += 2 + 1;
 7088|      0|    }
 7089|       |
 7090|       |    // optional bool deprecated = 23 [default = false];
 7091|      1|    if (cached_has_bits & 0x00020000u) {
  ------------------
  |  Branch (7091:9): [True: 0, False: 1]
  ------------------
 7092|      0|      total_size += 2 + 1;
 7093|      0|    }
 7094|       |
 7095|       |    // optional .google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = SPEED];
 7096|      1|    if (cached_has_bits & 0x00040000u) {
  ------------------
  |  Branch (7096:9): [True: 1, False: 0]
  ------------------
 7097|      1|      total_size += 1 +
 7098|      1|        ::_pbi::WireFormatLite::EnumSize(this->_internal_optimize_for());
 7099|      1|    }
 7100|       |
 7101|       |    // optional bool cc_enable_arenas = 31 [default = true];
 7102|      1|    if (cached_has_bits & 0x00080000u) {
  ------------------
  |  Branch (7102:9): [True: 1, False: 0]
  ------------------
 7103|      1|      total_size += 2 + 1;
 7104|      1|    }
 7105|       |
 7106|      1|  }
 7107|      2|  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
 7108|      2|}
_ZNK6google8protobuf11FileOptions13IsInitializedEv:
 7206|     12|bool FileOptions::IsInitialized() const {
 7207|     12|  if (!_impl_._extensions_.IsInitialized()) {
  ------------------
  |  Branch (7207:7): [True: 0, False: 12]
  ------------------
 7208|      0|    return false;
 7209|      0|  }
 7210|       |
 7211|     12|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uninterpreted_option_))
  ------------------
  |  Branch (7211:7): [True: 0, False: 12]
  ------------------
 7212|      0|    return false;
 7213|     12|  return true;
 7214|     12|}
_ZN6google8protobuf12FieldOptionsC2EPNS0_5ArenaEb:
 7658|     16|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 7659|     16|  SharedCtor(arena, is_message_owned);
 7660|       |  // @@protoc_insertion_point(arena_constructor:google.protobuf.FieldOptions)
 7661|     16|}
_ZN6google8protobuf12FieldOptionsD2Ev:
 7705|     12|FieldOptions::~FieldOptions() {
 7706|       |  // @@protoc_insertion_point(destructor:google.protobuf.FieldOptions)
 7707|     12|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (7707:13): [True: 0, False: 12]
  ------------------
 7708|      0|  (void)arena;
 7709|      0|    return;
 7710|      0|  }
 7711|     12|  SharedDtor();
 7712|     12|}
_ZN6google8protobuf12FieldOptions5ClearEv:
 7724|      4|void FieldOptions::Clear() {
 7725|       |// @@protoc_insertion_point(message_clear_start:google.protobuf.FieldOptions)
 7726|      4|  uint32_t cached_has_bits = 0;
 7727|       |  // Prevent compiler warnings about cached_has_bits being unused
 7728|      4|  (void) cached_has_bits;
 7729|       |
 7730|      4|  _impl_._extensions_.Clear();
 7731|      4|  _impl_.uninterpreted_option_.Clear();
 7732|      4|  cached_has_bits = _impl_._has_bits_[0];
 7733|      4|  if (cached_has_bits & 0x0000007fu) {
  ------------------
  |  Branch (7733:7): [True: 0, False: 4]
  ------------------
 7734|      0|    ::memset(&_impl_.ctype_, 0, static_cast<size_t>(
 7735|      0|        reinterpret_cast<char*>(&_impl_.weak_) -
 7736|      0|        reinterpret_cast<char*>(&_impl_.ctype_)) + sizeof(_impl_.weak_));
 7737|      0|  }
 7738|      4|  _impl_._has_bits_.Clear();
 7739|      4|  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
 7740|      4|}
_ZN6google8protobuf12FieldOptions14_InternalParseEPKcPNS0_8internal12ParseContextE:
 7742|     16|const char* FieldOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
 7743|     16|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
 7744|     16|  _Internal::HasBits has_bits{};
 7745|     32|  while (!ctx->Done(&ptr)) {
  ------------------
  |  Branch (7745:10): [True: 16, False: 16]
  ------------------
 7746|     16|    uint32_t tag;
 7747|     16|    ptr = ::_pbi::ReadTag(ptr, &tag);
 7748|     16|    switch (tag >> 3) {
 7749|       |      // optional .google.protobuf.FieldOptions.CType ctype = 1 [default = STRING];
 7750|      0|      case 1:
  ------------------
  |  Branch (7750:7): [True: 0, False: 16]
  ------------------
 7751|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7752|      0|          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 7753|      0|          CHK_(ptr);
  ------------------
  |  | 7743|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7754|      0|          if (PROTOBUF_PREDICT_TRUE(::PROTOBUF_NAMESPACE_ID::FieldOptions_CType_IsValid(val))) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7755|      0|            _internal_set_ctype(static_cast<::PROTOBUF_NAMESPACE_ID::FieldOptions_CType>(val));
 7756|      0|          } else {
 7757|      0|            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
 7758|      0|          }
 7759|      0|        } else
 7760|      0|          goto handle_unusual;
 7761|      0|        continue;
 7762|       |      // optional bool packed = 2;
 7763|     12|      case 2:
  ------------------
  |  Branch (7763:7): [True: 12, False: 4]
  ------------------
 7764|     12|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
  ------------------
  |  |  489|     12|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 12, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 7765|     12|          _Internal::set_has_packed(&has_bits);
 7766|     12|          _impl_.packed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 7767|     12|          CHK_(ptr);
  ------------------
  |  | 7743|     12|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|     12|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 12]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 12]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7768|     12|        } else
 7769|      0|          goto handle_unusual;
 7770|     12|        continue;
 7771|       |      // optional bool deprecated = 3 [default = false];
 7772|     12|      case 3:
  ------------------
  |  Branch (7772:7): [True: 4, False: 12]
  ------------------
 7773|      4|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
  ------------------
  |  |  489|      4|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 4, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 7774|      4|          _Internal::set_has_deprecated(&has_bits);
 7775|      4|          _impl_.deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 7776|      4|          CHK_(ptr);
  ------------------
  |  | 7743|      4|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      4|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 4]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 4]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7777|      4|        } else
 7778|      0|          goto handle_unusual;
 7779|      4|        continue;
 7780|       |      // optional bool lazy = 5 [default = false];
 7781|      4|      case 5:
  ------------------
  |  Branch (7781:7): [True: 0, False: 16]
  ------------------
 7782|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7783|      0|          _Internal::set_has_lazy(&has_bits);
 7784|      0|          _impl_.lazy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 7785|      0|          CHK_(ptr);
  ------------------
  |  | 7743|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7786|      0|        } else
 7787|      0|          goto handle_unusual;
 7788|      0|        continue;
 7789|       |      // optional .google.protobuf.FieldOptions.JSType jstype = 6 [default = JS_NORMAL];
 7790|      0|      case 6:
  ------------------
  |  Branch (7790:7): [True: 0, False: 16]
  ------------------
 7791|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 7793|      0|          CHK_(ptr);
  ------------------
  |  | 7743|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7794|      0|          if (PROTOBUF_PREDICT_TRUE(::PROTOBUF_NAMESPACE_ID::FieldOptions_JSType_IsValid(val))) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7795|      0|            _internal_set_jstype(static_cast<::PROTOBUF_NAMESPACE_ID::FieldOptions_JSType>(val));
 7796|      0|          } else {
 7797|      0|            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
 7798|      0|          }
 7799|      0|        } else
 7800|      0|          goto handle_unusual;
 7801|      0|        continue;
 7802|       |      // optional bool weak = 10 [default = false];
 7803|      0|      case 10:
  ------------------
  |  Branch (7803:7): [True: 0, False: 16]
  ------------------
 7804|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7805|      0|          _Internal::set_has_weak(&has_bits);
 7806|      0|          _impl_.weak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 7807|      0|          CHK_(ptr);
  ------------------
  |  | 7743|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7808|      0|        } else
 7809|      0|          goto handle_unusual;
 7810|      0|        continue;
 7811|       |      // optional bool unverified_lazy = 15 [default = false];
 7812|      0|      case 15:
  ------------------
  |  Branch (7812:7): [True: 0, False: 16]
  ------------------
 7813|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7814|      0|          _Internal::set_has_unverified_lazy(&has_bits);
 7815|      0|          _impl_.unverified_lazy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 7816|      0|          CHK_(ptr);
  ------------------
  |  | 7743|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7817|      0|        } else
 7818|      0|          goto handle_unusual;
 7819|      0|        continue;
 7820|       |      // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
 7821|      0|      case 999:
  ------------------
  |  Branch (7821:7): [True: 0, False: 16]
  ------------------
 7822|      0|        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7823|      0|          ptr -= 2;
 7824|      0|          do {
 7825|      0|            ptr += 2;
 7826|      0|            ptr = ctx->ParseMessage(_internal_add_uninterpreted_option(), ptr);
 7827|      0|            CHK_(ptr);
  ------------------
  |  | 7743|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7828|      0|            if (!ctx->DataAvailable(ptr)) break;
  ------------------
  |  Branch (7828:17): [True: 0, False: 0]
  ------------------
 7829|      0|          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<7994>(ptr));
  ------------------
  |  Branch (7829:20): [True: 0, False: 0]
  ------------------
 7830|      0|        } else
 7831|      0|          goto handle_unusual;
 7832|      0|        continue;
 7833|      0|      default:
  ------------------
  |  Branch (7833:7): [True: 0, False: 16]
  ------------------
 7834|      0|        goto handle_unusual;
 7835|     16|    }  // switch
 7836|      0|  handle_unusual:
 7837|      0|    if ((tag == 0) || ((tag & 7) == 4)) {
  ------------------
  |  Branch (7837:9): [True: 0, False: 0]
  |  Branch (7837:23): [True: 0, False: 0]
  ------------------
 7838|      0|      CHK_(ptr);
  ------------------
  |  | 7743|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7839|      0|      ctx->SetLastTag(tag);
 7840|      0|      goto message_done;
 7841|      0|    }
 7842|      0|    if ((8000u <= tag)) {
  ------------------
  |  Branch (7842:9): [True: 0, False: 0]
  ------------------
 7843|      0|      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
 7844|      0|      CHK_(ptr != nullptr);
  ------------------
  |  | 7743|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7845|      0|      continue;
 7846|      0|    }
 7847|      0|    ptr = UnknownFieldParse(
 7848|      0|        tag,
 7849|      0|        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
 7850|      0|        ptr, ctx);
 7851|      0|    CHK_(ptr != nullptr);
  ------------------
  |  | 7743|      0|#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  |  |  ------------------
  |  |  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7852|      0|  }  // while
 7853|     16|message_done:
 7854|     16|  _impl_._has_bits_.Or(has_bits);
 7855|     16|  return ptr;
 7856|      0|failure:
 7857|      0|  ptr = nullptr;
 7858|      0|  goto message_done;
 7859|     16|#undef CHK_
 7860|     16|}
_ZNK6google8protobuf12FieldOptions18_InternalSerializeEPhPNS0_2io19EpsCopyOutputStreamE:
 7863|      4|    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
 7864|       |  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.FieldOptions)
 7865|      4|  uint32_t cached_has_bits = 0;
 7866|      4|  (void) cached_has_bits;
 7867|       |
 7868|      4|  cached_has_bits = _impl_._has_bits_[0];
 7869|       |  // optional .google.protobuf.FieldOptions.CType ctype = 1 [default = STRING];
 7870|      4|  if (cached_has_bits & 0x00000001u) {
  ------------------
  |  Branch (7870:7): [True: 0, False: 4]
  ------------------
 7871|      0|    target = stream->EnsureSpace(target);
 7872|      0|    target = ::_pbi::WireFormatLite::WriteEnumToArray(
 7873|      0|      1, this->_internal_ctype(), target);
 7874|      0|  }
 7875|       |
 7876|       |  // optional bool packed = 2;
 7877|      4|  if (cached_has_bits & 0x00000004u) {
  ------------------
  |  Branch (7877:7): [True: 3, False: 1]
  ------------------
 7878|      3|    target = stream->EnsureSpace(target);
 7879|      3|    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_packed(), target);
 7880|      3|  }
 7881|       |
 7882|       |  // optional bool deprecated = 3 [default = false];
 7883|      4|  if (cached_has_bits & 0x00000020u) {
  ------------------
  |  Branch (7883:7): [True: 1, False: 3]
  ------------------
 7884|      1|    target = stream->EnsureSpace(target);
 7885|      1|    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_deprecated(), target);
 7886|      1|  }
 7887|       |
 7888|       |  // optional bool lazy = 5 [default = false];
 7889|      4|  if (cached_has_bits & 0x00000008u) {
  ------------------
  |  Branch (7889:7): [True: 0, False: 4]
  ------------------
 7890|      0|    target = stream->EnsureSpace(target);
 7891|      0|    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_lazy(), target);
 7892|      0|  }
 7893|       |
 7894|       |  // optional .google.protobuf.FieldOptions.JSType jstype = 6 [default = JS_NORMAL];
 7895|      4|  if (cached_has_bits & 0x00000002u) {
  ------------------
  |  Branch (7895:7): [True: 0, False: 4]
  ------------------
 7896|      0|    target = stream->EnsureSpace(target);
 7897|      0|    target = ::_pbi::WireFormatLite::WriteEnumToArray(
 7898|      0|      6, this->_internal_jstype(), target);
 7899|      0|  }
 7900|       |
 7901|       |  // optional bool weak = 10 [default = false];
 7902|      4|  if (cached_has_bits & 0x00000040u) {
  ------------------
  |  Branch (7902:7): [True: 0, False: 4]
  ------------------
 7903|      0|    target = stream->EnsureSpace(target);
 7904|      0|    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_weak(), target);
 7905|      0|  }
 7906|       |
 7907|       |  // optional bool unverified_lazy = 15 [default = false];
 7908|      4|  if (cached_has_bits & 0x00000010u) {
  ------------------
  |  Branch (7908:7): [True: 0, False: 4]
  ------------------
 7909|      0|    target = stream->EnsureSpace(target);
 7910|      0|    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_unverified_lazy(), target);
 7911|      0|  }
 7912|       |
 7913|       |  // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
 7914|      4|  for (unsigned i = 0,
 7915|      4|      n = static_cast<unsigned>(this->_internal_uninterpreted_option_size()); i < n; i++) {
  ------------------
  |  Branch (7915:79): [True: 0, False: 4]
  ------------------
 7916|      0|    const auto& repfield = this->_internal_uninterpreted_option(i);
 7917|      0|    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
 7918|      0|        InternalWriteMessage(999, repfield, repfield.GetCachedSize(), target, stream);
 7919|      0|  }
 7920|       |
 7921|       |  // Extension range [1000, 536870912)
 7922|      4|  target = _impl_._extensions_._InternalSerialize(
 7923|      4|  internal_default_instance(), 1000, 536870912, target, stream);
 7924|       |
 7925|      4|  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
  ------------------
  |  |  490|      4|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 4]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 7926|      0|    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
 7927|      0|        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
 7928|      0|  }
 7929|       |  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.FieldOptions)
 7930|      4|  return target;
 7931|      4|}
_ZNK6google8protobuf12FieldOptions12ByteSizeLongEv:
 7933|      4|size_t FieldOptions::ByteSizeLong() const {
 7934|       |// @@protoc_insertion_point(message_byte_size_start:google.protobuf.FieldOptions)
 7935|      4|  size_t total_size = 0;
 7936|       |
 7937|      4|  total_size += _impl_._extensions_.ByteSize();
 7938|       |
 7939|      4|  uint32_t cached_has_bits = 0;
 7940|       |  // Prevent compiler warnings about cached_has_bits being unused
 7941|      4|  (void) cached_has_bits;
 7942|       |
 7943|       |  // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
 7944|      4|  total_size += 2UL * this->_internal_uninterpreted_option_size();
 7945|      4|  for (const auto& msg : this->_impl_.uninterpreted_option_) {
  ------------------
  |  Branch (7945:24): [True: 0, False: 4]
  ------------------
 7946|      0|    total_size +=
 7947|      0|      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
 7948|      0|  }
 7949|       |
 7950|      4|  cached_has_bits = _impl_._has_bits_[0];
 7951|      4|  if (cached_has_bits & 0x0000007fu) {
  ------------------
  |  Branch (7951:7): [True: 4, False: 0]
  ------------------
 7952|       |    // optional .google.protobuf.FieldOptions.CType ctype = 1 [default = STRING];
 7953|      4|    if (cached_has_bits & 0x00000001u) {
  ------------------
  |  Branch (7953:9): [True: 0, False: 4]
  ------------------
 7954|      0|      total_size += 1 +
 7955|      0|        ::_pbi::WireFormatLite::EnumSize(this->_internal_ctype());
 7956|      0|    }
 7957|       |
 7958|       |    // optional .google.protobuf.FieldOptions.JSType jstype = 6 [default = JS_NORMAL];
 7959|      4|    if (cached_has_bits & 0x00000002u) {
  ------------------
  |  Branch (7959:9): [True: 0, False: 4]
  ------------------
 7960|      0|      total_size += 1 +
 7961|      0|        ::_pbi::WireFormatLite::EnumSize(this->_internal_jstype());
 7962|      0|    }
 7963|       |
 7964|       |    // optional bool packed = 2;
 7965|      4|    if (cached_has_bits & 0x00000004u) {
  ------------------
  |  Branch (7965:9): [True: 3, False: 1]
  ------------------
 7966|      3|      total_size += 1 + 1;
 7967|      3|    }
 7968|       |
 7969|       |    // optional bool lazy = 5 [default = false];
 7970|      4|    if (cached_has_bits & 0x00000008u) {
  ------------------
  |  Branch (7970:9): [True: 0, False: 4]
  ------------------
 7971|      0|      total_size += 1 + 1;
 7972|      0|    }
 7973|       |
 7974|       |    // optional bool unverified_lazy = 15 [default = false];
 7975|      4|    if (cached_has_bits & 0x00000010u) {
  ------------------
  |  Branch (7975:9): [True: 0, False: 4]
  ------------------
 7976|      0|      total_size += 1 + 1;
 7977|      0|    }
 7978|       |
 7979|       |    // optional bool deprecated = 3 [default = false];
 7980|      4|    if (cached_has_bits & 0x00000020u) {
  ------------------
  |  Branch (7980:9): [True: 1, False: 3]
  ------------------
 7981|      1|      total_size += 1 + 1;
 7982|      1|    }
 7983|       |
 7984|       |    // optional bool weak = 10 [default = false];
 7985|      4|    if (cached_has_bits & 0x00000040u) {
  ------------------
  |  Branch (7985:9): [True: 0, False: 4]
  ------------------
 7986|      0|      total_size += 1 + 1;
 7987|      0|    }
 7988|       |
 7989|      4|  }
 7990|      4|  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
 7991|      4|}
_ZNK6google8protobuf12FieldOptions13IsInitializedEv:
 8045|     24|bool FieldOptions::IsInitialized() const {
 8046|     24|  if (!_impl_._extensions_.IsInitialized()) {
  ------------------
  |  Branch (8046:7): [True: 0, False: 24]
  ------------------
 8047|      0|    return false;
 8048|      0|  }
 8049|       |
 8050|     24|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uninterpreted_option_))
  ------------------
  |  Branch (8050:7): [True: 0, False: 24]
  ------------------
 8051|      0|    return false;
 8052|     24|  return true;
 8053|     24|}
_ZN6google8protobuf5Arena18CreateMaybeMessageINS0_30DescriptorProto_ExtensionRangeEJEEEPT_PS1_DpOT0_:
11249|     27|Arena::CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::DescriptorProto_ExtensionRange >(Arena* arena) {
11250|     27|  return Arena::CreateMessageInternal< ::PROTOBUF_NAMESPACE_ID::DescriptorProto_ExtensionRange >(arena);
11251|     27|}
_ZN6google8protobuf5Arena18CreateMaybeMessageINS0_29DescriptorProto_ReservedRangeEJEEEPT_PS1_DpOT0_:
11253|     24|Arena::CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::DescriptorProto_ReservedRange >(Arena* arena) {
11254|     24|  return Arena::CreateMessageInternal< ::PROTOBUF_NAMESPACE_ID::DescriptorProto_ReservedRange >(arena);
11255|     24|}
_ZN6google8protobuf5Arena18CreateMaybeMessageINS0_15DescriptorProtoEJEEEPT_PS1_DpOT0_:
11257|    201|Arena::CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::DescriptorProto >(Arena* arena) {
11258|    201|  return Arena::CreateMessageInternal< ::PROTOBUF_NAMESPACE_ID::DescriptorProto >(arena);
11259|    201|}
_ZN6google8protobuf5Arena18CreateMaybeMessageINS0_20FieldDescriptorProtoEJEEEPT_PS1_DpOT0_:
11265|    825|Arena::CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto >(Arena* arena) {
11266|    825|  return Arena::CreateMessageInternal< ::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto >(arena);
11267|    825|}
_ZN6google8protobuf5Arena18CreateMaybeMessageINS0_20OneofDescriptorProtoEJEEEPT_PS1_DpOT0_:
11269|     33|Arena::CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::OneofDescriptorProto >(Arena* arena) {
11270|     33|  return Arena::CreateMessageInternal< ::PROTOBUF_NAMESPACE_ID::OneofDescriptorProto >(arena);
11271|     33|}
_ZN6google8protobuf5Arena18CreateMaybeMessageINS0_19EnumDescriptorProtoEJEEEPT_PS1_DpOT0_:
11277|     18|Arena::CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::EnumDescriptorProto >(Arena* arena) {
11278|     18|  return Arena::CreateMessageInternal< ::PROTOBUF_NAMESPACE_ID::EnumDescriptorProto >(arena);
11279|     18|}
_ZN6google8protobuf5Arena18CreateMaybeMessageINS0_24EnumValueDescriptorProtoEJEEEPT_PS1_DpOT0_:
11281|     99|Arena::CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::EnumValueDescriptorProto >(Arena* arena) {
11282|     99|  return Arena::CreateMessageInternal< ::PROTOBUF_NAMESPACE_ID::EnumValueDescriptorProto >(arena);
11283|     99|}
_ZN6google8protobuf5Arena18CreateMaybeMessageINS0_11FileOptionsEJEEEPT_PS1_DpOT0_:
11293|      6|Arena::CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::FileOptions >(Arena* arena) {
11294|      6|  return Arena::CreateMessageInternal< ::PROTOBUF_NAMESPACE_ID::FileOptions >(arena);
11295|      6|}
_ZN6google8protobuf5Arena18CreateMaybeMessageINS0_12FieldOptionsEJEEEPT_PS1_DpOT0_:
11301|     12|Arena::CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::FieldOptions >(Arena* arena) {
11302|     12|  return Arena::CreateMessageInternal< ::PROTOBUF_NAMESPACE_ID::FieldOptions >(arena);
11303|     12|}
_ZN6google8protobuf19FileDescriptorProto10SharedCtorEPNS0_5ArenaEb:
 1602|      9|    ::_pb::Arena* arena, bool is_message_owned) {
 1603|      9|  (void)arena;
 1604|      9|  (void)is_message_owned;
 1605|      9|  new (&_impl_) Impl_{
 1606|      9|      decltype(_impl_._has_bits_){}
 1607|      9|    , /*decltype(_impl_._cached_size_)*/{}
 1608|      9|    , decltype(_impl_.dependency_){arena}
 1609|      9|    , decltype(_impl_.message_type_){arena}
 1610|      9|    , decltype(_impl_.enum_type_){arena}
 1611|      9|    , decltype(_impl_.service_){arena}
 1612|      9|    , decltype(_impl_.extension_){arena}
 1613|      9|    , decltype(_impl_.public_dependency_){arena}
 1614|      9|    , decltype(_impl_.weak_dependency_){arena}
 1615|      9|    , decltype(_impl_.name_){}
 1616|      9|    , decltype(_impl_.package_){}
 1617|      9|    , decltype(_impl_.syntax_){}
 1618|      9|    , decltype(_impl_.options_){nullptr}
 1619|      9|    , decltype(_impl_.source_code_info_){nullptr}
 1620|      9|  };
 1621|      9|  _impl_.name_.InitDefault();
 1622|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 1623|       |    _impl_.name_.Set("", GetArenaForAllocation());
 1624|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 1625|      9|  _impl_.package_.InitDefault();
 1626|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 1627|       |    _impl_.package_.Set("", GetArenaForAllocation());
 1628|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 1629|      9|  _impl_.syntax_.InitDefault();
 1630|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 1631|       |    _impl_.syntax_.Set("", GetArenaForAllocation());
 1632|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 1633|      9|}
_ZN6google8protobuf19FileDescriptorProto10SharedDtorEv:
 1644|      9|inline void FileDescriptorProto::SharedDtor() {
 1645|      9|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|      9|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      9|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      9|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 9, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1646|      9|  _impl_.dependency_.~RepeatedPtrField();
 1647|      9|  _impl_.message_type_.~RepeatedPtrField();
 1648|      9|  _impl_.enum_type_.~RepeatedPtrField();
 1649|      9|  _impl_.service_.~RepeatedPtrField();
 1650|      9|  _impl_.extension_.~RepeatedPtrField();
 1651|      9|  _impl_.public_dependency_.~RepeatedField();
 1652|      9|  _impl_.weak_dependency_.~RepeatedField();
 1653|      9|  _impl_.name_.Destroy();
 1654|      9|  _impl_.package_.Destroy();
 1655|      9|  _impl_.syntax_.Destroy();
 1656|      9|  if (this != internal_default_instance()) delete _impl_.options_;
  ------------------
  |  Branch (1656:7): [True: 9, False: 0]
  ------------------
 1657|      9|  if (this != internal_default_instance()) delete _impl_.source_code_info_;
  ------------------
  |  Branch (1657:7): [True: 9, False: 0]
  ------------------
 1658|      9|}
_ZN6google8protobuf30DescriptorProto_ExtensionRange10SharedCtorEPNS0_5ArenaEb:
 2255|     27|    ::_pb::Arena* arena, bool is_message_owned) {
 2256|     27|  (void)arena;
 2257|     27|  (void)is_message_owned;
 2258|     27|  new (&_impl_) Impl_{
 2259|     27|      decltype(_impl_._has_bits_){}
 2260|     27|    , /*decltype(_impl_._cached_size_)*/{}
 2261|     27|    , decltype(_impl_.options_){nullptr}
 2262|     27|    , decltype(_impl_.start_){0}
 2263|     27|    , decltype(_impl_.end_){0}
 2264|     27|  };
 2265|     27|}
_ZN6google8protobuf30DescriptorProto_ExtensionRange10SharedDtorEv:
 2276|     27|inline void DescriptorProto_ExtensionRange::SharedDtor() {
 2277|     27|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|     27|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|     27|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     27|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 27, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2278|     27|  if (this != internal_default_instance()) delete _impl_.options_;
  ------------------
  |  Branch (2278:7): [True: 27, False: 0]
  ------------------
 2279|     27|}
_ZN6google8protobuf30DescriptorProto_ExtensionRange9_Internal13set_has_startEPNS0_8internal7HasBitsILm1EEE:
 2212|     27|  static void set_has_start(HasBits* has_bits) {
 2213|     27|    (*has_bits)[0] |= 2u;
 2214|     27|  }
_ZN6google8protobuf30DescriptorProto_ExtensionRange9_Internal11set_has_endEPNS0_8internal7HasBitsILm1EEE:
 2215|     27|  static void set_has_end(HasBits* has_bits) {
 2216|     27|    (*has_bits)[0] |= 4u;
 2217|     27|  }
_ZN6google8protobuf29DescriptorProto_ReservedRange10SharedCtorEPNS0_5ArenaEb:
 2527|     24|    ::_pb::Arena* arena, bool is_message_owned) {
 2528|     24|  (void)arena;
 2529|     24|  (void)is_message_owned;
 2530|     24|  new (&_impl_) Impl_{
 2531|     24|      decltype(_impl_._has_bits_){}
 2532|     24|    , /*decltype(_impl_._cached_size_)*/{}
 2533|     24|    , decltype(_impl_.start_){0}
 2534|     24|    , decltype(_impl_.end_){0}
 2535|     24|  };
 2536|     24|}
_ZN6google8protobuf29DescriptorProto_ReservedRange10SharedDtorEv:
 2547|     24|inline void DescriptorProto_ReservedRange::SharedDtor() {
 2548|     24|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|     24|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|     24|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     24|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 24, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2549|     24|}
_ZN6google8protobuf29DescriptorProto_ReservedRange9_Internal13set_has_startEPNS0_8internal7HasBitsILm1EEE:
 2496|     24|  static void set_has_start(HasBits* has_bits) {
 2497|     24|    (*has_bits)[0] |= 1u;
 2498|     24|  }
_ZN6google8protobuf29DescriptorProto_ReservedRange9_Internal11set_has_endEPNS0_8internal7HasBitsILm1EEE:
 2499|     24|  static void set_has_end(HasBits* has_bits) {
 2500|     24|    (*has_bits)[0] |= 2u;
 2501|     24|  }
_ZN6google8protobuf15DescriptorProto10SharedCtorEPNS0_5ArenaEb:
 2785|    201|    ::_pb::Arena* arena, bool is_message_owned) {
 2786|    201|  (void)arena;
 2787|    201|  (void)is_message_owned;
 2788|    201|  new (&_impl_) Impl_{
 2789|    201|      decltype(_impl_._has_bits_){}
 2790|    201|    , /*decltype(_impl_._cached_size_)*/{}
 2791|    201|    , decltype(_impl_.field_){arena}
 2792|    201|    , decltype(_impl_.nested_type_){arena}
 2793|    201|    , decltype(_impl_.enum_type_){arena}
 2794|    201|    , decltype(_impl_.extension_range_){arena}
 2795|    201|    , decltype(_impl_.extension_){arena}
 2796|    201|    , decltype(_impl_.oneof_decl_){arena}
 2797|    201|    , decltype(_impl_.reserved_range_){arena}
 2798|    201|    , decltype(_impl_.reserved_name_){arena}
 2799|    201|    , decltype(_impl_.name_){}
 2800|    201|    , decltype(_impl_.options_){nullptr}
 2801|    201|  };
 2802|    201|  _impl_.name_.InitDefault();
 2803|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 2804|       |    _impl_.name_.Set("", GetArenaForAllocation());
 2805|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 2806|    201|}
_ZN6google8protobuf15DescriptorProto10SharedDtorEv:
 2817|    201|inline void DescriptorProto::SharedDtor() {
 2818|    201|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|    201|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|    201|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|    201|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 201, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2819|    201|  _impl_.field_.~RepeatedPtrField();
 2820|    201|  _impl_.nested_type_.~RepeatedPtrField();
 2821|    201|  _impl_.enum_type_.~RepeatedPtrField();
 2822|    201|  _impl_.extension_range_.~RepeatedPtrField();
 2823|    201|  _impl_.extension_.~RepeatedPtrField();
 2824|    201|  _impl_.oneof_decl_.~RepeatedPtrField();
 2825|    201|  _impl_.reserved_range_.~RepeatedPtrField();
 2826|    201|  _impl_.reserved_name_.~RepeatedPtrField();
 2827|    201|  _impl_.name_.Destroy();
 2828|    201|  if (this != internal_default_instance()) delete _impl_.options_;
  ------------------
  |  Branch (2828:7): [True: 201, False: 0]
  ------------------
 2829|    201|}
_ZN6google8protobuf20FieldDescriptorProto10SharedCtorEPNS0_5ArenaEb:
 3623|    825|    ::_pb::Arena* arena, bool is_message_owned) {
 3624|    825|  (void)arena;
 3625|    825|  (void)is_message_owned;
 3626|    825|  new (&_impl_) Impl_{
 3627|    825|      decltype(_impl_._has_bits_){}
 3628|    825|    , /*decltype(_impl_._cached_size_)*/{}
 3629|    825|    , decltype(_impl_.name_){}
 3630|    825|    , decltype(_impl_.extendee_){}
 3631|    825|    , decltype(_impl_.type_name_){}
 3632|    825|    , decltype(_impl_.default_value_){}
 3633|    825|    , decltype(_impl_.json_name_){}
 3634|    825|    , decltype(_impl_.options_){nullptr}
 3635|    825|    , decltype(_impl_.number_){0}
 3636|    825|    , decltype(_impl_.oneof_index_){0}
 3637|    825|    , decltype(_impl_.proto3_optional_){false}
 3638|    825|    , decltype(_impl_.label_){1}
 3639|    825|    , decltype(_impl_.type_){1}
 3640|    825|  };
 3641|    825|  _impl_.name_.InitDefault();
 3642|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 3643|       |    _impl_.name_.Set("", GetArenaForAllocation());
 3644|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 3645|    825|  _impl_.extendee_.InitDefault();
 3646|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 3647|       |    _impl_.extendee_.Set("", GetArenaForAllocation());
 3648|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 3649|    825|  _impl_.type_name_.InitDefault();
 3650|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 3651|       |    _impl_.type_name_.Set("", GetArenaForAllocation());
 3652|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 3653|    825|  _impl_.default_value_.InitDefault();
 3654|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 3655|       |    _impl_.default_value_.Set("", GetArenaForAllocation());
 3656|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 3657|    825|  _impl_.json_name_.InitDefault();
 3658|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 3659|       |    _impl_.json_name_.Set("", GetArenaForAllocation());
 3660|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 3661|    825|}
_ZN6google8protobuf20FieldDescriptorProto10SharedDtorEv:
 3672|    825|inline void FieldDescriptorProto::SharedDtor() {
 3673|    825|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|    825|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|    825|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|    825|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 825, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3674|    825|  _impl_.name_.Destroy();
 3675|    825|  _impl_.extendee_.Destroy();
 3676|    825|  _impl_.type_name_.Destroy();
 3677|    825|  _impl_.default_value_.Destroy();
 3678|    825|  _impl_.json_name_.Destroy();
 3679|    825|  if (this != internal_default_instance()) delete _impl_.options_;
  ------------------
  |  Branch (3679:7): [True: 825, False: 0]
  ------------------
 3680|    825|}
_ZN6google8protobuf20FieldDescriptorProto9_Internal14set_has_numberEPNS0_8internal7HasBitsILm1EEE:
 3511|    825|  static void set_has_number(HasBits* has_bits) {
 3512|    825|    (*has_bits)[0] |= 64u;
 3513|    825|  }
_ZN6google8protobuf20FieldDescriptorProto9_Internal19set_has_oneof_indexEPNS0_8internal7HasBitsILm1EEE:
 3529|    261|  static void set_has_oneof_index(HasBits* has_bits) {
 3530|    261|    (*has_bits)[0] |= 128u;
 3531|    261|  }
_ZN6google8protobuf20OneofDescriptorProto10SharedCtorEPNS0_5ArenaEb:
 4233|     33|    ::_pb::Arena* arena, bool is_message_owned) {
 4234|     33|  (void)arena;
 4235|     33|  (void)is_message_owned;
 4236|     33|  new (&_impl_) Impl_{
 4237|     33|      decltype(_impl_._has_bits_){}
 4238|     33|    , /*decltype(_impl_._cached_size_)*/{}
 4239|     33|    , decltype(_impl_.name_){}
 4240|     33|    , decltype(_impl_.options_){nullptr}
 4241|     33|  };
 4242|     33|  _impl_.name_.InitDefault();
 4243|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 4244|       |    _impl_.name_.Set("", GetArenaForAllocation());
 4245|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 4246|     33|}
_ZN6google8protobuf20OneofDescriptorProto10SharedDtorEv:
 4257|     33|inline void OneofDescriptorProto::SharedDtor() {
 4258|     33|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|     33|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|     33|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     33|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 33, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4259|     33|  _impl_.name_.Destroy();
 4260|     33|  if (this != internal_default_instance()) delete _impl_.options_;
  ------------------
  |  Branch (4260:7): [True: 33, False: 0]
  ------------------
 4261|     33|}
_ZN6google8protobuf19EnumDescriptorProto10SharedCtorEPNS0_5ArenaEb:
 4748|     18|    ::_pb::Arena* arena, bool is_message_owned) {
 4749|     18|  (void)arena;
 4750|     18|  (void)is_message_owned;
 4751|     18|  new (&_impl_) Impl_{
 4752|     18|      decltype(_impl_._has_bits_){}
 4753|     18|    , /*decltype(_impl_._cached_size_)*/{}
 4754|     18|    , decltype(_impl_.value_){arena}
 4755|     18|    , decltype(_impl_.reserved_range_){arena}
 4756|     18|    , decltype(_impl_.reserved_name_){arena}
 4757|     18|    , decltype(_impl_.name_){}
 4758|     18|    , decltype(_impl_.options_){nullptr}
 4759|     18|  };
 4760|     18|  _impl_.name_.InitDefault();
 4761|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 4762|       |    _impl_.name_.Set("", GetArenaForAllocation());
 4763|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 4764|     18|}
_ZN6google8protobuf19EnumDescriptorProto10SharedDtorEv:
 4775|     18|inline void EnumDescriptorProto::SharedDtor() {
 4776|     18|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|     18|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|     18|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     18|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4777|     18|  _impl_.value_.~RepeatedPtrField();
 4778|     18|  _impl_.reserved_range_.~RepeatedPtrField();
 4779|     18|  _impl_.reserved_name_.~RepeatedPtrField();
 4780|     18|  _impl_.name_.Destroy();
 4781|     18|  if (this != internal_default_instance()) delete _impl_.options_;
  ------------------
  |  Branch (4781:7): [True: 18, False: 0]
  ------------------
 4782|     18|}
_ZN6google8protobuf24EnumValueDescriptorProto10SharedCtorEPNS0_5ArenaEb:
 5136|     99|    ::_pb::Arena* arena, bool is_message_owned) {
 5137|     99|  (void)arena;
 5138|     99|  (void)is_message_owned;
 5139|     99|  new (&_impl_) Impl_{
 5140|     99|      decltype(_impl_._has_bits_){}
 5141|     99|    , /*decltype(_impl_._cached_size_)*/{}
 5142|     99|    , decltype(_impl_.name_){}
 5143|     99|    , decltype(_impl_.options_){nullptr}
 5144|     99|    , decltype(_impl_.number_){0}
 5145|     99|  };
 5146|     99|  _impl_.name_.InitDefault();
 5147|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 5148|       |    _impl_.name_.Set("", GetArenaForAllocation());
 5149|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 5150|     99|}
_ZN6google8protobuf24EnumValueDescriptorProto10SharedDtorEv:
 5161|     99|inline void EnumValueDescriptorProto::SharedDtor() {
 5162|     99|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|     99|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|     99|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     99|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 99, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5163|     99|  _impl_.name_.Destroy();
 5164|     99|  if (this != internal_default_instance()) delete _impl_.options_;
  ------------------
  |  Branch (5164:7): [True: 99, False: 0]
  ------------------
 5165|     99|}
_ZN6google8protobuf24EnumValueDescriptorProto9_Internal14set_has_numberEPNS0_8internal7HasBitsILm1EEE:
 5090|     99|  static void set_has_number(HasBits* has_bits) {
 5091|     99|    (*has_bits)[0] |= 4u;
 5092|     99|  }
_ZN6google8protobuf11FileOptions10SharedCtorEPNS0_5ArenaEb:
 6352|      8|    ::_pb::Arena* arena, bool is_message_owned) {
 6353|      8|  (void)arena;
 6354|      8|  (void)is_message_owned;
 6355|      8|  new (&_impl_) Impl_{
 6356|      8|      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
 6357|      8|    , decltype(_impl_._has_bits_){}
 6358|      8|    , /*decltype(_impl_._cached_size_)*/{}
 6359|      8|    , decltype(_impl_.uninterpreted_option_){arena}
 6360|      8|    , decltype(_impl_.java_package_){}
 6361|      8|    , decltype(_impl_.java_outer_classname_){}
 6362|      8|    , decltype(_impl_.go_package_){}
 6363|      8|    , decltype(_impl_.objc_class_prefix_){}
 6364|      8|    , decltype(_impl_.csharp_namespace_){}
 6365|      8|    , decltype(_impl_.swift_prefix_){}
 6366|      8|    , decltype(_impl_.php_class_prefix_){}
 6367|      8|    , decltype(_impl_.php_namespace_){}
 6368|      8|    , decltype(_impl_.php_metadata_namespace_){}
 6369|      8|    , decltype(_impl_.ruby_package_){}
 6370|      8|    , decltype(_impl_.java_multiple_files_){false}
 6371|      8|    , decltype(_impl_.java_generate_equals_and_hash_){false}
 6372|      8|    , decltype(_impl_.java_string_check_utf8_){false}
 6373|      8|    , decltype(_impl_.cc_generic_services_){false}
 6374|      8|    , decltype(_impl_.java_generic_services_){false}
 6375|      8|    , decltype(_impl_.py_generic_services_){false}
 6376|      8|    , decltype(_impl_.php_generic_services_){false}
 6377|      8|    , decltype(_impl_.deprecated_){false}
 6378|      8|    , decltype(_impl_.optimize_for_){1}
 6379|      8|    , decltype(_impl_.cc_enable_arenas_){true}
 6380|      8|  };
 6381|      8|  _impl_.java_package_.InitDefault();
 6382|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6383|       |    _impl_.java_package_.Set("", GetArenaForAllocation());
 6384|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6385|      8|  _impl_.java_outer_classname_.InitDefault();
 6386|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6387|       |    _impl_.java_outer_classname_.Set("", GetArenaForAllocation());
 6388|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6389|      8|  _impl_.go_package_.InitDefault();
 6390|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6391|       |    _impl_.go_package_.Set("", GetArenaForAllocation());
 6392|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6393|      8|  _impl_.objc_class_prefix_.InitDefault();
 6394|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6395|       |    _impl_.objc_class_prefix_.Set("", GetArenaForAllocation());
 6396|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6397|      8|  _impl_.csharp_namespace_.InitDefault();
 6398|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6399|       |    _impl_.csharp_namespace_.Set("", GetArenaForAllocation());
 6400|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6401|      8|  _impl_.swift_prefix_.InitDefault();
 6402|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6403|       |    _impl_.swift_prefix_.Set("", GetArenaForAllocation());
 6404|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6405|      8|  _impl_.php_class_prefix_.InitDefault();
 6406|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6407|       |    _impl_.php_class_prefix_.Set("", GetArenaForAllocation());
 6408|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6409|      8|  _impl_.php_namespace_.InitDefault();
 6410|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6411|       |    _impl_.php_namespace_.Set("", GetArenaForAllocation());
 6412|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6413|      8|  _impl_.php_metadata_namespace_.InitDefault();
 6414|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6415|       |    _impl_.php_metadata_namespace_.Set("", GetArenaForAllocation());
 6416|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6417|      8|  _impl_.ruby_package_.InitDefault();
 6418|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6419|       |    _impl_.ruby_package_.Set("", GetArenaForAllocation());
 6420|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 6421|      8|}
_ZN6google8protobuf11FileOptions10SharedDtorEv:
 6432|      6|inline void FileOptions::SharedDtor() {
 6433|      6|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|      6|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6434|      6|  _impl_._extensions_.~ExtensionSet();
 6435|      6|  _impl_.uninterpreted_option_.~RepeatedPtrField();
 6436|      6|  _impl_.java_package_.Destroy();
 6437|      6|  _impl_.java_outer_classname_.Destroy();
 6438|      6|  _impl_.go_package_.Destroy();
 6439|      6|  _impl_.objc_class_prefix_.Destroy();
 6440|      6|  _impl_.csharp_namespace_.Destroy();
 6441|      6|  _impl_.swift_prefix_.Destroy();
 6442|      6|  _impl_.php_class_prefix_.Destroy();
 6443|      6|  _impl_.php_namespace_.Destroy();
 6444|      6|  _impl_.php_metadata_namespace_.Destroy();
 6445|      6|  _impl_.ruby_package_.Destroy();
 6446|      6|}
_ZN6google8protobuf11FileOptions9_Internal27set_has_java_multiple_filesEPNS0_8internal7HasBitsILm1EEE:
 6172|      4|  static void set_has_java_multiple_files(HasBits* has_bits) {
 6173|      4|    (*has_bits)[0] |= 1024u;
 6174|      4|  }
_ZN6google8protobuf11FileOptions9_Internal24set_has_cc_enable_arenasEPNS0_8internal7HasBitsILm1EEE:
 6202|      4|  static void set_has_cc_enable_arenas(HasBits* has_bits) {
 6203|      4|    (*has_bits)[0] |= 524288u;
 6204|      4|  }
_ZN6google8protobuf12FieldOptions10SharedCtorEPNS0_5ArenaEb:
 7687|     16|    ::_pb::Arena* arena, bool is_message_owned) {
 7688|     16|  (void)arena;
 7689|     16|  (void)is_message_owned;
 7690|     16|  new (&_impl_) Impl_{
 7691|     16|      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
 7692|     16|    , decltype(_impl_._has_bits_){}
 7693|     16|    , /*decltype(_impl_._cached_size_)*/{}
 7694|     16|    , decltype(_impl_.uninterpreted_option_){arena}
 7695|     16|    , decltype(_impl_.ctype_){0}
 7696|     16|    , decltype(_impl_.jstype_){0}
 7697|     16|    , decltype(_impl_.packed_){false}
 7698|     16|    , decltype(_impl_.lazy_){false}
 7699|     16|    , decltype(_impl_.unverified_lazy_){false}
 7700|     16|    , decltype(_impl_.deprecated_){false}
 7701|     16|    , decltype(_impl_.weak_){false}
 7702|     16|  };
 7703|     16|}
_ZN6google8protobuf12FieldOptions10SharedDtorEv:
 7714|     12|inline void FieldOptions::SharedDtor() {
 7715|     12|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|     12|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|     12|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|     12|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7716|     12|  _impl_._extensions_.~ExtensionSet();
 7717|     12|  _impl_.uninterpreted_option_.~RepeatedPtrField();
 7718|     12|}
_ZN6google8protobuf12FieldOptions9_Internal14set_has_packedEPNS0_8internal7HasBitsILm1EEE:
 7636|     12|  static void set_has_packed(HasBits* has_bits) {
 7637|     12|    (*has_bits)[0] |= 4u;
 7638|     12|  }
_ZN6google8protobuf12FieldOptions9_Internal18set_has_deprecatedEPNS0_8internal7HasBitsILm1EEE:
 7648|      4|  static void set_has_deprecated(HasBits* has_bits) {
 7649|      4|    (*has_bits)[0] |= 32u;
 7650|      4|  }

_ZN6google8protobuf19FileDescriptorProtoC2Ev:
  490|      9|  inline FileDescriptorProto() : FileDescriptorProto(nullptr) {}
_ZN6google8protobuf19FileDescriptorProto25internal_default_instanceEv:
  537|     18|  static inline const FileDescriptorProto* internal_default_instance() {
  538|     18|    return reinterpret_cast<const FileDescriptorProto*>(
  539|     18|               &_FileDescriptorProto_default_instance_);
  540|     18|  }
_ZN6google8protobuf30DescriptorProto_ExtensionRange25internal_default_instanceEv:
  936|     27|  static inline const DescriptorProto_ExtensionRange* internal_default_instance() {
  937|     27|    return reinterpret_cast<const DescriptorProto_ExtensionRange*>(
  938|     27|               &_DescriptorProto_ExtensionRange_default_instance_);
  939|     27|  }
_ZN6google8protobuf15DescriptorProto10descriptorEv:
 1294|     40|  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
 1295|     40|    return GetDescriptor();
 1296|     40|  }
_ZN6google8protobuf15DescriptorProto13GetDescriptorEv:
 1297|     40|  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
 1298|     40|    return default_instance().GetMetadata().descriptor;
 1299|     40|  }
_ZN6google8protobuf15DescriptorProto16default_instanceEv:
 1303|     40|  static const DescriptorProto& default_instance() {
 1304|     40|    return *internal_default_instance();
 1305|     40|  }
_ZN6google8protobuf15DescriptorProto25internal_default_instanceEv:
 1306|    241|  static inline const DescriptorProto* internal_default_instance() {
 1307|    241|    return reinterpret_cast<const DescriptorProto*>(
 1308|    241|               &_DescriptorProto_default_instance_);
 1309|    241|  }
_ZN6google8protobuf21ExtensionRangeOptions16default_instanceEv:
 1657|      9|  static const ExtensionRangeOptions& default_instance() {
 1658|      9|    return *internal_default_instance();
 1659|      9|  }
_ZN6google8protobuf21ExtensionRangeOptions25internal_default_instanceEv:
 1660|      9|  static inline const ExtensionRangeOptions* internal_default_instance() {
 1661|      9|    return reinterpret_cast<const ExtensionRangeOptions*>(
 1662|      9|               &_ExtensionRangeOptions_default_instance_);
 1663|      9|  }
_ZN6google8protobuf20FieldDescriptorProto25internal_default_instanceEv:
 2016|    825|  static inline const FieldDescriptorProto* internal_default_instance() {
 2017|    825|    return reinterpret_cast<const FieldDescriptorProto*>(
 2018|    825|               &_FieldDescriptorProto_default_instance_);
 2019|    825|  }
_ZN6google8protobuf20OneofDescriptorProto25internal_default_instanceEv:
 2450|     33|  static inline const OneofDescriptorProto* internal_default_instance() {
 2451|     33|    return reinterpret_cast<const OneofDescriptorProto*>(
 2452|     33|               &_OneofDescriptorProto_default_instance_);
 2453|     33|  }
_ZN6google8protobuf19EnumDescriptorProto25internal_default_instanceEv:
 2810|     18|  static inline const EnumDescriptorProto* internal_default_instance() {
 2811|     18|    return reinterpret_cast<const EnumDescriptorProto*>(
 2812|     18|               &_EnumDescriptorProto_default_instance_);
 2813|     18|  }
_ZN6google8protobuf24EnumValueDescriptorProto25internal_default_instanceEv:
 3063|     99|  static inline const EnumValueDescriptorProto* internal_default_instance() {
 3064|     99|    return reinterpret_cast<const EnumValueDescriptorProto*>(
 3065|     99|               &_EnumValueDescriptorProto_default_instance_);
 3066|     99|  }
_ZN6google8protobuf11FileOptionsC2Ev:
 3676|      2|  inline FileOptions() : FileOptions(nullptr) {}
_ZNK6google8protobuf11FileOptions14unknown_fieldsEv:
 3704|      2|  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
 3705|      2|    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
 3706|      2|  }
_ZN6google8protobuf11FileOptions16default_instanceEv:
 3720|      1|  static const FileOptions& default_instance() {
 3721|      1|    return *internal_default_instance();
 3722|      1|  }
_ZN6google8protobuf11FileOptions25internal_default_instanceEv:
 3723|      3|  static inline const FileOptions* internal_default_instance() {
 3724|      3|    return reinterpret_cast<const FileOptions*>(
 3725|      3|               &_FileOptions_default_instance_);
 3726|      3|  }
_ZN6google8protobuf14MessageOptions16default_instanceEv:
 4459|     67|  static const MessageOptions& default_instance() {
 4460|     67|    return *internal_default_instance();
 4461|     67|  }
_ZN6google8protobuf14MessageOptions25internal_default_instanceEv:
 4462|     67|  static inline const MessageOptions* internal_default_instance() {
 4463|     67|    return reinterpret_cast<const MessageOptions*>(
 4464|     67|               &_MessageOptions_default_instance_);
 4465|     67|  }
_ZN6google8protobuf12FieldOptionsC2Ev:
 4832|      4|  inline FieldOptions() : FieldOptions(nullptr) {}
_ZNK6google8protobuf12FieldOptions14unknown_fieldsEv:
 4860|      4|  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
 4861|      4|    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
 4862|      4|  }
_ZN6google8protobuf12FieldOptions16default_instanceEv:
 4876|    271|  static const FieldOptions& default_instance() {
 4877|    271|    return *internal_default_instance();
 4878|    271|  }
_ZN6google8protobuf12FieldOptions25internal_default_instanceEv:
 4879|    275|  static inline const FieldOptions* internal_default_instance() {
 4880|    275|    return reinterpret_cast<const FieldOptions*>(
 4881|    275|               &_FieldOptions_default_instance_);
 4882|    275|  }
_ZN6google8protobuf12OneofOptions16default_instanceEv:
 5402|     11|  static const OneofOptions& default_instance() {
 5403|     11|    return *internal_default_instance();
 5404|     11|  }
_ZN6google8protobuf12OneofOptions25internal_default_instanceEv:
 5405|     11|  static inline const OneofOptions* internal_default_instance() {
 5406|     11|    return reinterpret_cast<const OneofOptions*>(
 5407|     11|               &_OneofOptions_default_instance_);
 5408|     11|  }
_ZN6google8protobuf11EnumOptions16default_instanceEv:
 5758|      6|  static const EnumOptions& default_instance() {
 5759|      6|    return *internal_default_instance();
 5760|      6|  }
_ZN6google8protobuf11EnumOptions25internal_default_instanceEv:
 5761|      6|  static inline const EnumOptions* internal_default_instance() {
 5762|      6|    return reinterpret_cast<const EnumOptions*>(
 5763|      6|               &_EnumOptions_default_instance_);
 5764|      6|  }
_ZN6google8protobuf16EnumValueOptions16default_instanceEv:
 6145|     33|  static const EnumValueOptions& default_instance() {
 6146|     33|    return *internal_default_instance();
 6147|     33|  }
_ZN6google8protobuf16EnumValueOptions25internal_default_instanceEv:
 6148|     33|  static inline const EnumValueOptions* internal_default_instance() {
 6149|     33|    return reinterpret_cast<const EnumValueOptions*>(
 6150|     33|               &_EnumValueOptions_default_instance_);
 6151|     33|  }
_ZN6google8protobuf14SourceCodeInfo16default_instanceEv:
 8024|      3|  static const SourceCodeInfo& default_instance() {
 8025|      3|    return *internal_default_instance();
 8026|      3|  }
_ZN6google8protobuf14SourceCodeInfo25internal_default_instanceEv:
 8027|      3|  static inline const SourceCodeInfo* internal_default_instance() {
 8028|      3|    return reinterpret_cast<const SourceCodeInfo*>(
 8029|      3|               &_SourceCodeInfo_default_instance_);
 8030|      3|  }
_ZNK6google8protobuf19FileDescriptorProto18_internal_has_nameEv:
 8583|      3|inline bool FileDescriptorProto::_internal_has_name() const {
 8584|      3|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
 8585|      3|  return value;
 8586|      3|}
_ZNK6google8protobuf19FileDescriptorProto8has_nameEv:
 8587|      3|inline bool FileDescriptorProto::has_name() const {
 8588|      3|  return _internal_has_name();
 8589|      3|}
_ZNK6google8protobuf19FileDescriptorProto4nameEv:
 8594|    143|inline const std::string& FileDescriptorProto::name() const {
 8595|       |  // @@protoc_insertion_point(field_get:google.protobuf.FileDescriptorProto.name)
 8596|    143|  return _internal_name();
 8597|    143|}
_ZNK6google8protobuf19FileDescriptorProto14_internal_nameEv:
 8610|    143|inline const std::string& FileDescriptorProto::_internal_name() const {
 8611|    143|  return _impl_.name_.Get();
 8612|    143|}
_ZN6google8protobuf19FileDescriptorProto22_internal_mutable_nameEv:
 8617|      9|inline std::string* FileDescriptorProto::_internal_mutable_name() {
 8618|      9|  _impl_._has_bits_[0] |= 0x00000001u;
 8619|      9|  return _impl_.name_.Mutable(GetArenaForAllocation());
 8620|      9|}
_ZNK6google8protobuf19FileDescriptorProto21_internal_has_packageEv:
 8651|      3|inline bool FileDescriptorProto::_internal_has_package() const {
 8652|      3|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
 8653|      3|  return value;
 8654|      3|}
_ZNK6google8protobuf19FileDescriptorProto11has_packageEv:
 8655|      3|inline bool FileDescriptorProto::has_package() const {
 8656|      3|  return _internal_has_package();
 8657|      3|}
_ZNK6google8protobuf19FileDescriptorProto7packageEv:
 8662|     18|inline const std::string& FileDescriptorProto::package() const {
 8663|       |  // @@protoc_insertion_point(field_get:google.protobuf.FileDescriptorProto.package)
 8664|     18|  return _internal_package();
 8665|     18|}
_ZNK6google8protobuf19FileDescriptorProto17_internal_packageEv:
 8678|     18|inline const std::string& FileDescriptorProto::_internal_package() const {
 8679|     18|  return _impl_.package_.Get();
 8680|     18|}
_ZN6google8protobuf19FileDescriptorProto25_internal_mutable_packageEv:
 8685|      9|inline std::string* FileDescriptorProto::_internal_mutable_package() {
 8686|      9|  _impl_._has_bits_[0] |= 0x00000002u;
 8687|      9|  return _impl_.package_.Mutable(GetArenaForAllocation());
 8688|      9|}
_ZNK6google8protobuf19FileDescriptorProto25_internal_dependency_sizeEv:
 8719|     12|inline int FileDescriptorProto::_internal_dependency_size() const {
 8720|     12|  return _impl_.dependency_.size();
 8721|     12|}
_ZNK6google8protobuf19FileDescriptorProto15dependency_sizeEv:
 8722|     12|inline int FileDescriptorProto::dependency_size() const {
 8723|     12|  return _internal_dependency_size();
 8724|     12|}
_ZNK6google8protobuf19FileDescriptorProto32_internal_public_dependency_sizeEv:
 8794|      9|inline int FileDescriptorProto::_internal_public_dependency_size() const {
 8795|      9|  return _impl_.public_dependency_.size();
 8796|      9|}
_ZNK6google8protobuf19FileDescriptorProto22public_dependency_sizeEv:
 8797|      9|inline int FileDescriptorProto::public_dependency_size() const {
 8798|      9|  return _internal_public_dependency_size();
 8799|      9|}
_ZNK6google8protobuf19FileDescriptorProto30_internal_weak_dependency_sizeEv:
 8841|     12|inline int FileDescriptorProto::_internal_weak_dependency_size() const {
 8842|     12|  return _impl_.weak_dependency_.size();
 8843|     12|}
_ZNK6google8protobuf19FileDescriptorProto20weak_dependency_sizeEv:
 8844|     12|inline int FileDescriptorProto::weak_dependency_size() const {
 8845|     12|  return _internal_weak_dependency_size();
 8846|     12|}
_ZNK6google8protobuf19FileDescriptorProto27_internal_message_type_sizeEv:
 8888|     70|inline int FileDescriptorProto::_internal_message_type_size() const {
 8889|     70|  return _impl_.message_type_.size();
 8890|     70|}
_ZNK6google8protobuf19FileDescriptorProto17message_type_sizeEv:
 8891|     70|inline int FileDescriptorProto::message_type_size() const {
 8892|     70|  return _internal_message_type_size();
 8893|     70|}
_ZNK6google8protobuf19FileDescriptorProto22_internal_message_typeEi:
 8906|    122|inline const ::PROTOBUF_NAMESPACE_ID::DescriptorProto& FileDescriptorProto::_internal_message_type(int index) const {
 8907|    122|  return _impl_.message_type_.Get(index);
 8908|    122|}
_ZNK6google8protobuf19FileDescriptorProto12message_typeEi:
 8909|    122|inline const ::PROTOBUF_NAMESPACE_ID::DescriptorProto& FileDescriptorProto::message_type(int index) const {
 8910|       |  // @@protoc_insertion_point(field_get:google.protobuf.FileDescriptorProto.message_type)
 8911|    122|  return _internal_message_type(index);
 8912|    122|}
_ZN6google8protobuf19FileDescriptorProto26_internal_add_message_typeEv:
 8913|    183|inline ::PROTOBUF_NAMESPACE_ID::DescriptorProto* FileDescriptorProto::_internal_add_message_type() {
 8914|    183|  return _impl_.message_type_.Add();
 8915|    183|}
_ZNK6google8protobuf19FileDescriptorProto12message_typeEv:
 8922|      9|FileDescriptorProto::message_type() const {
 8923|       |  // @@protoc_insertion_point(field_list:google.protobuf.FileDescriptorProto.message_type)
 8924|      9|  return _impl_.message_type_;
 8925|      9|}
_ZNK6google8protobuf19FileDescriptorProto24_internal_enum_type_sizeEv:
 8928|      9|inline int FileDescriptorProto::_internal_enum_type_size() const {
 8929|      9|  return _impl_.enum_type_.size();
 8930|      9|}
_ZNK6google8protobuf19FileDescriptorProto14enum_type_sizeEv:
 8931|      9|inline int FileDescriptorProto::enum_type_size() const {
 8932|      9|  return _internal_enum_type_size();
 8933|      9|}
_ZNK6google8protobuf19FileDescriptorProto9enum_typeEv:
 8962|      9|FileDescriptorProto::enum_type() const {
 8963|       |  // @@protoc_insertion_point(field_list:google.protobuf.FileDescriptorProto.enum_type)
 8964|      9|  return _impl_.enum_type_;
 8965|      9|}
_ZNK6google8protobuf19FileDescriptorProto22_internal_service_sizeEv:
 8968|      9|inline int FileDescriptorProto::_internal_service_size() const {
 8969|      9|  return _impl_.service_.size();
 8970|      9|}
_ZNK6google8protobuf19FileDescriptorProto12service_sizeEv:
 8971|      9|inline int FileDescriptorProto::service_size() const {
 8972|      9|  return _internal_service_size();
 8973|      9|}
_ZNK6google8protobuf19FileDescriptorProto7serviceEv:
 9002|      9|FileDescriptorProto::service() const {
 9003|       |  // @@protoc_insertion_point(field_list:google.protobuf.FileDescriptorProto.service)
 9004|      9|  return _impl_.service_;
 9005|      9|}
_ZNK6google8protobuf19FileDescriptorProto24_internal_extension_sizeEv:
 9008|      9|inline int FileDescriptorProto::_internal_extension_size() const {
 9009|      9|  return _impl_.extension_.size();
 9010|      9|}
_ZNK6google8protobuf19FileDescriptorProto14extension_sizeEv:
 9011|      9|inline int FileDescriptorProto::extension_size() const {
 9012|      9|  return _internal_extension_size();
 9013|      9|}
_ZNK6google8protobuf19FileDescriptorProto9extensionEv:
 9042|      9|FileDescriptorProto::extension() const {
 9043|       |  // @@protoc_insertion_point(field_list:google.protobuf.FileDescriptorProto.extension)
 9044|      9|  return _impl_.extension_;
 9045|      9|}
_ZNK6google8protobuf19FileDescriptorProto21_internal_has_optionsEv:
 9048|     15|inline bool FileDescriptorProto::_internal_has_options() const {
 9049|     15|  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
 9050|     15|  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  ------------------
  |  |  558|     15|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|     15|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     15|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     25|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 5, False: 10]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 10, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|     25|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 5, False: 10]
  |  |  |  Branch (559:20): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 9051|     15|  return value;
 9052|     15|}
_ZNK6google8protobuf19FileDescriptorProto11has_optionsEv:
 9053|      6|inline bool FileDescriptorProto::has_options() const {
 9054|      6|  return _internal_has_options();
 9055|      6|}
_ZNK6google8protobuf19FileDescriptorProto17_internal_optionsEv:
 9060|      2|inline const ::PROTOBUF_NAMESPACE_ID::FileOptions& FileDescriptorProto::_internal_options() const {
 9061|      2|  const ::PROTOBUF_NAMESPACE_ID::FileOptions* p = _impl_.options_;
 9062|      2|  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FileOptions&>(
  ------------------
  |  Branch (9062:10): [True: 2, False: 0]
  ------------------
 9063|      0|      ::PROTOBUF_NAMESPACE_ID::_FileOptions_default_instance_);
 9064|      2|}
_ZNK6google8protobuf19FileDescriptorProto7optionsEv:
 9065|      2|inline const ::PROTOBUF_NAMESPACE_ID::FileOptions& FileDescriptorProto::options() const {
 9066|       |  // @@protoc_insertion_point(field_get:google.protobuf.FileDescriptorProto.options)
 9067|      2|  return _internal_options();
 9068|      2|}
_ZN6google8protobuf19FileDescriptorProto25_internal_mutable_optionsEv:
 9104|      6|inline ::PROTOBUF_NAMESPACE_ID::FileOptions* FileDescriptorProto::_internal_mutable_options() {
 9105|      6|  _impl_._has_bits_[0] |= 0x00000008u;
 9106|      6|  if (_impl_.options_ == nullptr) {
  ------------------
  |  Branch (9106:7): [True: 6, False: 0]
  ------------------
 9107|      6|    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FileOptions>(GetArenaForAllocation());
 9108|      6|    _impl_.options_ = p;
 9109|      6|  }
 9110|      6|  return _impl_.options_;
 9111|      6|}
_ZNK6google8protobuf19FileDescriptorProto30_internal_has_source_code_infoEv:
 9138|      6|inline bool FileDescriptorProto::_internal_has_source_code_info() const {
 9139|      6|  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
 9140|      6|  PROTOBUF_ASSUME(!value || _impl_.source_code_info_ != nullptr);
  ------------------
  |  |  558|      6|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|      6|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 6, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|      6|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 6, False: 0]
  |  |  |  Branch (559:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 9141|      6|  return value;
 9142|      6|}
_ZNK6google8protobuf19FileDescriptorProto20has_source_code_infoEv:
 9143|      6|inline bool FileDescriptorProto::has_source_code_info() const {
 9144|      6|  return _internal_has_source_code_info();
 9145|      6|}
_ZNK6google8protobuf19FileDescriptorProto6syntaxEv:
 9239|      5|inline const std::string& FileDescriptorProto::syntax() const {
 9240|       |  // @@protoc_insertion_point(field_get:google.protobuf.FileDescriptorProto.syntax)
 9241|      5|  return _internal_syntax();
 9242|      5|}
_ZNK6google8protobuf19FileDescriptorProto16_internal_syntaxEv:
 9255|      5|inline const std::string& FileDescriptorProto::_internal_syntax() const {
 9256|      5|  return _impl_.syntax_.Get();
 9257|      5|}
_ZN6google8protobuf19FileDescriptorProto24_internal_mutable_syntaxEv:
 9262|      3|inline std::string* FileDescriptorProto::_internal_mutable_syntax() {
 9263|      3|  _impl_._has_bits_[0] |= 0x00000004u;
 9264|      3|  return _impl_.syntax_.Mutable(GetArenaForAllocation());
 9265|      3|}
_ZNK6google8protobuf30DescriptorProto_ExtensionRange15_internal_startEv:
 9311|      9|inline int32_t DescriptorProto_ExtensionRange::_internal_start() const {
 9312|      9|  return _impl_.start_;
 9313|      9|}
_ZNK6google8protobuf30DescriptorProto_ExtensionRange5startEv:
 9314|      9|inline int32_t DescriptorProto_ExtensionRange::start() const {
 9315|       |  // @@protoc_insertion_point(field_get:google.protobuf.DescriptorProto.ExtensionRange.start)
 9316|      9|  return _internal_start();
 9317|      9|}
_ZNK6google8protobuf30DescriptorProto_ExtensionRange13_internal_endEv:
 9339|      9|inline int32_t DescriptorProto_ExtensionRange::_internal_end() const {
 9340|      9|  return _impl_.end_;
 9341|      9|}
_ZNK6google8protobuf30DescriptorProto_ExtensionRange3endEv:
 9342|      9|inline int32_t DescriptorProto_ExtensionRange::end() const {
 9343|       |  // @@protoc_insertion_point(field_get:google.protobuf.DescriptorProto.ExtensionRange.end)
 9344|      9|  return _internal_end();
 9345|      9|}
_ZNK6google8protobuf30DescriptorProto_ExtensionRange21_internal_has_optionsEv:
 9356|     45|inline bool DescriptorProto_ExtensionRange::_internal_has_options() const {
 9357|     45|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
 9358|     45|  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  ------------------
  |  |  558|     45|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|     45|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     45|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     45|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 45, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|     45|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 45, False: 0]
  |  |  |  Branch (559:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 9359|     45|  return value;
 9360|     45|}
_ZNK6google8protobuf30DescriptorProto_ExtensionRange11has_optionsEv:
 9361|     18|inline bool DescriptorProto_ExtensionRange::has_options() const {
 9362|     18|  return _internal_has_options();
 9363|     18|}
_ZNK6google8protobuf29DescriptorProto_ReservedRange15_internal_startEv:
 9461|     18|inline int32_t DescriptorProto_ReservedRange::_internal_start() const {
 9462|     18|  return _impl_.start_;
 9463|     18|}
_ZNK6google8protobuf29DescriptorProto_ReservedRange5startEv:
 9464|     18|inline int32_t DescriptorProto_ReservedRange::start() const {
 9465|       |  // @@protoc_insertion_point(field_get:google.protobuf.DescriptorProto.ReservedRange.start)
 9466|     18|  return _internal_start();
 9467|     18|}
_ZNK6google8protobuf29DescriptorProto_ReservedRange13_internal_endEv:
 9489|     18|inline int32_t DescriptorProto_ReservedRange::_internal_end() const {
 9490|     18|  return _impl_.end_;
 9491|     18|}
_ZNK6google8protobuf29DescriptorProto_ReservedRange3endEv:
 9492|     18|inline int32_t DescriptorProto_ReservedRange::end() const {
 9493|       |  // @@protoc_insertion_point(field_get:google.protobuf.DescriptorProto.ReservedRange.end)
 9494|     18|  return _internal_end();
 9495|     18|}
_ZNK6google8protobuf15DescriptorProto4nameEv:
 9521|    256|inline const std::string& DescriptorProto::name() const {
 9522|       |  // @@protoc_insertion_point(field_get:google.protobuf.DescriptorProto.name)
 9523|    256|  return _internal_name();
 9524|    256|}
_ZNK6google8protobuf15DescriptorProto14_internal_nameEv:
 9537|    256|inline const std::string& DescriptorProto::_internal_name() const {
 9538|    256|  return _impl_.name_.Get();
 9539|    256|}
_ZN6google8protobuf15DescriptorProto22_internal_mutable_nameEv:
 9544|    201|inline std::string* DescriptorProto::_internal_mutable_name() {
 9545|    201|  _impl_._has_bits_[0] |= 0x00000001u;
 9546|    201|  return _impl_.name_.Mutable(GetArenaForAllocation());
 9547|    201|}
_ZNK6google8protobuf15DescriptorProto20_internal_field_sizeEv:
 9578|    744|inline int DescriptorProto::_internal_field_size() const {
 9579|    744|  return _impl_.field_.size();
 9580|    744|}
_ZNK6google8protobuf15DescriptorProto10field_sizeEv:
 9581|    744|inline int DescriptorProto::field_size() const {
 9582|    744|  return _internal_field_size();
 9583|    744|}
_ZNK6google8protobuf15DescriptorProto15_internal_fieldEi:
 9596|    765|inline const ::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto& DescriptorProto::_internal_field(int index) const {
 9597|    765|  return _impl_.field_.Get(index);
 9598|    765|}
_ZNK6google8protobuf15DescriptorProto5fieldEi:
 9599|    765|inline const ::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto& DescriptorProto::field(int index) const {
 9600|       |  // @@protoc_insertion_point(field_get:google.protobuf.DescriptorProto.field)
 9601|    765|  return _internal_field(index);
 9602|    765|}
_ZN6google8protobuf15DescriptorProto19_internal_add_fieldEv:
 9603|    825|inline ::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto* DescriptorProto::_internal_add_field() {
 9604|    825|  return _impl_.field_.Add();
 9605|    825|}
_ZNK6google8protobuf15DescriptorProto5fieldEv:
 9612|     67|DescriptorProto::field() const {
 9613|       |  // @@protoc_insertion_point(field_list:google.protobuf.DescriptorProto.field)
 9614|     67|  return _impl_.field_;
 9615|     67|}
_ZNK6google8protobuf15DescriptorProto24_internal_extension_sizeEv:
 9618|    201|inline int DescriptorProto::_internal_extension_size() const {
 9619|    201|  return _impl_.extension_.size();
 9620|    201|}
_ZNK6google8protobuf15DescriptorProto14extension_sizeEv:
 9621|    201|inline int DescriptorProto::extension_size() const {
 9622|    201|  return _internal_extension_size();
 9623|    201|}
_ZNK6google8protobuf15DescriptorProto9extensionEv:
 9652|    201|DescriptorProto::extension() const {
 9653|       |  // @@protoc_insertion_point(field_list:google.protobuf.DescriptorProto.extension)
 9654|    201|  return _impl_.extension_;
 9655|    201|}
_ZNK6google8protobuf15DescriptorProto26_internal_nested_type_sizeEv:
 9658|    207|inline int DescriptorProto::_internal_nested_type_size() const {
 9659|    207|  return _impl_.nested_type_.size();
 9660|    207|}
_ZNK6google8protobuf15DescriptorProto16nested_type_sizeEv:
 9661|    207|inline int DescriptorProto::nested_type_size() const {
 9662|    207|  return _internal_nested_type_size();
 9663|    207|}
_ZNK6google8protobuf15DescriptorProto21_internal_nested_typeEi:
 9676|     12|inline const ::PROTOBUF_NAMESPACE_ID::DescriptorProto& DescriptorProto::_internal_nested_type(int index) const {
 9677|     12|  return _impl_.nested_type_.Get(index);
 9678|     12|}
_ZNK6google8protobuf15DescriptorProto11nested_typeEi:
 9679|     12|inline const ::PROTOBUF_NAMESPACE_ID::DescriptorProto& DescriptorProto::nested_type(int index) const {
 9680|       |  // @@protoc_insertion_point(field_get:google.protobuf.DescriptorProto.nested_type)
 9681|     12|  return _internal_nested_type(index);
 9682|     12|}
_ZN6google8protobuf15DescriptorProto25_internal_add_nested_typeEv:
 9683|     18|inline ::PROTOBUF_NAMESPACE_ID::DescriptorProto* DescriptorProto::_internal_add_nested_type() {
 9684|     18|  return _impl_.nested_type_.Add();
 9685|     18|}
_ZNK6google8protobuf15DescriptorProto11nested_typeEv:
 9692|    201|DescriptorProto::nested_type() const {
 9693|       |  // @@protoc_insertion_point(field_list:google.protobuf.DescriptorProto.nested_type)
 9694|    201|  return _impl_.nested_type_;
 9695|    201|}
_ZNK6google8protobuf15DescriptorProto24_internal_enum_type_sizeEv:
 9698|    207|inline int DescriptorProto::_internal_enum_type_size() const {
 9699|    207|  return _impl_.enum_type_.size();
 9700|    207|}
_ZNK6google8protobuf15DescriptorProto14enum_type_sizeEv:
 9701|    207|inline int DescriptorProto::enum_type_size() const {
 9702|    207|  return _internal_enum_type_size();
 9703|    207|}
_ZNK6google8protobuf15DescriptorProto19_internal_enum_typeEi:
 9716|     12|inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptorProto& DescriptorProto::_internal_enum_type(int index) const {
 9717|     12|  return _impl_.enum_type_.Get(index);
 9718|     12|}
_ZNK6google8protobuf15DescriptorProto9enum_typeEi:
 9719|     12|inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptorProto& DescriptorProto::enum_type(int index) const {
 9720|       |  // @@protoc_insertion_point(field_get:google.protobuf.DescriptorProto.enum_type)
 9721|     12|  return _internal_enum_type(index);
 9722|     12|}
_ZN6google8protobuf15DescriptorProto23_internal_add_enum_typeEv:
 9723|     18|inline ::PROTOBUF_NAMESPACE_ID::EnumDescriptorProto* DescriptorProto::_internal_add_enum_type() {
 9724|     18|  return _impl_.enum_type_.Add();
 9725|     18|}
_ZNK6google8protobuf15DescriptorProto9enum_typeEv:
 9732|     67|DescriptorProto::enum_type() const {
 9733|       |  // @@protoc_insertion_point(field_list:google.protobuf.DescriptorProto.enum_type)
 9734|     67|  return _impl_.enum_type_;
 9735|     67|}
_ZNK6google8protobuf15DescriptorProto30_internal_extension_range_sizeEv:
 9738|    210|inline int DescriptorProto::_internal_extension_range_size() const {
 9739|    210|  return _impl_.extension_range_.size();
 9740|    210|}
_ZNK6google8protobuf15DescriptorProto20extension_range_sizeEv:
 9741|    210|inline int DescriptorProto::extension_range_size() const {
 9742|    210|  return _internal_extension_range_size();
 9743|    210|}
_ZNK6google8protobuf15DescriptorProto25_internal_extension_rangeEi:
 9756|     18|inline const ::PROTOBUF_NAMESPACE_ID::DescriptorProto_ExtensionRange& DescriptorProto::_internal_extension_range(int index) const {
 9757|     18|  return _impl_.extension_range_.Get(index);
 9758|     18|}
_ZNK6google8protobuf15DescriptorProto15extension_rangeEi:
 9759|     18|inline const ::PROTOBUF_NAMESPACE_ID::DescriptorProto_ExtensionRange& DescriptorProto::extension_range(int index) const {
 9760|       |  // @@protoc_insertion_point(field_get:google.protobuf.DescriptorProto.extension_range)
 9761|     18|  return _internal_extension_range(index);
 9762|     18|}
_ZN6google8protobuf15DescriptorProto29_internal_add_extension_rangeEv:
 9763|     27|inline ::PROTOBUF_NAMESPACE_ID::DescriptorProto_ExtensionRange* DescriptorProto::_internal_add_extension_range() {
 9764|     27|  return _impl_.extension_range_.Add();
 9765|     27|}
_ZNK6google8protobuf15DescriptorProto15extension_rangeEv:
 9772|     67|DescriptorProto::extension_range() const {
 9773|       |  // @@protoc_insertion_point(field_list:google.protobuf.DescriptorProto.extension_range)
 9774|     67|  return _impl_.extension_range_;
 9775|     67|}
_ZNK6google8protobuf15DescriptorProto25_internal_oneof_decl_sizeEv:
 9778|    212|inline int DescriptorProto::_internal_oneof_decl_size() const {
 9779|    212|  return _impl_.oneof_decl_.size();
 9780|    212|}
_ZNK6google8protobuf15DescriptorProto15oneof_decl_sizeEv:
 9781|    212|inline int DescriptorProto::oneof_decl_size() const {
 9782|    212|  return _internal_oneof_decl_size();
 9783|    212|}
_ZNK6google8protobuf15DescriptorProto20_internal_oneof_declEi:
 9796|     11|inline const ::PROTOBUF_NAMESPACE_ID::OneofDescriptorProto& DescriptorProto::_internal_oneof_decl(int index) const {
 9797|     11|  return _impl_.oneof_decl_.Get(index);
 9798|     11|}
_ZNK6google8protobuf15DescriptorProto10oneof_declEi:
 9799|     11|inline const ::PROTOBUF_NAMESPACE_ID::OneofDescriptorProto& DescriptorProto::oneof_decl(int index) const {
 9800|       |  // @@protoc_insertion_point(field_get:google.protobuf.DescriptorProto.oneof_decl)
 9801|     11|  return _internal_oneof_decl(index);
 9802|     11|}
_ZN6google8protobuf15DescriptorProto24_internal_add_oneof_declEv:
 9803|     33|inline ::PROTOBUF_NAMESPACE_ID::OneofDescriptorProto* DescriptorProto::_internal_add_oneof_decl() {
 9804|     33|  return _impl_.oneof_decl_.Add();
 9805|     33|}
_ZNK6google8protobuf15DescriptorProto10oneof_declEv:
 9812|     67|DescriptorProto::oneof_decl() const {
 9813|       |  // @@protoc_insertion_point(field_list:google.protobuf.DescriptorProto.oneof_decl)
 9814|     67|  return _impl_.oneof_decl_;
 9815|     67|}
_ZNK6google8protobuf15DescriptorProto21_internal_has_optionsEv:
 9818|    335|inline bool DescriptorProto::_internal_has_options() const {
 9819|    335|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
 9820|    335|  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  ------------------
  |  |  558|    335|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|    335|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|    335|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    335|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 335, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|    335|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 335, False: 0]
  |  |  |  Branch (559:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 9821|    335|  return value;
 9822|    335|}
_ZNK6google8protobuf15DescriptorProto11has_optionsEv:
 9823|    134|inline bool DescriptorProto::has_options() const {
 9824|    134|  return _internal_has_options();
 9825|    134|}
_ZNK6google8protobuf15DescriptorProto29_internal_reserved_range_sizeEv:
 9908|    369|inline int DescriptorProto::_internal_reserved_range_size() const {
 9909|    369|  return _impl_.reserved_range_.size();
 9910|    369|}
_ZNK6google8protobuf15DescriptorProto19reserved_range_sizeEv:
 9911|    369|inline int DescriptorProto::reserved_range_size() const {
 9912|    369|  return _internal_reserved_range_size();
 9913|    369|}
_ZNK6google8protobuf15DescriptorProto24_internal_reserved_rangeEi:
 9926|     26|inline const ::PROTOBUF_NAMESPACE_ID::DescriptorProto_ReservedRange& DescriptorProto::_internal_reserved_range(int index) const {
 9927|     26|  return _impl_.reserved_range_.Get(index);
 9928|     26|}
_ZNK6google8protobuf15DescriptorProto14reserved_rangeEi:
 9929|     26|inline const ::PROTOBUF_NAMESPACE_ID::DescriptorProto_ReservedRange& DescriptorProto::reserved_range(int index) const {
 9930|       |  // @@protoc_insertion_point(field_get:google.protobuf.DescriptorProto.reserved_range)
 9931|     26|  return _internal_reserved_range(index);
 9932|     26|}
_ZN6google8protobuf15DescriptorProto28_internal_add_reserved_rangeEv:
 9933|     24|inline ::PROTOBUF_NAMESPACE_ID::DescriptorProto_ReservedRange* DescriptorProto::_internal_add_reserved_range() {
 9934|     24|  return _impl_.reserved_range_.Add();
 9935|     24|}
_ZNK6google8protobuf15DescriptorProto28_internal_reserved_name_sizeEv:
 9948|    268|inline int DescriptorProto::_internal_reserved_name_size() const {
 9949|    268|  return _impl_.reserved_name_.size();
 9950|    268|}
_ZNK6google8protobuf15DescriptorProto18reserved_name_sizeEv:
 9951|    268|inline int DescriptorProto::reserved_name_size() const {
 9952|    268|  return _internal_reserved_name_size();
 9953|    268|}
_ZNK6google8protobuf20FieldDescriptorProto4nameEv:
10082|    825|inline const std::string& FieldDescriptorProto::name() const {
10083|       |  // @@protoc_insertion_point(field_get:google.protobuf.FieldDescriptorProto.name)
10084|    825|  return _internal_name();
10085|    825|}
_ZNK6google8protobuf20FieldDescriptorProto14_internal_nameEv:
10098|    825|inline const std::string& FieldDescriptorProto::_internal_name() const {
10099|    825|  return _impl_.name_.Get();
10100|    825|}
_ZN6google8protobuf20FieldDescriptorProto22_internal_mutable_nameEv:
10105|    825|inline std::string* FieldDescriptorProto::_internal_mutable_name() {
10106|    825|  _impl_._has_bits_[0] |= 0x00000001u;
10107|    825|  return _impl_.name_.Mutable(GetArenaForAllocation());
10108|    825|}
_ZNK6google8protobuf20FieldDescriptorProto16_internal_numberEv:
10150|    490|inline int32_t FieldDescriptorProto::_internal_number() const {
10151|    490|  return _impl_.number_;
10152|    490|}
_ZNK6google8protobuf20FieldDescriptorProto6numberEv:
10153|    490|inline int32_t FieldDescriptorProto::number() const {
10154|       |  // @@protoc_insertion_point(field_get:google.protobuf.FieldDescriptorProto.number)
10155|    490|  return _internal_number();
10156|    490|}
_ZNK6google8protobuf20FieldDescriptorProto15_internal_labelEv:
10178|    275|inline ::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Label FieldDescriptorProto::_internal_label() const {
10179|    275|  return static_cast< ::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Label >(_impl_.label_);
10180|    275|}
_ZNK6google8protobuf20FieldDescriptorProto5labelEv:
10181|    275|inline ::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Label FieldDescriptorProto::label() const {
10182|       |  // @@protoc_insertion_point(field_get:google.protobuf.FieldDescriptorProto.label)
10183|    275|  return _internal_label();
10184|    275|}
_ZN6google8protobuf20FieldDescriptorProto19_internal_set_labelENS0_26FieldDescriptorProto_LabelE:
10185|    825|inline void FieldDescriptorProto::_internal_set_label(::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Label value) {
10186|    825|  assert(::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Label_IsValid(value));
10187|    825|  _impl_._has_bits_[0] |= 0x00000200u;
10188|    825|  _impl_.label_ = value;
10189|    825|}
_ZNK6google8protobuf20FieldDescriptorProto18_internal_has_typeEv:
10196|    399|inline bool FieldDescriptorProto::_internal_has_type() const {
10197|    399|  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
10198|    399|  return value;
10199|    399|}
_ZNK6google8protobuf20FieldDescriptorProto8has_typeEv:
10200|    399|inline bool FieldDescriptorProto::has_type() const {
10201|    399|  return _internal_has_type();
10202|    399|}
_ZNK6google8protobuf20FieldDescriptorProto14_internal_typeEv:
10207|    424|inline ::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type FieldDescriptorProto::_internal_type() const {
10208|    424|  return static_cast< ::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type >(_impl_.type_);
10209|    424|}
_ZNK6google8protobuf20FieldDescriptorProto4typeEv:
10210|    424|inline ::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type FieldDescriptorProto::type() const {
10211|       |  // @@protoc_insertion_point(field_get:google.protobuf.FieldDescriptorProto.type)
10212|    424|  return _internal_type();
10213|    424|}
_ZN6google8protobuf20FieldDescriptorProto18_internal_set_typeENS0_25FieldDescriptorProto_TypeE:
10214|    825|inline void FieldDescriptorProto::_internal_set_type(::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value) {
10215|    825|  assert(::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type_IsValid(value));
10216|    825|  _impl_._has_bits_[0] |= 0x00000400u;
10217|    825|  _impl_.type_ = value;
10218|    825|}
_ZNK6google8protobuf20FieldDescriptorProto23_internal_has_type_nameEv:
10225|    275|inline bool FieldDescriptorProto::_internal_has_type_name() const {
10226|    275|  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
10227|    275|  return value;
10228|    275|}
_ZNK6google8protobuf20FieldDescriptorProto13has_type_nameEv:
10229|    275|inline bool FieldDescriptorProto::has_type_name() const {
10230|    275|  return _internal_has_type_name();
10231|    275|}
_ZNK6google8protobuf20FieldDescriptorProto9type_nameEv:
10236|     99|inline const std::string& FieldDescriptorProto::type_name() const {
10237|       |  // @@protoc_insertion_point(field_get:google.protobuf.FieldDescriptorProto.type_name)
10238|     99|  return _internal_type_name();
10239|     99|}
_ZNK6google8protobuf20FieldDescriptorProto19_internal_type_nameEv:
10252|     99|inline const std::string& FieldDescriptorProto::_internal_type_name() const {
10253|     99|  return _impl_.type_name_.Get();
10254|     99|}
_ZN6google8protobuf20FieldDescriptorProto27_internal_mutable_type_nameEv:
10259|    297|inline std::string* FieldDescriptorProto::_internal_mutable_type_name() {
10260|    297|  _impl_._has_bits_[0] |= 0x00000004u;
10261|    297|  return _impl_.type_name_.Mutable(GetArenaForAllocation());
10262|    297|}
_ZNK6google8protobuf20FieldDescriptorProto22_internal_has_extendeeEv:
10293|    550|inline bool FieldDescriptorProto::_internal_has_extendee() const {
10294|    550|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
10295|    550|  return value;
10296|    550|}
_ZNK6google8protobuf20FieldDescriptorProto12has_extendeeEv:
10297|    550|inline bool FieldDescriptorProto::has_extendee() const {
10298|    550|  return _internal_has_extendee();
10299|    550|}
_ZNK6google8protobuf20FieldDescriptorProto27_internal_has_default_valueEv:
10361|  1.19k|inline bool FieldDescriptorProto::_internal_has_default_value() const {
10362|  1.19k|  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
10363|  1.19k|  return value;
10364|  1.19k|}
_ZNK6google8protobuf20FieldDescriptorProto17has_default_valueEv:
10365|  1.19k|inline bool FieldDescriptorProto::has_default_value() const {
10366|  1.19k|  return _internal_has_default_value();
10367|  1.19k|}
_ZNK6google8protobuf20FieldDescriptorProto13default_valueEv:
10372|     49|inline const std::string& FieldDescriptorProto::default_value() const {
10373|       |  // @@protoc_insertion_point(field_get:google.protobuf.FieldDescriptorProto.default_value)
10374|     49|  return _internal_default_value();
10375|     49|}
_ZNK6google8protobuf20FieldDescriptorProto23_internal_default_valueEv:
10388|     49|inline const std::string& FieldDescriptorProto::_internal_default_value() const {
10389|     49|  return _impl_.default_value_.Get();
10390|     49|}
_ZN6google8protobuf20FieldDescriptorProto31_internal_mutable_default_valueEv:
10395|     75|inline std::string* FieldDescriptorProto::_internal_mutable_default_value() {
10396|     75|  _impl_._has_bits_[0] |= 0x00000008u;
10397|     75|  return _impl_.default_value_.Mutable(GetArenaForAllocation());
10398|     75|}
_ZNK6google8protobuf20FieldDescriptorProto25_internal_has_oneof_indexEv:
10429|    275|inline bool FieldDescriptorProto::_internal_has_oneof_index() const {
10430|    275|  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
10431|    275|  return value;
10432|    275|}
_ZNK6google8protobuf20FieldDescriptorProto15has_oneof_indexEv:
10433|    275|inline bool FieldDescriptorProto::has_oneof_index() const {
10434|    275|  return _internal_has_oneof_index();
10435|    275|}
_ZNK6google8protobuf20FieldDescriptorProto21_internal_oneof_indexEv:
10440|    261|inline int32_t FieldDescriptorProto::_internal_oneof_index() const {
10441|    261|  return _impl_.oneof_index_;
10442|    261|}
_ZNK6google8protobuf20FieldDescriptorProto11oneof_indexEv:
10443|    261|inline int32_t FieldDescriptorProto::oneof_index() const {
10444|       |  // @@protoc_insertion_point(field_get:google.protobuf.FieldDescriptorProto.oneof_index)
10445|    261|  return _internal_oneof_index();
10446|    261|}
_ZNK6google8protobuf20FieldDescriptorProto23_internal_has_json_nameEv:
10457|    825|inline bool FieldDescriptorProto::_internal_has_json_name() const {
10458|    825|  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
10459|    825|  return value;
10460|    825|}
_ZNK6google8protobuf20FieldDescriptorProto13has_json_nameEv:
10461|    825|inline bool FieldDescriptorProto::has_json_name() const {
10462|    825|  return _internal_has_json_name();
10463|    825|}
_ZNK6google8protobuf20FieldDescriptorProto21_internal_has_optionsEv:
10525|  1.37k|inline bool FieldDescriptorProto::_internal_has_options() const {
10526|  1.37k|  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
10527|  1.37k|  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  ------------------
  |  |  558|  1.37k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  1.37k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  1.37k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  1.39k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 1.35k, False: 20]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 20, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  1.39k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 1.35k, False: 20]
  |  |  |  Branch (559:20): [True: 20, False: 0]
  |  |  ------------------
  ------------------
10528|  1.37k|  return value;
10529|  1.37k|}
_ZNK6google8protobuf20FieldDescriptorProto11has_optionsEv:
10530|    550|inline bool FieldDescriptorProto::has_options() const {
10531|    550|  return _internal_has_options();
10532|    550|}
_ZNK6google8protobuf20FieldDescriptorProto17_internal_optionsEv:
10537|    103|inline const ::PROTOBUF_NAMESPACE_ID::FieldOptions& FieldDescriptorProto::_internal_options() const {
10538|    103|  const ::PROTOBUF_NAMESPACE_ID::FieldOptions* p = _impl_.options_;
10539|    103|  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldOptions&>(
  ------------------
  |  Branch (10539:10): [True: 4, False: 99]
  ------------------
10540|     99|      ::PROTOBUF_NAMESPACE_ID::_FieldOptions_default_instance_);
10541|    103|}
_ZNK6google8protobuf20FieldDescriptorProto7optionsEv:
10542|    103|inline const ::PROTOBUF_NAMESPACE_ID::FieldOptions& FieldDescriptorProto::options() const {
10543|       |  // @@protoc_insertion_point(field_get:google.protobuf.FieldDescriptorProto.options)
10544|    103|  return _internal_options();
10545|    103|}
_ZN6google8protobuf20FieldDescriptorProto25_internal_mutable_optionsEv:
10581|     12|inline ::PROTOBUF_NAMESPACE_ID::FieldOptions* FieldDescriptorProto::_internal_mutable_options() {
10582|     12|  _impl_._has_bits_[0] |= 0x00000020u;
10583|     12|  if (_impl_.options_ == nullptr) {
  ------------------
  |  Branch (10583:7): [True: 12, False: 0]
  ------------------
10584|     12|    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldOptions>(GetArenaForAllocation());
10585|     12|    _impl_.options_ = p;
10586|     12|  }
10587|     12|  return _impl_.options_;
10588|     12|}
_ZNK6google8protobuf20FieldDescriptorProto25_internal_proto3_optionalEv:
10626|    550|inline bool FieldDescriptorProto::_internal_proto3_optional() const {
10627|    550|  return _impl_.proto3_optional_;
10628|    550|}
_ZNK6google8protobuf20FieldDescriptorProto15proto3_optionalEv:
10629|    550|inline bool FieldDescriptorProto::proto3_optional() const {
10630|       |  // @@protoc_insertion_point(field_get:google.protobuf.FieldDescriptorProto.proto3_optional)
10631|    550|  return _internal_proto3_optional();
10632|    550|}
_ZNK6google8protobuf20OneofDescriptorProto4nameEv:
10658|     22|inline const std::string& OneofDescriptorProto::name() const {
10659|       |  // @@protoc_insertion_point(field_get:google.protobuf.OneofDescriptorProto.name)
10660|     22|  return _internal_name();
10661|     22|}
_ZNK6google8protobuf20OneofDescriptorProto14_internal_nameEv:
10674|     22|inline const std::string& OneofDescriptorProto::_internal_name() const {
10675|     22|  return _impl_.name_.Get();
10676|     22|}
_ZN6google8protobuf20OneofDescriptorProto22_internal_mutable_nameEv:
10681|     33|inline std::string* OneofDescriptorProto::_internal_mutable_name() {
10682|     33|  _impl_._has_bits_[0] |= 0x00000001u;
10683|     33|  return _impl_.name_.Mutable(GetArenaForAllocation());
10684|     33|}
_ZNK6google8protobuf20OneofDescriptorProto21_internal_has_optionsEv:
10715|     55|inline bool OneofDescriptorProto::_internal_has_options() const {
10716|     55|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
10717|     55|  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  ------------------
  |  |  558|     55|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|     55|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     55|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     55|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 55, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|     55|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 55, False: 0]
  |  |  |  Branch (559:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
10718|     55|  return value;
10719|     55|}
_ZNK6google8protobuf20OneofDescriptorProto11has_optionsEv:
10720|     22|inline bool OneofDescriptorProto::has_options() const {
10721|     22|  return _internal_has_options();
10722|     22|}
_ZNK6google8protobuf19EnumDescriptorProto4nameEv:
10880|     12|inline const std::string& EnumDescriptorProto::name() const {
10881|       |  // @@protoc_insertion_point(field_get:google.protobuf.EnumDescriptorProto.name)
10882|     12|  return _internal_name();
10883|     12|}
_ZNK6google8protobuf19EnumDescriptorProto14_internal_nameEv:
10896|     12|inline const std::string& EnumDescriptorProto::_internal_name() const {
10897|     12|  return _impl_.name_.Get();
10898|     12|}
_ZN6google8protobuf19EnumDescriptorProto22_internal_mutable_nameEv:
10903|     18|inline std::string* EnumDescriptorProto::_internal_mutable_name() {
10904|     18|  _impl_._has_bits_[0] |= 0x00000001u;
10905|     18|  return _impl_.name_.Mutable(GetArenaForAllocation());
10906|     18|}
_ZNK6google8protobuf19EnumDescriptorProto20_internal_value_sizeEv:
10937|     96|inline int EnumDescriptorProto::_internal_value_size() const {
10938|     96|  return _impl_.value_.size();
10939|     96|}
_ZNK6google8protobuf19EnumDescriptorProto10value_sizeEv:
10940|     96|inline int EnumDescriptorProto::value_size() const {
10941|     96|  return _internal_value_size();
10942|     96|}
_ZNK6google8protobuf19EnumDescriptorProto15_internal_valueEi:
10955|    132|inline const ::PROTOBUF_NAMESPACE_ID::EnumValueDescriptorProto& EnumDescriptorProto::_internal_value(int index) const {
10956|    132|  return _impl_.value_.Get(index);
10957|    132|}
_ZNK6google8protobuf19EnumDescriptorProto5valueEi:
10958|    132|inline const ::PROTOBUF_NAMESPACE_ID::EnumValueDescriptorProto& EnumDescriptorProto::value(int index) const {
10959|       |  // @@protoc_insertion_point(field_get:google.protobuf.EnumDescriptorProto.value)
10960|    132|  return _internal_value(index);
10961|    132|}
_ZN6google8protobuf19EnumDescriptorProto19_internal_add_valueEv:
10962|     99|inline ::PROTOBUF_NAMESPACE_ID::EnumValueDescriptorProto* EnumDescriptorProto::_internal_add_value() {
10963|     99|  return _impl_.value_.Add();
10964|     99|}
_ZNK6google8protobuf19EnumDescriptorProto5valueEv:
10971|      6|EnumDescriptorProto::value() const {
10972|       |  // @@protoc_insertion_point(field_list:google.protobuf.EnumDescriptorProto.value)
10973|      6|  return _impl_.value_;
10974|      6|}
_ZNK6google8protobuf19EnumDescriptorProto21_internal_has_optionsEv:
10977|     30|inline bool EnumDescriptorProto::_internal_has_options() const {
10978|     30|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
10979|     30|  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  ------------------
  |  |  558|     30|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|     30|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     30|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     30|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 30, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|     30|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 30, False: 0]
  |  |  |  Branch (559:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
10980|     30|  return value;
10981|     30|}
_ZNK6google8protobuf19EnumDescriptorProto11has_optionsEv:
10982|     12|inline bool EnumDescriptorProto::has_options() const {
10983|     12|  return _internal_has_options();
10984|     12|}
_ZNK6google8protobuf19EnumDescriptorProto29_internal_reserved_range_sizeEv:
11067|     30|inline int EnumDescriptorProto::_internal_reserved_range_size() const {
11068|     30|  return _impl_.reserved_range_.size();
11069|     30|}
_ZNK6google8protobuf19EnumDescriptorProto19reserved_range_sizeEv:
11070|     30|inline int EnumDescriptorProto::reserved_range_size() const {
11071|     30|  return _internal_reserved_range_size();
11072|     30|}
_ZNK6google8protobuf19EnumDescriptorProto28_internal_reserved_name_sizeEv:
11107|     24|inline int EnumDescriptorProto::_internal_reserved_name_size() const {
11108|     24|  return _impl_.reserved_name_.size();
11109|     24|}
_ZNK6google8protobuf19EnumDescriptorProto18reserved_name_sizeEv:
11110|     24|inline int EnumDescriptorProto::reserved_name_size() const {
11111|     24|  return _internal_reserved_name_size();
11112|     24|}
_ZNK6google8protobuf24EnumValueDescriptorProto4nameEv:
11197|    132|inline const std::string& EnumValueDescriptorProto::name() const {
11198|       |  // @@protoc_insertion_point(field_get:google.protobuf.EnumValueDescriptorProto.name)
11199|    132|  return _internal_name();
11200|    132|}
_ZNK6google8protobuf24EnumValueDescriptorProto14_internal_nameEv:
11213|    132|inline const std::string& EnumValueDescriptorProto::_internal_name() const {
11214|    132|  return _impl_.name_.Get();
11215|    132|}
_ZN6google8protobuf24EnumValueDescriptorProto22_internal_mutable_nameEv:
11220|     99|inline std::string* EnumValueDescriptorProto::_internal_mutable_name() {
11221|     99|  _impl_._has_bits_[0] |= 0x00000001u;
11222|     99|  return _impl_.name_.Mutable(GetArenaForAllocation());
11223|     99|}
_ZNK6google8protobuf24EnumValueDescriptorProto16_internal_numberEv:
11265|     99|inline int32_t EnumValueDescriptorProto::_internal_number() const {
11266|     99|  return _impl_.number_;
11267|     99|}
_ZNK6google8protobuf24EnumValueDescriptorProto6numberEv:
11268|     99|inline int32_t EnumValueDescriptorProto::number() const {
11269|       |  // @@protoc_insertion_point(field_get:google.protobuf.EnumValueDescriptorProto.number)
11270|     99|  return _internal_number();
11271|     99|}
_ZNK6google8protobuf24EnumValueDescriptorProto21_internal_has_optionsEv:
11282|    165|inline bool EnumValueDescriptorProto::_internal_has_options() const {
11283|    165|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
11284|    165|  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  ------------------
  |  |  558|    165|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|    165|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|    165|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    165|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 165, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|    165|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 165, False: 0]
  |  |  |  Branch (559:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
11285|    165|  return value;
11286|    165|}
_ZNK6google8protobuf24EnumValueDescriptorProto11has_optionsEv:
11287|     66|inline bool EnumValueDescriptorProto::has_options() const {
11288|     66|  return _internal_has_options();
11289|     66|}
_ZNK6google8protobuf11FileOptions22_internal_java_packageEv:
11959|      8|inline const std::string& FileOptions::_internal_java_package() const {
11960|      8|  return _impl_.java_package_.Get();
11961|      8|}
_ZN6google8protobuf11FileOptions30_internal_mutable_java_packageEv:
11966|      8|inline std::string* FileOptions::_internal_mutable_java_package() {
11967|      8|  _impl_._has_bits_[0] |= 0x00000001u;
11968|      8|  return _impl_.java_package_.Mutable(GetArenaForAllocation());
11969|      8|}
_ZNK6google8protobuf11FileOptions30_internal_java_outer_classnameEv:
12027|      8|inline const std::string& FileOptions::_internal_java_outer_classname() const {
12028|      8|  return _impl_.java_outer_classname_.Get();
12029|      8|}
_ZN6google8protobuf11FileOptions38_internal_mutable_java_outer_classnameEv:
12034|      8|inline std::string* FileOptions::_internal_mutable_java_outer_classname() {
12035|      8|  _impl_._has_bits_[0] |= 0x00000002u;
12036|      8|  return _impl_.java_outer_classname_.Mutable(GetArenaForAllocation());
12037|      8|}
_ZNK6google8protobuf11FileOptions29_internal_java_multiple_filesEv:
12079|      1|inline bool FileOptions::_internal_java_multiple_files() const {
12080|      1|  return _impl_.java_multiple_files_;
12081|      1|}
_ZNK6google8protobuf11FileOptions22_internal_optimize_forEv:
12163|      2|inline ::PROTOBUF_NAMESPACE_ID::FileOptions_OptimizeMode FileOptions::_internal_optimize_for() const {
12164|      2|  return static_cast< ::PROTOBUF_NAMESPACE_ID::FileOptions_OptimizeMode >(_impl_.optimize_for_);
12165|      2|}
_ZN6google8protobuf11FileOptions26_internal_set_optimize_forENS0_24FileOptions_OptimizeModeE:
12170|      4|inline void FileOptions::_internal_set_optimize_for(::PROTOBUF_NAMESPACE_ID::FileOptions_OptimizeMode value) {
12171|      4|  assert(::PROTOBUF_NAMESPACE_ID::FileOptions_OptimizeMode_IsValid(value));
12172|      4|  _impl_._has_bits_[0] |= 0x00040000u;
12173|      4|  _impl_.optimize_for_ = value;
12174|      4|}
_ZNK6google8protobuf11FileOptions20_internal_go_packageEv:
12208|      8|inline const std::string& FileOptions::_internal_go_package() const {
12209|      8|  return _impl_.go_package_.Get();
12210|      8|}
_ZN6google8protobuf11FileOptions28_internal_mutable_go_packageEv:
12215|      8|inline std::string* FileOptions::_internal_mutable_go_package() {
12216|      8|  _impl_._has_bits_[0] |= 0x00000004u;
12217|      8|  return _impl_.go_package_.Mutable(GetArenaForAllocation());
12218|      8|}
_ZNK6google8protobuf11FileOptions29_internal_cc_generic_servicesEv:
12260|      3|inline bool FileOptions::_internal_cc_generic_services() const {
12261|      3|  return _impl_.cc_generic_services_;
12262|      3|}
_ZNK6google8protobuf11FileOptions19cc_generic_servicesEv:
12263|      3|inline bool FileOptions::cc_generic_services() const {
12264|       |  // @@protoc_insertion_point(field_get:google.protobuf.FileOptions.cc_generic_services)
12265|      3|  return _internal_cc_generic_services();
12266|      3|}
_ZNK6google8protobuf11FileOptions26_internal_cc_enable_arenasEv:
12400|      1|inline bool FileOptions::_internal_cc_enable_arenas() const {
12401|      1|  return _impl_.cc_enable_arenas_;
12402|      1|}
_ZNK6google8protobuf11FileOptions27_internal_objc_class_prefixEv:
12444|      8|inline const std::string& FileOptions::_internal_objc_class_prefix() const {
12445|      8|  return _impl_.objc_class_prefix_.Get();
12446|      8|}
_ZN6google8protobuf11FileOptions35_internal_mutable_objc_class_prefixEv:
12451|      8|inline std::string* FileOptions::_internal_mutable_objc_class_prefix() {
12452|      8|  _impl_._has_bits_[0] |= 0x00000008u;
12453|      8|  return _impl_.objc_class_prefix_.Mutable(GetArenaForAllocation());
12454|      8|}
_ZNK6google8protobuf11FileOptions26_internal_csharp_namespaceEv:
12512|      8|inline const std::string& FileOptions::_internal_csharp_namespace() const {
12513|      8|  return _impl_.csharp_namespace_.Get();
12514|      8|}
_ZN6google8protobuf11FileOptions34_internal_mutable_csharp_namespaceEv:
12519|      8|inline std::string* FileOptions::_internal_mutable_csharp_namespace() {
12520|      8|  _impl_._has_bits_[0] |= 0x00000010u;
12521|      8|  return _impl_.csharp_namespace_.Mutable(GetArenaForAllocation());
12522|      8|}
_ZNK6google8protobuf11FileOptions35_internal_uninterpreted_option_sizeEv:
12893|      6|inline int FileOptions::_internal_uninterpreted_option_size() const {
12894|      6|  return _impl_.uninterpreted_option_.size();
12895|      6|}
_ZNK6google8protobuf11FileOptions25uninterpreted_option_sizeEv:
12896|      2|inline int FileOptions::uninterpreted_option_size() const {
12897|      2|  return _internal_uninterpreted_option_size();
12898|      2|}
_ZNK6google8protobuf12FieldOptions15_internal_ctypeEv:
13104|  42.1k|inline ::PROTOBUF_NAMESPACE_ID::FieldOptions_CType FieldOptions::_internal_ctype() const {
13105|  42.1k|  return static_cast< ::PROTOBUF_NAMESPACE_ID::FieldOptions_CType >(_impl_.ctype_);
13106|  42.1k|}
_ZNK6google8protobuf12FieldOptions5ctypeEv:
13107|  42.1k|inline ::PROTOBUF_NAMESPACE_ID::FieldOptions_CType FieldOptions::ctype() const {
13108|       |  // @@protoc_insertion_point(field_get:google.protobuf.FieldOptions.ctype)
13109|  42.1k|  return _internal_ctype();
13110|  42.1k|}
_ZNK6google8protobuf12FieldOptions16_internal_packedEv:
13133|      3|inline bool FieldOptions::_internal_packed() const {
13134|      3|  return _impl_.packed_;
13135|      3|}
_ZNK6google8protobuf12FieldOptions20_internal_deprecatedEv:
13246|   615k|inline bool FieldOptions::_internal_deprecated() const {
13247|   615k|  return _impl_.deprecated_;
13248|   615k|}
_ZNK6google8protobuf12FieldOptions10deprecatedEv:
13249|   615k|inline bool FieldOptions::deprecated() const {
13250|       |  // @@protoc_insertion_point(field_get:google.protobuf.FieldOptions.deprecated)
13251|   615k|  return _internal_deprecated();
13252|   615k|}
_ZNK6google8protobuf12FieldOptions14_internal_weakEv:
13274|  1.28M|inline bool FieldOptions::_internal_weak() const {
13275|  1.28M|  return _impl_.weak_;
13276|  1.28M|}
_ZNK6google8protobuf12FieldOptions4weakEv:
13277|  1.28M|inline bool FieldOptions::weak() const {
13278|       |  // @@protoc_insertion_point(field_get:google.protobuf.FieldOptions.weak)
13279|  1.28M|  return _internal_weak();
13280|  1.28M|}
_ZNK6google8protobuf12FieldOptions35_internal_uninterpreted_option_sizeEv:
13291|     12|inline int FieldOptions::_internal_uninterpreted_option_size() const {
13292|     12|  return _impl_.uninterpreted_option_.size();
13293|     12|}
_ZNK6google8protobuf12FieldOptions25uninterpreted_option_sizeEv:
13294|      4|inline int FieldOptions::uninterpreted_option_size() const {
13295|      4|  return _internal_uninterpreted_option_size();
13296|      4|}

_ZN6google8protobuf25EncodedDescriptorDatabase3AddEPKvi:
  555|      6|                                    int size) {
  556|      6|  FileDescriptorProto file;
  557|      6|  if (file.ParseFromArray(encoded_file_descriptor, size)) {
  ------------------
  |  Branch (557:7): [True: 6, False: 0]
  ------------------
  558|      6|    return index_->AddFile(file, std::make_pair(encoded_file_descriptor, size));
  559|      6|  } else {
  560|      0|    GOOGLE_LOG(ERROR) << "Invalid file descriptor data passed to "
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  561|      0|                  "EncodedDescriptorDatabase::Add().";
  562|      0|    return false;
  563|      0|  }
  564|      6|}
_ZN6google8protobuf25EncodedDescriptorDatabase14FindFileByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS0_19FileDescriptorProtoE:
  575|      3|                                               FileDescriptorProto* output) {
  576|      3|  return MaybeParse(index_->FindFile(filename), output);
  577|      3|}
_ZN6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex9AddSymbolENS0_20stringpiece_internal11StringPieceE:
  693|    122|    StringPiece symbol) {
  694|    122|  SymbolEntry entry = {static_cast<int>(all_values_.size() - 1),
  695|    122|                       EncodeString(symbol)};
  696|    122|  std::string entry_as_string = entry.AsString(*this);
  697|       |
  698|       |  // We need to make sure not to violate our map invariant.
  699|       |
  700|       |  // If the symbol name is invalid it could break our lookup algorithm (which
  701|       |  // relies on the fact that '.' sorts before all other characters that are
  702|       |  // valid in symbol names).
  703|    122|  if (!ValidateSymbolName(symbol)) {
  ------------------
  |  Branch (703:7): [True: 0, False: 122]
  ------------------
  704|      0|    GOOGLE_LOG(ERROR) << "Invalid symbol name: " << entry_as_string;
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  705|      0|    return false;
  706|      0|  }
  707|       |
  708|    122|  auto iter = FindLastLessOrEqual(&by_symbol_, entry);
  709|    122|  if (!CheckForMutualSubsymbols(entry_as_string, &iter, by_symbol_.end(),
  ------------------
  |  Branch (709:7): [True: 0, False: 122]
  ------------------
  710|    122|                                *this)) {
  711|      0|    return false;
  712|      0|  }
  713|       |
  714|       |  // Same, but on by_symbol_flat_
  715|    122|  auto flat_iter =
  716|    122|      FindLastLessOrEqual(&by_symbol_flat_, entry, by_symbol_.key_comp());
  717|    122|  if (!CheckForMutualSubsymbols(entry_as_string, &flat_iter,
  ------------------
  |  Branch (717:7): [True: 0, False: 122]
  ------------------
  718|    122|                                by_symbol_flat_.end(), *this)) {
  719|      0|    return false;
  720|      0|  }
  721|       |
  722|       |  // OK, no conflicts.
  723|       |
  724|       |  // Insert the new symbol using the iterator as a hint, the new entry will
  725|       |  // appear immediately before the one the iterator is pointing at.
  726|    122|  by_symbol_.insert(iter, entry);
  727|       |
  728|    122|  return true;
  729|    122|}
_ZN6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex10EnsureFlatEv:
  814|      3|void EncodedDescriptorDatabase::DescriptorIndex::EnsureFlat() {
  815|      3|  all_values_.shrink_to_fit();
  816|       |  // Merge each of the sets into their flat counterpart.
  817|      3|  MergeIntoFlat(&by_name_, &by_name_flat_);
  818|      3|  MergeIntoFlat(&by_symbol_, &by_symbol_flat_);
  819|      3|  MergeIntoFlat(&by_extension_, &by_extension_flat_);
  820|      3|}
_ZN6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex8FindFileENS0_20stringpiece_internal11StringPieceE:
  856|      3|    StringPiece filename) {
  857|      3|  EnsureFlat();
  858|       |
  859|      3|  auto it = std::lower_bound(by_name_flat_.begin(), by_name_flat_.end(),
  860|      3|                             filename, by_name_.key_comp());
  861|      3|  return it == by_name_flat_.end() || it->name(*this) != filename
  ------------------
  |  Branch (861:10): [True: 0, False: 3]
  |  Branch (861:39): [True: 0, False: 3]
  ------------------
  862|      3|             ? std::make_pair(nullptr, 0)
  863|      3|             : all_values_[it->data_offset].value();
  864|      3|}
_ZN6google8protobuf25EncodedDescriptorDatabase10MaybeParseENSt3__14pairIPKviEEPNS0_19FileDescriptorProtoE:
  874|      3|    std::pair<const void*, int> encoded_file, FileDescriptorProto* output) {
  875|      3|  if (encoded_file.first == nullptr) return false;
  ------------------
  |  Branch (875:7): [True: 0, False: 3]
  ------------------
  876|      3|  return output->ParseFromArray(encoded_file.first, encoded_file.second);
  877|      3|}
_ZN6google8protobuf25EncodedDescriptorDatabaseC2Ev:
  880|      2|    : index_(new DescriptorIndex()) {}
_ZNK6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex12EncodeStringENS0_20stringpiece_internal11StringPieceE:
  430|    134|  String EncodeString(StringPiece str) const { return String(str); }
_ZNK6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex11SymbolEntry8AsStringERKS2_:
  480|    332|    std::string AsString(const DescriptorIndex& index) const {
  481|    332|      auto p = package(index);
  482|    332|      return StrCat(p, p.empty() ? "" : ".", symbol(index));
  ------------------
  |  Branch (482:24): [True: 0, False: 332]
  ------------------
  483|    332|    }
_ZNK6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex11SymbolEntry7packageERKS2_:
  472|  2.07k|    StringPiece package(const DescriptorIndex& index) const {
  473|  2.07k|      return index.DecodeString(index.all_values_[data_offset].encoded_package,
  474|  2.07k|                                data_offset);
  475|  2.07k|    }
_ZNK6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex12DecodeStringERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEi:
  431|  4.18k|  StringPiece DecodeString(const String& str, int) const { return str; }
_ZNK6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex11SymbolEntry6symbolERKS2_:
  476|  2.07k|    StringPiece symbol(const DescriptorIndex& index) const {
  477|  2.07k|      return index.DecodeString(encoded_symbol, data_offset);
  478|  2.07k|    }
descriptor_database.cc:_ZN6google8protobuf12_GLOBAL__N_118ValidateSymbolNameENS0_20stringpiece_internal11StringPieceE:
  154|    128|bool ValidateSymbolName(StringPiece name) {
  155|  1.88k|  for (char c : name) {
  ------------------
  |  Branch (155:15): [True: 1.88k, False: 128]
  ------------------
  156|       |    // I don't trust ctype.h due to locales.  :(
  157|  1.88k|    if (c != '.' && c != '_' && (c < '0' || c > '9') && (c < 'A' || c > 'Z') &&
  ------------------
  |  Branch (157:9): [True: 1.88k, False: 4]
  |  Branch (157:21): [True: 1.88k, False: 0]
  |  Branch (157:34): [True: 0, False: 1.88k]
  |  Branch (157:45): [True: 1.88k, False: 0]
  |  Branch (157:58): [True: 0, False: 1.88k]
  |  Branch (157:69): [True: 1.61k, False: 266]
  ------------------
  158|  1.88k|        (c < 'a' || c > 'z')) {
  ------------------
  |  Branch (158:10): [True: 0, False: 1.61k]
  |  Branch (158:21): [True: 0, False: 1.61k]
  ------------------
  159|      0|      return false;
  160|      0|    }
  161|  1.88k|  }
  162|    128|  return true;
  163|    128|}
descriptor_database.cc:_ZN6google8protobuf12_GLOBAL__N_111IsSubSymbolENS0_20stringpiece_internal11StringPieceES3_:
  188|    210|bool IsSubSymbol(StringPiece sub_symbol, StringPiece super_symbol) {
  189|    210|  return sub_symbol == super_symbol ||
  ------------------
  |  Branch (189:10): [True: 0, False: 210]
  ------------------
  190|    210|         (HasPrefixString(super_symbol, sub_symbol) &&
  ------------------
  |  Branch (190:11): [True: 18, False: 192]
  ------------------
  191|    210|          super_symbol[sub_symbol.size()] == '.');
  ------------------
  |  Branch (191:11): [True: 0, False: 18]
  ------------------
  192|    210|}
_ZNK6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex12EncodedEntry5valueEv:
  440|      3|    Value value() const { return {data, size}; }
_ZNK6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex9FileEntry4nameERKS2_:
  448|     33|    StringPiece name(const DescriptorIndex& index) const {
  449|     33|      return index.DecodeString(encoded_name, data_offset);
  450|     33|    }
_ZN6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex7AddFileINS0_19FileDescriptorProtoEEEbRKT_NSt3__14pairIPKviEE:
  626|      6|                                                         Value value) {
  627|       |  // We push `value` into the array first. This is important because the AddXXX
  628|       |  // functions below will expect it to be there.
  629|      6|  all_values_.push_back({value.first, value.second, {}});
  630|       |
  631|      6|  if (!ValidateSymbolName(file.package())) {
  ------------------
  |  Branch (631:7): [True: 0, False: 6]
  ------------------
  632|      0|    GOOGLE_LOG(ERROR) << "Invalid package name: " << file.package();
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  633|      0|    return false;
  634|      0|  }
  635|      6|  all_values_.back().encoded_package = EncodeString(file.package());
  636|       |
  637|      6|  if (!InsertIfNotPresent(
  ------------------
  |  Branch (637:7): [True: 0, False: 6]
  |  Branch (637:7): [True: 0, False: 6]
  ------------------
  638|      6|          &by_name_, FileEntry{static_cast<int>(all_values_.size() - 1),
  639|      6|                               EncodeString(file.name())}) ||
  640|      6|      std::binary_search(by_name_flat_.begin(), by_name_flat_.end(),
  ------------------
  |  Branch (640:7): [True: 0, False: 6]
  ------------------
  641|      6|                         file.name(), by_name_.key_comp())) {
  642|      0|    GOOGLE_LOG(ERROR) << "File already exists in database: " << file.name();
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  643|      0|    return false;
  644|      0|  }
  645|       |
  646|    122|  for (const auto& message_type : file.message_type()) {
  ------------------
  |  Branch (646:33): [True: 122, False: 6]
  ------------------
  647|    122|    if (!AddSymbol(message_type.name())) return false;
  ------------------
  |  Branch (647:9): [True: 0, False: 122]
  ------------------
  648|    122|    if (!AddNestedExtensions(file.name(), message_type)) return false;
  ------------------
  |  Branch (648:9): [True: 0, False: 122]
  ------------------
  649|    122|  }
  650|      6|  for (const auto& enum_type : file.enum_type()) {
  ------------------
  |  Branch (650:30): [True: 0, False: 6]
  ------------------
  651|      0|    if (!AddSymbol(enum_type.name())) return false;
  ------------------
  |  Branch (651:9): [True: 0, False: 0]
  ------------------
  652|      0|  }
  653|      6|  for (const auto& extension : file.extension()) {
  ------------------
  |  Branch (653:30): [True: 0, False: 6]
  ------------------
  654|      0|    if (!AddSymbol(extension.name())) return false;
  ------------------
  |  Branch (654:9): [True: 0, False: 0]
  ------------------
  655|      0|    if (!AddExtension(file.name(), extension)) return false;
  ------------------
  |  Branch (655:9): [True: 0, False: 0]
  ------------------
  656|      0|  }
  657|      6|  for (const auto& service : file.service()) {
  ------------------
  |  Branch (657:28): [True: 0, False: 6]
  ------------------
  658|      0|    if (!AddSymbol(service.name())) return false;
  ------------------
  |  Branch (658:9): [True: 0, False: 0]
  ------------------
  659|      0|  }
  660|       |
  661|      6|  return true;
  662|      6|}
_ZNK6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex11FileCompareclERKNS2_9FileEntryES6_:
  455|     12|    bool operator()(const FileEntry& a, const FileEntry& b) const {
  456|     12|      return a.name(index) < b.name(index);
  457|     12|    }
_ZNK6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex11FileCompareclERKNS2_9FileEntryENS0_20stringpiece_internal11StringPieceE:
  458|      6|    bool operator()(const FileEntry& a, StringPiece b) const {
  459|      6|      return a.name(index) < b;
  460|      6|    }
_ZN6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex19AddNestedExtensionsINS0_15DescriptorProtoEEEbNS0_20stringpiece_internal11StringPieceERKT_:
  733|    134|    StringPiece filename, const DescProto& message_type) {
  734|    134|  for (const auto& nested_type : message_type.nested_type()) {
  ------------------
  |  Branch (734:32): [True: 12, False: 134]
  ------------------
  735|     12|    if (!AddNestedExtensions(filename, nested_type)) return false;
  ------------------
  |  Branch (735:9): [True: 0, False: 12]
  ------------------
  736|     12|  }
  737|    134|  for (const auto& extension : message_type.extension()) {
  ------------------
  |  Branch (737:30): [True: 0, False: 134]
  ------------------
  738|      0|    if (!AddExtension(filename, extension)) return false;
  ------------------
  |  Branch (738:9): [True: 0, False: 0]
  ------------------
  739|      0|  }
  740|    134|  return true;
  741|    134|}
descriptor_database.cc:_ZN6google8protobuf12_GLOBAL__N_119FindLastLessOrEqualINSt3__13setINS0_25EncodedDescriptorDatabase15DescriptorIndex11SymbolEntryENS6_13SymbolCompareENS3_9allocatorIS7_EEEES7_EENT_14const_iteratorEPKSC_RKT0_:
  170|    122|    const Container* container, const Key& key) {
  171|    122|  auto iter = container->upper_bound(key);
  172|    122|  if (iter != container->begin()) --iter;
  ------------------
  |  Branch (172:7): [True: 112, False: 10]
  ------------------
  173|    122|  return iter;
  174|    122|}
_ZNK6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex13SymbolCompareclINS2_11SymbolEntryES5_EEbRKT_RKT0_:
  506|    872|    bool operator()(const T& lhs, const U& rhs) const {
  507|    872|      auto lhs_parts = GetParts(lhs);
  508|    872|      auto rhs_parts = GetParts(rhs);
  509|       |
  510|       |      // Fast path to avoid making the whole string for common cases.
  511|    872|      if (int res =
  ------------------
  |  Branch (511:15): [True: 122, False: 750]
  ------------------
  512|    872|              lhs_parts.first.substr(0, rhs_parts.first.size())
  513|    872|                  .compare(rhs_parts.first.substr(0, lhs_parts.first.size()))) {
  514|       |        // If the packages already differ, exit early.
  515|    122|        return res < 0;
  516|    750|      } else if (lhs_parts.first.size() == rhs_parts.first.size()) {
  ------------------
  |  Branch (516:18): [True: 750, False: 0]
  ------------------
  517|    750|        return lhs_parts.second < rhs_parts.second;
  518|    750|      }
  519|      0|      return AsString(lhs) < AsString(rhs);
  520|    872|    }
_ZNK6google8protobuf25EncodedDescriptorDatabase15DescriptorIndex13SymbolCompare8GetPartsERKNS2_11SymbolEntryE:
  495|  1.74k|        const SymbolEntry& entry) const {
  496|  1.74k|      auto package = entry.package(index);
  497|  1.74k|      if (package.empty()) return {entry.symbol(index), StringPiece{}};
  ------------------
  |  Branch (497:11): [True: 0, False: 1.74k]
  ------------------
  498|  1.74k|      return {package, entry.symbol(index)};
  499|  1.74k|    }
descriptor_database.cc:_ZN6google8protobufL24CheckForMutualSubsymbolsINSt3__121__tree_const_iteratorINS0_25EncodedDescriptorDatabase15DescriptorIndex11SymbolEntryEPNS2_11__tree_nodeIS6_PvEElEESB_S5_EEbNS0_20stringpiece_internal11StringPieceEPT_T0_RKT1_:
  666|    122|                                     Iter2 end, const Index& index) {
  667|    122|  if (*iter != end) {
  ------------------
  |  Branch (667:7): [True: 120, False: 2]
  ------------------
  668|    120|    if (IsSubSymbol((*iter)->AsString(index), symbol_name)) {
  ------------------
  |  Branch (668:9): [True: 0, False: 120]
  ------------------
  669|      0|      GOOGLE_LOG(ERROR) << "Symbol name \"" << symbol_name
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  670|      0|                 << "\" conflicts with the existing symbol \""
  671|      0|                 << (*iter)->AsString(index) << "\".";
  672|      0|      return false;
  673|      0|    }
  674|       |
  675|       |    // OK, that worked.  Now we have to make sure that no symbol in the map is
  676|       |    // a sub-symbol of the one we are inserting.  The only symbol which could
  677|       |    // be so is the first symbol that is greater than the new symbol.  Since
  678|       |    // |iter| points at the last symbol that is less than or equal, we just have
  679|       |    // to increment it.
  680|    120|    ++*iter;
  681|       |
  682|    120|    if (*iter != end && IsSubSymbol(symbol_name, (*iter)->AsString(index))) {
  ------------------
  |  Branch (682:9): [True: 90, False: 30]
  |  Branch (682:9): [True: 0, False: 120]
  |  Branch (682:25): [True: 0, False: 90]
  ------------------
  683|      0|      GOOGLE_LOG(ERROR) << "Symbol name \"" << symbol_name
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  684|      0|                 << "\" conflicts with the existing symbol \""
  685|      0|                 << (*iter)->AsString(index) << "\".";
  686|      0|      return false;
  687|      0|    }
  688|    120|  }
  689|    122|  return true;
  690|    122|}
descriptor_database.cc:_ZN6google8protobuf12_GLOBAL__N_119FindLastLessOrEqualINSt3__16vectorINS0_25EncodedDescriptorDatabase15DescriptorIndex11SymbolEntryENS3_9allocatorIS7_EEEES7_NS6_13SymbolCompareEEENT_14const_iteratorEPKSC_RKT0_RKT1_:
  179|    122|    const Container* container, const Key& key, const Cmp& cmp) {
  180|    122|  auto iter = std::upper_bound(container->begin(), container->end(), key, cmp);
  181|    122|  if (iter != container->begin()) --iter;
  ------------------
  |  Branch (181:7): [True: 0, False: 122]
  ------------------
  182|    122|  return iter;
  183|    122|}
descriptor_database.cc:_ZN6google8protobufL24CheckForMutualSubsymbolsINSt3__111__wrap_iterIPKNS0_25EncodedDescriptorDatabase15DescriptorIndex11SymbolEntryEEENS3_IPS6_EES5_EEbNS0_20stringpiece_internal11StringPieceEPT_T0_RKT1_:
  666|    122|                                     Iter2 end, const Index& index) {
  667|    122|  if (*iter != end) {
  ------------------
  |  Branch (667:7): [True: 0, False: 122]
  ------------------
  668|      0|    if (IsSubSymbol((*iter)->AsString(index), symbol_name)) {
  ------------------
  |  Branch (668:9): [True: 0, False: 0]
  ------------------
  669|      0|      GOOGLE_LOG(ERROR) << "Symbol name \"" << symbol_name
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  670|      0|                 << "\" conflicts with the existing symbol \""
  671|      0|                 << (*iter)->AsString(index) << "\".";
  672|      0|      return false;
  673|      0|    }
  674|       |
  675|       |    // OK, that worked.  Now we have to make sure that no symbol in the map is
  676|       |    // a sub-symbol of the one we are inserting.  The only symbol which could
  677|       |    // be so is the first symbol that is greater than the new symbol.  Since
  678|       |    // |iter| points at the last symbol that is less than or equal, we just have
  679|       |    // to increment it.
  680|      0|    ++*iter;
  681|       |
  682|      0|    if (*iter != end && IsSubSymbol(symbol_name, (*iter)->AsString(index))) {
  ------------------
  |  Branch (682:9): [True: 0, False: 0]
  |  Branch (682:9): [True: 0, False: 0]
  |  Branch (682:25): [True: 0, False: 0]
  ------------------
  683|      0|      GOOGLE_LOG(ERROR) << "Symbol name \"" << symbol_name
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  684|      0|                 << "\" conflicts with the existing symbol \""
  685|      0|                 << (*iter)->AsString(index) << "\".";
  686|      0|      return false;
  687|      0|    }
  688|      0|  }
  689|    122|  return true;
  690|    122|}
descriptor_database.cc:_ZN6google8protobufL13MergeIntoFlatINS0_25EncodedDescriptorDatabase15DescriptorIndex9FileEntryENS3_11FileCompareEEEvPNSt3__13setIT_T0_NS6_9allocatorIS8_EEEEPNS6_6vectorIS8_SB_EE:
  805|      3|static void MergeIntoFlat(std::set<T, Less>* s, std::vector<T>* flat) {
  806|      3|  if (s->empty()) return;
  ------------------
  |  Branch (806:7): [True: 2, False: 1]
  ------------------
  807|      1|  std::vector<T> new_flat(s->size() + flat->size());
  808|      1|  std::merge(s->begin(), s->end(), flat->begin(), flat->end(), &new_flat[0],
  809|      1|             s->key_comp());
  810|      1|  *flat = std::move(new_flat);
  811|      1|  s->clear();
  812|      1|}
descriptor_database.cc:_ZN6google8protobufL13MergeIntoFlatINS0_25EncodedDescriptorDatabase15DescriptorIndex11SymbolEntryENS3_13SymbolCompareEEEvPNSt3__13setIT_T0_NS6_9allocatorIS8_EEEEPNS6_6vectorIS8_SB_EE:
  805|      3|static void MergeIntoFlat(std::set<T, Less>* s, std::vector<T>* flat) {
  806|      3|  if (s->empty()) return;
  ------------------
  |  Branch (806:7): [True: 2, False: 1]
  ------------------
  807|      1|  std::vector<T> new_flat(s->size() + flat->size());
  808|      1|  std::merge(s->begin(), s->end(), flat->begin(), flat->end(), &new_flat[0],
  809|      1|             s->key_comp());
  810|      1|  *flat = std::move(new_flat);
  811|      1|  s->clear();
  812|      1|}
descriptor_database.cc:_ZN6google8protobufL13MergeIntoFlatINS0_25EncodedDescriptorDatabase15DescriptorIndex14ExtensionEntryENS3_16ExtensionCompareEEEvPNSt3__13setIT_T0_NS6_9allocatorIS8_EEEEPNS6_6vectorIS8_SB_EE:
  805|      3|static void MergeIntoFlat(std::set<T, Less>* s, std::vector<T>* flat) {
  806|      3|  if (s->empty()) return;
  ------------------
  |  Branch (806:7): [True: 3, False: 0]
  ------------------
  807|      0|  std::vector<T> new_flat(s->size() + flat->size());
  808|      0|  std::merge(s->begin(), s->end(), flat->begin(), flat->end(), &new_flat[0],
  809|      0|             s->key_comp());
  810|      0|  *flat = std::move(new_flat);
  811|      0|  s->clear();
  812|      0|}

_ZN6google8protobuf18DescriptorDatabaseC2Ev:
   76|      2|  inline DescriptorDatabase() {}

_ZN6google8protobuf21DynamicMessageFactoryC2Ev:
  644|      3|    : pool_(nullptr), delegate_to_generated_factory_(false) {}
_ZN6google8protobuf21DynamicMessageFactoryD2Ev:
  649|      3|DynamicMessageFactory::~DynamicMessageFactory() {
  650|      3|  for (auto iter = prototypes_.begin(); iter != prototypes_.end(); ++iter) {
  ------------------
  |  Branch (650:41): [True: 0, False: 3]
  ------------------
  651|      0|    delete iter->second;
  652|      0|  }
  653|      3|}

_ZNK6google8protobuf8internal21ExplicitlyConstructedINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEELm8EE3getEv:
   74|     41|  constexpr const T& get() const { return reinterpret_cast<const T&>(union_); }
_ZN6google8protobuf8internal21ExplicitlyConstructedINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEELm8EE16DefaultConstructEv:
   65|      2|  void DefaultConstruct() { new (&union_) T(); }
_ZN6google8protobuf8internal21ExplicitlyConstructedINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEELm8EE11get_mutableEv:
   75|      2|  T* get_mutable() { return reinterpret_cast<T*>(&union_); }

_ZN6google8protobuf8internal12ExtensionSetC2EPNS0_5ArenaE:
  188|     24|    : arena_(arena),
  189|     24|      flat_capacity_(0),
  190|     24|      flat_size_(0),
  191|     24|      map_{flat_capacity_ == 0
  ------------------
  |  Branch (191:12): [True: 24, False: 0]
  ------------------
  192|     24|               ? nullptr
  193|     24|               : Arena::CreateArray<KeyValue>(arena_, flat_capacity_)} {}
_ZN6google8protobuf8internal12ExtensionSetD2Ev:
  195|     18|ExtensionSet::~ExtensionSet() {
  196|       |  // Deletes all allocated extensions.
  197|     18|  if (arena_ == nullptr) {
  ------------------
  |  Branch (197:7): [True: 18, False: 0]
  ------------------
  198|     18|    ForEach([](int /* number */, Extension& ext) { ext.Free(); });
  199|     18|    if (PROTOBUF_PREDICT_FALSE(is_large())) {
  ------------------
  |  |  490|     18|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 18]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 18]
  |  |  ------------------
  ------------------
  200|      0|      delete map_.large;
  201|     18|    } else {
  202|     18|      DeleteFlatMap(map_.flat, flat_capacity_);
  203|     18|    }
  204|     18|  }
  205|     18|}
_ZN6google8protobuf8internal12ExtensionSet13DeleteFlatMapEPKNS2_8KeyValueEt:
  208|     18|                                 uint16_t flat_capacity) {
  209|       |  // Arena::CreateArray already requires a trivially destructible type, but
  210|       |  // ensure this constraint is not violated in the future.
  211|     18|  static_assert(std::is_trivially_destructible<KeyValue>::value,
  212|     18|                "CreateArray requires a trivially destructible type");
  213|       |  // A const-cast is needed, but this is safe as we are about to deallocate the
  214|       |  // array.
  215|     18|  internal::SizedArrayDelete(const_cast<KeyValue*>(flat),
  216|     18|                             sizeof(*flat) * flat_capacity);
  217|     18|}
_ZN6google8protobuf8internal12ExtensionSet5ClearEv:
  927|      6|void ExtensionSet::Clear() {
  928|      6|  ForEach([](int /* number */, Extension& ext) { ext.Clear(); });
  929|      6|}
_ZNK6google8protobuf8internal12ExtensionSet13IsInitializedEv:
 1215|     36|bool ExtensionSet::IsInitialized() const {
 1216|       |  // Extensions are never required.  However, we need to check that all
 1217|       |  // embedded messages are initialized.
 1218|     36|  if (PROTOBUF_PREDICT_FALSE(is_large())) {
  ------------------
  |  |  490|     36|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 36]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 1219|      0|    for (const auto& kv : *map_.large) {
  ------------------
  |  Branch (1219:25): [True: 0, False: 0]
  ------------------
 1220|      0|      if (!kv.second.IsInitialized()) return false;
  ------------------
  |  Branch (1220:11): [True: 0, False: 0]
  ------------------
 1221|      0|    }
 1222|      0|    return true;
 1223|      0|  }
 1224|     36|  for (const KeyValue* it = flat_begin(); it != flat_end(); ++it) {
  ------------------
  |  Branch (1224:43): [True: 0, False: 36]
  ------------------
 1225|      0|    if (!it->second.IsInitialized()) return false;
  ------------------
  |  Branch (1225:9): [True: 0, False: 0]
  ------------------
 1226|      0|  }
 1227|     36|  return true;
 1228|     36|}
_ZNK6google8protobuf8internal12ExtensionSet8ByteSizeEv:
 1288|      6|size_t ExtensionSet::ByteSize() const {
 1289|      6|  size_t total_size = 0;
 1290|      6|  ForEach([&total_size](int number, const Extension& ext) {
 1291|      6|    total_size += ext.ByteSize(number);
 1292|      6|  });
 1293|      6|  return total_size;
 1294|      6|}

_ZN6google8protobuf8internal12ExtensionSetC2ENS1_16ArenaInitializedEPNS0_5ArenaE:
  187|     24|  ExtensionSet(ArenaInitialized, Arena* arena) : ExtensionSet(arena) {}
_ZNK6google8protobuf8internal12ExtensionSet18_InternalSerializeEPKNS0_11MessageLiteEiiPhPNS0_2io19EpsCopyOutputStreamE:
  450|      6|                              io::EpsCopyOutputStream* stream) const {
  451|      6|    if (flat_size_ == 0) {
  ------------------
  |  Branch (451:9): [True: 6, False: 0]
  ------------------
  452|      6|      assert(!is_large());
  453|      6|      return target;
  454|      6|    }
  455|      0|    return _InternalSerializeImpl(extendee, start_field_number,
  456|      0|                                  end_field_number, target, stream);
  457|      6|  }
_ZNK6google8protobuf8internal12ExtensionSet8is_largeEv:
  701|    222|  bool is_large() const { return static_cast<int16_t>(flat_size_) < 0; }
_ZN6google8protobuf8internal12ExtensionSet10flat_beginEv:
  878|     24|  KeyValue* flat_begin() {
  879|     24|    assert(!is_large());
  880|     24|    return map_.flat;
  881|     24|  }
_ZNK6google8protobuf8internal12ExtensionSet10flat_beginEv:
  882|     42|  const KeyValue* flat_begin() const {
  883|     42|    assert(!is_large());
  884|     42|    return map_.flat;
  885|     42|  }
_ZN6google8protobuf8internal12ExtensionSet8flat_endEv:
  886|     24|  KeyValue* flat_end() {
  887|     24|    assert(!is_large());
  888|     24|    return map_.flat + flat_size_;
  889|     24|  }
_ZNK6google8protobuf8internal12ExtensionSet8flat_endEv:
  890|     42|  const KeyValue* flat_end() const {
  891|     42|    assert(!is_large());
  892|     42|    return map_.flat + flat_size_;
  893|     42|  }
extension_set.cc:_ZN6google8protobuf8internal12ExtensionSet7ForEachIZNS2_D1EvE3$_0EET_S5_:
  722|     18|  KeyValueFunctor ForEach(KeyValueFunctor func) {
  723|     18|    if (PROTOBUF_PREDICT_FALSE(is_large())) {
  ------------------
  |  |  490|     18|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 18]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 18]
  |  |  ------------------
  ------------------
  724|      0|      return ForEach(map_.large->begin(), map_.large->end(), std::move(func));
  725|      0|    }
  726|     18|    return ForEach(flat_begin(), flat_end(), std::move(func));
  727|     18|  }
extension_set.cc:_ZN6google8protobuf8internal12ExtensionSet7ForEachIPNS2_8KeyValueEZNS2_D1EvE3$_0EET0_T_S8_S7_:
  715|     18|                                 KeyValueFunctor func) {
  716|     18|    for (Iterator it = begin; it != end; ++it) func(it->first, it->second);
  ------------------
  |  Branch (716:31): [True: 0, False: 18]
  ------------------
  717|     18|    return std::move(func);
  718|     18|  }
extension_set.cc:_ZN6google8protobuf8internal12ExtensionSet7ForEachIZNS2_5ClearEvE3$_0EET_S5_:
  722|      6|  KeyValueFunctor ForEach(KeyValueFunctor func) {
  723|      6|    if (PROTOBUF_PREDICT_FALSE(is_large())) {
  ------------------
  |  |  490|      6|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 6]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 6]
  |  |  ------------------
  ------------------
  724|      0|      return ForEach(map_.large->begin(), map_.large->end(), std::move(func));
  725|      0|    }
  726|      6|    return ForEach(flat_begin(), flat_end(), std::move(func));
  727|      6|  }
extension_set.cc:_ZN6google8protobuf8internal12ExtensionSet7ForEachIPNS2_8KeyValueEZNS2_5ClearEvE3$_0EET0_T_S8_S7_:
  715|      6|                                 KeyValueFunctor func) {
  716|      6|    for (Iterator it = begin; it != end; ++it) func(it->first, it->second);
  ------------------
  |  Branch (716:31): [True: 0, False: 6]
  ------------------
  717|      6|    return std::move(func);
  718|      6|  }
extension_set.cc:_ZNK6google8protobuf8internal12ExtensionSet7ForEachIZNKS2_8ByteSizeEvE3$_0EET_S5_:
  731|      6|  KeyValueFunctor ForEach(KeyValueFunctor func) const {
  732|      6|    if (PROTOBUF_PREDICT_FALSE(is_large())) {
  ------------------
  |  |  490|      6|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 6]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 6]
  |  |  ------------------
  ------------------
  733|      0|      return ForEach(map_.large->begin(), map_.large->end(), std::move(func));
  734|      0|    }
  735|      6|    return ForEach(flat_begin(), flat_end(), std::move(func));
  736|      6|  }
extension_set.cc:_ZN6google8protobuf8internal12ExtensionSet7ForEachIPKNS2_8KeyValueEZNKS2_8ByteSizeEvE3$_0EET0_T_S9_S8_:
  715|      6|                                 KeyValueFunctor func) {
  716|      6|    for (Iterator it = begin; it != end; ++it) func(it->first, it->second);
  ------------------
  |  Branch (716:31): [True: 0, False: 6]
  ------------------
  717|      6|    return std::move(func);
  718|      6|  }

_ZN6google8protobuf8internal14ZeroFieldsBaseD2Ev:
   54|  6.97k|ZeroFieldsBase::~ZeroFieldsBase() {
   55|  6.97k|  (void)_internal_metadata_.DeleteReturnArena<UnknownFieldSet>();
   56|  6.97k|}

_ZN6google8protobuf10ReflectionC2EPKNS0_10DescriptorERKNS0_8internal16ReflectionSchemaEPKNS0_14DescriptorPoolEPNS0_14MessageFactoryE:
  233|     67|    : descriptor_(descriptor),
  234|     67|      schema_(schema),
  235|       |      descriptor_pool_(
  236|     67|          (pool == nullptr) ? DescriptorPool::internal_generated_pool() : pool),
  ------------------
  |  Branch (236:11): [True: 0, False: 67]
  ------------------
  237|     67|      message_factory_(factory),
  238|     67|      last_non_weak_field_index_(-1) {
  239|     67|  last_non_weak_field_index_ = descriptor_->field_count() - 1;
  240|     67|}
_ZNK6google8protobuf10Reflection8HasFieldERKNS0_7MessageEPKNS0_15FieldDescriptorE:
 1089|  2.58M|                          const FieldDescriptor* field) const {
 1090|  2.58M|  USAGE_CHECK_MESSAGE_TYPE(HasField);
  ------------------
  |  |  212|  2.58M|  USAGE_CHECK_EQ(field->containing_type(), descriptor_, METHOD, \
  |  |  ------------------
  |  |  |  |  198|  2.58M|  USAGE_CHECK((A) == (B), METHOD, ERROR_DESCRIPTION)
  |  |  |  |  ------------------
  |  |  |  |  |  |  195|  2.58M|  if (!(CONDITION))                                       \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (195:7): [True: 0, False: 2.58M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  196|  2.58M|  ReportReflectionUsageError(descriptor_, field, #METHOD, ERROR_DESCRIPTION)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  213|  2.58M|                 "Field does not match message type.");
  ------------------
 1091|  2.58M|  USAGE_CHECK_SINGULAR(HasField);
  ------------------
  |  |  215|  2.58M|  USAGE_CHECK_NE(field->label(), FieldDescriptor::LABEL_REPEATED, METHOD, \
  |  |  ------------------
  |  |  |  |  200|  2.58M|  USAGE_CHECK((A) != (B), METHOD, ERROR_DESCRIPTION)
  |  |  |  |  ------------------
  |  |  |  |  |  |  195|  2.58M|  if (!(CONDITION))                                       \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (195:7): [True: 0, False: 2.58M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  196|  2.58M|  ReportReflectionUsageError(descriptor_, field, #METHOD, ERROR_DESCRIPTION)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  216|  2.58M|                 "Field is repeated; the method requires a singular field.")
  ------------------
 1092|  2.58M|  CheckInvalidAccess(schema_, field);
 1093|       |
 1094|  2.58M|  if (field->is_extension()) {
  ------------------
  |  Branch (1094:7): [True: 0, False: 2.58M]
  ------------------
 1095|      0|    return GetExtensionSet(message).Has(field->number());
 1096|  2.58M|  } else {
 1097|  2.58M|    if (schema_.InRealOneof(field)) {
  ------------------
  |  Branch (1097:9): [True: 1.66M, False: 919k]
  ------------------
 1098|  1.66M|      return HasOneofField(message, field);
 1099|  1.66M|    } else {
 1100|   919k|      return HasBit(message, field);
 1101|   919k|    }
 1102|  2.58M|  }
 1103|  2.58M|}
_ZNK6google8protobuf10Reflection9FieldSizeERKNS0_7MessageEPKNS0_15FieldDescriptorE:
 1178|   271k|                          const FieldDescriptor* field) const {
 1179|   271k|  USAGE_CHECK_MESSAGE_TYPE(FieldSize);
  ------------------
  |  |  212|   271k|  USAGE_CHECK_EQ(field->containing_type(), descriptor_, METHOD, \
  |  |  ------------------
  |  |  |  |  198|   271k|  USAGE_CHECK((A) == (B), METHOD, ERROR_DESCRIPTION)
  |  |  |  |  ------------------
  |  |  |  |  |  |  195|   271k|  if (!(CONDITION))                                       \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (195:7): [True: 0, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  196|   271k|  ReportReflectionUsageError(descriptor_, field, #METHOD, ERROR_DESCRIPTION)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  213|   271k|                 "Field does not match message type.");
  ------------------
 1180|   271k|  USAGE_CHECK_REPEATED(FieldSize);
  ------------------
  |  |  218|   271k|  USAGE_CHECK_EQ(field->label(), FieldDescriptor::LABEL_REPEATED, METHOD, \
  |  |  ------------------
  |  |  |  |  198|   271k|  USAGE_CHECK((A) == (B), METHOD, ERROR_DESCRIPTION)
  |  |  |  |  ------------------
  |  |  |  |  |  |  195|   271k|  if (!(CONDITION))                                       \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (195:7): [True: 0, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  196|   271k|  ReportReflectionUsageError(descriptor_, field, #METHOD, ERROR_DESCRIPTION)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  219|   271k|                 "Field is singular; the method requires a repeated field.")
  ------------------
 1181|   271k|  CheckInvalidAccess(schema_, field);
 1182|       |
 1183|   271k|  if (field->is_extension()) {
  ------------------
  |  Branch (1183:7): [True: 0, False: 271k]
  ------------------
 1184|      0|    return GetExtensionSet(message).ExtensionSize(field->number());
 1185|   271k|  } else {
 1186|   271k|    switch (field->cpp_type()) {
  ------------------
  |  Branch (1186:13): [True: 0, False: 271k]
  ------------------
 1187|      0|#define HANDLE_TYPE(UPPERCASE, LOWERCASE)    \
 1188|      0|  case FieldDescriptor::CPPTYPE_##UPPERCASE: \
 1189|      0|    return GetRaw<RepeatedField<LOWERCASE> >(message, field).size()
 1190|       |
 1191|      0|      HANDLE_TYPE(INT32, int32_t);
  ------------------
  |  | 1188|      0|  case FieldDescriptor::CPPTYPE_##UPPERCASE: \
  |  |  ------------------
  |  |  |  Branch (1188:3): [True: 0, False: 271k]
  |  |  ------------------
  |  | 1189|      0|    return GetRaw<RepeatedField<LOWERCASE> >(message, field).size()
  ------------------
 1192|      0|      HANDLE_TYPE(INT64, int64_t);
  ------------------
  |  | 1188|      0|  case FieldDescriptor::CPPTYPE_##UPPERCASE: \
  |  |  ------------------
  |  |  |  Branch (1188:3): [True: 0, False: 271k]
  |  |  ------------------
  |  | 1189|      0|    return GetRaw<RepeatedField<LOWERCASE> >(message, field).size()
  ------------------
 1193|      0|      HANDLE_TYPE(UINT32, uint32_t);
  ------------------
  |  | 1188|      0|  case FieldDescriptor::CPPTYPE_##UPPERCASE: \
  |  |  ------------------
  |  |  |  Branch (1188:3): [True: 0, False: 271k]
  |  |  ------------------
  |  | 1189|      0|    return GetRaw<RepeatedField<LOWERCASE> >(message, field).size()
  ------------------
 1194|      0|      HANDLE_TYPE(UINT64, uint64_t);
  ------------------
  |  | 1188|      0|  case FieldDescriptor::CPPTYPE_##UPPERCASE: \
  |  |  ------------------
  |  |  |  Branch (1188:3): [True: 0, False: 271k]
  |  |  ------------------
  |  | 1189|      0|    return GetRaw<RepeatedField<LOWERCASE> >(message, field).size()
  ------------------
 1195|      0|      HANDLE_TYPE(DOUBLE, double);
  ------------------
  |  | 1188|      0|  case FieldDescriptor::CPPTYPE_##UPPERCASE: \
  |  |  ------------------
  |  |  |  Branch (1188:3): [True: 0, False: 271k]
  |  |  ------------------
  |  | 1189|      0|    return GetRaw<RepeatedField<LOWERCASE> >(message, field).size()
  ------------------
 1196|      0|      HANDLE_TYPE(FLOAT, float);
  ------------------
  |  | 1188|      0|  case FieldDescriptor::CPPTYPE_##UPPERCASE: \
  |  |  ------------------
  |  |  |  Branch (1188:3): [True: 0, False: 271k]
  |  |  ------------------
  |  | 1189|      0|    return GetRaw<RepeatedField<LOWERCASE> >(message, field).size()
  ------------------
 1197|      0|      HANDLE_TYPE(BOOL, bool);
  ------------------
  |  | 1188|      0|  case FieldDescriptor::CPPTYPE_##UPPERCASE: \
  |  |  ------------------
  |  |  |  Branch (1188:3): [True: 0, False: 271k]
  |  |  ------------------
  |  | 1189|      0|    return GetRaw<RepeatedField<LOWERCASE> >(message, field).size()
  ------------------
 1198|      0|      HANDLE_TYPE(ENUM, int);
  ------------------
  |  | 1188|      0|  case FieldDescriptor::CPPTYPE_##UPPERCASE: \
  |  |  ------------------
  |  |  |  Branch (1188:3): [True: 0, False: 271k]
  |  |  ------------------
  |  | 1189|      0|    return GetRaw<RepeatedField<LOWERCASE> >(message, field).size()
  ------------------
 1199|      0|#undef HANDLE_TYPE
 1200|       |
 1201|      0|      case FieldDescriptor::CPPTYPE_STRING:
  ------------------
  |  Branch (1201:7): [True: 0, False: 271k]
  ------------------
 1202|   271k|      case FieldDescriptor::CPPTYPE_MESSAGE:
  ------------------
  |  Branch (1202:7): [True: 271k, False: 0]
  ------------------
 1203|   271k|        if (IsMapFieldInApi(field)) {
  ------------------
  |  Branch (1203:13): [True: 0, False: 271k]
  ------------------
 1204|      0|          const internal::MapFieldBase& map =
 1205|      0|              GetRaw<MapFieldBase>(message, field);
 1206|      0|          if (map.IsRepeatedFieldValid()) {
  ------------------
  |  Branch (1206:15): [True: 0, False: 0]
  ------------------
 1207|      0|            return map.GetRepeatedField().size();
 1208|      0|          } else {
 1209|       |            // No need to materialize the repeated field if it is out of sync:
 1210|       |            // its size will be the same as the map's size.
 1211|      0|            return map.size();
 1212|      0|          }
 1213|   271k|        } else {
 1214|   271k|          return GetRaw<RepeatedPtrFieldBase>(message, field).size();
 1215|   271k|        }
 1216|   271k|    }
 1217|       |
 1218|      0|    GOOGLE_LOG(FATAL) << "Can't get here.";
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
 1219|      0|    return 0;
 1220|   271k|  }
 1221|   271k|}
_ZNK6google8protobuf10Reflection8SetInt32EPNS0_7MessageEPKNS0_15FieldDescriptorEi:
 1583|  38.2k|      Message* message, const FieldDescriptor* field, PASSTYPE value) const {  \
 1584|  38.2k|    USAGE_CHECK_ALL(Set##TYPENAME, SINGULAR, CPPTYPE);                         \
  ------------------
  |  |  222|  38.2k|  USAGE_CHECK_MESSAGE_TYPE(METHOD);             \
  |  |  ------------------
  |  |  |  |  212|  38.2k|  USAGE_CHECK_EQ(field->containing_type(), descriptor_, METHOD, \
  |  |  |  |  ------------------
  |  |  |  |  |  |  198|  38.2k|  USAGE_CHECK((A) == (B), METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  195|  38.2k|  if (!(CONDITION))                                       \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (195:7): [True: 0, False: 38.2k]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  196|  38.2k|  ReportReflectionUsageError(descriptor_, field, #METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  213|  38.2k|                 "Field does not match message type.");
  |  |  ------------------
  |  |  223|  38.2k|  USAGE_CHECK_##LABEL(METHOD);                  \
  |  |  224|  38.2k|  USAGE_CHECK_TYPE(METHOD, CPPTYPE)
  |  |  ------------------
  |  |  |  |  203|  38.2k|  if (field->cpp_type() != FieldDescriptor::CPPTYPE_##CPPTYPE) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (203:7): [True: 0, False: 38.2k]
  |  |  |  |  ------------------
  |  |  |  |  204|  38.2k|  ReportReflectionUsageTypeError(descriptor_, field, #METHOD,  \
  |  |  |  |  205|      0|                                 FieldDescriptor::CPPTYPE_##CPPTYPE)
  |  |  ------------------
  ------------------
 1585|  38.2k|    if (field->is_extension()) {                                               \
  ------------------
  |  Branch (1585:9): [True: 0, False: 38.2k]
  ------------------
 1586|      0|      return MutableExtensionSet(message)->Set##TYPENAME(                      \
 1587|      0|          field->number(), field->type(), value, field);                       \
 1588|  38.2k|    } else {                                                                   \
 1589|  38.2k|      SetField<TYPE>(message, field, value);                                   \
 1590|  38.2k|    }                                                                          \
 1591|  38.2k|  }                                                                            \
_ZNK6google8protobuf10Reflection9SetUInt32EPNS0_7MessageEPKNS0_15FieldDescriptorEj:
 1583|  59.8k|      Message* message, const FieldDescriptor* field, PASSTYPE value) const {  \
 1584|  59.8k|    USAGE_CHECK_ALL(Set##TYPENAME, SINGULAR, CPPTYPE);                         \
  ------------------
  |  |  222|  59.8k|  USAGE_CHECK_MESSAGE_TYPE(METHOD);             \
  |  |  ------------------
  |  |  |  |  212|  59.8k|  USAGE_CHECK_EQ(field->containing_type(), descriptor_, METHOD, \
  |  |  |  |  ------------------
  |  |  |  |  |  |  198|  59.8k|  USAGE_CHECK((A) == (B), METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  195|  59.8k|  if (!(CONDITION))                                       \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (195:7): [True: 0, False: 59.8k]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  196|  59.8k|  ReportReflectionUsageError(descriptor_, field, #METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  213|  59.8k|                 "Field does not match message type.");
  |  |  ------------------
  |  |  223|  59.8k|  USAGE_CHECK_##LABEL(METHOD);                  \
  |  |  224|  59.8k|  USAGE_CHECK_TYPE(METHOD, CPPTYPE)
  |  |  ------------------
  |  |  |  |  203|  59.8k|  if (field->cpp_type() != FieldDescriptor::CPPTYPE_##CPPTYPE) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (203:7): [True: 0, False: 59.8k]
  |  |  |  |  ------------------
  |  |  |  |  204|  59.8k|  ReportReflectionUsageTypeError(descriptor_, field, #METHOD,  \
  |  |  |  |  205|      0|                                 FieldDescriptor::CPPTYPE_##CPPTYPE)
  |  |  ------------------
  ------------------
 1585|  59.8k|    if (field->is_extension()) {                                               \
  ------------------
  |  Branch (1585:9): [True: 0, False: 59.8k]
  ------------------
 1586|      0|      return MutableExtensionSet(message)->Set##TYPENAME(                      \
 1587|      0|          field->number(), field->type(), value, field);                       \
 1588|  59.8k|    } else {                                                                   \
 1589|  59.8k|      SetField<TYPE>(message, field, value);                                   \
 1590|  59.8k|    }                                                                          \
 1591|  59.8k|  }                                                                            \
_ZNK6google8protobuf10Reflection9SetStringEPNS0_7MessageEPKNS0_15FieldDescriptorENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE:
 1689|  42.1k|                           std::string value) const {
 1690|  42.1k|  USAGE_CHECK_ALL(SetString, SINGULAR, STRING);
  ------------------
  |  |  222|  42.1k|  USAGE_CHECK_MESSAGE_TYPE(METHOD);             \
  |  |  ------------------
  |  |  |  |  212|  42.1k|  USAGE_CHECK_EQ(field->containing_type(), descriptor_, METHOD, \
  |  |  |  |  ------------------
  |  |  |  |  |  |  198|  42.1k|  USAGE_CHECK((A) == (B), METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  195|  42.1k|  if (!(CONDITION))                                       \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (195:7): [True: 0, False: 42.1k]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  196|  42.1k|  ReportReflectionUsageError(descriptor_, field, #METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  213|  42.1k|                 "Field does not match message type.");
  |  |  ------------------
  |  |  223|  42.1k|  USAGE_CHECK_##LABEL(METHOD);                  \
  |  |  224|  42.1k|  USAGE_CHECK_TYPE(METHOD, CPPTYPE)
  |  |  ------------------
  |  |  |  |  203|  42.1k|  if (field->cpp_type() != FieldDescriptor::CPPTYPE_##CPPTYPE) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (203:7): [True: 0, False: 42.1k]
  |  |  |  |  ------------------
  |  |  |  |  204|  42.1k|  ReportReflectionUsageTypeError(descriptor_, field, #METHOD,  \
  |  |  |  |  205|      0|                                 FieldDescriptor::CPPTYPE_##CPPTYPE)
  |  |  ------------------
  ------------------
 1691|  42.1k|  if (field->is_extension()) {
  ------------------
  |  Branch (1691:7): [True: 0, False: 42.1k]
  ------------------
 1692|      0|    return MutableExtensionSet(message)->SetString(
 1693|      0|        field->number(), field->type(), std::move(value), field);
 1694|  42.1k|  } else {
 1695|  42.1k|    switch (field->options().ctype()) {
 1696|      0|      default:  // TODO(kenton):  Support other string reps.
  ------------------
  |  Branch (1696:7): [True: 0, False: 42.1k]
  ------------------
 1697|  42.1k|      case FieldOptions::STRING: {
  ------------------
  |  Branch (1697:7): [True: 42.1k, False: 0]
  ------------------
 1698|  42.1k|        if (IsInlined(field)) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 42.1k]
  ------------------
 1699|      0|          const uint32_t index = schema_.InlinedStringIndex(field);
 1700|      0|          GOOGLE_DCHECK_GT(index, 0);
  ------------------
  |  |  198|      0|#define GOOGLE_DCHECK_GT GOOGLE_CHECK_GT
  |  |  ------------------
  |  |  |  |  158|      0|#define GOOGLE_CHECK_GT(A, B) GOOGLE_CHECK((A) >  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|      0|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|      0|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1701|      0|          uint32_t* states =
 1702|      0|              &MutableInlinedStringDonatedArray(message)[index / 32];
 1703|      0|          uint32_t mask = ~(static_cast<uint32_t>(1) << (index % 32));
 1704|      0|          MutableField<InlinedStringField>(message, field)
 1705|      0|              ->Set(value, message->GetArenaForAllocation(),
 1706|      0|                    IsInlinedStringDonated(*message, field), states, mask,
 1707|      0|                    message);
 1708|      0|          break;
 1709|      0|        }
 1710|       |
 1711|       |        // Oneof string fields are never set as a default instance.
 1712|       |        // We just need to pass some arbitrary default string to make it work.
 1713|       |        // This allows us to not have the real default accessible from
 1714|       |        // reflection.
 1715|  42.1k|        if (schema_.InRealOneof(field) && !HasOneofField(*message, field)) {
  ------------------
  |  Branch (1715:13): [True: 0, False: 42.1k]
  |  Branch (1715:43): [True: 0, False: 0]
  ------------------
 1716|      0|          ClearOneof(message, field->containing_oneof());
 1717|      0|          MutableField<ArenaStringPtr>(message, field)->InitDefault();
 1718|      0|        }
 1719|  42.1k|        MutableField<ArenaStringPtr>(message, field)
 1720|  42.1k|            ->Set(std::move(value), message->GetArenaForAllocation());
 1721|  42.1k|        break;
 1722|  42.1k|      }
 1723|  42.1k|    }
 1724|  42.1k|  }
 1725|  42.1k|}
_ZNK6google8protobuf10Reflection25GetDefaultMessageInstanceEPKNS0_15FieldDescriptorE:
 1950|   276k|    const FieldDescriptor* field) const {
 1951|       |  // If we are using the generated factory, we cache the prototype in the field
 1952|       |  // descriptor for faster access.
 1953|       |  // The default instances of generated messages are not cross-linked, which
 1954|       |  // means they contain null pointers on their message fields and can't be used
 1955|       |  // to get the default of submessages.
 1956|   276k|  if (message_factory_ == MessageFactory::generated_factory()) {
  ------------------
  |  Branch (1956:7): [True: 276k, False: 0]
  ------------------
 1957|   276k|    auto& ptr = field->default_generated_instance_;
 1958|   276k|    auto* res = ptr.load(std::memory_order_acquire);
 1959|   276k|    if (res == nullptr) {
  ------------------
  |  Branch (1959:9): [True: 46, False: 276k]
  ------------------
 1960|       |      // First time asking for this field's default. Load it and cache it.
 1961|     46|      res = message_factory_->GetPrototype(field->message_type());
 1962|     46|      ptr.store(res, std::memory_order_release);
 1963|     46|    }
 1964|   276k|    return res;
 1965|   276k|  }
 1966|       |
 1967|       |  // For other factories, we try the default's object field.
 1968|       |  // In particular, the DynamicMessageFactory will cross link the default
 1969|       |  // instances to allow for this. But only do this for real fields.
 1970|       |  // This is an optimization to avoid going to GetPrototype() below, as that
 1971|       |  // requires a lock and a map lookup.
 1972|      0|  if (!field->is_extension() && !field->options().weak() &&
  ------------------
  |  Branch (1972:7): [True: 0, False: 0]
  |  Branch (1972:33): [True: 0, False: 0]
  ------------------
 1973|      0|      !IsLazyField(field) && !schema_.InRealOneof(field)) {
  ------------------
  |  Branch (1973:7): [True: 0, False: 0]
  |  Branch (1973:30): [True: 0, False: 0]
  ------------------
 1974|      0|    auto* res = DefaultRaw<const Message*>(field);
 1975|      0|    if (res != nullptr) {
  ------------------
  |  Branch (1975:9): [True: 0, False: 0]
  ------------------
 1976|      0|      return res;
 1977|      0|    }
 1978|      0|  }
 1979|       |  // Otherwise, just go to the factory.
 1980|      0|  return message_factory_->GetPrototype(field->message_type());
 1981|      0|}
_ZNK6google8protobuf10Reflection10GetMessageERKNS0_7MessageEPKNS0_15FieldDescriptorEPNS0_14MessageFactoryE:
 1985|   276k|                                      MessageFactory* factory) const {
 1986|   276k|  USAGE_CHECK_ALL(GetMessage, SINGULAR, MESSAGE);
  ------------------
  |  |  222|   276k|  USAGE_CHECK_MESSAGE_TYPE(METHOD);             \
  |  |  ------------------
  |  |  |  |  212|   276k|  USAGE_CHECK_EQ(field->containing_type(), descriptor_, METHOD, \
  |  |  |  |  ------------------
  |  |  |  |  |  |  198|   276k|  USAGE_CHECK((A) == (B), METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  195|   276k|  if (!(CONDITION))                                       \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (195:7): [True: 0, False: 276k]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  196|   276k|  ReportReflectionUsageError(descriptor_, field, #METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  213|   276k|                 "Field does not match message type.");
  |  |  ------------------
  |  |  223|   276k|  USAGE_CHECK_##LABEL(METHOD);                  \
  |  |  224|   276k|  USAGE_CHECK_TYPE(METHOD, CPPTYPE)
  |  |  ------------------
  |  |  |  |  203|   276k|  if (field->cpp_type() != FieldDescriptor::CPPTYPE_##CPPTYPE) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (203:7): [True: 0, False: 276k]
  |  |  |  |  ------------------
  |  |  |  |  204|   276k|  ReportReflectionUsageTypeError(descriptor_, field, #METHOD,  \
  |  |  |  |  205|      0|                                 FieldDescriptor::CPPTYPE_##CPPTYPE)
  |  |  ------------------
  ------------------
 1987|   276k|  CheckInvalidAccess(schema_, field);
 1988|       |
 1989|   276k|  if (factory == nullptr) factory = message_factory_;
  ------------------
  |  Branch (1989:7): [True: 276k, False: 0]
  ------------------
 1990|       |
 1991|   276k|  if (field->is_extension()) {
  ------------------
  |  Branch (1991:7): [True: 0, False: 276k]
  ------------------
 1992|      0|    return static_cast<const Message&>(GetExtensionSet(message).GetMessage(
 1993|      0|        field->number(), field->message_type(), factory));
 1994|   276k|  } else {
 1995|   276k|    if (schema_.InRealOneof(field) && !HasOneofField(message, field)) {
  ------------------
  |  Branch (1995:9): [True: 145k, False: 131k]
  |  Branch (1995:39): [True: 0, False: 145k]
  ------------------
 1996|      0|      return *GetDefaultMessageInstance(field);
 1997|      0|    }
 1998|   276k|    const Message* result = GetRaw<const Message*>(message, field);
 1999|   276k|    if (result == nullptr) {
  ------------------
  |  Branch (1999:9): [True: 0, False: 276k]
  ------------------
 2000|      0|      result = GetDefaultMessageInstance(field);
 2001|      0|    }
 2002|   276k|    return *result;
 2003|   276k|  }
 2004|   276k|}
_ZNK6google8protobuf10Reflection14MutableMessageEPNS0_7MessageEPKNS0_15FieldDescriptorEPNS0_14MessageFactoryE:
 2008|   553k|                                    MessageFactory* factory) const {
 2009|   553k|  USAGE_CHECK_ALL(MutableMessage, SINGULAR, MESSAGE);
  ------------------
  |  |  222|   553k|  USAGE_CHECK_MESSAGE_TYPE(METHOD);             \
  |  |  ------------------
  |  |  |  |  212|   553k|  USAGE_CHECK_EQ(field->containing_type(), descriptor_, METHOD, \
  |  |  |  |  ------------------
  |  |  |  |  |  |  198|   553k|  USAGE_CHECK((A) == (B), METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  195|   553k|  if (!(CONDITION))                                       \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (195:7): [True: 0, False: 553k]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  196|   553k|  ReportReflectionUsageError(descriptor_, field, #METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  213|   553k|                 "Field does not match message type.");
  |  |  ------------------
  |  |  223|   553k|  USAGE_CHECK_##LABEL(METHOD);                  \
  |  |  224|   553k|  USAGE_CHECK_TYPE(METHOD, CPPTYPE)
  |  |  ------------------
  |  |  |  |  203|   553k|  if (field->cpp_type() != FieldDescriptor::CPPTYPE_##CPPTYPE) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (203:7): [True: 0, False: 553k]
  |  |  |  |  ------------------
  |  |  |  |  204|   553k|  ReportReflectionUsageTypeError(descriptor_, field, #METHOD,  \
  |  |  |  |  205|      0|                                 FieldDescriptor::CPPTYPE_##CPPTYPE)
  |  |  ------------------
  ------------------
 2010|   553k|  CheckInvalidAccess(schema_, field);
 2011|       |
 2012|   553k|  if (factory == nullptr) factory = message_factory_;
  ------------------
  |  Branch (2012:7): [True: 553k, False: 0]
  ------------------
 2013|       |
 2014|   553k|  if (field->is_extension()) {
  ------------------
  |  Branch (2014:7): [True: 0, False: 553k]
  ------------------
 2015|      0|    return static_cast<Message*>(
 2016|      0|        MutableExtensionSet(message)->MutableMessage(field, factory));
 2017|   553k|  } else {
 2018|   553k|    Message* result;
 2019|       |
 2020|   553k|    Message** result_holder = MutableRaw<Message*>(message, field);
 2021|       |
 2022|   553k|    if (schema_.InRealOneof(field)) {
  ------------------
  |  Branch (2022:9): [True: 291k, False: 262k]
  ------------------
 2023|   291k|      if (!HasOneofField(*message, field)) {
  ------------------
  |  Branch (2023:11): [True: 145k, False: 145k]
  ------------------
 2024|   145k|        ClearOneof(message, field->containing_oneof());
 2025|   145k|        result_holder = MutableField<Message*>(message, field);
 2026|   145k|        const Message* default_message = GetDefaultMessageInstance(field);
 2027|   145k|        *result_holder = default_message->New(message->GetArenaForAllocation());
 2028|   145k|      }
 2029|   291k|    } else {
 2030|   262k|      SetBit(message, field);
 2031|   262k|    }
 2032|       |
 2033|   553k|    if (*result_holder == nullptr) {
  ------------------
  |  Branch (2033:9): [True: 131k, False: 422k]
  ------------------
 2034|   131k|      const Message* default_message = GetDefaultMessageInstance(field);
 2035|   131k|      *result_holder = default_message->New(message->GetArenaForAllocation());
 2036|   131k|    }
 2037|   553k|    result = *result_holder;
 2038|   553k|    return result;
 2039|   553k|  }
 2040|   553k|}
_ZNK6google8protobuf10Reflection18GetRepeatedMessageERKNS0_7MessageEPKNS0_15FieldDescriptorEi:
 2157|   198k|                                              int index) const {
 2158|   198k|  USAGE_CHECK_ALL(GetRepeatedMessage, REPEATED, MESSAGE);
  ------------------
  |  |  222|   198k|  USAGE_CHECK_MESSAGE_TYPE(METHOD);             \
  |  |  ------------------
  |  |  |  |  212|   198k|  USAGE_CHECK_EQ(field->containing_type(), descriptor_, METHOD, \
  |  |  |  |  ------------------
  |  |  |  |  |  |  198|   198k|  USAGE_CHECK((A) == (B), METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  195|   198k|  if (!(CONDITION))                                       \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (195:7): [True: 0, False: 198k]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  196|   198k|  ReportReflectionUsageError(descriptor_, field, #METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  213|   198k|                 "Field does not match message type.");
  |  |  ------------------
  |  |  223|   198k|  USAGE_CHECK_##LABEL(METHOD);                  \
  |  |  224|   198k|  USAGE_CHECK_TYPE(METHOD, CPPTYPE)
  |  |  ------------------
  |  |  |  |  203|   198k|  if (field->cpp_type() != FieldDescriptor::CPPTYPE_##CPPTYPE) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (203:7): [True: 0, False: 198k]
  |  |  |  |  ------------------
  |  |  |  |  204|   198k|  ReportReflectionUsageTypeError(descriptor_, field, #METHOD,  \
  |  |  |  |  205|      0|                                 FieldDescriptor::CPPTYPE_##CPPTYPE)
  |  |  ------------------
  ------------------
 2159|   198k|  CheckInvalidAccess(schema_, field);
 2160|       |
 2161|   198k|  if (field->is_extension()) {
  ------------------
  |  Branch (2161:7): [True: 0, False: 198k]
  ------------------
 2162|      0|    return static_cast<const Message&>(
 2163|      0|        GetExtensionSet(message).GetRepeatedMessage(field->number(), index));
 2164|   198k|  } else {
 2165|   198k|    if (IsMapFieldInApi(field)) {
  ------------------
  |  Branch (2165:9): [True: 0, False: 198k]
  ------------------
 2166|      0|      return GetRaw<MapFieldBase>(message, field)
 2167|      0|          .GetRepeatedField()
 2168|      0|          .Get<GenericTypeHandler<Message> >(index);
 2169|   198k|    } else {
 2170|   198k|      return GetRaw<RepeatedPtrFieldBase>(message, field)
 2171|   198k|          .Get<GenericTypeHandler<Message> >(index);
 2172|   198k|    }
 2173|   198k|  }
 2174|   198k|}
_ZNK6google8protobuf10Reflection22MutableRepeatedMessageEPNS0_7MessageEPKNS0_15FieldDescriptorEi:
 2178|   198k|                                            int index) const {
 2179|   198k|  USAGE_CHECK_ALL(MutableRepeatedMessage, REPEATED, MESSAGE);
  ------------------
  |  |  222|   198k|  USAGE_CHECK_MESSAGE_TYPE(METHOD);             \
  |  |  ------------------
  |  |  |  |  212|   198k|  USAGE_CHECK_EQ(field->containing_type(), descriptor_, METHOD, \
  |  |  |  |  ------------------
  |  |  |  |  |  |  198|   198k|  USAGE_CHECK((A) == (B), METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  195|   198k|  if (!(CONDITION))                                       \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (195:7): [True: 0, False: 198k]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  196|   198k|  ReportReflectionUsageError(descriptor_, field, #METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  213|   198k|                 "Field does not match message type.");
  |  |  ------------------
  |  |  223|   198k|  USAGE_CHECK_##LABEL(METHOD);                  \
  |  |  224|   198k|  USAGE_CHECK_TYPE(METHOD, CPPTYPE)
  |  |  ------------------
  |  |  |  |  203|   198k|  if (field->cpp_type() != FieldDescriptor::CPPTYPE_##CPPTYPE) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (203:7): [True: 0, False: 198k]
  |  |  |  |  ------------------
  |  |  |  |  204|   198k|  ReportReflectionUsageTypeError(descriptor_, field, #METHOD,  \
  |  |  |  |  205|      0|                                 FieldDescriptor::CPPTYPE_##CPPTYPE)
  |  |  ------------------
  ------------------
 2180|   198k|  CheckInvalidAccess(schema_, field);
 2181|       |
 2182|   198k|  if (field->is_extension()) {
  ------------------
  |  Branch (2182:7): [True: 0, False: 198k]
  ------------------
 2183|      0|    return static_cast<Message*>(
 2184|      0|        MutableExtensionSet(message)->MutableRepeatedMessage(field->number(),
 2185|      0|                                                             index));
 2186|   198k|  } else {
 2187|   198k|    if (IsMapFieldInApi(field)) {
  ------------------
  |  Branch (2187:9): [True: 0, False: 198k]
  ------------------
 2188|      0|      return MutableRaw<MapFieldBase>(message, field)
 2189|      0|          ->MutableRepeatedField()
 2190|      0|          ->Mutable<GenericTypeHandler<Message> >(index);
 2191|   198k|    } else {
 2192|   198k|      return MutableRaw<RepeatedPtrFieldBase>(message, field)
 2193|   198k|          ->Mutable<GenericTypeHandler<Message> >(index);
 2194|   198k|    }
 2195|   198k|  }
 2196|   198k|}
_ZNK6google8protobuf10Reflection10AddMessageEPNS0_7MessageEPKNS0_15FieldDescriptorEPNS0_14MessageFactoryE:
 2199|   198k|                                MessageFactory* factory) const {
 2200|   198k|  USAGE_CHECK_ALL(AddMessage, REPEATED, MESSAGE);
  ------------------
  |  |  222|   198k|  USAGE_CHECK_MESSAGE_TYPE(METHOD);             \
  |  |  ------------------
  |  |  |  |  212|   198k|  USAGE_CHECK_EQ(field->containing_type(), descriptor_, METHOD, \
  |  |  |  |  ------------------
  |  |  |  |  |  |  198|   198k|  USAGE_CHECK((A) == (B), METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  195|   198k|  if (!(CONDITION))                                       \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (195:7): [True: 0, False: 198k]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  196|   198k|  ReportReflectionUsageError(descriptor_, field, #METHOD, ERROR_DESCRIPTION)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  213|   198k|                 "Field does not match message type.");
  |  |  ------------------
  |  |  223|   198k|  USAGE_CHECK_##LABEL(METHOD);                  \
  |  |  224|   198k|  USAGE_CHECK_TYPE(METHOD, CPPTYPE)
  |  |  ------------------
  |  |  |  |  203|   198k|  if (field->cpp_type() != FieldDescriptor::CPPTYPE_##CPPTYPE) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (203:7): [True: 0, False: 198k]
  |  |  |  |  ------------------
  |  |  |  |  204|   198k|  ReportReflectionUsageTypeError(descriptor_, field, #METHOD,  \
  |  |  |  |  205|      0|                                 FieldDescriptor::CPPTYPE_##CPPTYPE)
  |  |  ------------------
  ------------------
 2201|   198k|  CheckInvalidAccess(schema_, field);
 2202|       |
 2203|   198k|  if (factory == nullptr) factory = message_factory_;
  ------------------
  |  Branch (2203:7): [True: 198k, False: 0]
  ------------------
 2204|       |
 2205|   198k|  if (field->is_extension()) {
  ------------------
  |  Branch (2205:7): [True: 0, False: 198k]
  ------------------
 2206|      0|    return static_cast<Message*>(
 2207|      0|        MutableExtensionSet(message)->AddMessage(field, factory));
 2208|   198k|  } else {
 2209|   198k|    Message* result = nullptr;
 2210|       |
 2211|       |    // We can't use AddField<Message>() because RepeatedPtrFieldBase doesn't
 2212|       |    // know how to allocate one.
 2213|   198k|    RepeatedPtrFieldBase* repeated = nullptr;
 2214|   198k|    if (IsMapFieldInApi(field)) {
  ------------------
  |  Branch (2214:9): [True: 0, False: 198k]
  ------------------
 2215|      0|      repeated =
 2216|      0|          MutableRaw<MapFieldBase>(message, field)->MutableRepeatedField();
 2217|   198k|    } else {
 2218|   198k|      repeated = MutableRaw<RepeatedPtrFieldBase>(message, field);
 2219|   198k|    }
 2220|   198k|    result = repeated->AddFromCleared<GenericTypeHandler<Message> >();
 2221|   198k|    if (result == nullptr) {
  ------------------
  |  Branch (2221:9): [True: 198k, False: 0]
  ------------------
 2222|       |      // We must allocate a new object.
 2223|   198k|      const Message* prototype;
 2224|   198k|      if (repeated->size() == 0) {
  ------------------
  |  Branch (2224:11): [True: 107k, False: 90.8k]
  ------------------
 2225|   107k|        prototype = factory->GetPrototype(field->message_type());
 2226|   107k|      } else {
 2227|  90.8k|        prototype = &repeated->Get<GenericTypeHandler<Message> >(0);
 2228|  90.8k|      }
 2229|   198k|      result = prototype->New(message->GetArenaForAllocation());
 2230|       |      // We can guarantee here that repeated and result are either both heap
 2231|       |      // allocated or arena owned. So it is safe to call the unsafe version
 2232|       |      // of AddAllocated.
 2233|   198k|      repeated->UnsafeArenaAddAllocated<GenericTypeHandler<Message> >(result);
 2234|   198k|    }
 2235|       |
 2236|   198k|    return result;
 2237|   198k|  }
 2238|   198k|}
_ZNK6google8protobuf10Reflection8HasOneofERKNS0_7MessageEPKNS0_15OneofDescriptorE:
 2659|   178k|                          const OneofDescriptor* oneof_descriptor) const {
 2660|   178k|  if (oneof_descriptor->is_synthetic()) {
  ------------------
  |  Branch (2660:7): [True: 0, False: 178k]
  ------------------
 2661|      0|    return HasField(message, oneof_descriptor->field(0));
 2662|      0|  }
 2663|   178k|  return (GetOneofCase(message, oneof_descriptor) > 0);
 2664|   178k|}
_ZNK6google8protobuf10Reflection10ClearOneofEPNS0_7MessageEPKNS0_15OneofDescriptorE:
 2679|   178k|                            const OneofDescriptor* oneof_descriptor) const {
 2680|   178k|  if (oneof_descriptor->is_synthetic()) {
  ------------------
  |  Branch (2680:7): [True: 0, False: 178k]
  ------------------
 2681|      0|    ClearField(message, oneof_descriptor->field(0));
 2682|      0|    return;
 2683|      0|  }
 2684|       |  // TODO(jieluo): Consider to cache the unused object instead of deleting
 2685|       |  // it. It will be much faster if an application switches a lot from
 2686|       |  // a few oneof fields.  Time/space tradeoff
 2687|   178k|  uint32_t oneof_case = GetOneofCase(*message, oneof_descriptor);
 2688|   178k|  if (oneof_case > 0) {
  ------------------
  |  Branch (2688:7): [True: 0, False: 178k]
  ------------------
 2689|      0|    const FieldDescriptor* field = descriptor_->FindFieldByNumber(oneof_case);
 2690|      0|    if (message->GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (2690:9): [True: 0, False: 0]
  ------------------
 2691|      0|      switch (field->cpp_type()) {
 2692|      0|        case FieldDescriptor::CPPTYPE_STRING: {
  ------------------
  |  Branch (2692:9): [True: 0, False: 0]
  ------------------
 2693|      0|          switch (field->options().ctype()) {
 2694|      0|            default:  // TODO(kenton):  Support other string reps.
  ------------------
  |  Branch (2694:13): [True: 0, False: 0]
  ------------------
 2695|      0|            case FieldOptions::STRING: {
  ------------------
  |  Branch (2695:13): [True: 0, False: 0]
  ------------------
 2696|       |              // Oneof string fields are never set as a default instance.
 2697|       |              // We just need to pass some arbitrary default string to make it
 2698|       |              // work. This allows us to not have the real default accessible
 2699|       |              // from reflection.
 2700|      0|              MutableField<ArenaStringPtr>(message, field)->Destroy();
 2701|      0|              break;
 2702|      0|            }
 2703|      0|          }
 2704|      0|          break;
 2705|      0|        }
 2706|       |
 2707|      0|        case FieldDescriptor::CPPTYPE_MESSAGE:
  ------------------
  |  Branch (2707:9): [True: 0, False: 0]
  ------------------
 2708|      0|          delete *MutableRaw<Message*>(message, field);
 2709|      0|          break;
 2710|      0|        default:
  ------------------
  |  Branch (2710:9): [True: 0, False: 0]
  ------------------
 2711|      0|          break;
 2712|      0|      }
 2713|      0|    } else {
 2714|      0|    }
 2715|       |
 2716|      0|    *MutableOneofCase(message, oneof_descriptor) = 0;
 2717|      0|  }
 2718|   178k|}
_ZN6google8protobuf8internal17AssignDescriptorsEPFPKNS1_15DescriptorTableEvEPNSt3__19once_flagERKNS0_8MetadataE:
 3080|  5.81M|                           const Metadata& metadata) {
 3081|  5.81M|  call_once(*once, [=] {
 3082|  5.81M|    auto* t = table();
 3083|  5.81M|    AssignDescriptorsImpl(t, t->is_eager);
 3084|  5.81M|  });
 3085|       |
 3086|  5.81M|  return metadata;
 3087|  5.81M|}
_ZN6google8protobuf8internal17AssignDescriptorsEPKNS1_15DescriptorTableEb:
 3089|      1|void AssignDescriptors(const DescriptorTable* table, bool eager) {
 3090|      1|  if (!eager) eager = table->is_eager;
  ------------------
  |  Branch (3090:7): [True: 1, False: 0]
  ------------------
 3091|      1|  call_once(*table->once, AssignDescriptorsImpl, table, eager);
 3092|      1|}
_ZN6google8protobuf8internal20AddDescriptorsRunnerC2EPKNS1_15DescriptorTableE:
 3094|      6|AddDescriptorsRunner::AddDescriptorsRunner(const DescriptorTable* table) {
 3095|      6|  AddDescriptors(table);
 3096|      6|}
_ZN6google8protobuf8internal25RegisterFileLevelMetadataEPKNS1_15DescriptorTableE:
 3098|      1|void RegisterFileLevelMetadata(const DescriptorTable* table) {
 3099|      1|  AssignDescriptors(table);
 3100|      1|  RegisterAllTypesInternal(table->file_level_metadata, table->num_messages);
 3101|      1|}
generated_message_reflection.cc:_ZN6google8protobuf12_GLOBAL__N_115IsMapFieldInApiEPKNS0_15FieldDescriptorE:
   82|   866k|bool IsMapFieldInApi(const FieldDescriptor* field) { return field->is_map(); }
_ZNK6google8protobuf10Reflection9IsInlinedEPKNS0_15FieldDescriptorE:
  273|  42.1k|bool Reflection::IsInlined(const FieldDescriptor* field) const {
  274|  42.1k|  return schema_.IsFieldInlined(field);
  275|  42.1k|}
generated_message_reflection.cc:_ZN6google8protobuf12_GLOBAL__N_118CheckInvalidAccessERKNS0_8internal16ReflectionSchemaEPKNS0_15FieldDescriptorE:
  189|  4.28M|                               const FieldDescriptor* field) {
  190|  4.28M|  GOOGLE_CHECK(!schema.IsFieldStripped(field))
  ------------------
  |  |  152|  4.28M|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|  4.28M|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 4.28M, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  191|      0|      << "invalid access to a stripped field " << field->full_name();
  192|  4.28M|}
generated_message_reflection.cc:_ZN6google8protobuf12_GLOBAL__N_118IsIndexInHasBitSetEPKjj:
 1478|   919k|bool IsIndexInHasBitSet(const uint32_t* has_bit_set, uint32_t has_bit_index) {
 1479|   919k|  GOOGLE_DCHECK_NE(has_bit_index, ~0u);
  ------------------
  |  |  195|   919k|#define GOOGLE_DCHECK_NE GOOGLE_CHECK_NE
  |  |  ------------------
  |  |  |  |  155|   919k|#define GOOGLE_CHECK_NE(A, B) GOOGLE_CHECK((A) != (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|   919k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|   919k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 919k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1480|   919k|  return ((has_bit_set[has_bit_index / 32] >> (has_bit_index % 32)) &
 1481|   919k|          static_cast<uint32_t>(1)) != 0;
 1482|   919k|}
_ZNK6google8protobuf10Reflection10GetHasBitsERKNS0_7MessageE:
 2454|   919k|const uint32_t* Reflection::GetHasBits(const Message& message) const {
 2455|   919k|  GOOGLE_DCHECK(schema_.HasHasbits());
  ------------------
  |  |  192|   919k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|   919k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   919k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 919k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2456|   919k|  return &GetConstRefAtOffset<uint32_t>(message, schema_.HasBitsOffset());
 2457|   919k|}
_ZNK6google8protobuf10Reflection14MutableHasBitsEPNS0_7MessageE:
 2459|   369k|uint32_t* Reflection::MutableHasBits(Message* message) const {
 2460|   369k|  GOOGLE_DCHECK(schema_.HasHasbits());
  ------------------
  |  |  192|   369k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|   369k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   369k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 369k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2461|   369k|  return GetPointerAtOffset<uint32_t>(message, schema_.HasBitsOffset());
 2462|   369k|}
_ZNK6google8protobuf10Reflection16MutableOneofCaseEPNS0_7MessageEPKNS0_15OneofDescriptorE:
 2465|   178k|    Message* message, const OneofDescriptor* oneof_descriptor) const {
 2466|   178k|  GOOGLE_DCHECK(!oneof_descriptor->is_synthetic());
  ------------------
  |  |  192|   178k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|   178k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   178k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 178k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2467|   178k|  return GetPointerAtOffset<uint32_t>(
 2468|   178k|      message, schema_.GetOneofCaseOffset(oneof_descriptor));
 2469|   178k|}
_ZNK6google8protobuf10Reflection6HasBitERKNS0_7MessageEPKNS0_15FieldDescriptorE:
 2554|   919k|                        const FieldDescriptor* field) const {
 2555|   919k|  GOOGLE_DCHECK(!field->options().weak());
  ------------------
  |  |  192|   919k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|   919k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   919k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 919k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2556|   919k|  if (schema_.HasBitIndex(field) != static_cast<uint32_t>(-1)) {
  ------------------
  |  Branch (2556:7): [True: 919k, False: 0]
  ------------------
 2557|   919k|    return IsIndexInHasBitSet(GetHasBits(message), schema_.HasBitIndex(field));
 2558|   919k|  }
 2559|       |
 2560|       |  // Intentionally check here because HasBitIndex(field) != -1 means valid.
 2561|      0|  CheckInvalidAccess(schema_, field);
 2562|       |
 2563|       |  // proto3: no has-bits. All fields present except messages, which are
 2564|       |  // present only if their message-field pointer is non-null.
 2565|      0|  if (field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE) {
  ------------------
  |  Branch (2565:7): [True: 0, False: 0]
  ------------------
 2566|      0|    return !schema_.IsDefaultInstance(message) &&
  ------------------
  |  Branch (2566:12): [True: 0, False: 0]
  ------------------
 2567|      0|           GetRaw<const Message*>(message, field) != nullptr;
  ------------------
  |  Branch (2567:12): [True: 0, False: 0]
  ------------------
 2568|      0|  } else {
 2569|       |    // Non-message field (and non-oneof, since that was handled in HasField()
 2570|       |    // before calling us), and singular (again, checked in HasField). So, this
 2571|       |    // field must be a scalar.
 2572|       |
 2573|       |    // Scalar primitive (numeric or string/bytes) fields are present if
 2574|       |    // their value is non-zero (numeric) or non-empty (string/bytes). N.B.:
 2575|       |    // we must use this definition here, rather than the "scalar fields
 2576|       |    // always present" in the proto3 docs, because MergeFrom() semantics
 2577|       |    // require presence as "present on wire", and reflection-based merge
 2578|       |    // (which uses HasField()) needs to be consistent with this.
 2579|      0|    switch (field->cpp_type()) {
  ------------------
  |  Branch (2579:13): [True: 0, False: 0]
  ------------------
 2580|      0|      case FieldDescriptor::CPPTYPE_STRING:
  ------------------
  |  Branch (2580:7): [True: 0, False: 0]
  ------------------
 2581|      0|        switch (field->options().ctype()) {
 2582|      0|          default: {
  ------------------
  |  Branch (2582:11): [True: 0, False: 0]
  ------------------
 2583|      0|            if (IsInlined(field)) {
  ------------------
  |  Branch (2583:17): [True: 0, False: 0]
  ------------------
 2584|      0|              return !GetField<InlinedStringField>(message, field)
 2585|      0|                          .GetNoArena()
 2586|      0|                          .empty();
 2587|      0|            }
 2588|       |
 2589|      0|            return GetField<ArenaStringPtr>(message, field).Get().size() > 0;
 2590|      0|          }
 2591|      0|        }
 2592|      0|        return false;
 2593|      0|      case FieldDescriptor::CPPTYPE_BOOL:
  ------------------
  |  Branch (2593:7): [True: 0, False: 0]
  ------------------
 2594|      0|        return GetRaw<bool>(message, field) != false;
 2595|      0|      case FieldDescriptor::CPPTYPE_INT32:
  ------------------
  |  Branch (2595:7): [True: 0, False: 0]
  ------------------
 2596|      0|        return GetRaw<int32_t>(message, field) != 0;
 2597|      0|      case FieldDescriptor::CPPTYPE_INT64:
  ------------------
  |  Branch (2597:7): [True: 0, False: 0]
  ------------------
 2598|      0|        return GetRaw<int64_t>(message, field) != 0;
 2599|      0|      case FieldDescriptor::CPPTYPE_UINT32:
  ------------------
  |  Branch (2599:7): [True: 0, False: 0]
  ------------------
 2600|      0|        return GetRaw<uint32_t>(message, field) != 0;
 2601|      0|      case FieldDescriptor::CPPTYPE_UINT64:
  ------------------
  |  Branch (2601:7): [True: 0, False: 0]
  ------------------
 2602|      0|        return GetRaw<uint64_t>(message, field) != 0;
 2603|      0|      case FieldDescriptor::CPPTYPE_FLOAT:
  ------------------
  |  Branch (2603:7): [True: 0, False: 0]
  ------------------
 2604|      0|        static_assert(sizeof(uint32_t) == sizeof(float),
 2605|      0|                      "Code assumes uint32_t and float are the same size.");
 2606|      0|        return GetRaw<uint32_t>(message, field) != 0;
 2607|      0|      case FieldDescriptor::CPPTYPE_DOUBLE:
  ------------------
  |  Branch (2607:7): [True: 0, False: 0]
  ------------------
 2608|      0|        static_assert(sizeof(uint64_t) == sizeof(double),
 2609|      0|                      "Code assumes uint64_t and double are the same size.");
 2610|      0|        return GetRaw<uint64_t>(message, field) != 0;
 2611|      0|      case FieldDescriptor::CPPTYPE_ENUM:
  ------------------
  |  Branch (2611:7): [True: 0, False: 0]
  ------------------
 2612|      0|        return GetRaw<int>(message, field) != 0;
 2613|      0|      case FieldDescriptor::CPPTYPE_MESSAGE:
  ------------------
  |  Branch (2613:7): [True: 0, False: 0]
  ------------------
 2614|       |        // handled above; avoid warning
 2615|      0|        break;
 2616|      0|    }
 2617|      0|    GOOGLE_LOG(FATAL) << "Reached impossible case in HasBit().";
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
 2618|      0|    return false;
 2619|      0|  }
 2620|      0|}
_ZNK6google8protobuf10Reflection6SetBitEPNS0_7MessageEPKNS0_15FieldDescriptorE:
 2622|   369k|void Reflection::SetBit(Message* message, const FieldDescriptor* field) const {
 2623|   369k|  GOOGLE_DCHECK(!field->options().weak());
  ------------------
  |  |  192|   369k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|   369k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   369k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 369k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2624|   369k|  const uint32_t index = schema_.HasBitIndex(field);
 2625|   369k|  if (index == static_cast<uint32_t>(-1)) return;
  ------------------
  |  Branch (2625:7): [True: 0, False: 369k]
  ------------------
 2626|   369k|  MutableHasBits(message)[index / 32] |=
 2627|   369k|      (static_cast<uint32_t>(1) << (index % 32));
 2628|   369k|}
_ZNK6google8protobuf10Reflection12SetOneofCaseEPNS0_7MessageEPKNS0_15FieldDescriptorE:
 2667|   178k|                              const FieldDescriptor* field) const {
 2668|   178k|  *MutableOneofCase(message, field->containing_oneof()) = field->number();
 2669|   178k|}
generated_message_reflection.cc:_ZN6google8protobuf12_GLOBAL__N_121AssignDescriptorsImplEPKNS0_8internal15DescriptorTableEb:
 2979|      3|void AssignDescriptorsImpl(const DescriptorTable* table, bool eager) {
 2980|       |  // Ensure the file descriptor is added to the pool.
 2981|      3|  {
 2982|       |    // This only happens once per proto file. So a global mutex to serialize
 2983|       |    // calls to AddDescriptors.
 2984|      3|    static WrappedMutex mu{GOOGLE_PROTOBUF_LINKER_INITIALIZED};
 2985|      3|    mu.Lock();
 2986|      3|    AddDescriptors(table);
 2987|      3|    mu.Unlock();
 2988|      3|  }
 2989|      3|  if (eager) {
  ------------------
  |  Branch (2989:7): [True: 0, False: 3]
  ------------------
 2990|       |    // Normally we do not want to eagerly build descriptors of our deps.
 2991|       |    // However if this proto is optimized for code size (ie using reflection)
 2992|       |    // and it has a message extending a custom option of a descriptor with that
 2993|       |    // message being optimized for code size as well. Building the descriptors
 2994|       |    // in this file requires parsing the serialized file descriptor, which now
 2995|       |    // requires parsing the message extension, which potentially requires
 2996|       |    // building the descriptor of the message extending one of the options.
 2997|       |    // However we are already updating descriptor pool under a lock. To prevent
 2998|       |    // this the compiler statically looks for this case and we just make sure we
 2999|       |    // first build the descriptors of all our dependencies, preventing the
 3000|       |    // deadlock.
 3001|      0|    int num_deps = table->num_deps;
 3002|      0|    for (int i = 0; i < num_deps; i++) {
  ------------------
  |  Branch (3002:21): [True: 0, False: 0]
  ------------------
 3003|       |      // In case of weak fields deps[i] could be null.
 3004|      0|      if (table->deps[i]) AssignDescriptors(table->deps[i], true);
  ------------------
  |  Branch (3004:11): [True: 0, False: 0]
  ------------------
 3005|      0|    }
 3006|      0|  }
 3007|       |
 3008|       |  // Fill the arrays with pointers to descriptors and reflection classes.
 3009|      3|  const FileDescriptor* file =
 3010|      3|      DescriptorPool::internal_generated_pool()->FindFileByName(
 3011|      3|          table->filename);
 3012|      3|  GOOGLE_CHECK(file != nullptr);
  ------------------
  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3013|       |
 3014|      3|  MessageFactory* factory = MessageFactory::generated_factory();
 3015|       |
 3016|      3|  AssignDescriptorsHelper helper(
 3017|      3|      factory, table->file_level_metadata, table->file_level_enum_descriptors,
 3018|      3|      table->schemas, table->default_instances, table->offsets);
 3019|       |
 3020|     64|  for (int i = 0; i < file->message_type_count(); i++) {
  ------------------
  |  Branch (3020:19): [True: 61, False: 3]
  ------------------
 3021|     61|    helper.AssignMessageDescriptor(file->message_type(i));
 3022|     61|  }
 3023|       |
 3024|      3|  for (int i = 0; i < file->enum_type_count(); i++) {
  ------------------
  |  Branch (3024:19): [True: 0, False: 3]
  ------------------
 3025|      0|    helper.AssignEnumDescriptor(file->enum_type(i));
 3026|      0|  }
 3027|      3|  if (file->options().cc_generic_services()) {
  ------------------
  |  Branch (3027:7): [True: 0, False: 3]
  ------------------
 3028|      0|    for (int i = 0; i < file->service_count(); i++) {
  ------------------
  |  Branch (3028:21): [True: 0, False: 0]
  ------------------
 3029|      0|      table->file_level_service_descriptors[i] = file->service(i);
 3030|      0|    }
 3031|      0|  }
 3032|      3|  MetadataOwner::Instance()->AddArray(table->file_level_metadata,
 3033|      3|                                      helper.GetCurrentMetadataPtr());
 3034|      3|}
_ZN6google8protobuf23AssignDescriptorsHelperC2EPNS0_14MessageFactoryEPNS0_8MetadataEPPKNS0_14EnumDescriptorEPKNS0_8internal15MigrationSchemaEPKPKNS0_7MessageEPKj:
 2902|      3|      : factory_(factory),
 2903|      3|        file_level_metadata_(file_level_metadata),
 2904|      3|        file_level_enum_descriptors_(file_level_enum_descriptors),
 2905|      3|        schemas_(schemas),
 2906|      3|        default_instance_data_(default_instance_data),
 2907|      3|        offsets_(offsets) {}
_ZN6google8protobuf23AssignDescriptorsHelper23AssignMessageDescriptorEPKNS0_10DescriptorE:
 2909|     67|  void AssignMessageDescriptor(const Descriptor* descriptor) {
 2910|     73|    for (int i = 0; i < descriptor->nested_type_count(); i++) {
  ------------------
  |  Branch (2910:21): [True: 6, False: 67]
  ------------------
 2911|      6|      AssignMessageDescriptor(descriptor->nested_type(i));
 2912|      6|    }
 2913|       |
 2914|     67|    file_level_metadata_->descriptor = descriptor;
 2915|       |
 2916|     67|    file_level_metadata_->reflection =
 2917|     67|        new Reflection(descriptor,
 2918|     67|                       MigrationToReflectionSchema(default_instance_data_,
 2919|     67|                                                   offsets_, *schemas_),
 2920|     67|                       DescriptorPool::internal_generated_pool(), factory_);
 2921|     73|    for (int i = 0; i < descriptor->enum_type_count(); i++) {
  ------------------
  |  Branch (2921:21): [True: 6, False: 67]
  ------------------
 2922|      6|      AssignEnumDescriptor(descriptor->enum_type(i));
 2923|      6|    }
 2924|     67|    schemas_++;
 2925|     67|    default_instance_data_++;
 2926|     67|    file_level_metadata_++;
 2927|     67|  }
generated_message_reflection.cc:_ZN6google8protobuf12_GLOBAL__N_127MigrationToReflectionSchemaEPKPKNS0_7MessageEPKjNS0_8internal15MigrationSchemaE:
 2872|     67|    MigrationSchema migration_schema) {
 2873|     67|  ReflectionSchema result;
 2874|     67|  result.default_instance_ = *default_instance;
 2875|       |  // First 7 offsets are offsets to the special fields. The following offsets
 2876|       |  // are the proto fields.
 2877|     67|  result.offsets_ = offsets + migration_schema.offsets_index + 6;
 2878|     67|  result.has_bit_indices_ = offsets + migration_schema.has_bit_indices_index;
 2879|     67|  result.has_bits_offset_ = offsets[migration_schema.offsets_index + 0];
 2880|     67|  result.metadata_offset_ = offsets[migration_schema.offsets_index + 1];
 2881|     67|  result.extensions_offset_ = offsets[migration_schema.offsets_index + 2];
 2882|     67|  result.oneof_case_offset_ = offsets[migration_schema.offsets_index + 3];
 2883|     67|  result.object_size_ = migration_schema.object_size;
 2884|     67|  result.weak_field_map_offset_ = offsets[migration_schema.offsets_index + 4];
 2885|     67|  result.inlined_string_donated_offset_ =
 2886|     67|      offsets[migration_schema.offsets_index + 5];
 2887|     67|  result.inlined_string_indices_ =
 2888|     67|      offsets + migration_schema.inlined_string_indices_index;
 2889|     67|  return result;
 2890|     67|}
_ZN6google8protobuf23AssignDescriptorsHelper20AssignEnumDescriptorEPKNS0_14EnumDescriptorE:
 2929|      6|  void AssignEnumDescriptor(const EnumDescriptor* descriptor) {
 2930|      6|    *file_level_enum_descriptors_ = descriptor;
 2931|      6|    file_level_enum_descriptors_++;
 2932|      6|  }
generated_message_reflection.cc:_ZN6google8protobuf12_GLOBAL__N_113MetadataOwner8InstanceEv:
 2965|      3|  static MetadataOwner* Instance() {
 2966|      3|    static MetadataOwner* res = OnShutdownDelete(new MetadataOwner);
 2967|      3|    return res;
 2968|      3|  }
generated_message_reflection.cc:_ZN6google8protobuf12_GLOBAL__N_113MetadataOwnerC2Ev:
 2971|      1|  MetadataOwner() = default;  // private because singleton
generated_message_reflection.cc:_ZN6google8protobuf12_GLOBAL__N_113MetadataOwner8AddArrayEPKNS0_8MetadataES5_:
 2959|      3|  void AddArray(const Metadata* begin, const Metadata* end) {
 2960|      3|    mu_.Lock();
 2961|      3|    metadata_arrays_.push_back(std::make_pair(begin, end));
 2962|      3|    mu_.Unlock();
 2963|      3|  }
_ZNK6google8protobuf23AssignDescriptorsHelper21GetCurrentMetadataPtrEv:
 2934|      3|  const Metadata* GetCurrentMetadataPtr() const { return file_level_metadata_; }
generated_message_reflection.cc:_ZN6google8protobuf12_GLOBAL__N_114AddDescriptorsEPKNS0_8internal15DescriptorTableE:
 3053|      9|void AddDescriptors(const DescriptorTable* table) {
 3054|       |  // AddDescriptors is not thread safe. Callers need to ensure calls are
 3055|       |  // properly serialized. This function is only called pre-main by global
 3056|       |  // descriptors and we can assume single threaded access or it's called
 3057|       |  // by AssignDescriptorImpl which uses a mutex to sequence calls.
 3058|      9|  if (table->is_initialized) return;
  ------------------
  |  Branch (3058:7): [True: 3, False: 6]
  ------------------
 3059|      6|  table->is_initialized = true;
 3060|      6|  AddDescriptorsImpl(table);
 3061|      6|}
generated_message_reflection.cc:_ZN6google8protobuf12_GLOBAL__N_118AddDescriptorsImplEPKNS0_8internal15DescriptorTableE:
 3036|      6|void AddDescriptorsImpl(const DescriptorTable* table) {
 3037|       |  // Reflection refers to the default fields so make sure they are initialized.
 3038|      6|  internal::InitProtobufDefaults();
 3039|       |
 3040|       |  // Ensure all dependent descriptors are registered to the generated descriptor
 3041|       |  // pool and message factory.
 3042|      6|  int num_deps = table->num_deps;
 3043|      6|  for (int i = 0; i < num_deps; i++) {
  ------------------
  |  Branch (3043:19): [True: 0, False: 6]
  ------------------
 3044|       |    // In case of weak fields deps[i] could be null.
 3045|      0|    if (table->deps[i]) AddDescriptors(table->deps[i]);
  ------------------
  |  Branch (3045:9): [True: 0, False: 0]
  ------------------
 3046|      0|  }
 3047|       |
 3048|       |  // Register the descriptor of this file.
 3049|      6|  DescriptorPool::InternalAddGeneratedFile(table->descriptor, table->size);
 3050|      6|  MessageFactory::InternalRegisterGeneratedFile(table);
 3051|      6|}
_ZN6google8protobuf24RegisterAllTypesInternalEPKNS0_8MetadataEi:
 3067|      1|void RegisterAllTypesInternal(const Metadata* file_level_metadata, int size) {
 3068|     40|  for (int i = 0; i < size; i++) {
  ------------------
  |  Branch (3068:19): [True: 39, False: 1]
  ------------------
 3069|     39|    const Reflection* reflection = file_level_metadata[i].reflection;
 3070|     39|    MessageFactory::InternalRegisterGeneratedMessage(
 3071|     39|        file_level_metadata[i].descriptor,
 3072|     39|        reflection->schema_.default_instance_);
 3073|     39|  }
 3074|      1|}
_ZNK6google8protobuf10Reflection10MutableRawIPNS0_7MessageEEEPT_S4_PKNS0_15FieldDescriptorE:
 2450|   699k|                             const FieldDescriptor* field) const {
 2451|   699k|  return GetPointerAtOffset<Type>(message, schema_.GetFieldOffset(field));
 2452|   699k|}
_ZNK6google8protobuf10Reflection10MutableRawIiEEPT_PNS0_7MessageEPKNS0_15FieldDescriptorE:
 2450|  38.2k|                             const FieldDescriptor* field) const {
 2451|  38.2k|  return GetPointerAtOffset<Type>(message, schema_.GetFieldOffset(field));
 2452|  38.2k|}
_ZNK6google8protobuf10Reflection10MutableRawIjEEPT_PNS0_7MessageEPKNS0_15FieldDescriptorE:
 2450|  59.8k|                             const FieldDescriptor* field) const {
 2451|  59.8k|  return GetPointerAtOffset<Type>(message, schema_.GetFieldOffset(field));
 2452|  59.8k|}
_ZNK6google8protobuf10Reflection10MutableRawINS0_8internal14ArenaStringPtrEEEPT_PNS0_7MessageEPKNS0_15FieldDescriptorE:
 2450|  42.1k|                             const FieldDescriptor* field) const {
 2451|  42.1k|  return GetPointerAtOffset<Type>(message, schema_.GetFieldOffset(field));
 2452|  42.1k|}
_ZNK6google8protobuf10Reflection10MutableRawINS0_8internal20RepeatedPtrFieldBaseEEEPT_PNS0_7MessageEPKNS0_15FieldDescriptorE:
 2450|   396k|                             const FieldDescriptor* field) const {
 2451|   396k|  return GetPointerAtOffset<Type>(message, schema_.GetFieldOffset(field));
 2452|   396k|}
_ZNK6google8protobuf10Reflection8SetFieldIiEEvPNS0_7MessageEPKNS0_15FieldDescriptorERKT_:
 2766|  38.2k|                          const Type& value) const {
 2767|  38.2k|  bool real_oneof = schema_.InRealOneof(field);
 2768|  38.2k|  if (real_oneof && !HasOneofField(*message, field)) {
  ------------------
  |  Branch (2768:7): [True: 6.13k, False: 32.0k]
  |  Branch (2768:21): [True: 6.13k, False: 0]
  ------------------
 2769|  6.13k|    ClearOneof(message, field->containing_oneof());
 2770|  6.13k|  }
 2771|  38.2k|  *MutableRaw<Type>(message, field) = value;
 2772|  38.2k|  real_oneof ? SetOneofCase(message, field) : SetBit(message, field);
  ------------------
  |  Branch (2772:3): [True: 6.13k, False: 32.0k]
  ------------------
 2773|  38.2k|}
_ZNK6google8protobuf10Reflection8SetFieldIjEEvPNS0_7MessageEPKNS0_15FieldDescriptorERKT_:
 2766|  59.8k|                          const Type& value) const {
 2767|  59.8k|  bool real_oneof = schema_.InRealOneof(field);
 2768|  59.8k|  if (real_oneof && !HasOneofField(*message, field)) {
  ------------------
  |  Branch (2768:7): [True: 27.0k, False: 32.7k]
  |  Branch (2768:21): [True: 27.0k, False: 0]
  ------------------
 2769|  27.0k|    ClearOneof(message, field->containing_oneof());
 2770|  27.0k|  }
 2771|  59.8k|  *MutableRaw<Type>(message, field) = value;
 2772|  59.8k|  real_oneof ? SetOneofCase(message, field) : SetBit(message, field);
  ------------------
  |  Branch (2772:3): [True: 27.0k, False: 32.7k]
  ------------------
 2773|  59.8k|}
_ZNK6google8protobuf10Reflection12MutableFieldINS0_8internal14ArenaStringPtrEEEPT_PNS0_7MessageEPKNS0_15FieldDescriptorE:
 2777|  42.1k|                               const FieldDescriptor* field) const {
 2778|  42.1k|  schema_.InRealOneof(field) ? SetOneofCase(message, field)
  ------------------
  |  Branch (2778:3): [True: 0, False: 42.1k]
  ------------------
 2779|  42.1k|                             : SetBit(message, field);
 2780|  42.1k|  return MutableRaw<Type>(message, field);
 2781|  42.1k|}
_ZNK6google8protobuf10Reflection12MutableFieldIPNS0_7MessageEEEPT_S4_PKNS0_15FieldDescriptorE:
 2777|   145k|                               const FieldDescriptor* field) const {
 2778|   145k|  schema_.InRealOneof(field) ? SetOneofCase(message, field)
  ------------------
  |  Branch (2778:3): [True: 145k, False: 0]
  ------------------
 2779|   145k|                             : SetBit(message, field);
 2780|   145k|  return MutableRaw<Type>(message, field);
 2781|   145k|}
generated_message_reflection.cc:_ZZN6google8protobuf8internal17AssignDescriptorsEPFPKNS1_15DescriptorTableEvEPNSt3__19once_flagERKNS0_8MetadataEENK3$_0clEv:
 3081|      3|  call_once(*once, [=] {
 3082|      3|    auto* t = table();
 3083|      3|    AssignDescriptorsImpl(t, t->is_eager);
 3084|      3|  });

_ZNK6google8protobuf8internal16ReflectionSchema11InRealOneofEPKNS0_15FieldDescriptorE:
  123|  7.84M|  bool InRealOneof(const FieldDescriptor* field) const {
  124|  7.84M|    return field->containing_oneof() &&
  ------------------
  |  Branch (124:12): [True: 3.04M, False: 4.79M]
  ------------------
  125|  7.84M|           !field->containing_oneof()->is_synthetic();
  ------------------
  |  Branch (125:12): [True: 3.04M, False: 0]
  ------------------
  126|  7.84M|  }
_ZNK6google8protobuf8internal16ReflectionSchema22GetFieldOffsetNonOneofEPKNS0_15FieldDescriptorE:
  130|  1.36M|  uint32_t GetFieldOffsetNonOneof(const FieldDescriptor* field) const {
  131|  1.36M|    GOOGLE_DCHECK(!InRealOneof(field));
  ------------------
  |  |  192|  1.36M|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  1.36M|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  1.36M|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 1.36M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  132|  1.36M|    return OffsetValue(offsets_[field->index()], field->type());
  133|  1.36M|  }
_ZNK6google8protobuf8internal16ReflectionSchema14GetFieldOffsetEPKNS0_15FieldDescriptorE:
  136|  1.98M|  uint32_t GetFieldOffset(const FieldDescriptor* field) const {
  137|  1.98M|    if (InRealOneof(field)) {
  ------------------
  |  Branch (137:9): [True: 615k, False: 1.36M]
  ------------------
  138|   615k|      size_t offset =
  139|   615k|          static_cast<size_t>(field->containing_type()->field_count()) +
  140|   615k|          field->containing_oneof()->index();
  141|   615k|      return OffsetValue(offsets_[offset], field->type());
  142|  1.36M|    } else {
  143|  1.36M|      return GetFieldOffsetNonOneof(field);
  144|  1.36M|    }
  145|  1.98M|  }
_ZNK6google8protobuf8internal16ReflectionSchema14IsFieldInlinedEPKNS0_15FieldDescriptorE:
  147|  42.1k|  bool IsFieldInlined(const FieldDescriptor* field) const {
  148|  42.1k|    return Inlined(offsets_[field->index()], field->type());
  149|  42.1k|  }
_ZNK6google8protobuf8internal16ReflectionSchema18GetOneofCaseOffsetEPKNS0_15OneofDescriptorE:
  151|  2.81M|  uint32_t GetOneofCaseOffset(const OneofDescriptor* oneof_descriptor) const {
  152|  2.81M|    return static_cast<uint32_t>(oneof_case_offset_) +
  153|  2.81M|           static_cast<uint32_t>(
  154|  2.81M|               static_cast<size_t>(oneof_descriptor->index()) *
  155|  2.81M|               sizeof(uint32_t));
  156|  2.81M|  }
_ZNK6google8protobuf8internal16ReflectionSchema10HasHasbitsEv:
  158|  4.78M|  bool HasHasbits() const { return has_bits_offset_ != -1; }
_ZNK6google8protobuf8internal16ReflectionSchema11HasBitIndexEPKNS0_15FieldDescriptorE:
  161|  2.20M|  uint32_t HasBitIndex(const FieldDescriptor* field) const {
  162|  2.20M|    if (has_bits_offset_ == -1) return static_cast<uint32_t>(-1);
  ------------------
  |  Branch (162:9): [True: 0, False: 2.20M]
  ------------------
  163|  2.20M|    GOOGLE_DCHECK(HasHasbits());
  ------------------
  |  |  192|  2.20M|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  2.20M|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  2.20M|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 2.20M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  164|  2.20M|    return has_bit_indices_[field->index()];
  165|  2.20M|  }
_ZNK6google8protobuf8internal16ReflectionSchema13HasBitsOffsetEv:
  168|  1.28M|  uint32_t HasBitsOffset() const {
  169|  1.28M|    GOOGLE_DCHECK(HasHasbits());
  ------------------
  |  |  192|  1.28M|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  1.28M|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  1.28M|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 1.28M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  170|  1.28M|    return static_cast<uint32_t>(has_bits_offset_);
  171|  1.28M|  }
_ZNK6google8protobuf8internal16ReflectionSchema15IsFieldStrippedEPKNS0_15FieldDescriptorE:
  227|  4.28M|  bool IsFieldStripped(const FieldDescriptor* field) const {
  228|  4.28M|    (void)field;
  229|  4.28M|    return false;
  230|  4.28M|  }
_ZN6google8protobuf8internal16ReflectionSchema11OffsetValueEjNS0_15FieldDescriptor4TypeE:
  260|  1.98M|  static uint32_t OffsetValue(uint32_t v, FieldDescriptor::Type type) {
  261|  1.98M|    if (type == FieldDescriptor::TYPE_MESSAGE ||
  ------------------
  |  Branch (261:9): [True: 1.84M, False: 140k]
  ------------------
  262|  1.98M|        type == FieldDescriptor::TYPE_STRING ||
  ------------------
  |  Branch (262:9): [True: 42.1k, False: 98.0k]
  ------------------
  263|  1.98M|        type == FieldDescriptor::TYPE_BYTES) {
  ------------------
  |  Branch (263:9): [True: 0, False: 98.0k]
  ------------------
  264|  1.88M|      return v & 0xFFFFFFFEu;
  265|  1.88M|    }
  266|  98.0k|    return v;
  267|  1.98M|  }
_ZN6google8protobuf8internal16ReflectionSchema7InlinedEjNS0_15FieldDescriptor4TypeE:
  269|  42.1k|  static bool Inlined(uint32_t v, FieldDescriptor::Type type) {
  270|  42.1k|    if (type == FieldDescriptor::TYPE_STRING ||
  ------------------
  |  Branch (270:9): [True: 42.1k, False: 0]
  ------------------
  271|  42.1k|        type == FieldDescriptor::TYPE_BYTES) {
  ------------------
  |  Branch (271:9): [True: 0, False: 0]
  ------------------
  272|  42.1k|      return (v & 1u) != 0u;
  273|  42.1k|    } else {
  274|       |      // Non string/byte fields are not inlined.
  275|      0|      return false;
  276|      0|    }
  277|  42.1k|  }

_ZN6google8protobuf8internal24InitProtobufDefaultsSlowEv:
   82|      2|void InitProtobufDefaultsSlow() {
   83|      2|  static bool is_inited = InitProtobufDefaultsImpl();
   84|      2|  (void)is_inited;
   85|      2|}
generated_message_util.cc:_ZN6google8protobuf8internalL24InitProtobufDefaultsImplEv:
   73|      2|static bool InitProtobufDefaultsImpl() {
   74|      2|  fixed_address_empty_string.DefaultConstruct();
   75|      2|  OnShutdownDestroyString(fixed_address_empty_string.get_mutable());
   76|       |
   77|       |
   78|      2|  init_protobuf_defaults_state.store(true, std::memory_order_release);
   79|      2|  return true;
   80|      2|}

_ZN6google8protobuf8internal20InitProtobufDefaultsEv:
   94|     47|PROTOBUF_EXPORT inline void InitProtobufDefaults() {
   95|     47|  if (PROTOBUF_PREDICT_FALSE(
  ------------------
  |  |  490|     47|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 47]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 47]
  |  |  ------------------
  ------------------
   96|     47|          !init_protobuf_defaults_state.load(std::memory_order_acquire))) {
   97|      0|    InitProtobufDefaultsSlow();
   98|      0|  }
   99|     47|}
_ZN6google8protobuf8internal14GetEmptyStringEv:
  102|     41|PROTOBUF_EXPORT inline const std::string& GetEmptyString() {
  103|     41|  InitProtobufDefaults();
  104|     41|  return GetEmptyStringAlreadyInited();
  105|     41|}
_ZN6google8protobuf8internal23OnShutdownDestroyStringEPKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  204|      2|inline void OnShutdownDestroyString(const std::string* ptr) {
  205|      2|  OnShutdownRun(DestroyString, ptr);
  206|      2|}
_ZN6google8protobuf8internal17AllAreInitializedINS0_15DescriptorProtoEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|    210|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|    411|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 201, False: 210]
  ------------------
  116|    201|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 201]
  ------------------
  117|    201|  }
  118|    210|  return true;
  119|    210|}
_ZN6google8protobuf8internal17AllAreInitializedINS0_19EnumDescriptorProtoEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|    210|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|    228|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 18, False: 210]
  ------------------
  116|     18|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 18]
  ------------------
  117|     18|  }
  118|    210|  return true;
  119|    210|}
_ZN6google8protobuf8internal17AllAreInitializedINS0_22ServiceDescriptorProtoEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|      9|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|      9|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 0, False: 9]
  ------------------
  116|      0|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 0]
  ------------------
  117|      0|  }
  118|      9|  return true;
  119|      9|}
_ZN6google8protobuf8internal17AllAreInitializedINS0_20FieldDescriptorProtoEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|    411|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|  1.23k|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 825, False: 411]
  ------------------
  116|    825|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 825]
  ------------------
  117|    825|  }
  118|    411|  return true;
  119|    411|}
_ZN6google8protobuf8internal17AllAreInitializedINS0_30DescriptorProto_ExtensionRangeEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|    201|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|    228|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 27, False: 201]
  ------------------
  116|     27|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 27]
  ------------------
  117|     27|  }
  118|    201|  return true;
  119|    201|}
_ZN6google8protobuf8internal17AllAreInitializedINS0_20OneofDescriptorProtoEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|    201|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|    234|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 33, False: 201]
  ------------------
  116|     33|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 33]
  ------------------
  117|     33|  }
  118|    201|  return true;
  119|    201|}
_ZN6google8protobuf8internal17AllAreInitializedINS0_19UninterpretedOptionEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|     36|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|     36|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 0, False: 36]
  ------------------
  116|      0|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 0]
  ------------------
  117|      0|  }
  118|     36|  return true;
  119|     36|}
_ZN6google8protobuf8internal17AllAreInitializedINS0_24EnumValueDescriptorProtoEEEbRKNS0_16RepeatedPtrFieldIT_EE:
  114|     18|bool AllAreInitialized(const RepeatedPtrField<Msg>& t) {
  115|    117|  for (int i = t.size(); --i >= 0;) {
  ------------------
  |  Branch (115:26): [True: 99, False: 18]
  ------------------
  116|     99|    if (!t.Get(i).IsInitialized()) return false;
  ------------------
  |  Branch (116:9): [True: 0, False: 99]
  ------------------
  117|     99|  }
  118|     18|  return true;
  119|     18|}

_ZN6google8protobuf2io16CodedInputStream24GetDefaultRecursionLimitEv:
  400|     15|  static int GetDefaultRecursionLimit() { return default_recursion_limit_; }
_ZN6google8protobuf2io19EpsCopyOutputStreamC2EPvib:
  654|      6|      : end_(static_cast<uint8_t*>(data) + size),
  655|      6|        buffer_end_(nullptr),
  656|      6|        stream_(nullptr),
  657|      6|        is_serialization_deterministic_(deterministic) {}
_ZN6google8protobuf2io17CodedOutputStream35IsDefaultSerializationDeterministicEv:
 1256|      6|  static bool IsDefaultSerializationDeterministic() {
 1257|      6|    return default_serialization_deterministic_.load(
 1258|      6|               std::memory_order_relaxed) != 0;
 1259|      6|  }

_ZN6google8protobuf2io14ErrorCollectorD2Ev:
  214|  17.8k|ErrorCollector::~ErrorCollector() {}
_ZN6google8protobuf2io9TokenizerC2EPNS1_19ZeroCopyInputStreamEPNS1_14ErrorCollectorE:
  220|  17.8k|    : input_(input),
  221|  17.8k|      error_collector_(error_collector),
  222|       |      buffer_(NULL),
  223|  17.8k|      buffer_size_(0),
  224|  17.8k|      buffer_pos_(0),
  225|  17.8k|      read_error_(false),
  226|  17.8k|      line_(0),
  227|  17.8k|      column_(0),
  228|       |      record_target_(NULL),
  229|  17.8k|      record_start_(-1),
  230|  17.8k|      allow_f_after_float_(false),
  231|  17.8k|      comment_style_(CPP_COMMENT_STYLE),
  232|  17.8k|      require_space_after_number_(true),
  233|  17.8k|      allow_multiline_strings_(false) {
  234|  17.8k|  current_.line = 0;
  235|  17.8k|  current_.column = 0;
  236|  17.8k|  current_.end_column = 0;
  237|  17.8k|  current_.type = TYPE_START;
  238|       |
  239|  17.8k|  Refresh();
  240|  17.8k|}
_ZN6google8protobuf2io9TokenizerD2Ev:
  242|  17.8k|Tokenizer::~Tokenizer() {
  243|       |  // If we had any buffer left unread, return it to the underlying stream
  244|       |  // so that someone else can read it.
  245|  17.8k|  if (buffer_size_ > buffer_pos_) {
  ------------------
  |  Branch (245:7): [True: 0, False: 17.8k]
  ------------------
  246|      0|    input_->BackUp(buffer_size_ - buffer_pos_);
  247|      0|  }
  248|  17.8k|}
_ZN6google8protobuf2io9Tokenizer21set_report_whitespaceEb:
  252|  2.46M|void Tokenizer::set_report_whitespace(bool report) {
  253|  2.46M|  report_whitespace_ = report;
  254|  2.46M|  report_newlines_ &= report;
  255|  2.46M|}
_ZN6google8protobuf2io9Tokenizer8NextCharEv:
  268|  29.5M|void Tokenizer::NextChar() {
  269|       |  // Update our line and column counters based on the character being
  270|       |  // consumed.
  271|  29.5M|  if (current_char_ == '\n') {
  ------------------
  |  Branch (271:7): [True: 1.09M, False: 28.4M]
  ------------------
  272|  1.09M|    ++line_;
  273|  1.09M|    column_ = 0;
  274|  28.4M|  } else if (current_char_ == '\t') {
  ------------------
  |  Branch (274:14): [True: 0, False: 28.4M]
  ------------------
  275|      0|    column_ += kTabWidth - column_ % kTabWidth;
  276|  28.4M|  } else {
  277|  28.4M|    ++column_;
  278|  28.4M|  }
  279|       |
  280|       |  // Advance to the next character.
  281|  29.5M|  ++buffer_pos_;
  282|  29.5M|  if (buffer_pos_ < buffer_size_) {
  ------------------
  |  Branch (282:7): [True: 29.5M, False: 17.8k]
  ------------------
  283|  29.5M|    current_char_ = buffer_[buffer_pos_];
  284|  29.5M|  } else {
  285|  17.8k|    Refresh();
  286|  17.8k|  }
  287|  29.5M|}
_ZN6google8protobuf2io9Tokenizer7RefreshEv:
  289|  35.6k|void Tokenizer::Refresh() {
  290|  35.6k|  if (read_error_) {
  ------------------
  |  Branch (290:7): [True: 0, False: 35.6k]
  ------------------
  291|      0|    current_char_ = '\0';
  292|      0|    return;
  293|      0|  }
  294|       |
  295|       |  // If we're in a token, append the rest of the buffer to it.
  296|  35.6k|  if (record_target_ != NULL && record_start_ < buffer_size_) {
  ------------------
  |  Branch (296:7): [True: 17.8k, False: 17.8k]
  |  Branch (296:33): [True: 17.8k, False: 0]
  ------------------
  297|  17.8k|    record_target_->append(buffer_ + record_start_,
  298|  17.8k|                           buffer_size_ - record_start_);
  299|  17.8k|    record_start_ = 0;
  300|  17.8k|  }
  301|       |
  302|  35.6k|  const void* data = NULL;
  303|  35.6k|  buffer_ = NULL;
  304|  35.6k|  buffer_pos_ = 0;
  305|  35.6k|  do {
  306|  35.6k|    if (!input_->Next(&data, &buffer_size_)) {
  ------------------
  |  Branch (306:9): [True: 17.8k, False: 17.8k]
  ------------------
  307|       |      // end of stream (or read error)
  308|  17.8k|      buffer_size_ = 0;
  309|  17.8k|      read_error_ = true;
  310|  17.8k|      current_char_ = '\0';
  311|  17.8k|      return;
  312|  17.8k|    }
  313|  35.6k|  } while (buffer_size_ == 0);
  ------------------
  |  Branch (313:12): [True: 0, False: 17.8k]
  ------------------
  314|       |
  315|  17.8k|  buffer_ = static_cast<const char*>(data);
  316|       |
  317|  17.8k|  current_char_ = buffer_[0];
  318|  17.8k|}
_ZN6google8protobuf2io9Tokenizer13ConsumeStringEc:
  400|  42.1k|void Tokenizer::ConsumeString(char delimiter) {
  401|  6.20M|  while (true) {
  ------------------
  |  Branch (401:10): [Folded - Ignored]
  ------------------
  402|  6.20M|    switch (current_char_) {
  403|      0|      case '\0':
  ------------------
  |  Branch (403:7): [True: 0, False: 6.20M]
  ------------------
  404|      0|        AddError("Unexpected end of string.");
  405|      0|        return;
  406|       |
  407|      0|      case '\n': {
  ------------------
  |  Branch (407:7): [True: 0, False: 6.20M]
  ------------------
  408|      0|        if (!allow_multiline_strings_) {
  ------------------
  |  Branch (408:13): [True: 0, False: 0]
  ------------------
  409|      0|          AddError("String literals cannot cross line boundaries.");
  410|      0|          return;
  411|      0|        }
  412|      0|        NextChar();
  413|      0|        break;
  414|      0|      }
  415|       |
  416|   159k|      case '\\': {
  ------------------
  |  Branch (416:7): [True: 159k, False: 6.04M]
  ------------------
  417|       |        // An escape sequence.
  418|   159k|        NextChar();
  419|   159k|        if (TryConsumeOne<Escape>()) {
  ------------------
  |  Branch (419:13): [True: 85.3k, False: 74.3k]
  ------------------
  420|       |          // Valid escape sequence.
  421|  85.3k|        } else if (TryConsumeOne<OctalDigit>()) {
  ------------------
  |  Branch (421:20): [True: 74.3k, False: 0]
  ------------------
  422|       |          // Possibly followed by two more octal digits, but these will
  423|       |          // just be consumed by the main loop anyway so we don't need
  424|       |          // to do so explicitly here.
  425|  74.3k|        } else if (TryConsume('x')) {
  ------------------
  |  Branch (425:20): [True: 0, False: 0]
  ------------------
  426|      0|          if (!TryConsumeOne<HexDigit>()) {
  ------------------
  |  Branch (426:15): [True: 0, False: 0]
  ------------------
  427|      0|            AddError("Expected hex digits for escape sequence.");
  428|      0|          }
  429|       |          // Possibly followed by another hex digit, but again we don't care.
  430|      0|        } else if (TryConsume('u')) {
  ------------------
  |  Branch (430:20): [True: 0, False: 0]
  ------------------
  431|      0|          if (!TryConsumeOne<HexDigit>() || !TryConsumeOne<HexDigit>() ||
  ------------------
  |  Branch (431:15): [True: 0, False: 0]
  |  Branch (431:45): [True: 0, False: 0]
  ------------------
  432|      0|              !TryConsumeOne<HexDigit>() || !TryConsumeOne<HexDigit>()) {
  ------------------
  |  Branch (432:15): [True: 0, False: 0]
  |  Branch (432:45): [True: 0, False: 0]
  ------------------
  433|      0|            AddError("Expected four hex digits for \\u escape sequence.");
  434|      0|          }
  435|      0|        } else if (TryConsume('U')) {
  ------------------
  |  Branch (435:20): [True: 0, False: 0]
  ------------------
  436|       |          // We expect 8 hex digits; but only the range up to 0x10ffff is
  437|       |          // legal.
  438|      0|          if (!TryConsume('0') || !TryConsume('0') ||
  ------------------
  |  Branch (438:15): [True: 0, False: 0]
  |  Branch (438:35): [True: 0, False: 0]
  ------------------
  439|      0|              !(TryConsume('0') || TryConsume('1')) ||
  ------------------
  |  Branch (439:17): [True: 0, False: 0]
  |  Branch (439:36): [True: 0, False: 0]
  ------------------
  440|      0|              !TryConsumeOne<HexDigit>() || !TryConsumeOne<HexDigit>() ||
  ------------------
  |  Branch (440:15): [True: 0, False: 0]
  |  Branch (440:45): [True: 0, False: 0]
  ------------------
  441|      0|              !TryConsumeOne<HexDigit>() || !TryConsumeOne<HexDigit>() ||
  ------------------
  |  Branch (441:15): [True: 0, False: 0]
  |  Branch (441:45): [True: 0, False: 0]
  ------------------
  442|      0|              !TryConsumeOne<HexDigit>()) {
  ------------------
  |  Branch (442:15): [True: 0, False: 0]
  ------------------
  443|      0|            AddError(
  444|      0|                "Expected eight hex digits up to 10ffff for \\U escape "
  445|      0|                "sequence");
  446|      0|          }
  447|      0|        } else {
  448|      0|          AddError("Invalid escape sequence in string literal.");
  449|      0|        }
  450|   159k|        break;
  451|      0|      }
  452|       |
  453|  6.04M|      default: {
  ------------------
  |  Branch (453:7): [True: 6.04M, False: 159k]
  ------------------
  454|  6.04M|        if (current_char_ == delimiter) {
  ------------------
  |  Branch (454:13): [True: 42.1k, False: 6.00M]
  ------------------
  455|  42.1k|          NextChar();
  456|  42.1k|          return;
  457|  42.1k|        }
  458|  6.00M|        NextChar();
  459|  6.00M|        break;
  460|  6.04M|      }
  461|  6.20M|    }
  462|  6.20M|  }
  463|  42.1k|}
_ZN6google8protobuf2io9Tokenizer13ConsumeNumberEbb:
  466|  98.0k|                                              bool started_with_dot) {
  467|  98.0k|  bool is_float = false;
  468|       |
  469|  98.0k|  if (started_with_zero && (TryConsume('x') || TryConsume('X'))) {
  ------------------
  |  Branch (469:7): [True: 51.1k, False: 46.9k]
  |  Branch (469:29): [True: 0, False: 51.1k]
  |  Branch (469:48): [True: 0, False: 51.1k]
  ------------------
  470|       |    // A hex number (started with "0x").
  471|      0|    ConsumeOneOrMore<HexDigit>("\"0x\" must be followed by hex digits.");
  472|       |
  473|  98.0k|  } else if (started_with_zero && LookingAt<Digit>()) {
  ------------------
  |  Branch (473:14): [True: 51.1k, False: 46.9k]
  |  Branch (473:35): [True: 0, False: 51.1k]
  ------------------
  474|       |    // An octal number (had a leading zero).
  475|      0|    ConsumeZeroOrMore<OctalDigit>();
  476|      0|    if (LookingAt<Digit>()) {
  ------------------
  |  Branch (476:9): [True: 0, False: 0]
  ------------------
  477|      0|      AddError("Numbers starting with leading zero must be in octal.");
  478|      0|      ConsumeZeroOrMore<Digit>();
  479|      0|    }
  480|       |
  481|  98.0k|  } else {
  482|       |    // A decimal number.
  483|  98.0k|    if (started_with_dot) {
  ------------------
  |  Branch (483:9): [True: 0, False: 98.0k]
  ------------------
  484|      0|      is_float = true;
  485|      0|      ConsumeZeroOrMore<Digit>();
  486|  98.0k|    } else {
  487|  98.0k|      ConsumeZeroOrMore<Digit>();
  488|       |
  489|  98.0k|      if (TryConsume('.')) {
  ------------------
  |  Branch (489:11): [True: 0, False: 98.0k]
  ------------------
  490|      0|        is_float = true;
  491|      0|        ConsumeZeroOrMore<Digit>();
  492|      0|      }
  493|  98.0k|    }
  494|       |
  495|  98.0k|    if (TryConsume('e') || TryConsume('E')) {
  ------------------
  |  Branch (495:9): [True: 0, False: 98.0k]
  |  Branch (495:28): [True: 0, False: 98.0k]
  ------------------
  496|      0|      is_float = true;
  497|      0|      TryConsume('-') || TryConsume('+');
  ------------------
  |  Branch (497:7): [True: 0, False: 0]
  |  Branch (497:26): [True: 0, False: 0]
  ------------------
  498|      0|      ConsumeOneOrMore<Digit>("\"e\" must be followed by exponent.");
  499|      0|    }
  500|       |
  501|  98.0k|    if (allow_f_after_float_ && (TryConsume('f') || TryConsume('F'))) {
  ------------------
  |  Branch (501:9): [True: 98.0k, False: 0]
  |  Branch (501:34): [True: 0, False: 98.0k]
  |  Branch (501:53): [True: 0, False: 98.0k]
  ------------------
  502|      0|      is_float = true;
  503|      0|    }
  504|  98.0k|  }
  505|       |
  506|  98.0k|  if (LookingAt<Letter>() && require_space_after_number_) {
  ------------------
  |  Branch (506:7): [True: 0, False: 98.0k]
  |  Branch (506:30): [True: 0, False: 0]
  ------------------
  507|      0|    AddError("Need space between number and identifier.");
  508|  98.0k|  } else if (current_char_ == '.') {
  ------------------
  |  Branch (508:14): [True: 0, False: 98.0k]
  ------------------
  509|      0|    if (is_float) {
  ------------------
  |  Branch (509:9): [True: 0, False: 0]
  ------------------
  510|      0|      AddError(
  511|      0|          "Already saw decimal point or exponent; can't have another one.");
  512|      0|    } else {
  513|      0|      AddError("Hex and octal numbers must be integers.");
  514|      0|    }
  515|      0|  }
  516|       |
  517|  98.0k|  return is_float ? TYPE_FLOAT : TYPE_INTEGER;
  ------------------
  |  Branch (517:10): [True: 0, False: 98.0k]
  ------------------
  518|  98.0k|}
_ZN6google8protobuf2io9Tokenizer22TryConsumeCommentStartEv:
  579|  1.86M|Tokenizer::NextCommentStatus Tokenizer::TryConsumeCommentStart() {
  580|  1.86M|  if (comment_style_ == CPP_COMMENT_STYLE && TryConsume('/')) {
  ------------------
  |  Branch (580:7): [True: 0, False: 1.86M]
  |  Branch (580:46): [True: 0, False: 0]
  ------------------
  581|      0|    if (TryConsume('/')) {
  ------------------
  |  Branch (581:9): [True: 0, False: 0]
  ------------------
  582|      0|      return LINE_COMMENT;
  583|      0|    } else if (TryConsume('*')) {
  ------------------
  |  Branch (583:16): [True: 0, False: 0]
  ------------------
  584|      0|      return BLOCK_COMMENT;
  585|      0|    } else {
  586|       |      // Oops, it was just a slash.  Return it.
  587|      0|      current_.type = TYPE_SYMBOL;
  588|      0|      current_.text = "/";
  589|      0|      current_.line = line_;
  590|      0|      current_.column = column_ - 1;
  591|      0|      current_.end_column = column_;
  592|      0|      return SLASH_NOT_COMMENT;
  593|      0|    }
  594|  1.86M|  } else if (comment_style_ == SH_COMMENT_STYLE && TryConsume('#')) {
  ------------------
  |  Branch (594:14): [True: 1.86M, False: 0]
  |  Branch (594:52): [True: 0, False: 1.86M]
  ------------------
  595|      0|    return LINE_COMMENT;
  596|  1.86M|  } else {
  597|  1.86M|    return NO_COMMENT;
  598|  1.86M|  }
  599|  1.86M|}
_ZN6google8protobuf2io9Tokenizer20TryConsumeWhitespaceEv:
  601|  2.48M|bool Tokenizer::TryConsumeWhitespace() {
  602|  2.48M|  if (report_newlines_) {
  ------------------
  |  Branch (602:7): [True: 0, False: 2.48M]
  ------------------
  603|      0|    if (TryConsumeOne<WhitespaceNoNewline>()) {
  ------------------
  |  Branch (603:9): [True: 0, False: 0]
  ------------------
  604|      0|      ConsumeZeroOrMore<WhitespaceNoNewline>();
  605|      0|      current_.type = TYPE_WHITESPACE;
  606|      0|      return true;
  607|      0|    }
  608|      0|    return false;
  609|      0|  }
  610|  2.48M|  if (TryConsumeOne<Whitespace>()) {
  ------------------
  |  Branch (610:7): [True: 1.70M, False: 774k]
  ------------------
  611|  1.70M|    ConsumeZeroOrMore<Whitespace>();
  612|  1.70M|    current_.type = TYPE_WHITESPACE;
  613|  1.70M|    return report_whitespace_;
  614|  1.70M|  }
  615|   774k|  return false;
  616|  2.48M|}
_ZN6google8protobuf2io9Tokenizer17TryConsumeNewlineEv:
  618|  1.86M|bool Tokenizer::TryConsumeNewline() {
  619|  1.86M|  if (!report_whitespace_ || !report_newlines_) {
  ------------------
  |  Branch (619:7): [True: 1.72M, False: 140k]
  |  Branch (619:30): [True: 140k, False: 0]
  ------------------
  620|  1.86M|    return false;
  621|  1.86M|  }
  622|      0|  if (TryConsume('\n')) {
  ------------------
  |  Branch (622:7): [True: 0, False: 0]
  ------------------
  623|      0|    current_.type = TYPE_NEWLINE;
  624|      0|    return true;
  625|      0|  }
  626|      0|  return false;
  627|      0|}
_ZN6google8protobuf2io9Tokenizer4NextEv:
  631|  2.48M|bool Tokenizer::Next() {
  632|  2.48M|  previous_ = current_;
  633|       |
  634|  2.48M|  while (!read_error_) {
  ------------------
  |  Branch (634:10): [True: 2.48M, False: 0]
  ------------------
  635|  2.48M|    StartToken();
  636|  2.48M|    bool report_token = TryConsumeWhitespace() || TryConsumeNewline();
  ------------------
  |  Branch (636:25): [True: 615k, False: 1.86M]
  |  Branch (636:51): [True: 0, False: 1.86M]
  ------------------
  637|  2.48M|    EndToken();
  638|  2.48M|    if (report_token) {
  ------------------
  |  Branch (638:9): [True: 615k, False: 1.86M]
  ------------------
  639|   615k|      return true;
  640|   615k|    }
  641|       |
  642|  1.86M|    switch (TryConsumeCommentStart()) {
  ------------------
  |  Branch (642:13): [True: 0, False: 1.86M]
  ------------------
  643|      0|      case LINE_COMMENT:
  ------------------
  |  Branch (643:7): [True: 0, False: 1.86M]
  ------------------
  644|      0|        ConsumeLineComment(NULL);
  645|      0|        continue;
  646|      0|      case BLOCK_COMMENT:
  ------------------
  |  Branch (646:7): [True: 0, False: 1.86M]
  ------------------
  647|      0|        ConsumeBlockComment(NULL);
  648|      0|        continue;
  649|      0|      case SLASH_NOT_COMMENT:
  ------------------
  |  Branch (649:7): [True: 0, False: 1.86M]
  ------------------
  650|      0|        return true;
  651|  1.86M|      case NO_COMMENT:
  ------------------
  |  Branch (651:7): [True: 1.86M, False: 0]
  ------------------
  652|  1.86M|        break;
  653|  1.86M|    }
  654|       |
  655|       |    // Check for EOF before continuing.
  656|  1.86M|    if (read_error_) break;
  ------------------
  |  Branch (656:9): [True: 17.8k, False: 1.84M]
  ------------------
  657|       |
  658|  1.84M|    if (LookingAt<Unprintable>() || current_char_ == '\0') {
  ------------------
  |  Branch (658:9): [True: 0, False: 1.84M]
  |  Branch (658:37): [True: 0, False: 1.84M]
  ------------------
  659|      0|      AddError("Invalid control characters encountered in text.");
  660|      0|      NextChar();
  661|       |      // Skip more unprintable characters, too.  But, remember that '\0' is
  662|       |      // also what current_char_ is set to after EOF / read error.  We have
  663|       |      // to be careful not to go into an infinite loop of trying to consume
  664|       |      // it, so make sure to check read_error_ explicitly before consuming
  665|       |      // '\0'.
  666|      0|      while (TryConsumeOne<Unprintable>() ||
  ------------------
  |  Branch (666:14): [True: 0, False: 0]
  ------------------
  667|      0|             (!read_error_ && TryConsume('\0'))) {
  ------------------
  |  Branch (667:15): [True: 0, False: 0]
  |  Branch (667:31): [True: 0, False: 0]
  ------------------
  668|       |        // Ignore.
  669|      0|      }
  670|       |
  671|  1.84M|    } else {
  672|       |      // Reading some sort of token.
  673|  1.84M|      StartToken();
  674|       |
  675|  1.84M|      if (TryConsumeOne<Letter>()) {
  ------------------
  |  Branch (675:11): [True: 615k, False: 1.23M]
  ------------------
  676|   615k|        ConsumeZeroOrMore<Alphanumeric>();
  677|   615k|        current_.type = TYPE_IDENTIFIER;
  678|  1.23M|      } else if (TryConsume('0')) {
  ------------------
  |  Branch (678:18): [True: 51.1k, False: 1.18M]
  ------------------
  679|  51.1k|        current_.type = ConsumeNumber(true, false);
  680|  1.18M|      } else if (TryConsume('.')) {
  ------------------
  |  Branch (680:18): [True: 0, False: 1.18M]
  ------------------
  681|       |        // This could be the beginning of a floating-point number, or it could
  682|       |        // just be a '.' symbol.
  683|       |
  684|      0|        if (TryConsumeOne<Digit>()) {
  ------------------
  |  Branch (684:13): [True: 0, False: 0]
  ------------------
  685|       |          // It's a floating-point number.
  686|      0|          if (previous_.type == TYPE_IDENTIFIER &&
  ------------------
  |  Branch (686:15): [True: 0, False: 0]
  ------------------
  687|      0|              current_.line == previous_.line &&
  ------------------
  |  Branch (687:15): [True: 0, False: 0]
  ------------------
  688|      0|              current_.column == previous_.end_column) {
  ------------------
  |  Branch (688:15): [True: 0, False: 0]
  ------------------
  689|       |            // We don't accept syntax like "blah.123".
  690|      0|            error_collector_->AddError(
  691|      0|                line_, column_ - 2,
  692|      0|                "Need space between identifier and decimal point.");
  693|      0|          }
  694|      0|          current_.type = ConsumeNumber(false, true);
  695|      0|        } else {
  696|      0|          current_.type = TYPE_SYMBOL;
  697|      0|        }
  698|  1.18M|      } else if (TryConsumeOne<Digit>()) {
  ------------------
  |  Branch (698:18): [True: 46.9k, False: 1.13M]
  ------------------
  699|  46.9k|        current_.type = ConsumeNumber(false, false);
  700|  1.13M|      } else if (TryConsume('\"')) {
  ------------------
  |  Branch (700:18): [True: 42.1k, False: 1.09M]
  ------------------
  701|  42.1k|        ConsumeString('\"');
  702|  42.1k|        current_.type = TYPE_STRING;
  703|  1.09M|      } else if (TryConsume('\'')) {
  ------------------
  |  Branch (703:18): [True: 0, False: 1.09M]
  ------------------
  704|      0|        ConsumeString('\'');
  705|      0|        current_.type = TYPE_STRING;
  706|  1.09M|      } else {
  707|       |        // Check if the high order bit is set.
  708|  1.09M|        if (current_char_ & 0x80) {
  ------------------
  |  Branch (708:13): [True: 0, False: 1.09M]
  ------------------
  709|      0|          error_collector_->AddError(
  710|      0|              line_, column_,
  711|      0|              StringPrintf("Interpreting non ascii codepoint %d.",
  712|      0|                              static_cast<unsigned char>(current_char_)));
  713|      0|        }
  714|  1.09M|        NextChar();
  715|  1.09M|        current_.type = TYPE_SYMBOL;
  716|  1.09M|      }
  717|       |
  718|  1.84M|      EndToken();
  719|  1.84M|      return true;
  720|  1.84M|    }
  721|  1.84M|  }
  722|       |
  723|       |  // EOF
  724|  17.8k|  current_.type = TYPE_END;
  725|  17.8k|  current_.text.clear();
  726|  17.8k|  current_.line = line_;
  727|  17.8k|  current_.column = column_;
  728|  17.8k|  current_.end_column = column_;
  729|  17.8k|  return false;
  730|  2.48M|}
_ZN6google8protobuf2io9Tokenizer12ParseIntegerERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEmPm:
  936|  98.0k|                             uint64_t* output) {
  937|       |  // We can't just use strtoull() because (a) it accepts negative numbers,
  938|       |  // (b) We want additional range checks, (c) it reports overflows via errno.
  939|       |
  940|       |#if 0
  941|       |  const char *str_begin = text.c_str();
  942|       |  if (*str_begin == '-') return false;
  943|       |  char *str_end = nullptr;
  944|       |  errno = 0;
  945|       |  *output = std::strtoull(str_begin, &str_end, 0);
  946|       |  return (errno == 0 && str_end && *str_end == '\0' && *output <= max_value);
  947|       |#endif
  948|       |
  949|  98.0k|  const char* ptr = text.c_str();
  950|  98.0k|  int base = 10;
  951|  98.0k|  uint64_t overflow_if_mul_base = (kuint64max / 10) + 1;
  952|  98.0k|  if (ptr[0] == '0') {
  ------------------
  |  Branch (952:7): [True: 51.1k, False: 46.9k]
  ------------------
  953|  51.1k|    if (ptr[1] == 'x' || ptr[1] == 'X') {
  ------------------
  |  Branch (953:9): [True: 0, False: 51.1k]
  |  Branch (953:26): [True: 0, False: 51.1k]
  ------------------
  954|       |      // This is hex.
  955|      0|      base = 16;
  956|      0|      overflow_if_mul_base = (kuint64max / 16) + 1;
  957|      0|      ptr += 2;
  958|  51.1k|    } else {
  959|       |      // This is octal.
  960|  51.1k|      base = 8;
  961|  51.1k|      overflow_if_mul_base = (kuint64max / 8) + 1;
  962|  51.1k|    }
  963|  51.1k|  }
  964|       |
  965|  98.0k|  uint64_t result = 0;
  966|       |  // For all the leading '0's, and also the first non-zero character, we
  967|       |  // don't need to multiply.
  968|   149k|  while (*ptr != '\0') {
  ------------------
  |  Branch (968:10): [True: 98.0k, False: 51.1k]
  ------------------
  969|  98.0k|    int digit = DigitValue(*ptr++);
  970|  98.0k|    if (digit >= base) {
  ------------------
  |  Branch (970:9): [True: 0, False: 98.0k]
  ------------------
  971|       |      // The token provided by Tokenizer is invalid. i.e., 099 is an invalid
  972|       |      // token, but Tokenizer still think it's integer.
  973|      0|      return false;
  974|      0|    }
  975|  98.0k|    if (digit != 0) {
  ------------------
  |  Branch (975:9): [True: 46.9k, False: 51.1k]
  ------------------
  976|  46.9k|      result = digit;
  977|  46.9k|      break;
  978|  46.9k|    }
  979|  98.0k|  }
  980|   147k|  for (; *ptr != '\0'; ptr++) {
  ------------------
  |  Branch (980:10): [True: 49.3k, False: 98.0k]
  ------------------
  981|  49.3k|    int digit = DigitValue(*ptr);
  982|  49.3k|    if (digit < 0 || digit >= base) {
  ------------------
  |  Branch (982:9): [True: 0, False: 49.3k]
  |  Branch (982:22): [True: 0, False: 49.3k]
  ------------------
  983|       |      // The token provided by Tokenizer is invalid. i.e., 099 is an invalid
  984|       |      // token, but Tokenizer still think it's integer.
  985|      0|      return false;
  986|      0|    }
  987|  49.3k|    if (result >= overflow_if_mul_base) {
  ------------------
  |  Branch (987:9): [True: 0, False: 49.3k]
  ------------------
  988|       |      // We know the multiply we're about to do will overflow, so exit now.
  989|      0|      return false;
  990|      0|    }
  991|       |    // We know that result * base won't overflow, but adding digit might...
  992|  49.3k|    result = result * base + digit;
  993|       |    // C++ guarantees defined "wrap" semantics when unsigned integer
  994|       |    // operations overflow, making this a fast way to check if adding
  995|       |    // digit made result overflow, and thus, wrap around.
  996|  49.3k|    if (result < static_cast<uint64_t>(base)) return false;
  ------------------
  |  Branch (996:9): [True: 0, False: 49.3k]
  ------------------
  997|  49.3k|  }
  998|  98.0k|  if (result > max_value) return false;
  ------------------
  |  Branch (998:7): [True: 0, False: 98.0k]
  ------------------
  999|       |
 1000|  98.0k|  *output = result;
 1001|  98.0k|  return true;
 1002|  98.0k|}
_ZN6google8protobuf2io9Tokenizer17ParseStringAppendERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPS9_:
 1141|  42.1k|                                  std::string* output) {
 1142|       |  // Reminder: text[0] is always a quote character.  (If text is
 1143|       |  // empty, it's invalid, so we'll just return).
 1144|  42.1k|  const size_t text_size = text.size();
 1145|  42.1k|  if (text_size == 0) {
  ------------------
  |  Branch (1145:7): [True: 0, False: 42.1k]
  ------------------
 1146|      0|    GOOGLE_LOG(DFATAL) << " Tokenizer::ParseStringAppend() passed text that could not"
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
 1147|      0|                   " have been tokenized as a string: "
 1148|      0|                << CEscape(text);
 1149|      0|    return;
 1150|      0|  }
 1151|       |
 1152|       |  // Reserve room for new string. The branch is necessary because if
 1153|       |  // there is already space available the reserve() call might
 1154|       |  // downsize the output.
 1155|  42.1k|  const size_t new_len = text_size + output->size();
 1156|  42.1k|  if (new_len > output->capacity()) {
  ------------------
  |  Branch (1156:7): [True: 20.3k, False: 21.7k]
  ------------------
 1157|  20.3k|    output->reserve(new_len);
 1158|  20.3k|  }
 1159|       |
 1160|       |  // Loop through the string copying characters to "output" and
 1161|       |  // interpreting escape sequences.  Note that any invalid escape
 1162|       |  // sequences or other errors were already reported while tokenizing.
 1163|       |  // In this case we do not need to produce valid results.
 1164|  6.09M|  for (const char* ptr = text.c_str() + 1; *ptr != '\0'; ptr++) {
  ------------------
  |  Branch (1164:44): [True: 6.05M, False: 42.1k]
  ------------------
 1165|  6.05M|    if (*ptr == '\\' && ptr[1] != '\0') {
  ------------------
  |  Branch (1165:9): [True: 159k, False: 5.89M]
  |  Branch (1165:25): [True: 159k, False: 0]
  ------------------
 1166|       |      // An escape sequence.
 1167|   159k|      ++ptr;
 1168|       |
 1169|   159k|      if (OctalDigit::InClass(*ptr)) {
  ------------------
  |  Branch (1169:11): [True: 74.3k, False: 85.3k]
  ------------------
 1170|       |        // An octal escape.  May one, two, or three digits.
 1171|  74.3k|        int code = DigitValue(*ptr);
 1172|  74.3k|        if (OctalDigit::InClass(ptr[1])) {
  ------------------
  |  Branch (1172:13): [True: 74.3k, False: 0]
  ------------------
 1173|  74.3k|          ++ptr;
 1174|  74.3k|          code = code * 8 + DigitValue(*ptr);
 1175|  74.3k|        }
 1176|  74.3k|        if (OctalDigit::InClass(ptr[1])) {
  ------------------
  |  Branch (1176:13): [True: 74.3k, False: 0]
  ------------------
 1177|  74.3k|          ++ptr;
 1178|  74.3k|          code = code * 8 + DigitValue(*ptr);
 1179|  74.3k|        }
 1180|  74.3k|        output->push_back(static_cast<char>(code));
 1181|       |
 1182|  85.3k|      } else if (*ptr == 'x') {
  ------------------
  |  Branch (1182:18): [True: 0, False: 85.3k]
  ------------------
 1183|       |        // A hex escape.  May zero, one, or two digits.  (The zero case
 1184|       |        // will have been caught as an error earlier.)
 1185|      0|        int code = 0;
 1186|      0|        if (HexDigit::InClass(ptr[1])) {
  ------------------
  |  Branch (1186:13): [True: 0, False: 0]
  ------------------
 1187|      0|          ++ptr;
 1188|      0|          code = DigitValue(*ptr);
 1189|      0|        }
 1190|      0|        if (HexDigit::InClass(ptr[1])) {
  ------------------
  |  Branch (1190:13): [True: 0, False: 0]
  ------------------
 1191|      0|          ++ptr;
 1192|      0|          code = code * 16 + DigitValue(*ptr);
 1193|      0|        }
 1194|      0|        output->push_back(static_cast<char>(code));
 1195|       |
 1196|  85.3k|      } else if (*ptr == 'u' || *ptr == 'U') {
  ------------------
  |  Branch (1196:18): [True: 0, False: 85.3k]
  |  Branch (1196:33): [True: 0, False: 85.3k]
  ------------------
 1197|      0|        uint32_t unicode;
 1198|      0|        const char* end = FetchUnicodePoint(ptr, &unicode);
 1199|      0|        if (end == ptr) {
  ------------------
  |  Branch (1199:13): [True: 0, False: 0]
  ------------------
 1200|       |          // Failure: Just dump out what we saw, don't try to parse it.
 1201|      0|          output->push_back(*ptr);
 1202|      0|        } else {
 1203|      0|          AppendUTF8(unicode, output);
 1204|      0|          ptr = end - 1;  // Because we're about to ++ptr.
 1205|      0|        }
 1206|  85.3k|      } else {
 1207|       |        // Some other escape code.
 1208|  85.3k|        output->push_back(TranslateEscape(*ptr));
 1209|  85.3k|      }
 1210|       |
 1211|  5.89M|    } else if (*ptr == text[0] && ptr[1] == '\0') {
  ------------------
  |  Branch (1211:16): [True: 42.1k, False: 5.85M]
  |  Branch (1211:35): [True: 42.1k, False: 0]
  ------------------
 1212|       |      // Ignore final quote matching the starting quote.
 1213|  5.85M|    } else {
 1214|  5.85M|      output->push_back(*ptr);
 1215|  5.85M|    }
 1216|  6.05M|  }
 1217|  42.1k|}
_ZN6google8protobuf2io9Tokenizer12IsIdentifierERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE:
 1227|      4|bool Tokenizer::IsIdentifier(const std::string& text) {
 1228|       |  // Mirrors IDENTIFIER definition in Tokenizer::Next() above.
 1229|      4|  if (text.size() == 0) return false;
  ------------------
  |  Branch (1229:7): [True: 0, False: 4]
  ------------------
 1230|      4|  if (!Letter::InClass(text.at(0))) return false;
  ------------------
  |  Branch (1230:7): [True: 0, False: 4]
  ------------------
 1231|      4|  if (!AllInClass<Alphanumeric>(text.substr(1))) return false;
  ------------------
  |  Branch (1231:7): [True: 0, False: 4]
  ------------------
 1232|      4|  return true;
 1233|      4|}
_ZN6google8protobuf2io9Tokenizer10TryConsumeEc:
  369|  7.09M|inline bool Tokenizer::TryConsume(char c) {
  370|  7.09M|  if (current_char_ == c) {
  ------------------
  |  Branch (370:7): [True: 93.2k, False: 7.00M]
  ------------------
  371|  93.2k|    NextChar();
  372|  93.2k|    return true;
  373|  7.00M|  } else {
  374|  7.00M|    return false;
  375|  7.00M|  }
  376|  7.09M|}
_ZN6google8protobuf2io9Tokenizer8RecordToEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE:
  320|  4.32M|inline void Tokenizer::RecordTo(std::string* target) {
  321|  4.32M|  record_target_ = target;
  322|  4.32M|  record_start_ = buffer_pos_;
  323|  4.32M|}
_ZN6google8protobuf2io9Tokenizer13StopRecordingEv:
  325|  4.32M|inline void Tokenizer::StopRecording() {
  326|       |  // Note:  The if() is necessary because some STL implementations crash when
  327|       |  //   you call string::append(NULL, 0), presumably because they are trying to
  328|       |  //   be helpful by detecting the NULL pointer, even though there's nothing
  329|       |  //   wrong with reading zero bytes from NULL.
  330|  4.32M|  if (buffer_pos_ != record_start_) {
  ------------------
  |  Branch (330:7): [True: 3.53M, False: 791k]
  ------------------
  331|  3.53M|    record_target_->append(buffer_ + record_start_,
  332|  3.53M|                           buffer_pos_ - record_start_);
  333|  3.53M|  }
  334|  4.32M|  record_target_ = NULL;
  335|  4.32M|  record_start_ = -1;
  336|  4.32M|}
_ZN6google8protobuf2io9Tokenizer10StartTokenEv:
  338|  4.32M|inline void Tokenizer::StartToken() {
  339|  4.32M|  current_.type = TYPE_START;  // Just for the sake of initializing it.
  340|  4.32M|  current_.text.clear();
  341|  4.32M|  current_.line = line_;
  342|  4.32M|  current_.column = column_;
  343|  4.32M|  RecordTo(&current_.text);
  344|  4.32M|}
_ZN6google8protobuf2io9Tokenizer8EndTokenEv:
  346|  4.32M|inline void Tokenizer::EndToken() {
  347|  4.32M|  StopRecording();
  348|  4.32M|  current_.end_column = column_;
  349|  4.32M|}
tokenizer.cc:_ZN6google8protobuf2io12_GLOBAL__N_110DigitValueEc:
  178|   370k|inline int DigitValue(char digit) { return kAsciiToInt[digit & 0xFF]; }
tokenizer.cc:_ZN6google8protobuf2io12_GLOBAL__N_110OctalDigit7InClassEc:
  123|   753k|    static inline bool InClass(char c) { return EXPRESSION; } \
  ------------------
  |  Branch (123:49): [True: 370k, False: 12.5k]
  |  Branch (123:49): [True: 297k, False: 72.8k]
  ------------------
tokenizer.cc:_ZN6google8protobuf2io12_GLOBAL__N_115TranslateEscapeEc:
  181|  85.3k|inline char TranslateEscape(char c) {
  182|  85.3k|  switch (c) {
  183|      0|    case 'a':
  ------------------
  |  Branch (183:5): [True: 0, False: 85.3k]
  ------------------
  184|      0|      return '\a';
  185|      0|    case 'b':
  ------------------
  |  Branch (185:5): [True: 0, False: 85.3k]
  ------------------
  186|      0|      return '\b';
  187|      0|    case 'f':
  ------------------
  |  Branch (187:5): [True: 0, False: 85.3k]
  ------------------
  188|      0|      return '\f';
  189|  55.0k|    case 'n':
  ------------------
  |  Branch (189:5): [True: 55.0k, False: 30.3k]
  ------------------
  190|  55.0k|      return '\n';
  191|  9.08k|    case 'r':
  ------------------
  |  Branch (191:5): [True: 9.08k, False: 76.2k]
  ------------------
  192|  9.08k|      return '\r';
  193|    438|    case 't':
  ------------------
  |  Branch (193:5): [True: 438, False: 84.9k]
  ------------------
  194|    438|      return '\t';
  195|      0|    case 'v':
  ------------------
  |  Branch (195:5): [True: 0, False: 85.3k]
  ------------------
  196|      0|      return '\v';
  197|  8.31k|    case '\\':
  ------------------
  |  Branch (197:5): [True: 8.31k, False: 77.0k]
  ------------------
  198|  8.31k|      return '\\';
  199|      0|    case '?':
  ------------------
  |  Branch (199:5): [True: 0, False: 85.3k]
  ------------------
  200|      0|      return '\?';  // Trigraphs = :(
  201|  1.55k|    case '\'':
  ------------------
  |  Branch (201:5): [True: 1.55k, False: 83.8k]
  ------------------
  202|  1.55k|      return '\'';
  203|  10.9k|    case '"':
  ------------------
  |  Branch (203:5): [True: 10.9k, False: 74.4k]
  ------------------
  204|  10.9k|      return '\"';
  205|       |
  206|       |    // We expect escape sequences to have been validated separately.
  207|      0|    default:
  ------------------
  |  Branch (207:5): [True: 0, False: 85.3k]
  ------------------
  208|      0|      return '?';
  209|  85.3k|  }
  210|  85.3k|}
tokenizer.cc:_ZN6google8protobuf2io12_GLOBAL__N_16Letter7InClassEc:
  123|  12.3M|    static inline bool InClass(char c) { return EXPRESSION; } \
  ------------------
  |  Branch (123:49): [True: 1.56M, False: 378k]
  |  Branch (123:49): [True: 615k, False: 950k]
  |  Branch (123:49): [True: 950k, False: 378k]
  |  Branch (123:49): [True: 4, False: 950k]
  |  Branch (123:49): [True: 0, False: 1.32M]
  ------------------
tokenizer.cc:_ZN6google8protobuf2io9Tokenizer13TryConsumeOneINS1_12_GLOBAL__N_16EscapeEEEbv:
  360|   159k|inline bool Tokenizer::TryConsumeOne() {
  361|   159k|  if (CharacterClass::InClass(current_char_)) {
  ------------------
  |  Branch (361:7): [True: 85.3k, False: 74.3k]
  ------------------
  362|  85.3k|    NextChar();
  363|  85.3k|    return true;
  364|  85.3k|  } else {
  365|  74.3k|    return false;
  366|  74.3k|  }
  367|   159k|}
tokenizer.cc:_ZN6google8protobuf2io12_GLOBAL__N_16Escape7InClassEc:
  123|  2.72M|    static inline bool InClass(char c) { return EXPRESSION; } \
  ------------------
  |  Branch (123:49): [True: 0, False: 159k]
  |  Branch (123:49): [True: 0, False: 159k]
  |  Branch (123:49): [True: 0, False: 159k]
  |  Branch (123:49): [True: 55.0k, False: 104k]
  |  Branch (123:49): [True: 9.08k, False: 95.6k]
  |  Branch (123:49): [True: 438, False: 95.1k]
  |  Branch (123:49): [True: 0, False: 95.1k]
  |  Branch (123:49): [True: 8.31k, False: 86.8k]
  |  Branch (123:49): [True: 0, False: 86.8k]
  |  Branch (123:49): [True: 1.55k, False: 85.3k]
  |  Branch (123:49): [True: 10.9k, False: 74.3k]
  ------------------
tokenizer.cc:_ZN6google8protobuf2io9Tokenizer13TryConsumeOneINS1_12_GLOBAL__N_110OctalDigitEEEbv:
  360|  74.3k|inline bool Tokenizer::TryConsumeOne() {
  361|  74.3k|  if (CharacterClass::InClass(current_char_)) {
  ------------------
  |  Branch (361:7): [True: 74.3k, False: 0]
  ------------------
  362|  74.3k|    NextChar();
  363|  74.3k|    return true;
  364|  74.3k|  } else {
  365|      0|    return false;
  366|      0|  }
  367|  74.3k|}
tokenizer.cc:_ZN6google8protobuf2io9Tokenizer9LookingAtINS1_12_GLOBAL__N_15DigitEEEbv:
  355|  51.1k|inline bool Tokenizer::LookingAt() {
  356|  51.1k|  return CharacterClass::InClass(current_char_);
  357|  51.1k|}
tokenizer.cc:_ZN6google8protobuf2io12_GLOBAL__N_15Digit7InClassEc:
  123|  2.56M|    static inline bool InClass(char c) { return EXPRESSION; } \
  ------------------
  |  Branch (123:49): [True: 1.18M, False: 191k]
  |  Branch (123:49): [True: 96.3k, False: 1.09M]
  ------------------
tokenizer.cc:_ZN6google8protobuf2io9Tokenizer17ConsumeZeroOrMoreINS1_12_GLOBAL__N_15DigitEEEvv:
  379|  98.0k|inline void Tokenizer::ConsumeZeroOrMore() {
  380|   147k|  while (CharacterClass::InClass(current_char_)) {
  ------------------
  |  Branch (380:10): [True: 49.3k, False: 98.0k]
  ------------------
  381|  49.3k|    NextChar();
  382|  49.3k|  }
  383|  98.0k|}
tokenizer.cc:_ZN6google8protobuf2io9Tokenizer9LookingAtINS1_12_GLOBAL__N_16LetterEEEbv:
  355|  98.0k|inline bool Tokenizer::LookingAt() {
  356|  98.0k|  return CharacterClass::InClass(current_char_);
  357|  98.0k|}
tokenizer.cc:_ZN6google8protobuf2io9Tokenizer13TryConsumeOneINS1_12_GLOBAL__N_110WhitespaceEEEbv:
  360|  2.48M|inline bool Tokenizer::TryConsumeOne() {
  361|  2.48M|  if (CharacterClass::InClass(current_char_)) {
  ------------------
  |  Branch (361:7): [True: 1.70M, False: 774k]
  ------------------
  362|  1.70M|    NextChar();
  363|  1.70M|    return true;
  364|  1.70M|  } else {
  365|   774k|    return false;
  366|   774k|  }
  367|  2.48M|}
tokenizer.cc:_ZN6google8protobuf2io12_GLOBAL__N_110Whitespace7InClassEc:
  123|  87.0M|    static inline bool InClass(char c) { return EXPRESSION; } \
  ------------------
  |  Branch (123:49): [True: 11.1M, False: 3.57M]
  |  Branch (123:49): [True: 1.09M, False: 2.48M]
  |  Branch (123:49): [True: 0, False: 2.48M]
  |  Branch (123:49): [True: 0, False: 2.48M]
  |  Branch (123:49): [True: 0, False: 2.48M]
  |  Branch (123:49): [True: 0, False: 2.48M]
  ------------------
tokenizer.cc:_ZN6google8protobuf2io9Tokenizer17ConsumeZeroOrMoreINS1_12_GLOBAL__N_110WhitespaceEEEvv:
  379|  1.70M|inline void Tokenizer::ConsumeZeroOrMore() {
  380|  12.2M|  while (CharacterClass::InClass(current_char_)) {
  ------------------
  |  Branch (380:10): [True: 10.5M, False: 1.70M]
  ------------------
  381|  10.5M|    NextChar();
  382|  10.5M|  }
  383|  1.70M|}
tokenizer.cc:_ZN6google8protobuf2io9Tokenizer9LookingAtINS1_12_GLOBAL__N_111UnprintableEEEbv:
  355|  1.84M|inline bool Tokenizer::LookingAt() {
  356|  1.84M|  return CharacterClass::InClass(current_char_);
  357|  1.84M|}
tokenizer.cc:_ZN6google8protobuf2io12_GLOBAL__N_111Unprintable7InClassEc:
  123|  1.84M|    static inline bool InClass(char c) { return EXPRESSION; } \
  ------------------
  |  Branch (123:49): [True: 0, False: 1.84M]
  |  Branch (123:49): [True: 0, False: 0]
  ------------------
tokenizer.cc:_ZN6google8protobuf2io9Tokenizer13TryConsumeOneINS1_12_GLOBAL__N_16LetterEEEbv:
  360|  1.84M|inline bool Tokenizer::TryConsumeOne() {
  361|  1.84M|  if (CharacterClass::InClass(current_char_)) {
  ------------------
  |  Branch (361:7): [True: 615k, False: 1.23M]
  ------------------
  362|   615k|    NextChar();
  363|   615k|    return true;
  364|  1.23M|  } else {
  365|  1.23M|    return false;
  366|  1.23M|  }
  367|  1.84M|}
tokenizer.cc:_ZN6google8protobuf2io9Tokenizer17ConsumeZeroOrMoreINS1_12_GLOBAL__N_112AlphanumericEEEvv:
  379|   615k|inline void Tokenizer::ConsumeZeroOrMore() {
  380|  9.66M|  while (CharacterClass::InClass(current_char_)) {
  ------------------
  |  Branch (380:10): [True: 9.04M, False: 615k]
  ------------------
  381|  9.04M|    NextChar();
  382|  9.04M|  }
  383|   615k|}
tokenizer.cc:_ZN6google8protobuf2io12_GLOBAL__N_112Alphanumeric7InClassEc:
  123|  55.1M|    static inline bool InClass(char c) { return EXPRESSION; } \
  ------------------
  |  Branch (123:49): [True: 8.33M, False: 1.32M]
  |  Branch (123:49): [True: 8.33M, False: 0]
  |  Branch (123:49): [True: 680k, False: 645k]
  |  Branch (123:49): [True: 1.27k, False: 679k]
  |  Branch (123:49): [True: 849k, False: 475k]
  |  Branch (123:49): [True: 29.8k, False: 819k]
  |  Branch (123:49): [True: 679k, False: 615k]
  ------------------
tokenizer.cc:_ZN6google8protobuf2io9Tokenizer13TryConsumeOneINS1_12_GLOBAL__N_15DigitEEEbv:
  360|  1.18M|inline bool Tokenizer::TryConsumeOne() {
  361|  1.18M|  if (CharacterClass::InClass(current_char_)) {
  ------------------
  |  Branch (361:7): [True: 46.9k, False: 1.13M]
  ------------------
  362|  46.9k|    NextChar();
  363|  46.9k|    return true;
  364|  1.13M|  } else {
  365|  1.13M|    return false;
  366|  1.13M|  }
  367|  1.18M|}
tokenizer.cc:_ZN6google8protobuf2ioL10AllInClassINS1_12_GLOBAL__N_112AlphanumericEEEbRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE:
 1220|      4|static bool AllInClass(const std::string& s) {
 1221|     35|  for (const char character : s) {
  ------------------
  |  Branch (1221:29): [True: 35, False: 4]
  ------------------
 1222|     35|    if (!CharacterClass::InClass(character)) return false;
  ------------------
  |  Branch (1222:9): [True: 0, False: 35]
  ------------------
 1223|     35|  }
 1224|      4|  return true;
 1225|      4|}

_ZN6google8protobuf2io14ErrorCollectorC2Ev:
   71|  17.8k|  inline ErrorCollector() {}
_ZN6google8protobuf2io9Tokenizer23set_allow_f_after_floatEb:
  238|  17.8k|  void set_allow_f_after_float(bool value) { allow_f_after_float_ = value; }
_ZN6google8protobuf2io9Tokenizer17set_comment_styleENS2_12CommentStyleE:
  250|  17.8k|  void set_comment_style(CommentStyle style) { comment_style_ = style; }
_ZN6google8protobuf2io9Tokenizer7currentEv:
  426|  10.4M|inline const Tokenizer::Token& Tokenizer::current() { return current_; }

_ZN6google8protobuf2io19ZeroCopyInputStreamC2Ev:
  129|  17.8k|  ZeroCopyInputStream() {}
_ZN6google8protobuf2io19ZeroCopyInputStreamD2Ev:
  130|  17.8k|  virtual ~ZeroCopyInputStream() {}

_ZN6google8protobuf2io16ArrayInputStreamC2EPKvii:
   59|  17.8k|    : data_(reinterpret_cast<const uint8_t*>(data)),
   60|  17.8k|      size_(size),
   61|  17.8k|      block_size_(block_size > 0 ? block_size : size),
  ------------------
  |  Branch (61:19): [True: 0, False: 17.8k]
  ------------------
   62|  17.8k|      position_(0),
   63|  17.8k|      last_returned_size_(0) {}
_ZN6google8protobuf2io16ArrayInputStream4NextEPPKvPi:
   65|  35.6k|bool ArrayInputStream::Next(const void** data, int* size) {
   66|  35.6k|  if (position_ < size_) {
  ------------------
  |  Branch (66:7): [True: 17.8k, False: 17.8k]
  ------------------
   67|  17.8k|    last_returned_size_ = std::min(block_size_, size_ - position_);
   68|  17.8k|    *data = data_ + position_;
   69|  17.8k|    *size = last_returned_size_;
   70|  17.8k|    position_ += last_returned_size_;
   71|  17.8k|    return true;
   72|  17.8k|  } else {
   73|       |    // We're at the end of the array.
   74|  17.8k|    last_returned_size_ = 0;  // Don't let caller back up.
   75|  17.8k|    return false;
   76|  17.8k|  }
   77|  35.6k|}

_ZN6google8protobuf2io19mutable_string_dataEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  392|      6|inline char* mutable_string_data(std::string* s) {
  393|       |  // This should be simpler & faster than string_as_array() because the latter
  394|       |  // is guaranteed to return NULL when *s is empty, so it has to check for that.
  395|      6|  return &(*s)[0];
  396|      6|}

_ZNK6google8protobuf7Message29MaybeComputeUnknownFieldsSizeEmPNS0_8internal10CachedSizeE:
  200|      6|    size_t total_size, internal::CachedSize* cached_size) const {
  201|      6|  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
  ------------------
  |  |  490|      6|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 6]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 6]
  |  |  ------------------
  ------------------
  202|      0|    return ComputeUnknownFieldsSize(total_size, cached_size);
  203|      0|  }
  204|      6|  cached_size->Set(internal::ToCachedSize(total_size));
  205|      6|  return total_size;
  206|      6|}
_ZN6google8protobuf14MessageFactoryD2Ev:
  219|      3|MessageFactory::~MessageFactory() {}
_ZN6google8protobuf14MessageFactory17generated_factoryEv:
  320|   276k|MessageFactory* MessageFactory::generated_factory() {
  321|   276k|  return GeneratedMessageFactory::singleton();
  322|   276k|}
_ZN6google8protobuf14MessageFactory29InternalRegisterGeneratedFileEPKNS0_8internal15DescriptorTableE:
  325|      6|    const google::protobuf::internal::DescriptorTable* table) {
  326|      6|  GeneratedMessageFactory::singleton()->RegisterFile(table);
  327|      6|}
_ZN6google8protobuf14MessageFactory32InternalRegisterGeneratedMessageEPKNS0_10DescriptorEPKNS0_7MessageE:
  330|     39|    const Descriptor* descriptor, const Message* prototype) {
  331|     39|  GeneratedMessageFactory::singleton()->RegisterType(descriptor, prototype);
  332|     39|}
message.cc:_ZN6google8protobuf12_GLOBAL__N_123GeneratedMessageFactory9singletonEv:
  249|   276k|GeneratedMessageFactory* GeneratedMessageFactory::singleton() {
  250|   276k|  static auto instance =
  251|   276k|      internal::OnShutdownDelete(new GeneratedMessageFactory);
  252|   276k|  return instance;
  253|   276k|}
message.cc:_ZN6google8protobuf12_GLOBAL__N_123GeneratedMessageFactory12GetPrototypeEPKNS0_10DescriptorE:
  278|   107k|const Message* GeneratedMessageFactory::GetPrototype(const Descriptor* type) {
  279|   107k|  {
  280|   107k|    ReaderMutexLock lock(&mutex_);
  281|   107k|    const Message* result = FindPtrOrNull(type_map_, type);
  282|   107k|    if (result != nullptr) return result;
  ------------------
  |  Branch (282:9): [True: 107k, False: 1]
  ------------------
  283|   107k|  }
  284|       |
  285|       |  // If the type is not in the generated pool, then we can't possibly handle
  286|       |  // it.
  287|      1|  if (type->file()->pool() != DescriptorPool::generated_pool()) return nullptr;
  ------------------
  |  Branch (287:7): [True: 0, False: 1]
  ------------------
  288|       |
  289|       |  // Apparently the file hasn't been registered yet.  Let's do that now.
  290|      1|  const internal::DescriptorTable* registration_data =
  291|      1|      FindPtrOrNull(file_map_, type->file()->name().c_str());
  292|      1|  if (registration_data == nullptr) {
  ------------------
  |  Branch (292:7): [True: 0, False: 1]
  ------------------
  293|      0|    GOOGLE_LOG(DFATAL) << "File appears to be in generated pool but wasn't "
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  294|      0|                   "registered: "
  295|      0|                << type->file()->name();
  296|      0|    return nullptr;
  297|      0|  }
  298|       |
  299|      1|  WriterMutexLock lock(&mutex_);
  300|       |
  301|       |  // Check if another thread preempted us.
  302|      1|  const Message* result = FindPtrOrNull(type_map_, type);
  303|      1|  if (result == nullptr) {
  ------------------
  |  Branch (303:7): [True: 1, False: 0]
  ------------------
  304|       |    // Nope.  OK, register everything.
  305|      1|    internal::RegisterFileLevelMetadata(registration_data);
  306|       |    // Should be here now.
  307|      1|    result = FindPtrOrNull(type_map_, type);
  308|      1|  }
  309|       |
  310|      1|  if (result == nullptr) {
  ------------------
  |  Branch (310:7): [True: 0, False: 1]
  ------------------
  311|      0|    GOOGLE_LOG(DFATAL) << "Type appears to be in generated pool but wasn't "
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  312|      0|                << "registered: " << type->full_name();
  313|      0|  }
  314|       |
  315|      1|  return result;
  316|      1|}
message.cc:_ZN6google8protobuf12_GLOBAL__N_123GeneratedMessageFactory12RegisterFileEPKNS0_8internal15DescriptorTableE:
  256|      6|    const google::protobuf::internal::DescriptorTable* table) {
  257|      6|  if (!InsertIfNotPresent(&file_map_, table->filename, table)) {
  ------------------
  |  Branch (257:7): [True: 0, False: 6]
  ------------------
  258|      0|    GOOGLE_LOG(FATAL) << "File is already registered: " << table->filename;
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  259|      0|  }
  260|      6|}
message.cc:_ZN6google8protobuf12_GLOBAL__N_123GeneratedMessageFactory12RegisterTypeEPKNS0_10DescriptorEPKNS0_7MessageE:
  263|     39|                                           const Message* prototype) {
  264|     39|  GOOGLE_DCHECK_EQ(descriptor->file()->pool(), DescriptorPool::generated_pool())
  ------------------
  |  |  194|      0|#define GOOGLE_DCHECK_EQ GOOGLE_CHECK_EQ
  |  |  ------------------
  |  |  |  |  154|      0|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     39|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     39|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 39, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  265|      0|      << "Tried to register a non-generated type with the generated "
  266|      0|         "type registry.";
  267|       |
  268|       |  // This should only be called as a result of calling a file registration
  269|       |  // function during GetPrototype(), in which case we already have locked
  270|       |  // the mutex.
  271|     39|  mutex_.AssertHeld();
  272|     39|  if (!InsertIfNotPresent(&type_map_, descriptor, prototype)) {
  ------------------
  |  Branch (272:7): [True: 0, False: 39]
  ------------------
  273|      0|    GOOGLE_LOG(DFATAL) << "Type is already registered: " << descriptor->full_name();
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  274|      0|  }
  275|     39|}

_ZN6google8protobuf14MessageFactoryC2Ev:
 1270|      5|  inline MessageFactory() {}
_ZNK6google8protobuf10Reflection12GetOneofCaseERKNS0_7MessageEPKNS0_15OneofDescriptorE:
 1472|  2.63M|    const Message& message, const OneofDescriptor* oneof_descriptor) const {
 1473|  2.63M|  GOOGLE_DCHECK(!oneof_descriptor->is_synthetic());
  ------------------
  |  |  192|  2.63M|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  2.63M|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  2.63M|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 2.63M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1474|  2.63M|  return internal::GetConstRefAtOffset<uint32_t>(
 1475|  2.63M|      message, schema_.GetOneofCaseOffset(oneof_descriptor));
 1476|  2.63M|}
_ZNK6google8protobuf10Reflection13HasOneofFieldERKNS0_7MessageEPKNS0_15FieldDescriptorE:
 1479|  2.28M|                               const FieldDescriptor* field) const {
 1480|  2.28M|  return (GetOneofCase(message, field->containing_oneof()) ==
 1481|  2.28M|          static_cast<uint32_t>(field->number()));
 1482|  2.28M|}
_ZN6google8protobuf8internal19GetConstRefAtOffsetIjEERKT_RKNS0_7MessageEj:
  217|  3.55M|const To& GetConstRefAtOffset(const Message& message, uint32_t offset) {
  218|  3.55M|  return *GetConstPointerAtOffset<To>(&message, offset);
  219|  3.55M|}
_ZN6google8protobuf8internal23GetConstPointerAtOffsetIjEEPKT_PKNS0_7MessageEj:
  211|  3.55M|const To* GetConstPointerAtOffset(const Message* message, uint32_t offset) {
  212|  3.55M|  return reinterpret_cast<const To*>(reinterpret_cast<const char*>(message) +
  213|  3.55M|                                     offset);
  214|  3.55M|}
_ZN6google8protobuf8internal18GetPointerAtOffsetIjEEPT_PNS0_7MessageEj:
  206|   608k|inline To* GetPointerAtOffset(Message* message, uint32_t offset) {
  207|   608k|  return reinterpret_cast<To*>(reinterpret_cast<char*>(message) + offset);
  208|   608k|}
_ZNK6google8protobuf10Reflection6GetRawINS0_8internal20RepeatedPtrFieldBaseEEERKT_RKNS0_7MessageEPKNS0_15FieldDescriptorE:
 1486|   469k|                               const FieldDescriptor* field) const {
 1487|   469k|  GOOGLE_DCHECK(!schema_.InRealOneof(field) || HasOneofField(message, field))
  ------------------
  |  |  192|      0|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|   469k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   469k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:5): [True: 469k, False: 0]
  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1488|      0|      << "Field = " << field->full_name();
 1489|   469k|  return internal::GetConstRefAtOffset<Type>(message,
 1490|   469k|                                             schema_.GetFieldOffset(field));
 1491|   469k|}
_ZN6google8protobuf8internal19GetConstRefAtOffsetINS1_20RepeatedPtrFieldBaseEEERKT_RKNS0_7MessageEj:
  217|   469k|const To& GetConstRefAtOffset(const Message& message, uint32_t offset) {
  218|   469k|  return *GetConstPointerAtOffset<To>(&message, offset);
  219|   469k|}
_ZN6google8protobuf8internal23GetConstPointerAtOffsetINS1_20RepeatedPtrFieldBaseEEEPKT_PKNS0_7MessageEj:
  211|   469k|const To* GetConstPointerAtOffset(const Message* message, uint32_t offset) {
  212|   469k|  return reinterpret_cast<const To*>(reinterpret_cast<const char*>(message) +
  213|   469k|                                     offset);
  214|   469k|}
_ZNK6google8protobuf10Reflection6GetRawIPKNS0_7MessageEEERKT_RS4_PKNS0_15FieldDescriptorE:
 1486|   276k|                               const FieldDescriptor* field) const {
 1487|   276k|  GOOGLE_DCHECK(!schema_.InRealOneof(field) || HasOneofField(message, field))
  ------------------
  |  |  192|      0|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|   276k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   422k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:5): [True: 131k, False: 145k]
  |  |  |  |  |  |  |  Branch (149:5): [True: 145k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1488|      0|      << "Field = " << field->full_name();
 1489|   276k|  return internal::GetConstRefAtOffset<Type>(message,
 1490|   276k|                                             schema_.GetFieldOffset(field));
 1491|   276k|}
_ZN6google8protobuf8internal19GetConstRefAtOffsetIPKNS0_7MessageEEERKT_RS4_j:
  217|   276k|const To& GetConstRefAtOffset(const Message& message, uint32_t offset) {
  218|   276k|  return *GetConstPointerAtOffset<To>(&message, offset);
  219|   276k|}
_ZN6google8protobuf8internal23GetConstPointerAtOffsetIPKNS0_7MessageEEEPKT_S5_j:
  211|   276k|const To* GetConstPointerAtOffset(const Message* message, uint32_t offset) {
  212|   276k|  return reinterpret_cast<const To*>(reinterpret_cast<const char*>(message) +
  213|   276k|                                     offset);
  214|   276k|}
_ZN6google8protobuf8internal18GetPointerAtOffsetIPNS0_7MessageEEEPT_S4_j:
  206|   699k|inline To* GetPointerAtOffset(Message* message, uint32_t offset) {
  207|   699k|  return reinterpret_cast<To*>(reinterpret_cast<char*>(message) + offset);
  208|   699k|}
_ZN6google8protobuf8internal18GetPointerAtOffsetIiEEPT_PNS0_7MessageEj:
  206|  38.2k|inline To* GetPointerAtOffset(Message* message, uint32_t offset) {
  207|  38.2k|  return reinterpret_cast<To*>(reinterpret_cast<char*>(message) + offset);
  208|  38.2k|}
_ZN6google8protobuf8internal18GetPointerAtOffsetINS1_14ArenaStringPtrEEEPT_PNS0_7MessageEj:
  206|  42.1k|inline To* GetPointerAtOffset(Message* message, uint32_t offset) {
  207|  42.1k|  return reinterpret_cast<To*>(reinterpret_cast<char*>(message) + offset);
  208|  42.1k|}
_ZN6google8protobuf8internal18GetPointerAtOffsetINS1_20RepeatedPtrFieldBaseEEEPT_PNS0_7MessageEj:
  206|   396k|inline To* GetPointerAtOffset(Message* message, uint32_t offset) {
  207|   396k|  return reinterpret_cast<To*>(reinterpret_cast<char*>(message) + offset);
  208|   396k|}

_ZN6google8protobuf8internal13MergeFromImplILb0EEEbNS0_20stringpiece_internal11StringPieceEPNS0_11MessageLiteENS5_10ParseFlagsE:
  140|     15|                   MessageLite::ParseFlags parse_flags) {
  141|     15|  const char* ptr;
  142|     15|  internal::ParseContext ctx(io::CodedInputStream::GetDefaultRecursionLimit(),
  143|     15|                             aliasing, &ptr, input);
  144|     15|  ptr = msg->_InternalParse(ptr, &ctx);
  145|       |  // ctx has an explicit limit set (length of string_view).
  146|     15|  if (PROTOBUF_PREDICT_TRUE(ptr && ctx.EndedAtLimit())) {
  ------------------
  |  |  489|     30|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 15, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:63): [True: 15, False: 0]
  |  |  |  Branch (489:63): [True: 15, False: 0]
  |  |  ------------------
  ------------------
  147|     15|    return CheckFieldPresence(ctx, *msg, parse_flags);
  148|     15|  }
  149|      0|  return false;
  150|     15|}
_ZN6google8protobuf11MessageLite15ParseFromStringERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  308|      6|bool MessageLite::ParseFromString(ConstStringParam data) {
  309|      6|  return ParseFrom<kParse>(data);
  310|      6|}
_ZN6google8protobuf11MessageLite14ParseFromArrayEPKvi:
  316|      9|bool MessageLite::ParseFromArray(const void* data, int size) {
  317|      9|  return ParseFrom<kParse>(as_string_view(data, size));
  318|      9|}
_ZNK6google8protobuf11MessageLite14AppendToStringEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  440|      6|bool MessageLite::AppendToString(std::string* output) const {
  441|      6|  GOOGLE_DCHECK(IsInitialized()) << InitializationErrorMessage("serialize", *this);
  ------------------
  |  |  192|      0|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  442|      6|  return AppendPartialToString(output);
  443|      6|}
_ZNK6google8protobuf11MessageLite21AppendPartialToStringEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  445|      6|bool MessageLite::AppendPartialToString(std::string* output) const {
  446|      6|  size_t old_size = output->size();
  447|      6|  size_t byte_size = ByteSizeLong();
  448|      6|  if (byte_size > INT_MAX) {
  ------------------
  |  Branch (448:7): [True: 0, False: 6]
  ------------------
  449|      0|    GOOGLE_LOG(ERROR) << GetTypeName()
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  450|      0|               << " exceeded maximum protobuf size of 2GB: " << byte_size;
  451|      0|    return false;
  452|      0|  }
  453|       |
  454|      6|  STLStringResizeUninitializedAmortized(output, old_size + byte_size);
  455|      6|  uint8_t* start =
  456|      6|      reinterpret_cast<uint8_t*>(io::mutable_string_data(output) + old_size);
  457|      6|  SerializeToArrayImpl(*this, start, byte_size);
  458|      6|  return true;
  459|      6|}
_ZNK6google8protobuf11MessageLite17SerializeAsStringEv:
  489|      6|std::string MessageLite::SerializeAsString() const {
  490|       |  // If the compiler implements the (Named) Return Value Optimization,
  491|       |  // the local variable 'output' will not actually reside on the stack
  492|       |  // of this function, but will be overlaid with the object that the
  493|       |  // caller supplied for the return value to be constructed in.
  494|      6|  std::string output;
  495|      6|  if (!AppendToString(&output)) output.clear();
  ------------------
  |  Branch (495:7): [True: 0, False: 6]
  ------------------
  496|      6|  return output;
  497|      6|}
_ZN6google8protobuf8internal16InternalMetadata15CheckedDestructEv:
  525|   494k|void InternalMetadata::CheckedDestruct() {
  526|   494k|  if (HasMessageOwnedArenaTag()) {
  ------------------
  |  Branch (526:7): [True: 0, False: 494k]
  ------------------
  527|      0|    GOOGLE_DCHECK(!HasUnknownFieldsTag());
  ------------------
  |  |  192|      0|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      0|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      0|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  528|      0|    delete reinterpret_cast<Arena*>(ptr_ - kMessageOwnedArenaTagMask);
  529|      0|  }
  530|   494k|}
_ZN6google8protobuf8internal13OnShutdownRunEPFvPKvES3_:
  581|      9|void OnShutdownRun(void (*f)(const void*), const void* arg) {
  582|      9|  auto shutdown_data = ShutdownData::get();
  583|      9|  MutexLock lock(&shutdown_data->mutex);
  584|      9|  shutdown_data->functions.push_back(std::make_pair(f, arg));
  585|      9|}
message_lite.cc:_ZN6google8protobuf12_GLOBAL__N_118CheckFieldPresenceERKNS0_8internal12ParseContextERKNS0_11MessageLiteENS6_10ParseFlagsE:
  122|     15|                               MessageLite::ParseFlags parse_flags) {
  123|     15|  (void)ctx;  // Parameter is used by Google-internal code.
  124|     15|  if (PROTOBUF_PREDICT_FALSE((parse_flags & MessageLite::kMergePartial) != 0)) {
  ------------------
  |  |  490|     15|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 15]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 15]
  |  |  ------------------
  ------------------
  125|      0|    return true;
  126|      0|  }
  127|     15|  return msg.IsInitializedWithErrors();
  128|     15|}
message_lite.cc:_ZN6google8protobuf12_GLOBAL__N_114as_string_viewEPKvi:
  115|      9|inline StringPiece as_string_view(const void* data, int size) {
  116|      9|  return StringPiece(static_cast<const char*>(data), size);
  117|      9|}
_ZN6google8protobuf20SerializeToArrayImplERKNS0_11MessageLiteEPhi:
  332|      6|                                     int size) {
  333|      6|  constexpr bool debug = false;
  334|      6|  if (debug) {
  ------------------
  |  Branch (334:7): [Folded - Ignored]
  ------------------
  335|       |    // Force serialization to a stream with a block size of 1, which forces
  336|       |    // all writes to the stream to cross buffers triggering all fallback paths
  337|       |    // in the unittests when serializing to string / array.
  338|      0|    io::ArrayOutputStream stream(target, size, 1);
  339|      0|    uint8_t* ptr;
  340|      0|    io::EpsCopyOutputStream out(
  341|      0|        &stream, io::CodedOutputStream::IsDefaultSerializationDeterministic(),
  342|      0|        &ptr);
  343|      0|    ptr = msg._InternalSerialize(ptr, &out);
  344|      0|    out.Trim(ptr);
  345|      0|    GOOGLE_DCHECK(!out.HadError() && stream.ByteCount() == size);
  ------------------
  |  |  192|      0|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      0|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      0|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  346|      0|    return target + size;
  347|      6|  } else {
  348|      6|    io::EpsCopyOutputStream out(
  349|      6|        target, size,
  350|      6|        io::CodedOutputStream::IsDefaultSerializationDeterministic());
  351|      6|    auto res = msg._InternalSerialize(target, &out);
  352|      6|    GOOGLE_DCHECK(target + size == res);
  ------------------
  |  |  192|      6|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  353|      6|    return res;
  354|      6|  }
  355|      6|}
_ZN6google8protobuf8internal12ShutdownData3getEv:
  563|      9|  static ShutdownData* get() {
  564|      9|    static auto* data = new ShutdownData;
  565|      9|    return data;
  566|      9|  }

_ZNK6google8protobuf11MessageLite23IsInitializedWithErrorsEv:
  469|     15|  bool IsInitializedWithErrors() const {
  470|     15|    if (IsInitialized()) return true;
  ------------------
  |  Branch (470:9): [True: 15, False: 0]
  ------------------
  471|      0|    LogInitializationErrorMessage();
  472|      0|    return false;
  473|     15|  }
_ZN6google8protobuf8internal12ToCachedSizeEm:
  107|      6|inline int ToCachedSize(size_t size) { return static_cast<int>(size); }
_ZN6google8protobuf8internal27GetEmptyStringAlreadyInitedEv:
  134|     41|PROTOBUF_EXPORT constexpr const std::string& GetEmptyStringAlreadyInited() {
  135|     41|  return fixed_address_empty_string.get();
  136|     41|}
_ZN6google8protobuf11MessageLite18CreateMaybeMessageINS0_11FileOptionsEEEPT_PNS0_5ArenaE:
  424|      6|  static T* CreateMaybeMessage(Arena* arena) {
  425|      6|    return Arena::CreateMaybeMessage<T>(arena);
  426|      6|  }
_ZN6google8protobuf11MessageLite18CreateMaybeMessageINS0_12FieldOptionsEEEPT_PNS0_5ArenaE:
  424|     12|  static T* CreateMaybeMessage(Arena* arena) {
  425|     12|    return Arena::CreateMaybeMessage<T>(arena);
  426|     12|  }
_ZN6google8protobuf11MessageLite9ParseFromILNS1_10ParseFlagsE1ENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEbRKT0_:
  546|      6|bool MessageLite::ParseFrom(const T& input) {
  547|      6|  if (flags & kParse) Clear();
  ------------------
  |  Branch (547:7): [Folded - Ignored]
  ------------------
  548|      6|  constexpr bool alias = (flags & kMergeWithAliasing) != 0;
  549|      6|  return internal::MergeFromImpl<alias>(input, this, flags);
  550|      6|}
_ZN6google8protobuf11MessageLite9ParseFromILNS1_10ParseFlagsE1ENS0_20stringpiece_internal11StringPieceEEEbRKT0_:
  546|      9|bool MessageLite::ParseFrom(const T& input) {
  547|      9|  if (flags & kParse) Clear();
  ------------------
  |  Branch (547:7): [Folded - Ignored]
  ------------------
  548|      9|  constexpr bool alias = (flags & kMergeWithAliasing) != 0;
  549|      9|  return internal::MergeFromImpl<alias>(input, this, flags);
  550|      9|}
_ZN6google8protobuf8internal16OnShutdownDeleteINS0_25EncodedDescriptorDatabaseEEEPT_S5_:
  580|      2|T* OnShutdownDelete(T* p) {
  581|      2|  OnShutdownRun([](const void* pp) { delete static_cast<const T*>(pp); }, p);
  582|      2|  return p;
  583|      2|}
_ZN6google8protobuf8internal16OnShutdownDeleteINS0_14DescriptorPoolEEEPT_S5_:
  580|      1|T* OnShutdownDelete(T* p) {
  581|      1|  OnShutdownRun([](const void* pp) { delete static_cast<const T*>(pp); }, p);
  582|      1|  return p;
  583|      1|}
generated_message_reflection.cc:_ZN6google8protobuf8internal16OnShutdownDeleteINS0_12_GLOBAL__N_113MetadataOwnerEEEPT_S6_:
  580|      1|T* OnShutdownDelete(T* p) {
  581|      1|  OnShutdownRun([](const void* pp) { delete static_cast<const T*>(pp); }, p);
  582|      1|  return p;
  583|      1|}
message.cc:_ZN6google8protobuf8internal16OnShutdownDeleteINS0_12_GLOBAL__N_123GeneratedMessageFactoryEEEPT_S6_:
  580|      2|T* OnShutdownDelete(T* p) {
  581|      2|  OnShutdownRun([](const void* pp) { delete static_cast<const T*>(pp); }, p);
  582|      2|  return p;
  583|      2|}
_ZN6google8protobuf8internal16OnShutdownDeleteINS0_15UnknownFieldSetEEEPT_S5_:
  580|      1|T* OnShutdownDelete(T* p) {
  581|      1|  OnShutdownRun([](const void* pp) { delete static_cast<const T*>(pp); }, p);
  582|      1|  return p;
  583|      1|}

_ZN6google8protobuf8internal18EpsCopyInputStream12DoneFallbackEii:
  173|      3|                                                              int depth) {
  174|       |  // Did we exceeded the limit (parse error).
  175|      3|  if (PROTOBUF_PREDICT_FALSE(overrun > limit_)) return {nullptr, true};
  ------------------
  |  |  490|      3|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 3]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 3]
  |  |  ------------------
  ------------------
  176|      3|  GOOGLE_DCHECK(overrun != limit_);  // Guaranteed by caller.
  ------------------
  |  |  192|      3|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|      3|  GOOGLE_DCHECK(overrun < limit_);   // Follows from above
  ------------------
  |  |  192|      3|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  178|       |  // TODO(gerbens) Instead of this dcheck we could just assign, and remove
  179|       |  // updating the limit_end from PopLimit, ie.
  180|       |  // limit_end_ = buffer_end_ + (std::min)(0, limit_);
  181|       |  // if (ptr < limit_end_) return {ptr, false};
  182|      3|  GOOGLE_DCHECK(limit_end_ == buffer_end_ + (std::min)(0, limit_));
  ------------------
  |  |  192|      3|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|       |  // At this point we know the following assertion holds.
  184|      3|  GOOGLE_DCHECK_GT(limit_, 0);
  ------------------
  |  |  198|      3|#define GOOGLE_DCHECK_GT GOOGLE_CHECK_GT
  |  |  ------------------
  |  |  |  |  158|      3|#define GOOGLE_CHECK_GT(A, B) GOOGLE_CHECK((A) >  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  185|      3|  GOOGLE_DCHECK(limit_end_ == buffer_end_);  // because limit_ > 0
  ------------------
  |  |  192|      3|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  186|      3|  const char* p;
  187|      3|  do {
  188|       |    // We are past the end of buffer_end_, in the slop region.
  189|      3|    GOOGLE_DCHECK_GE(overrun, 0);
  ------------------
  |  |  199|      3|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|      3|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|      3|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|      3|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 3, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  190|      3|    p = NextBuffer(overrun, depth);
  191|      3|    if (p == nullptr) {
  ------------------
  |  Branch (191:9): [True: 0, False: 3]
  ------------------
  192|       |      // We are at the end of the stream
  193|      0|      if (PROTOBUF_PREDICT_FALSE(overrun != 0)) return {nullptr, true};
  ------------------
  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  194|      0|      GOOGLE_DCHECK_GT(limit_, 0);
  ------------------
  |  |  198|      0|#define GOOGLE_DCHECK_GT GOOGLE_CHECK_GT
  |  |  ------------------
  |  |  |  |  158|      0|#define GOOGLE_CHECK_GT(A, B) GOOGLE_CHECK((A) >  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|      0|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|      0|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  195|      0|      limit_end_ = buffer_end_;
  196|       |      // Distinguish ending on a pushed limit or ending on end-of-stream.
  197|      0|      SetEndOfStream();
  198|      0|      return {buffer_end_, true};
  199|      0|    }
  200|      3|    limit_ -= buffer_end_ - p;  // Adjust limit_ relative to new anchor
  201|      3|    p += overrun;
  202|      3|    overrun = p - buffer_end_;
  203|      3|  } while (overrun >= 0);
  ------------------
  |  Branch (203:12): [True: 0, False: 3]
  ------------------
  204|      3|  limit_end_ = buffer_end_ + std::min(0, limit_);
  205|      3|  return {p, false};
  206|      3|}
_ZN6google8protobuf8internal12ParseContext28ReadSizeAndPushLimitAndDepthEPKcPi:
  268|  1.24k|                                                       int* old_limit) {
  269|  1.24k|  int size = ReadSize(&ptr);
  270|  1.24k|  if (PROTOBUF_PREDICT_FALSE(!ptr)) {
  ------------------
  |  |  490|  1.24k|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 1.24k]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 1.24k]
  |  |  ------------------
  ------------------
  271|      0|    *old_limit = 0;  // Make sure this isn't uninitialized even on error return
  272|      0|    return nullptr;
  273|      0|  }
  274|  1.24k|  *old_limit = PushLimit(ptr, size);
  275|  1.24k|  if (--depth_ < 0) return nullptr;
  ------------------
  |  Branch (275:7): [True: 0, False: 1.24k]
  ------------------
  276|  1.24k|  return ptr;
  277|  1.24k|}
_ZN6google8protobuf8internal12ParseContext12ParseMessageEPNS0_11MessageLiteEPKc:
  279|  1.24k|const char* ParseContext::ParseMessage(MessageLite* msg, const char* ptr) {
  280|  1.24k|  int old;
  281|  1.24k|  ptr = ReadSizeAndPushLimitAndDepth(ptr, &old);
  282|  1.24k|  ptr = ptr ? msg->_InternalParse(ptr, this) : nullptr;
  ------------------
  |  Branch (282:9): [True: 1.24k, False: 0]
  ------------------
  283|  1.24k|  depth_++;
  284|  1.24k|  if (!PopLimit(old)) return nullptr;
  ------------------
  |  Branch (284:7): [True: 0, False: 1.24k]
  ------------------
  285|  1.24k|  return ptr;
  286|  1.24k|}
_ZN6google8protobuf8internal17VarintParseSlow32EPKcj:
  309|     27|                                                   uint32_t res) {
  310|     81|  for (std::uint32_t i = 2; i < 5; i++) {
  ------------------
  |  Branch (310:29): [True: 81, False: 0]
  ------------------
  311|     81|    uint32_t byte = static_cast<uint8_t>(p[i]);
  312|     81|    res += (byte - 1) << (7 * i);
  313|     81|    if (PROTOBUF_PREDICT_TRUE(byte < 128)) {
  ------------------
  |  |  489|     81|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 27, False: 54]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 27, False: 54]
  |  |  ------------------
  ------------------
  314|     27|      return {p + i + 1, res};
  315|     27|    }
  316|     81|  }
  317|       |  // Accept >5 bytes
  318|      0|  for (std::uint32_t i = 5; i < 10; i++) {
  ------------------
  |  Branch (318:29): [True: 0, False: 0]
  ------------------
  319|      0|    uint32_t byte = static_cast<uint8_t>(p[i]);
  320|      0|    if (PROTOBUF_PREDICT_TRUE(byte < 128)) {
  ------------------
  |  |  489|      0|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 0, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|      return {p + i + 1, res};
  322|      0|    }
  323|      0|  }
  324|      0|  return {nullptr, 0};
  325|      0|}
_ZN6google8protobuf8internal16ReadSizeFallbackEPKcj:
  351|     93|std::pair<const char*, int32_t> ReadSizeFallback(const char* p, uint32_t res) {
  352|     93|  for (std::uint32_t i = 1; i < 4; i++) {
  ------------------
  |  Branch (352:29): [True: 93, False: 0]
  ------------------
  353|     93|    uint32_t byte = static_cast<uint8_t>(p[i]);
  354|     93|    res += (byte - 1) << (7 * i);
  355|     93|    if (PROTOBUF_PREDICT_TRUE(byte < 128)) {
  ------------------
  |  |  489|     93|# define PROTOBUF_PREDICT_TRUE(x) (__builtin_expect(false || (x), true))
  |  |  ------------------
  |  |  |  Branch (489:35): [True: 93, False: 0]
  |  |  |  Branch (489:53): [Folded - Ignored]
  |  |  |  Branch (489:62): [True: 93, False: 0]
  |  |  ------------------
  ------------------
  356|     93|      return {p + i + 1, res};
  357|     93|    }
  358|     93|  }
  359|      0|  std::uint32_t byte = static_cast<uint8_t>(p[4]);
  360|      0|  if (PROTOBUF_PREDICT_FALSE(byte >= 8)) return {nullptr, 0};  // size >= 2gb
  ------------------
  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  361|      0|  res += (byte - 1) << 28;
  362|       |  // Protect against sign integer overflow in PushLimit. Limits are relative
  363|       |  // to buffer ends and ptr could potential be kSlopBytes beyond a buffer end.
  364|       |  // To protect against overflow we reject limits absurdly close to INT_MAX.
  365|      0|  if (PROTOBUF_PREDICT_FALSE(res > INT_MAX - ParseContext::kSlopBytes)) {
  ------------------
  |  |  490|      0|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 0]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  366|      0|    return {nullptr, 0};
  367|      0|  }
  368|      0|  return {p + 5, res};
  369|      0|}
_ZN6google8protobuf8internal10VerifyUTF8ENS0_20stringpiece_internal11StringPieceEPKc:
  383|  1.60k|bool VerifyUTF8(StringPiece str, const char* field_name) {
  384|  1.60k|  if (!IsStructurallyValidUTF8(str)) {
  ------------------
  |  Branch (384:7): [True: 0, False: 1.60k]
  ------------------
  385|      0|    PrintUTF8ErrorLog("", field_name, "parsing", false);
  386|      0|    return false;
  387|      0|  }
  388|  1.60k|  return true;
  389|  1.60k|}
_ZN6google8protobuf8internal24InlineGreedyStringParserEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKcPNS1_12ParseContextE:
  392|  1.60k|                                     ParseContext* ctx) {
  393|  1.60k|  int size = ReadSize(&ptr);
  394|  1.60k|  if (!ptr) return nullptr;
  ------------------
  |  Branch (394:7): [True: 0, False: 1.60k]
  ------------------
  395|  1.60k|  return ctx->ReadString(ptr, size, s);
  396|  1.60k|}
_ZN6google8protobuf8internal18EpsCopyInputStream10NextBufferEii:
  103|      3|const char* EpsCopyInputStream::NextBuffer(int overrun, int depth) {
  104|      3|  if (next_chunk_ == nullptr) return nullptr;  // We've reached end of stream.
  ------------------
  |  Branch (104:7): [True: 0, False: 3]
  ------------------
  105|      3|  if (next_chunk_ != buffer_) {
  ------------------
  |  Branch (105:7): [True: 0, False: 3]
  ------------------
  106|      0|    GOOGLE_DCHECK(size_ > kSlopBytes);
  ------------------
  |  |  192|      0|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      0|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      0|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  107|       |    // The chunk is large enough to be used directly
  108|      0|    buffer_end_ = next_chunk_ + size_ - kSlopBytes;
  109|      0|    auto res = next_chunk_;
  110|      0|    next_chunk_ = buffer_;
  111|      0|    if (aliasing_ == kOnPatch) aliasing_ = kNoDelta;
  ------------------
  |  Branch (111:9): [True: 0, False: 0]
  ------------------
  112|      0|    return res;
  113|      0|  }
  114|       |  // Move the slop bytes of previous buffer to start of the patch buffer.
  115|       |  // Note we must use memmove because the previous buffer could be part of
  116|       |  // buffer_.
  117|      3|  std::memmove(buffer_, buffer_end_, kSlopBytes);
  118|      3|  if (overall_limit_ > 0 &&
  ------------------
  |  Branch (118:7): [True: 0, False: 3]
  ------------------
  119|      3|      (depth < 0 || !ParseEndsInSlopRegion(buffer_, overrun, depth))) {
  ------------------
  |  Branch (119:8): [True: 0, False: 0]
  |  Branch (119:21): [True: 0, False: 0]
  ------------------
  120|      0|    const void* data;
  121|       |    // ZeroCopyInputStream indicates Next may return 0 size buffers. Hence
  122|       |    // we loop.
  123|      0|    while (StreamNext(&data)) {
  ------------------
  |  Branch (123:12): [True: 0, False: 0]
  ------------------
  124|      0|      if (size_ > kSlopBytes) {
  ------------------
  |  Branch (124:11): [True: 0, False: 0]
  ------------------
  125|       |        // We got a large chunk
  126|      0|        std::memcpy(buffer_ + kSlopBytes, data, kSlopBytes);
  127|      0|        next_chunk_ = static_cast<const char*>(data);
  128|      0|        buffer_end_ = buffer_ + kSlopBytes;
  129|      0|        if (aliasing_ >= kNoDelta) aliasing_ = kOnPatch;
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|        return buffer_;
  131|      0|      } else if (size_ > 0) {
  ------------------
  |  Branch (131:18): [True: 0, False: 0]
  ------------------
  132|      0|        std::memcpy(buffer_ + kSlopBytes, data, size_);
  133|      0|        next_chunk_ = buffer_;
  134|      0|        buffer_end_ = buffer_ + size_;
  135|      0|        if (aliasing_ >= kNoDelta) aliasing_ = kOnPatch;
  ------------------
  |  Branch (135:13): [True: 0, False: 0]
  ------------------
  136|      0|        return buffer_;
  137|      0|      }
  138|      0|      GOOGLE_DCHECK(size_ == 0) << size_;
  ------------------
  |  |  192|      0|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|      0|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      0|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  139|      0|    }
  140|      0|    overall_limit_ = 0;  // Next failed, no more needs for next
  141|      0|  }
  142|       |  // End of stream or array
  143|      3|  if (aliasing_ == kNoDelta) {
  ------------------
  |  Branch (143:7): [True: 0, False: 3]
  ------------------
  144|       |    // If there is no more block and aliasing is true, the previous block
  145|       |    // is still valid and we can alias. We have users relying on string_view's
  146|       |    // obtained from protos to outlive the proto, when the parse was from an
  147|       |    // array. This guarantees string_view's are always aliased if parsed from
  148|       |    // an array.
  149|      0|    aliasing_ = reinterpret_cast<std::uintptr_t>(buffer_end_) -
  150|      0|                reinterpret_cast<std::uintptr_t>(buffer_);
  151|      0|  }
  152|      3|  next_chunk_ = nullptr;
  153|      3|  buffer_end_ = buffer_ + kSlopBytes;
  154|      3|  size_ = 0;
  155|      3|  return buffer_;
  156|      3|}

_ZN6google8protobuf8internal18EpsCopyInputStreamC2Eb:
  117|     15|      : aliasing_(enable_aliasing ? kOnPatch : kNoAliasing) {}
  ------------------
  |  Branch (117:19): [True: 0, False: 15]
  ------------------
_ZN6google8protobuf8internal18EpsCopyInputStream9PushLimitEPKci:
  131|  1.24k|  PROTOBUF_NODISCARD int PushLimit(const char* ptr, int limit) {
  132|  1.24k|    GOOGLE_DCHECK(limit >= 0 && limit <= INT_MAX - kSlopBytes);
  ------------------
  |  |  192|  1.24k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  1.24k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  2.49k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:5): [True: 1.24k, False: 0]
  |  |  |  |  |  |  |  Branch (149:5): [True: 1.24k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  133|       |    // This add is safe due to the invariant above, because
  134|       |    // ptr - buffer_end_ <= kSlopBytes.
  135|  1.24k|    limit += static_cast<int>(ptr - buffer_end_);
  136|  1.24k|    limit_end_ = buffer_end_ + (std::min)(0, limit);
  137|  1.24k|    auto old_limit = limit_;
  138|  1.24k|    limit_ = limit;
  139|  1.24k|    return old_limit - limit;
  140|  1.24k|  }
_ZN6google8protobuf8internal18EpsCopyInputStream8PopLimitEi:
  142|  1.24k|  PROTOBUF_NODISCARD bool PopLimit(int delta) {
  143|  1.24k|    if (PROTOBUF_PREDICT_FALSE(!EndedAtLimit())) return false;
  ------------------
  |  |  490|  1.24k|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 1.24k]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 1.24k]
  |  |  ------------------
  ------------------
  144|  1.24k|    limit_ = limit_ + delta;
  145|       |    // TODO(gerbens) We could remove this line and hoist the code to
  146|       |    // DoneFallback. Study the perf/bin-size effects.
  147|  1.24k|    limit_end_ = buffer_end_ + (std::min)(0, limit_);
  148|  1.24k|    return true;
  149|  1.24k|  }
_ZN6google8protobuf8internal18EpsCopyInputStream10ReadStringEPKciPNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE:
  158|  1.60k|                                            std::string* s) {
  159|  1.60k|    if (size <= buffer_end_ + kSlopBytes - ptr) {
  ------------------
  |  Branch (159:9): [True: 1.60k, False: 0]
  ------------------
  160|  1.60k|      s->assign(ptr, size);
  161|  1.60k|      return ptr + size;
  162|  1.60k|    }
  163|      0|    return ReadStringFallback(ptr, size, s);
  164|  1.60k|  }
_ZNK6google8protobuf8internal18EpsCopyInputStream12EndedAtLimitEv:
  195|  1.26k|  bool EndedAtLimit() const { return last_tag_minus_1_ == 0; }
_ZN6google8protobuf8internal18EpsCopyInputStream8InitFromENS0_20stringpiece_internal11StringPieceE:
  232|     15|  const char* InitFrom(StringPiece flat) {
  233|     15|    overall_limit_ = 0;
  234|     15|    if (flat.size() > kSlopBytes) {
  ------------------
  |  Branch (234:9): [True: 11, False: 4]
  ------------------
  235|     11|      limit_ = kSlopBytes;
  236|     11|      limit_end_ = buffer_end_ = flat.data() + flat.size() - kSlopBytes;
  237|     11|      next_chunk_ = buffer_;
  238|     11|      if (aliasing_ == kOnPatch) aliasing_ = kNoDelta;
  ------------------
  |  Branch (238:11): [True: 0, False: 11]
  ------------------
  239|     11|      return flat.data();
  240|     11|    } else {
  241|      4|      std::memcpy(buffer_, flat.data(), flat.size());
  242|      4|      limit_ = 0;
  243|      4|      limit_end_ = buffer_end_ = buffer_ + flat.size();
  244|      4|      next_chunk_ = nullptr;
  245|      4|      if (aliasing_ == kOnPatch) {
  ------------------
  |  Branch (245:11): [True: 0, False: 4]
  ------------------
  246|      0|        aliasing_ = reinterpret_cast<std::uintptr_t>(flat.data()) -
  247|      0|                    reinterpret_cast<std::uintptr_t>(buffer_);
  248|      0|      }
  249|      4|      return buffer_;
  250|      4|    }
  251|     15|  }
_ZN6google8protobuf8internal8ReadSizeEPPKc:
  705|  2.85k|inline uint32_t ReadSize(const char** pp) {
  706|  2.85k|  auto p = *pp;
  707|  2.85k|  uint32_t res = static_cast<uint8_t>(p[0]);
  708|  2.85k|  if (res < 128) {
  ------------------
  |  Branch (708:7): [True: 2.76k, False: 93]
  ------------------
  709|  2.76k|    *pp = p + 1;
  710|  2.76k|    return res;
  711|  2.76k|  }
  712|     93|  auto x = ReadSizeFallback(p, res);
  713|     93|  *pp = x.first;
  714|     93|  return x.second;
  715|  2.85k|}
_ZN6google8protobuf8internal12ReadVarint64EPPKc:
  722|  1.67k|inline uint64_t ReadVarint64(const char** p) {
  723|  1.67k|  uint64_t tmp;
  724|  1.67k|  *p = VarintParse(*p, &tmp);
  725|  1.67k|  return tmp;
  726|  1.67k|}
_ZN6google8protobuf8internal11VarintParseImEEPKcS4_PT_:
  538|  1.67k|PROTOBUF_NODISCARD const char* VarintParse(const char* p, T* out) {
  539|  1.67k|  auto ptr = reinterpret_cast<const uint8_t*>(p);
  540|  1.67k|  uint32_t res = ptr[0];
  541|  1.67k|  if (!(res & 0x80)) {
  ------------------
  |  Branch (541:7): [True: 1.67k, False: 0]
  ------------------
  542|  1.67k|    *out = res;
  543|  1.67k|    return p + 1;
  544|  1.67k|  }
  545|      0|  uint32_t byte = ptr[1];
  546|      0|  res += (byte - 1) << 7;
  547|      0|  if (!(byte & 0x80)) {
  ------------------
  |  Branch (547:7): [True: 0, False: 0]
  ------------------
  548|      0|    *out = res;
  549|      0|    return p + 2;
  550|      0|  }
  551|      0|  return VarintParseSlow(p, res, out);
  552|      0|}
_ZN6google8protobuf8internal12ParseContextC2IJRNS0_20stringpiece_internal11StringPieceEEEEibPPKcDpOT_:
  395|     15|      : EpsCopyInputStream(aliasing), depth_(depth) {
  396|     15|    *start = InitFrom(std::forward<T>(args)...);
  397|     15|  }
_ZN6google8protobuf8internal9ExpectTagILj26EEEbPKc:
  467|      3|bool ExpectTag(const char* ptr) {
  468|      3|  if (tag < 128) {
  ------------------
  |  Branch (468:7): [Folded - Ignored]
  ------------------
  469|      3|    return *ptr == static_cast<char>(tag);
  470|      3|  } else {
  471|      0|    static_assert(tag < 128 * 128, "We only expect tags for 1 or 2 bytes");
  472|      0|    char buf[2] = {static_cast<char>(tag | 0x80), static_cast<char>(tag >> 7)};
  473|      0|    return std::memcmp(ptr, buf, 2) == 0;
  474|      0|  }
  475|      3|}
_ZN6google8protobuf8internal9ExpectTagILj34EEEbPKc:
  467|    195|bool ExpectTag(const char* ptr) {
  468|    195|  if (tag < 128) {
  ------------------
  |  Branch (468:7): [Folded - Ignored]
  ------------------
  469|    195|    return *ptr == static_cast<char>(tag);
  470|    195|  } else {
  471|      0|    static_assert(tag < 128 * 128, "We only expect tags for 1 or 2 bytes");
  472|      0|    char buf[2] = {static_cast<char>(tag | 0x80), static_cast<char>(tag >> 7)};
  473|      0|    return std::memcmp(ptr, buf, 2) == 0;
  474|      0|  }
  475|    195|}
_ZN6google8protobuf8internal9ExpectTagILj42EEEbPKc:
  467|     12|bool ExpectTag(const char* ptr) {
  468|     12|  if (tag < 128) {
  ------------------
  |  Branch (468:7): [Folded - Ignored]
  ------------------
  469|     12|    return *ptr == static_cast<char>(tag);
  470|     12|  } else {
  471|      0|    static_assert(tag < 128 * 128, "We only expect tags for 1 or 2 bytes");
  472|      0|    char buf[2] = {static_cast<char>(tag | 0x80), static_cast<char>(tag >> 7)};
  473|      0|    return std::memcmp(ptr, buf, 2) == 0;
  474|      0|  }
  475|     12|}
_ZN6google8protobuf8internal9ExpectTagILj74EEEbPKc:
  467|     12|bool ExpectTag(const char* ptr) {
  468|     12|  if (tag < 128) {
  ------------------
  |  Branch (468:7): [Folded - Ignored]
  ------------------
  469|     12|    return *ptr == static_cast<char>(tag);
  470|     12|  } else {
  471|      0|    static_assert(tag < 128 * 128, "We only expect tags for 1 or 2 bytes");
  472|      0|    char buf[2] = {static_cast<char>(tag | 0x80), static_cast<char>(tag >> 7)};
  473|      0|    return std::memcmp(ptr, buf, 2) == 0;
  474|      0|  }
  475|     12|}

_ZN6google8protobuf8internal11SizedDeleteEPvm:
   46|   164k|inline void SizedDelete(void* p, size_t size) {
   47|       |#if defined(__cpp_sized_deallocation)
   48|       |  ::operator delete(p, size);
   49|       |#else
   50|   164k|  ::operator delete(p);
   51|   164k|#endif
   52|   164k|}
_ZN6google8protobuf8internal16SizedArrayDeleteEPvm:
   53|     18|inline void SizedArrayDelete(void* p, size_t size) {
   54|       |#if defined(__cpp_sized_deallocation)
   55|       |  ::operator delete[](p, size);
   56|       |#else
   57|     18|  ::operator delete[](p);
   58|     18|#endif
   59|     18|}

_ZNK6google8protobuf13RepeatedFieldIiE4sizeEv:
  607|     21|inline int RepeatedField<Element>::size() const {
  608|     21|  return current_size_;
  609|     21|}
_ZN6google8protobuf13RepeatedFieldIiE5ClearEv:
  761|     18|inline void RepeatedField<Element>::Clear() {
  762|     18|  current_size_ = 0;
  763|     18|}
_ZN6google8protobuf13RepeatedFieldIiEC2EPNS0_5ArenaE:
  526|     18|    : current_size_(0), total_size_(0), arena_or_elements_(arena) {}
_ZN6google8protobuf13RepeatedFieldIiED2Ev:
  546|     18|RepeatedField<Element>::~RepeatedField() {
  547|     18|#ifndef NDEBUG
  548|       |  // Try to trigger segfault / asan failure in non-opt builds if arena_
  549|       |  // lifetime has ended before the destructor.
  550|     18|  auto arena = GetOwningArena();
  551|     18|  if (arena) (void)arena->SpaceAllocated();
  ------------------
  |  Branch (551:7): [True: 0, False: 18]
  ------------------
  552|     18|#endif
  553|     18|  if (total_size_ > 0) {
  ------------------
  |  Branch (553:7): [True: 0, False: 18]
  ------------------
  554|      0|    InternalDeallocate(rep(), total_size_, true);
  555|      0|  }
  556|     18|}
_ZNK6google8protobuf13RepeatedFieldIiE14GetOwningArenaEv:
  329|     18|  inline Arena* GetOwningArena() const {
  330|     18|    return (total_size_ == 0) ? static_cast<Arena*>(arena_or_elements_)
  ------------------
  |  Branch (330:12): [True: 18, False: 0]
  ------------------
  331|     18|                              : rep()->arena;
  332|     18|  }
_ZN6google8protobuf8internal20CalculateReserveSizeIPvLi8EEEiii:
  906|   164k|inline int CalculateReserveSize(int total_size, int new_size) {
  907|   164k|  constexpr int lower_limit = RepeatedFieldLowerClampLimit<T, kRepHeaderSize>();
  908|   164k|  if (new_size < lower_limit) {
  ------------------
  |  Branch (908:7): [True: 0, False: 164k]
  ------------------
  909|       |    // Clamp to smallest allowed size.
  910|      0|    return lower_limit;
  911|      0|  }
  912|   164k|  constexpr int kMaxSizeBeforeClamp =
  913|   164k|      (std::numeric_limits<int>::max() - kRepHeaderSize) / 2;
  914|   164k|  if (PROTOBUF_PREDICT_FALSE(total_size > kMaxSizeBeforeClamp)) {
  ------------------
  |  |  490|   164k|# define PROTOBUF_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
  |  |  ------------------
  |  |  |  Branch (490:36): [True: 0, False: 164k]
  |  |  |  Branch (490:54): [Folded - Ignored]
  |  |  |  Branch (490:63): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
  915|      0|    return std::numeric_limits<int>::max();
  916|      0|  }
  917|       |  // We want to double the number of bytes, not the number of elements, to try
  918|       |  // to stay within power-of-two allocations.
  919|       |  // The allocation has kRepHeaderSize + sizeof(T) * capacity.
  920|   164k|  int doubled_size = 2 * total_size + kRepHeaderSize / sizeof(T);
  921|   164k|  return std::max(doubled_size, new_size);
  922|   164k|}

_ZN6google8protobuf8internal20RepeatedPtrFieldBase14InternalExtendEi:
   51|   164k|void** RepeatedPtrFieldBase::InternalExtend(int extend_amount) {
   52|   164k|  int new_size = current_size_ + extend_amount;
   53|   164k|  if (total_size_ >= new_size) {
  ------------------
  |  Branch (53:7): [True: 0, False: 164k]
  ------------------
   54|       |    // N.B.: rep_ is non-nullptr because extend_amount is always > 0, hence
   55|       |    // total_size must be non-zero since it is lower-bounded by new_size.
   56|      0|    return &rep_->elements[current_size_];
   57|      0|  }
   58|   164k|  Rep* old_rep = rep_;
   59|   164k|  Arena* arena = GetOwningArena();
   60|   164k|  new_size = internal::CalculateReserveSize<void*, kRepHeaderSize>(total_size_,
   61|   164k|                                                                   new_size);
   62|   164k|  GOOGLE_CHECK_LE(static_cast<int64_t>(new_size),
  ------------------
  |  |  157|      0|#define GOOGLE_CHECK_LE(A, B) GOOGLE_CHECK((A) <= (B))
  |  |  ------------------
  |  |  |  |  152|   164k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   164k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 164k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   63|      0|           static_cast<int64_t>(
   64|      0|               (std::numeric_limits<size_t>::max() - kRepHeaderSize) /
   65|      0|               sizeof(old_rep->elements[0])))
   66|      0|      << "Requested size is too large to fit into size_t.";
   67|   164k|  size_t bytes = kRepHeaderSize + sizeof(old_rep->elements[0]) * new_size;
   68|   164k|  if (arena == nullptr) {
  ------------------
  |  Branch (68:7): [True: 164k, False: 0]
  ------------------
   69|   164k|    rep_ = reinterpret_cast<Rep*>(::operator new(bytes));
   70|   164k|  } else {
   71|      0|    rep_ = reinterpret_cast<Rep*>(Arena::CreateArray<char>(arena, bytes));
   72|      0|  }
   73|   164k|  const int old_total_size = total_size_;
   74|   164k|  total_size_ = new_size;
   75|   164k|  if (old_rep) {
  ------------------
  |  Branch (75:7): [True: 56.1k, False: 107k]
  ------------------
   76|  56.1k|    if (old_rep->allocated_size > 0) {
  ------------------
  |  Branch (76:9): [True: 56.1k, False: 0]
  ------------------
   77|  56.1k|      memcpy(rep_->elements, old_rep->elements,
   78|  56.1k|             old_rep->allocated_size * sizeof(rep_->elements[0]));
   79|  56.1k|    }
   80|  56.1k|    rep_->allocated_size = old_rep->allocated_size;
   81|       |
   82|  56.1k|    const size_t old_size =
   83|  56.1k|        old_total_size * sizeof(rep_->elements[0]) + kRepHeaderSize;
   84|  56.1k|    if (arena == nullptr) {
  ------------------
  |  Branch (84:9): [True: 56.1k, False: 0]
  ------------------
   85|  56.1k|      internal::SizedDelete(old_rep, old_size);
   86|  56.1k|    } else {
   87|      0|      arena_->ReturnArrayMemory(old_rep, old_size);
   88|      0|    }
   89|   107k|  } else {
   90|   107k|    rep_->allocated_size = 0;
   91|   107k|  }
   92|   164k|  return &rep_->elements[current_size_];
   93|   164k|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase7ReserveEi:
   95|   163k|void RepeatedPtrFieldBase::Reserve(int new_size) {
   96|   163k|  if (new_size > current_size_) {
  ------------------
  |  Branch (96:7): [True: 163k, False: 0]
  ------------------
   97|   163k|    InternalExtend(new_size - current_size_);
   98|   163k|  }
   99|   163k|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase13DestroyProtosEv:
  101|   107k|void RepeatedPtrFieldBase::DestroyProtos() {
  102|   107k|  GOOGLE_DCHECK(rep_);
  ------------------
  |  |  192|   107k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|   107k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   107k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 107k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  103|   107k|  GOOGLE_DCHECK(arena_ == nullptr);
  ------------------
  |  |  192|   107k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|   107k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   107k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 107k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   107k|  int n = rep_->allocated_size;
  105|   107k|  void* const* elements = rep_->elements;
  106|   307k|  for (int i = 0; i < n; i++) {
  ------------------
  |  Branch (106:19): [True: 199k, False: 107k]
  ------------------
  107|   199k|    delete static_cast<MessageLite*>(elements[i]);
  108|   199k|  }
  109|   107k|  const size_t size = total_size_ * sizeof(elements[0]) + kRepHeaderSize;
  110|   107k|  internal::SizedDelete(rep_, size);
  111|   107k|  rep_ = nullptr;
  112|   107k|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase18AddOutOfLineHelperEPv:
  114|  1.22k|void* RepeatedPtrFieldBase::AddOutOfLineHelper(void* obj) {
  115|  1.22k|  if (!rep_ || rep_->allocated_size == total_size_) {
  ------------------
  |  Branch (115:7): [True: 318, False: 909]
  |  Branch (115:16): [True: 318, False: 591]
  ------------------
  116|    636|    InternalExtend(1);  // Equivalent to "Reserve(total_size_ + 1)"
  117|    636|  }
  118|  1.22k|  ++rep_->allocated_size;
  119|  1.22k|  rep_->elements[current_size_++] = obj;
  120|  1.22k|  return obj;
  121|  1.22k|}

_ZNK6google8protobuf16RepeatedPtrFieldINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE4sizeEv:
 1247|    304|inline int RepeatedPtrField<Element>::size() const {
 1248|    304|  return RepeatedPtrFieldBase::size();
 1249|    304|}
_ZN6google8protobuf16RepeatedPtrFieldINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE5ClearEv:
 1402|      9|inline void RepeatedPtrField<Element>::Clear() {
 1403|      9|  RepeatedPtrFieldBase::Clear<TypeHandler>();
 1404|      9|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase5ClearINS0_16RepeatedPtrFieldINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE11TypeHandlerEEEvv:
  282|      9|  void Clear() {
  283|      9|    const int n = current_size_;
  284|      9|    GOOGLE_DCHECK_GE(n, 0);
  ------------------
  |  |  199|      9|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|      9|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|      9|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|      9|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 9, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|      9|    if (n > 0) {
  ------------------
  |  Branch (285:9): [True: 0, False: 9]
  ------------------
  286|      0|      void* const* elements = rep_->elements;
  287|      0|      int i = 0;
  288|      0|      do {
  289|      0|        TypeHandler::Clear(cast<TypeHandler>(elements[i++]));
  290|      0|      } while (i < n);
  ------------------
  |  Branch (290:16): [True: 0, False: 0]
  ------------------
  291|      0|      current_size_ = 0;
  292|      0|    }
  293|      9|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_15DescriptorProtoEE4sizeEv:
 1247|    837|inline int RepeatedPtrField<Element>::size() const {
 1248|    837|  return RepeatedPtrFieldBase::size();
 1249|    837|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_15DescriptorProtoEE5ClearEv:
 1402|      9|inline void RepeatedPtrField<Element>::Clear() {
 1403|      9|  RepeatedPtrFieldBase::Clear<TypeHandler>();
 1404|      9|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase5ClearINS0_16RepeatedPtrFieldINS0_15DescriptorProtoEE11TypeHandlerEEEvv:
  282|      9|  void Clear() {
  283|      9|    const int n = current_size_;
  284|      9|    GOOGLE_DCHECK_GE(n, 0);
  ------------------
  |  |  199|      9|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|      9|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|      9|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|      9|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 9, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|      9|    if (n > 0) {
  ------------------
  |  Branch (285:9): [True: 0, False: 9]
  ------------------
  286|      0|      void* const* elements = rep_->elements;
  287|      0|      int i = 0;
  288|      0|      do {
  289|      0|        TypeHandler::Clear(cast<TypeHandler>(elements[i++]));
  290|      0|      } while (i < n);
  ------------------
  |  Branch (290:16): [True: 0, False: 0]
  ------------------
  291|      0|      current_size_ = 0;
  292|      0|    }
  293|      9|  }
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldINS0_15DescriptorProtoEE11TypeHandlerEEEPNT_4TypeEPv:
  649|    335|  static inline typename TypeHandler::Type* cast(void* element) {
  650|    335|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|    335|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_15DescriptorProtoEE3GetEi:
 1252|    335|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|    335|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|    335|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldINS0_15DescriptorProtoEE11TypeHandlerEEERKNT_4TypeEi:
  269|    335|  const typename TypeHandler::Type& Get(int index) const {
  270|    335|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|    335|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|    335|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|    335|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    335|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 335, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|    335|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|    335|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|    335|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|    335|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    335|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 335, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|    335|    return *cast<TypeHandler>(rep_->elements[index]);
  273|    335|  }
_ZN6google8protobuf16RepeatedPtrFieldINS0_15DescriptorProtoEE3AddEv:
 1273|    201|inline Element* RepeatedPtrField<Element>::Add() {
 1274|    201|  return RepeatedPtrFieldBase::Add<TypeHandler>();
 1275|    201|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase3AddINS0_16RepeatedPtrFieldINS0_15DescriptorProtoEE11TypeHandlerEEEPNT_4TypeEPKS9_:
  211|    201|      const typename TypeHandler::Type* prototype = nullptr) {
  212|    201|    if (rep_ != nullptr && current_size_ < rep_->allocated_size) {
  ------------------
  |  Branch (212:9): [True: 177, False: 24]
  |  Branch (212:28): [True: 0, False: 177]
  ------------------
  213|      0|      return cast<TypeHandler>(rep_->elements[current_size_++]);
  214|      0|    }
  215|    201|    typename TypeHandler::Type* result =
  216|    201|        TypeHandler::NewFromPrototype(prototype, arena_);
  217|    201|    return reinterpret_cast<typename TypeHandler::Type*>(
  218|    201|        AddOutOfLineHelper(result));
  219|    201|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_15DescriptorProtoEE16NewFromPrototypeEPKS3_PNS0_5ArenaE:
  756|    201|                                              Arena* arena = nullptr) {
  757|    201|    return New(arena);
  758|    201|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_15DescriptorProtoEE3NewEPNS0_5ArenaE:
  749|    201|  static inline GenericType* New(Arena* arena) {
  750|    201|    return Arena::CreateMaybeMessage<Type>(arena);
  751|    201|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_19EnumDescriptorProtoEE4sizeEv:
 1247|    642|inline int RepeatedPtrField<Element>::size() const {
 1248|    642|  return RepeatedPtrFieldBase::size();
 1249|    642|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_19EnumDescriptorProtoEE5ClearEv:
 1402|      9|inline void RepeatedPtrField<Element>::Clear() {
 1403|      9|  RepeatedPtrFieldBase::Clear<TypeHandler>();
 1404|      9|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase5ClearINS0_16RepeatedPtrFieldINS0_19EnumDescriptorProtoEE11TypeHandlerEEEvv:
  282|      9|  void Clear() {
  283|      9|    const int n = current_size_;
  284|      9|    GOOGLE_DCHECK_GE(n, 0);
  ------------------
  |  |  199|      9|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|      9|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|      9|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|      9|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 9, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|      9|    if (n > 0) {
  ------------------
  |  Branch (285:9): [True: 0, False: 9]
  ------------------
  286|      0|      void* const* elements = rep_->elements;
  287|      0|      int i = 0;
  288|      0|      do {
  289|      0|        TypeHandler::Clear(cast<TypeHandler>(elements[i++]));
  290|      0|      } while (i < n);
  ------------------
  |  Branch (290:16): [True: 0, False: 0]
  ------------------
  291|      0|      current_size_ = 0;
  292|      0|    }
  293|      9|  }
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldINS0_19EnumDescriptorProtoEE11TypeHandlerEEEPNT_4TypeEPv:
  649|     30|  static inline typename TypeHandler::Type* cast(void* element) {
  650|     30|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|     30|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_19EnumDescriptorProtoEE3GetEi:
 1252|     30|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|     30|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|     30|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldINS0_19EnumDescriptorProtoEE11TypeHandlerEEERKNT_4TypeEi:
  269|     30|  const typename TypeHandler::Type& Get(int index) const {
  270|     30|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|     30|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|     30|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     30|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     30|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 30, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|     30|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|     30|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|     30|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     30|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     30|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 30, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|     30|    return *cast<TypeHandler>(rep_->elements[index]);
  273|     30|  }
_ZN6google8protobuf16RepeatedPtrFieldINS0_19EnumDescriptorProtoEE3AddEv:
 1273|     18|inline Element* RepeatedPtrField<Element>::Add() {
 1274|     18|  return RepeatedPtrFieldBase::Add<TypeHandler>();
 1275|     18|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase3AddINS0_16RepeatedPtrFieldINS0_19EnumDescriptorProtoEE11TypeHandlerEEEPNT_4TypeEPKS9_:
  211|     18|      const typename TypeHandler::Type* prototype = nullptr) {
  212|     18|    if (rep_ != nullptr && current_size_ < rep_->allocated_size) {
  ------------------
  |  Branch (212:9): [True: 6, False: 12]
  |  Branch (212:28): [True: 0, False: 6]
  ------------------
  213|      0|      return cast<TypeHandler>(rep_->elements[current_size_++]);
  214|      0|    }
  215|     18|    typename TypeHandler::Type* result =
  216|     18|        TypeHandler::NewFromPrototype(prototype, arena_);
  217|     18|    return reinterpret_cast<typename TypeHandler::Type*>(
  218|     18|        AddOutOfLineHelper(result));
  219|     18|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_19EnumDescriptorProtoEE16NewFromPrototypeEPKS3_PNS0_5ArenaE:
  756|     18|                                              Arena* arena = nullptr) {
  757|     18|    return New(arena);
  758|     18|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_19EnumDescriptorProtoEE3NewEPNS0_5ArenaE:
  749|     18|  static inline GenericType* New(Arena* arena) {
  750|     18|    return Arena::CreateMaybeMessage<Type>(arena);
  751|     18|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_22ServiceDescriptorProtoEE4sizeEv:
 1247|     33|inline int RepeatedPtrField<Element>::size() const {
 1248|     33|  return RepeatedPtrFieldBase::size();
 1249|     33|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_22ServiceDescriptorProtoEE5ClearEv:
 1402|      9|inline void RepeatedPtrField<Element>::Clear() {
 1403|      9|  RepeatedPtrFieldBase::Clear<TypeHandler>();
 1404|      9|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase5ClearINS0_16RepeatedPtrFieldINS0_22ServiceDescriptorProtoEE11TypeHandlerEEEvv:
  282|      9|  void Clear() {
  283|      9|    const int n = current_size_;
  284|      9|    GOOGLE_DCHECK_GE(n, 0);
  ------------------
  |  |  199|      9|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|      9|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|      9|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|      9|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 9, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|      9|    if (n > 0) {
  ------------------
  |  Branch (285:9): [True: 0, False: 9]
  ------------------
  286|      0|      void* const* elements = rep_->elements;
  287|      0|      int i = 0;
  288|      0|      do {
  289|      0|        TypeHandler::Clear(cast<TypeHandler>(elements[i++]));
  290|      0|      } while (i < n);
  ------------------
  |  Branch (290:16): [True: 0, False: 0]
  ------------------
  291|      0|      current_size_ = 0;
  292|      0|    }
  293|      9|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_20FieldDescriptorProtoEE4sizeEv:
 1247|  1.77k|inline int RepeatedPtrField<Element>::size() const {
 1248|  1.77k|  return RepeatedPtrFieldBase::size();
 1249|  1.77k|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_20FieldDescriptorProtoEE5ClearEv:
 1402|      9|inline void RepeatedPtrField<Element>::Clear() {
 1403|      9|  RepeatedPtrFieldBase::Clear<TypeHandler>();
 1404|      9|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase5ClearINS0_16RepeatedPtrFieldINS0_20FieldDescriptorProtoEE11TypeHandlerEEEvv:
  282|      9|  void Clear() {
  283|      9|    const int n = current_size_;
  284|      9|    GOOGLE_DCHECK_GE(n, 0);
  ------------------
  |  |  199|      9|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|      9|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|      9|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|      9|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 9, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|      9|    if (n > 0) {
  ------------------
  |  Branch (285:9): [True: 0, False: 9]
  ------------------
  286|      0|      void* const* elements = rep_->elements;
  287|      0|      int i = 0;
  288|      0|      do {
  289|      0|        TypeHandler::Clear(cast<TypeHandler>(elements[i++]));
  290|      0|      } while (i < n);
  ------------------
  |  Branch (290:16): [True: 0, False: 0]
  ------------------
  291|      0|      current_size_ = 0;
  292|      0|    }
  293|      9|  }
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldINS0_20FieldDescriptorProtoEE11TypeHandlerEEEPNT_4TypeEPv:
  649|  1.59k|  static inline typename TypeHandler::Type* cast(void* element) {
  650|  1.59k|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|  1.59k|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_20FieldDescriptorProtoEE3GetEi:
 1252|  1.59k|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|  1.59k|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|  1.59k|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldINS0_20FieldDescriptorProtoEE11TypeHandlerEEERKNT_4TypeEi:
  269|  1.59k|  const typename TypeHandler::Type& Get(int index) const {
  270|  1.59k|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|  1.59k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|  1.59k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  1.59k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  1.59k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 1.59k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|  1.59k|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|  1.59k|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|  1.59k|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  1.59k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  1.59k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 1.59k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|  1.59k|    return *cast<TypeHandler>(rep_->elements[index]);
  273|  1.59k|  }
_ZN6google8protobuf16RepeatedPtrFieldINS0_20FieldDescriptorProtoEE3AddEv:
 1273|    825|inline Element* RepeatedPtrField<Element>::Add() {
 1274|    825|  return RepeatedPtrFieldBase::Add<TypeHandler>();
 1275|    825|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase3AddINS0_16RepeatedPtrFieldINS0_20FieldDescriptorProtoEE11TypeHandlerEEEPNT_4TypeEPKS9_:
  211|    825|      const typename TypeHandler::Type* prototype = nullptr) {
  212|    825|    if (rep_ != nullptr && current_size_ < rep_->allocated_size) {
  ------------------
  |  Branch (212:9): [True: 633, False: 192]
  |  Branch (212:28): [True: 0, False: 633]
  ------------------
  213|      0|      return cast<TypeHandler>(rep_->elements[current_size_++]);
  214|      0|    }
  215|    825|    typename TypeHandler::Type* result =
  216|    825|        TypeHandler::NewFromPrototype(prototype, arena_);
  217|    825|    return reinterpret_cast<typename TypeHandler::Type*>(
  218|    825|        AddOutOfLineHelper(result));
  219|    825|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_20FieldDescriptorProtoEE16NewFromPrototypeEPKS3_PNS0_5ArenaE:
  756|    825|                                              Arena* arena = nullptr) {
  757|    825|    return New(arena);
  758|    825|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_20FieldDescriptorProtoEE3NewEPNS0_5ArenaE:
  749|    825|  static inline GenericType* New(Arena* arena) {
  750|    825|    return Arena::CreateMaybeMessage<Type>(arena);
  751|    825|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_30DescriptorProto_ExtensionRangeEE4sizeEv:
 1247|    545|inline int RepeatedPtrField<Element>::size() const {
 1248|    545|  return RepeatedPtrFieldBase::size();
 1249|    545|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldINS0_30DescriptorProto_ExtensionRangeEE11TypeHandlerEEEPNT_4TypeEPv:
  649|     45|  static inline typename TypeHandler::Type* cast(void* element) {
  650|     45|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|     45|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_30DescriptorProto_ExtensionRangeEE3GetEi:
 1252|     45|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|     45|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|     45|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldINS0_30DescriptorProto_ExtensionRangeEE11TypeHandlerEEERKNT_4TypeEi:
  269|     45|  const typename TypeHandler::Type& Get(int index) const {
  270|     45|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|     45|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|     45|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     45|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     45|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 45, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|     45|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|     45|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|     45|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     45|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     45|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 45, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|     45|    return *cast<TypeHandler>(rep_->elements[index]);
  273|     45|  }
_ZN6google8protobuf16RepeatedPtrFieldINS0_30DescriptorProto_ExtensionRangeEE3AddEv:
 1273|     27|inline Element* RepeatedPtrField<Element>::Add() {
 1274|     27|  return RepeatedPtrFieldBase::Add<TypeHandler>();
 1275|     27|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase3AddINS0_16RepeatedPtrFieldINS0_30DescriptorProto_ExtensionRangeEE11TypeHandlerEEEPNT_4TypeEPKS9_:
  211|     27|      const typename TypeHandler::Type* prototype = nullptr) {
  212|     27|    if (rep_ != nullptr && current_size_ < rep_->allocated_size) {
  ------------------
  |  Branch (212:9): [True: 0, False: 27]
  |  Branch (212:28): [True: 0, False: 0]
  ------------------
  213|      0|      return cast<TypeHandler>(rep_->elements[current_size_++]);
  214|      0|    }
  215|     27|    typename TypeHandler::Type* result =
  216|     27|        TypeHandler::NewFromPrototype(prototype, arena_);
  217|     27|    return reinterpret_cast<typename TypeHandler::Type*>(
  218|     27|        AddOutOfLineHelper(result));
  219|     27|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_30DescriptorProto_ExtensionRangeEE16NewFromPrototypeEPKS3_PNS0_5ArenaE:
  756|     27|                                              Arena* arena = nullptr) {
  757|     27|    return New(arena);
  758|     27|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_30DescriptorProto_ExtensionRangeEE3NewEPNS0_5ArenaE:
  749|     27|  static inline GenericType* New(Arena* arena) {
  750|     27|    return Arena::CreateMaybeMessage<Type>(arena);
  751|     27|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_20OneofDescriptorProtoEE4sizeEv:
 1247|    614|inline int RepeatedPtrField<Element>::size() const {
 1248|    614|  return RepeatedPtrFieldBase::size();
 1249|    614|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldINS0_20OneofDescriptorProtoEE11TypeHandlerEEEPNT_4TypeEPv:
  649|     44|  static inline typename TypeHandler::Type* cast(void* element) {
  650|     44|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|     44|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_20OneofDescriptorProtoEE3GetEi:
 1252|     44|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|     44|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|     44|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldINS0_20OneofDescriptorProtoEE11TypeHandlerEEERKNT_4TypeEi:
  269|     44|  const typename TypeHandler::Type& Get(int index) const {
  270|     44|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|     44|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|     44|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     44|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     44|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 44, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|     44|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|     44|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|     44|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     44|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     44|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 44, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|     44|    return *cast<TypeHandler>(rep_->elements[index]);
  273|     44|  }
_ZN6google8protobuf16RepeatedPtrFieldINS0_20OneofDescriptorProtoEE3AddEv:
 1273|     33|inline Element* RepeatedPtrField<Element>::Add() {
 1274|     33|  return RepeatedPtrFieldBase::Add<TypeHandler>();
 1275|     33|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase3AddINS0_16RepeatedPtrFieldINS0_20OneofDescriptorProtoEE11TypeHandlerEEEPNT_4TypeEPKS9_:
  211|     33|      const typename TypeHandler::Type* prototype = nullptr) {
  212|     33|    if (rep_ != nullptr && current_size_ < rep_->allocated_size) {
  ------------------
  |  Branch (212:9): [True: 0, False: 33]
  |  Branch (212:28): [True: 0, False: 0]
  ------------------
  213|      0|      return cast<TypeHandler>(rep_->elements[current_size_++]);
  214|      0|    }
  215|     33|    typename TypeHandler::Type* result =
  216|     33|        TypeHandler::NewFromPrototype(prototype, arena_);
  217|     33|    return reinterpret_cast<typename TypeHandler::Type*>(
  218|     33|        AddOutOfLineHelper(result));
  219|     33|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_20OneofDescriptorProtoEE16NewFromPrototypeEPKS3_PNS0_5ArenaE:
  756|     33|                                              Arena* arena = nullptr) {
  757|     33|    return New(arena);
  758|     33|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_20OneofDescriptorProtoEE3NewEPNS0_5ArenaE:
  749|     33|  static inline GenericType* New(Arena* arena) {
  750|     33|    return Arena::CreateMaybeMessage<Type>(arena);
  751|     33|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_29DescriptorProto_ReservedRangeEE4sizeEv:
 1247|    369|inline int RepeatedPtrField<Element>::size() const {
 1248|    369|  return RepeatedPtrFieldBase::size();
 1249|    369|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldINS0_29DescriptorProto_ReservedRangeEE11TypeHandlerEEEPNT_4TypeEPv:
  649|     26|  static inline typename TypeHandler::Type* cast(void* element) {
  650|     26|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|     26|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_29DescriptorProto_ReservedRangeEE3GetEi:
 1252|     26|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|     26|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|     26|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldINS0_29DescriptorProto_ReservedRangeEE11TypeHandlerEEERKNT_4TypeEi:
  269|     26|  const typename TypeHandler::Type& Get(int index) const {
  270|     26|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|     26|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|     26|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     26|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     26|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 26, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|     26|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|     26|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|     26|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|     26|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|     26|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 26, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|     26|    return *cast<TypeHandler>(rep_->elements[index]);
  273|     26|  }
_ZN6google8protobuf16RepeatedPtrFieldINS0_29DescriptorProto_ReservedRangeEE3AddEv:
 1273|     24|inline Element* RepeatedPtrField<Element>::Add() {
 1274|     24|  return RepeatedPtrFieldBase::Add<TypeHandler>();
 1275|     24|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase3AddINS0_16RepeatedPtrFieldINS0_29DescriptorProto_ReservedRangeEE11TypeHandlerEEEPNT_4TypeEPKS9_:
  211|     24|      const typename TypeHandler::Type* prototype = nullptr) {
  212|     24|    if (rep_ != nullptr && current_size_ < rep_->allocated_size) {
  ------------------
  |  Branch (212:9): [True: 12, False: 12]
  |  Branch (212:28): [True: 0, False: 12]
  ------------------
  213|      0|      return cast<TypeHandler>(rep_->elements[current_size_++]);
  214|      0|    }
  215|     24|    typename TypeHandler::Type* result =
  216|     24|        TypeHandler::NewFromPrototype(prototype, arena_);
  217|     24|    return reinterpret_cast<typename TypeHandler::Type*>(
  218|     24|        AddOutOfLineHelper(result));
  219|     24|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_29DescriptorProto_ReservedRangeEE16NewFromPrototypeEPKS3_PNS0_5ArenaE:
  756|     24|                                              Arena* arena = nullptr) {
  757|     24|    return New(arena);
  758|     24|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_29DescriptorProto_ReservedRangeEE3NewEPNS0_5ArenaE:
  749|     24|  static inline GenericType* New(Arena* arena) {
  750|     24|    return Arena::CreateMaybeMessage<Type>(arena);
  751|     24|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_19UninterpretedOptionEE4sizeEv:
 1247|     60|inline int RepeatedPtrField<Element>::size() const {
 1248|     60|  return RepeatedPtrFieldBase::size();
 1249|     60|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_19UninterpretedOptionEE5ClearEv:
 1402|      6|inline void RepeatedPtrField<Element>::Clear() {
 1403|      6|  RepeatedPtrFieldBase::Clear<TypeHandler>();
 1404|      6|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase5ClearINS0_16RepeatedPtrFieldINS0_19UninterpretedOptionEE11TypeHandlerEEEvv:
  282|      6|  void Clear() {
  283|      6|    const int n = current_size_;
  284|      6|    GOOGLE_DCHECK_GE(n, 0);
  ------------------
  |  |  199|      6|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|      6|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|      6|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|      6|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 6, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|      6|    if (n > 0) {
  ------------------
  |  Branch (285:9): [True: 0, False: 6]
  ------------------
  286|      0|      void* const* elements = rep_->elements;
  287|      0|      int i = 0;
  288|      0|      do {
  289|      0|        TypeHandler::Clear(cast<TypeHandler>(elements[i++]));
  290|      0|      } while (i < n);
  ------------------
  |  Branch (290:16): [True: 0, False: 0]
  ------------------
  291|      0|      current_size_ = 0;
  292|      0|    }
  293|      6|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_24EnumValueDescriptorProtoEE4sizeEv:
 1247|    132|inline int RepeatedPtrField<Element>::size() const {
 1248|    132|  return RepeatedPtrFieldBase::size();
 1249|    132|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS0_16RepeatedPtrFieldINS0_24EnumValueDescriptorProtoEE11TypeHandlerEEEPNT_4TypeEPv:
  649|    231|  static inline typename TypeHandler::Type* cast(void* element) {
  650|    231|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|    231|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_24EnumValueDescriptorProtoEE3GetEi:
 1252|    231|inline const Element& RepeatedPtrField<Element>::Get(int index) const {
 1253|    231|  return RepeatedPtrFieldBase::Get<TypeHandler>(index);
 1254|    231|}
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldINS0_24EnumValueDescriptorProtoEE11TypeHandlerEEERKNT_4TypeEi:
  269|    231|  const typename TypeHandler::Type& Get(int index) const {
  270|    231|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|    231|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|    231|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|    231|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    231|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 231, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|    231|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|    231|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|    231|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|    231|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    231|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 231, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|    231|    return *cast<TypeHandler>(rep_->elements[index]);
  273|    231|  }
_ZN6google8protobuf16RepeatedPtrFieldINS0_24EnumValueDescriptorProtoEE3AddEv:
 1273|     99|inline Element* RepeatedPtrField<Element>::Add() {
 1274|     99|  return RepeatedPtrFieldBase::Add<TypeHandler>();
 1275|     99|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase3AddINS0_16RepeatedPtrFieldINS0_24EnumValueDescriptorProtoEE11TypeHandlerEEEPNT_4TypeEPKS9_:
  211|     99|      const typename TypeHandler::Type* prototype = nullptr) {
  212|     99|    if (rep_ != nullptr && current_size_ < rep_->allocated_size) {
  ------------------
  |  Branch (212:9): [True: 81, False: 18]
  |  Branch (212:28): [True: 0, False: 81]
  ------------------
  213|      0|      return cast<TypeHandler>(rep_->elements[current_size_++]);
  214|      0|    }
  215|     99|    typename TypeHandler::Type* result =
  216|     99|        TypeHandler::NewFromPrototype(prototype, arena_);
  217|     99|    return reinterpret_cast<typename TypeHandler::Type*>(
  218|     99|        AddOutOfLineHelper(result));
  219|     99|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_24EnumValueDescriptorProtoEE16NewFromPrototypeEPKS3_PNS0_5ArenaE:
  756|     99|                                              Arena* arena = nullptr) {
  757|     99|    return New(arena);
  758|     99|  }
_ZN6google8protobuf8internal18GenericTypeHandlerINS0_24EnumValueDescriptorProtoEE3NewEPNS0_5ArenaE:
  749|     99|  static inline GenericType* New(Arena* arena) {
  750|     99|    return Arena::CreateMaybeMessage<Type>(arena);
  751|     99|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_37EnumDescriptorProto_EnumReservedRangeEE4sizeEv:
 1247|     30|inline int RepeatedPtrField<Element>::size() const {
 1248|     30|  return RepeatedPtrFieldBase::size();
 1249|     30|}
_ZN6google8protobuf16RepeatedPtrFieldINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEC2EPNS0_5ArenaE:
 1169|    228|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEED2Ev:
 1185|    228|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|       |#ifdef __cpp_if_constexpr
 1187|       |  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|    228|  if (std::is_base_of<MessageLite, Element>::value) {
  ------------------
  |  Branch (1189:7): [Folded - Ignored]
  ------------------
 1190|      0|#endif
 1191|      0|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 0, False: 0]
  ------------------
 1192|    228|  } else {
 1193|    228|    Destroy<TypeHandler>();
 1194|    228|  }
 1195|    228|}
_ZN6google8protobuf8internal20RepeatedPtrFieldBase7DestroyINS0_16RepeatedPtrFieldINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE11TypeHandlerEEEvv:
  247|    228|  void Destroy() {
  248|    228|    if (rep_ != nullptr && arena_ == nullptr) {
  ------------------
  |  Branch (248:9): [True: 0, False: 228]
  |  Branch (248:28): [True: 0, False: 0]
  ------------------
  249|      0|      int n = rep_->allocated_size;
  250|      0|      void* const* elements = rep_->elements;
  251|      0|      for (int i = 0; i < n; i++) {
  ------------------
  |  Branch (251:23): [True: 0, False: 0]
  ------------------
  252|      0|        TypeHandler::Delete(cast<TypeHandler>(elements[i]), nullptr);
  253|      0|      }
  254|      0|      const size_t size = total_size_ * sizeof(elements[0]) + kRepHeaderSize;
  255|      0|      internal::SizedDelete(rep_, size);
  256|      0|    }
  257|    228|    rep_ = nullptr;
  258|    228|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_22ServiceDescriptorProtoEE5beginEv:
 1758|      9|RepeatedPtrField<Element>::begin() const {
 1759|      9|  return iterator(raw_data());
 1760|      9|}
_ZN6google8protobuf8internal19RepeatedPtrIteratorINS0_22ServiceDescriptorProtoEEC2EPKPv:
 1556|     18|  explicit RepeatedPtrIterator(void* const* it) : it_(it) {}
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_22ServiceDescriptorProtoEEC2IS3_TnPNSt3__19enable_ifIXsr3std14is_convertibleIPT_PS4_EE5valueEvE4typeELPv0EEERKNS2_IS9_EE:
 1564|     18|      : it_(other.it_) {}
_ZNK6google8protobuf16RepeatedPtrFieldINS0_22ServiceDescriptorProtoEE3endEv:
 1773|      9|RepeatedPtrField<Element>::end() const {
 1774|      9|  return iterator(raw_data() + size());
 1775|      9|}
_ZN6google8protobuf8internalneERKNS1_19RepeatedPtrIteratorIKNS0_22ServiceDescriptorProtoEEES7_:
 1586|      9|  friend bool operator!=(const iterator& x, const iterator& y) {
 1587|      9|    return x.it_ != y.it_;
 1588|      9|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_15DescriptorProtoEE5beginEv:
 1758|    210|RepeatedPtrField<Element>::begin() const {
 1759|    210|  return iterator(raw_data());
 1760|    210|}
_ZN6google8protobuf8internal19RepeatedPtrIteratorINS0_15DescriptorProtoEEC2EPKPv:
 1556|    420|  explicit RepeatedPtrIterator(void* const* it) : it_(it) {}
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_15DescriptorProtoEEC2IS3_TnPNSt3__19enable_ifIXsr3std14is_convertibleIPT_PS4_EE5valueEvE4typeELPv0EEERKNS2_IS9_EE:
 1564|    420|      : it_(other.it_) {}
_ZNK6google8protobuf16RepeatedPtrFieldINS0_15DescriptorProtoEE3endEv:
 1773|    210|RepeatedPtrField<Element>::end() const {
 1774|    210|  return iterator(raw_data() + size());
 1775|    210|}
_ZN6google8protobuf8internalneERKNS1_19RepeatedPtrIteratorIKNS0_15DescriptorProtoEEES7_:
 1586|    411|  friend bool operator!=(const iterator& x, const iterator& y) {
 1587|    411|    return x.it_ != y.it_;
 1588|    411|  }
_ZNK6google8protobuf8internal19RepeatedPtrIteratorIKNS0_15DescriptorProtoEEdeEv:
 1567|    201|  reference operator*() const { return *reinterpret_cast<Element*>(*it_); }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_30DescriptorProto_ExtensionRangeEE5beginEv:
 1758|     67|RepeatedPtrField<Element>::begin() const {
 1759|     67|  return iterator(raw_data());
 1760|     67|}
_ZN6google8protobuf8internal19RepeatedPtrIteratorINS0_30DescriptorProto_ExtensionRangeEEC2EPKPv:
 1556|    134|  explicit RepeatedPtrIterator(void* const* it) : it_(it) {}
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_30DescriptorProto_ExtensionRangeEEC2IS3_TnPNSt3__19enable_ifIXsr3std14is_convertibleIPT_PS4_EE5valueEvE4typeELPv0EEERKNS2_IS9_EE:
 1564|    134|      : it_(other.it_) {}
_ZNK6google8protobuf16RepeatedPtrFieldINS0_30DescriptorProto_ExtensionRangeEE3endEv:
 1773|     67|RepeatedPtrField<Element>::end() const {
 1774|     67|  return iterator(raw_data() + size());
 1775|     67|}
_ZN6google8protobuf8internalneERKNS1_19RepeatedPtrIteratorIKNS0_30DescriptorProto_ExtensionRangeEEES7_:
 1586|     76|  friend bool operator!=(const iterator& x, const iterator& y) {
 1587|     76|    return x.it_ != y.it_;
 1588|     76|  }
_ZNK6google8protobuf8internal19RepeatedPtrIteratorIKNS0_30DescriptorProto_ExtensionRangeEEdeEv:
 1567|      9|  reference operator*() const { return *reinterpret_cast<Element*>(*it_); }
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_30DescriptorProto_ExtensionRangeEEppEv:
 1571|      9|  iterator& operator++() {
 1572|      9|    ++it_;
 1573|      9|    return *this;
 1574|      9|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_20OneofDescriptorProtoEE5beginEv:
 1758|     67|RepeatedPtrField<Element>::begin() const {
 1759|     67|  return iterator(raw_data());
 1760|     67|}
_ZN6google8protobuf8internal19RepeatedPtrIteratorINS0_20OneofDescriptorProtoEEC2EPKPv:
 1556|    134|  explicit RepeatedPtrIterator(void* const* it) : it_(it) {}
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_20OneofDescriptorProtoEEC2IS3_TnPNSt3__19enable_ifIXsr3std14is_convertibleIPT_PS4_EE5valueEvE4typeELPv0EEERKNS2_IS9_EE:
 1564|    134|      : it_(other.it_) {}
_ZNK6google8protobuf16RepeatedPtrFieldINS0_20OneofDescriptorProtoEE3endEv:
 1773|     67|RepeatedPtrField<Element>::end() const {
 1774|     67|  return iterator(raw_data() + size());
 1775|     67|}
_ZN6google8protobuf8internalneERKNS1_19RepeatedPtrIteratorIKNS0_20OneofDescriptorProtoEEES7_:
 1586|     78|  friend bool operator!=(const iterator& x, const iterator& y) {
 1587|     78|    return x.it_ != y.it_;
 1588|     78|  }
_ZNK6google8protobuf8internal19RepeatedPtrIteratorIKNS0_20OneofDescriptorProtoEEdeEv:
 1567|     11|  reference operator*() const { return *reinterpret_cast<Element*>(*it_); }
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_20OneofDescriptorProtoEEppEv:
 1571|     11|  iterator& operator++() {
 1572|     11|    ++it_;
 1573|     11|    return *this;
 1574|     11|  }
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_15DescriptorProtoEEppEv:
 1571|    201|  iterator& operator++() {
 1572|    201|    ++it_;
 1573|    201|    return *this;
 1574|    201|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_19EnumDescriptorProtoEE5beginEv:
 1758|     76|RepeatedPtrField<Element>::begin() const {
 1759|     76|  return iterator(raw_data());
 1760|     76|}
_ZN6google8protobuf8internal19RepeatedPtrIteratorINS0_19EnumDescriptorProtoEEC2EPKPv:
 1556|    152|  explicit RepeatedPtrIterator(void* const* it) : it_(it) {}
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_19EnumDescriptorProtoEEC2IS3_TnPNSt3__19enable_ifIXsr3std14is_convertibleIPT_PS4_EE5valueEvE4typeELPv0EEERKNS2_IS9_EE:
 1564|    152|      : it_(other.it_) {}
_ZNK6google8protobuf16RepeatedPtrFieldINS0_19EnumDescriptorProtoEE3endEv:
 1773|     76|RepeatedPtrField<Element>::end() const {
 1774|     76|  return iterator(raw_data() + size());
 1775|     76|}
_ZN6google8protobuf8internalneERKNS1_19RepeatedPtrIteratorIKNS0_19EnumDescriptorProtoEEES7_:
 1586|     82|  friend bool operator!=(const iterator& x, const iterator& y) {
 1587|     82|    return x.it_ != y.it_;
 1588|     82|  }
_ZNK6google8protobuf8internal19RepeatedPtrIteratorIKNS0_19EnumDescriptorProtoEEdeEv:
 1567|      6|  reference operator*() const { return *reinterpret_cast<Element*>(*it_); }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_24EnumValueDescriptorProtoEE5beginEv:
 1758|      6|RepeatedPtrField<Element>::begin() const {
 1759|      6|  return iterator(raw_data());
 1760|      6|}
_ZN6google8protobuf8internal19RepeatedPtrIteratorINS0_24EnumValueDescriptorProtoEEC2EPKPv:
 1556|     12|  explicit RepeatedPtrIterator(void* const* it) : it_(it) {}
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_24EnumValueDescriptorProtoEEC2IS3_TnPNSt3__19enable_ifIXsr3std14is_convertibleIPT_PS4_EE5valueEvE4typeELPv0EEERKNS2_IS9_EE:
 1564|     12|      : it_(other.it_) {}
_ZNK6google8protobuf16RepeatedPtrFieldINS0_24EnumValueDescriptorProtoEE3endEv:
 1773|      6|RepeatedPtrField<Element>::end() const {
 1774|      6|  return iterator(raw_data() + size());
 1775|      6|}
_ZN6google8protobuf8internalneERKNS1_19RepeatedPtrIteratorIKNS0_24EnumValueDescriptorProtoEEES7_:
 1586|     39|  friend bool operator!=(const iterator& x, const iterator& y) {
 1587|     39|    return x.it_ != y.it_;
 1588|     39|  }
_ZNK6google8protobuf8internal19RepeatedPtrIteratorIKNS0_24EnumValueDescriptorProtoEEdeEv:
 1567|     33|  reference operator*() const { return *reinterpret_cast<Element*>(*it_); }
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_24EnumValueDescriptorProtoEEppEv:
 1571|     33|  iterator& operator++() {
 1572|     33|    ++it_;
 1573|     33|    return *this;
 1574|     33|  }
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_19EnumDescriptorProtoEEppEv:
 1571|      6|  iterator& operator++() {
 1572|      6|    ++it_;
 1573|      6|    return *this;
 1574|      6|  }
_ZNK6google8protobuf16RepeatedPtrFieldINS0_20FieldDescriptorProtoEE5beginEv:
 1758|    277|RepeatedPtrField<Element>::begin() const {
 1759|    277|  return iterator(raw_data());
 1760|    277|}
_ZN6google8protobuf8internal19RepeatedPtrIteratorINS0_20FieldDescriptorProtoEEC2EPKPv:
 1556|    554|  explicit RepeatedPtrIterator(void* const* it) : it_(it) {}
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_20FieldDescriptorProtoEEC2IS3_TnPNSt3__19enable_ifIXsr3std14is_convertibleIPT_PS4_EE5valueEvE4typeELPv0EEERKNS2_IS9_EE:
 1564|    554|      : it_(other.it_) {}
_ZNK6google8protobuf16RepeatedPtrFieldINS0_20FieldDescriptorProtoEE3endEv:
 1773|    277|RepeatedPtrField<Element>::end() const {
 1774|    277|  return iterator(raw_data() + size());
 1775|    277|}
_ZN6google8protobuf8internalneERKNS1_19RepeatedPtrIteratorIKNS0_20FieldDescriptorProtoEEES7_:
 1586|    552|  friend bool operator!=(const iterator& x, const iterator& y) {
 1587|    552|    return x.it_ != y.it_;
 1588|    552|  }
_ZNK6google8protobuf8internal19RepeatedPtrIteratorIKNS0_20FieldDescriptorProtoEEdeEv:
 1567|    275|  reference operator*() const { return *reinterpret_cast<Element*>(*it_); }
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_20FieldDescriptorProtoEEppEv:
 1571|    275|  iterator& operator++() {
 1572|    275|    ++it_;
 1573|    275|    return *this;
 1574|    275|  }
_ZN6google8protobuf16RepeatedPtrFieldINS0_15DescriptorProtoEEC2EPNS0_5ArenaE:
 1169|    210|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldINS0_19EnumDescriptorProtoEEC2EPNS0_5ArenaE:
 1169|    210|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldINS0_22ServiceDescriptorProtoEEC2EPNS0_5ArenaE:
 1169|      9|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldINS0_20FieldDescriptorProtoEEC2EPNS0_5ArenaE:
 1169|    411|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldINS0_15DescriptorProtoEED2Ev:
 1185|    210|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|       |#ifdef __cpp_if_constexpr
 1187|       |  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|    210|  if (std::is_base_of<MessageLite, Element>::value) {
  ------------------
  |  Branch (1189:7): [Folded - Ignored]
  ------------------
 1190|    210|#endif
 1191|    210|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 24, False: 186]
  ------------------
 1192|    210|  } else {
 1193|      0|    Destroy<TypeHandler>();
 1194|      0|  }
 1195|    210|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_19EnumDescriptorProtoEED2Ev:
 1185|    210|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|       |#ifdef __cpp_if_constexpr
 1187|       |  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|    210|  if (std::is_base_of<MessageLite, Element>::value) {
  ------------------
  |  Branch (1189:7): [Folded - Ignored]
  ------------------
 1190|    210|#endif
 1191|    210|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 12, False: 198]
  ------------------
 1192|    210|  } else {
 1193|      0|    Destroy<TypeHandler>();
 1194|      0|  }
 1195|    210|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_22ServiceDescriptorProtoEED2Ev:
 1185|      9|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|       |#ifdef __cpp_if_constexpr
 1187|       |  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|      9|  if (std::is_base_of<MessageLite, Element>::value) {
  ------------------
  |  Branch (1189:7): [Folded - Ignored]
  ------------------
 1190|      9|#endif
 1191|      9|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 0, False: 9]
  ------------------
 1192|      9|  } else {
 1193|      0|    Destroy<TypeHandler>();
 1194|      0|  }
 1195|      9|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_20FieldDescriptorProtoEED2Ev:
 1185|    411|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|       |#ifdef __cpp_if_constexpr
 1187|       |  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|    411|  if (std::is_base_of<MessageLite, Element>::value) {
  ------------------
  |  Branch (1189:7): [Folded - Ignored]
  ------------------
 1190|    411|#endif
 1191|    411|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 192, False: 219]
  ------------------
 1192|    411|  } else {
 1193|      0|    Destroy<TypeHandler>();
 1194|      0|  }
 1195|    411|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_30DescriptorProto_ExtensionRangeEEC2EPNS0_5ArenaE:
 1169|    201|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldINS0_20OneofDescriptorProtoEEC2EPNS0_5ArenaE:
 1169|    201|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldINS0_29DescriptorProto_ReservedRangeEEC2EPNS0_5ArenaE:
 1169|    201|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldINS0_30DescriptorProto_ExtensionRangeEED2Ev:
 1185|    201|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|       |#ifdef __cpp_if_constexpr
 1187|       |  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|    201|  if (std::is_base_of<MessageLite, Element>::value) {
  ------------------
  |  Branch (1189:7): [Folded - Ignored]
  ------------------
 1190|    201|#endif
 1191|    201|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 27, False: 174]
  ------------------
 1192|    201|  } else {
 1193|      0|    Destroy<TypeHandler>();
 1194|      0|  }
 1195|    201|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_20OneofDescriptorProtoEED2Ev:
 1185|    201|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|       |#ifdef __cpp_if_constexpr
 1187|       |  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|    201|  if (std::is_base_of<MessageLite, Element>::value) {
  ------------------
  |  Branch (1189:7): [Folded - Ignored]
  ------------------
 1190|    201|#endif
 1191|    201|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 33, False: 168]
  ------------------
 1192|    201|  } else {
 1193|      0|    Destroy<TypeHandler>();
 1194|      0|  }
 1195|    201|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_29DescriptorProto_ReservedRangeEED2Ev:
 1185|    201|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|       |#ifdef __cpp_if_constexpr
 1187|       |  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|    201|  if (std::is_base_of<MessageLite, Element>::value) {
  ------------------
  |  Branch (1189:7): [Folded - Ignored]
  ------------------
 1190|    201|#endif
 1191|    201|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 12, False: 189]
  ------------------
 1192|    201|  } else {
 1193|      0|    Destroy<TypeHandler>();
 1194|      0|  }
 1195|    201|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_19UninterpretedOptionEEC2EPNS0_5ArenaE:
 1169|     24|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldINS0_19UninterpretedOptionEED2Ev:
 1185|     18|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|       |#ifdef __cpp_if_constexpr
 1187|       |  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|     18|  if (std::is_base_of<MessageLite, Element>::value) {
  ------------------
  |  Branch (1189:7): [Folded - Ignored]
  ------------------
 1190|     18|#endif
 1191|     18|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 0, False: 18]
  ------------------
 1192|     18|  } else {
 1193|      0|    Destroy<TypeHandler>();
 1194|      0|  }
 1195|     18|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_24EnumValueDescriptorProtoEEC2EPNS0_5ArenaE:
 1169|     18|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldINS0_37EnumDescriptorProto_EnumReservedRangeEEC2EPNS0_5ArenaE:
 1169|     18|    : RepeatedPtrFieldBase(arena) {}
_ZN6google8protobuf16RepeatedPtrFieldINS0_24EnumValueDescriptorProtoEED2Ev:
 1185|     18|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|       |#ifdef __cpp_if_constexpr
 1187|       |  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|     18|  if (std::is_base_of<MessageLite, Element>::value) {
  ------------------
  |  Branch (1189:7): [Folded - Ignored]
  ------------------
 1190|     18|#endif
 1191|     18|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 18, False: 0]
  ------------------
 1192|     18|  } else {
 1193|      0|    Destroy<TypeHandler>();
 1194|      0|  }
 1195|     18|}
_ZN6google8protobuf16RepeatedPtrFieldINS0_37EnumDescriptorProto_EnumReservedRangeEED2Ev:
 1185|     18|RepeatedPtrField<Element>::~RepeatedPtrField() {
 1186|       |#ifdef __cpp_if_constexpr
 1187|       |  if constexpr (std::is_base_of<MessageLite, Element>::value) {
 1188|       |#else
 1189|     18|  if (std::is_base_of<MessageLite, Element>::value) {
  ------------------
  |  Branch (1189:7): [Folded - Ignored]
  ------------------
 1190|     18|#endif
 1191|     18|    if (NeedsDestroy()) DestroyProtos();
  ------------------
  |  Branch (1191:9): [True: 0, False: 18]
  ------------------
 1192|     18|  } else {
 1193|      0|    Destroy<TypeHandler>();
 1194|      0|  }
 1195|     18|}
_ZNK6google8protobuf16RepeatedPtrFieldINS0_19UninterpretedOptionEE5beginEv:
 1758|      6|RepeatedPtrField<Element>::begin() const {
 1759|      6|  return iterator(raw_data());
 1760|      6|}
_ZN6google8protobuf8internal19RepeatedPtrIteratorINS0_19UninterpretedOptionEEC2EPKPv:
 1556|     12|  explicit RepeatedPtrIterator(void* const* it) : it_(it) {}
_ZN6google8protobuf8internal19RepeatedPtrIteratorIKNS0_19UninterpretedOptionEEC2IS3_TnPNSt3__19enable_ifIXsr3std14is_convertibleIPT_PS4_EE5valueEvE4typeELPv0EEERKNS2_IS9_EE:
 1564|     12|      : it_(other.it_) {}
_ZNK6google8protobuf16RepeatedPtrFieldINS0_19UninterpretedOptionEE3endEv:
 1773|      6|RepeatedPtrField<Element>::end() const {
 1774|      6|  return iterator(raw_data() + size());
 1775|      6|}
_ZN6google8protobuf8internalneERKNS1_19RepeatedPtrIteratorIKNS0_19UninterpretedOptionEEES7_:
 1586|      6|  friend bool operator!=(const iterator& x, const iterator& y) {
 1587|      6|    return x.it_ != y.it_;
 1588|      6|  }
_ZN6google8protobuf8internal20RepeatedPtrFieldBase4castINS1_18GenericTypeHandlerINS0_7MessageEEEEEPNT_4TypeEPv:
  649|   487k|  static inline typename TypeHandler::Type* cast(void* element) {
  650|   487k|    return reinterpret_cast<typename TypeHandler::Type*>(element);
  651|   487k|  }
_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS1_18GenericTypeHandlerINS0_7MessageEEEEERKNT_4TypeEi:
  269|   289k|  const typename TypeHandler::Type& Get(int index) const {
  270|   289k|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|   289k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|   289k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|   289k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|   289k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 289k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|   289k|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|   289k|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|   289k|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|   289k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|   289k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 289k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  272|   289k|    return *cast<TypeHandler>(rep_->elements[index]);
  273|   289k|  }
_ZN6google8protobuf8internal20RepeatedPtrFieldBase7MutableINS1_18GenericTypeHandlerINS0_7MessageEEEEEPNT_4TypeEi:
  203|   198k|  typename TypeHandler::Type* Mutable(int index) {
  204|   198k|    GOOGLE_DCHECK_GE(index, 0);
  ------------------
  |  |  199|   198k|#define GOOGLE_DCHECK_GE GOOGLE_CHECK_GE
  |  |  ------------------
  |  |  |  |  159|   198k|#define GOOGLE_CHECK_GE(A, B) GOOGLE_CHECK((A) >= (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|   198k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|   198k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 198k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  205|   198k|    GOOGLE_DCHECK_LT(index, current_size_);
  ------------------
  |  |  196|   198k|#define GOOGLE_DCHECK_LT GOOGLE_CHECK_LT
  |  |  ------------------
  |  |  |  |  156|   198k|#define GOOGLE_CHECK_LT(A, B) GOOGLE_CHECK((A) <  (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|   198k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|   198k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 198k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   198k|    return cast<TypeHandler>(rep_->elements[index]);
  207|   198k|  }
_ZN6google8protobuf8internal20RepeatedPtrFieldBase14AddFromClearedINS1_18GenericTypeHandlerINS0_7MessageEEEEEPNT_4TypeEv:
  404|   198k|  typename TypeHandler::Type* AddFromCleared() {
  405|   198k|    if (rep_ != nullptr && current_size_ < rep_->allocated_size) {
  ------------------
  |  Branch (405:9): [True: 90.8k, False: 107k]
  |  Branch (405:28): [True: 0, False: 90.8k]
  ------------------
  406|      0|      return cast<TypeHandler>(rep_->elements[current_size_++]);
  407|   198k|    } else {
  408|   198k|      return nullptr;
  409|   198k|    }
  410|   198k|  }
_ZN6google8protobuf8internal20RepeatedPtrFieldBase23UnsafeArenaAddAllocatedINS1_18GenericTypeHandlerINS0_7MessageEEEEEvPNT_4TypeE:
  419|   198k|  void UnsafeArenaAddAllocated(typename TypeHandler::Type* value) {
  420|       |    // Make room for the new pointer.
  421|   198k|    if (!rep_ || current_size_ == total_size_) {
  ------------------
  |  Branch (421:9): [True: 107k, False: 90.8k]
  |  Branch (421:18): [True: 55.8k, False: 35.0k]
  ------------------
  422|       |      // The array is completely full with no cleared objects, so grow it.
  423|   163k|      Reserve(total_size_ + 1);
  424|   163k|      ++rep_->allocated_size;
  425|   163k|    } else if (rep_->allocated_size == total_size_) {
  ------------------
  |  Branch (425:16): [True: 0, False: 35.0k]
  ------------------
  426|       |      // There is no more space in the pointer array because it contains some
  427|       |      // cleared objects awaiting reuse.  We don't want to grow the array in
  428|       |      // this case because otherwise a loop calling AddAllocated() followed by
  429|       |      // Clear() would leak memory.
  430|      0|      TypeHandler::Delete(cast<TypeHandler>(rep_->elements[current_size_]),
  431|      0|                          arena_);
  432|  35.0k|    } else if (current_size_ < rep_->allocated_size) {
  ------------------
  |  Branch (432:16): [True: 0, False: 35.0k]
  ------------------
  433|       |      // We have some cleared objects.  We don't care about their order, so we
  434|       |      // can just move the first one to the end to make space.
  435|      0|      rep_->elements[rep_->allocated_size] = rep_->elements[current_size_];
  436|      0|      ++rep_->allocated_size;
  437|  35.0k|    } else {
  438|       |      // There are no cleared objects.
  439|  35.0k|      ++rep_->allocated_size;
  440|  35.0k|    }
  441|       |
  442|   198k|    rep_->elements[current_size_++] = value;
  443|   198k|  }

_ZN6google8protobuf8internal13implicit_castIiNS0_25FieldDescriptorProto_TypeEEET_RKT0_:
   61|    275|inline To implicit_cast(From const &f) {
   62|    275|  return f;
   63|    275|}
_ZN6google8protobuf8internal13implicit_castIiNS0_26FieldDescriptorProto_LabelEEET_RKT0_:
   61|    275|inline To implicit_cast(From const &f) {
   62|    275|  return f;
   63|    275|}

_ZN6google8protobuf8internal23IsStructurallyValidUTF8ENS0_20stringpiece_internal11StringPieceE:
  132|  1.60k|inline bool IsStructurallyValidUTF8(StringPiece str) {
  133|  1.60k|  return IsStructurallyValidUTF8(str.data(), static_cast<int>(str.length()));
  134|  1.60k|}

_ZN6google8protobuf13FindPtrOrNullINSt3__113unordered_mapINS0_20stringpiece_internal11StringPieceEPKNS0_14FileDescriptorENS0_4hashIS5_EENS2_8equal_toIS5_EENS2_9allocatorINS2_4pairIKS5_S8_EEEEEEEENT_10value_type11second_typeERKSJ_RKNSK_10first_typeE:
  167|      9|              const typename Collection::value_type::first_type& key) {
  168|      9|  typename Collection::const_iterator it = collection.find(key);
  169|      9|  if (it == collection.end()) {
  ------------------
  |  Branch (169:7): [True: 6, False: 3]
  ------------------
  170|      6|    return typename Collection::value_type::second_type();
  171|      6|  }
  172|      3|  return it->second;
  173|      9|}
_ZN6google8protobuf18InsertIfNotPresentINSt3__113unordered_mapINS0_20stringpiece_internal11StringPieceEPKNS0_14FileDescriptorENS0_4hashIS5_EENS2_8equal_toIS5_EENS2_9allocatorINS2_4pairIKS5_S8_EEEEEEEEbPT_RKNSJ_10value_type10first_typeERKNSL_11second_typeE:
  331|      3|    const typename Collection::value_type::second_type& value) {
  332|      3|  return InsertIfNotPresent(
  333|      3|      collection, typename Collection::value_type(key, value));
  334|      3|}
_ZN6google8protobuf18InsertIfNotPresentINSt3__113unordered_mapINS0_20stringpiece_internal11StringPieceEPKNS0_14FileDescriptorENS0_4hashIS5_EENS2_8equal_toIS5_EENS2_9allocatorINS2_4pairIKS5_S8_EEEEEEEEbPT_RKNSJ_10value_typeE:
  322|      3|                        const typename Collection::value_type& vt) {
  323|      3|  return collection->insert(vt).second;
  324|      3|}
_ZN6google8protobuf18InsertIfNotPresentINSt3__13setINS0_25EncodedDescriptorDatabase15DescriptorIndex9FileEntryENS5_11FileCompareENS2_9allocatorIS6_EEEEEEbPT_RKNSB_10value_typeE:
  322|      6|                        const typename Collection::value_type& vt) {
  323|      6|  return collection->insert(vt).second;
  324|      6|}
_ZN6google8protobuf13FindPtrOrNullINSt3__113unordered_mapIPKNS0_10DescriptorEPKNS0_7MessageENS2_4hashIS6_EENS2_8equal_toIS6_EENS2_9allocatorINS2_4pairIKS6_S9_EEEEEEEENT_10value_type11second_typeERSK_RKNSL_10first_typeE:
  182|   107k|              const typename Collection::value_type::first_type& key) {
  183|   107k|  typename Collection::iterator it = collection.find(key);
  184|   107k|  if (it == collection.end()) {
  ------------------
  |  Branch (184:7): [True: 2, False: 107k]
  ------------------
  185|      2|    return typename Collection::value_type::second_type();
  186|      2|  }
  187|   107k|  return it->second;
  188|   107k|}
_ZN6google8protobuf13FindPtrOrNullINSt3__113unordered_mapINS0_20stringpiece_internal11StringPieceEPKNS0_8internal15DescriptorTableENS0_4hashIS5_EENS2_8equal_toIS5_EENS2_9allocatorINS2_4pairIKS5_S9_EEEEEEEENT_10value_type11second_typeERSK_RKNSL_10first_typeE:
  182|      1|              const typename Collection::value_type::first_type& key) {
  183|      1|  typename Collection::iterator it = collection.find(key);
  184|      1|  if (it == collection.end()) {
  ------------------
  |  Branch (184:7): [True: 0, False: 1]
  ------------------
  185|      0|    return typename Collection::value_type::second_type();
  186|      0|  }
  187|      1|  return it->second;
  188|      1|}
_ZN6google8protobuf18InsertIfNotPresentINSt3__113unordered_mapINS0_20stringpiece_internal11StringPieceEPKNS0_8internal15DescriptorTableENS0_4hashIS5_EENS2_8equal_toIS5_EENS2_9allocatorINS2_4pairIKS5_S9_EEEEEEEEbPT_RKNSK_10value_type10first_typeERKNSM_11second_typeE:
  331|      6|    const typename Collection::value_type::second_type& value) {
  332|      6|  return InsertIfNotPresent(
  333|      6|      collection, typename Collection::value_type(key, value));
  334|      6|}
_ZN6google8protobuf18InsertIfNotPresentINSt3__113unordered_mapINS0_20stringpiece_internal11StringPieceEPKNS0_8internal15DescriptorTableENS0_4hashIS5_EENS2_8equal_toIS5_EENS2_9allocatorINS2_4pairIKS5_S9_EEEEEEEEbPT_RKNSK_10value_typeE:
  322|      6|                        const typename Collection::value_type& vt) {
  323|      6|  return collection->insert(vt).second;
  324|      6|}
_ZN6google8protobuf18InsertIfNotPresentINSt3__113unordered_mapIPKNS0_10DescriptorEPKNS0_7MessageENS2_4hashIS6_EENS2_8equal_toIS6_EENS2_9allocatorINS2_4pairIKS6_S9_EEEEEEEEbPT_RKNSK_10value_type10first_typeERKNSM_11second_typeE:
  331|     39|    const typename Collection::value_type::second_type& value) {
  332|     39|  return InsertIfNotPresent(
  333|     39|      collection, typename Collection::value_type(key, value));
  334|     39|}
_ZN6google8protobuf18InsertIfNotPresentINSt3__113unordered_mapIPKNS0_10DescriptorEPKNS0_7MessageENS2_4hashIS6_EENS2_8equal_toIS6_EENS2_9allocatorINS2_4pairIKS6_S9_EEEEEEEEbPT_RKNSK_10value_typeE:
  322|     39|                        const typename Collection::value_type& vt) {
  323|     39|  return collection->insert(vt).second;
  324|     39|}

_ZN6google8protobuf8internal12WrappedMutexC2Ev:
  124|     12|  constexpr WrappedMutex() {}
_ZN6google8protobuf8internal12WrappedMutex4LockEv:
  126|   107k|  void Lock() GOOGLE_PROTOBUF_ACQUIRE() { mu_.lock(); }
_ZN6google8protobuf8internal12WrappedMutex6UnlockEv:
  127|   107k|  void Unlock() GOOGLE_PROTOBUF_RELEASE() { mu_.unlock(); }
_ZNK6google8protobuf8internal12WrappedMutex10AssertHeldEv:
  130|     42|  void AssertHeld() const {}
_ZN6google8protobuf8internal9MutexLockC2EPNS1_12WrappedMutexE:
  147|   107k|  explicit MutexLock(Mutex* mu) GOOGLE_PROTOBUF_ACQUIRE(mu) : mu_(mu) {
  148|   107k|    this->mu_->Lock();
  149|   107k|  }
_ZN6google8protobuf8internal9MutexLockD2Ev:
  150|   107k|  ~MutexLock() GOOGLE_PROTOBUF_RELEASE() { this->mu_->Unlock(); }
_ZN6google8protobuf8internal14MutexLockMaybeC2EPNS1_12WrappedMutexE:
  165|    106|    mu_(mu) { if (this->mu_ != nullptr) { this->mu_->Lock(); } }
  ------------------
  |  Branch (165:19): [True: 3, False: 103]
  ------------------
_ZN6google8protobuf8internal14MutexLockMaybeD2Ev:
  166|    106|  ~MutexLockMaybe() { if (this->mu_ != nullptr) { this->mu_->Unlock(); } }
  ------------------
  |  Branch (166:27): [True: 3, False: 103]
  ------------------

_ZN6google8protobuf28STLStringResizeUninitializedEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEm:
   52|      6|inline void STLStringResizeUninitialized(std::string* s, size_t new_size) {
   53|      6|  s->resize(new_size);
   54|      6|}
_ZN6google8protobuf37STLStringResizeUninitializedAmortizedEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEm:
   59|      6|                                                  size_t new_size) {
   60|      6|  const size_t cap = s->capacity();
   61|      6|  if (new_size > cap) {
  ------------------
  |  Branch (61:7): [True: 2, False: 4]
  ------------------
   62|       |    // Make sure to always grow by at least a factor of 2x.
   63|      2|    s->reserve(std::max<size_t>(new_size, 2 * cap));
   64|      2|  }
   65|      6|  STLStringResizeUninitialized(s, new_size);
   66|      6|}

_ZNK6google8protobuf20stringpiece_internal11StringPiece6substrEmm:
  246|  1.74k|StringPiece StringPiece::substr(size_type pos, size_type n) const {
  247|  1.74k|  if (pos > length()) pos = length();
  ------------------
  |  Branch (247:7): [True: 0, False: 1.74k]
  ------------------
  248|  1.74k|  if (n > length_ - pos) n = length() - pos;
  ------------------
  |  Branch (248:7): [True: 122, False: 1.62k]
  ------------------
  249|  1.74k|  return StringPiece(ptr_ + pos, n);
  250|  1.74k|}

_ZN6google8protobuf20stringpiece_internal11StringPieceC2Ev:
  206|   615k|  StringPiece() : ptr_(nullptr), length_(0) {}
_ZN6google8protobuf20stringpiece_internal11StringPieceC2EPKc:
  209|      7|      : ptr_(str), length_(0) {
  210|      7|    if (str != nullptr) {
  ------------------
  |  Branch (210:9): [True: 7, False: 0]
  ------------------
  211|      7|      length_ = CheckSize(strlen(str));
  212|      7|    }
  213|      7|  }
_ZN6google8protobuf20stringpiece_internal11StringPieceC2EPKcm:
  231|  1.75k|      : ptr_(offset), length_(CheckSize(len)) {}
_ZNK6google8protobuf20stringpiece_internal11StringPiece4dataEv:
  237|  3.08M|  const_pointer data() const { return ptr_; }
_ZNK6google8protobuf20stringpiece_internal11StringPiece4sizeEv:
  238|  1.87M|  size_type size() const { return length_; }
_ZNK6google8protobuf20stringpiece_internal11StringPiece6lengthEv:
  239|  3.47k|  size_type length() const { return length_; }
_ZNK6google8protobuf20stringpiece_internal11StringPiece5emptyEv:
  240|  2.07k|  bool empty() const { return length_ == 0; }
_ZNK6google8protobuf20stringpiece_internal11StringPieceixEm:
  242|    316|  char operator[](size_type i) const {
  243|    316|    assert(i < length_);
  244|    316|    return ptr_[i];
  245|    316|  }
_ZN6google8protobuf20stringpiece_internal11StringPiece13remove_prefixEm:
  247|     21|  void remove_prefix(size_type n) {
  248|     21|    assert(length_ >= n);
  249|     21|    ptr_ += n;
  250|     21|    length_ -= n;
  251|     21|  }
_ZNK6google8protobuf20stringpiece_internal11StringPiece7compareES2_:
  259|    872|  int compare(StringPiece x) const {
  260|    872|    size_type min_size = length_ < x.length_ ? length_ : x.length_;
  ------------------
  |  Branch (260:26): [True: 0, False: 872]
  ------------------
  261|    872|    int r = memcmp(ptr_, x.ptr_, static_cast<size_t>(min_size));
  262|    872|    if (r < 0) return -1;
  ------------------
  |  Branch (262:9): [True: 2, False: 870]
  ------------------
  263|    870|    if (r > 0) return 1;
  ------------------
  |  Branch (263:9): [True: 120, False: 750]
  ------------------
  264|    750|    if (length_ < x.length_) return -1;
  ------------------
  |  Branch (264:9): [True: 0, False: 750]
  ------------------
  265|    750|    if (length_ > x.length_) return 1;
  ------------------
  |  Branch (265:9): [True: 0, False: 750]
  ------------------
  266|    750|    return 0;
  267|    750|  }
_ZNK6google8protobuf20stringpiece_internal11StringPiece8ToStringEv:
  275|    170|  std::string ToString() const {
  276|    170|    if (ptr_ == nullptr) return "";
  ------------------
  |  Branch (276:9): [True: 0, False: 170]
  ------------------
  277|    170|    return std::string(data(), static_cast<size_type>(size()));
  278|    170|  }
_ZNK6google8protobuf20stringpiece_internal11StringPiececvNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEv:
  280|    170|  explicit operator std::string() const { return ToString(); }
_ZNK6google8protobuf20stringpiece_internal11StringPiece5beginEv:
  305|    134|  const_iterator begin() const { return ptr_; }
_ZNK6google8protobuf20stringpiece_internal11StringPiece3endEv:
  306|    134|  const_iterator end() const { return ptr_ + length_; }
_ZN6google8protobuf20stringpiece_internaleqENS1_11StringPieceES2_:
  345|   616k|inline bool operator==(StringPiece x, StringPiece y) {
  346|   616k|  StringPiece::size_type len = x.size();
  347|   616k|  if (len != y.size()) {
  ------------------
  |  Branch (347:7): [True: 204, False: 616k]
  ------------------
  348|    204|    return false;
  349|    204|  }
  350|       |
  351|   616k|  return x.data() == y.data() || len <= 0 ||
  ------------------
  |  Branch (351:10): [True: 819, False: 615k]
  |  Branch (351:34): [True: 0, False: 615k]
  ------------------
  352|   616k|      memcmp(x.data(), y.data(), static_cast<size_t>(len)) == 0;
  ------------------
  |  Branch (352:7): [True: 615k, False: 14]
  ------------------
  353|   616k|}
_ZN6google8protobuf20stringpiece_internalneENS1_11StringPieceES2_:
  355|      3|inline bool operator!=(StringPiece x, StringPiece y) {
  356|      3|  return !(x == y);
  357|      3|}
_ZN6google8protobuf20stringpiece_internalltENS1_11StringPieceES2_:
  359|    792|inline bool operator<(StringPiece x, StringPiece y) {
  360|    792|  const StringPiece::size_type min_size =
  361|    792|      x.size() < y.size() ? x.size() : y.size();
  ------------------
  |  Branch (361:7): [True: 326, False: 466]
  ------------------
  362|    792|  const int r = memcmp(x.data(), y.data(), static_cast<size_t>(min_size));
  363|    792|  return (r < 0) || (r == 0 && x.size() < y.size());
  ------------------
  |  Branch (363:10): [True: 458, False: 334]
  |  Branch (363:22): [True: 49, False: 285]
  |  Branch (363:32): [True: 22, False: 27]
  ------------------
  364|    792|}
_ZNK6google8protobuf4hashINS0_20stringpiece_internal11StringPieceEEclERKS3_:
  390|   616k|  size_t operator()(const StringPiece& s) const {
  391|   616k|    size_t result = 0;
  392|  10.3M|    for (const char *str = s.data(), *end = str + s.size(); str < end; str++) {
  ------------------
  |  Branch (392:61): [True: 9.68M, False: 616k]
  ------------------
  393|  9.68M|      result = 5 * result + static_cast<size_t>(*str);
  394|  9.68M|    }
  395|   616k|    return result;
  396|   616k|  }

_ZN6google8protobuf8internal23IsStructurallyValidUTF8EPKci:
  557|  1.61k|bool IsStructurallyValidUTF8(const char* buf, int len) {
  558|  1.61k|  if (!module_initialized_) return true;
  ------------------
  |  Branch (558:7): [True: 0, False: 1.61k]
  ------------------
  559|       |
  560|  1.61k|  int bytes_consumed = 0;
  561|  1.61k|  UTF8GenericScanFastAscii(&utf8acceptnonsurrogates_obj,
  562|  1.61k|                           buf, len, &bytes_consumed);
  563|  1.61k|  return (bytes_consumed == len);
  564|  1.61k|}
structurally_valid.cc:_ZN6google8protobuf8internal12_GLOBAL__N_112InitDetectorC2Ev:
  549|      2|  InitDetector() {
  550|      2|    module_initialized_ = true;
  551|      2|  }
structurally_valid.cc:_ZN6google8protobuf8internal12_GLOBAL__N_124UTF8GenericScanFastAsciiEPKNS1_19UTF8StateMachineObjEPKciPi:
  501|  1.61k|                    int* bytes_consumed) {
  502|  1.61k|  *bytes_consumed = 0;
  503|  1.61k|  if (str_length == 0) return kExitOK;
  ------------------
  |  Branch (503:7): [True: 0, False: 1.61k]
  ------------------
  504|       |
  505|  1.61k|  const uint8_t* isrc =  reinterpret_cast<const uint8_t*>(str);
  506|  1.61k|  const uint8_t* src = isrc;
  507|  1.61k|  const uint8_t* srclimit = isrc + str_length;
  508|  1.61k|  const uint8_t* srclimit8 = str_length < 7 ? isrc : srclimit - 7;
  ------------------
  |  Branch (508:30): [True: 238, False: 1.38k]
  ------------------
  509|  1.61k|  int n;
  510|  1.61k|  int rest_consumed;
  511|  1.61k|  int exit_reason;
  512|  1.61k|  do {
  513|       |    // Check initial few bytes one at a time until 8-byte aligned
  514|  10.3k|    while ((((uintptr_t)src & 0x07) != 0) &&
  ------------------
  |  Branch (514:12): [True: 9.00k, False: 1.38k]
  ------------------
  515|  10.3k|           (src < srclimit) && (src[0] < 0x80)) {
  ------------------
  |  Branch (515:12): [True: 8.76k, False: 238]
  |  Branch (515:32): [True: 8.76k, False: 0]
  ------------------
  516|  8.76k|      src++;
  517|  8.76k|    }
  518|  1.61k|    if (((uintptr_t)src & 0x07) == 0) {
  ------------------
  |  Branch (518:9): [True: 1.38k, False: 238]
  ------------------
  519|  2.95k|      while ((src < srclimit8) &&
  ------------------
  |  Branch (519:14): [True: 1.57k, False: 1.38k]
  ------------------
  520|  2.95k|             (((reinterpret_cast<const uint32_t*>(src)[0] |
  ------------------
  |  Branch (520:14): [True: 1.57k, False: 0]
  ------------------
  521|  1.57k|                reinterpret_cast<const uint32_t*>(src)[1]) &
  522|  1.57k|               0x80808080) == 0)) {
  523|  1.57k|        src += 8;
  524|  1.57k|      }
  525|  1.38k|    }
  526|  6.16k|    while ((src < srclimit) && (src[0] < 0x80)) {
  ------------------
  |  Branch (526:12): [True: 4.54k, False: 1.61k]
  |  Branch (526:32): [True: 4.54k, False: 0]
  ------------------
  527|  4.54k|      src++;
  528|  4.54k|    }
  529|       |    // Run state table on the rest
  530|  1.61k|    n = src - isrc;
  531|  1.61k|    exit_reason = UTF8GenericScan(st, str + n, str_length - n, &rest_consumed);
  532|  1.61k|    src += rest_consumed;
  533|  1.61k|  } while ( exit_reason == kExitDoAgain );
  ------------------
  |  Branch (533:13): [True: 0, False: 1.61k]
  ------------------
  534|       |
  535|  1.61k|  *bytes_consumed = src - isrc;
  536|  1.61k|  return exit_reason;
  537|  1.61k|}
structurally_valid.cc:_ZN6google8protobuf8internal12_GLOBAL__N_115UTF8GenericScanEPKNS1_19UTF8StateMachineObjEPKciPi:
  392|  1.61k|                    int* bytes_consumed) {
  393|  1.61k|  *bytes_consumed = 0;
  394|  1.61k|  if (str_length == 0) return kExitOK;
  ------------------
  |  Branch (394:7): [True: 1.61k, False: 0]
  ------------------
  395|       |
  396|      0|  int eshift = st->entry_shift;
  397|      0|  const uint8_t* isrc = reinterpret_cast<const uint8_t*>(str);
  398|      0|  const uint8_t* src = isrc;
  399|      0|  const uint8_t* srclimit = isrc + str_length;
  400|      0|  const uint8_t* srclimit8 = str_length < 7 ? isrc : srclimit - 7;
  ------------------
  |  Branch (400:30): [True: 0, False: 0]
  ------------------
  401|      0|  const uint8_t* Tbl_0 = &st->state_table[st->state0];
  402|       |
  403|      0| DoAgain:
  404|       |  // Do state-table scan
  405|      0|  int e = 0;
  406|      0|  uint8_t c;
  407|      0|  const uint8_t* Tbl2 = &st->fast_state[0];
  408|      0|  const uint32_t losub = st->losub;
  409|      0|  const uint32_t hiadd = st->hiadd;
  410|       |  // Check initial few bytes one at a time until 8-byte aligned
  411|       |  //----------------------------
  412|      0|  while ((((uintptr_t)src & 0x07) != 0) &&
  ------------------
  |  Branch (412:10): [True: 0, False: 0]
  ------------------
  413|      0|         (src < srclimit) &&
  ------------------
  |  Branch (413:10): [True: 0, False: 0]
  ------------------
  414|      0|         Tbl2[src[0]] == 0) {
  ------------------
  |  Branch (414:10): [True: 0, False: 0]
  ------------------
  415|      0|    src++;
  416|      0|  }
  417|      0|  if (((uintptr_t)src & 0x07) == 0) {
  ------------------
  |  Branch (417:7): [True: 0, False: 0]
  ------------------
  418|       |    // Do fast for groups of 8 identity bytes.
  419|       |    // This covers a lot of 7-bit ASCII ~8x faster then the 1-byte loop,
  420|       |    // including slowing slightly on cr/lf/ht
  421|       |    //----------------------------
  422|      0|    while (src < srclimit8) {
  ------------------
  |  Branch (422:12): [True: 0, False: 0]
  ------------------
  423|      0|      uint32_t s0123 = (reinterpret_cast<const uint32_t *>(src))[0];
  424|      0|      uint32_t s4567 = (reinterpret_cast<const uint32_t *>(src))[1];
  425|      0|      src += 8;
  426|       |      // This is a fast range check for all bytes in [lowsub..0x80-hiadd)
  427|      0|      uint32_t temp = (s0123 - losub) | (s0123 + hiadd) |
  428|      0|                      (s4567 - losub) | (s4567 + hiadd);
  429|      0|      if ((temp & 0x80808080) != 0) {
  ------------------
  |  Branch (429:11): [True: 0, False: 0]
  ------------------
  430|       |        // We typically end up here on cr/lf/ht; src was incremented
  431|      0|        int e0123 = (Tbl2[src[-8]] | Tbl2[src[-7]]) |
  432|      0|                    (Tbl2[src[-6]] | Tbl2[src[-5]]);
  433|      0|        if (e0123 != 0) {
  ------------------
  |  Branch (433:13): [True: 0, False: 0]
  ------------------
  434|      0|          src -= 8;
  435|      0|          break;
  436|      0|        }    // Exit on Non-interchange
  437|      0|        e0123 = (Tbl2[src[-4]] | Tbl2[src[-3]]) |
  438|      0|                (Tbl2[src[-2]] | Tbl2[src[-1]]);
  439|      0|        if (e0123 != 0) {
  ------------------
  |  Branch (439:13): [True: 0, False: 0]
  ------------------
  440|      0|          src -= 4;
  441|      0|          break;
  442|      0|        }    // Exit on Non-interchange
  443|       |        // Else OK, go around again
  444|      0|      }
  445|      0|    }
  446|      0|  }
  447|       |  //----------------------------
  448|       |
  449|       |  // Byte-at-a-time scan
  450|       |  //----------------------------
  451|      0|  const uint8_t* Tbl = Tbl_0;
  452|      0|  while (src < srclimit) {
  ------------------
  |  Branch (452:10): [True: 0, False: 0]
  ------------------
  453|      0|    c = *src;
  454|      0|    e = Tbl[c];
  455|      0|    src++;
  456|      0|    if (e >= kExitIllegalStructure) {break;}
  ------------------
  |  Branch (456:9): [True: 0, False: 0]
  ------------------
  457|      0|    Tbl = &Tbl_0[e << eshift];
  458|      0|  }
  459|       |  //----------------------------
  460|       |
  461|       |  // Exit possibilities:
  462|       |  //  Some exit code, !state0, back up over last char
  463|       |  //  Some exit code, state0, back up one byte exactly
  464|       |  //  source consumed, !state0, back up over partial char
  465|       |  //  source consumed, state0, exit OK
  466|       |  // For illegal byte in state0, avoid backup up over PREVIOUS char
  467|       |  // For truncated last char, back up to beginning of it
  468|       |
  469|      0|  if (e >= kExitIllegalStructure) {
  ------------------
  |  Branch (469:7): [True: 0, False: 0]
  ------------------
  470|       |    // Back up over exactly one byte of rejected/illegal UTF-8 character
  471|      0|    src--;
  472|       |    // Back up more if needed
  473|      0|    if (!InStateZero(st, Tbl)) {
  ------------------
  |  Branch (473:9): [True: 0, False: 0]
  ------------------
  474|      0|      do {
  475|      0|        src--;
  476|      0|      } while ((src > isrc) && ((src[0] & 0xc0) == 0x80));
  ------------------
  |  Branch (476:16): [True: 0, False: 0]
  |  Branch (476:32): [True: 0, False: 0]
  ------------------
  477|      0|    }
  478|      0|  } else if (!InStateZero(st, Tbl)) {
  ------------------
  |  Branch (478:14): [True: 0, False: 0]
  ------------------
  479|       |    // Back up over truncated UTF-8 character
  480|      0|    e = kExitIllegalStructure;
  481|      0|    do {
  482|      0|      src--;
  483|      0|    } while ((src > isrc) && ((src[0] & 0xc0) == 0x80));
  ------------------
  |  Branch (483:14): [True: 0, False: 0]
  |  Branch (483:30): [True: 0, False: 0]
  ------------------
  484|      0|  } else {
  485|       |    // Normal termination, source fully consumed
  486|      0|    e = kExitOK;
  487|      0|  }
  488|       |
  489|      0|  if (e == kExitDoAgain) {
  ------------------
  |  Branch (489:7): [True: 0, False: 0]
  ------------------
  490|       |    // Loop back up to the fast scan
  491|      0|    goto DoAgain;
  492|      0|  }
  493|       |
  494|      0|  *bytes_consumed = src - isrc;
  495|      0|  return e;
  496|      0|}

_ZN6google8protobuf6StrCatERKNS0_7strings8AlphaNumES4_:
 1472|   615k|std::string StrCat(const AlphaNum &a, const AlphaNum &b) {
 1473|   615k|  std::string result;
 1474|   615k|  result.resize(a.size() + b.size());
 1475|   615k|  char *const begin = &*result.begin();
 1476|   615k|  char *out = Append2(begin, a, b);
 1477|   615k|  GOOGLE_DCHECK_EQ(out, begin + result.size());
  ------------------
  |  |  194|   615k|#define GOOGLE_DCHECK_EQ GOOGLE_CHECK_EQ
  |  |  ------------------
  |  |  |  |  154|   615k|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|   615k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|   615k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 615k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1478|   615k|  return result;
 1479|   615k|}
_ZN6google8protobuf6StrCatERKNS0_7strings8AlphaNumES4_S4_:
 1481|    691|std::string StrCat(const AlphaNum &a, const AlphaNum &b, const AlphaNum &c) {
 1482|    691|  std::string result;
 1483|    691|  result.resize(a.size() + b.size() + c.size());
 1484|    691|  char *const begin = &*result.begin();
 1485|    691|  char *out = Append2(begin, a, b);
 1486|    691|  out = Append1(out, c);
 1487|    691|  GOOGLE_DCHECK_EQ(out, begin + result.size());
  ------------------
  |  |  194|    691|#define GOOGLE_DCHECK_EQ GOOGLE_CHECK_EQ
  |  |  ------------------
  |  |  |  |  154|    691|#define GOOGLE_CHECK_EQ(A, B) GOOGLE_CHECK((A) == (B))
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|    691|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    691|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:3): [True: 691, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1488|    691|  return result;
 1489|    691|}
strutil.cc:_ZN6google8protobufL7Append2EPcRKNS0_7strings8AlphaNumES5_:
 1439|   616k|static char *Append2(char *out, const AlphaNum &x1, const AlphaNum &x2) {
 1440|   616k|  if (x1.size() > 0) {
  ------------------
  |  Branch (1440:7): [True: 616k, False: 0]
  ------------------
 1441|   616k|    memcpy(out, x1.data(), x1.size());
 1442|   616k|    out += x1.size();
 1443|   616k|  }
 1444|   616k|  if (x2.size() > 0) {
  ------------------
  |  Branch (1444:7): [True: 616k, False: 0]
  ------------------
 1445|   616k|    memcpy(out, x2.data(), x2.size());
 1446|   616k|    out += x2.size();
 1447|   616k|  }
 1448|   616k|  return out;
 1449|   616k|}
strutil.cc:_ZN6google8protobufL7Append1EPcRKNS0_7strings8AlphaNumE:
 1431|    691|static char *Append1(char *out, const AlphaNum &x) {
 1432|    691|  if (x.size() > 0) {
  ------------------
  |  Branch (1432:7): [True: 691, False: 0]
  ------------------
 1433|    691|    memcpy(out, x.data(), x.size());
 1434|    691|    out += x.size();
 1435|    691|  }
 1436|    691|  return out;
 1437|    691|}

_ZN6google8protobuf7strings8AlphaNumC2EPKc:
  657|  1.23M|      : piece_data_(c_str), piece_size_(strlen(c_str)) {}
_ZN6google8protobuf7strings8AlphaNumC2ERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE:
  662|    718|      : piece_data_(str.data()), piece_size_(str.size()) {}
_ZN6google8protobuf7strings8AlphaNumC2ENS0_20stringpiece_internal11StringPieceE:
  665|    664|      : piece_data_(str.data()), piece_size_(str.size()) {}
_ZNK6google8protobuf7strings8AlphaNum4sizeEv:
  667|  4.93M|  size_t size() const { return piece_size_; }
_ZNK6google8protobuf7strings8AlphaNum4dataEv:
  668|  1.23M|  const char *data() const { return piece_data_; }
_ZN6google8protobuf13ascii_isupperEc:
   83|    174|inline bool ascii_isupper(char c) {
   84|    174|  return c >= 'A' && c <= 'Z';
  ------------------
  |  Branch (84:10): [True: 174, False: 0]
  |  Branch (84:22): [True: 137, False: 37]
  ------------------
   85|    174|}
_ZN6google8protobuf13ascii_tolowerEc:
   95|    174|inline char ascii_tolower(char c) {
   96|    174|  return ascii_isupper(c) ? c + ('a' - 'A') : c;
  ------------------
  |  Branch (96:10): [True: 137, False: 37]
  ------------------
   97|    174|}
_ZN6google8protobuf15HasPrefixStringENS0_20stringpiece_internal11StringPieceES2_:
  116|    210|inline bool HasPrefixString(StringPiece str, StringPiece prefix) {
  117|    210|  return str.size() >= prefix.size() &&
  ------------------
  |  Branch (117:10): [True: 110, False: 100]
  ------------------
  118|    210|         memcmp(str.data(), prefix.data(), prefix.size()) == 0;
  ------------------
  |  Branch (118:10): [True: 18, False: 92]
  ------------------
  119|    210|}
_ZN6google8protobuf11LowerStringEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  177|      8|inline void LowerString(std::string* s) {
  178|      8|  std::string::iterator end = s->end();
  179|    148|  for (std::string::iterator i = s->begin(); i != end; ++i) {
  ------------------
  |  Branch (179:46): [True: 140, False: 8]
  ------------------
  180|       |    // tolower() changes based on locale.  We don't want this!
  181|    140|    if ('A' <= *i && *i <= 'Z') *i += 'a' - 'A';
  ------------------
  |  Branch (181:9): [True: 126, False: 14]
  |  Branch (181:22): [True: 8, False: 118]
  ------------------
  182|    140|  }
  183|      8|}

_ZN6google8protobuf10TextFormat6ParserC2Ev:
 1589|  17.8k|    : error_collector_(nullptr),
 1590|  17.8k|      finder_(nullptr),
 1591|  17.8k|      parse_info_tree_(nullptr),
 1592|  17.8k|      allow_partial_(false),
 1593|  17.8k|      allow_case_insensitive_field_(false),
 1594|  17.8k|      allow_unknown_field_(false),
 1595|  17.8k|      allow_unknown_extension_(false),
 1596|  17.8k|      allow_unknown_enum_(false),
 1597|  17.8k|      allow_field_number_(false),
 1598|  17.8k|      allow_relaxed_whitespace_(false),
 1599|  17.8k|      allow_singular_overwrites_(false),
 1600|  17.8k|      recursion_limit_(std::numeric_limits<int>::max()) {}
_ZN6google8protobuf10TextFormat6ParserD2Ev:
 1602|  17.8k|TextFormat::Parser::~Parser() {}
_ZN6google8protobuf10TextFormat6Parser5ParseEPNS0_2io19ZeroCopyInputStreamEPNS0_7MessageE:
 1622|  17.8k|                               Message* output) {
 1623|  17.8k|  output->Clear();
 1624|       |
 1625|  17.8k|  ParserImpl::SingularOverwritePolicy overwrites_policy =
 1626|  17.8k|      allow_singular_overwrites_ ? ParserImpl::ALLOW_SINGULAR_OVERWRITES
  ------------------
  |  Branch (1626:7): [True: 0, False: 17.8k]
  ------------------
 1627|  17.8k|                                 : ParserImpl::FORBID_SINGULAR_OVERWRITES;
 1628|       |
 1629|  17.8k|  ParserImpl parser(output->GetDescriptor(), input, error_collector_, finder_,
 1630|  17.8k|                    parse_info_tree_, overwrites_policy,
 1631|  17.8k|                    allow_case_insensitive_field_, allow_unknown_field_,
 1632|  17.8k|                    allow_unknown_extension_, allow_unknown_enum_,
 1633|  17.8k|                    allow_field_number_, allow_relaxed_whitespace_,
 1634|  17.8k|                    allow_partial_, recursion_limit_);
 1635|  17.8k|  return MergeUsingImpl(input, output, &parser);
 1636|  17.8k|}
_ZN6google8protobuf10TextFormat6Parser15ParseFromStringERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPNS0_7MessageE:
 1639|  17.8k|                                         Message* output) {
 1640|  17.8k|  DO(CheckParseInputSize(input, error_collector_));
  ------------------
  |  |  240|  17.8k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 17.8k, False: 0]
  |  |  ------------------
  |  |  241|  17.8k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
 1641|  17.8k|  io::ArrayInputStream input_stream(input.data(), input.size());
 1642|  17.8k|  return Parse(&input_stream, output);
 1643|  17.8k|}
_ZN6google8protobuf10TextFormat6Parser14MergeUsingImplEPNS0_2io19ZeroCopyInputStreamEPNS0_7MessageEPNS2_10ParserImplE:
 1665|  17.8k|                                        ParserImpl* parser_impl) {
 1666|  17.8k|  if (!parser_impl->Parse(output)) return false;
  ------------------
  |  Branch (1666:7): [True: 0, False: 17.8k]
  ------------------
 1667|  17.8k|  if (!allow_partial_ && !output->IsInitialized()) {
  ------------------
  |  Branch (1667:7): [True: 0, False: 17.8k]
  |  Branch (1667:26): [True: 0, False: 0]
  ------------------
 1668|      0|    std::vector<std::string> missing_fields;
 1669|      0|    output->FindInitializationErrors(&missing_fields);
 1670|      0|    parser_impl->ReportError(-1, 0,
 1671|      0|                             "Message missing required fields: " +
 1672|      0|                                 Join(missing_fields, ", "));
 1673|      0|    return false;
 1674|      0|  }
 1675|  17.8k|  return true;
 1676|  17.8k|}
_ZN6google8protobuf10TextFormat6Parser10ParserImplC2EPKNS0_10DescriptorEPNS0_2io19ZeroCopyInputStreamEPNS7_14ErrorCollectorEPKNS1_6FinderEPNS1_13ParseInfoTreeENS3_23SingularOverwritePolicyEbbbbbbbi:
  265|  17.8k|      : error_collector_(error_collector),
  266|  17.8k|        finder_(finder),
  267|  17.8k|        parse_info_tree_(parse_info_tree),
  268|  17.8k|        tokenizer_error_collector_(this),
  269|  17.8k|        tokenizer_(input_stream, &tokenizer_error_collector_),
  270|  17.8k|        root_message_type_(root_message_type),
  271|  17.8k|        singular_overwrite_policy_(singular_overwrite_policy),
  272|  17.8k|        allow_case_insensitive_field_(allow_case_insensitive_field),
  273|  17.8k|        allow_unknown_field_(allow_unknown_field),
  274|  17.8k|        allow_unknown_extension_(allow_unknown_extension),
  275|  17.8k|        allow_unknown_enum_(allow_unknown_enum),
  276|  17.8k|        allow_field_number_(allow_field_number),
  277|  17.8k|        allow_partial_(allow_partial),
  278|  17.8k|        initial_recursion_limit_(recursion_limit),
  279|  17.8k|        recursion_limit_(recursion_limit),
  280|  17.8k|        had_silent_marker_(false),
  281|  17.8k|        had_errors_(false) {
  282|       |    // For backwards-compatibility with proto1, we need to allow the 'f' suffix
  283|       |    // for floats.
  284|  17.8k|    tokenizer_.set_allow_f_after_float(true);
  285|       |
  286|       |    // '#' starts a comment.
  287|  17.8k|    tokenizer_.set_comment_style(io::Tokenizer::SH_COMMENT_STYLE);
  288|       |
  289|  17.8k|    if (allow_relaxed_whitespace) {
  ------------------
  |  Branch (289:9): [True: 0, False: 17.8k]
  ------------------
  290|      0|      tokenizer_.set_require_space_after_number(false);
  291|      0|      tokenizer_.set_allow_multiline_strings(true);
  292|      0|    }
  293|       |
  294|       |    // Consume the starting token.
  295|  17.8k|    tokenizer_.Next();
  296|  17.8k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl20ParserErrorCollectorC2EPS3_:
 1301|  17.8k|        : parser_(parser) {}
_ZN6google8protobuf10TextFormat6Parser10ParserImplD2Ev:
  297|  17.8k|  ~ParserImpl() {}
text_format.cc:_ZN6google8protobuf12_GLOBAL__N_119CheckParseInputSizeENS0_20stringpiece_internal11StringPieceEPNS0_2io14ErrorCollectorE:
 1607|  17.8k|                         io::ErrorCollector* error_collector) {
 1608|  17.8k|  if (input.size() > INT_MAX) {
  ------------------
  |  Branch (1608:7): [True: 0, False: 17.8k]
  ------------------
 1609|      0|    error_collector->AddError(
 1610|      0|        -1, 0,
 1611|      0|        StrCat(
 1612|      0|            "Input size too large: ", static_cast<int64_t>(input.size()),
 1613|      0|            " bytes", " > ", INT_MAX, " bytes."));
 1614|      0|    return false;
 1615|      0|  }
 1616|  17.8k|  return true;
 1617|  17.8k|}
_ZN6google8protobuf10TextFormat6Parser10ParserImpl5ParseEPNS0_7MessageE:
  303|  17.8k|  bool Parse(Message* output) {
  304|       |    // Consume fields until we cannot do so anymore.
  305|  50.0k|    while (true) {
  ------------------
  |  Branch (305:12): [Folded - Ignored]
  ------------------
  306|  50.0k|      if (LookingAtType(io::Tokenizer::TYPE_END)) {
  ------------------
  |  Branch (306:11): [True: 17.8k, False: 32.2k]
  ------------------
  307|       |        // Ensures recursion limit properly unwinded, but only for success
  308|       |        // cases. This implicitly avoids the check when `Parse` returns false
  309|       |        // via `DO(...)`.
  310|  17.8k|        GOOGLE_DCHECK(had_errors_ || recursion_limit_ == initial_recursion_limit_)
  ------------------
  |  |  192|      0|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  17.8k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  35.6k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 17.8k]
  |  |  |  |  |  |  |  Branch (149:5): [True: 17.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  311|      0|            << "Recursion limit at end of parse should be "
  312|      0|            << initial_recursion_limit_ << ", but was " << recursion_limit_
  313|      0|            << ". Difference of " << initial_recursion_limit_ - recursion_limit_
  314|      0|            << " stack frames not accounted for stack unwind.";
  315|       |
  316|  17.8k|        return !had_errors_;
  317|  17.8k|      }
  318|       |
  319|  32.2k|      DO(ConsumeField(output));
  ------------------
  |  |  240|  32.2k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 32.2k, False: 0]
  |  |  ------------------
  |  |  241|  32.2k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  320|  32.2k|    }
  321|  17.8k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl13LookingAtTypeENS0_2io9Tokenizer9TokenTypeE:
  979|  1.64M|  bool LookingAtType(io::Tokenizer::TokenType token_type) {
  980|  1.64M|    return tokenizer_.current().type == token_type;
  981|  1.64M|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl12ConsumeFieldEPNS0_7MessageE:
  414|   615k|  bool ConsumeField(Message* message) {
  415|   615k|    const Reflection* reflection = message->GetReflection();
  416|   615k|    const Descriptor* descriptor = message->GetDescriptor();
  417|       |
  418|   615k|    std::string field_name;
  419|   615k|    bool reserved_field = false;
  420|   615k|    const FieldDescriptor* field = nullptr;
  421|   615k|    int start_line = tokenizer_.current().line;
  422|   615k|    int start_column = tokenizer_.current().column;
  423|       |
  424|   615k|    const FieldDescriptor* any_type_url_field;
  425|   615k|    const FieldDescriptor* any_value_field;
  426|   615k|    if (internal::GetAnyFieldDescriptors(*message, &any_type_url_field,
  ------------------
  |  Branch (426:9): [True: 0, False: 615k]
  |  Branch (426:9): [True: 0, False: 615k]
  ------------------
  427|   615k|                                         &any_value_field) &&
  428|   615k|        TryConsume("[")) {
  ------------------
  |  Branch (428:9): [True: 0, False: 0]
  ------------------
  429|      0|      std::string full_type_name, prefix;
  430|      0|      DO(ConsumeAnyTypeUrl(&full_type_name, &prefix));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  431|      0|      std::string prefix_and_full_type_name =
  432|      0|          StrCat(prefix, full_type_name);
  433|      0|      DO(ConsumeBeforeWhitespace("]"));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  434|      0|      TryConsumeWhitespace();
  435|       |      // ':' is optional between message labels and values.
  436|      0|      if (TryConsumeBeforeWhitespace(":")) {
  ------------------
  |  Branch (436:11): [True: 0, False: 0]
  ------------------
  437|      0|        TryConsumeWhitespace();
  438|      0|      }
  439|      0|      std::string serialized_value;
  440|      0|      const Descriptor* value_descriptor =
  441|      0|          finder_ ? finder_->FindAnyType(*message, prefix, full_type_name)
  ------------------
  |  Branch (441:11): [True: 0, False: 0]
  ------------------
  442|      0|                  : DefaultFinderFindAnyType(*message, prefix, full_type_name);
  443|      0|      if (value_descriptor == nullptr) {
  ------------------
  |  Branch (443:11): [True: 0, False: 0]
  ------------------
  444|      0|        ReportError("Could not find type \"" + prefix_and_full_type_name +
  445|      0|                    "\" stored in google.protobuf.Any.");
  446|      0|        return false;
  447|      0|      }
  448|      0|      DO(ConsumeAnyValue(value_descriptor, &serialized_value));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  449|      0|      if (singular_overwrite_policy_ == FORBID_SINGULAR_OVERWRITES) {
  ------------------
  |  Branch (449:11): [True: 0, False: 0]
  ------------------
  450|       |        // Fail if any_type_url_field has already been specified.
  451|      0|        if ((!any_type_url_field->is_repeated() &&
  ------------------
  |  Branch (451:14): [True: 0, False: 0]
  ------------------
  452|      0|             reflection->HasField(*message, any_type_url_field)) ||
  ------------------
  |  Branch (452:14): [True: 0, False: 0]
  ------------------
  453|      0|            (!any_value_field->is_repeated() &&
  ------------------
  |  Branch (453:14): [True: 0, False: 0]
  ------------------
  454|      0|             reflection->HasField(*message, any_value_field))) {
  ------------------
  |  Branch (454:14): [True: 0, False: 0]
  ------------------
  455|      0|          ReportError("Non-repeated Any specified multiple times.");
  456|      0|          return false;
  457|      0|        }
  458|      0|      }
  459|      0|      reflection->SetString(message, any_type_url_field,
  460|      0|                            std::move(prefix_and_full_type_name));
  461|      0|      reflection->SetString(message, any_value_field,
  462|      0|                            std::move(serialized_value));
  463|      0|      return true;
  464|      0|    }
  465|   615k|    if (TryConsume("[")) {
  ------------------
  |  Branch (465:9): [True: 0, False: 615k]
  ------------------
  466|       |      // Extension.
  467|      0|      DO(ConsumeFullTypeName(&field_name));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  468|      0|      DO(ConsumeBeforeWhitespace("]"));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  469|      0|      TryConsumeWhitespace();
  470|       |
  471|      0|      field = finder_ ? finder_->FindExtension(message, field_name)
  ------------------
  |  Branch (471:15): [True: 0, False: 0]
  ------------------
  472|      0|                      : DefaultFinderFindExtension(message, field_name);
  473|       |
  474|      0|      if (field == nullptr) {
  ------------------
  |  Branch (474:11): [True: 0, False: 0]
  ------------------
  475|      0|        if (!allow_unknown_field_ && !allow_unknown_extension_) {
  ------------------
  |  Branch (475:13): [True: 0, False: 0]
  |  Branch (475:38): [True: 0, False: 0]
  ------------------
  476|      0|          ReportError("Extension \"" + field_name +
  477|      0|                      "\" is not defined or "
  478|      0|                      "is not an extension of \"" +
  479|      0|                      descriptor->full_name() + "\".");
  480|      0|          return false;
  481|      0|        } else {
  482|      0|          ReportWarning("Ignoring extension \"" + field_name +
  483|      0|                        "\" which is not defined or is not an extension of \"" +
  484|      0|                        descriptor->full_name() + "\".");
  485|      0|        }
  486|      0|      }
  487|   615k|    } else {
  488|   615k|      DO(ConsumeIdentifierBeforeWhitespace(&field_name));
  ------------------
  |  |  240|   615k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 615k, False: 0]
  |  |  ------------------
  |  |  241|   615k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  489|   615k|      TryConsumeWhitespace();
  490|       |
  491|   615k|      int32_t field_number;
  492|   615k|      if (allow_field_number_ && safe_strto32(field_name, &field_number)) {
  ------------------
  |  Branch (492:11): [True: 0, False: 615k]
  |  Branch (492:34): [True: 0, False: 0]
  ------------------
  493|      0|        if (descriptor->IsExtensionNumber(field_number)) {
  ------------------
  |  Branch (493:13): [True: 0, False: 0]
  ------------------
  494|      0|          field = finder_
  ------------------
  |  Branch (494:19): [True: 0, False: 0]
  ------------------
  495|      0|                      ? finder_->FindExtensionByNumber(descriptor, field_number)
  496|      0|                      : DefaultFinderFindExtensionByNumber(descriptor,
  497|      0|                                                           field_number);
  498|      0|        } else if (descriptor->IsReservedNumber(field_number)) {
  ------------------
  |  Branch (498:20): [True: 0, False: 0]
  ------------------
  499|      0|          reserved_field = true;
  500|      0|        } else {
  501|      0|          field = descriptor->FindFieldByNumber(field_number);
  502|      0|        }
  503|   615k|      } else {
  504|   615k|        field = descriptor->FindFieldByName(field_name);
  505|       |        // Group names are expected to be capitalized as they appear in the
  506|       |        // .proto file, which actually matches their type names, not their
  507|       |        // field names.
  508|   615k|        if (field == nullptr) {
  ------------------
  |  Branch (508:13): [True: 0, False: 615k]
  ------------------
  509|      0|          std::string lower_field_name = field_name;
  510|      0|          LowerString(&lower_field_name);
  511|      0|          field = descriptor->FindFieldByName(lower_field_name);
  512|       |          // If the case-insensitive match worked but the field is NOT a group,
  513|      0|          if (field != nullptr &&
  ------------------
  |  Branch (513:15): [True: 0, False: 0]
  ------------------
  514|      0|              field->type() != FieldDescriptor::TYPE_GROUP) {
  ------------------
  |  Branch (514:15): [True: 0, False: 0]
  ------------------
  515|      0|            field = nullptr;
  516|      0|          }
  517|      0|        }
  518|       |        // Again, special-case group names as described above.
  519|   615k|        if (field != nullptr && field->type() == FieldDescriptor::TYPE_GROUP &&
  ------------------
  |  Branch (519:13): [True: 615k, False: 0]
  |  Branch (519:33): [True: 0, False: 615k]
  ------------------
  520|   615k|            field->message_type()->name() != field_name) {
  ------------------
  |  Branch (520:13): [True: 0, False: 0]
  ------------------
  521|      0|          field = nullptr;
  522|      0|        }
  523|       |
  524|   615k|        if (field == nullptr && allow_case_insensitive_field_) {
  ------------------
  |  Branch (524:13): [True: 0, False: 615k]
  |  Branch (524:33): [True: 0, False: 0]
  ------------------
  525|      0|          std::string lower_field_name = field_name;
  526|      0|          LowerString(&lower_field_name);
  527|      0|          field = descriptor->FindFieldByLowercaseName(lower_field_name);
  528|      0|        }
  529|       |
  530|   615k|        if (field == nullptr) {
  ------------------
  |  Branch (530:13): [True: 0, False: 615k]
  ------------------
  531|      0|          reserved_field = descriptor->IsReservedName(field_name);
  532|      0|        }
  533|   615k|      }
  534|       |
  535|   615k|      if (field == nullptr && !reserved_field) {
  ------------------
  |  Branch (535:11): [True: 0, False: 615k]
  |  Branch (535:31): [True: 0, False: 0]
  ------------------
  536|      0|        if (!allow_unknown_field_) {
  ------------------
  |  Branch (536:13): [True: 0, False: 0]
  ------------------
  537|      0|          ReportError("Message type \"" + descriptor->full_name() +
  538|      0|                      "\" has no field named \"" + field_name + "\".");
  539|      0|          return false;
  540|      0|        } else {
  541|      0|          ReportWarning("Message type \"" + descriptor->full_name() +
  542|      0|                        "\" has no field named \"" + field_name + "\".");
  543|      0|        }
  544|      0|      }
  545|   615k|    }
  546|       |
  547|       |    // Skips unknown or reserved fields.
  548|   615k|    if (field == nullptr) {
  ------------------
  |  Branch (548:9): [True: 0, False: 615k]
  ------------------
  549|      0|      GOOGLE_CHECK(allow_unknown_field_ || allow_unknown_extension_ || reserved_field);
  ------------------
  |  |  152|      0|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  ------------------
  |  |  |  |  149|      0|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  ------------------
  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (149:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  550|       |
  551|       |      // Try to guess the type of this field.
  552|       |      // If this field is not a message, there should be a ":" between the
  553|       |      // field name and the field value and also the field value should not
  554|       |      // start with "{" or "<" which indicates the beginning of a message body.
  555|       |      // If there is no ":" or there is a "{" or "<" after ":", this field has
  556|       |      // to be a message or the input is ill-formed.
  557|      0|      if (TryConsumeBeforeWhitespace(":")) {
  ------------------
  |  Branch (557:11): [True: 0, False: 0]
  ------------------
  558|      0|        TryConsumeWhitespace();
  559|      0|        if (!LookingAt("{") && !LookingAt("<")) {
  ------------------
  |  Branch (559:13): [True: 0, False: 0]
  |  Branch (559:13): [True: 0, False: 0]
  |  Branch (559:32): [True: 0, False: 0]
  ------------------
  560|      0|          return SkipFieldValue();
  561|      0|        }
  562|      0|      }
  563|      0|      return SkipFieldMessage();
  564|      0|    }
  565|       |
  566|   615k|    if (singular_overwrite_policy_ == FORBID_SINGULAR_OVERWRITES) {
  ------------------
  |  Branch (566:9): [True: 615k, False: 0]
  ------------------
  567|       |      // Fail if the field is not repeated and it has already been specified.
  568|   615k|      if (!field->is_repeated() && reflection->HasField(*message, field)) {
  ------------------
  |  Branch (568:11): [True: 417k, False: 198k]
  |  Branch (568:36): [True: 0, False: 417k]
  ------------------
  569|      0|        ReportError("Non-repeated field \"" + field_name +
  570|      0|                    "\" is specified multiple times.");
  571|      0|        return false;
  572|      0|      }
  573|       |      // Fail if the field is a member of a oneof and another member has already
  574|       |      // been specified.
  575|   615k|      const OneofDescriptor* oneof = field->containing_oneof();
  576|   615k|      if (oneof != nullptr && reflection->HasOneof(*message, oneof)) {
  ------------------
  |  Branch (576:11): [True: 178k, False: 436k]
  |  Branch (576:31): [True: 0, False: 178k]
  ------------------
  577|      0|        const FieldDescriptor* other_field =
  578|      0|            reflection->GetOneofFieldDescriptor(*message, oneof);
  579|      0|        ReportError("Field \"" + field_name +
  580|      0|                    "\" is specified along with "
  581|      0|                    "field \"" +
  582|      0|                    other_field->name() +
  583|      0|                    "\", another member "
  584|      0|                    "of oneof \"" +
  585|      0|                    oneof->name() + "\".");
  586|      0|        return false;
  587|      0|      }
  588|   615k|    }
  589|       |
  590|       |    // Perform special handling for embedded message types.
  591|   615k|    if (field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE) {
  ------------------
  |  Branch (591:9): [True: 475k, False: 140k]
  ------------------
  592|       |      // ':' is optional here.
  593|   475k|      bool consumed_semicolon = TryConsumeBeforeWhitespace(":");
  594|   475k|      if (consumed_semicolon) {
  ------------------
  |  Branch (594:11): [True: 0, False: 475k]
  ------------------
  595|      0|        TryConsumeWhitespace();
  596|      0|      }
  597|   475k|      if (consumed_semicolon && field->options().weak() &&
  ------------------
  |  Branch (597:11): [True: 0, False: 475k]
  |  Branch (597:33): [True: 0, False: 0]
  ------------------
  598|   475k|          LookingAtType(io::Tokenizer::TYPE_STRING)) {
  ------------------
  |  Branch (598:11): [True: 0, False: 0]
  ------------------
  599|       |        // we are getting a bytes string for a weak field.
  600|      0|        std::string tmp;
  601|      0|        DO(ConsumeString(&tmp));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  602|      0|        MessageFactory* factory =
  603|      0|            finder_ ? finder_->FindExtensionFactory(field) : nullptr;
  ------------------
  |  Branch (603:13): [True: 0, False: 0]
  ------------------
  604|      0|        reflection->MutableMessage(message, field, factory)
  605|      0|            ->ParseFromString(tmp);
  606|      0|        goto label_skip_parsing;
  607|      0|      }
  608|   475k|    } else {
  609|       |      // ':' is required here.
  610|   140k|      DO(ConsumeBeforeWhitespace(":"));
  ------------------
  |  |  240|   140k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 140k, False: 0]
  |  |  ------------------
  |  |  241|   140k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  611|   140k|      TryConsumeWhitespace();
  612|   140k|    }
  613|       |
  614|   615k|    if (field->is_repeated() && TryConsume("[")) {
  ------------------
  |  Branch (614:9): [True: 198k, False: 417k]
  |  Branch (614:9): [True: 0, False: 615k]
  |  Branch (614:33): [True: 0, False: 198k]
  ------------------
  615|       |      // Short repeated format, e.g.  "foo: [1, 2, 3]".
  616|      0|      if (!TryConsume("]")) {
  ------------------
  |  Branch (616:11): [True: 0, False: 0]
  ------------------
  617|       |        // "foo: []" is treated as empty.
  618|      0|        while (true) {
  ------------------
  |  Branch (618:16): [Folded - Ignored]
  ------------------
  619|      0|          if (field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE) {
  ------------------
  |  Branch (619:15): [True: 0, False: 0]
  ------------------
  620|       |            // Perform special handling for embedded message types.
  621|      0|            DO(ConsumeFieldMessage(message, reflection, field));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  622|      0|          } else {
  623|      0|            DO(ConsumeFieldValue(message, reflection, field));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  624|      0|          }
  625|      0|          if (TryConsume("]")) {
  ------------------
  |  Branch (625:15): [True: 0, False: 0]
  ------------------
  626|      0|            break;
  627|      0|          }
  628|      0|          DO(Consume(","));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  629|      0|        }
  630|      0|      }
  631|   615k|    } else if (field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE) {
  ------------------
  |  Branch (631:16): [True: 475k, False: 140k]
  ------------------
  632|   475k|      DO(ConsumeFieldMessage(message, reflection, field));
  ------------------
  |  |  240|   475k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 475k, False: 0]
  |  |  ------------------
  |  |  241|   475k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  633|   475k|    } else {
  634|   140k|      DO(ConsumeFieldValue(message, reflection, field));
  ------------------
  |  |  240|   140k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 140k, False: 0]
  |  |  ------------------
  |  |  241|   140k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  635|   140k|    }
  636|   615k|  label_skip_parsing:
  637|       |    // For historical reasons, fields may optionally be separated by commas or
  638|       |    // semicolons.
  639|   615k|    TryConsume(";") || TryConsume(",");
  ------------------
  |  Branch (639:5): [True: 0, False: 615k]
  |  Branch (639:24): [True: 0, False: 615k]
  ------------------
  640|       |
  641|   615k|    if (field->options().deprecated()) {
  ------------------
  |  Branch (641:9): [True: 0, False: 615k]
  ------------------
  642|      0|      ReportWarning("text format contains deprecated field \"" + field_name +
  643|      0|                    "\"");
  644|      0|    }
  645|       |
  646|       |    // If a parse info tree exists, add the location for the parsed
  647|       |    // field.
  648|   615k|    if (parse_info_tree_ != nullptr) {
  ------------------
  |  Branch (648:9): [True: 0, False: 615k]
  ------------------
  649|      0|      int end_line = tokenizer_.previous().line;
  650|      0|      int end_column = tokenizer_.previous().end_column;
  651|       |
  652|      0|      RecordLocation(parse_info_tree_, field,
  653|      0|                     ParseLocationRange(ParseLocation(start_line, start_column),
  654|      0|                                        ParseLocation(end_line, end_column)));
  655|      0|    }
  656|       |
  657|   615k|    return true;
  658|   615k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl10TryConsumeERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 1264|  3.03M|  bool TryConsume(const std::string& value) {
 1265|  3.03M|    if (tokenizer_.current().text == value) {
  ------------------
  |  Branch (1265:9): [True: 423, False: 3.03M]
  ------------------
 1266|    423|      tokenizer_.Next();
 1267|    423|      return true;
 1268|  3.03M|    } else {
 1269|  3.03M|      return false;
 1270|  3.03M|    }
 1271|  3.03M|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl17ConsumeIdentifierEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
  985|   615k|  bool ConsumeIdentifier(std::string* identifier) {
  986|   615k|    if (LookingAtType(io::Tokenizer::TYPE_IDENTIFIER)) {
  ------------------
  |  Branch (986:9): [True: 615k, False: 0]
  ------------------
  987|   615k|      *identifier = tokenizer_.current().text;
  988|   615k|      tokenizer_.Next();
  989|   615k|      return true;
  990|   615k|    }
  991|       |
  992|       |    // If allow_field_numer_ or allow_unknown_field_ is true, we should able
  993|       |    // to parse integer identifiers.
  994|      0|    if ((allow_field_number_ || allow_unknown_field_ ||
  ------------------
  |  Branch (994:10): [True: 0, False: 0]
  |  Branch (994:33): [True: 0, False: 0]
  ------------------
  995|      0|         allow_unknown_extension_) &&
  ------------------
  |  Branch (995:10): [True: 0, False: 0]
  ------------------
  996|      0|        LookingAtType(io::Tokenizer::TYPE_INTEGER)) {
  ------------------
  |  Branch (996:9): [True: 0, False: 0]
  ------------------
  997|      0|      *identifier = tokenizer_.current().text;
  998|      0|      tokenizer_.Next();
  999|      0|      return true;
 1000|      0|    }
 1001|       |
 1002|      0|    ReportError("Expected identifier, got: " + tokenizer_.current().text);
 1003|      0|    return false;
 1004|      0|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl23ConsumeBeforeWhitespaceERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 1254|   140k|  bool ConsumeBeforeWhitespace(const std::string& value) {
 1255|       |    // Report whitespace after this token, but only once.
 1256|   140k|    tokenizer_.set_report_whitespace(true);
 1257|   140k|    bool result = Consume(value);
 1258|   140k|    tokenizer_.set_report_whitespace(false);
 1259|   140k|    return result;
 1260|   140k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl20TryConsumeWhitespaceEv:
 1283|   755k|  bool TryConsumeWhitespace() {
 1284|   755k|    had_silent_marker_ = false;
 1285|   755k|    if (LookingAtType(io::Tokenizer::TYPE_WHITESPACE)) {
  ------------------
  |  Branch (1285:9): [True: 615k, False: 140k]
  ------------------
 1286|   615k|      if (tokenizer_.current().text ==
  ------------------
  |  Branch (1286:11): [True: 0, False: 615k]
  ------------------
 1287|   615k|          StrCat(" ", internal::kDebugStringSilentMarkerForDetection)) {
 1288|      0|        had_silent_marker_ = true;
 1289|      0|      }
 1290|   615k|      tokenizer_.Next();
 1291|   615k|      return true;
 1292|   615k|    }
 1293|   140k|    return false;
 1294|   755k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl26TryConsumeBeforeWhitespaceERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 1275|   475k|  bool TryConsumeBeforeWhitespace(const std::string& value) {
 1276|       |    // Report whitespace after this token, but only once.
 1277|   475k|    tokenizer_.set_report_whitespace(true);
 1278|   475k|    bool result = TryConsume(value);
 1279|   475k|    tokenizer_.set_report_whitespace(false);
 1280|   475k|    return result;
 1281|   475k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl23ConsumeMessageDelimiterEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
  401|   475k|  bool ConsumeMessageDelimiter(std::string* delimiter) {
  402|   475k|    if (TryConsume("<")) {
  ------------------
  |  Branch (402:9): [True: 0, False: 475k]
  ------------------
  403|      0|      *delimiter = ">";
  404|   475k|    } else {
  405|   475k|      DO(Consume("{"));
  ------------------
  |  |  240|   475k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 475k, False: 0]
  |  |  ------------------
  |  |  241|   475k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  406|   475k|      *delimiter = "}";
  407|   475k|    }
  408|   475k|    return true;
  409|   475k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl14ConsumeMessageEPNS0_7MessageENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE:
  390|   475k|  bool ConsumeMessage(Message* message, const std::string delimiter) {
  391|  1.05M|    while (!LookingAt(">") && !LookingAt("}")) {
  ------------------
  |  Branch (391:12): [True: 1.05M, False: 0]
  |  Branch (391:12): [True: 583k, False: 475k]
  |  Branch (391:31): [True: 583k, False: 475k]
  ------------------
  392|   583k|      DO(ConsumeField(message));
  ------------------
  |  |  240|   583k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 583k, False: 0]
  |  |  ------------------
  |  |  241|   583k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  393|   583k|    }
  394|       |
  395|       |    // Confirm that we have a valid ending delimiter.
  396|   475k|    DO(Consume(delimiter));
  ------------------
  |  |  240|   475k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 475k, False: 0]
  |  |  ------------------
  |  |  241|   475k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  397|   475k|    return true;
  398|   475k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl33ConsumeIdentifierBeforeWhitespaceEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 1008|   615k|  bool ConsumeIdentifierBeforeWhitespace(std::string* identifier) {
 1009|   615k|    tokenizer_.set_report_whitespace(true);
 1010|   615k|    bool result = ConsumeIdentifier(identifier);
 1011|   615k|    tokenizer_.set_report_whitespace(false);
 1012|   615k|    return result;
 1013|   615k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl9LookingAtERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
  974|  2.11M|  bool LookingAt(const std::string& text) {
  975|  2.11M|    return tokenizer_.current().text == text;
  976|  2.11M|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl13ConsumeStringEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 1048|  42.1k|  bool ConsumeString(std::string* text) {
 1049|  42.1k|    if (!LookingAtType(io::Tokenizer::TYPE_STRING)) {
  ------------------
  |  Branch (1049:9): [True: 0, False: 42.1k]
  ------------------
 1050|      0|      ReportError("Expected string, got: " + tokenizer_.current().text);
 1051|      0|      return false;
 1052|      0|    }
 1053|       |
 1054|  42.1k|    text->clear();
 1055|  84.3k|    while (LookingAtType(io::Tokenizer::TYPE_STRING)) {
  ------------------
  |  Branch (1055:12): [True: 42.1k, False: 42.1k]
  ------------------
 1056|  42.1k|      io::Tokenizer::ParseStringAppend(tokenizer_.current().text, text);
 1057|       |
 1058|  42.1k|      tokenizer_.Next();
 1059|  42.1k|    }
 1060|       |
 1061|  42.1k|    return true;
 1062|  42.1k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl19ConsumeFieldMessageEPNS0_7MessageEPKNS0_10ReflectionEPKNS0_15FieldDescriptorE:
  695|   475k|                           const FieldDescriptor* field) {
  696|   475k|    if (--recursion_limit_ < 0) {
  ------------------
  |  Branch (696:9): [True: 0, False: 475k]
  ------------------
  697|      0|      ReportError(
  698|      0|          StrCat("Message is too deep, the parser exceeded the "
  699|      0|                       "configured recursion limit of ",
  700|      0|                       initial_recursion_limit_, "."));
  701|      0|      return false;
  702|      0|    }
  703|       |    // If the parse information tree is not nullptr, create a nested one
  704|       |    // for the nested message.
  705|   475k|    ParseInfoTree* parent = parse_info_tree_;
  706|   475k|    if (parent != nullptr) {
  ------------------
  |  Branch (706:9): [True: 0, False: 475k]
  ------------------
  707|      0|      parse_info_tree_ = CreateNested(parent, field);
  708|      0|    }
  709|       |
  710|   475k|    std::string delimiter;
  711|   475k|    DO(ConsumeMessageDelimiter(&delimiter));
  ------------------
  |  |  240|   475k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 475k, False: 0]
  |  |  ------------------
  |  |  241|   475k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  712|   475k|    MessageFactory* factory =
  713|   475k|        finder_ ? finder_->FindExtensionFactory(field) : nullptr;
  ------------------
  |  Branch (713:9): [True: 0, False: 475k]
  ------------------
  714|   475k|    if (field->is_repeated()) {
  ------------------
  |  Branch (714:9): [True: 198k, False: 276k]
  ------------------
  715|   198k|      DO(ConsumeMessage(reflection->AddMessage(message, field, factory),
  ------------------
  |  |  240|   198k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 198k, False: 0]
  |  |  ------------------
  |  |  241|   198k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  716|   198k|                        delimiter));
  717|   276k|    } else {
  718|   276k|      DO(ConsumeMessage(reflection->MutableMessage(message, field, factory),
  ------------------
  |  |  240|   276k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 276k, False: 0]
  |  |  ------------------
  |  |  241|   276k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  719|   276k|                        delimiter));
  720|   276k|    }
  721|       |
  722|   475k|    ++recursion_limit_;
  723|       |
  724|       |    // Reset the parse information tree.
  725|   475k|    parse_info_tree_ = parent;
  726|   475k|    return true;
  727|   475k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl17ConsumeFieldValueEPNS0_7MessageEPKNS0_10ReflectionEPKNS0_15FieldDescriptorE:
  752|   140k|                         const FieldDescriptor* field) {
  753|       |// Define an easy to use macro for setting fields. This macro checks
  754|       |// to see if the field is repeated (in which case we need to use the Add
  755|       |// methods or not (in which case we need to use the Set methods).
  756|   140k|#define SET_FIELD(CPPTYPE, VALUE)                    \
  757|   140k|  if (field->is_repeated()) {                        \
  758|   140k|    reflection->Add##CPPTYPE(message, field, VALUE); \
  759|   140k|  } else {                                           \
  760|   140k|    reflection->Set##CPPTYPE(message, field, VALUE); \
  761|   140k|  }
  762|       |
  763|   140k|    switch (field->cpp_type()) {
  ------------------
  |  Branch (763:13): [True: 0, False: 140k]
  ------------------
  764|  38.2k|      case FieldDescriptor::CPPTYPE_INT32: {
  ------------------
  |  Branch (764:7): [True: 38.2k, False: 102k]
  ------------------
  765|  38.2k|        int64_t value;
  766|  38.2k|        DO(ConsumeSignedInteger(&value, kint32max));
  ------------------
  |  |  240|  38.2k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 38.2k, False: 0]
  |  |  ------------------
  |  |  241|  38.2k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  767|  38.2k|        SET_FIELD(Int32, static_cast<int32_t>(value));
  ------------------
  |  |  757|  38.2k|  if (field->is_repeated()) {                        \
  |  |  ------------------
  |  |  |  Branch (757:7): [True: 0, False: 38.2k]
  |  |  ------------------
  |  |  758|      0|    reflection->Add##CPPTYPE(message, field, VALUE); \
  |  |  759|  38.2k|  } else {                                           \
  |  |  760|  38.2k|    reflection->Set##CPPTYPE(message, field, VALUE); \
  |  |  761|  38.2k|  }
  ------------------
  768|  38.2k|        break;
  769|  38.2k|      }
  770|       |
  771|  59.8k|      case FieldDescriptor::CPPTYPE_UINT32: {
  ------------------
  |  Branch (771:7): [True: 59.8k, False: 80.3k]
  ------------------
  772|  59.8k|        uint64_t value;
  773|  59.8k|        DO(ConsumeUnsignedInteger(&value, kuint32max));
  ------------------
  |  |  240|  59.8k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 59.8k, False: 0]
  |  |  ------------------
  |  |  241|  59.8k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  774|  59.8k|        SET_FIELD(UInt32, static_cast<uint32_t>(value));
  ------------------
  |  |  757|  59.8k|  if (field->is_repeated()) {                        \
  |  |  ------------------
  |  |  |  Branch (757:7): [True: 0, False: 59.8k]
  |  |  ------------------
  |  |  758|      0|    reflection->Add##CPPTYPE(message, field, VALUE); \
  |  |  759|  59.8k|  } else {                                           \
  |  |  760|  59.8k|    reflection->Set##CPPTYPE(message, field, VALUE); \
  |  |  761|  59.8k|  }
  ------------------
  775|  59.8k|        break;
  776|  59.8k|      }
  777|       |
  778|      0|      case FieldDescriptor::CPPTYPE_INT64: {
  ------------------
  |  Branch (778:7): [True: 0, False: 140k]
  ------------------
  779|      0|        int64_t value;
  780|      0|        DO(ConsumeSignedInteger(&value, kint64max));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  781|      0|        SET_FIELD(Int64, value);
  ------------------
  |  |  757|      0|  if (field->is_repeated()) {                        \
  |  |  ------------------
  |  |  |  Branch (757:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  758|      0|    reflection->Add##CPPTYPE(message, field, VALUE); \
  |  |  759|      0|  } else {                                           \
  |  |  760|      0|    reflection->Set##CPPTYPE(message, field, VALUE); \
  |  |  761|      0|  }
  ------------------
  782|      0|        break;
  783|      0|      }
  784|       |
  785|      0|      case FieldDescriptor::CPPTYPE_UINT64: {
  ------------------
  |  Branch (785:7): [True: 0, False: 140k]
  ------------------
  786|      0|        uint64_t value;
  787|      0|        DO(ConsumeUnsignedInteger(&value, kuint64max));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  788|      0|        SET_FIELD(UInt64, value);
  ------------------
  |  |  757|      0|  if (field->is_repeated()) {                        \
  |  |  ------------------
  |  |  |  Branch (757:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  758|      0|    reflection->Add##CPPTYPE(message, field, VALUE); \
  |  |  759|      0|  } else {                                           \
  |  |  760|      0|    reflection->Set##CPPTYPE(message, field, VALUE); \
  |  |  761|      0|  }
  ------------------
  789|      0|        break;
  790|      0|      }
  791|       |
  792|      0|      case FieldDescriptor::CPPTYPE_FLOAT: {
  ------------------
  |  Branch (792:7): [True: 0, False: 140k]
  ------------------
  793|      0|        double value;
  794|      0|        DO(ConsumeDouble(&value));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  795|      0|        SET_FIELD(Float, io::SafeDoubleToFloat(value));
  ------------------
  |  |  757|      0|  if (field->is_repeated()) {                        \
  |  |  ------------------
  |  |  |  Branch (757:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  758|      0|    reflection->Add##CPPTYPE(message, field, VALUE); \
  |  |  759|      0|  } else {                                           \
  |  |  760|      0|    reflection->Set##CPPTYPE(message, field, VALUE); \
  |  |  761|      0|  }
  ------------------
  796|      0|        break;
  797|      0|      }
  798|       |
  799|      0|      case FieldDescriptor::CPPTYPE_DOUBLE: {
  ------------------
  |  Branch (799:7): [True: 0, False: 140k]
  ------------------
  800|      0|        double value;
  801|      0|        DO(ConsumeDouble(&value));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  802|      0|        SET_FIELD(Double, value);
  ------------------
  |  |  757|      0|  if (field->is_repeated()) {                        \
  |  |  ------------------
  |  |  |  Branch (757:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  758|      0|    reflection->Add##CPPTYPE(message, field, VALUE); \
  |  |  759|      0|  } else {                                           \
  |  |  760|      0|    reflection->Set##CPPTYPE(message, field, VALUE); \
  |  |  761|      0|  }
  ------------------
  803|      0|        break;
  804|      0|      }
  805|       |
  806|  42.1k|      case FieldDescriptor::CPPTYPE_STRING: {
  ------------------
  |  Branch (806:7): [True: 42.1k, False: 98.0k]
  ------------------
  807|  42.1k|        std::string value;
  808|  42.1k|        DO(ConsumeString(&value));
  ------------------
  |  |  240|  42.1k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 42.1k, False: 0]
  |  |  ------------------
  |  |  241|  42.1k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  809|  42.1k|        SET_FIELD(String, std::move(value));
  ------------------
  |  |  757|  42.1k|  if (field->is_repeated()) {                        \
  |  |  ------------------
  |  |  |  Branch (757:7): [True: 0, False: 42.1k]
  |  |  ------------------
  |  |  758|      0|    reflection->Add##CPPTYPE(message, field, VALUE); \
  |  |  759|  42.1k|  } else {                                           \
  |  |  760|  42.1k|    reflection->Set##CPPTYPE(message, field, VALUE); \
  |  |  761|  42.1k|  }
  ------------------
  810|  42.1k|        break;
  811|  42.1k|      }
  812|       |
  813|      0|      case FieldDescriptor::CPPTYPE_BOOL: {
  ------------------
  |  Branch (813:7): [True: 0, False: 140k]
  ------------------
  814|      0|        if (LookingAtType(io::Tokenizer::TYPE_INTEGER)) {
  ------------------
  |  Branch (814:13): [True: 0, False: 0]
  ------------------
  815|      0|          uint64_t value;
  816|      0|          DO(ConsumeUnsignedInteger(&value, 1));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  817|      0|          SET_FIELD(Bool, value);
  ------------------
  |  |  757|      0|  if (field->is_repeated()) {                        \
  |  |  ------------------
  |  |  |  Branch (757:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  758|      0|    reflection->Add##CPPTYPE(message, field, VALUE); \
  |  |  759|      0|  } else {                                           \
  |  |  760|      0|    reflection->Set##CPPTYPE(message, field, VALUE); \
  |  |  761|      0|  }
  ------------------
  818|      0|        } else {
  819|      0|          std::string value;
  820|      0|          DO(ConsumeIdentifier(&value));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  821|      0|          if (value == "true" || value == "True" || value == "t") {
  ------------------
  |  Branch (821:15): [True: 0, False: 0]
  |  Branch (821:34): [True: 0, False: 0]
  |  Branch (821:53): [True: 0, False: 0]
  ------------------
  822|      0|            SET_FIELD(Bool, true);
  ------------------
  |  |  757|      0|  if (field->is_repeated()) {                        \
  |  |  ------------------
  |  |  |  Branch (757:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  758|      0|    reflection->Add##CPPTYPE(message, field, VALUE); \
  |  |  759|      0|  } else {                                           \
  |  |  760|      0|    reflection->Set##CPPTYPE(message, field, VALUE); \
  |  |  761|      0|  }
  ------------------
  823|      0|          } else if (value == "false" || value == "False" || value == "f") {
  ------------------
  |  Branch (823:22): [True: 0, False: 0]
  |  Branch (823:42): [True: 0, False: 0]
  |  Branch (823:62): [True: 0, False: 0]
  ------------------
  824|      0|            SET_FIELD(Bool, false);
  ------------------
  |  |  757|      0|  if (field->is_repeated()) {                        \
  |  |  ------------------
  |  |  |  Branch (757:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  758|      0|    reflection->Add##CPPTYPE(message, field, VALUE); \
  |  |  759|      0|  } else {                                           \
  |  |  760|      0|    reflection->Set##CPPTYPE(message, field, VALUE); \
  |  |  761|      0|  }
  ------------------
  825|      0|          } else {
  826|      0|            ReportError("Invalid value for boolean field \"" + field->name() +
  827|      0|                        "\". Value: \"" + value + "\".");
  828|      0|            return false;
  829|      0|          }
  830|      0|        }
  831|      0|        break;
  832|      0|      }
  833|       |
  834|      0|      case FieldDescriptor::CPPTYPE_ENUM: {
  ------------------
  |  Branch (834:7): [True: 0, False: 140k]
  ------------------
  835|      0|        std::string value;
  836|      0|        int64_t int_value = kint64max;
  837|      0|        const EnumDescriptor* enum_type = field->enum_type();
  838|      0|        const EnumValueDescriptor* enum_value = nullptr;
  839|       |
  840|      0|        if (LookingAtType(io::Tokenizer::TYPE_IDENTIFIER)) {
  ------------------
  |  Branch (840:13): [True: 0, False: 0]
  ------------------
  841|      0|          DO(ConsumeIdentifier(&value));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  842|       |          // Find the enumeration value.
  843|      0|          enum_value = enum_type->FindValueByName(value);
  844|       |
  845|      0|        } else if (LookingAt("-") ||
  ------------------
  |  Branch (845:20): [True: 0, False: 0]
  |  Branch (845:20): [True: 0, False: 0]
  ------------------
  846|      0|                   LookingAtType(io::Tokenizer::TYPE_INTEGER)) {
  ------------------
  |  Branch (846:20): [True: 0, False: 0]
  ------------------
  847|      0|          DO(ConsumeSignedInteger(&int_value, kint32max));
  ------------------
  |  |  240|      0|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  241|      0|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
  848|      0|          value = StrCat(int_value);  // for error reporting
  849|      0|          enum_value = enum_type->FindValueByNumber(int_value);
  850|      0|        } else {
  851|      0|          ReportError("Expected integer or identifier, got: " +
  852|      0|                      tokenizer_.current().text);
  853|      0|          return false;
  854|      0|        }
  855|       |
  856|      0|        if (enum_value == nullptr) {
  ------------------
  |  Branch (856:13): [True: 0, False: 0]
  ------------------
  857|      0|          if (int_value != kint64max &&
  ------------------
  |  Branch (857:15): [True: 0, False: 0]
  ------------------
  858|      0|              reflection->SupportsUnknownEnumValues()) {
  ------------------
  |  Branch (858:15): [True: 0, False: 0]
  ------------------
  859|      0|            SET_FIELD(EnumValue, int_value);
  ------------------
  |  |  757|      0|  if (field->is_repeated()) {                        \
  |  |  ------------------
  |  |  |  Branch (757:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  758|      0|    reflection->Add##CPPTYPE(message, field, VALUE); \
  |  |  759|      0|  } else {                                           \
  |  |  760|      0|    reflection->Set##CPPTYPE(message, field, VALUE); \
  |  |  761|      0|  }
  ------------------
  860|      0|            return true;
  861|      0|          } else if (!allow_unknown_enum_) {
  ------------------
  |  Branch (861:22): [True: 0, False: 0]
  ------------------
  862|      0|            ReportError("Unknown enumeration value of \"" + value +
  863|      0|                        "\" for "
  864|      0|                        "field \"" +
  865|      0|                        field->name() + "\".");
  866|      0|            return false;
  867|      0|          } else {
  868|      0|            ReportWarning("Unknown enumeration value of \"" + value +
  869|      0|                          "\" for "
  870|      0|                          "field \"" +
  871|      0|                          field->name() + "\".");
  872|      0|            return true;
  873|      0|          }
  874|      0|        }
  875|       |
  876|      0|        SET_FIELD(Enum, enum_value);
  ------------------
  |  |  757|      0|  if (field->is_repeated()) {                        \
  |  |  ------------------
  |  |  |  Branch (757:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  758|      0|    reflection->Add##CPPTYPE(message, field, VALUE); \
  |  |  759|      0|  } else {                                           \
  |  |  760|      0|    reflection->Set##CPPTYPE(message, field, VALUE); \
  |  |  761|      0|  }
  ------------------
  877|      0|        break;
  878|      0|      }
  879|       |
  880|      0|      case FieldDescriptor::CPPTYPE_MESSAGE: {
  ------------------
  |  Branch (880:7): [True: 0, False: 140k]
  ------------------
  881|       |        // We should never get here. Put here instead of a default
  882|       |        // so that if new types are added, we get a nice compiler warning.
  883|      0|        GOOGLE_LOG(FATAL) << "Reached an unintended state: CPPTYPE_MESSAGE";
  ------------------
  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  ------------------
  884|      0|        break;
  885|      0|      }
  886|   140k|    }
  887|   140k|#undef SET_FIELD
  888|   140k|    return true;
  889|   140k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl20ConsumeSignedIntegerEPlm:
 1087|  38.2k|  bool ConsumeSignedInteger(int64_t* value, uint64_t max_value) {
 1088|  38.2k|    bool negative = false;
 1089|       |
 1090|  38.2k|    if (TryConsume("-")) {
  ------------------
  |  Branch (1090:9): [True: 423, False: 37.7k]
  ------------------
 1091|    423|      negative = true;
 1092|       |      // Two's complement always allows one more negative integer than
 1093|       |      // positive.
 1094|    423|      ++max_value;
 1095|    423|    }
 1096|       |
 1097|  38.2k|    uint64_t unsigned_value;
 1098|       |
 1099|  38.2k|    DO(ConsumeUnsignedInteger(&unsigned_value, max_value));
  ------------------
  |  |  240|  38.2k|  if (STATEMENT) {    \
  |  |  ------------------
  |  |  |  Branch (240:7): [True: 38.2k, False: 0]
  |  |  ------------------
  |  |  241|  38.2k|  } else {            \
  |  |  242|      0|    return false;     \
  |  |  243|      0|  }
  ------------------
 1100|       |
 1101|  38.2k|    if (negative) {
  ------------------
  |  Branch (1101:9): [True: 423, False: 37.7k]
  ------------------
 1102|    423|      if ((static_cast<uint64_t>(kint64max) + 1) == unsigned_value) {
  ------------------
  |  Branch (1102:11): [True: 0, False: 423]
  ------------------
 1103|      0|        *value = kint64min;
 1104|    423|      } else {
 1105|    423|        *value = -static_cast<int64_t>(unsigned_value);
 1106|    423|      }
 1107|  37.7k|    } else {
 1108|  37.7k|      *value = static_cast<int64_t>(unsigned_value);
 1109|  37.7k|    }
 1110|       |
 1111|  38.2k|    return true;
 1112|  38.2k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl22ConsumeUnsignedIntegerEPmm:
 1066|  98.0k|  bool ConsumeUnsignedInteger(uint64_t* value, uint64_t max_value) {
 1067|  98.0k|    if (!LookingAtType(io::Tokenizer::TYPE_INTEGER)) {
  ------------------
  |  Branch (1067:9): [True: 0, False: 98.0k]
  ------------------
 1068|      0|      ReportError("Expected integer, got: " + tokenizer_.current().text);
 1069|      0|      return false;
 1070|      0|    }
 1071|       |
 1072|  98.0k|    if (!io::Tokenizer::ParseInteger(tokenizer_.current().text, max_value,
  ------------------
  |  Branch (1072:9): [True: 0, False: 98.0k]
  ------------------
 1073|  98.0k|                                     value)) {
 1074|      0|      ReportError("Integer out of range (" + tokenizer_.current().text + ")");
 1075|      0|      return false;
 1076|      0|    }
 1077|       |
 1078|  98.0k|    tokenizer_.Next();
 1079|  98.0k|    return true;
 1080|  98.0k|  }
_ZN6google8protobuf10TextFormat6Parser10ParserImpl7ConsumeERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 1238|  1.09M|  bool Consume(const std::string& value) {
 1239|  1.09M|    const std::string& current_value = tokenizer_.current().text;
 1240|       |
 1241|  1.09M|    if (current_value != value) {
  ------------------
  |  Branch (1241:9): [True: 0, False: 1.09M]
  ------------------
 1242|      0|      ReportError("Expected \"" + value + "\", found \"" + current_value +
 1243|      0|                  "\".");
 1244|      0|      return false;
 1245|      0|    }
 1246|       |
 1247|  1.09M|    tokenizer_.Next();
 1248|       |
 1249|  1.09M|    return true;
 1250|  1.09M|  }

_ZN6google8protobuf15UnknownFieldSet16default_instanceEv:
   57|      6|const UnknownFieldSet& UnknownFieldSet::default_instance() {
   58|      6|  static auto instance = internal::OnShutdownDelete(new UnknownFieldSet());
   59|      6|  return *instance;
   60|      6|}

_ZNK6google8protobuf15UnknownFieldSet5emptyEv:
  312|      6|inline bool UnknownFieldSet::empty() const { return fields_.empty(); }

_ZN6google8protobuf8internal14WireFormatLite16VerifyUtf8StringEPKciNS2_9OperationES4_:
  622|     10|                                      const char* field_name) {
  623|     10|  if (!IsStructurallyValidUTF8(data, size)) {
  ------------------
  |  Branch (623:7): [True: 0, False: 10]
  ------------------
  624|      0|    const char* operation_str = nullptr;
  625|      0|    switch (op) {
  ------------------
  |  Branch (625:13): [True: 0, False: 0]
  ------------------
  626|      0|      case PARSE:
  ------------------
  |  Branch (626:7): [True: 0, False: 0]
  ------------------
  627|      0|        operation_str = "parsing";
  628|      0|        break;
  629|      0|      case SERIALIZE:
  ------------------
  |  Branch (629:7): [True: 0, False: 0]
  ------------------
  630|      0|        operation_str = "serializing";
  631|      0|        break;
  632|       |        // no default case: have the compiler warn if a case is not covered.
  633|      0|    }
  634|      0|    PrintUTF8ErrorLog("", field_name, operation_str, false);
  635|      0|    return false;
  636|      0|  }
  637|     10|  return true;
  638|     10|}

_ZN6google8protobuf8internal14WireFormatLite21WriteBoolNoTagToArrayEbPh:
 1433|      6|                                                      uint8_t* target) {
 1434|      6|  return io::CodedOutputStream::WriteVarint32ToArray(value ? 1 : 0, target);
  ------------------
  |  Branch (1434:54): [True: 6, False: 0]
  ------------------
 1435|      6|}
_ZN6google8protobuf8internal14WireFormatLite21WriteEnumNoTagToArrayEiPh:
 1437|      1|                                                      uint8_t* target) {
 1438|      1|  return io::CodedOutputStream::WriteVarint32SignExtendedToArray(value, target);
 1439|      1|}
_ZN6google8protobuf8internal14WireFormatLite16WriteBoolToArrayEibPh:
 1605|      6|                                                 uint8_t* target) {
 1606|      6|  target = WriteTagToArray(field_number, WIRETYPE_VARINT, target);
 1607|      6|  return WriteBoolNoTagToArray(value, target);
 1608|      6|}
_ZN6google8protobuf8internal14WireFormatLite16WriteEnumToArrayEiiPh:
 1610|      1|                                                 uint8_t* target) {
 1611|      1|  target = WriteTagToArray(field_number, WIRETYPE_VARINT, target);
 1612|      1|  return WriteEnumNoTagToArray(value, target);
 1613|      1|}
_ZN6google8protobuf8internal14WireFormatLite8EnumSizeEi:
 1756|      1|inline size_t WireFormatLite::EnumSize(int value) {
 1757|      1|  return io::CodedOutputStream::VarintSize32SignExtended(value);
 1758|      1|}

_ZN16protobuf_mutator7Mutator4SeedEj:
  622|  17.8k|void Mutator::Seed(uint32_t value) { random_.seed(value); }
_ZN16protobuf_mutator7Mutator3FixEPN6google8protobuf7MessageE:
  624|  17.8k|void Mutator::Fix(Message* message) {
  625|  17.8k|  UnpackedAny any;
  626|  17.8k|  UnpackAny(*message, &any);
  627|       |
  628|  17.8k|  PostProcessing(keep_initialized_, post_processors_, any, &random_)
  629|  17.8k|      .Run(message, kMaxInitializeDepth);
  630|  17.8k|  assert(IsInitialized(*message));
  631|  17.8k|}
_ZNK16protobuf_mutator7Mutator13IsInitializedERKN6google8protobuf7MessageE:
  802|  17.8k|bool Mutator::IsInitialized(const Message& message) const {
  803|  17.8k|  if (!keep_initialized_ || message.IsInitialized()) return true;
  ------------------
  |  Branch (803:7): [True: 0, False: 17.8k]
  |  Branch (803:29): [True: 17.8k, False: 0]
  ------------------
  804|      0|  std::cerr << "Uninitialized: " << message.DebugString() << "\n";
  805|      0|  return false;
  806|  17.8k|}
mutator.cc:_ZN16protobuf_mutator12_GLOBAL__N_19UnpackAnyERKN6google8protobuf7MessageEPNSt3__113unordered_mapIPS4_NS6_10unique_ptrIS3_NS6_14default_deleteIS3_EEEENS6_4hashIS8_EENS6_8equal_toIS8_EENS6_9allocatorINS6_4pairIKS8_SC_EEEEEE:
  399|   493k|void UnpackAny(const Message& message, UnpackedAny* result) {
  400|   493k|  if (std::unique_ptr<Message> any = UnpackIfAny(message)) {
  ------------------
  |  Branch (400:32): [True: 0, False: 493k]
  ------------------
  401|      0|    UnpackAny(*any, result);
  402|      0|    result->emplace(&message, std::move(any));
  403|      0|    return;
  404|      0|  }
  405|       |
  406|   493k|  const Descriptor* descriptor = message.GetDescriptor();
  407|   493k|  const Reflection* reflection = message.GetReflection();
  408|       |
  409|  2.10M|  for (int i = 0; i < descriptor->field_count(); ++i) {
  ------------------
  |  Branch (409:19): [True: 1.61M, False: 493k]
  ------------------
  410|  1.61M|    const FieldDescriptor* field = descriptor->field(i);
  411|  1.61M|    if (field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE) {
  ------------------
  |  Branch (411:9): [True: 1.16M, False: 449k]
  ------------------
  412|  1.16M|      if (field->is_repeated()) {
  ------------------
  |  Branch (412:11): [True: 135k, False: 1.03M]
  ------------------
  413|   135k|        const int field_size = reflection->FieldSize(message, field);
  414|   334k|        for (int j = 0; j < field_size; ++j) {
  ------------------
  |  Branch (414:25): [True: 198k, False: 135k]
  ------------------
  415|   198k|          UnpackAny(reflection->GetRepeatedMessage(message, field, j), result);
  416|   198k|        }
  417|  1.03M|      } else if (reflection->HasField(message, field)) {
  ------------------
  |  Branch (417:18): [True: 276k, False: 753k]
  ------------------
  418|   276k|        UnpackAny(reflection->GetMessage(message, field), result);
  419|   276k|      }
  420|  1.16M|    }
  421|  1.61M|  }
  422|   493k|}
mutator.cc:_ZN16protobuf_mutator12_GLOBAL__N_111UnpackIfAnyERKN6google8protobuf7MessageE:
  394|   493k|std::unique_ptr<Message> UnpackIfAny(const Message& message) {
  395|   493k|  if (const Any* any = CastToAny(&message)) return UnpackAny(*any);
  ------------------
  |  Branch (395:18): [True: 0, False: 493k]
  ------------------
  396|   493k|  return {};
  397|   493k|}
mutator.cc:_ZN16protobuf_mutator12_GLOBAL__N_19CastToAnyEPKN6google8protobuf7MessageE:
  382|   493k|const Any* CastToAny(const Message* message) {
  383|   493k|  return Any::GetDescriptor() == message->GetDescriptor()
  ------------------
  |  Branch (383:10): [True: 0, False: 493k]
  ------------------
  384|   493k|             ? static_cast<const Any*>(message)
  385|   493k|             : nullptr;
  386|   493k|}
mutator.cc:_ZN16protobuf_mutator12_GLOBAL__N_114PostProcessingC2EbRKNSt3__118unordered_multimapIPKN6google8protobuf10DescriptorENS2_8functionIFvPNS5_7MessageEjEEENS2_4hashIS8_EENS2_8equal_toIS8_EENS2_9allocatorINS2_4pairIKS8_SD_EEEEEERKNS2_13unordered_mapIPKSA_NS2_10unique_ptrISA_NS2_14default_deleteISA_EEEENSE_ISS_EENSG_ISS_EENSI_INSJ_IKSS_SW_EEEEEEPNS2_26linear_congruential_engineImLm48271ELm0ELm2147483647EEE:
  431|  17.8k|      : keep_initialized_(keep_initialized),
  432|  17.8k|        post_processors_(post_processors),
  433|  17.8k|        any_(any),
  434|  17.8k|        random_(random) {}
mutator.cc:_ZN16protobuf_mutator12_GLOBAL__N_114PostProcessing3RunEPN6google8protobuf7MessageEi:
  436|   493k|  void Run(Message* message, int max_depth) {
  437|   493k|    --max_depth;
  438|   493k|    const Descriptor* descriptor = message->GetDescriptor();
  439|       |
  440|       |    // Apply custom mutators in nested messages before packing any.
  441|   493k|    const Reflection* reflection = message->GetReflection();
  442|  2.10M|    for (int i = 0; i < descriptor->field_count(); i++) {
  ------------------
  |  Branch (442:21): [True: 1.61M, False: 493k]
  ------------------
  443|  1.61M|      const FieldDescriptor* field = descriptor->field(i);
  444|  1.61M|      if (keep_initialized_ &&
  ------------------
  |  Branch (444:11): [True: 1.61M, False: 0]
  ------------------
  445|  1.61M|          (field->is_required() || descriptor->options().map_entry()) &&
  ------------------
  |  Branch (445:12): [True: 106k, False: 1.50M]
  |  Branch (445:36): [True: 0, False: 1.50M]
  ------------------
  446|  1.61M|          !reflection->HasField(*message, field)) {
  ------------------
  |  Branch (446:11): [True: 0, False: 106k]
  ------------------
  447|      0|        CreateDefaultField()(FieldInstance(message, field));
  448|      0|      }
  449|       |
  450|  1.61M|      if (field->cpp_type() != FieldDescriptor::CPPTYPE_MESSAGE) continue;
  ------------------
  |  Branch (450:11): [True: 449k, False: 1.16M]
  ------------------
  451|       |
  452|  1.16M|      if (max_depth < 0 && !field->is_required()) {
  ------------------
  |  Branch (452:11): [True: 0, False: 1.16M]
  |  Branch (452:28): [True: 0, False: 0]
  ------------------
  453|       |        // Clear deep optional fields to avoid stack overflow.
  454|      0|        reflection->ClearField(message, field);
  455|      0|        if (field->is_repeated())
  ------------------
  |  Branch (455:13): [True: 0, False: 0]
  ------------------
  456|      0|          assert(!reflection->FieldSize(*message, field));
  457|      0|        else
  458|      0|          assert(!reflection->HasField(*message, field));
  459|      0|        continue;
  460|      0|      }
  461|       |
  462|  1.16M|      if (field->is_repeated()) {
  ------------------
  |  Branch (462:11): [True: 135k, False: 1.03M]
  ------------------
  463|   135k|        const int field_size = reflection->FieldSize(*message, field);
  464|   334k|        for (int j = 0; j < field_size; ++j) {
  ------------------
  |  Branch (464:25): [True: 198k, False: 135k]
  ------------------
  465|   198k|          Message* nested_message =
  466|   198k|              reflection->MutableRepeatedMessage(message, field, j);
  467|   198k|          Run(nested_message, max_depth);
  468|   198k|        }
  469|  1.03M|      } else if (reflection->HasField(*message, field)) {
  ------------------
  |  Branch (469:18): [True: 276k, False: 753k]
  ------------------
  470|   276k|        Message* nested_message = reflection->MutableMessage(message, field);
  471|   276k|        Run(nested_message, max_depth);
  472|   276k|      }
  473|  1.16M|    }
  474|       |
  475|   493k|    if (Any* any = CastToAny(message)) {
  ------------------
  |  Branch (475:14): [True: 0, False: 493k]
  ------------------
  476|      0|      if (max_depth < 0) {
  ------------------
  |  Branch (476:11): [True: 0, False: 0]
  ------------------
  477|       |        // Clear deep Any fields to avoid stack overflow.
  478|      0|        any->Clear();
  479|      0|      } else {
  480|      0|        auto It = any_.find(message);
  481|      0|        if (It != any_.end()) {
  ------------------
  |  Branch (481:13): [True: 0, False: 0]
  ------------------
  482|      0|          Run(It->second.get(), max_depth);
  483|      0|          std::string value;
  484|      0|          It->second->SerializePartialToString(&value);
  485|      0|          *any->mutable_value() = value;
  486|      0|        }
  487|      0|      }
  488|      0|    }
  489|       |
  490|       |    // Call user callback after message trimmed, initialized and packed.
  491|   493k|    auto range = post_processors_.equal_range(descriptor);
  492|   493k|    for (auto it = range.first; it != range.second; ++it)
  ------------------
  |  Branch (492:33): [True: 0, False: 493k]
  ------------------
  493|      0|      it->second(message, (*random_)());
  494|   493k|  }
mutator.cc:_ZN16protobuf_mutator12_GLOBAL__N_19CastToAnyEPN6google8protobuf7MessageE:
  388|   493k|Any* CastToAny(Message* message) {
  389|   493k|  return Any::GetDescriptor() == message->GetDescriptor()
  ------------------
  |  Branch (389:10): [True: 0, False: 493k]
  ------------------
  390|   493k|             ? static_cast<Any*>(message)
  391|   493k|             : nullptr;
  392|   493k|}

_ZN16protobuf_mutator7MutatorC2Ev:
   48|      1|  Mutator() = default;
_ZN16protobuf_mutator7MutatorD2Ev:
   49|      1|  virtual ~Mutator() = default;

_ZN16protobuf_mutator16ParseTextMessageEPKhmPN6google8protobuf7MessageE:
   24|  17.8k|bool ParseTextMessage(const uint8_t* data, size_t size, Message* output) {
   25|  17.8k|  return ParseTextMessage({reinterpret_cast<const char*>(data), size}, output);
   26|  17.8k|}
_ZN16protobuf_mutator16ParseTextMessageERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPN6google8protobuf7MessageE:
   28|  17.8k|bool ParseTextMessage(const std::string& data, protobuf::Message* output) {
   29|  17.8k|  output->Clear();
   30|  17.8k|  TextFormat::Parser parser;
   31|  17.8k|  parser.SetRecursionLimit(100);
   32|  17.8k|  parser.AllowPartialMessage(true);
   33|  17.8k|  parser.AllowUnknownField(true);
   34|  17.8k|  if (!parser.ParseFromString(data, output)) {
  ------------------
  |  Branch (34:7): [True: 0, False: 17.8k]
  ------------------
   35|      0|    output->Clear();
   36|      0|    return false;
   37|      0|  }
   38|  17.8k|  return true;
   39|  17.8k|}

_Z36descriptor_table_cdef_2eproto_getterv:
 1296|      1|PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cdef_2eproto_getter() {
 1297|      1|  return &descriptor_table_cdef_2eproto;
 1298|      1|}
_ZN4cdef10IdentifierC2EPN6google8protobuf5ArenaEb:
 1322|  15.4k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 1323|  15.4k|  SharedCtor(arena, is_message_owned);
 1324|       |  // @@protoc_insertion_point(arena_constructor:cdef.Identifier)
 1325|  15.4k|}
_ZN4cdef10IdentifierD2Ev:
 1364|  15.4k|Identifier::~Identifier() {
 1365|       |  // @@protoc_insertion_point(destructor:cdef.Identifier)
 1366|  15.4k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (1366:13): [True: 0, False: 15.4k]
  ------------------
 1367|      0|  (void)arena;
 1368|      0|    return;
 1369|      0|  }
 1370|  15.4k|  SharedDtor();
 1371|  15.4k|}
_ZNK4cdef10Identifier13IsInitializedEv:
 1556|  15.4k|bool Identifier::IsInitialized() const {
 1557|  15.4k|  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  ------------------
  |  Branch (1557:7): [True: 0, False: 15.4k]
  ------------------
 1558|  15.4k|  return true;
 1559|  15.4k|}
_ZNK4cdef10Identifier11GetMetadataEv:
 1574|   185k|::PROTOBUF_NAMESPACE_ID::Metadata Identifier::GetMetadata() const {
 1575|   185k|  return ::_pbi::AssignDescriptors(
 1576|   185k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 1577|   185k|      file_level_metadata_cdef_2eproto[0]);
 1578|   185k|}
_ZN4cdef15IdentifiersListC2EPN6google8protobuf5ArenaEb:
 1588|  2.18k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 1589|  2.18k|  SharedCtor(arena, is_message_owned);
 1590|       |  // @@protoc_insertion_point(arena_constructor:cdef.IdentifiersList)
 1591|  2.18k|}
_ZN4cdef15IdentifiersListD2Ev:
 1613|  2.18k|IdentifiersList::~IdentifiersList() {
 1614|       |  // @@protoc_insertion_point(destructor:cdef.IdentifiersList)
 1615|  2.18k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (1615:13): [True: 0, False: 2.18k]
  ------------------
 1616|      0|  (void)arena;
 1617|      0|    return;
 1618|      0|  }
 1619|  2.18k|  SharedDtor();
 1620|  2.18k|}
_ZNK4cdef15IdentifiersList13IsInitializedEv:
 1749|  2.18k|bool IdentifiersList::IsInitialized() const {
 1750|  2.18k|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_))
  ------------------
  |  Branch (1750:7): [True: 0, False: 2.18k]
  ------------------
 1751|      0|    return false;
 1752|  2.18k|  return true;
 1753|  2.18k|}
_ZNK4cdef15IdentifiersList11GetMetadataEv:
 1761|  23.7k|::PROTOBUF_NAMESPACE_ID::Metadata IdentifiersList::GetMetadata() const {
 1762|  23.7k|  return ::_pbi::AssignDescriptors(
 1763|  23.7k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 1764|  23.7k|      file_level_metadata_cdef_2eproto[1]);
 1765|  23.7k|}
_ZN4cdef9ParameterC2EPN6google8protobuf5ArenaEb:
 1787|  1.28k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 1788|  1.28k|  SharedCtor(arena, is_message_owned);
 1789|       |  // @@protoc_insertion_point(arena_constructor:cdef.Parameter)
 1790|  1.28k|}
_ZN4cdef9ParameterD2Ev:
 1817|  1.28k|Parameter::~Parameter() {
 1818|       |  // @@protoc_insertion_point(destructor:cdef.Parameter)
 1819|  1.28k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (1819:13): [True: 0, False: 1.28k]
  ------------------
 1820|      0|  (void)arena;
 1821|      0|    return;
 1822|      0|  }
 1823|  1.28k|  SharedDtor();
 1824|  1.28k|}
_ZNK4cdef9Parameter13IsInitializedEv:
 1957|  1.28k|bool Parameter::IsInitialized() const {
 1958|  1.28k|  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  ------------------
  |  Branch (1958:7): [True: 0, False: 1.28k]
  ------------------
 1959|  1.28k|  if (_internal_has_name()) {
  ------------------
  |  Branch (1959:7): [True: 1.28k, False: 0]
  ------------------
 1960|  1.28k|    if (!_impl_.name_->IsInitialized()) return false;
  ------------------
  |  Branch (1960:9): [True: 0, False: 1.28k]
  ------------------
 1961|  1.28k|  }
 1962|  1.28k|  return true;
 1963|  1.28k|}
_ZNK4cdef9Parameter11GetMetadataEv:
 1972|  11.5k|::PROTOBUF_NAMESPACE_ID::Metadata Parameter::GetMetadata() const {
 1973|  11.5k|  return ::_pbi::AssignDescriptors(
 1974|  11.5k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 1975|  11.5k|      file_level_metadata_cdef_2eproto[2]);
 1976|  11.5k|}
_ZN4cdef10ParametersC2EPN6google8protobuf5ArenaEb:
 1986|  3.04k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 1987|  3.04k|  SharedCtor(arena, is_message_owned);
 1988|       |  // @@protoc_insertion_point(arena_constructor:cdef.Parameters)
 1989|  3.04k|}
_ZN4cdef10ParametersD2Ev:
 2011|  3.04k|Parameters::~Parameters() {
 2012|       |  // @@protoc_insertion_point(destructor:cdef.Parameters)
 2013|  3.04k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (2013:13): [True: 0, False: 3.04k]
  ------------------
 2014|      0|  (void)arena;
 2015|      0|    return;
 2016|      0|  }
 2017|  3.04k|  SharedDtor();
 2018|  3.04k|}
_ZNK4cdef10Parameters13IsInitializedEv:
 2147|  3.04k|bool Parameters::IsInitialized() const {
 2148|  3.04k|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.parameters_))
  ------------------
  |  Branch (2148:7): [True: 0, False: 3.04k]
  ------------------
 2149|      0|    return false;
 2150|  3.04k|  return true;
 2151|  3.04k|}
_ZNK4cdef10Parameters11GetMetadataEv:
 2159|  22.1k|::PROTOBUF_NAMESPACE_ID::Metadata Parameters::GetMetadata() const {
 2160|  22.1k|  return ::_pbi::AssignDescriptors(
 2161|  22.1k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 2162|  22.1k|      file_level_metadata_cdef_2eproto[3]);
 2163|  22.1k|}
_ZN4cdef14ParametersListC2EPN6google8protobuf5ArenaEb:
 2197|  5.18k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 2198|  5.18k|  SharedCtor(arena, is_message_owned);
 2199|       |  // @@protoc_insertion_point(arena_constructor:cdef.ParametersList)
 2200|  5.18k|}
_ZN4cdef14ParametersListD2Ev:
 2245|  5.18k|ParametersList::~ParametersList() {
 2246|       |  // @@protoc_insertion_point(destructor:cdef.ParametersList)
 2247|  5.18k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (2247:13): [True: 0, False: 5.18k]
  ------------------
 2248|      0|  (void)arena;
 2249|      0|    return;
 2250|      0|  }
 2251|  5.18k|  SharedDtor();
 2252|  5.18k|}
_ZN4cdef14ParametersList27clear_parameters_list_oneofEv:
 2265|  3.78k|void ParametersList::clear_parameters_list_oneof() {
 2266|       |// @@protoc_insertion_point(one_of_clear_start:cdef.ParametersList)
 2267|  3.78k|  switch (parameters_list_oneof_case()) {
  ------------------
  |  Branch (2267:11): [True: 0, False: 3.78k]
  ------------------
 2268|    743|    case kKeywordVoid: {
  ------------------
  |  Branch (2268:5): [True: 743, False: 3.04k]
  ------------------
 2269|       |      // No need to clear
 2270|    743|      break;
 2271|      0|    }
 2272|  3.04k|    case kParameters: {
  ------------------
  |  Branch (2272:5): [True: 3.04k, False: 743]
  ------------------
 2273|  3.04k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (2273:11): [True: 3.04k, False: 0]
  ------------------
 2274|  3.04k|        delete _impl_.parameters_list_oneof_.parameters_;
 2275|  3.04k|      }
 2276|  3.04k|      break;
 2277|      0|    }
 2278|      0|    case PARAMETERS_LIST_ONEOF_NOT_SET: {
  ------------------
  |  Branch (2278:5): [True: 0, False: 3.78k]
  ------------------
 2279|      0|      break;
 2280|      0|    }
 2281|  3.78k|  }
 2282|  3.78k|  _impl_._oneof_case_[0] = PARAMETERS_LIST_ONEOF_NOT_SET;
 2283|  3.78k|}
_ZNK4cdef14ParametersList13IsInitializedEv:
 2465|  5.18k|bool ParametersList::IsInitialized() const {
 2466|  5.18k|  switch (parameters_list_oneof_case()) {
  ------------------
  |  Branch (2466:11): [True: 0, False: 5.18k]
  ------------------
 2467|    743|    case kKeywordVoid: {
  ------------------
  |  Branch (2467:5): [True: 743, False: 4.44k]
  ------------------
 2468|    743|      break;
 2469|      0|    }
 2470|  3.04k|    case kParameters: {
  ------------------
  |  Branch (2470:5): [True: 3.04k, False: 2.14k]
  ------------------
 2471|  3.04k|      if (_internal_has_parameters()) {
  ------------------
  |  Branch (2471:11): [True: 3.04k, False: 0]
  ------------------
 2472|  3.04k|        if (!_impl_.parameters_list_oneof_.parameters_->IsInitialized()) return false;
  ------------------
  |  Branch (2472:13): [True: 0, False: 3.04k]
  ------------------
 2473|  3.04k|      }
 2474|  3.04k|      break;
 2475|  3.04k|    }
 2476|  3.04k|    case PARAMETERS_LIST_ONEOF_NOT_SET: {
  ------------------
  |  Branch (2476:5): [True: 1.40k, False: 3.78k]
  ------------------
 2477|  1.40k|      break;
 2478|  3.04k|    }
 2479|  5.18k|  }
 2480|  5.18k|  return true;
 2481|  5.18k|}
_ZNK4cdef14ParametersList11GetMetadataEv:
 2492|  44.9k|::PROTOBUF_NAMESPACE_ID::Metadata ParametersList::GetMetadata() const {
 2493|  44.9k|  return ::_pbi::AssignDescriptors(
 2494|  44.9k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 2495|  44.9k|      file_level_metadata_cdef_2eproto[4]);
 2496|  44.9k|}
_ZN4cdef9SpecifierC2EPN6google8protobuf5ArenaEb:
 2586|  53.3k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 2587|  53.3k|  SharedCtor(arena, is_message_owned);
 2588|       |  // @@protoc_insertion_point(arena_constructor:cdef.Specifier)
 2589|  53.3k|}
_ZN4cdef9SpecifierD2Ev:
 2640|  53.3k|Specifier::~Specifier() {
 2641|       |  // @@protoc_insertion_point(destructor:cdef.Specifier)
 2642|  53.3k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (2642:13): [True: 0, False: 53.3k]
  ------------------
 2643|      0|  (void)arena;
 2644|      0|    return;
 2645|      0|  }
 2646|  53.3k|  SharedDtor();
 2647|  53.3k|}
_ZN4cdef9Specifier21clear_specifier_oneofEv:
 2660|  43.8k|void Specifier::clear_specifier_oneof() {
 2661|       |// @@protoc_insertion_point(one_of_clear_start:cdef.Specifier)
 2662|  43.8k|  switch (specifier_oneof_case()) {
  ------------------
  |  Branch (2662:11): [True: 0, False: 43.8k]
  ------------------
 2663|  32.2k|    case kTypeSpecifier: {
  ------------------
  |  Branch (2663:5): [True: 32.2k, False: 11.6k]
  ------------------
 2664|  32.2k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (2664:11): [True: 32.2k, False: 0]
  ------------------
 2665|  32.2k|        delete _impl_.specifier_oneof_.type_specifier_;
 2666|  32.2k|      }
 2667|  32.2k|      break;
 2668|      0|    }
 2669|  3.60k|    case kStorageClassSpecifier: {
  ------------------
  |  Branch (2669:5): [True: 3.60k, False: 40.2k]
  ------------------
 2670|  3.60k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (2670:11): [True: 3.60k, False: 0]
  ------------------
 2671|  3.60k|        delete _impl_.specifier_oneof_.storage_class_specifier_;
 2672|  3.60k|      }
 2673|  3.60k|      break;
 2674|      0|    }
 2675|  3.37k|    case kFunctionSpecifier: {
  ------------------
  |  Branch (2675:5): [True: 3.37k, False: 40.4k]
  ------------------
 2676|  3.37k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (2676:11): [True: 3.37k, False: 0]
  ------------------
 2677|  3.37k|        delete _impl_.specifier_oneof_.function_specifier_;
 2678|  3.37k|      }
 2679|  3.37k|      break;
 2680|      0|    }
 2681|  4.68k|    case kAlignmentSpecifier: {
  ------------------
  |  Branch (2681:5): [True: 4.68k, False: 39.1k]
  ------------------
 2682|  4.68k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (2682:11): [True: 4.68k, False: 0]
  ------------------
 2683|  4.68k|        delete _impl_.specifier_oneof_.alignment_specifier_;
 2684|  4.68k|      }
 2685|  4.68k|      break;
 2686|      0|    }
 2687|      0|    case SPECIFIER_ONEOF_NOT_SET: {
  ------------------
  |  Branch (2687:5): [True: 0, False: 43.8k]
  ------------------
 2688|      0|      break;
 2689|      0|    }
 2690|  43.8k|  }
 2691|  43.8k|  _impl_._oneof_case_[0] = SPECIFIER_ONEOF_NOT_SET;
 2692|  43.8k|}
_ZNK4cdef9Specifier13IsInitializedEv:
 2901|  53.3k|bool Specifier::IsInitialized() const {
 2902|  53.3k|  switch (specifier_oneof_case()) {
  ------------------
  |  Branch (2902:11): [True: 0, False: 53.3k]
  ------------------
 2903|  32.2k|    case kTypeSpecifier: {
  ------------------
  |  Branch (2903:5): [True: 32.2k, False: 21.1k]
  ------------------
 2904|  32.2k|      if (_internal_has_type_specifier()) {
  ------------------
  |  Branch (2904:11): [True: 32.2k, False: 0]
  ------------------
 2905|  32.2k|        if (!_impl_.specifier_oneof_.type_specifier_->IsInitialized()) return false;
  ------------------
  |  Branch (2905:13): [True: 0, False: 32.2k]
  ------------------
 2906|  32.2k|      }
 2907|  32.2k|      break;
 2908|  32.2k|    }
 2909|  32.2k|    case kStorageClassSpecifier: {
  ------------------
  |  Branch (2909:5): [True: 3.60k, False: 49.7k]
  ------------------
 2910|  3.60k|      break;
 2911|  32.2k|    }
 2912|  3.37k|    case kFunctionSpecifier: {
  ------------------
  |  Branch (2912:5): [True: 3.37k, False: 50.0k]
  ------------------
 2913|  3.37k|      break;
 2914|  32.2k|    }
 2915|  4.68k|    case kAlignmentSpecifier: {
  ------------------
  |  Branch (2915:5): [True: 4.68k, False: 48.7k]
  ------------------
 2916|  4.68k|      break;
 2917|  32.2k|    }
 2918|  9.52k|    case SPECIFIER_ONEOF_NOT_SET: {
  ------------------
  |  Branch (2918:5): [True: 9.52k, False: 43.8k]
  ------------------
 2919|  9.52k|      break;
 2920|  32.2k|    }
 2921|  53.3k|  }
 2922|  53.3k|  return true;
 2923|  53.3k|}
_ZNK4cdef9Specifier11GetMetadataEv:
 2932|   451k|::PROTOBUF_NAMESPACE_ID::Metadata Specifier::GetMetadata() const {
 2933|   451k|  return ::_pbi::AssignDescriptors(
 2934|   451k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 2935|   451k|      file_level_metadata_cdef_2eproto[5]);
 2936|   451k|}
_ZN4cdef14SpecifiersListC2EPN6google8protobuf5ArenaEb:
 2946|  30.9k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 2947|  30.9k|  SharedCtor(arena, is_message_owned);
 2948|       |  // @@protoc_insertion_point(arena_constructor:cdef.SpecifiersList)
 2949|  30.9k|}
_ZN4cdef14SpecifiersListD2Ev:
 2971|  30.9k|SpecifiersList::~SpecifiersList() {
 2972|       |  // @@protoc_insertion_point(destructor:cdef.SpecifiersList)
 2973|  30.9k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (2973:13): [True: 0, False: 30.9k]
  ------------------
 2974|      0|  (void)arena;
 2975|      0|    return;
 2976|      0|  }
 2977|  30.9k|  SharedDtor();
 2978|  30.9k|}
_ZNK4cdef14SpecifiersList13IsInitializedEv:
 3107|  30.9k|bool SpecifiersList::IsInitialized() const {
 3108|  30.9k|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.specifiers_list_))
  ------------------
  |  Branch (3108:7): [True: 0, False: 30.9k]
  ------------------
 3109|      0|    return false;
 3110|  30.9k|  return true;
 3111|  30.9k|}
_ZNK4cdef14SpecifiersList11GetMetadataEv:
 3119|   346k|::PROTOBUF_NAMESPACE_ID::Metadata SpecifiersList::GetMetadata() const {
 3120|   346k|  return ::_pbi::AssignDescriptors(
 3121|   346k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 3122|   346k|      file_level_metadata_cdef_2eproto[6]);
 3123|   346k|}
_ZN4cdef9QualifierC2EPN6google8protobuf5ArenaEb:
 3153|  7.05k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 3154|  7.05k|  SharedCtor(arena, is_message_owned);
 3155|       |  // @@protoc_insertion_point(arena_constructor:cdef.Qualifier)
 3156|  7.05k|}
_ZN4cdef9QualifierD2Ev:
 3192|  7.05k|Qualifier::~Qualifier() {
 3193|       |  // @@protoc_insertion_point(destructor:cdef.Qualifier)
 3194|  7.05k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (3194:13): [True: 0, False: 7.05k]
  ------------------
 3195|      0|  (void)arena;
 3196|      0|    return;
 3197|      0|  }
 3198|  7.05k|  SharedDtor();
 3199|  7.05k|}
_ZN4cdef9Qualifier21clear_qualifier_oneofEv:
 3212|  4.31k|void Qualifier::clear_qualifier_oneof() {
 3213|       |// @@protoc_insertion_point(one_of_clear_start:cdef.Qualifier)
 3214|  4.31k|  switch (qualifier_oneof_case()) {
  ------------------
  |  Branch (3214:11): [True: 0, False: 4.31k]
  ------------------
 3215|  4.31k|    case kTypeQualifier: {
  ------------------
  |  Branch (3215:5): [True: 4.31k, False: 0]
  ------------------
 3216|  4.31k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (3216:11): [True: 4.31k, False: 0]
  ------------------
 3217|  4.31k|        delete _impl_.qualifier_oneof_.type_qualifier_;
 3218|  4.31k|      }
 3219|  4.31k|      break;
 3220|      0|    }
 3221|      0|    case QUALIFIER_ONEOF_NOT_SET: {
  ------------------
  |  Branch (3221:5): [True: 0, False: 4.31k]
  ------------------
 3222|      0|      break;
 3223|      0|    }
 3224|  4.31k|  }
 3225|  4.31k|  _impl_._oneof_case_[0] = QUALIFIER_ONEOF_NOT_SET;
 3226|  4.31k|}
_ZNK4cdef9Qualifier11GetMetadataEv:
 3366|  55.2k|::PROTOBUF_NAMESPACE_ID::Metadata Qualifier::GetMetadata() const {
 3367|  55.2k|  return ::_pbi::AssignDescriptors(
 3368|  55.2k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 3369|  55.2k|      file_level_metadata_cdef_2eproto[7]);
 3370|  55.2k|}
_ZN4cdef14QualifiersListC2EPN6google8protobuf5ArenaEb:
 3380|  10.8k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 3381|  10.8k|  SharedCtor(arena, is_message_owned);
 3382|       |  // @@protoc_insertion_point(arena_constructor:cdef.QualifiersList)
 3383|  10.8k|}
_ZN4cdef14QualifiersListD2Ev:
 3405|  10.8k|QualifiersList::~QualifiersList() {
 3406|       |  // @@protoc_insertion_point(destructor:cdef.QualifiersList)
 3407|  10.8k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (3407:13): [True: 0, False: 10.8k]
  ------------------
 3408|      0|  (void)arena;
 3409|      0|    return;
 3410|      0|  }
 3411|  10.8k|  SharedDtor();
 3412|  10.8k|}
_ZNK4cdef14QualifiersList11GetMetadataEv:
 3551|  86.2k|::PROTOBUF_NAMESPACE_ID::Metadata QualifiersList::GetMetadata() const {
 3552|  86.2k|  return ::_pbi::AssignDescriptors(
 3553|  86.2k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 3554|  86.2k|      file_level_metadata_cdef_2eproto[8]);
 3555|  86.2k|}
_ZN4cdef8BitfieldC2EPN6google8protobuf5ArenaEb:
 3580|  3.24k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 3581|  3.24k|  SharedCtor(arena, is_message_owned);
 3582|       |  // @@protoc_insertion_point(arena_constructor:cdef.Bitfield)
 3583|  3.24k|}
_ZN4cdef8BitfieldD2Ev:
 3613|  3.24k|Bitfield::~Bitfield() {
 3614|       |  // @@protoc_insertion_point(destructor:cdef.Bitfield)
 3615|  3.24k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (3615:13): [True: 0, False: 3.24k]
  ------------------
 3616|      0|  (void)arena;
 3617|      0|    return;
 3618|      0|  }
 3619|  3.24k|  SharedDtor();
 3620|  3.24k|}
_ZNK4cdef8Bitfield13IsInitializedEv:
 3782|  3.24k|bool Bitfield::IsInitialized() const {
 3783|  3.24k|  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  ------------------
  |  Branch (3783:7): [True: 0, False: 3.24k]
  ------------------
 3784|  3.24k|  if (_internal_has_name()) {
  ------------------
  |  Branch (3784:7): [True: 789, False: 2.45k]
  ------------------
 3785|    789|    if (!_impl_.name_->IsInitialized()) return false;
  ------------------
  |  Branch (3785:9): [True: 0, False: 789]
  ------------------
 3786|    789|  }
 3787|  3.24k|  return true;
 3788|  3.24k|}
_ZNK4cdef8Bitfield11GetMetadataEv:
 3802|  31.5k|::PROTOBUF_NAMESPACE_ID::Metadata Bitfield::GetMetadata() const {
 3803|  31.5k|  return ::_pbi::AssignDescriptors(
 3804|  31.5k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 3805|  31.5k|      file_level_metadata_cdef_2eproto[9]);
 3806|  31.5k|}
_ZN4cdef18FunctionDeclaratorC2EPN6google8protobuf5ArenaEb:
 3876|  9.79k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 3877|  9.79k|  SharedCtor(arena, is_message_owned);
 3878|       |  // @@protoc_insertion_point(arena_constructor:cdef.FunctionDeclarator)
 3879|  9.79k|}
_ZN4cdef18FunctionDeclaratorD2Ev:
 3932|  9.79k|FunctionDeclarator::~FunctionDeclarator() {
 3933|       |  // @@protoc_insertion_point(destructor:cdef.FunctionDeclarator)
 3934|  9.79k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (3934:13): [True: 0, False: 9.79k]
  ------------------
 3935|      0|  (void)arena;
 3936|      0|    return;
 3937|      0|  }
 3938|  9.79k|  SharedDtor();
 3939|  9.79k|}
_ZN4cdef18FunctionDeclarator31clear_parentheses_content_oneofEv:
 3954|  7.36k|void FunctionDeclarator::clear_parentheses_content_oneof() {
 3955|       |// @@protoc_insertion_point(one_of_clear_start:cdef.FunctionDeclarator)
 3956|  7.36k|  switch (parentheses_content_oneof_case()) {
  ------------------
  |  Branch (3956:11): [True: 0, False: 7.36k]
  ------------------
 3957|  5.18k|    case kParametersList: {
  ------------------
  |  Branch (3957:5): [True: 5.18k, False: 2.18k]
  ------------------
 3958|  5.18k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (3958:11): [True: 5.18k, False: 0]
  ------------------
 3959|  5.18k|        delete _impl_.parentheses_content_oneof_.parameters_list_;
 3960|  5.18k|      }
 3961|  5.18k|      break;
 3962|      0|    }
 3963|  2.18k|    case kIdentifiersList: {
  ------------------
  |  Branch (3963:5): [True: 2.18k, False: 5.18k]
  ------------------
 3964|  2.18k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (3964:11): [True: 2.18k, False: 0]
  ------------------
 3965|  2.18k|        delete _impl_.parentheses_content_oneof_.identifiers_list_;
 3966|  2.18k|      }
 3967|  2.18k|      break;
 3968|      0|    }
 3969|      0|    case PARENTHESES_CONTENT_ONEOF_NOT_SET: {
  ------------------
  |  Branch (3969:5): [True: 0, False: 7.36k]
  ------------------
 3970|      0|      break;
 3971|      0|    }
 3972|  7.36k|  }
 3973|  7.36k|  _impl_._oneof_case_[0] = PARENTHESES_CONTENT_ONEOF_NOT_SET;
 3974|  7.36k|}
_ZNK4cdef18FunctionDeclarator13IsInitializedEv:
 4201|  9.79k|bool FunctionDeclarator::IsInitialized() const {
 4202|  9.79k|  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  ------------------
  |  Branch (4202:7): [True: 0, False: 9.79k]
  ------------------
 4203|  9.79k|  if (_internal_has_noptr_declarator()) {
  ------------------
  |  Branch (4203:7): [True: 9.79k, False: 0]
  ------------------
 4204|  9.79k|    if (!_impl_.noptr_declarator_->IsInitialized()) return false;
  ------------------
  |  Branch (4204:9): [True: 0, False: 9.79k]
  ------------------
 4205|  9.79k|  }
 4206|  9.79k|  switch (parentheses_content_oneof_case()) {
  ------------------
  |  Branch (4206:11): [True: 0, False: 9.79k]
  ------------------
 4207|  5.18k|    case kParametersList: {
  ------------------
  |  Branch (4207:5): [True: 5.18k, False: 4.61k]
  ------------------
 4208|  5.18k|      if (_internal_has_parameters_list()) {
  ------------------
  |  Branch (4208:11): [True: 5.18k, False: 0]
  ------------------
 4209|  5.18k|        if (!_impl_.parentheses_content_oneof_.parameters_list_->IsInitialized()) return false;
  ------------------
  |  Branch (4209:13): [True: 0, False: 5.18k]
  ------------------
 4210|  5.18k|      }
 4211|  5.18k|      break;
 4212|  5.18k|    }
 4213|  5.18k|    case kIdentifiersList: {
  ------------------
  |  Branch (4213:5): [True: 2.18k, False: 7.61k]
  ------------------
 4214|  2.18k|      if (_internal_has_identifiers_list()) {
  ------------------
  |  Branch (4214:11): [True: 2.18k, False: 0]
  ------------------
 4215|  2.18k|        if (!_impl_.parentheses_content_oneof_.identifiers_list_->IsInitialized()) return false;
  ------------------
  |  Branch (4215:13): [True: 0, False: 2.18k]
  ------------------
 4216|  2.18k|      }
 4217|  2.18k|      break;
 4218|  2.18k|    }
 4219|  2.42k|    case PARENTHESES_CONTENT_ONEOF_NOT_SET: {
  ------------------
  |  Branch (4219:5): [True: 2.42k, False: 7.36k]
  ------------------
 4220|  2.42k|      break;
 4221|  2.18k|    }
 4222|  9.79k|  }
 4223|  9.79k|  return true;
 4224|  9.79k|}
_ZNK4cdef18FunctionDeclarator11GetMetadataEv:
 4240|   112k|::PROTOBUF_NAMESPACE_ID::Metadata FunctionDeclarator::GetMetadata() const {
 4241|   112k|  return ::_pbi::AssignDescriptors(
 4242|   112k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 4243|   112k|      file_level_metadata_cdef_2eproto[10]);
 4244|   112k|}
_ZN4cdef17PointerDeclaratorC2EPN6google8protobuf5ArenaEb:
 4282|  4.33k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 4283|  4.33k|  SharedCtor(arena, is_message_owned);
 4284|       |  // @@protoc_insertion_point(arena_constructor:cdef.PointerDeclarator)
 4285|  4.33k|}
_ZN4cdef17PointerDeclaratorD2Ev:
 4322|  4.33k|PointerDeclarator::~PointerDeclarator() {
 4323|       |  // @@protoc_insertion_point(destructor:cdef.PointerDeclarator)
 4324|  4.33k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 4.33k]
  ------------------
 4325|      0|  (void)arena;
 4326|      0|    return;
 4327|      0|  }
 4328|  4.33k|  SharedDtor();
 4329|  4.33k|}
_ZNK4cdef17PointerDeclarator13IsInitializedEv:
 4532|  4.33k|bool PointerDeclarator::IsInitialized() const {
 4533|  4.33k|  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  ------------------
  |  Branch (4533:7): [True: 0, False: 4.33k]
  ------------------
 4534|  4.33k|  if (_internal_has_declarator()) {
  ------------------
  |  Branch (4534:7): [True: 4.33k, False: 0]
  ------------------
 4535|  4.33k|    if (!_impl_.declarator_->IsInitialized()) return false;
  ------------------
  |  Branch (4535:9): [True: 0, False: 4.33k]
  ------------------
 4536|  4.33k|  }
 4537|  4.33k|  return true;
 4538|  4.33k|}
_ZNK4cdef17PointerDeclarator11GetMetadataEv:
 4552|  45.7k|::PROTOBUF_NAMESPACE_ID::Metadata PointerDeclarator::GetMetadata() const {
 4553|  45.7k|  return ::_pbi::AssignDescriptors(
 4554|  45.7k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 4555|  45.7k|      file_level_metadata_cdef_2eproto[11]);
 4556|  45.7k|}
_ZN4cdef15ArrayDeclaratorC2EPN6google8protobuf5ArenaEb:
 4589|  5.24k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 4590|  5.24k|  SharedCtor(arena, is_message_owned);
 4591|       |  // @@protoc_insertion_point(arena_constructor:cdef.ArrayDeclarator)
 4592|  5.24k|}
_ZN4cdef15ArrayDeclaratorD2Ev:
 4631|  5.24k|ArrayDeclarator::~ArrayDeclarator() {
 4632|       |  // @@protoc_insertion_point(destructor:cdef.ArrayDeclarator)
 4633|  5.24k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (4633:13): [True: 0, False: 5.24k]
  ------------------
 4634|      0|  (void)arena;
 4635|      0|    return;
 4636|      0|  }
 4637|  5.24k|  SharedDtor();
 4638|  5.24k|}
_ZNK4cdef15ArrayDeclarator11GetMetadataEv:
 4879|  48.9k|::PROTOBUF_NAMESPACE_ID::Metadata ArrayDeclarator::GetMetadata() const {
 4880|  48.9k|  return ::_pbi::AssignDescriptors(
 4881|  48.9k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 4882|  48.9k|      file_level_metadata_cdef_2eproto[12]);
 4883|  48.9k|}
_ZN4cdef17FunctionSpecifierC2EPN6google8protobuf5ArenaEb:
 4900|  3.37k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 4901|  3.37k|  SharedCtor(arena, is_message_owned);
 4902|       |  // @@protoc_insertion_point(arena_constructor:cdef.FunctionSpecifier)
 4903|  3.37k|}
_ZN4cdef17FunctionSpecifierD2Ev:
 4932|  3.37k|FunctionSpecifier::~FunctionSpecifier() {
 4933|       |  // @@protoc_insertion_point(destructor:cdef.FunctionSpecifier)
 4934|  3.37k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (4934:13): [True: 0, False: 3.37k]
  ------------------
 4935|      0|  (void)arena;
 4936|      0|    return;
 4937|      0|  }
 4938|  3.37k|  SharedDtor();
 4939|  3.37k|}
_ZNK4cdef17FunctionSpecifier11GetMetadataEv:
 5116|  25.0k|::PROTOBUF_NAMESPACE_ID::Metadata FunctionSpecifier::GetMetadata() const {
 5117|  25.0k|  return ::_pbi::AssignDescriptors(
 5118|  25.0k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 5119|  25.0k|      file_level_metadata_cdef_2eproto[13]);
 5120|  25.0k|}
_ZN4cdef21StorageClassSpecifierC2EPN6google8protobuf5ArenaEb:
 5130|  3.60k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 5131|  3.60k|  SharedCtor(arena, is_message_owned);
 5132|       |  // @@protoc_insertion_point(arena_constructor:cdef.StorageClassSpecifier)
 5133|  3.60k|}
_ZN4cdef21StorageClassSpecifierD2Ev:
 5196|  3.60k|StorageClassSpecifier::~StorageClassSpecifier() {
 5197|       |  // @@protoc_insertion_point(destructor:cdef.StorageClassSpecifier)
 5198|  3.60k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (5198:13): [True: 0, False: 3.60k]
  ------------------
 5199|      0|  (void)arena;
 5200|      0|    return;
 5201|      0|  }
 5202|  3.60k|  SharedDtor();
 5203|  3.60k|}
_ZN4cdef21StorageClassSpecifier35clear_storage_class_specifier_oneofEv:
 5216|  1.72k|void StorageClassSpecifier::clear_storage_class_specifier_oneof() {
 5217|       |// @@protoc_insertion_point(one_of_clear_start:cdef.StorageClassSpecifier)
 5218|  1.72k|  switch (storage_class_specifier_oneof_case()) {
  ------------------
  |  Branch (5218:11): [True: 0, False: 1.72k]
  ------------------
 5219|    682|    case kStorageClassTypedef: {
  ------------------
  |  Branch (5219:5): [True: 682, False: 1.04k]
  ------------------
 5220|       |      // No need to clear
 5221|    682|      break;
 5222|      0|    }
 5223|     66|    case kStorageClassConstexpr: {
  ------------------
  |  Branch (5223:5): [True: 66, False: 1.65k]
  ------------------
 5224|       |      // No need to clear
 5225|     66|      break;
 5226|      0|    }
 5227|    450|    case kStorageClassAuto: {
  ------------------
  |  Branch (5227:5): [True: 450, False: 1.27k]
  ------------------
 5228|       |      // No need to clear
 5229|    450|      break;
 5230|      0|    }
 5231|     52|    case kStorageClassRegister: {
  ------------------
  |  Branch (5231:5): [True: 52, False: 1.67k]
  ------------------
 5232|       |      // No need to clear
 5233|     52|      break;
 5234|      0|    }
 5235|    159|    case kStorageClassStatic: {
  ------------------
  |  Branch (5235:5): [True: 159, False: 1.56k]
  ------------------
 5236|       |      // No need to clear
 5237|    159|      break;
 5238|      0|    }
 5239|    239|    case kStorageClassExtern: {
  ------------------
  |  Branch (5239:5): [True: 239, False: 1.48k]
  ------------------
 5240|       |      // No need to clear
 5241|    239|      break;
 5242|      0|    }
 5243|     41|    case kStorageClassThreadLocal1: {
  ------------------
  |  Branch (5243:5): [True: 41, False: 1.68k]
  ------------------
 5244|       |      // No need to clear
 5245|     41|      break;
 5246|      0|    }
 5247|     36|    case kStorageClassThreadLocal2: {
  ------------------
  |  Branch (5247:5): [True: 36, False: 1.68k]
  ------------------
 5248|       |      // No need to clear
 5249|     36|      break;
 5250|      0|    }
 5251|      0|    case STORAGE_CLASS_SPECIFIER_ONEOF_NOT_SET: {
  ------------------
  |  Branch (5251:5): [True: 0, False: 1.72k]
  ------------------
 5252|      0|      break;
 5253|      0|    }
 5254|  1.72k|  }
 5255|  1.72k|  _impl_._oneof_case_[0] = STORAGE_CLASS_SPECIFIER_ONEOF_NOT_SET;
 5256|  1.72k|}
_ZNK4cdef21StorageClassSpecifier11GetMetadataEv:
 5548|  26.8k|::PROTOBUF_NAMESPACE_ID::Metadata StorageClassSpecifier::GetMetadata() const {
 5549|  26.8k|  return ::_pbi::AssignDescriptors(
 5550|  26.8k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 5551|  26.8k|      file_level_metadata_cdef_2eproto[14]);
 5552|  26.8k|}
_ZN4cdef14TypeOfOperatorC2EPN6google8protobuf5ArenaEb:
 5562|  2.45k|  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
 5563|       |  // @@protoc_insertion_point(arena_constructor:cdef.TypeOfOperator)
 5564|  2.45k|}
_ZNK4cdef14TypeOfOperator11GetMetadataEv:
 5588|  14.7k|::PROTOBUF_NAMESPACE_ID::Metadata TypeOfOperator::GetMetadata() const {
 5589|  14.7k|  return ::_pbi::AssignDescriptors(
 5590|  14.7k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 5591|  14.7k|      file_level_metadata_cdef_2eproto[15]);
 5592|  14.7k|}
_ZN4cdef8EnumTypeC2EPN6google8protobuf5ArenaEb:
 5614|  1.80k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 5615|  1.80k|  SharedCtor(arena, is_message_owned);
 5616|       |  // @@protoc_insertion_point(arena_constructor:cdef.EnumType)
 5617|  1.80k|}
_ZN4cdef8EnumTypeD2Ev:
 5646|  1.80k|EnumType::~EnumType() {
 5647|       |  // @@protoc_insertion_point(destructor:cdef.EnumType)
 5648|  1.80k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (5648:13): [True: 0, False: 1.80k]
  ------------------
 5649|      0|  (void)arena;
 5650|      0|    return;
 5651|      0|  }
 5652|  1.80k|  SharedDtor();
 5653|  1.80k|}
_ZNK4cdef8EnumType13IsInitializedEv:
 5817|  1.80k|bool EnumType::IsInitialized() const {
 5818|  1.80k|  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  ------------------
  |  Branch (5818:7): [True: 0, False: 1.80k]
  ------------------
 5819|  1.80k|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.constant_))
  ------------------
  |  Branch (5819:7): [True: 0, False: 1.80k]
  ------------------
 5820|      0|    return false;
 5821|  1.80k|  if (_internal_has_enum_name()) {
  ------------------
  |  Branch (5821:7): [True: 1.80k, False: 0]
  ------------------
 5822|  1.80k|    if (!_impl_.enum_name_->IsInitialized()) return false;
  ------------------
  |  Branch (5822:9): [True: 0, False: 1.80k]
  ------------------
 5823|  1.80k|  }
 5824|  1.80k|  return true;
 5825|  1.80k|}
_ZNK4cdef8EnumType11GetMetadataEv:
 5835|  23.3k|::PROTOBUF_NAMESPACE_ID::Metadata EnumType::GetMetadata() const {
 5836|  23.3k|  return ::_pbi::AssignDescriptors(
 5837|  23.3k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 5838|  23.3k|      file_level_metadata_cdef_2eproto[16]);
 5839|  23.3k|}
_ZN4cdef15StaticAssertionC2EPN6google8protobuf5ArenaEb:
 5859|  28.1k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 5860|  28.1k|  SharedCtor(arena, is_message_owned);
 5861|       |  // @@protoc_insertion_point(arena_constructor:cdef.StaticAssertion)
 5862|  28.1k|}
_ZN4cdef15StaticAssertionD2Ev:
 5920|  28.1k|StaticAssertion::~StaticAssertion() {
 5921|       |  // @@protoc_insertion_point(destructor:cdef.StaticAssertion)
 5922|  28.1k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (5922:13): [True: 0, False: 28.1k]
  ------------------
 5923|      0|  (void)arena;
 5924|      0|    return;
 5925|      0|  }
 5926|  28.1k|  SharedDtor();
 5927|  28.1k|}
_ZN4cdef15StaticAssertion25clear_static_assert_oneofEv:
 5941|  27.0k|void StaticAssertion::clear_static_assert_oneof() {
 5942|       |// @@protoc_insertion_point(one_of_clear_start:cdef.StaticAssertion)
 5943|  27.0k|  switch (static_assert_oneof_case()) {
  ------------------
  |  Branch (5943:11): [True: 0, False: 27.0k]
  ------------------
 5944|  13.1k|    case kStaticAssert1: {
  ------------------
  |  Branch (5944:5): [True: 13.1k, False: 13.8k]
  ------------------
 5945|       |      // No need to clear
 5946|  13.1k|      break;
 5947|      0|    }
 5948|  13.8k|    case kStaticAssert2: {
  ------------------
  |  Branch (5948:5): [True: 13.8k, False: 13.1k]
  ------------------
 5949|       |      // No need to clear
 5950|  13.8k|      break;
 5951|      0|    }
 5952|      0|    case STATIC_ASSERT_ONEOF_NOT_SET: {
  ------------------
  |  Branch (5952:5): [True: 0, False: 27.0k]
  ------------------
 5953|      0|      break;
 5954|      0|    }
 5955|  27.0k|  }
 5956|  27.0k|  _impl_._oneof_case_[0] = STATIC_ASSERT_ONEOF_NOT_SET;
 5957|  27.0k|}
_ZNK4cdef15StaticAssertion13IsInitializedEv:
 6174|  28.1k|bool StaticAssertion::IsInitialized() const {
 6175|  28.1k|  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  ------------------
  |  Branch (6175:7): [True: 0, False: 28.1k]
  ------------------
 6176|  28.1k|  return true;
 6177|  28.1k|}
_ZNK4cdef15StaticAssertion11GetMetadataEv:
 6194|   414k|::PROTOBUF_NAMESPACE_ID::Metadata StaticAssertion::GetMetadata() const {
 6195|   414k|  return ::_pbi::AssignDescriptors(
 6196|   414k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 6197|   414k|      file_level_metadata_cdef_2eproto[17]);
 6198|   414k|}
_ZN4cdef17StructDeclarationC2EPN6google8protobuf5ArenaEb:
 6248|  35.1k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 6249|  35.1k|  SharedCtor(arena, is_message_owned);
 6250|       |  // @@protoc_insertion_point(arena_constructor:cdef.StructDeclaration)
 6251|  35.1k|}
_ZN4cdef17StructDeclarationD2Ev:
 6292|  35.1k|StructDeclaration::~StructDeclaration() {
 6293|       |  // @@protoc_insertion_point(destructor:cdef.StructDeclaration)
 6294|  35.1k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (6294:13): [True: 0, False: 35.1k]
  ------------------
 6295|      0|  (void)arena;
 6296|      0|    return;
 6297|      0|  }
 6298|  35.1k|  SharedDtor();
 6299|  35.1k|}
_ZN4cdef17StructDeclaration23clear_struct_decl_oneofEv:
 6312|  31.4k|void StructDeclaration::clear_struct_decl_oneof() {
 6313|       |// @@protoc_insertion_point(one_of_clear_start:cdef.StructDeclaration)
 6314|  31.4k|  switch (struct_decl_oneof_case()) {
  ------------------
  |  Branch (6314:11): [True: 0, False: 31.4k]
  ------------------
 6315|  3.24k|    case kBitField: {
  ------------------
  |  Branch (6315:5): [True: 3.24k, False: 28.1k]
  ------------------
 6316|  3.24k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (6316:11): [True: 3.24k, False: 0]
  ------------------
 6317|  3.24k|        delete _impl_.struct_decl_oneof_.bit_field_;
 6318|  3.24k|      }
 6319|  3.24k|      break;
 6320|      0|    }
 6321|  28.1k|    case kStaticAssertion: {
  ------------------
  |  Branch (6321:5): [True: 28.1k, False: 3.24k]
  ------------------
 6322|  28.1k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (6322:11): [True: 28.1k, False: 0]
  ------------------
 6323|  28.1k|        delete _impl_.struct_decl_oneof_.static_assertion_;
 6324|  28.1k|      }
 6325|  28.1k|      break;
 6326|      0|    }
 6327|      0|    case STRUCT_DECL_ONEOF_NOT_SET: {
  ------------------
  |  Branch (6327:5): [True: 0, False: 31.4k]
  ------------------
 6328|      0|      break;
 6329|      0|    }
 6330|  31.4k|  }
 6331|  31.4k|  _impl_._oneof_case_[0] = STRUCT_DECL_ONEOF_NOT_SET;
 6332|  31.4k|}
_ZNK4cdef17StructDeclaration13IsInitializedEv:
 6489|  35.1k|bool StructDeclaration::IsInitialized() const {
 6490|  35.1k|  switch (struct_decl_oneof_case()) {
  ------------------
  |  Branch (6490:11): [True: 0, False: 35.1k]
  ------------------
 6491|  3.24k|    case kBitField: {
  ------------------
  |  Branch (6491:5): [True: 3.24k, False: 31.9k]
  ------------------
 6492|  3.24k|      if (_internal_has_bit_field()) {
  ------------------
  |  Branch (6492:11): [True: 3.24k, False: 0]
  ------------------
 6493|  3.24k|        if (!_impl_.struct_decl_oneof_.bit_field_->IsInitialized()) return false;
  ------------------
  |  Branch (6493:13): [True: 0, False: 3.24k]
  ------------------
 6494|  3.24k|      }
 6495|  3.24k|      break;
 6496|  3.24k|    }
 6497|  28.1k|    case kStaticAssertion: {
  ------------------
  |  Branch (6497:5): [True: 28.1k, False: 7.02k]
  ------------------
 6498|  28.1k|      if (_internal_has_static_assertion()) {
  ------------------
  |  Branch (6498:11): [True: 28.1k, False: 0]
  ------------------
 6499|  28.1k|        if (!_impl_.struct_decl_oneof_.static_assertion_->IsInitialized()) return false;
  ------------------
  |  Branch (6499:13): [True: 0, False: 28.1k]
  ------------------
 6500|  28.1k|      }
 6501|  28.1k|      break;
 6502|  28.1k|    }
 6503|  28.1k|    case STRUCT_DECL_ONEOF_NOT_SET: {
  ------------------
  |  Branch (6503:5): [True: 3.77k, False: 31.4k]
  ------------------
 6504|  3.77k|      break;
 6505|  28.1k|    }
 6506|  35.1k|  }
 6507|  35.1k|  return true;
 6508|  35.1k|}
_ZNK4cdef17StructDeclaration11GetMetadataEv:
 6517|   305k|::PROTOBUF_NAMESPACE_ID::Metadata StructDeclaration::GetMetadata() const {
 6518|   305k|  return ::_pbi::AssignDescriptors(
 6519|   305k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 6520|   305k|      file_level_metadata_cdef_2eproto[18]);
 6521|   305k|}
_ZN4cdef21StructDeclarationListC2EPN6google8protobuf5ArenaEb:
 6531|  18.2k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 6532|  18.2k|  SharedCtor(arena, is_message_owned);
 6533|       |  // @@protoc_insertion_point(arena_constructor:cdef.StructDeclarationList)
 6534|  18.2k|}
_ZN4cdef21StructDeclarationListD2Ev:
 6556|  18.2k|StructDeclarationList::~StructDeclarationList() {
 6557|       |  // @@protoc_insertion_point(destructor:cdef.StructDeclarationList)
 6558|  18.2k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (6558:13): [True: 0, False: 18.2k]
  ------------------
 6559|      0|  (void)arena;
 6560|      0|    return;
 6561|      0|  }
 6562|  18.2k|  SharedDtor();
 6563|  18.2k|}
_ZNK4cdef21StructDeclarationList13IsInitializedEv:
 6692|  18.2k|bool StructDeclarationList::IsInitialized() const {
 6693|  18.2k|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.struct_declaration_list_))
  ------------------
  |  Branch (6693:7): [True: 0, False: 18.2k]
  ------------------
 6694|      0|    return false;
 6695|  18.2k|  return true;
 6696|  18.2k|}
_ZNK4cdef21StructDeclarationList11GetMetadataEv:
 6704|   215k|::PROTOBUF_NAMESPACE_ID::Metadata StructDeclarationList::GetMetadata() const {
 6705|   215k|  return ::_pbi::AssignDescriptors(
 6706|   215k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 6707|   215k|      file_level_metadata_cdef_2eproto[19]);
 6708|   215k|}
_ZN4cdef9UnionTypeC2EPN6google8protobuf5ArenaEb:
 6746|  15.6k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 6747|  15.6k|  SharedCtor(arena, is_message_owned);
 6748|       |  // @@protoc_insertion_point(arena_constructor:cdef.UnionType)
 6749|  15.6k|}
_ZN4cdef9UnionTypeD2Ev:
 6786|  15.6k|UnionType::~UnionType() {
 6787|       |  // @@protoc_insertion_point(destructor:cdef.UnionType)
 6788|  15.6k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (6788:13): [True: 0, False: 15.6k]
  ------------------
 6789|      0|  (void)arena;
 6790|      0|    return;
 6791|      0|  }
 6792|  15.6k|  SharedDtor();
 6793|  15.6k|}
_ZNK4cdef9UnionType13IsInitializedEv:
 6996|  15.6k|bool UnionType::IsInitialized() const {
 6997|  15.6k|  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  ------------------
  |  Branch (6997:7): [True: 0, False: 15.6k]
  ------------------
 6998|  15.6k|  if (_internal_has_name()) {
  ------------------
  |  Branch (6998:7): [True: 852, False: 14.8k]
  ------------------
 6999|    852|    if (!_impl_.name_->IsInitialized()) return false;
  ------------------
  |  Branch (6999:9): [True: 0, False: 852]
  ------------------
 7000|    852|  }
 7001|  15.6k|  if (_internal_has_struct_declaration_list()) {
  ------------------
  |  Branch (7001:7): [True: 15.6k, False: 0]
  ------------------
 7002|  15.6k|    if (!_impl_.struct_declaration_list_->IsInitialized()) return false;
  ------------------
  |  Branch (7002:9): [True: 0, False: 15.6k]
  ------------------
 7003|  15.6k|  }
 7004|  15.6k|  return true;
 7005|  15.6k|}
_ZNK4cdef9UnionType11GetMetadataEv:
 7019|   146k|::PROTOBUF_NAMESPACE_ID::Metadata UnionType::GetMetadata() const {
 7020|   146k|  return ::_pbi::AssignDescriptors(
 7021|   146k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 7022|   146k|      file_level_metadata_cdef_2eproto[20]);
 7023|   146k|}
_ZN4cdef10StructTypeC2EPN6google8protobuf5ArenaEb:
 7061|  2.58k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 7062|  2.58k|  SharedCtor(arena, is_message_owned);
 7063|       |  // @@protoc_insertion_point(arena_constructor:cdef.StructType)
 7064|  2.58k|}
_ZN4cdef10StructTypeD2Ev:
 7101|  2.58k|StructType::~StructType() {
 7102|       |  // @@protoc_insertion_point(destructor:cdef.StructType)
 7103|  2.58k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (7103:13): [True: 0, False: 2.58k]
  ------------------
 7104|      0|  (void)arena;
 7105|      0|    return;
 7106|      0|  }
 7107|  2.58k|  SharedDtor();
 7108|  2.58k|}
_ZNK4cdef10StructType13IsInitializedEv:
 7311|  2.58k|bool StructType::IsInitialized() const {
 7312|  2.58k|  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  ------------------
  |  Branch (7312:7): [True: 0, False: 2.58k]
  ------------------
 7313|  2.58k|  if (_internal_has_name()) {
  ------------------
  |  Branch (7313:7): [True: 364, False: 2.22k]
  ------------------
 7314|    364|    if (!_impl_.name_->IsInitialized()) return false;
  ------------------
  |  Branch (7314:9): [True: 0, False: 364]
  ------------------
 7315|    364|  }
 7316|  2.58k|  if (_internal_has_struct_declaration_list()) {
  ------------------
  |  Branch (7316:7): [True: 2.58k, False: 0]
  ------------------
 7317|  2.58k|    if (!_impl_.struct_declaration_list_->IsInitialized()) return false;
  ------------------
  |  Branch (7317:9): [True: 0, False: 2.58k]
  ------------------
 7318|  2.58k|  }
 7319|  2.58k|  return true;
 7320|  2.58k|}
_ZNK4cdef10StructType11GetMetadataEv:
 7334|  26.0k|::PROTOBUF_NAMESPACE_ID::Metadata StructType::GetMetadata() const {
 7335|  26.0k|  return ::_pbi::AssignDescriptors(
 7336|  26.0k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 7337|  26.0k|      file_level_metadata_cdef_2eproto[21]);
 7338|  26.0k|}
_ZN4cdef11TypedefTypeC2EPN6google8protobuf5ArenaEb:
 7348|  1.58k|  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
 7349|       |  // @@protoc_insertion_point(arena_constructor:cdef.TypedefType)
 7350|  1.58k|}
_ZNK4cdef11TypedefType11GetMetadataEv:
 7374|  9.53k|::PROTOBUF_NAMESPACE_ID::Metadata TypedefType::GetMetadata() const {
 7375|  9.53k|  return ::_pbi::AssignDescriptors(
 7376|  9.53k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 7377|  9.53k|      file_level_metadata_cdef_2eproto[22]);
 7378|  9.53k|}
_ZN4cdef14ArithmeticTypeC2EPN6google8protobuf5ArenaEb:
 8094|  3.47k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 8095|  3.47k|  SharedCtor(arena, is_message_owned);
 8096|       |  // @@protoc_insertion_point(arena_constructor:cdef.ArithmeticType)
 8097|  3.47k|}
_ZN4cdef14ArithmeticTypeD2Ev:
 8272|  3.47k|ArithmeticType::~ArithmeticType() {
 8273|       |  // @@protoc_insertion_point(destructor:cdef.ArithmeticType)
 8274|  3.47k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (8274:13): [True: 0, False: 3.47k]
  ------------------
 8275|      0|  (void)arena;
 8276|      0|    return;
 8277|      0|  }
 8278|  3.47k|  SharedDtor();
 8279|  3.47k|}
_ZN4cdef14ArithmeticType22clear_arithmetic_oneofEv:
 8292|  2.31k|void ArithmeticType::clear_arithmetic_oneof() {
 8293|       |// @@protoc_insertion_point(one_of_clear_start:cdef.ArithmeticType)
 8294|  2.31k|  switch (arithmetic_oneof_case()) {
  ------------------
  |  Branch (8294:11): [True: 0, False: 2.31k]
  ------------------
 8295|    154|    case kTypeBool1: {
  ------------------
  |  Branch (8295:5): [True: 154, False: 2.16k]
  ------------------
 8296|       |      // No need to clear
 8297|    154|      break;
 8298|      0|    }
 8299|     97|    case kTypeBool2: {
  ------------------
  |  Branch (8299:5): [True: 97, False: 2.21k]
  ------------------
 8300|       |      // No need to clear
 8301|     97|      break;
 8302|      0|    }
 8303|      2|    case kTypeSignedChar: {
  ------------------
  |  Branch (8303:5): [True: 2, False: 2.31k]
  ------------------
 8304|       |      // No need to clear
 8305|      2|      break;
 8306|      0|    }
 8307|      0|    case kTypeUnsignedChar: {
  ------------------
  |  Branch (8307:5): [True: 0, False: 2.31k]
  ------------------
 8308|       |      // No need to clear
 8309|      0|      break;
 8310|      0|    }
 8311|    252|    case kTypeChar: {
  ------------------
  |  Branch (8311:5): [True: 252, False: 2.06k]
  ------------------
 8312|       |      // No need to clear
 8313|    252|      break;
 8314|      0|    }
 8315|      7|    case kTypeShortInt1: {
  ------------------
  |  Branch (8315:5): [True: 7, False: 2.30k]
  ------------------
 8316|       |      // No need to clear
 8317|      7|      break;
 8318|      0|    }
 8319|     23|    case kTypeShortInt2: {
  ------------------
  |  Branch (8319:5): [True: 23, False: 2.29k]
  ------------------
 8320|       |      // No need to clear
 8321|     23|      break;
 8322|      0|    }
 8323|     78|    case kTypeShortInt3: {
  ------------------
  |  Branch (8323:5): [True: 78, False: 2.23k]
  ------------------
 8324|       |      // No need to clear
 8325|     78|      break;
 8326|      0|    }
 8327|      0|    case kTypeUnsignedShortInt1: {
  ------------------
  |  Branch (8327:5): [True: 0, False: 2.31k]
  ------------------
 8328|       |      // No need to clear
 8329|      0|      break;
 8330|      0|    }
 8331|      6|    case kTypeUnsignedShortInt2: {
  ------------------
  |  Branch (8331:5): [True: 6, False: 2.30k]
  ------------------
 8332|       |      // No need to clear
 8333|      6|      break;
 8334|      0|    }
 8335|     66|    case kTypeInt1: {
  ------------------
  |  Branch (8335:5): [True: 66, False: 2.24k]
  ------------------
 8336|       |      // No need to clear
 8337|     66|      break;
 8338|      0|    }
 8339|    207|    case kTypeInt2: {
  ------------------
  |  Branch (8339:5): [True: 207, False: 2.10k]
  ------------------
 8340|       |      // No need to clear
 8341|    207|      break;
 8342|      0|    }
 8343|      6|    case kTypeUnsignedInt1: {
  ------------------
  |  Branch (8343:5): [True: 6, False: 2.30k]
  ------------------
 8344|       |      // No need to clear
 8345|      6|      break;
 8346|      0|    }
 8347|      1|    case kTypeUnsignedInt2: {
  ------------------
  |  Branch (8347:5): [True: 1, False: 2.31k]
  ------------------
 8348|       |      // No need to clear
 8349|      1|      break;
 8350|      0|    }
 8351|     13|    case kTypeLongInt1: {
  ------------------
  |  Branch (8351:5): [True: 13, False: 2.30k]
  ------------------
 8352|       |      // No need to clear
 8353|     13|      break;
 8354|      0|    }
 8355|     21|    case kTypeLongInt2: {
  ------------------
  |  Branch (8355:5): [True: 21, False: 2.29k]
  ------------------
 8356|       |      // No need to clear
 8357|     21|      break;
 8358|      0|    }
 8359|     12|    case kTypeUnsignedLongInt1: {
  ------------------
  |  Branch (8359:5): [True: 12, False: 2.30k]
  ------------------
 8360|       |      // No need to clear
 8361|     12|      break;
 8362|      0|    }
 8363|      7|    case kTypeUnsignedLongInt2: {
  ------------------
  |  Branch (8363:5): [True: 7, False: 2.30k]
  ------------------
 8364|       |      // No need to clear
 8365|      7|      break;
 8366|      0|    }
 8367|     40|    case kTypeLongLongInt1: {
  ------------------
  |  Branch (8367:5): [True: 40, False: 2.27k]
  ------------------
 8368|       |      // No need to clear
 8369|     40|      break;
 8370|      0|    }
 8371|     45|    case kTypeLongLongInt2: {
  ------------------
  |  Branch (8371:5): [True: 45, False: 2.26k]
  ------------------
 8372|       |      // No need to clear
 8373|     45|      break;
 8374|      0|    }
 8375|    154|    case kTypeUnsignedLongLongInt1: {
  ------------------
  |  Branch (8375:5): [True: 154, False: 2.16k]
  ------------------
 8376|       |      // No need to clear
 8377|    154|      break;
 8378|      0|    }
 8379|    657|    case kTypeUnsignedLongLongInt2: {
  ------------------
  |  Branch (8379:5): [True: 657, False: 1.65k]
  ------------------
 8380|       |      // No need to clear
 8381|    657|      break;
 8382|      0|    }
 8383|     12|    case kTypeBitInt: {
  ------------------
  |  Branch (8383:5): [True: 12, False: 2.30k]
  ------------------
 8384|       |      // No need to clear
 8385|     12|      break;
 8386|      0|    }
 8387|      5|    case kTypeUnsignedBitInt: {
  ------------------
  |  Branch (8387:5): [True: 5, False: 2.30k]
  ------------------
 8388|       |      // No need to clear
 8389|      5|      break;
 8390|      0|    }
 8391|     33|    case kTypeFloat: {
  ------------------
  |  Branch (8391:5): [True: 33, False: 2.28k]
  ------------------
 8392|       |      // No need to clear
 8393|     33|      break;
 8394|      0|    }
 8395|     11|    case kTypeDouble: {
  ------------------
  |  Branch (8395:5): [True: 11, False: 2.30k]
  ------------------
 8396|       |      // No need to clear
 8397|     11|      break;
 8398|      0|    }
 8399|     14|    case kTypeLongDouble: {
  ------------------
  |  Branch (8399:5): [True: 14, False: 2.30k]
  ------------------
 8400|       |      // No need to clear
 8401|     14|      break;
 8402|      0|    }
 8403|      4|    case kTypeDecimal32: {
  ------------------
  |  Branch (8403:5): [True: 4, False: 2.31k]
  ------------------
 8404|       |      // No need to clear
 8405|      4|      break;
 8406|      0|    }
 8407|     26|    case kTypeDecimal64: {
  ------------------
  |  Branch (8407:5): [True: 26, False: 2.28k]
  ------------------
 8408|       |      // No need to clear
 8409|     26|      break;
 8410|      0|    }
 8411|      0|    case kTypeDecimal128: {
  ------------------
  |  Branch (8411:5): [True: 0, False: 2.31k]
  ------------------
 8412|       |      // No need to clear
 8413|      0|      break;
 8414|      0|    }
 8415|     88|    case kTypeFloatComplex: {
  ------------------
  |  Branch (8415:5): [True: 88, False: 2.22k]
  ------------------
 8416|       |      // No need to clear
 8417|     88|      break;
 8418|      0|    }
 8419|     24|    case kTypeDoubleComplex: {
  ------------------
  |  Branch (8419:5): [True: 24, False: 2.29k]
  ------------------
 8420|       |      // No need to clear
 8421|     24|      break;
 8422|      0|    }
 8423|     20|    case kTypeLongDoubleComplex: {
  ------------------
  |  Branch (8423:5): [True: 20, False: 2.29k]
  ------------------
 8424|       |      // No need to clear
 8425|     20|      break;
 8426|      0|    }
 8427|    212|    case kTypeFloatImaginary: {
  ------------------
  |  Branch (8427:5): [True: 212, False: 2.10k]
  ------------------
 8428|       |      // No need to clear
 8429|    212|      break;
 8430|      0|    }
 8431|      0|    case kTypeDoubleImaginary: {
  ------------------
  |  Branch (8431:5): [True: 0, False: 2.31k]
  ------------------
 8432|       |      // No need to clear
 8433|      0|      break;
 8434|      0|    }
 8435|     17|    case kTypeLongDoubleImaginary: {
  ------------------
  |  Branch (8435:5): [True: 17, False: 2.29k]
  ------------------
 8436|       |      // No need to clear
 8437|     17|      break;
 8438|      0|    }
 8439|      0|    case ARITHMETIC_ONEOF_NOT_SET: {
  ------------------
  |  Branch (8439:5): [True: 0, False: 2.31k]
  ------------------
 8440|      0|      break;
 8441|      0|    }
 8442|  2.31k|  }
 8443|  2.31k|  _impl_._oneof_case_[0] = ARITHMETIC_ONEOF_NOT_SET;
 8444|  2.31k|}
_ZNK4cdef14ArithmeticType11GetMetadataEv:
 9394|  27.7k|::PROTOBUF_NAMESPACE_ID::Metadata ArithmeticType::GetMetadata() const {
 9395|  27.7k|  return ::_pbi::AssignDescriptors(
 9396|  27.7k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 9397|  27.7k|      file_level_metadata_cdef_2eproto[24]);
 9398|  27.7k|}
_ZN4cdef10AtomicTypeC2EPN6google8protobuf5ArenaEb:
 9415|  1.16k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 9416|  1.16k|  SharedCtor(arena, is_message_owned);
 9417|       |  // @@protoc_insertion_point(arena_constructor:cdef.AtomicType)
 9418|  1.16k|}
_ZN4cdef10AtomicTypeD2Ev:
 9443|  1.16k|AtomicType::~AtomicType() {
 9444|       |  // @@protoc_insertion_point(destructor:cdef.AtomicType)
 9445|  1.16k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (9445:13): [True: 0, False: 1.16k]
  ------------------
 9446|      0|  (void)arena;
 9447|      0|    return;
 9448|      0|  }
 9449|  1.16k|  SharedDtor();
 9450|  1.16k|}
_ZNK4cdef10AtomicType13IsInitializedEv:
 9575|  1.16k|bool AtomicType::IsInitialized() const {
 9576|  1.16k|  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  ------------------
  |  Branch (9576:7): [True: 0, False: 1.16k]
  ------------------
 9577|  1.16k|  return true;
 9578|  1.16k|}
_ZNK4cdef10AtomicType11GetMetadataEv:
 9587|  10.4k|::PROTOBUF_NAMESPACE_ID::Metadata AtomicType::GetMetadata() const {
 9588|  10.4k|  return ::_pbi::AssignDescriptors(
 9589|  10.4k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
 9590|  10.4k|      file_level_metadata_cdef_2eproto[25]);
 9591|  10.4k|}
_ZN4cdef13TypeSpecifierC2EPN6google8protobuf5ArenaEb:
 9741|  32.2k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
 9742|  32.2k|  SharedCtor(arena, is_message_owned);
 9743|       |  // @@protoc_insertion_point(arena_constructor:cdef.TypeSpecifier)
 9744|  32.2k|}
_ZN4cdef13TypeSpecifierD2Ev:
 9814|  32.2k|TypeSpecifier::~TypeSpecifier() {
 9815|       |  // @@protoc_insertion_point(destructor:cdef.TypeSpecifier)
 9816|  32.2k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (9816:13): [True: 0, False: 32.2k]
  ------------------
 9817|      0|  (void)arena;
 9818|      0|    return;
 9819|      0|  }
 9820|  32.2k|  SharedDtor();
 9821|  32.2k|}
_ZN4cdef13TypeSpecifier26clear_type_specifier_oneofEv:
 9834|  30.0k|void TypeSpecifier::clear_type_specifier_oneof() {
 9835|       |// @@protoc_insertion_point(one_of_clear_start:cdef.TypeSpecifier)
 9836|  30.0k|  switch (type_specifier_oneof_case()) {
  ------------------
  |  Branch (9836:11): [True: 0, False: 30.0k]
  ------------------
 9837|  1.35k|    case kVoidType: {
  ------------------
  |  Branch (9837:5): [True: 1.35k, False: 28.7k]
  ------------------
 9838|       |      // No need to clear
 9839|  1.35k|      break;
 9840|      0|    }
 9841|  3.47k|    case kArithmeticType: {
  ------------------
  |  Branch (9841:5): [True: 3.47k, False: 26.6k]
  ------------------
 9842|  3.47k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (9842:11): [True: 3.47k, False: 0]
  ------------------
 9843|  3.47k|        delete _impl_.type_specifier_oneof_.arithmetic_type_;
 9844|  3.47k|      }
 9845|  3.47k|      break;
 9846|      0|    }
 9847|  1.16k|    case kAtomicType: {
  ------------------
  |  Branch (9847:5): [True: 1.16k, False: 28.9k]
  ------------------
 9848|  1.16k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (9848:11): [True: 1.16k, False: 0]
  ------------------
 9849|  1.16k|        delete _impl_.type_specifier_oneof_.atomic_type_;
 9850|  1.16k|      }
 9851|  1.16k|      break;
 9852|      0|    }
 9853|  1.58k|    case kTypedefType: {
  ------------------
  |  Branch (9853:5): [True: 1.58k, False: 28.4k]
  ------------------
 9854|  1.58k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (9854:11): [True: 1.58k, False: 0]
  ------------------
 9855|  1.58k|        delete _impl_.type_specifier_oneof_.typedef_type_;
 9856|  1.58k|      }
 9857|  1.58k|      break;
 9858|      0|    }
 9859|  2.58k|    case kStructType: {
  ------------------
  |  Branch (9859:5): [True: 2.58k, False: 27.4k]
  ------------------
 9860|  2.58k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (9860:11): [True: 2.58k, False: 0]
  ------------------
 9861|  2.58k|        delete _impl_.type_specifier_oneof_.struct_type_;
 9862|  2.58k|      }
 9863|  2.58k|      break;
 9864|      0|    }
 9865|  15.6k|    case kUnionType: {
  ------------------
  |  Branch (9865:5): [True: 15.6k, False: 14.4k]
  ------------------
 9866|  15.6k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (9866:11): [True: 15.6k, False: 0]
  ------------------
 9867|  15.6k|        delete _impl_.type_specifier_oneof_.union_type_;
 9868|  15.6k|      }
 9869|  15.6k|      break;
 9870|      0|    }
 9871|  1.80k|    case kEnumType: {
  ------------------
  |  Branch (9871:5): [True: 1.80k, False: 28.2k]
  ------------------
 9872|  1.80k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (9872:11): [True: 1.80k, False: 0]
  ------------------
 9873|  1.80k|        delete _impl_.type_specifier_oneof_.enum_type_;
 9874|  1.80k|      }
 9875|  1.80k|      break;
 9876|      0|    }
 9877|  2.45k|    case kTypeofOperator: {
  ------------------
  |  Branch (9877:5): [True: 2.45k, False: 27.6k]
  ------------------
 9878|  2.45k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (9878:11): [True: 2.45k, False: 0]
  ------------------
 9879|  2.45k|        delete _impl_.type_specifier_oneof_.typeof_operator_;
 9880|  2.45k|      }
 9881|  2.45k|      break;
 9882|      0|    }
 9883|      0|    case TYPE_SPECIFIER_ONEOF_NOT_SET: {
  ------------------
  |  Branch (9883:5): [True: 0, False: 30.0k]
  ------------------
 9884|      0|      break;
 9885|      0|    }
 9886|  30.0k|  }
 9887|  30.0k|  _impl_._oneof_case_[0] = TYPE_SPECIFIER_ONEOF_NOT_SET;
 9888|  30.0k|}
_ZNK4cdef13TypeSpecifier13IsInitializedEv:
10197|  32.2k|bool TypeSpecifier::IsInitialized() const {
10198|  32.2k|  switch (type_specifier_oneof_case()) {
  ------------------
  |  Branch (10198:11): [True: 0, False: 32.2k]
  ------------------
10199|  1.35k|    case kVoidType: {
  ------------------
  |  Branch (10199:5): [True: 1.35k, False: 30.8k]
  ------------------
10200|  1.35k|      break;
10201|      0|    }
10202|  3.47k|    case kArithmeticType: {
  ------------------
  |  Branch (10202:5): [True: 3.47k, False: 28.7k]
  ------------------
10203|  3.47k|      break;
10204|      0|    }
10205|  1.16k|    case kAtomicType: {
  ------------------
  |  Branch (10205:5): [True: 1.16k, False: 31.0k]
  ------------------
10206|  1.16k|      if (_internal_has_atomic_type()) {
  ------------------
  |  Branch (10206:11): [True: 1.16k, False: 0]
  ------------------
10207|  1.16k|        if (!_impl_.type_specifier_oneof_.atomic_type_->IsInitialized()) return false;
  ------------------
  |  Branch (10207:13): [True: 0, False: 1.16k]
  ------------------
10208|  1.16k|      }
10209|  1.16k|      break;
10210|  1.16k|    }
10211|  1.58k|    case kTypedefType: {
  ------------------
  |  Branch (10211:5): [True: 1.58k, False: 30.6k]
  ------------------
10212|  1.58k|      break;
10213|  1.16k|    }
10214|  2.58k|    case kStructType: {
  ------------------
  |  Branch (10214:5): [True: 2.58k, False: 29.6k]
  ------------------
10215|  2.58k|      if (_internal_has_struct_type()) {
  ------------------
  |  Branch (10215:11): [True: 2.58k, False: 0]
  ------------------
10216|  2.58k|        if (!_impl_.type_specifier_oneof_.struct_type_->IsInitialized()) return false;
  ------------------
  |  Branch (10216:13): [True: 0, False: 2.58k]
  ------------------
10217|  2.58k|      }
10218|  2.58k|      break;
10219|  2.58k|    }
10220|  15.6k|    case kUnionType: {
  ------------------
  |  Branch (10220:5): [True: 15.6k, False: 16.5k]
  ------------------
10221|  15.6k|      if (_internal_has_union_type()) {
  ------------------
  |  Branch (10221:11): [True: 15.6k, False: 0]
  ------------------
10222|  15.6k|        if (!_impl_.type_specifier_oneof_.union_type_->IsInitialized()) return false;
  ------------------
  |  Branch (10222:13): [True: 0, False: 15.6k]
  ------------------
10223|  15.6k|      }
10224|  15.6k|      break;
10225|  15.6k|    }
10226|  15.6k|    case kEnumType: {
  ------------------
  |  Branch (10226:5): [True: 1.80k, False: 30.4k]
  ------------------
10227|  1.80k|      if (_internal_has_enum_type()) {
  ------------------
  |  Branch (10227:11): [True: 1.80k, False: 0]
  ------------------
10228|  1.80k|        if (!_impl_.type_specifier_oneof_.enum_type_->IsInitialized()) return false;
  ------------------
  |  Branch (10228:13): [True: 0, False: 1.80k]
  ------------------
10229|  1.80k|      }
10230|  1.80k|      break;
10231|  1.80k|    }
10232|  2.45k|    case kTypeofOperator: {
  ------------------
  |  Branch (10232:5): [True: 2.45k, False: 29.7k]
  ------------------
10233|  2.45k|      break;
10234|  1.80k|    }
10235|  2.12k|    case TYPE_SPECIFIER_ONEOF_NOT_SET: {
  ------------------
  |  Branch (10235:5): [True: 2.12k, False: 30.0k]
  ------------------
10236|  2.12k|      break;
10237|  1.80k|    }
10238|  32.2k|  }
10239|  32.2k|  return true;
10240|  32.2k|}
_ZNK4cdef13TypeSpecifier11GetMetadataEv:
10249|   283k|::PROTOBUF_NAMESPACE_ID::Metadata TypeSpecifier::GetMetadata() const {
10250|   283k|  return ::_pbi::AssignDescriptors(
10251|   283k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
10252|   283k|      file_level_metadata_cdef_2eproto[26]);
10253|   283k|}
_ZN4cdef13TypeQualifierC2EPN6google8protobuf5ArenaEb:
10276|  4.31k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
10277|  4.31k|  SharedCtor(arena, is_message_owned);
10278|       |  // @@protoc_insertion_point(arena_constructor:cdef.TypeQualifier)
10279|  4.31k|}
_ZN4cdef13TypeQualifierD2Ev:
10312|  4.31k|TypeQualifier::~TypeQualifier() {
10313|       |  // @@protoc_insertion_point(destructor:cdef.TypeQualifier)
10314|  4.31k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (10314:13): [True: 0, False: 4.31k]
  ------------------
10315|      0|  (void)arena;
10316|      0|    return;
10317|      0|  }
10318|  4.31k|  SharedDtor();
10319|  4.31k|}
_ZNK4cdef13TypeQualifier11GetMetadataEv:
10542|  42.4k|::PROTOBUF_NAMESPACE_ID::Metadata TypeQualifier::GetMetadata() const {
10543|  42.4k|  return ::_pbi::AssignDescriptors(
10544|  42.4k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
10545|  42.4k|      file_level_metadata_cdef_2eproto[27]);
10546|  42.4k|}
_ZN4cdef18AlignmentSpecifierC2EPN6google8protobuf5ArenaEb:
10560|  4.68k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
10561|  4.68k|  SharedCtor(arena, is_message_owned);
10562|       |  // @@protoc_insertion_point(arena_constructor:cdef.AlignmentSpecifier)
10563|  4.68k|}
_ZN4cdef18AlignmentSpecifierD2Ev:
10588|  4.68k|AlignmentSpecifier::~AlignmentSpecifier() {
10589|       |  // @@protoc_insertion_point(destructor:cdef.AlignmentSpecifier)
10590|  4.68k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (10590:13): [True: 0, False: 4.68k]
  ------------------
10591|      0|  (void)arena;
10592|      0|    return;
10593|      0|  }
10594|  4.68k|  SharedDtor();
10595|  4.68k|}
_ZNK4cdef18AlignmentSpecifier11GetMetadataEv:
10733|  31.7k|::PROTOBUF_NAMESPACE_ID::Metadata AlignmentSpecifier::GetMetadata() const {
10734|  31.7k|  return ::_pbi::AssignDescriptors(
10735|  31.7k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
10736|  31.7k|      file_level_metadata_cdef_2eproto[28]);
10737|  31.7k|}
_ZN4cdef14DeclaratorAttrC2EPN6google8protobuf5ArenaEb:
10767|  4.43k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
10768|  4.43k|  SharedCtor(arena, is_message_owned);
10769|       |  // @@protoc_insertion_point(arena_constructor:cdef.DeclaratorAttr)
10770|  4.43k|}
_ZN4cdef14DeclaratorAttrD2Ev:
10802|  4.43k|DeclaratorAttr::~DeclaratorAttr() {
10803|       |  // @@protoc_insertion_point(destructor:cdef.DeclaratorAttr)
10804|  4.43k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (10804:13): [True: 0, False: 4.43k]
  ------------------
10805|      0|  (void)arena;
10806|      0|    return;
10807|      0|  }
10808|  4.43k|  SharedDtor();
10809|  4.43k|}
_ZNK4cdef14DeclaratorAttr13IsInitializedEv:
10979|  4.43k|bool DeclaratorAttr::IsInitialized() const {
10980|  4.43k|  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  ------------------
  |  Branch (10980:7): [True: 0, False: 4.43k]
  ------------------
10981|  4.43k|  if (_internal_has_name()) {
  ------------------
  |  Branch (10981:7): [True: 4.43k, False: 0]
  ------------------
10982|  4.43k|    if (!_impl_.name_->IsInitialized()) return false;
  ------------------
  |  Branch (10982:9): [True: 0, False: 4.43k]
  ------------------
10983|  4.43k|  }
10984|  4.43k|  return true;
10985|  4.43k|}
_ZNK4cdef14DeclaratorAttr11GetMetadataEv:
10999|  42.2k|::PROTOBUF_NAMESPACE_ID::Metadata DeclaratorAttr::GetMetadata() const {
11000|  42.2k|  return ::_pbi::AssignDescriptors(
11001|  42.2k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
11002|  42.2k|      file_level_metadata_cdef_2eproto[29]);
11003|  42.2k|}
_ZN4cdef21DeclaratorParenthesesC2EPN6google8protobuf5ArenaEb:
11025|  3.07k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
11026|  3.07k|  SharedCtor(arena, is_message_owned);
11027|       |  // @@protoc_insertion_point(arena_constructor:cdef.DeclaratorParentheses)
11028|  3.07k|}
_ZN4cdef21DeclaratorParenthesesD2Ev:
11055|  3.07k|DeclaratorParentheses::~DeclaratorParentheses() {
11056|       |  // @@protoc_insertion_point(destructor:cdef.DeclaratorParentheses)
11057|  3.07k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (11057:13): [True: 0, False: 3.07k]
  ------------------
11058|      0|  (void)arena;
11059|      0|    return;
11060|      0|  }
11061|  3.07k|  SharedDtor();
11062|  3.07k|}
_ZNK4cdef21DeclaratorParentheses13IsInitializedEv:
11195|  3.07k|bool DeclaratorParentheses::IsInitialized() const {
11196|  3.07k|  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  ------------------
  |  Branch (11196:7): [True: 0, False: 3.07k]
  ------------------
11197|  3.07k|  if (_internal_has_declarator()) {
  ------------------
  |  Branch (11197:7): [True: 3.07k, False: 0]
  ------------------
11198|  3.07k|    if (!_impl_.declarator_->IsInitialized()) return false;
  ------------------
  |  Branch (11198:9): [True: 0, False: 3.07k]
  ------------------
11199|  3.07k|  }
11200|  3.07k|  return true;
11201|  3.07k|}
_ZNK4cdef21DeclaratorParentheses11GetMetadataEv:
11210|  27.7k|::PROTOBUF_NAMESPACE_ID::Metadata DeclaratorParentheses::GetMetadata() const {
11211|  27.7k|  return ::_pbi::AssignDescriptors(
11212|  27.7k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
11213|  27.7k|      file_level_metadata_cdef_2eproto[30]);
11214|  27.7k|}
_ZN4cdef10DeclaratorC2EPN6google8protobuf5ArenaEb:
11324|  40.4k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
11325|  40.4k|  SharedCtor(arena, is_message_owned);
11326|       |  // @@protoc_insertion_point(arena_constructor:cdef.Declarator)
11327|  40.4k|}
_ZN4cdef10DeclaratorD2Ev:
11383|  40.4k|Declarator::~Declarator() {
11384|       |  // @@protoc_insertion_point(destructor:cdef.Declarator)
11385|  40.4k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (11385:13): [True: 0, False: 40.4k]
  ------------------
11386|      0|  (void)arena;
11387|      0|    return;
11388|      0|  }
11389|  40.4k|  SharedDtor();
11390|  40.4k|}
_ZN4cdef10Declarator22clear_declarator_oneofEv:
11403|  26.8k|void Declarator::clear_declarator_oneof() {
11404|       |// @@protoc_insertion_point(one_of_clear_start:cdef.Declarator)
11405|  26.8k|  switch (declarator_oneof_case()) {
  ------------------
  |  Branch (11405:11): [True: 0, False: 26.8k]
  ------------------
11406|  4.43k|    case kDeclaratorAttr: {
  ------------------
  |  Branch (11406:5): [True: 4.43k, False: 22.4k]
  ------------------
11407|  4.43k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (11407:11): [True: 4.43k, False: 0]
  ------------------
11408|  4.43k|        delete _impl_.declarator_oneof_.declarator_attr_;
11409|  4.43k|      }
11410|  4.43k|      break;
11411|      0|    }
11412|  3.07k|    case kDeclaratorParentheses: {
  ------------------
  |  Branch (11412:5): [True: 3.07k, False: 23.8k]
  ------------------
11413|  3.07k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (11413:11): [True: 3.07k, False: 0]
  ------------------
11414|  3.07k|        delete _impl_.declarator_oneof_.declarator_parentheses_;
11415|  3.07k|      }
11416|  3.07k|      break;
11417|      0|    }
11418|  4.33k|    case kPointerDeclarator: {
  ------------------
  |  Branch (11418:5): [True: 4.33k, False: 22.5k]
  ------------------
11419|  4.33k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (11419:11): [True: 4.33k, False: 0]
  ------------------
11420|  4.33k|        delete _impl_.declarator_oneof_.pointer_declarator_;
11421|  4.33k|      }
11422|  4.33k|      break;
11423|      0|    }
11424|  5.24k|    case kArrayDeclarator: {
  ------------------
  |  Branch (11424:5): [True: 5.24k, False: 21.6k]
  ------------------
11425|  5.24k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (11425:11): [True: 5.24k, False: 0]
  ------------------
11426|  5.24k|        delete _impl_.declarator_oneof_.array_declarator_;
11427|  5.24k|      }
11428|  5.24k|      break;
11429|      0|    }
11430|  9.79k|    case kFunctionDeclarator: {
  ------------------
  |  Branch (11430:5): [True: 9.79k, False: 17.1k]
  ------------------
11431|  9.79k|      if (GetArenaForAllocation() == nullptr) {
  ------------------
  |  Branch (11431:11): [True: 9.79k, False: 0]
  ------------------
11432|  9.79k|        delete _impl_.declarator_oneof_.function_declarator_;
11433|  9.79k|      }
11434|  9.79k|      break;
11435|      0|    }
11436|      0|    case DECLARATOR_ONEOF_NOT_SET: {
  ------------------
  |  Branch (11436:5): [True: 0, False: 26.8k]
  ------------------
11437|      0|      break;
11438|      0|    }
11439|  26.8k|  }
11440|  26.8k|  _impl_._oneof_case_[0] = DECLARATOR_ONEOF_NOT_SET;
11441|  26.8k|}
_ZNK4cdef10Declarator13IsInitializedEv:
11676|  40.4k|bool Declarator::IsInitialized() const {
11677|  40.4k|  switch (declarator_oneof_case()) {
  ------------------
  |  Branch (11677:11): [True: 0, False: 40.4k]
  ------------------
11678|  4.43k|    case kDeclaratorAttr: {
  ------------------
  |  Branch (11678:5): [True: 4.43k, False: 36.0k]
  ------------------
11679|  4.43k|      if (_internal_has_declarator_attr()) {
  ------------------
  |  Branch (11679:11): [True: 4.43k, False: 0]
  ------------------
11680|  4.43k|        if (!_impl_.declarator_oneof_.declarator_attr_->IsInitialized()) return false;
  ------------------
  |  Branch (11680:13): [True: 0, False: 4.43k]
  ------------------
11681|  4.43k|      }
11682|  4.43k|      break;
11683|  4.43k|    }
11684|  4.43k|    case kDeclaratorParentheses: {
  ------------------
  |  Branch (11684:5): [True: 3.07k, False: 37.3k]
  ------------------
11685|  3.07k|      if (_internal_has_declarator_parentheses()) {
  ------------------
  |  Branch (11685:11): [True: 3.07k, False: 0]
  ------------------
11686|  3.07k|        if (!_impl_.declarator_oneof_.declarator_parentheses_->IsInitialized()) return false;
  ------------------
  |  Branch (11686:13): [True: 0, False: 3.07k]
  ------------------
11687|  3.07k|      }
11688|  3.07k|      break;
11689|  3.07k|    }
11690|  4.33k|    case kPointerDeclarator: {
  ------------------
  |  Branch (11690:5): [True: 4.33k, False: 36.1k]
  ------------------
11691|  4.33k|      if (_internal_has_pointer_declarator()) {
  ------------------
  |  Branch (11691:11): [True: 4.33k, False: 0]
  ------------------
11692|  4.33k|        if (!_impl_.declarator_oneof_.pointer_declarator_->IsInitialized()) return false;
  ------------------
  |  Branch (11692:13): [True: 0, False: 4.33k]
  ------------------
11693|  4.33k|      }
11694|  4.33k|      break;
11695|  4.33k|    }
11696|  5.24k|    case kArrayDeclarator: {
  ------------------
  |  Branch (11696:5): [True: 5.24k, False: 35.1k]
  ------------------
11697|  5.24k|      break;
11698|  4.33k|    }
11699|  9.79k|    case kFunctionDeclarator: {
  ------------------
  |  Branch (11699:5): [True: 9.79k, False: 30.6k]
  ------------------
11700|  9.79k|      if (_internal_has_function_declarator()) {
  ------------------
  |  Branch (11700:11): [True: 9.79k, False: 0]
  ------------------
11701|  9.79k|        if (!_impl_.declarator_oneof_.function_declarator_->IsInitialized()) return false;
  ------------------
  |  Branch (11701:13): [True: 0, False: 9.79k]
  ------------------
11702|  9.79k|      }
11703|  9.79k|      break;
11704|  9.79k|    }
11705|  13.5k|    case DECLARATOR_ONEOF_NOT_SET: {
  ------------------
  |  Branch (11705:5): [True: 13.5k, False: 26.8k]
  ------------------
11706|  13.5k|      break;
11707|  9.79k|    }
11708|  40.4k|  }
11709|  40.4k|  return true;
11710|  40.4k|}
_ZNK4cdef10Declarator11GetMetadataEv:
11719|   323k|::PROTOBUF_NAMESPACE_ID::Metadata Declarator::GetMetadata() const {
11720|   323k|  return ::_pbi::AssignDescriptors(
11721|   323k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
11722|   323k|      file_level_metadata_cdef_2eproto[31]);
11723|   323k|}
_ZN4cdef11InitializerC2EPN6google8protobuf5ArenaEb:
11733|  2.93k|  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
11734|       |  // @@protoc_insertion_point(arena_constructor:cdef.Initializer)
11735|  2.93k|}
_ZNK4cdef11Initializer11GetMetadataEv:
11759|  17.6k|::PROTOBUF_NAMESPACE_ID::Metadata Initializer::GetMetadata() const {
11760|  17.6k|  return ::_pbi::AssignDescriptors(
11761|  17.6k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
11762|  17.6k|      file_level_metadata_cdef_2eproto[32]);
11763|  17.6k|}
_ZN4cdef26DeclaratorsAndInitializersC2EPN6google8protobuf5ArenaEb:
11773|  12.6k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
11774|  12.6k|  SharedCtor(arena, is_message_owned);
11775|       |  // @@protoc_insertion_point(arena_constructor:cdef.DeclaratorsAndInitializers)
11776|  12.6k|}
_ZN4cdef26DeclaratorsAndInitializersD2Ev:
11800|  12.6k|DeclaratorsAndInitializers::~DeclaratorsAndInitializers() {
11801|       |  // @@protoc_insertion_point(destructor:cdef.DeclaratorsAndInitializers)
11802|  12.6k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (11802:13): [True: 0, False: 12.6k]
  ------------------
11803|      0|  (void)arena;
11804|      0|    return;
11805|      0|  }
11806|  12.6k|  SharedDtor();
11807|  12.6k|}
_ZNK4cdef26DeclaratorsAndInitializers13IsInitializedEv:
11967|  12.6k|bool DeclaratorsAndInitializers::IsInitialized() const {
11968|  12.6k|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.declarators_))
  ------------------
  |  Branch (11968:7): [True: 0, False: 12.6k]
  ------------------
11969|      0|    return false;
11970|  12.6k|  return true;
11971|  12.6k|}
_ZNK4cdef26DeclaratorsAndInitializers11GetMetadataEv:
11980|   154k|::PROTOBUF_NAMESPACE_ID::Metadata DeclaratorsAndInitializers::GetMetadata() const {
11981|   154k|  return ::_pbi::AssignDescriptors(
11982|   154k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
11983|   154k|      file_level_metadata_cdef_2eproto[33]);
11984|   154k|}
_ZN4cdef21SpecifierAndQualifierC2EPN6google8protobuf5ArenaEb:
12011|  37.2k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
12012|  37.2k|  SharedCtor(arena, is_message_owned);
12013|       |  // @@protoc_insertion_point(arena_constructor:cdef.SpecifierAndQualifier)
12014|  37.2k|}
_ZN4cdef21SpecifierAndQualifierD2Ev:
12046|  37.2k|SpecifierAndQualifier::~SpecifierAndQualifier() {
12047|       |  // @@protoc_insertion_point(destructor:cdef.SpecifierAndQualifier)
12048|  37.2k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (12048:13): [True: 0, False: 37.2k]
  ------------------
12049|      0|  (void)arena;
12050|      0|    return;
12051|      0|  }
12052|  37.2k|  SharedDtor();
12053|  37.2k|}
_ZNK4cdef21SpecifierAndQualifier13IsInitializedEv:
12226|  37.2k|bool SpecifierAndQualifier::IsInitialized() const {
12227|  37.2k|  if (_internal_has_specifiers_list()) {
  ------------------
  |  Branch (12227:7): [True: 30.9k, False: 6.29k]
  ------------------
12228|  30.9k|    if (!_impl_.specifiers_list_->IsInitialized()) return false;
  ------------------
  |  Branch (12228:9): [True: 0, False: 30.9k]
  ------------------
12229|  30.9k|  }
12230|  37.2k|  return true;
12231|  37.2k|}
_ZNK4cdef21SpecifierAndQualifier11GetMetadataEv:
12245|   337k|::PROTOBUF_NAMESPACE_ID::Metadata SpecifierAndQualifier::GetMetadata() const {
12246|   337k|  return ::_pbi::AssignDescriptors(
12247|   337k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
12248|   337k|      file_level_metadata_cdef_2eproto[34]);
12249|   337k|}
_ZN4cdef27SpecifiersAndQualifiersListC2EPN6google8protobuf5ArenaEb:
12259|  25.1k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
12260|  25.1k|  SharedCtor(arena, is_message_owned);
12261|       |  // @@protoc_insertion_point(arena_constructor:cdef.SpecifiersAndQualifiersList)
12262|  25.1k|}
_ZN4cdef27SpecifiersAndQualifiersListD2Ev:
12284|  25.1k|SpecifiersAndQualifiersList::~SpecifiersAndQualifiersList() {
12285|       |  // @@protoc_insertion_point(destructor:cdef.SpecifiersAndQualifiersList)
12286|  25.1k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (12286:13): [True: 0, False: 25.1k]
  ------------------
12287|      0|  (void)arena;
12288|      0|    return;
12289|      0|  }
12290|  25.1k|  SharedDtor();
12291|  25.1k|}
_ZNK4cdef27SpecifiersAndQualifiersList13IsInitializedEv:
12420|  25.1k|bool SpecifiersAndQualifiersList::IsInitialized() const {
12421|  25.1k|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.specifiers_and_qualifiers_list_))
  ------------------
  |  Branch (12421:7): [True: 0, False: 25.1k]
  ------------------
12422|      0|    return false;
12423|  25.1k|  return true;
12424|  25.1k|}
_ZNK4cdef27SpecifiersAndQualifiersList11GetMetadataEv:
12432|   262k|::PROTOBUF_NAMESPACE_ID::Metadata SpecifiersAndQualifiersList::GetMetadata() const {
12433|   262k|  return ::_pbi::AssignDescriptors(
12434|   262k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
12435|   262k|      file_level_metadata_cdef_2eproto[35]);
12436|   262k|}
_ZN4cdef11AttrSpecSeqC2EPN6google8protobuf5ArenaEb:
12477|  6.60k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
12478|  6.60k|  SharedCtor(arena, is_message_owned);
12479|       |  // @@protoc_insertion_point(arena_constructor:cdef.AttrSpecSeq)
12480|  6.60k|}
_ZN4cdef11AttrSpecSeqD2Ev:
12525|  6.60k|AttrSpecSeq::~AttrSpecSeq() {
12526|       |  // @@protoc_insertion_point(destructor:cdef.AttrSpecSeq)
12527|  6.60k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (12527:13): [True: 0, False: 6.60k]
  ------------------
12528|      0|  (void)arena;
12529|      0|    return;
12530|      0|  }
12531|  6.60k|  SharedDtor();
12532|  6.60k|}
_ZNK4cdef11AttrSpecSeq11GetMetadataEv:
12903|  53.7k|::PROTOBUF_NAMESPACE_ID::Metadata AttrSpecSeq::GetMetadata() const {
12904|  53.7k|  return ::_pbi::AssignDescriptors(
12905|  53.7k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
12906|  53.7k|      file_level_metadata_cdef_2eproto[36]);
12907|  53.7k|}
_ZN4cdef11DeclarationC2EPN6google8protobuf5ArenaEb:
12942|  32.2k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
12943|  32.2k|  SharedCtor(arena, is_message_owned);
12944|       |  // @@protoc_insertion_point(arena_constructor:cdef.Declaration)
12945|  32.2k|}
_ZN4cdef11DeclarationD2Ev:
12982|  32.2k|Declaration::~Declaration() {
12983|       |  // @@protoc_insertion_point(destructor:cdef.Declaration)
12984|  32.2k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (12984:13): [True: 0, False: 32.2k]
  ------------------
12985|      0|  (void)arena;
12986|      0|    return;
12987|      0|  }
12988|  32.2k|  SharedDtor();
12989|  32.2k|}
_ZNK4cdef11Declaration13IsInitializedEv:
13193|  32.2k|bool Declaration::IsInitialized() const {
13194|  32.2k|  if (_internal_has_specifiers_and_qualifiers_list()) {
  ------------------
  |  Branch (13194:7): [True: 25.1k, False: 7.03k]
  ------------------
13195|  25.1k|    if (!_impl_.specifiers_and_qualifiers_list_->IsInitialized()) return false;
  ------------------
  |  Branch (13195:9): [True: 0, False: 25.1k]
  ------------------
13196|  25.1k|  }
13197|  32.2k|  if (_internal_has_declarators_and_initializers()) {
  ------------------
  |  Branch (13197:7): [True: 12.6k, False: 19.5k]
  ------------------
13198|  12.6k|    if (!_impl_.declarators_and_initializers_->IsInitialized()) return false;
  ------------------
  |  Branch (13198:9): [True: 0, False: 12.6k]
  ------------------
13199|  12.6k|  }
13200|  32.2k|  return true;
13201|  32.2k|}
_ZNK4cdef11Declaration11GetMetadataEv:
13215|   313k|::PROTOBUF_NAMESPACE_ID::Metadata Declaration::GetMetadata() const {
13216|   313k|  return ::_pbi::AssignDescriptors(
13217|   313k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
13218|   313k|      file_level_metadata_cdef_2eproto[37]);
13219|   313k|}
_ZN4cdef12DeclarationsC2EPN6google8protobuf5ArenaEb:
13229|  17.8k|  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
13230|  17.8k|  SharedCtor(arena, is_message_owned);
13231|       |  // @@protoc_insertion_point(arena_constructor:cdef.Declarations)
13232|  17.8k|}
_ZN4cdef12DeclarationsD2Ev:
13254|  17.8k|Declarations::~Declarations() {
13255|       |  // @@protoc_insertion_point(destructor:cdef.Declarations)
13256|  17.8k|  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  ------------------
  |  Branch (13256:13): [True: 0, False: 17.8k]
  ------------------
13257|      0|  (void)arena;
13258|      0|    return;
13259|      0|  }
13260|  17.8k|  SharedDtor();
13261|  17.8k|}
_ZN4cdef12Declarations5ClearEv:
13272|  35.6k|void Declarations::Clear() {
13273|       |// @@protoc_insertion_point(message_clear_start:cdef.Declarations)
13274|  35.6k|  uint32_t cached_has_bits = 0;
13275|       |  // Prevent compiler warnings about cached_has_bits being unused
13276|  35.6k|  (void) cached_has_bits;
13277|       |
13278|  35.6k|  _impl_.declarations_.Clear();
13279|  35.6k|  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
13280|  35.6k|}
_ZNK4cdef12Declarations13IsInitializedEv:
13390|  17.8k|bool Declarations::IsInitialized() const {
13391|  17.8k|  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.declarations_))
  ------------------
  |  Branch (13391:7): [True: 0, False: 17.8k]
  ------------------
13392|      0|    return false;
13393|  17.8k|  return true;
13394|  17.8k|}
_ZNK4cdef12Declarations11GetMetadataEv:
13402|   221k|::PROTOBUF_NAMESPACE_ID::Metadata Declarations::GetMetadata() const {
13403|   221k|  return ::_pbi::AssignDescriptors(
13404|   221k|      &descriptor_table_cdef_2eproto_getter, &descriptor_table_cdef_2eproto_once,
13405|   221k|      file_level_metadata_cdef_2eproto[38]);
13406|   221k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef10IdentifierEJEEEPT_PS1_DpOT0_:
13412|  15.4k|Arena::CreateMaybeMessage< ::cdef::Identifier >(Arena* arena) {
13413|  15.4k|  return Arena::CreateMessageInternal< ::cdef::Identifier >(arena);
13414|  15.4k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef15IdentifiersListEJEEEPT_PS1_DpOT0_:
13416|  2.18k|Arena::CreateMaybeMessage< ::cdef::IdentifiersList >(Arena* arena) {
13417|  2.18k|  return Arena::CreateMessageInternal< ::cdef::IdentifiersList >(arena);
13418|  2.18k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef9ParameterEJEEEPT_PS1_DpOT0_:
13420|  1.28k|Arena::CreateMaybeMessage< ::cdef::Parameter >(Arena* arena) {
13421|  1.28k|  return Arena::CreateMessageInternal< ::cdef::Parameter >(arena);
13422|  1.28k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef10ParametersEJEEEPT_PS1_DpOT0_:
13424|  3.04k|Arena::CreateMaybeMessage< ::cdef::Parameters >(Arena* arena) {
13425|  3.04k|  return Arena::CreateMessageInternal< ::cdef::Parameters >(arena);
13426|  3.04k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef14ParametersListEJEEEPT_PS1_DpOT0_:
13428|  5.18k|Arena::CreateMaybeMessage< ::cdef::ParametersList >(Arena* arena) {
13429|  5.18k|  return Arena::CreateMessageInternal< ::cdef::ParametersList >(arena);
13430|  5.18k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef9SpecifierEJEEEPT_PS1_DpOT0_:
13432|  53.3k|Arena::CreateMaybeMessage< ::cdef::Specifier >(Arena* arena) {
13433|  53.3k|  return Arena::CreateMessageInternal< ::cdef::Specifier >(arena);
13434|  53.3k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef14SpecifiersListEJEEEPT_PS1_DpOT0_:
13436|  30.9k|Arena::CreateMaybeMessage< ::cdef::SpecifiersList >(Arena* arena) {
13437|  30.9k|  return Arena::CreateMessageInternal< ::cdef::SpecifiersList >(arena);
13438|  30.9k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef9QualifierEJEEEPT_PS1_DpOT0_:
13440|  7.05k|Arena::CreateMaybeMessage< ::cdef::Qualifier >(Arena* arena) {
13441|  7.05k|  return Arena::CreateMessageInternal< ::cdef::Qualifier >(arena);
13442|  7.05k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef14QualifiersListEJEEEPT_PS1_DpOT0_:
13444|  10.8k|Arena::CreateMaybeMessage< ::cdef::QualifiersList >(Arena* arena) {
13445|  10.8k|  return Arena::CreateMessageInternal< ::cdef::QualifiersList >(arena);
13446|  10.8k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef8BitfieldEJEEEPT_PS1_DpOT0_:
13448|  3.24k|Arena::CreateMaybeMessage< ::cdef::Bitfield >(Arena* arena) {
13449|  3.24k|  return Arena::CreateMessageInternal< ::cdef::Bitfield >(arena);
13450|  3.24k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef18FunctionDeclaratorEJEEEPT_PS1_DpOT0_:
13452|  9.79k|Arena::CreateMaybeMessage< ::cdef::FunctionDeclarator >(Arena* arena) {
13453|  9.79k|  return Arena::CreateMessageInternal< ::cdef::FunctionDeclarator >(arena);
13454|  9.79k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef17PointerDeclaratorEJEEEPT_PS1_DpOT0_:
13456|  4.33k|Arena::CreateMaybeMessage< ::cdef::PointerDeclarator >(Arena* arena) {
13457|  4.33k|  return Arena::CreateMessageInternal< ::cdef::PointerDeclarator >(arena);
13458|  4.33k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef15ArrayDeclaratorEJEEEPT_PS1_DpOT0_:
13460|  5.24k|Arena::CreateMaybeMessage< ::cdef::ArrayDeclarator >(Arena* arena) {
13461|  5.24k|  return Arena::CreateMessageInternal< ::cdef::ArrayDeclarator >(arena);
13462|  5.24k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef17FunctionSpecifierEJEEEPT_PS1_DpOT0_:
13464|  3.37k|Arena::CreateMaybeMessage< ::cdef::FunctionSpecifier >(Arena* arena) {
13465|  3.37k|  return Arena::CreateMessageInternal< ::cdef::FunctionSpecifier >(arena);
13466|  3.37k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef21StorageClassSpecifierEJEEEPT_PS1_DpOT0_:
13468|  3.60k|Arena::CreateMaybeMessage< ::cdef::StorageClassSpecifier >(Arena* arena) {
13469|  3.60k|  return Arena::CreateMessageInternal< ::cdef::StorageClassSpecifier >(arena);
13470|  3.60k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef14TypeOfOperatorEJEEEPT_PS1_DpOT0_:
13472|  2.45k|Arena::CreateMaybeMessage< ::cdef::TypeOfOperator >(Arena* arena) {
13473|  2.45k|  return Arena::CreateMessageInternal< ::cdef::TypeOfOperator >(arena);
13474|  2.45k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef8EnumTypeEJEEEPT_PS1_DpOT0_:
13476|  1.80k|Arena::CreateMaybeMessage< ::cdef::EnumType >(Arena* arena) {
13477|  1.80k|  return Arena::CreateMessageInternal< ::cdef::EnumType >(arena);
13478|  1.80k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef15StaticAssertionEJEEEPT_PS1_DpOT0_:
13480|  28.1k|Arena::CreateMaybeMessage< ::cdef::StaticAssertion >(Arena* arena) {
13481|  28.1k|  return Arena::CreateMessageInternal< ::cdef::StaticAssertion >(arena);
13482|  28.1k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef17StructDeclarationEJEEEPT_PS1_DpOT0_:
13484|  35.1k|Arena::CreateMaybeMessage< ::cdef::StructDeclaration >(Arena* arena) {
13485|  35.1k|  return Arena::CreateMessageInternal< ::cdef::StructDeclaration >(arena);
13486|  35.1k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef21StructDeclarationListEJEEEPT_PS1_DpOT0_:
13488|  18.2k|Arena::CreateMaybeMessage< ::cdef::StructDeclarationList >(Arena* arena) {
13489|  18.2k|  return Arena::CreateMessageInternal< ::cdef::StructDeclarationList >(arena);
13490|  18.2k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef9UnionTypeEJEEEPT_PS1_DpOT0_:
13492|  15.6k|Arena::CreateMaybeMessage< ::cdef::UnionType >(Arena* arena) {
13493|  15.6k|  return Arena::CreateMessageInternal< ::cdef::UnionType >(arena);
13494|  15.6k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef10StructTypeEJEEEPT_PS1_DpOT0_:
13496|  2.58k|Arena::CreateMaybeMessage< ::cdef::StructType >(Arena* arena) {
13497|  2.58k|  return Arena::CreateMessageInternal< ::cdef::StructType >(arena);
13498|  2.58k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef11TypedefTypeEJEEEPT_PS1_DpOT0_:
13500|  1.58k|Arena::CreateMaybeMessage< ::cdef::TypedefType >(Arena* arena) {
13501|  1.58k|  return Arena::CreateMessageInternal< ::cdef::TypedefType >(arena);
13502|  1.58k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef14ArithmeticTypeEJEEEPT_PS1_DpOT0_:
13508|  3.47k|Arena::CreateMaybeMessage< ::cdef::ArithmeticType >(Arena* arena) {
13509|  3.47k|  return Arena::CreateMessageInternal< ::cdef::ArithmeticType >(arena);
13510|  3.47k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef10AtomicTypeEJEEEPT_PS1_DpOT0_:
13512|  1.16k|Arena::CreateMaybeMessage< ::cdef::AtomicType >(Arena* arena) {
13513|  1.16k|  return Arena::CreateMessageInternal< ::cdef::AtomicType >(arena);
13514|  1.16k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef13TypeSpecifierEJEEEPT_PS1_DpOT0_:
13516|  32.2k|Arena::CreateMaybeMessage< ::cdef::TypeSpecifier >(Arena* arena) {
13517|  32.2k|  return Arena::CreateMessageInternal< ::cdef::TypeSpecifier >(arena);
13518|  32.2k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef13TypeQualifierEJEEEPT_PS1_DpOT0_:
13520|  4.31k|Arena::CreateMaybeMessage< ::cdef::TypeQualifier >(Arena* arena) {
13521|  4.31k|  return Arena::CreateMessageInternal< ::cdef::TypeQualifier >(arena);
13522|  4.31k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef18AlignmentSpecifierEJEEEPT_PS1_DpOT0_:
13524|  4.68k|Arena::CreateMaybeMessage< ::cdef::AlignmentSpecifier >(Arena* arena) {
13525|  4.68k|  return Arena::CreateMessageInternal< ::cdef::AlignmentSpecifier >(arena);
13526|  4.68k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef14DeclaratorAttrEJEEEPT_PS1_DpOT0_:
13528|  4.43k|Arena::CreateMaybeMessage< ::cdef::DeclaratorAttr >(Arena* arena) {
13529|  4.43k|  return Arena::CreateMessageInternal< ::cdef::DeclaratorAttr >(arena);
13530|  4.43k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef21DeclaratorParenthesesEJEEEPT_PS1_DpOT0_:
13532|  3.07k|Arena::CreateMaybeMessage< ::cdef::DeclaratorParentheses >(Arena* arena) {
13533|  3.07k|  return Arena::CreateMessageInternal< ::cdef::DeclaratorParentheses >(arena);
13534|  3.07k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef10DeclaratorEJEEEPT_PS1_DpOT0_:
13536|  40.4k|Arena::CreateMaybeMessage< ::cdef::Declarator >(Arena* arena) {
13537|  40.4k|  return Arena::CreateMessageInternal< ::cdef::Declarator >(arena);
13538|  40.4k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef11InitializerEJEEEPT_PS1_DpOT0_:
13540|  2.93k|Arena::CreateMaybeMessage< ::cdef::Initializer >(Arena* arena) {
13541|  2.93k|  return Arena::CreateMessageInternal< ::cdef::Initializer >(arena);
13542|  2.93k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef26DeclaratorsAndInitializersEJEEEPT_PS1_DpOT0_:
13544|  12.6k|Arena::CreateMaybeMessage< ::cdef::DeclaratorsAndInitializers >(Arena* arena) {
13545|  12.6k|  return Arena::CreateMessageInternal< ::cdef::DeclaratorsAndInitializers >(arena);
13546|  12.6k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef21SpecifierAndQualifierEJEEEPT_PS1_DpOT0_:
13548|  37.2k|Arena::CreateMaybeMessage< ::cdef::SpecifierAndQualifier >(Arena* arena) {
13549|  37.2k|  return Arena::CreateMessageInternal< ::cdef::SpecifierAndQualifier >(arena);
13550|  37.2k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef27SpecifiersAndQualifiersListEJEEEPT_PS1_DpOT0_:
13552|  25.1k|Arena::CreateMaybeMessage< ::cdef::SpecifiersAndQualifiersList >(Arena* arena) {
13553|  25.1k|  return Arena::CreateMessageInternal< ::cdef::SpecifiersAndQualifiersList >(arena);
13554|  25.1k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef11AttrSpecSeqEJEEEPT_PS1_DpOT0_:
13556|  6.60k|Arena::CreateMaybeMessage< ::cdef::AttrSpecSeq >(Arena* arena) {
13557|  6.60k|  return Arena::CreateMessageInternal< ::cdef::AttrSpecSeq >(arena);
13558|  6.60k|}
_ZN6google8protobuf5Arena18CreateMaybeMessageIN4cdef11DeclarationEJEEEPT_PS1_DpOT0_:
13560|  32.2k|Arena::CreateMaybeMessage< ::cdef::Declaration >(Arena* arena) {
13561|  32.2k|  return Arena::CreateMessageInternal< ::cdef::Declaration >(arena);
13562|  32.2k|}
_ZN4cdef10Identifier10SharedCtorEPN6google8protobuf5ArenaEb:
 1349|  15.4k|    ::_pb::Arena* arena, bool is_message_owned) {
 1350|  15.4k|  (void)arena;
 1351|  15.4k|  (void)is_message_owned;
 1352|  15.4k|  new (&_impl_) Impl_{
 1353|  15.4k|      decltype(_impl_._has_bits_){}
 1354|  15.4k|    , /*decltype(_impl_._cached_size_)*/{}
 1355|  15.4k|    , decltype(_impl_.name_){}
 1356|  15.4k|    , decltype(_impl_.num_){0}
 1357|  15.4k|  };
 1358|  15.4k|  _impl_.name_.InitDefault();
 1359|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 1360|       |    _impl_.name_.Set("", GetArenaForAllocation());
 1361|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 1362|  15.4k|}
_ZN4cdef10Identifier10SharedDtorEv:
 1373|  15.4k|inline void Identifier::SharedDtor() {
 1374|  15.4k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  15.4k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  15.4k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  15.4k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 15.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1375|  15.4k|  _impl_.name_.Destroy();
 1376|  15.4k|}
_ZN4cdef10Identifier9_Internal21MissingRequiredFieldsERKN6google8protobuf8internal7HasBitsILm1EEE:
 1315|  15.4k|  static bool MissingRequiredFields(const HasBits& has_bits) {
 1316|  15.4k|    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
 1317|  15.4k|  }
_ZN4cdef15IdentifiersList10SharedCtorEPN6google8protobuf5ArenaEb:
 1604|  2.18k|    ::_pb::Arena* arena, bool is_message_owned) {
 1605|  2.18k|  (void)arena;
 1606|  2.18k|  (void)is_message_owned;
 1607|  2.18k|  new (&_impl_) Impl_{
 1608|  2.18k|      decltype(_impl_.identifiers_){arena}
 1609|  2.18k|    , /*decltype(_impl_._cached_size_)*/{}
 1610|  2.18k|  };
 1611|  2.18k|}
_ZN4cdef15IdentifiersList10SharedDtorEv:
 1622|  2.18k|inline void IdentifiersList::SharedDtor() {
 1623|  2.18k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  2.18k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  2.18k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  2.18k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 2.18k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1624|  2.18k|  _impl_.identifiers_.~RepeatedPtrField();
 1625|  2.18k|}
_ZN4cdef9Parameter10SharedCtorEPN6google8protobuf5ArenaEb:
 1807|  1.28k|    ::_pb::Arena* arena, bool is_message_owned) {
 1808|  1.28k|  (void)arena;
 1809|  1.28k|  (void)is_message_owned;
 1810|  1.28k|  new (&_impl_) Impl_{
 1811|  1.28k|      decltype(_impl_._has_bits_){}
 1812|  1.28k|    , /*decltype(_impl_._cached_size_)*/{}
 1813|  1.28k|    , decltype(_impl_.name_){nullptr}
 1814|  1.28k|  };
 1815|  1.28k|}
_ZN4cdef9Parameter10SharedDtorEv:
 1826|  1.28k|inline void Parameter::SharedDtor() {
 1827|  1.28k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  1.28k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  1.28k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  1.28k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 1.28k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1828|  1.28k|  if (this != internal_default_instance()) delete _impl_.name_;
  ------------------
  |  Branch (1828:7): [True: 1.28k, False: 0]
  ------------------
 1829|  1.28k|}
_ZN4cdef9Parameter9_Internal21MissingRequiredFieldsERKN6google8protobuf8internal7HasBitsILm1EEE:
 1776|  1.28k|  static bool MissingRequiredFields(const HasBits& has_bits) {
 1777|  1.28k|    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
 1778|  1.28k|  }
_ZN4cdef10Parameters10SharedCtorEPN6google8protobuf5ArenaEb:
 2002|  3.04k|    ::_pb::Arena* arena, bool is_message_owned) {
 2003|  3.04k|  (void)arena;
 2004|  3.04k|  (void)is_message_owned;
 2005|  3.04k|  new (&_impl_) Impl_{
 2006|  3.04k|      decltype(_impl_.parameters_){arena}
 2007|  3.04k|    , /*decltype(_impl_._cached_size_)*/{}
 2008|  3.04k|  };
 2009|  3.04k|}
_ZN4cdef10Parameters10SharedDtorEv:
 2020|  3.04k|inline void Parameters::SharedDtor() {
 2021|  3.04k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  3.04k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  3.04k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  3.04k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2022|  3.04k|  _impl_.parameters_.~RepeatedPtrField();
 2023|  3.04k|}
_ZN4cdef14ParametersList10SharedCtorEPN6google8protobuf5ArenaEb:
 2232|  5.18k|    ::_pb::Arena* arena, bool is_message_owned) {
 2233|  5.18k|  (void)arena;
 2234|  5.18k|  (void)is_message_owned;
 2235|  5.18k|  new (&_impl_) Impl_{
 2236|  5.18k|      decltype(_impl_._has_bits_){}
 2237|  5.18k|    , /*decltype(_impl_._cached_size_)*/{}
 2238|  5.18k|    , decltype(_impl_.ellipsis_){0}
 2239|  5.18k|    , decltype(_impl_.parameters_list_oneof_){}
 2240|  5.18k|    , /*decltype(_impl_._oneof_case_)*/{}
 2241|  5.18k|  };
 2242|  5.18k|  clear_has_parameters_list_oneof();
 2243|  5.18k|}
_ZN4cdef14ParametersList10SharedDtorEv:
 2254|  5.18k|inline void ParametersList::SharedDtor() {
 2255|  5.18k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  5.18k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  5.18k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  5.18k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 5.18k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|  5.18k|  if (has_parameters_list_oneof()) {
  ------------------
  |  Branch (2256:7): [True: 3.78k, False: 1.40k]
  ------------------
 2257|  3.78k|    clear_parameters_list_oneof();
 2258|  3.78k|  }
 2259|  5.18k|}
_ZN4cdef9Specifier10SharedCtorEPN6google8protobuf5ArenaEb:
 2629|  53.3k|    ::_pb::Arena* arena, bool is_message_owned) {
 2630|  53.3k|  (void)arena;
 2631|  53.3k|  (void)is_message_owned;
 2632|  53.3k|  new (&_impl_) Impl_{
 2633|  53.3k|      decltype(_impl_.specifier_oneof_){}
 2634|  53.3k|    , /*decltype(_impl_._cached_size_)*/{}
 2635|  53.3k|    , /*decltype(_impl_._oneof_case_)*/{}
 2636|  53.3k|  };
 2637|  53.3k|  clear_has_specifier_oneof();
 2638|  53.3k|}
_ZN4cdef9Specifier10SharedDtorEv:
 2649|  53.3k|inline void Specifier::SharedDtor() {
 2650|  53.3k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  53.3k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  53.3k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  53.3k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 53.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2651|  53.3k|  if (has_specifier_oneof()) {
  ------------------
  |  Branch (2651:7): [True: 43.8k, False: 9.52k]
  ------------------
 2652|  43.8k|    clear_specifier_oneof();
 2653|  43.8k|  }
 2654|  53.3k|}
_ZN4cdef14SpecifiersList10SharedCtorEPN6google8protobuf5ArenaEb:
 2962|  30.9k|    ::_pb::Arena* arena, bool is_message_owned) {
 2963|  30.9k|  (void)arena;
 2964|  30.9k|  (void)is_message_owned;
 2965|  30.9k|  new (&_impl_) Impl_{
 2966|  30.9k|      decltype(_impl_.specifiers_list_){arena}
 2967|  30.9k|    , /*decltype(_impl_._cached_size_)*/{}
 2968|  30.9k|  };
 2969|  30.9k|}
_ZN4cdef14SpecifiersList10SharedDtorEv:
 2980|  30.9k|inline void SpecifiersList::SharedDtor() {
 2981|  30.9k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  30.9k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  30.9k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  30.9k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 30.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2982|  30.9k|  _impl_.specifiers_list_.~RepeatedPtrField();
 2983|  30.9k|}
_ZN4cdef9Qualifier10SharedCtorEPN6google8protobuf5ArenaEb:
 3181|  7.05k|    ::_pb::Arena* arena, bool is_message_owned) {
 3182|  7.05k|  (void)arena;
 3183|  7.05k|  (void)is_message_owned;
 3184|  7.05k|  new (&_impl_) Impl_{
 3185|  7.05k|      decltype(_impl_.qualifier_oneof_){}
 3186|  7.05k|    , /*decltype(_impl_._cached_size_)*/{}
 3187|  7.05k|    , /*decltype(_impl_._oneof_case_)*/{}
 3188|  7.05k|  };
 3189|  7.05k|  clear_has_qualifier_oneof();
 3190|  7.05k|}
_ZN4cdef9Qualifier10SharedDtorEv:
 3201|  7.05k|inline void Qualifier::SharedDtor() {
 3202|  7.05k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  7.05k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  7.05k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  7.05k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 7.05k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3203|  7.05k|  if (has_qualifier_oneof()) {
  ------------------
  |  Branch (3203:7): [True: 4.31k, False: 2.74k]
  ------------------
 3204|  4.31k|    clear_qualifier_oneof();
 3205|  4.31k|  }
 3206|  7.05k|}
_ZN4cdef14QualifiersList10SharedCtorEPN6google8protobuf5ArenaEb:
 3396|  10.8k|    ::_pb::Arena* arena, bool is_message_owned) {
 3397|  10.8k|  (void)arena;
 3398|  10.8k|  (void)is_message_owned;
 3399|  10.8k|  new (&_impl_) Impl_{
 3400|  10.8k|      decltype(_impl_.qualifiers_list_){arena}
 3401|  10.8k|    , /*decltype(_impl_._cached_size_)*/{}
 3402|  10.8k|  };
 3403|  10.8k|}
_ZN4cdef14QualifiersList10SharedDtorEv:
 3414|  10.8k|inline void QualifiersList::SharedDtor() {
 3415|  10.8k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  10.8k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  10.8k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  10.8k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 10.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3416|  10.8k|  _impl_.qualifiers_list_.~RepeatedPtrField();
 3417|  10.8k|}
_ZN4cdef8Bitfield10SharedCtorEPN6google8protobuf5ArenaEb:
 3602|  3.24k|    ::_pb::Arena* arena, bool is_message_owned) {
 3603|  3.24k|  (void)arena;
 3604|  3.24k|  (void)is_message_owned;
 3605|  3.24k|  new (&_impl_) Impl_{
 3606|  3.24k|      decltype(_impl_._has_bits_){}
 3607|  3.24k|    , /*decltype(_impl_._cached_size_)*/{}
 3608|  3.24k|    , decltype(_impl_.name_){nullptr}
 3609|  3.24k|    , decltype(_impl_.width_){0u}
 3610|  3.24k|  };
 3611|  3.24k|}
_ZN4cdef8Bitfield10SharedDtorEv:
 3622|  3.24k|inline void Bitfield::SharedDtor() {
 3623|  3.24k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  3.24k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  3.24k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  3.24k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3.24k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  3.24k|  if (this != internal_default_instance()) delete _impl_.name_;
  ------------------
  |  Branch (3624:7): [True: 3.24k, False: 0]
  ------------------
 3625|  3.24k|}
_ZN4cdef8Bitfield9_Internal21MissingRequiredFieldsERKN6google8protobuf8internal7HasBitsILm1EEE:
 3569|  3.24k|  static bool MissingRequiredFields(const HasBits& has_bits) {
 3570|  3.24k|    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
 3571|  3.24k|  }
_ZN4cdef18FunctionDeclarator10SharedCtorEPN6google8protobuf5ArenaEb:
 3918|  9.79k|    ::_pb::Arena* arena, bool is_message_owned) {
 3919|  9.79k|  (void)arena;
 3920|  9.79k|  (void)is_message_owned;
 3921|  9.79k|  new (&_impl_) Impl_{
 3922|  9.79k|      decltype(_impl_._has_bits_){}
 3923|  9.79k|    , /*decltype(_impl_._cached_size_)*/{}
 3924|  9.79k|    , decltype(_impl_.noptr_declarator_){nullptr}
 3925|  9.79k|    , decltype(_impl_.attr_spec_seq_){nullptr}
 3926|  9.79k|    , decltype(_impl_.parentheses_content_oneof_){}
 3927|  9.79k|    , /*decltype(_impl_._oneof_case_)*/{}
 3928|  9.79k|  };
 3929|  9.79k|  clear_has_parentheses_content_oneof();
 3930|  9.79k|}
_ZN4cdef18FunctionDeclarator10SharedDtorEv:
 3941|  9.79k|inline void FunctionDeclarator::SharedDtor() {
 3942|  9.79k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  9.79k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  9.79k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  9.79k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 9.79k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3943|  9.79k|  if (this != internal_default_instance()) delete _impl_.noptr_declarator_;
  ------------------
  |  Branch (3943:7): [True: 9.79k, False: 0]
  ------------------
 3944|  9.79k|  if (this != internal_default_instance()) delete _impl_.attr_spec_seq_;
  ------------------
  |  Branch (3944:7): [True: 9.79k, False: 0]
  ------------------
 3945|  9.79k|  if (has_parentheses_content_oneof()) {
  ------------------
  |  Branch (3945:7): [True: 7.36k, False: 2.42k]
  ------------------
 3946|  7.36k|    clear_parentheses_content_oneof();
 3947|  7.36k|  }
 3948|  9.79k|}
_ZN4cdef18FunctionDeclarator9_Internal21MissingRequiredFieldsERKN6google8protobuf8internal7HasBitsILm1EEE:
 3823|  9.79k|  static bool MissingRequiredFields(const HasBits& has_bits) {
 3824|  9.79k|    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
 3825|  9.79k|  }
_ZN4cdef17PointerDeclarator10SharedCtorEPN6google8protobuf5ArenaEb:
 4310|  4.33k|    ::_pb::Arena* arena, bool is_message_owned) {
 4311|  4.33k|  (void)arena;
 4312|  4.33k|  (void)is_message_owned;
 4313|  4.33k|  new (&_impl_) Impl_{
 4314|  4.33k|      decltype(_impl_._has_bits_){}
 4315|  4.33k|    , /*decltype(_impl_._cached_size_)*/{}
 4316|  4.33k|    , decltype(_impl_.attr_spec_seq_){nullptr}
 4317|  4.33k|    , decltype(_impl_.qualifiers_list_){nullptr}
 4318|  4.33k|    , decltype(_impl_.declarator_){nullptr}
 4319|  4.33k|  };
 4320|  4.33k|}
_ZN4cdef17PointerDeclarator10SharedDtorEv:
 4331|  4.33k|inline void PointerDeclarator::SharedDtor() {
 4332|  4.33k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  4.33k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  4.33k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  4.33k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 4.33k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4333|  4.33k|  if (this != internal_default_instance()) delete _impl_.attr_spec_seq_;
  ------------------
  |  Branch (4333:7): [True: 4.33k, False: 0]
  ------------------
 4334|  4.33k|  if (this != internal_default_instance()) delete _impl_.qualifiers_list_;
  ------------------
  |  Branch (4334:7): [True: 4.33k, False: 0]
  ------------------
 4335|  4.33k|  if (this != internal_default_instance()) delete _impl_.declarator_;
  ------------------
  |  Branch (4335:7): [True: 4.33k, False: 0]
  ------------------
 4336|  4.33k|}
_ZN4cdef17PointerDeclarator9_Internal21MissingRequiredFieldsERKN6google8protobuf8internal7HasBitsILm1EEE:
 4263|  4.33k|  static bool MissingRequiredFields(const HasBits& has_bits) {
 4264|  4.33k|    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
 4265|  4.33k|  }
_ZN4cdef15ArrayDeclarator10SharedCtorEPN6google8protobuf5ArenaEb:
 4618|  5.24k|    ::_pb::Arena* arena, bool is_message_owned) {
 4619|  5.24k|  (void)arena;
 4620|  5.24k|  (void)is_message_owned;
 4621|  5.24k|  new (&_impl_) Impl_{
 4622|  5.24k|      decltype(_impl_._has_bits_){}
 4623|  5.24k|    , /*decltype(_impl_._cached_size_)*/{}
 4624|  5.24k|    , decltype(_impl_.qualifiers_list_){nullptr}
 4625|  5.24k|    , decltype(_impl_.attr_spec_seq_){nullptr}
 4626|  5.24k|    , decltype(_impl_.keyword_static_){0}
 4627|  5.24k|    , decltype(_impl_.expression_){0u}
 4628|  5.24k|  };
 4629|  5.24k|}
_ZN4cdef15ArrayDeclarator10SharedDtorEv:
 4640|  5.24k|inline void ArrayDeclarator::SharedDtor() {
 4641|  5.24k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  5.24k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  5.24k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  5.24k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 5.24k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4642|  5.24k|  if (this != internal_default_instance()) delete _impl_.qualifiers_list_;
  ------------------
  |  Branch (4642:7): [True: 5.24k, False: 0]
  ------------------
 4643|  5.24k|  if (this != internal_default_instance()) delete _impl_.attr_spec_seq_;
  ------------------
  |  Branch (4643:7): [True: 5.24k, False: 0]
  ------------------
 4644|  5.24k|}
_ZN4cdef17FunctionSpecifier10SharedCtorEPN6google8protobuf5ArenaEb:
 4921|  3.37k|    ::_pb::Arena* arena, bool is_message_owned) {
 4922|  3.37k|  (void)arena;
 4923|  3.37k|  (void)is_message_owned;
 4924|  3.37k|  new (&_impl_) Impl_{
 4925|  3.37k|      decltype(_impl_._has_bits_){}
 4926|  3.37k|    , /*decltype(_impl_._cached_size_)*/{}
 4927|  3.37k|    , decltype(_impl_.keyword_inline_){0}
 4928|  3.37k|    , decltype(_impl_.keyword_noreturn_){0}
 4929|  3.37k|  };
 4930|  3.37k|}
_ZN4cdef17FunctionSpecifier10SharedDtorEv:
 4941|  3.37k|inline void FunctionSpecifier::SharedDtor() {
 4942|  3.37k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  3.37k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  3.37k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  3.37k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4943|  3.37k|}
_ZN4cdef21StorageClassSpecifier10SharedCtorEPN6google8protobuf5ArenaEb:
 5185|  3.60k|    ::_pb::Arena* arena, bool is_message_owned) {
 5186|  3.60k|  (void)arena;
 5187|  3.60k|  (void)is_message_owned;
 5188|  3.60k|  new (&_impl_) Impl_{
 5189|  3.60k|      decltype(_impl_.storage_class_specifier_oneof_){}
 5190|  3.60k|    , /*decltype(_impl_._cached_size_)*/{}
 5191|  3.60k|    , /*decltype(_impl_._oneof_case_)*/{}
 5192|  3.60k|  };
 5193|  3.60k|  clear_has_storage_class_specifier_oneof();
 5194|  3.60k|}
_ZN4cdef21StorageClassSpecifier10SharedDtorEv:
 5205|  3.60k|inline void StorageClassSpecifier::SharedDtor() {
 5206|  3.60k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  3.60k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  3.60k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  3.60k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3.60k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5207|  3.60k|  if (has_storage_class_specifier_oneof()) {
  ------------------
  |  Branch (5207:7): [True: 1.72k, False: 1.88k]
  ------------------
 5208|  1.72k|    clear_storage_class_specifier_oneof();
 5209|  1.72k|  }
 5210|  3.60k|}
_ZN4cdef8EnumType10SharedCtorEPN6google8protobuf5ArenaEb:
 5635|  1.80k|    ::_pb::Arena* arena, bool is_message_owned) {
 5636|  1.80k|  (void)arena;
 5637|  1.80k|  (void)is_message_owned;
 5638|  1.80k|  new (&_impl_) Impl_{
 5639|  1.80k|      decltype(_impl_._has_bits_){}
 5640|  1.80k|    , /*decltype(_impl_._cached_size_)*/{}
 5641|  1.80k|    , decltype(_impl_.constant_){arena}
 5642|  1.80k|    , decltype(_impl_.enum_name_){nullptr}
 5643|  1.80k|  };
 5644|  1.80k|}
_ZN4cdef8EnumType10SharedDtorEv:
 5655|  1.80k|inline void EnumType::SharedDtor() {
 5656|  1.80k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  1.80k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  1.80k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  1.80k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 1.80k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5657|  1.80k|  _impl_.constant_.~RepeatedPtrField();
 5658|  1.80k|  if (this != internal_default_instance()) delete _impl_.enum_name_;
  ------------------
  |  Branch (5658:7): [True: 1.80k, False: 0]
  ------------------
 5659|  1.80k|}
_ZN4cdef8EnumType9_Internal21MissingRequiredFieldsERKN6google8protobuf8internal7HasBitsILm1EEE:
 5603|  1.80k|  static bool MissingRequiredFields(const HasBits& has_bits) {
 5604|  1.80k|    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
 5605|  1.80k|  }
_ZN4cdef15StaticAssertion10SharedCtorEPN6google8protobuf5ArenaEb:
 5902|  28.1k|    ::_pb::Arena* arena, bool is_message_owned) {
 5903|  28.1k|  (void)arena;
 5904|  28.1k|  (void)is_message_owned;
 5905|  28.1k|  new (&_impl_) Impl_{
 5906|  28.1k|      decltype(_impl_._has_bits_){}
 5907|  28.1k|    , /*decltype(_impl_._cached_size_)*/{}
 5908|  28.1k|    , decltype(_impl_.message_){}
 5909|  28.1k|    , decltype(_impl_.expression_){0u}
 5910|  28.1k|    , decltype(_impl_.static_assert_oneof_){}
 5911|  28.1k|    , /*decltype(_impl_._oneof_case_)*/{}
 5912|  28.1k|  };
 5913|  28.1k|  _impl_.message_.InitDefault();
 5914|       |  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
 5915|       |    _impl_.message_.Set("", GetArenaForAllocation());
 5916|       |  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
 5917|  28.1k|  clear_has_static_assert_oneof();
 5918|  28.1k|}
_ZN4cdef15StaticAssertion10SharedDtorEv:
 5929|  28.1k|inline void StaticAssertion::SharedDtor() {
 5930|  28.1k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  28.1k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  28.1k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  28.1k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 28.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5931|  28.1k|  _impl_.message_.Destroy();
 5932|  28.1k|  if (has_static_assert_oneof()) {
  ------------------
  |  Branch (5932:7): [True: 27.0k, False: 1.08k]
  ------------------
 5933|  27.0k|    clear_static_assert_oneof();
 5934|  27.0k|  }
 5935|  28.1k|}
_ZN4cdef15StaticAssertion9_Internal21MissingRequiredFieldsERKN6google8protobuf8internal7HasBitsILm1EEE:
 5852|  28.1k|  static bool MissingRequiredFields(const HasBits& has_bits) {
 5853|  28.1k|    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
 5854|  28.1k|  }
_ZN4cdef17StructDeclaration10SharedCtorEPN6google8protobuf5ArenaEb:
 6281|  35.1k|    ::_pb::Arena* arena, bool is_message_owned) {
 6282|  35.1k|  (void)arena;
 6283|  35.1k|  (void)is_message_owned;
 6284|  35.1k|  new (&_impl_) Impl_{
 6285|  35.1k|      decltype(_impl_.struct_decl_oneof_){}
 6286|  35.1k|    , /*decltype(_impl_._cached_size_)*/{}
 6287|  35.1k|    , /*decltype(_impl_._oneof_case_)*/{}
 6288|  35.1k|  };
 6289|  35.1k|  clear_has_struct_decl_oneof();
 6290|  35.1k|}
_ZN4cdef17StructDeclaration10SharedDtorEv:
 6301|  35.1k|inline void StructDeclaration::SharedDtor() {
 6302|  35.1k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  35.1k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  35.1k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  35.1k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 35.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6303|  35.1k|  if (has_struct_decl_oneof()) {
  ------------------
  |  Branch (6303:7): [True: 31.4k, False: 3.77k]
  ------------------
 6304|  31.4k|    clear_struct_decl_oneof();
 6305|  31.4k|  }
 6306|  35.1k|}
_ZN4cdef21StructDeclarationList10SharedCtorEPN6google8protobuf5ArenaEb:
 6547|  18.2k|    ::_pb::Arena* arena, bool is_message_owned) {
 6548|  18.2k|  (void)arena;
 6549|  18.2k|  (void)is_message_owned;
 6550|  18.2k|  new (&_impl_) Impl_{
 6551|  18.2k|      decltype(_impl_.struct_declaration_list_){arena}
 6552|  18.2k|    , /*decltype(_impl_._cached_size_)*/{}
 6553|  18.2k|  };
 6554|  18.2k|}
_ZN4cdef21StructDeclarationList10SharedDtorEv:
 6565|  18.2k|inline void StructDeclarationList::SharedDtor() {
 6566|  18.2k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  18.2k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  18.2k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  18.2k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 18.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6567|  18.2k|  _impl_.struct_declaration_list_.~RepeatedPtrField();
 6568|  18.2k|}
_ZN4cdef9UnionType10SharedCtorEPN6google8protobuf5ArenaEb:
 6774|  15.6k|    ::_pb::Arena* arena, bool is_message_owned) {
 6775|  15.6k|  (void)arena;
 6776|  15.6k|  (void)is_message_owned;
 6777|  15.6k|  new (&_impl_) Impl_{
 6778|  15.6k|      decltype(_impl_._has_bits_){}
 6779|  15.6k|    , /*decltype(_impl_._cached_size_)*/{}
 6780|  15.6k|    , decltype(_impl_.attr_spec_seq_){nullptr}
 6781|  15.6k|    , decltype(_impl_.name_){nullptr}
 6782|  15.6k|    , decltype(_impl_.struct_declaration_list_){nullptr}
 6783|  15.6k|  };
 6784|  15.6k|}
_ZN4cdef9UnionType10SharedDtorEv:
 6795|  15.6k|inline void UnionType::SharedDtor() {
 6796|  15.6k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  15.6k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  15.6k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  15.6k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 15.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6797|  15.6k|  if (this != internal_default_instance()) delete _impl_.attr_spec_seq_;
  ------------------
  |  Branch (6797:7): [True: 15.6k, False: 0]
  ------------------
 6798|  15.6k|  if (this != internal_default_instance()) delete _impl_.name_;
  ------------------
  |  Branch (6798:7): [True: 15.6k, False: 0]
  ------------------
 6799|  15.6k|  if (this != internal_default_instance()) delete _impl_.struct_declaration_list_;
  ------------------
  |  Branch (6799:7): [True: 15.6k, False: 0]
  ------------------
 6800|  15.6k|}
_ZN4cdef9UnionType9_Internal21MissingRequiredFieldsERKN6google8protobuf8internal7HasBitsILm1EEE:
 6727|  15.6k|  static bool MissingRequiredFields(const HasBits& has_bits) {
 6728|  15.6k|    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
 6729|  15.6k|  }
_ZN4cdef10StructType10SharedCtorEPN6google8protobuf5ArenaEb:
 7089|  2.58k|    ::_pb::Arena* arena, bool is_message_owned) {
 7090|  2.58k|  (void)arena;
 7091|  2.58k|  (void)is_message_owned;
 7092|  2.58k|  new (&_impl_) Impl_{
 7093|  2.58k|      decltype(_impl_._has_bits_){}
 7094|  2.58k|    , /*decltype(_impl_._cached_size_)*/{}
 7095|  2.58k|    , decltype(_impl_.attr_spec_seq_){nullptr}
 7096|  2.58k|    , decltype(_impl_.name_){nullptr}
 7097|  2.58k|    , decltype(_impl_.struct_declaration_list_){nullptr}
 7098|  2.58k|  };
 7099|  2.58k|}
_ZN4cdef10StructType10SharedDtorEv:
 7110|  2.58k|inline void StructType::SharedDtor() {
 7111|  2.58k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  2.58k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  2.58k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  2.58k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 2.58k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7112|  2.58k|  if (this != internal_default_instance()) delete _impl_.attr_spec_seq_;
  ------------------
  |  Branch (7112:7): [True: 2.58k, False: 0]
  ------------------
 7113|  2.58k|  if (this != internal_default_instance()) delete _impl_.name_;
  ------------------
  |  Branch (7113:7): [True: 2.58k, False: 0]
  ------------------
 7114|  2.58k|  if (this != internal_default_instance()) delete _impl_.struct_declaration_list_;
  ------------------
  |  Branch (7114:7): [True: 2.58k, False: 0]
  ------------------
 7115|  2.58k|}
_ZN4cdef10StructType9_Internal21MissingRequiredFieldsERKN6google8protobuf8internal7HasBitsILm1EEE:
 7042|  2.58k|  static bool MissingRequiredFields(const HasBits& has_bits) {
 7043|  2.58k|    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
 7044|  2.58k|  }
_ZN4cdef14ArithmeticType10SharedCtorEPN6google8protobuf5ArenaEb:
 8261|  3.47k|    ::_pb::Arena* arena, bool is_message_owned) {
 8262|  3.47k|  (void)arena;
 8263|  3.47k|  (void)is_message_owned;
 8264|  3.47k|  new (&_impl_) Impl_{
 8265|  3.47k|      decltype(_impl_.arithmetic_oneof_){}
 8266|  3.47k|    , /*decltype(_impl_._cached_size_)*/{}
 8267|  3.47k|    , /*decltype(_impl_._oneof_case_)*/{}
 8268|  3.47k|  };
 8269|  3.47k|  clear_has_arithmetic_oneof();
 8270|  3.47k|}
_ZN4cdef14ArithmeticType10SharedDtorEv:
 8281|  3.47k|inline void ArithmeticType::SharedDtor() {
 8282|  3.47k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  3.47k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  3.47k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  3.47k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3.47k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8283|  3.47k|  if (has_arithmetic_oneof()) {
  ------------------
  |  Branch (8283:7): [True: 2.31k, False: 1.15k]
  ------------------
 8284|  2.31k|    clear_arithmetic_oneof();
 8285|  2.31k|  }
 8286|  3.47k|}
_ZN4cdef10AtomicType10SharedCtorEPN6google8protobuf5ArenaEb:
 9433|  1.16k|    ::_pb::Arena* arena, bool is_message_owned) {
 9434|  1.16k|  (void)arena;
 9435|  1.16k|  (void)is_message_owned;
 9436|  1.16k|  new (&_impl_) Impl_{
 9437|  1.16k|      decltype(_impl_._has_bits_){}
 9438|  1.16k|    , /*decltype(_impl_._cached_size_)*/{}
 9439|  1.16k|    , decltype(_impl_.atomic_type_){0}
 9440|  1.16k|  };
 9441|  1.16k|}
_ZN4cdef10AtomicType10SharedDtorEv:
 9452|  1.16k|inline void AtomicType::SharedDtor() {
 9453|  1.16k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  1.16k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  1.16k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  1.16k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 1.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 9454|  1.16k|}
_ZN4cdef10AtomicType9_Internal21MissingRequiredFieldsERKN6google8protobuf8internal7HasBitsILm1EEE:
 9408|  1.16k|  static bool MissingRequiredFields(const HasBits& has_bits) {
 9409|  1.16k|    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
 9410|  1.16k|  }
_ZN4cdef13TypeSpecifier10SharedCtorEPN6google8protobuf5ArenaEb:
 9803|  32.2k|    ::_pb::Arena* arena, bool is_message_owned) {
 9804|  32.2k|  (void)arena;
 9805|  32.2k|  (void)is_message_owned;
 9806|  32.2k|  new (&_impl_) Impl_{
 9807|  32.2k|      decltype(_impl_.type_specifier_oneof_){}
 9808|  32.2k|    , /*decltype(_impl_._cached_size_)*/{}
 9809|  32.2k|    , /*decltype(_impl_._oneof_case_)*/{}
 9810|  32.2k|  };
 9811|  32.2k|  clear_has_type_specifier_oneof();
 9812|  32.2k|}
_ZN4cdef13TypeSpecifier10SharedDtorEv:
 9823|  32.2k|inline void TypeSpecifier::SharedDtor() {
 9824|  32.2k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  32.2k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  32.2k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  32.2k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 32.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 9825|  32.2k|  if (has_type_specifier_oneof()) {
  ------------------
  |  Branch (9825:7): [True: 30.0k, False: 2.12k]
  ------------------
 9826|  30.0k|    clear_type_specifier_oneof();
 9827|  30.0k|  }
 9828|  32.2k|}
_ZN4cdef13TypeQualifier10SharedCtorEPN6google8protobuf5ArenaEb:
10299|  4.31k|    ::_pb::Arena* arena, bool is_message_owned) {
10300|  4.31k|  (void)arena;
10301|  4.31k|  (void)is_message_owned;
10302|  4.31k|  new (&_impl_) Impl_{
10303|  4.31k|      decltype(_impl_._has_bits_){}
10304|  4.31k|    , /*decltype(_impl_._cached_size_)*/{}
10305|  4.31k|    , decltype(_impl_.keyword_const_){0}
10306|  4.31k|    , decltype(_impl_.keyword_volatile_){0}
10307|  4.31k|    , decltype(_impl_.keyword_restrict_){0}
10308|  4.31k|    , decltype(_impl_.keyword_atomic_){0}
10309|  4.31k|  };
10310|  4.31k|}
_ZN4cdef13TypeQualifier10SharedDtorEv:
10321|  4.31k|inline void TypeQualifier::SharedDtor() {
10322|  4.31k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  4.31k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  4.31k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  4.31k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 4.31k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
10323|  4.31k|}
_ZN4cdef18AlignmentSpecifier10SharedCtorEPN6google8protobuf5ArenaEb:
10578|  4.68k|    ::_pb::Arena* arena, bool is_message_owned) {
10579|  4.68k|  (void)arena;
10580|  4.68k|  (void)is_message_owned;
10581|  4.68k|  new (&_impl_) Impl_{
10582|  4.68k|      decltype(_impl_._has_bits_){}
10583|  4.68k|    , /*decltype(_impl_._cached_size_)*/{}
10584|  4.68k|    , decltype(_impl_.alignment_specifier_alignas_){0}
10585|  4.68k|  };
10586|  4.68k|}
_ZN4cdef18AlignmentSpecifier10SharedDtorEv:
10597|  4.68k|inline void AlignmentSpecifier::SharedDtor() {
10598|  4.68k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  4.68k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  4.68k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  4.68k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 4.68k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
10599|  4.68k|}
_ZN4cdef14DeclaratorAttr10SharedCtorEPN6google8protobuf5ArenaEb:
10791|  4.43k|    ::_pb::Arena* arena, bool is_message_owned) {
10792|  4.43k|  (void)arena;
10793|  4.43k|  (void)is_message_owned;
10794|  4.43k|  new (&_impl_) Impl_{
10795|  4.43k|      decltype(_impl_._has_bits_){}
10796|  4.43k|    , /*decltype(_impl_._cached_size_)*/{}
10797|  4.43k|    , decltype(_impl_.name_){nullptr}
10798|  4.43k|    , decltype(_impl_.attr_spec_seq_){nullptr}
10799|  4.43k|  };
10800|  4.43k|}
_ZN4cdef14DeclaratorAttr10SharedDtorEv:
10811|  4.43k|inline void DeclaratorAttr::SharedDtor() {
10812|  4.43k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  4.43k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  4.43k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  4.43k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 4.43k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
10813|  4.43k|  if (this != internal_default_instance()) delete _impl_.name_;
  ------------------
  |  Branch (10813:7): [True: 4.43k, False: 0]
  ------------------
10814|  4.43k|  if (this != internal_default_instance()) delete _impl_.attr_spec_seq_;
  ------------------
  |  Branch (10814:7): [True: 4.43k, False: 0]
  ------------------
10815|  4.43k|}
_ZN4cdef14DeclaratorAttr9_Internal21MissingRequiredFieldsERKN6google8protobuf8internal7HasBitsILm1EEE:
10752|  4.43k|  static bool MissingRequiredFields(const HasBits& has_bits) {
10753|  4.43k|    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
10754|  4.43k|  }
_ZN4cdef21DeclaratorParentheses10SharedCtorEPN6google8protobuf5ArenaEb:
11045|  3.07k|    ::_pb::Arena* arena, bool is_message_owned) {
11046|  3.07k|  (void)arena;
11047|  3.07k|  (void)is_message_owned;
11048|  3.07k|  new (&_impl_) Impl_{
11049|  3.07k|      decltype(_impl_._has_bits_){}
11050|  3.07k|    , /*decltype(_impl_._cached_size_)*/{}
11051|  3.07k|    , decltype(_impl_.declarator_){nullptr}
11052|  3.07k|  };
11053|  3.07k|}
_ZN4cdef21DeclaratorParentheses10SharedDtorEv:
11064|  3.07k|inline void DeclaratorParentheses::SharedDtor() {
11065|  3.07k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  3.07k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  3.07k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  3.07k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 3.07k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
11066|  3.07k|  if (this != internal_default_instance()) delete _impl_.declarator_;
  ------------------
  |  Branch (11066:7): [True: 3.07k, False: 0]
  ------------------
11067|  3.07k|}
_ZN4cdef21DeclaratorParentheses9_Internal21MissingRequiredFieldsERKN6google8protobuf8internal7HasBitsILm1EEE:
11014|  3.07k|  static bool MissingRequiredFields(const HasBits& has_bits) {
11015|  3.07k|    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
11016|  3.07k|  }
_ZN4cdef10Declarator10SharedCtorEPN6google8protobuf5ArenaEb:
11372|  40.4k|    ::_pb::Arena* arena, bool is_message_owned) {
11373|  40.4k|  (void)arena;
11374|  40.4k|  (void)is_message_owned;
11375|  40.4k|  new (&_impl_) Impl_{
11376|  40.4k|      decltype(_impl_.declarator_oneof_){}
11377|  40.4k|    , /*decltype(_impl_._cached_size_)*/{}
11378|  40.4k|    , /*decltype(_impl_._oneof_case_)*/{}
11379|  40.4k|  };
11380|  40.4k|  clear_has_declarator_oneof();
11381|  40.4k|}
_ZN4cdef10Declarator10SharedDtorEv:
11392|  40.4k|inline void Declarator::SharedDtor() {
11393|  40.4k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  40.4k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  40.4k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  40.4k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 40.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
11394|  40.4k|  if (has_declarator_oneof()) {
  ------------------
  |  Branch (11394:7): [True: 26.8k, False: 13.5k]
  ------------------
11395|  26.8k|    clear_declarator_oneof();
11396|  26.8k|  }
11397|  40.4k|}
_ZN4cdef26DeclaratorsAndInitializers10SharedCtorEPN6google8protobuf5ArenaEb:
11790|  12.6k|    ::_pb::Arena* arena, bool is_message_owned) {
11791|  12.6k|  (void)arena;
11792|  12.6k|  (void)is_message_owned;
11793|  12.6k|  new (&_impl_) Impl_{
11794|  12.6k|      decltype(_impl_.declarators_){arena}
11795|  12.6k|    , decltype(_impl_.initializers_){arena}
11796|  12.6k|    , /*decltype(_impl_._cached_size_)*/{}
11797|  12.6k|  };
11798|  12.6k|}
_ZN4cdef26DeclaratorsAndInitializers10SharedDtorEv:
11809|  12.6k|inline void DeclaratorsAndInitializers::SharedDtor() {
11810|  12.6k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  12.6k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  12.6k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  12.6k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 12.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
11811|  12.6k|  _impl_.declarators_.~RepeatedPtrField();
11812|  12.6k|  _impl_.initializers_.~RepeatedPtrField();
11813|  12.6k|}
_ZN4cdef21SpecifierAndQualifier10SharedCtorEPN6google8protobuf5ArenaEb:
12035|  37.2k|    ::_pb::Arena* arena, bool is_message_owned) {
12036|  37.2k|  (void)arena;
12037|  37.2k|  (void)is_message_owned;
12038|  37.2k|  new (&_impl_) Impl_{
12039|  37.2k|      decltype(_impl_._has_bits_){}
12040|  37.2k|    , /*decltype(_impl_._cached_size_)*/{}
12041|  37.2k|    , decltype(_impl_.qualifiers_list_){nullptr}
12042|  37.2k|    , decltype(_impl_.specifiers_list_){nullptr}
12043|  37.2k|  };
12044|  37.2k|}
_ZN4cdef21SpecifierAndQualifier10SharedDtorEv:
12055|  37.2k|inline void SpecifierAndQualifier::SharedDtor() {
12056|  37.2k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  37.2k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  37.2k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  37.2k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 37.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
12057|  37.2k|  if (this != internal_default_instance()) delete _impl_.qualifiers_list_;
  ------------------
  |  Branch (12057:7): [True: 37.2k, False: 0]
  ------------------
12058|  37.2k|  if (this != internal_default_instance()) delete _impl_.specifiers_list_;
  ------------------
  |  Branch (12058:7): [True: 37.2k, False: 0]
  ------------------
12059|  37.2k|}
_ZN4cdef27SpecifiersAndQualifiersList10SharedCtorEPN6google8protobuf5ArenaEb:
12275|  25.1k|    ::_pb::Arena* arena, bool is_message_owned) {
12276|  25.1k|  (void)arena;
12277|  25.1k|  (void)is_message_owned;
12278|  25.1k|  new (&_impl_) Impl_{
12279|  25.1k|      decltype(_impl_.specifiers_and_qualifiers_list_){arena}
12280|  25.1k|    , /*decltype(_impl_._cached_size_)*/{}
12281|  25.1k|  };
12282|  25.1k|}
_ZN4cdef27SpecifiersAndQualifiersList10SharedDtorEv:
12293|  25.1k|inline void SpecifiersAndQualifiersList::SharedDtor() {
12294|  25.1k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  25.1k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  25.1k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  25.1k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 25.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
12295|  25.1k|  _impl_.specifiers_and_qualifiers_list_.~RepeatedPtrField();
12296|  25.1k|}
_ZN4cdef11AttrSpecSeq10SharedCtorEPN6google8protobuf5ArenaEb:
12506|  6.60k|    ::_pb::Arena* arena, bool is_message_owned) {
12507|  6.60k|  (void)arena;
12508|  6.60k|  (void)is_message_owned;
12509|  6.60k|  new (&_impl_) Impl_{
12510|  6.60k|      decltype(_impl_._has_bits_){}
12511|  6.60k|    , /*decltype(_impl_._cached_size_)*/{}
12512|  6.60k|    , decltype(_impl_.keyword_deprecated_){0}
12513|  6.60k|    , decltype(_impl_.keyword_deprecated_reason_){0}
12514|  6.60k|    , decltype(_impl_.keyword_fallthrough_){0}
12515|  6.60k|    , decltype(_impl_.keyword_nodiscard_){0}
12516|  6.60k|    , decltype(_impl_.keyword_nodiscard_reason_){0}
12517|  6.60k|    , decltype(_impl_.keyword_maybe_unused_){0}
12518|  6.60k|    , decltype(_impl_.keyword_noreturn_1_){0}
12519|  6.60k|    , decltype(_impl_.keyword_noreturn_2_){0}
12520|  6.60k|    , decltype(_impl_.keyword_unsequenced_){0}
12521|  6.60k|    , decltype(_impl_.keyword_reproducible_){0}
12522|  6.60k|  };
12523|  6.60k|}
_ZN4cdef11AttrSpecSeq10SharedDtorEv:
12534|  6.60k|inline void AttrSpecSeq::SharedDtor() {
12535|  6.60k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  6.60k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  6.60k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  6.60k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 6.60k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
12536|  6.60k|}
_ZN4cdef11Declaration10SharedCtorEPN6google8protobuf5ArenaEb:
12970|  32.2k|    ::_pb::Arena* arena, bool is_message_owned) {
12971|  32.2k|  (void)arena;
12972|  32.2k|  (void)is_message_owned;
12973|  32.2k|  new (&_impl_) Impl_{
12974|  32.2k|      decltype(_impl_._has_bits_){}
12975|  32.2k|    , /*decltype(_impl_._cached_size_)*/{}
12976|  32.2k|    , decltype(_impl_.specifiers_and_qualifiers_list_){nullptr}
12977|  32.2k|    , decltype(_impl_.declarators_and_initializers_){nullptr}
12978|  32.2k|    , decltype(_impl_.attr_spec_seq_){nullptr}
12979|  32.2k|  };
12980|  32.2k|}
_ZN4cdef11Declaration10SharedDtorEv:
12991|  32.2k|inline void Declaration::SharedDtor() {
12992|  32.2k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  32.2k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  32.2k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  32.2k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 32.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
12993|  32.2k|  if (this != internal_default_instance()) delete _impl_.specifiers_and_qualifiers_list_;
  ------------------
  |  Branch (12993:7): [True: 32.2k, False: 0]
  ------------------
12994|  32.2k|  if (this != internal_default_instance()) delete _impl_.declarators_and_initializers_;
  ------------------
  |  Branch (12994:7): [True: 32.2k, False: 0]
  ------------------
12995|  32.2k|  if (this != internal_default_instance()) delete _impl_.attr_spec_seq_;
  ------------------
  |  Branch (12995:7): [True: 32.2k, False: 0]
  ------------------
12996|  32.2k|}
_ZN4cdef12Declarations10SharedCtorEPN6google8protobuf5ArenaEb:
13245|  17.8k|    ::_pb::Arena* arena, bool is_message_owned) {
13246|  17.8k|  (void)arena;
13247|  17.8k|  (void)is_message_owned;
13248|  17.8k|  new (&_impl_) Impl_{
13249|  17.8k|      decltype(_impl_.declarations_){arena}
13250|  17.8k|    , /*decltype(_impl_._cached_size_)*/{}
13251|  17.8k|  };
13252|  17.8k|}
_ZN4cdef12Declarations10SharedDtorEv:
13263|  17.8k|inline void Declarations::SharedDtor() {
13264|  17.8k|  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ------------------
  |  |  192|  17.8k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  ------------------
  |  |  |  |  152|  17.8k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  17.8k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (149:3): [True: 17.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
13265|  17.8k|  _impl_.declarations_.~RepeatedPtrField();
13266|  17.8k|}

_ZN4cdef12DeclarationsC2Ev:
 8467|  17.8k|  inline Declarations() : Declarations(nullptr) {}
_ZNK4cdef10Identifier3NewEPN6google8protobuf5ArenaE:
  293|  15.4k|  Identifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
  294|  15.4k|    return CreateMaybeMessage<Identifier>(arena);
  295|  15.4k|  }
_ZNK4cdef15IdentifiersList3NewEPN6google8protobuf5ArenaE:
  476|  2.18k|  IdentifiersList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
  477|  2.18k|    return CreateMaybeMessage<IdentifiersList>(arena);
  478|  2.18k|  }
_ZN4cdef9Parameter25internal_default_instanceEv:
  609|  1.28k|  static inline const Parameter* internal_default_instance() {
  610|  1.28k|    return reinterpret_cast<const Parameter*>(
  611|  1.28k|               &_Parameter_default_instance_);
  612|  1.28k|  }
_ZNK4cdef9Parameter3NewEPN6google8protobuf5ArenaE:
  640|  1.28k|  Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
  641|  1.28k|    return CreateMaybeMessage<Parameter>(arena);
  642|  1.28k|  }
_ZNK4cdef10Parameters3NewEPN6google8protobuf5ArenaE:
  805|  3.04k|  Parameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
  806|  3.04k|    return CreateMaybeMessage<Parameters>(arena);
  807|  3.04k|  }
_ZNK4cdef14ParametersList3NewEPN6google8protobuf5ArenaE:
  975|  5.18k|  ParametersList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
  976|  5.18k|    return CreateMaybeMessage<ParametersList>(arena);
  977|  5.18k|  }
_ZN4cdef14ParametersList5Impl_24ParametersListOneofUnionC2Ev:
 1089|  5.18k|      constexpr ParametersListOneofUnion() : _constinit_{} {}
_ZNK4cdef9Specifier3NewEPN6google8protobuf5ArenaE:
 1191|  53.3k|  Specifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 1192|  53.3k|    return CreateMaybeMessage<Specifier>(arena);
 1193|  53.3k|  }
_ZN4cdef9Specifier5Impl_19SpecifierOneofUnionC2Ev:
 1333|  53.3k|      constexpr SpecifierOneofUnion() : _constinit_{} {}
_ZNK4cdef14SpecifiersList3NewEPN6google8protobuf5ArenaE:
 1430|  30.9k|  SpecifiersList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 1431|  30.9k|    return CreateMaybeMessage<SpecifiersList>(arena);
 1432|  30.9k|  }
_ZNK4cdef9Qualifier3NewEPN6google8protobuf5ArenaE:
 1599|  7.05k|  Qualifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 1600|  7.05k|    return CreateMaybeMessage<Qualifier>(arena);
 1601|  7.05k|  }
_ZN4cdef9Qualifier5Impl_19QualifierOneofUnionC2Ev:
 1681|  7.05k|      constexpr QualifierOneofUnion() : _constinit_{} {}
_ZNK4cdef14QualifiersList3NewEPN6google8protobuf5ArenaE:
 1775|  10.8k|  QualifiersList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 1776|  10.8k|    return CreateMaybeMessage<QualifiersList>(arena);
 1777|  10.8k|  }
_ZN4cdef8Bitfield25internal_default_instanceEv:
 1908|  3.24k|  static inline const Bitfield* internal_default_instance() {
 1909|  3.24k|    return reinterpret_cast<const Bitfield*>(
 1910|  3.24k|               &_Bitfield_default_instance_);
 1911|  3.24k|  }
_ZNK4cdef8Bitfield3NewEPN6google8protobuf5ArenaE:
 1939|  3.24k|  Bitfield* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 1940|  3.24k|    return CreateMaybeMessage<Bitfield>(arena);
 1941|  3.24k|  }
_ZN4cdef18FunctionDeclarator25internal_default_instanceEv:
 2094|  19.5k|  static inline const FunctionDeclarator* internal_default_instance() {
 2095|  19.5k|    return reinterpret_cast<const FunctionDeclarator*>(
 2096|  19.5k|               &_FunctionDeclarator_default_instance_);
 2097|  19.5k|  }
_ZNK4cdef18FunctionDeclarator3NewEPN6google8protobuf5ArenaE:
 2125|  9.79k|  FunctionDeclarator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 2126|  9.79k|    return CreateMaybeMessage<FunctionDeclarator>(arena);
 2127|  9.79k|  }
_ZN4cdef18FunctionDeclarator5Impl_28ParenthesesContentOneofUnionC2Ev:
 2269|  9.79k|      constexpr ParenthesesContentOneofUnion() : _constinit_{} {}
_ZN4cdef17PointerDeclarator25internal_default_instanceEv:
 2332|  13.0k|  static inline const PointerDeclarator* internal_default_instance() {
 2333|  13.0k|    return reinterpret_cast<const PointerDeclarator*>(
 2334|  13.0k|               &_PointerDeclarator_default_instance_);
 2335|  13.0k|  }
_ZNK4cdef17PointerDeclarator3NewEPN6google8protobuf5ArenaE:
 2363|  4.33k|  PointerDeclarator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 2364|  4.33k|    return CreateMaybeMessage<PointerDeclarator>(arena);
 2365|  4.33k|  }
_ZN4cdef15ArrayDeclarator25internal_default_instanceEv:
 2537|  10.4k|  static inline const ArrayDeclarator* internal_default_instance() {
 2538|  10.4k|    return reinterpret_cast<const ArrayDeclarator*>(
 2539|  10.4k|               &_ArrayDeclarator_default_instance_);
 2540|  10.4k|  }
_ZNK4cdef15ArrayDeclarator3NewEPN6google8protobuf5ArenaE:
 2568|  5.24k|  ArrayDeclarator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 2569|  5.24k|    return CreateMaybeMessage<ArrayDeclarator>(arena);
 2570|  5.24k|  }
_ZNK4cdef17FunctionSpecifier3NewEPN6google8protobuf5ArenaE:
 2783|  3.37k|  FunctionSpecifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 2784|  3.37k|    return CreateMaybeMessage<FunctionSpecifier>(arena);
 2785|  3.37k|  }
_ZNK4cdef21StorageClassSpecifier3NewEPN6google8protobuf5ArenaE:
 2970|  3.60k|  StorageClassSpecifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 2971|  3.60k|    return CreateMaybeMessage<StorageClassSpecifier>(arena);
 2972|  3.60k|  }
_ZN4cdef21StorageClassSpecifier5Impl_31StorageClassSpecifierOneofUnionC2Ev:
 3152|  3.60k|      constexpr StorageClassSpecifierOneofUnion() : _constinit_{} {}
_ZNK4cdef14TypeOfOperator3NewEPN6google8protobuf5ArenaE:
 3252|  2.45k|  TypeOfOperator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 3253|  2.45k|    return CreateMaybeMessage<TypeOfOperator>(arena);
 3254|  2.45k|  }
_ZN4cdef8EnumType25internal_default_instanceEv:
 3347|  1.80k|  static inline const EnumType* internal_default_instance() {
 3348|  1.80k|    return reinterpret_cast<const EnumType*>(
 3349|  1.80k|               &_EnumType_default_instance_);
 3350|  1.80k|  }
_ZNK4cdef8EnumType3NewEPN6google8protobuf5ArenaE:
 3378|  1.80k|  EnumType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 3379|  1.80k|    return CreateMaybeMessage<EnumType>(arena);
 3380|  1.80k|  }
_ZNK4cdef15StaticAssertion3NewEPN6google8protobuf5ArenaE:
 3569|  28.1k|  StaticAssertion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 3570|  28.1k|    return CreateMaybeMessage<StaticAssertion>(arena);
 3571|  28.1k|  }
_ZN4cdef15StaticAssertion5Impl_22StaticAssertOneofUnionC2Ev:
 3698|  28.1k|      constexpr StaticAssertOneofUnion() : _constinit_{} {}
_ZNK4cdef17StructDeclaration3NewEPN6google8protobuf5ArenaE:
 3798|  35.1k|  StructDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 3799|  35.1k|    return CreateMaybeMessage<StructDeclaration>(arena);
 3800|  35.1k|  }
_ZN4cdef17StructDeclaration5Impl_20StructDeclOneofUnionC2Ev:
 3900|  35.1k|      constexpr StructDeclOneofUnion() : _constinit_{} {}
_ZNK4cdef21StructDeclarationList3NewEPN6google8protobuf5ArenaE:
 3995|  18.2k|  StructDeclarationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 3996|  18.2k|    return CreateMaybeMessage<StructDeclarationList>(arena);
 3997|  18.2k|  }
_ZN4cdef9UnionType25internal_default_instanceEv:
 4128|  46.9k|  static inline const UnionType* internal_default_instance() {
 4129|  46.9k|    return reinterpret_cast<const UnionType*>(
 4130|  46.9k|               &_UnionType_default_instance_);
 4131|  46.9k|  }
_ZNK4cdef9UnionType3NewEPN6google8protobuf5ArenaE:
 4159|  15.6k|  UnionType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 4160|  15.6k|    return CreateMaybeMessage<UnionType>(arena);
 4161|  15.6k|  }
_ZN4cdef10StructType25internal_default_instanceEv:
 4333|  7.75k|  static inline const StructType* internal_default_instance() {
 4334|  7.75k|    return reinterpret_cast<const StructType*>(
 4335|  7.75k|               &_StructType_default_instance_);
 4336|  7.75k|  }
_ZNK4cdef10StructType3NewEPN6google8protobuf5ArenaE:
 4364|  2.58k|  StructType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 4365|  2.58k|    return CreateMaybeMessage<StructType>(arena);
 4366|  2.58k|  }
_ZNK4cdef11TypedefType3NewEPN6google8protobuf5ArenaE:
 4568|  1.58k|  TypedefType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 4569|  1.58k|    return CreateMaybeMessage<TypedefType>(arena);
 4570|  1.58k|  }
_ZNK4cdef14ArithmeticType3NewEPN6google8protobuf5ArenaE:
 5182|  3.47k|  ArithmeticType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 5183|  3.47k|    return CreateMaybeMessage<ArithmeticType>(arena);
 5184|  3.47k|  }
_ZN4cdef14ArithmeticType5Impl_20ArithmeticOneofUnionC2Ev:
 5784|  3.47k|      constexpr ArithmeticOneofUnion() : _constinit_{} {}
_ZNK4cdef10AtomicType3NewEPN6google8protobuf5ArenaE:
 5913|  1.16k|  AtomicType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 5914|  1.16k|    return CreateMaybeMessage<AtomicType>(arena);
 5915|  1.16k|  }
_ZNK4cdef13TypeSpecifier3NewEPN6google8protobuf5ArenaE:
 6085|  32.2k|  TypeSpecifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 6086|  32.2k|    return CreateMaybeMessage<TypeSpecifier>(arena);
 6087|  32.2k|  }
_ZN4cdef13TypeSpecifier5Impl_23TypeSpecifierOneofUnionC2Ev:
 6302|  32.2k|      constexpr TypeSpecifierOneofUnion() : _constinit_{} {}
_ZNK4cdef13TypeQualifier3NewEPN6google8protobuf5ArenaE:
 6403|  4.31k|  TypeQualifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 6404|  4.31k|    return CreateMaybeMessage<TypeQualifier>(arena);
 6405|  4.31k|  }
_ZNK4cdef18AlignmentSpecifier3NewEPN6google8protobuf5ArenaE:
 6608|  4.68k|  AlignmentSpecifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 6609|  4.68k|    return CreateMaybeMessage<AlignmentSpecifier>(arena);
 6610|  4.68k|  }
_ZN4cdef14DeclaratorAttr25internal_default_instanceEv:
 6737|  8.87k|  static inline const DeclaratorAttr* internal_default_instance() {
 6738|  8.87k|    return reinterpret_cast<const DeclaratorAttr*>(
 6739|  8.87k|               &_DeclaratorAttr_default_instance_);
 6740|  8.87k|  }
_ZNK4cdef14DeclaratorAttr3NewEPN6google8protobuf5ArenaE:
 6768|  4.43k|  DeclaratorAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 6769|  4.43k|    return CreateMaybeMessage<DeclaratorAttr>(arena);
 6770|  4.43k|  }
_ZN4cdef21DeclaratorParentheses25internal_default_instanceEv:
 6922|  3.07k|  static inline const DeclaratorParentheses* internal_default_instance() {
 6923|  3.07k|    return reinterpret_cast<const DeclaratorParentheses*>(
 6924|  3.07k|               &_DeclaratorParentheses_default_instance_);
 6925|  3.07k|  }
_ZNK4cdef21DeclaratorParentheses3NewEPN6google8protobuf5ArenaE:
 6953|  3.07k|  DeclaratorParentheses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 6954|  3.07k|    return CreateMaybeMessage<DeclaratorParentheses>(arena);
 6955|  3.07k|  }
_ZNK4cdef10Declarator3NewEPN6google8protobuf5ArenaE:
 7127|  40.4k|  Declarator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 7128|  40.4k|    return CreateMaybeMessage<Declarator>(arena);
 7129|  40.4k|  }
_ZN4cdef10Declarator5Impl_20DeclaratorOneofUnionC2Ev:
 7289|  40.4k|      constexpr DeclaratorOneofUnion() : _constinit_{} {}
_ZNK4cdef11Initializer3NewEPN6google8protobuf5ArenaE:
 7386|  2.93k|  Initializer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 7387|  2.93k|    return CreateMaybeMessage<Initializer>(arena);
 7388|  2.93k|  }
_ZNK4cdef26DeclaratorsAndInitializers3NewEPN6google8protobuf5ArenaE:
 7512|  12.6k|  DeclaratorsAndInitializers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 7513|  12.6k|    return CreateMaybeMessage<DeclaratorsAndInitializers>(arena);
 7514|  12.6k|  }
_ZN4cdef21SpecifierAndQualifier25internal_default_instanceEv:
 7665|  74.5k|  static inline const SpecifierAndQualifier* internal_default_instance() {
 7666|  74.5k|    return reinterpret_cast<const SpecifierAndQualifier*>(
 7667|  74.5k|               &_SpecifierAndQualifier_default_instance_);
 7668|  74.5k|  }
_ZNK4cdef21SpecifierAndQualifier3NewEPN6google8protobuf5ArenaE:
 7696|  37.2k|  SpecifierAndQualifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 7697|  37.2k|    return CreateMaybeMessage<SpecifierAndQualifier>(arena);
 7698|  37.2k|  }
_ZNK4cdef27SpecifiersAndQualifiersList3NewEPN6google8protobuf5ArenaE:
 7881|  25.1k|  SpecifiersAndQualifiersList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 7882|  25.1k|    return CreateMaybeMessage<SpecifiersAndQualifiersList>(arena);
 7883|  25.1k|  }
_ZNK4cdef11AttrSpecSeq3NewEPN6google8protobuf5ArenaE:
 8045|  6.60k|  AttrSpecSeq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 8046|  6.60k|    return CreateMaybeMessage<AttrSpecSeq>(arena);
 8047|  6.60k|  }
_ZN4cdef11Declaration25internal_default_instanceEv:
 8309|  96.6k|  static inline const Declaration* internal_default_instance() {
 8310|  96.6k|    return reinterpret_cast<const Declaration*>(
 8311|  96.6k|               &_Declaration_default_instance_);
 8312|  96.6k|  }
_ZNK4cdef11Declaration3NewEPN6google8protobuf5ArenaE:
 8340|  32.2k|  Declaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
 8341|  32.2k|    return CreateMaybeMessage<Declaration>(arena);
 8342|  32.2k|  }
_ZNK4cdef10Identifier4nameEv:
 8649|  15.4k|inline const std::string& Identifier::name() const {
 8650|       |  // @@protoc_insertion_point(field_get:cdef.Identifier.name)
 8651|  15.4k|  return _internal_name();
 8652|  15.4k|}
_ZNK4cdef10Identifier14_internal_nameEv:
 8665|  15.4k|inline const std::string& Identifier::_internal_name() const {
 8666|  15.4k|  return _impl_.name_.Get();
 8667|  15.4k|}
_ZNK4cdef10Identifier13_internal_numEv:
 8717|  15.4k|inline int32_t Identifier::_internal_num() const {
 8718|  15.4k|  return _impl_.num_;
 8719|  15.4k|}
_ZNK4cdef10Identifier3numEv:
 8720|  15.4k|inline int32_t Identifier::num() const {
 8721|       |  // @@protoc_insertion_point(field_get:cdef.Identifier.num)
 8722|  15.4k|  return _internal_num();
 8723|  15.4k|}
_ZNK4cdef15IdentifiersList26_internal_identifiers_sizeEv:
 8738|  5.72k|inline int IdentifiersList::_internal_identifiers_size() const {
 8739|  5.72k|  return _impl_.identifiers_.size();
 8740|  5.72k|}
_ZNK4cdef15IdentifiersList16identifiers_sizeEv:
 8741|  5.72k|inline int IdentifiersList::identifiers_size() const {
 8742|  5.72k|  return _internal_identifiers_size();
 8743|  5.72k|}
_ZNK4cdef15IdentifiersList21_internal_identifiersEi:
 8756|  3.54k|inline const ::cdef::Identifier& IdentifiersList::_internal_identifiers(int index) const {
 8757|  3.54k|  return _impl_.identifiers_.Get(index);
 8758|  3.54k|}
_ZNK4cdef15IdentifiersList11identifiersEi:
 8759|  3.54k|inline const ::cdef::Identifier& IdentifiersList::identifiers(int index) const {
 8760|       |  // @@protoc_insertion_point(field_get:cdef.IdentifiersList.identifiers)
 8761|  3.54k|  return _internal_identifiers(index);
 8762|  3.54k|}
_ZNK4cdef9Parameter18_internal_has_nameEv:
 8782|  1.28k|inline bool Parameter::_internal_has_name() const {
 8783|  1.28k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
 8784|  1.28k|  PROTOBUF_ASSUME(!value || _impl_.name_ != nullptr);
  ------------------
  |  |  558|  1.28k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  1.28k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  1.28k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  2.57k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 1.28k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 1.28k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  2.57k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 0, False: 1.28k]
  |  |  |  Branch (559:20): [True: 1.28k, False: 0]
  |  |  ------------------
  ------------------
 8785|  1.28k|  return value;
 8786|  1.28k|}
_ZNK4cdef9Parameter14_internal_nameEv:
 8794|  1.28k|inline const ::cdef::Identifier& Parameter::_internal_name() const {
 8795|  1.28k|  const ::cdef::Identifier* p = _impl_.name_;
 8796|  1.28k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::Identifier&>(
  ------------------
  |  Branch (8796:10): [True: 1.28k, False: 0]
  ------------------
 8797|      0|      ::cdef::_Identifier_default_instance_);
 8798|  1.28k|}
_ZNK4cdef9Parameter4nameEv:
 8799|  1.28k|inline const ::cdef::Identifier& Parameter::name() const {
 8800|       |  // @@protoc_insertion_point(field_get:cdef.Parameter.name)
 8801|  1.28k|  return _internal_name();
 8802|  1.28k|}
_ZNK4cdef10Parameters25_internal_parameters_sizeEv:
 8876|  5.61k|inline int Parameters::_internal_parameters_size() const {
 8877|  5.61k|  return _impl_.parameters_.size();
 8878|  5.61k|}
_ZNK4cdef10Parameters15parameters_sizeEv:
 8879|  5.61k|inline int Parameters::parameters_size() const {
 8880|  5.61k|  return _internal_parameters_size();
 8881|  5.61k|}
_ZNK4cdef10Parameters20_internal_parametersEi:
 8894|  1.28k|inline const ::cdef::Parameter& Parameters::_internal_parameters(int index) const {
 8895|  1.28k|  return _impl_.parameters_.Get(index);
 8896|  1.28k|}
_ZNK4cdef10Parameters10parametersEi:
 8897|  1.28k|inline const ::cdef::Parameter& Parameters::parameters(int index) const {
 8898|       |  // @@protoc_insertion_point(field_get:cdef.Parameters.parameters)
 8899|  1.28k|  return _internal_parameters(index);
 8900|  1.28k|}
_ZNK4cdef14ParametersList24_internal_has_parametersEv:
 8958|  6.08k|inline bool ParametersList::_internal_has_parameters() const {
 8959|  6.08k|  return parameters_list_oneof_case() == kParameters;
 8960|  6.08k|}
_ZNK4cdef14ParametersList20_internal_parametersEv:
 8989|  3.04k|inline const ::cdef::Parameters& ParametersList::_internal_parameters() const {
 8990|  3.04k|  return _internal_has_parameters()
  ------------------
  |  Branch (8990:10): [True: 3.04k, False: 0]
  ------------------
 8991|  3.04k|      ? *_impl_.parameters_list_oneof_.parameters_
 8992|  3.04k|      : reinterpret_cast< ::cdef::Parameters&>(::cdef::_Parameters_default_instance_);
 8993|  3.04k|}
_ZNK4cdef14ParametersList10parametersEv:
 8994|  3.04k|inline const ::cdef::Parameters& ParametersList::parameters() const {
 8995|       |  // @@protoc_insertion_point(field_get:cdef.ParametersList.parameters)
 8996|  3.04k|  return _internal_parameters();
 8997|  3.04k|}
_ZNK4cdef14ParametersList22_internal_has_ellipsisEv:
 9032|  5.18k|inline bool ParametersList::_internal_has_ellipsis() const {
 9033|  5.18k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
 9034|  5.18k|  return value;
 9035|  5.18k|}
_ZNK4cdef14ParametersList12has_ellipsisEv:
 9036|  5.18k|inline bool ParametersList::has_ellipsis() const {
 9037|  5.18k|  return _internal_has_ellipsis();
 9038|  5.18k|}
_ZNK4cdef14ParametersList25has_parameters_list_oneofEv:
 9059|  5.18k|inline bool ParametersList::has_parameters_list_oneof() const {
 9060|  5.18k|  return parameters_list_oneof_case() != PARAMETERS_LIST_ONEOF_NOT_SET;
 9061|  5.18k|}
_ZN4cdef14ParametersList31clear_has_parameters_list_oneofEv:
 9062|  5.18k|inline void ParametersList::clear_has_parameters_list_oneof() {
 9063|  5.18k|  _impl_._oneof_case_[0] = PARAMETERS_LIST_ONEOF_NOT_SET;
 9064|  5.18k|}
_ZNK4cdef14ParametersList26parameters_list_oneof_caseEv:
 9065|  25.4k|inline ParametersList::ParametersListOneofCase ParametersList::parameters_list_oneof_case() const {
 9066|  25.4k|  return ParametersList::ParametersListOneofCase(_impl_._oneof_case_[0]);
 9067|  25.4k|}
_ZNK4cdef9Specifier28_internal_has_type_specifierEv:
 9073|  64.4k|inline bool Specifier::_internal_has_type_specifier() const {
 9074|  64.4k|  return specifier_oneof_case() == kTypeSpecifier;
 9075|  64.4k|}
_ZNK4cdef9Specifier24_internal_type_specifierEv:
 9104|  32.2k|inline const ::cdef::TypeSpecifier& Specifier::_internal_type_specifier() const {
 9105|  32.2k|  return _internal_has_type_specifier()
  ------------------
  |  Branch (9105:10): [True: 32.2k, False: 0]
  ------------------
 9106|  32.2k|      ? *_impl_.specifier_oneof_.type_specifier_
 9107|  32.2k|      : reinterpret_cast< ::cdef::TypeSpecifier&>(::cdef::_TypeSpecifier_default_instance_);
 9108|  32.2k|}
_ZNK4cdef9Specifier14type_specifierEv:
 9109|  32.2k|inline const ::cdef::TypeSpecifier& Specifier::type_specifier() const {
 9110|       |  // @@protoc_insertion_point(field_get:cdef.Specifier.type_specifier)
 9111|  32.2k|  return _internal_type_specifier();
 9112|  32.2k|}
_ZNK4cdef9Specifier37_internal_has_storage_class_specifierEv:
 9147|  3.60k|inline bool Specifier::_internal_has_storage_class_specifier() const {
 9148|  3.60k|  return specifier_oneof_case() == kStorageClassSpecifier;
 9149|  3.60k|}
_ZNK4cdef9Specifier33_internal_storage_class_specifierEv:
 9178|  3.60k|inline const ::cdef::StorageClassSpecifier& Specifier::_internal_storage_class_specifier() const {
 9179|  3.60k|  return _internal_has_storage_class_specifier()
  ------------------
  |  Branch (9179:10): [True: 3.60k, False: 0]
  ------------------
 9180|  3.60k|      ? *_impl_.specifier_oneof_.storage_class_specifier_
 9181|  3.60k|      : reinterpret_cast< ::cdef::StorageClassSpecifier&>(::cdef::_StorageClassSpecifier_default_instance_);
 9182|  3.60k|}
_ZNK4cdef9Specifier23storage_class_specifierEv:
 9183|  3.60k|inline const ::cdef::StorageClassSpecifier& Specifier::storage_class_specifier() const {
 9184|       |  // @@protoc_insertion_point(field_get:cdef.Specifier.storage_class_specifier)
 9185|  3.60k|  return _internal_storage_class_specifier();
 9186|  3.60k|}
_ZNK4cdef9Specifier32_internal_has_function_specifierEv:
 9221|  3.37k|inline bool Specifier::_internal_has_function_specifier() const {
 9222|  3.37k|  return specifier_oneof_case() == kFunctionSpecifier;
 9223|  3.37k|}
_ZNK4cdef9Specifier28_internal_function_specifierEv:
 9252|  3.37k|inline const ::cdef::FunctionSpecifier& Specifier::_internal_function_specifier() const {
 9253|  3.37k|  return _internal_has_function_specifier()
  ------------------
  |  Branch (9253:10): [True: 3.37k, False: 0]
  ------------------
 9254|  3.37k|      ? *_impl_.specifier_oneof_.function_specifier_
 9255|  3.37k|      : reinterpret_cast< ::cdef::FunctionSpecifier&>(::cdef::_FunctionSpecifier_default_instance_);
 9256|  3.37k|}
_ZNK4cdef9Specifier18function_specifierEv:
 9257|  3.37k|inline const ::cdef::FunctionSpecifier& Specifier::function_specifier() const {
 9258|       |  // @@protoc_insertion_point(field_get:cdef.Specifier.function_specifier)
 9259|  3.37k|  return _internal_function_specifier();
 9260|  3.37k|}
_ZNK4cdef9Specifier33_internal_has_alignment_specifierEv:
 9295|  4.68k|inline bool Specifier::_internal_has_alignment_specifier() const {
 9296|  4.68k|  return specifier_oneof_case() == kAlignmentSpecifier;
 9297|  4.68k|}
_ZNK4cdef9Specifier29_internal_alignment_specifierEv:
 9326|  4.68k|inline const ::cdef::AlignmentSpecifier& Specifier::_internal_alignment_specifier() const {
 9327|  4.68k|  return _internal_has_alignment_specifier()
  ------------------
  |  Branch (9327:10): [True: 4.68k, False: 0]
  ------------------
 9328|  4.68k|      ? *_impl_.specifier_oneof_.alignment_specifier_
 9329|  4.68k|      : reinterpret_cast< ::cdef::AlignmentSpecifier&>(::cdef::_AlignmentSpecifier_default_instance_);
 9330|  4.68k|}
_ZNK4cdef9Specifier19alignment_specifierEv:
 9331|  4.68k|inline const ::cdef::AlignmentSpecifier& Specifier::alignment_specifier() const {
 9332|       |  // @@protoc_insertion_point(field_get:cdef.Specifier.alignment_specifier)
 9333|  4.68k|  return _internal_alignment_specifier();
 9334|  4.68k|}
_ZNK4cdef9Specifier19has_specifier_oneofEv:
 9368|  53.3k|inline bool Specifier::has_specifier_oneof() const {
 9369|  53.3k|  return specifier_oneof_case() != SPECIFIER_ONEOF_NOT_SET;
 9370|  53.3k|}
_ZN4cdef9Specifier25clear_has_specifier_oneofEv:
 9371|  53.3k|inline void Specifier::clear_has_specifier_oneof() {
 9372|  53.3k|  _impl_._oneof_case_[0] = SPECIFIER_ONEOF_NOT_SET;
 9373|  53.3k|}
_ZNK4cdef9Specifier20specifier_oneof_caseEv:
 9374|   280k|inline Specifier::SpecifierOneofCase Specifier::specifier_oneof_case() const {
 9375|   280k|  return Specifier::SpecifierOneofCase(_impl_._oneof_case_[0]);
 9376|   280k|}
_ZNK4cdef14SpecifiersList30_internal_specifiers_list_sizeEv:
 9382|  84.3k|inline int SpecifiersList::_internal_specifiers_list_size() const {
 9383|  84.3k|  return _impl_.specifiers_list_.size();
 9384|  84.3k|}
_ZNK4cdef14SpecifiersList20specifiers_list_sizeEv:
 9385|  84.3k|inline int SpecifiersList::specifiers_list_size() const {
 9386|  84.3k|  return _internal_specifiers_list_size();
 9387|  84.3k|}
_ZNK4cdef14SpecifiersList25_internal_specifiers_listEi:
 9400|  53.3k|inline const ::cdef::Specifier& SpecifiersList::_internal_specifiers_list(int index) const {
 9401|  53.3k|  return _impl_.specifiers_list_.Get(index);
 9402|  53.3k|}
_ZNK4cdef14SpecifiersList15specifiers_listEi:
 9403|  53.3k|inline const ::cdef::Specifier& SpecifiersList::specifiers_list(int index) const {
 9404|       |  // @@protoc_insertion_point(field_get:cdef.SpecifiersList.specifiers_list)
 9405|  53.3k|  return _internal_specifiers_list(index);
 9406|  53.3k|}
_ZNK4cdef9Qualifier28_internal_has_type_qualifierEv:
 9426|  8.20k|inline bool Qualifier::_internal_has_type_qualifier() const {
 9427|  8.20k|  return qualifier_oneof_case() == kTypeQualifier;
 9428|  8.20k|}
_ZNK4cdef9Qualifier24_internal_type_qualifierEv:
 9457|  8.20k|inline const ::cdef::TypeQualifier& Qualifier::_internal_type_qualifier() const {
 9458|  8.20k|  return _internal_has_type_qualifier()
  ------------------
  |  Branch (9458:10): [True: 8.20k, False: 0]
  ------------------
 9459|  8.20k|      ? *_impl_.qualifier_oneof_.type_qualifier_
 9460|  8.20k|      : reinterpret_cast< ::cdef::TypeQualifier&>(::cdef::_TypeQualifier_default_instance_);
 9461|  8.20k|}
_ZNK4cdef9Qualifier14type_qualifierEv:
 9462|  8.20k|inline const ::cdef::TypeQualifier& Qualifier::type_qualifier() const {
 9463|       |  // @@protoc_insertion_point(field_get:cdef.Qualifier.type_qualifier)
 9464|  8.20k|  return _internal_type_qualifier();
 9465|  8.20k|}
_ZNK4cdef9Qualifier19has_qualifier_oneofEv:
 9499|  7.05k|inline bool Qualifier::has_qualifier_oneof() const {
 9500|  7.05k|  return qualifier_oneof_case() != QUALIFIER_ONEOF_NOT_SET;
 9501|  7.05k|}
_ZN4cdef9Qualifier25clear_has_qualifier_oneofEv:
 9502|  7.05k|inline void Qualifier::clear_has_qualifier_oneof() {
 9503|  7.05k|  _impl_._oneof_case_[0] = QUALIFIER_ONEOF_NOT_SET;
 9504|  7.05k|}
_ZNK4cdef9Qualifier20qualifier_oneof_caseEv:
 9505|  30.5k|inline Qualifier::QualifierOneofCase Qualifier::qualifier_oneof_case() const {
 9506|  30.5k|  return Qualifier::QualifierOneofCase(_impl_._oneof_case_[0]);
 9507|  30.5k|}
_ZNK4cdef14QualifiersList30_internal_qualifiers_list_sizeEv:
 9513|  17.9k|inline int QualifiersList::_internal_qualifiers_list_size() const {
 9514|  17.9k|  return _impl_.qualifiers_list_.size();
 9515|  17.9k|}
_ZNK4cdef14QualifiersList20qualifiers_list_sizeEv:
 9516|  17.9k|inline int QualifiersList::qualifiers_list_size() const {
 9517|  17.9k|  return _internal_qualifiers_list_size();
 9518|  17.9k|}
_ZNK4cdef14QualifiersList25_internal_qualifiers_listEi:
 9531|  10.9k|inline const ::cdef::Qualifier& QualifiersList::_internal_qualifiers_list(int index) const {
 9532|  10.9k|  return _impl_.qualifiers_list_.Get(index);
 9533|  10.9k|}
_ZNK4cdef14QualifiersList15qualifiers_listEi:
 9534|  10.9k|inline const ::cdef::Qualifier& QualifiersList::qualifiers_list(int index) const {
 9535|       |  // @@protoc_insertion_point(field_get:cdef.QualifiersList.qualifiers_list)
 9536|  10.9k|  return _internal_qualifiers_list(index);
 9537|  10.9k|}
_ZNK4cdef8Bitfield18_internal_has_nameEv:
 9557|  6.49k|inline bool Bitfield::_internal_has_name() const {
 9558|  6.49k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
 9559|  6.49k|  PROTOBUF_ASSUME(!value || _impl_.name_ != nullptr);
  ------------------
  |  |  558|  6.49k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  6.49k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  6.49k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  8.07k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 4.91k, False: 1.57k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 1.57k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  8.07k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 4.91k, False: 1.57k]
  |  |  |  Branch (559:20): [True: 1.57k, False: 0]
  |  |  ------------------
  ------------------
 9560|  6.49k|  return value;
 9561|  6.49k|}
_ZNK4cdef8Bitfield8has_nameEv:
 9562|  3.24k|inline bool Bitfield::has_name() const {
 9563|  3.24k|  return _internal_has_name();
 9564|  3.24k|}
_ZNK4cdef8Bitfield14_internal_nameEv:
 9569|    789|inline const ::cdef::Identifier& Bitfield::_internal_name() const {
 9570|    789|  const ::cdef::Identifier* p = _impl_.name_;
 9571|    789|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::Identifier&>(
  ------------------
  |  Branch (9571:10): [True: 789, False: 0]
  ------------------
 9572|      0|      ::cdef::_Identifier_default_instance_);
 9573|    789|}
_ZNK4cdef8Bitfield4nameEv:
 9574|    789|inline const ::cdef::Identifier& Bitfield::name() const {
 9575|       |  // @@protoc_insertion_point(field_get:cdef.Bitfield.name)
 9576|    789|  return _internal_name();
 9577|    789|}
_ZNK4cdef8Bitfield15_internal_widthEv:
 9658|  3.24k|inline uint32_t Bitfield::_internal_width() const {
 9659|  3.24k|  return _impl_.width_;
 9660|  3.24k|}
_ZNK4cdef8Bitfield5widthEv:
 9661|  3.24k|inline uint32_t Bitfield::width() const {
 9662|       |  // @@protoc_insertion_point(field_get:cdef.Bitfield.width)
 9663|  3.24k|  return _internal_width();
 9664|  3.24k|}
_ZNK4cdef18FunctionDeclarator30_internal_has_noptr_declaratorEv:
 9679|  9.79k|inline bool FunctionDeclarator::_internal_has_noptr_declarator() const {
 9680|  9.79k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
 9681|  9.79k|  PROTOBUF_ASSUME(!value || _impl_.noptr_declarator_ != nullptr);
  ------------------
  |  |  558|  9.79k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  9.79k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  9.79k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  19.5k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 9.79k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 9.79k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  19.5k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 0, False: 9.79k]
  |  |  |  Branch (559:20): [True: 9.79k, False: 0]
  |  |  ------------------
  ------------------
 9682|  9.79k|  return value;
 9683|  9.79k|}
_ZNK4cdef18FunctionDeclarator26_internal_noptr_declaratorEv:
 9691|  9.79k|inline const ::cdef::Declarator& FunctionDeclarator::_internal_noptr_declarator() const {
 9692|  9.79k|  const ::cdef::Declarator* p = _impl_.noptr_declarator_;
 9693|  9.79k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::Declarator&>(
  ------------------
  |  Branch (9693:10): [True: 9.79k, False: 0]
  ------------------
 9694|      0|      ::cdef::_Declarator_default_instance_);
 9695|  9.79k|}
_ZNK4cdef18FunctionDeclarator16noptr_declaratorEv:
 9696|  9.79k|inline const ::cdef::Declarator& FunctionDeclarator::noptr_declarator() const {
 9697|       |  // @@protoc_insertion_point(field_get:cdef.FunctionDeclarator.noptr_declarator)
 9698|  9.79k|  return _internal_noptr_declarator();
 9699|  9.79k|}
_ZNK4cdef18FunctionDeclarator29_internal_has_parameters_listEv:
 9769|  10.3k|inline bool FunctionDeclarator::_internal_has_parameters_list() const {
 9770|  10.3k|  return parentheses_content_oneof_case() == kParametersList;
 9771|  10.3k|}
_ZNK4cdef18FunctionDeclarator25_internal_parameters_listEv:
 9800|  5.18k|inline const ::cdef::ParametersList& FunctionDeclarator::_internal_parameters_list() const {
 9801|  5.18k|  return _internal_has_parameters_list()
  ------------------
  |  Branch (9801:10): [True: 5.18k, False: 0]
  ------------------
 9802|  5.18k|      ? *_impl_.parentheses_content_oneof_.parameters_list_
 9803|  5.18k|      : reinterpret_cast< ::cdef::ParametersList&>(::cdef::_ParametersList_default_instance_);
 9804|  5.18k|}
_ZNK4cdef18FunctionDeclarator15parameters_listEv:
 9805|  5.18k|inline const ::cdef::ParametersList& FunctionDeclarator::parameters_list() const {
 9806|       |  // @@protoc_insertion_point(field_get:cdef.FunctionDeclarator.parameters_list)
 9807|  5.18k|  return _internal_parameters_list();
 9808|  5.18k|}
_ZNK4cdef18FunctionDeclarator30_internal_has_identifiers_listEv:
 9843|  4.36k|inline bool FunctionDeclarator::_internal_has_identifiers_list() const {
 9844|  4.36k|  return parentheses_content_oneof_case() == kIdentifiersList;
 9845|  4.36k|}
_ZNK4cdef18FunctionDeclarator26_internal_identifiers_listEv:
 9874|  2.18k|inline const ::cdef::IdentifiersList& FunctionDeclarator::_internal_identifiers_list() const {
 9875|  2.18k|  return _internal_has_identifiers_list()
  ------------------
  |  Branch (9875:10): [True: 2.18k, False: 0]
  ------------------
 9876|  2.18k|      ? *_impl_.parentheses_content_oneof_.identifiers_list_
 9877|  2.18k|      : reinterpret_cast< ::cdef::IdentifiersList&>(::cdef::_IdentifiersList_default_instance_);
 9878|  2.18k|}
_ZNK4cdef18FunctionDeclarator16identifiers_listEv:
 9879|  2.18k|inline const ::cdef::IdentifiersList& FunctionDeclarator::identifiers_list() const {
 9880|       |  // @@protoc_insertion_point(field_get:cdef.FunctionDeclarator.identifiers_list)
 9881|  2.18k|  return _internal_identifiers_list();
 9882|  2.18k|}
_ZNK4cdef18FunctionDeclarator27_internal_has_attr_spec_seqEv:
 9917|  9.79k|inline bool FunctionDeclarator::_internal_has_attr_spec_seq() const {
 9918|  9.79k|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
 9919|  9.79k|  PROTOBUF_ASSUME(!value || _impl_.attr_spec_seq_ != nullptr);
  ------------------
  |  |  558|  9.79k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  9.79k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  9.79k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  10.5k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 9.09k, False: 707]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 707, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  10.5k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 9.09k, False: 707]
  |  |  |  Branch (559:20): [True: 707, False: 0]
  |  |  ------------------
  ------------------
 9920|  9.79k|  return value;
 9921|  9.79k|}
_ZNK4cdef18FunctionDeclarator17has_attr_spec_seqEv:
 9922|  9.79k|inline bool FunctionDeclarator::has_attr_spec_seq() const {
 9923|  9.79k|  return _internal_has_attr_spec_seq();
 9924|  9.79k|}
_ZNK4cdef18FunctionDeclarator23_internal_attr_spec_seqEv:
 9929|    707|inline const ::cdef::AttrSpecSeq& FunctionDeclarator::_internal_attr_spec_seq() const {
 9930|    707|  const ::cdef::AttrSpecSeq* p = _impl_.attr_spec_seq_;
 9931|    707|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::AttrSpecSeq&>(
  ------------------
  |  Branch (9931:10): [True: 707, False: 0]
  ------------------
 9932|      0|      ::cdef::_AttrSpecSeq_default_instance_);
 9933|    707|}
_ZNK4cdef18FunctionDeclarator13attr_spec_seqEv:
 9934|    707|inline const ::cdef::AttrSpecSeq& FunctionDeclarator::attr_spec_seq() const {
 9935|       |  // @@protoc_insertion_point(field_get:cdef.FunctionDeclarator.attr_spec_seq)
 9936|    707|  return _internal_attr_spec_seq();
 9937|    707|}
_ZNK4cdef18FunctionDeclarator29has_parentheses_content_oneofEv:
10006|  9.79k|inline bool FunctionDeclarator::has_parentheses_content_oneof() const {
10007|  9.79k|  return parentheses_content_oneof_case() != PARENTHESES_CONTENT_ONEOF_NOT_SET;
10008|  9.79k|}
_ZN4cdef18FunctionDeclarator35clear_has_parentheses_content_oneofEv:
10009|  9.79k|inline void FunctionDeclarator::clear_has_parentheses_content_oneof() {
10010|  9.79k|  _impl_._oneof_case_[0] = PARENTHESES_CONTENT_ONEOF_NOT_SET;
10011|  9.79k|}
_ZNK4cdef18FunctionDeclarator30parentheses_content_oneof_caseEv:
10012|  51.4k|inline FunctionDeclarator::ParenthesesContentOneofCase FunctionDeclarator::parentheses_content_oneof_case() const {
10013|  51.4k|  return FunctionDeclarator::ParenthesesContentOneofCase(_impl_._oneof_case_[0]);
10014|  51.4k|}
_ZNK4cdef17PointerDeclarator27_internal_has_attr_spec_seqEv:
10020|  4.33k|inline bool PointerDeclarator::_internal_has_attr_spec_seq() const {
10021|  4.33k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
10022|  4.33k|  PROTOBUF_ASSUME(!value || _impl_.attr_spec_seq_ != nullptr);
  ------------------
  |  |  558|  4.33k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  4.33k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  4.33k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  5.06k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 3.61k, False: 724]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 724, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  5.06k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 3.61k, False: 724]
  |  |  |  Branch (559:20): [True: 724, False: 0]
  |  |  ------------------
  ------------------
10023|  4.33k|  return value;
10024|  4.33k|}
_ZNK4cdef17PointerDeclarator17has_attr_spec_seqEv:
10025|  4.33k|inline bool PointerDeclarator::has_attr_spec_seq() const {
10026|  4.33k|  return _internal_has_attr_spec_seq();
10027|  4.33k|}
_ZNK4cdef17PointerDeclarator23_internal_attr_spec_seqEv:
10032|    724|inline const ::cdef::AttrSpecSeq& PointerDeclarator::_internal_attr_spec_seq() const {
10033|    724|  const ::cdef::AttrSpecSeq* p = _impl_.attr_spec_seq_;
10034|    724|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::AttrSpecSeq&>(
  ------------------
  |  Branch (10034:10): [True: 724, False: 0]
  ------------------
10035|      0|      ::cdef::_AttrSpecSeq_default_instance_);
10036|    724|}
_ZNK4cdef17PointerDeclarator13attr_spec_seqEv:
10037|    724|inline const ::cdef::AttrSpecSeq& PointerDeclarator::attr_spec_seq() const {
10038|       |  // @@protoc_insertion_point(field_get:cdef.PointerDeclarator.attr_spec_seq)
10039|    724|  return _internal_attr_spec_seq();
10040|    724|}
_ZNK4cdef17PointerDeclarator29_internal_has_qualifiers_listEv:
10110|  4.33k|inline bool PointerDeclarator::_internal_has_qualifiers_list() const {
10111|  4.33k|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
10112|  4.33k|  PROTOBUF_ASSUME(!value || _impl_.qualifiers_list_ != nullptr);
  ------------------
  |  |  558|  4.33k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  4.33k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  4.33k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  5.85k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 2.82k, False: 1.51k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 1.51k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  5.85k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 2.82k, False: 1.51k]
  |  |  |  Branch (559:20): [True: 1.51k, False: 0]
  |  |  ------------------
  ------------------
10113|  4.33k|  return value;
10114|  4.33k|}
_ZNK4cdef17PointerDeclarator19has_qualifiers_listEv:
10115|  4.33k|inline bool PointerDeclarator::has_qualifiers_list() const {
10116|  4.33k|  return _internal_has_qualifiers_list();
10117|  4.33k|}
_ZNK4cdef17PointerDeclarator25_internal_qualifiers_listEv:
10122|  1.51k|inline const ::cdef::QualifiersList& PointerDeclarator::_internal_qualifiers_list() const {
10123|  1.51k|  const ::cdef::QualifiersList* p = _impl_.qualifiers_list_;
10124|  1.51k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::QualifiersList&>(
  ------------------
  |  Branch (10124:10): [True: 1.51k, False: 0]
  ------------------
10125|      0|      ::cdef::_QualifiersList_default_instance_);
10126|  1.51k|}
_ZNK4cdef17PointerDeclarator15qualifiers_listEv:
10127|  1.51k|inline const ::cdef::QualifiersList& PointerDeclarator::qualifiers_list() const {
10128|       |  // @@protoc_insertion_point(field_get:cdef.PointerDeclarator.qualifiers_list)
10129|  1.51k|  return _internal_qualifiers_list();
10130|  1.51k|}
_ZNK4cdef17PointerDeclarator24_internal_has_declaratorEv:
10200|  4.33k|inline bool PointerDeclarator::_internal_has_declarator() const {
10201|  4.33k|  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
10202|  4.33k|  PROTOBUF_ASSUME(!value || _impl_.declarator_ != nullptr);
  ------------------
  |  |  558|  4.33k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  4.33k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  4.33k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  8.67k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 4.33k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 4.33k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  8.67k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 0, False: 4.33k]
  |  |  |  Branch (559:20): [True: 4.33k, False: 0]
  |  |  ------------------
  ------------------
10203|  4.33k|  return value;
10204|  4.33k|}
_ZNK4cdef17PointerDeclarator20_internal_declaratorEv:
10212|  4.33k|inline const ::cdef::Declarator& PointerDeclarator::_internal_declarator() const {
10213|  4.33k|  const ::cdef::Declarator* p = _impl_.declarator_;
10214|  4.33k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::Declarator&>(
  ------------------
  |  Branch (10214:10): [True: 4.33k, False: 0]
  ------------------
10215|      0|      ::cdef::_Declarator_default_instance_);
10216|  4.33k|}
_ZNK4cdef17PointerDeclarator10declaratorEv:
10217|  4.33k|inline const ::cdef::Declarator& PointerDeclarator::declarator() const {
10218|       |  // @@protoc_insertion_point(field_get:cdef.PointerDeclarator.declarator)
10219|  4.33k|  return _internal_declarator();
10220|  4.33k|}
_ZNK4cdef15ArrayDeclarator28_internal_has_keyword_staticEv:
10294|  5.24k|inline bool ArrayDeclarator::_internal_has_keyword_static() const {
10295|  5.24k|  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
10296|  5.24k|  return value;
10297|  5.24k|}
_ZNK4cdef15ArrayDeclarator18has_keyword_staticEv:
10298|  5.24k|inline bool ArrayDeclarator::has_keyword_static() const {
10299|  5.24k|  return _internal_has_keyword_static();
10300|  5.24k|}
_ZNK4cdef15ArrayDeclarator29_internal_has_qualifiers_listEv:
10322|  5.99k|inline bool ArrayDeclarator::_internal_has_qualifiers_list() const {
10323|  5.99k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
10324|  5.99k|  PROTOBUF_ASSUME(!value || _impl_.qualifiers_list_ != nullptr);
  ------------------
  |  |  558|  5.99k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  5.99k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  5.99k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  8.48k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 3.50k, False: 2.48k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 2.48k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  8.48k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 3.50k, False: 2.48k]
  |  |  |  Branch (559:20): [True: 2.48k, False: 0]
  |  |  ------------------
  ------------------
10325|  5.99k|  return value;
10326|  5.99k|}
_ZNK4cdef15ArrayDeclarator19has_qualifiers_listEv:
10327|  5.99k|inline bool ArrayDeclarator::has_qualifiers_list() const {
10328|  5.99k|  return _internal_has_qualifiers_list();
10329|  5.99k|}
_ZNK4cdef15ArrayDeclarator25_internal_qualifiers_listEv:
10334|  2.22k|inline const ::cdef::QualifiersList& ArrayDeclarator::_internal_qualifiers_list() const {
10335|  2.22k|  const ::cdef::QualifiersList* p = _impl_.qualifiers_list_;
10336|  2.22k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::QualifiersList&>(
  ------------------
  |  Branch (10336:10): [True: 2.22k, False: 0]
  ------------------
10337|      0|      ::cdef::_QualifiersList_default_instance_);
10338|  2.22k|}
_ZNK4cdef15ArrayDeclarator15qualifiers_listEv:
10339|  2.22k|inline const ::cdef::QualifiersList& ArrayDeclarator::qualifiers_list() const {
10340|       |  // @@protoc_insertion_point(field_get:cdef.ArrayDeclarator.qualifiers_list)
10341|  2.22k|  return _internal_qualifiers_list();
10342|  2.22k|}
_ZNK4cdef15ArrayDeclarator24_internal_has_expressionEv:
10412|  1.08k|inline bool ArrayDeclarator::_internal_has_expression() const {
10413|  1.08k|  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
10414|  1.08k|  return value;
10415|  1.08k|}
_ZNK4cdef15ArrayDeclarator14has_expressionEv:
10416|  1.08k|inline bool ArrayDeclarator::has_expression() const {
10417|  1.08k|  return _internal_has_expression();
10418|  1.08k|}
_ZNK4cdef15ArrayDeclarator20_internal_expressionEv:
10423|    824|inline uint32_t ArrayDeclarator::_internal_expression() const {
10424|    824|  return _impl_.expression_;
10425|    824|}
_ZNK4cdef15ArrayDeclarator10expressionEv:
10426|    824|inline uint32_t ArrayDeclarator::expression() const {
10427|       |  // @@protoc_insertion_point(field_get:cdef.ArrayDeclarator.expression)
10428|    824|  return _internal_expression();
10429|    824|}
_ZNK4cdef15ArrayDeclarator27_internal_has_attr_spec_seqEv:
10440|  2.22k|inline bool ArrayDeclarator::_internal_has_attr_spec_seq() const {
10441|  2.22k|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
10442|  2.22k|  PROTOBUF_ASSUME(!value || _impl_.attr_spec_seq_ != nullptr);
  ------------------
  |  |  558|  2.22k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  2.22k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  2.22k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  2.32k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 2.12k, False: 103]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 103, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  2.32k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 2.12k, False: 103]
  |  |  |  Branch (559:20): [True: 103, False: 0]
  |  |  ------------------
  ------------------
10443|  2.22k|  return value;
10444|  2.22k|}
_ZNK4cdef15ArrayDeclarator17has_attr_spec_seqEv:
10445|  2.22k|inline bool ArrayDeclarator::has_attr_spec_seq() const {
10446|  2.22k|  return _internal_has_attr_spec_seq();
10447|  2.22k|}
_ZNK4cdef15ArrayDeclarator23_internal_attr_spec_seqEv:
10452|    103|inline const ::cdef::AttrSpecSeq& ArrayDeclarator::_internal_attr_spec_seq() const {
10453|    103|  const ::cdef::AttrSpecSeq* p = _impl_.attr_spec_seq_;
10454|    103|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::AttrSpecSeq&>(
  ------------------
  |  Branch (10454:10): [True: 103, False: 0]
  ------------------
10455|      0|      ::cdef::_AttrSpecSeq_default_instance_);
10456|    103|}
_ZNK4cdef15ArrayDeclarator13attr_spec_seqEv:
10457|    103|inline const ::cdef::AttrSpecSeq& ArrayDeclarator::attr_spec_seq() const {
10458|       |  // @@protoc_insertion_point(field_get:cdef.ArrayDeclarator.attr_spec_seq)
10459|    103|  return _internal_attr_spec_seq();
10460|    103|}
_ZNK4cdef17FunctionSpecifier28_internal_has_keyword_inlineEv:
10534|  3.37k|inline bool FunctionSpecifier::_internal_has_keyword_inline() const {
10535|  3.37k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
10536|  3.37k|  return value;
10537|  3.37k|}
_ZNK4cdef17FunctionSpecifier18has_keyword_inlineEv:
10538|  3.37k|inline bool FunctionSpecifier::has_keyword_inline() const {
10539|  3.37k|  return _internal_has_keyword_inline();
10540|  3.37k|}
_ZNK4cdef17FunctionSpecifier30_internal_has_keyword_noreturnEv:
10562|  3.37k|inline bool FunctionSpecifier::_internal_has_keyword_noreturn() const {
10563|  3.37k|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
10564|  3.37k|  return value;
10565|  3.37k|}
_ZNK4cdef17FunctionSpecifier20has_keyword_noreturnEv:
10566|  3.37k|inline bool FunctionSpecifier::has_keyword_noreturn() const {
10567|  3.37k|  return _internal_has_keyword_noreturn();
10568|  3.37k|}
_ZNK4cdef21StorageClassSpecifier33has_storage_class_specifier_oneofEv:
10897|  3.60k|inline bool StorageClassSpecifier::has_storage_class_specifier_oneof() const {
10898|  3.60k|  return storage_class_specifier_oneof_case() != STORAGE_CLASS_SPECIFIER_ONEOF_NOT_SET;
10899|  3.60k|}
_ZN4cdef21StorageClassSpecifier39clear_has_storage_class_specifier_oneofEv:
10900|  3.60k|inline void StorageClassSpecifier::clear_has_storage_class_specifier_oneof() {
10901|  3.60k|  _impl_._oneof_case_[0] = STORAGE_CLASS_SPECIFIER_ONEOF_NOT_SET;
10902|  3.60k|}
_ZNK4cdef21StorageClassSpecifier34storage_class_specifier_oneof_caseEv:
10903|  8.93k|inline StorageClassSpecifier::StorageClassSpecifierOneofCase StorageClassSpecifier::storage_class_specifier_oneof_case() const {
10904|  8.93k|  return StorageClassSpecifier::StorageClassSpecifierOneofCase(_impl_._oneof_case_[0]);
10905|  8.93k|}
_ZNK4cdef8EnumType23_internal_has_enum_nameEv:
10915|  1.80k|inline bool EnumType::_internal_has_enum_name() const {
10916|  1.80k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
10917|  1.80k|  PROTOBUF_ASSUME(!value || _impl_.enum_name_ != nullptr);
  ------------------
  |  |  558|  1.80k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  1.80k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  1.80k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  3.60k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 1.80k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 1.80k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  3.60k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 0, False: 1.80k]
  |  |  |  Branch (559:20): [True: 1.80k, False: 0]
  |  |  ------------------
  ------------------
10918|  1.80k|  return value;
10919|  1.80k|}
_ZNK4cdef8EnumType19_internal_enum_nameEv:
10927|  1.80k|inline const ::cdef::Identifier& EnumType::_internal_enum_name() const {
10928|  1.80k|  const ::cdef::Identifier* p = _impl_.enum_name_;
10929|  1.80k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::Identifier&>(
  ------------------
  |  Branch (10929:10): [True: 1.80k, False: 0]
  ------------------
10930|      0|      ::cdef::_Identifier_default_instance_);
10931|  1.80k|}
_ZNK4cdef8EnumType9enum_nameEv:
10932|  1.80k|inline const ::cdef::Identifier& EnumType::enum_name() const {
10933|       |  // @@protoc_insertion_point(field_get:cdef.EnumType.enum_name)
10934|  1.80k|  return _internal_enum_name();
10935|  1.80k|}
_ZNK4cdef8EnumType23_internal_constant_sizeEv:
11005|  6.54k|inline int EnumType::_internal_constant_size() const {
11006|  6.54k|  return _impl_.constant_.size();
11007|  6.54k|}
_ZNK4cdef8EnumType13constant_sizeEv:
11008|  6.54k|inline int EnumType::constant_size() const {
11009|  6.54k|  return _internal_constant_size();
11010|  6.54k|}
_ZNK4cdef8EnumType18_internal_constantEi:
11023|  2.37k|inline const ::cdef::Identifier& EnumType::_internal_constant(int index) const {
11024|  2.37k|  return _impl_.constant_.Get(index);
11025|  2.37k|}
_ZNK4cdef8EnumType8constantEi:
11026|  2.37k|inline const ::cdef::Identifier& EnumType::constant(int index) const {
11027|       |  // @@protoc_insertion_point(field_get:cdef.EnumType.constant)
11028|  2.37k|  return _internal_constant(index);
11029|  2.37k|}
_ZNK4cdef15StaticAssertion20_internal_expressionEv:
11136|  27.0k|inline uint32_t StaticAssertion::_internal_expression() const {
11137|  27.0k|  return _impl_.expression_;
11138|  27.0k|}
_ZNK4cdef15StaticAssertion10expressionEv:
11139|  27.0k|inline uint32_t StaticAssertion::expression() const {
11140|       |  // @@protoc_insertion_point(field_get:cdef.StaticAssertion.expression)
11141|  27.0k|  return _internal_expression();
11142|  27.0k|}
_ZNK4cdef15StaticAssertion21_internal_has_messageEv:
11153|  27.0k|inline bool StaticAssertion::_internal_has_message() const {
11154|  27.0k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
11155|  27.0k|  return value;
11156|  27.0k|}
_ZNK4cdef15StaticAssertion11has_messageEv:
11157|  27.0k|inline bool StaticAssertion::has_message() const {
11158|  27.0k|  return _internal_has_message();
11159|  27.0k|}
_ZNK4cdef15StaticAssertion7messageEv:
11164|  26.2k|inline const std::string& StaticAssertion::message() const {
11165|       |  // @@protoc_insertion_point(field_get:cdef.StaticAssertion.message)
11166|  26.2k|  return _internal_message();
11167|  26.2k|}
_ZNK4cdef15StaticAssertion17_internal_messageEv:
11180|  26.2k|inline const std::string& StaticAssertion::_internal_message() const {
11181|  26.2k|  return _impl_.message_.Get();
11182|  26.2k|}
_ZNK4cdef15StaticAssertion23has_static_assert_oneofEv:
11220|  28.1k|inline bool StaticAssertion::has_static_assert_oneof() const {
11221|  28.1k|  return static_assert_oneof_case() != STATIC_ASSERT_ONEOF_NOT_SET;
11222|  28.1k|}
_ZN4cdef15StaticAssertion29clear_has_static_assert_oneofEv:
11223|  28.1k|inline void StaticAssertion::clear_has_static_assert_oneof() {
11224|  28.1k|  _impl_._oneof_case_[0] = STATIC_ASSERT_ONEOF_NOT_SET;
11225|  28.1k|}
_ZNK4cdef15StaticAssertion24static_assert_oneof_caseEv:
11226|  83.3k|inline StaticAssertion::StaticAssertOneofCase StaticAssertion::static_assert_oneof_case() const {
11227|  83.3k|  return StaticAssertion::StaticAssertOneofCase(_impl_._oneof_case_[0]);
11228|  83.3k|}
_ZNK4cdef17StructDeclaration23_internal_has_bit_fieldEv:
11234|  6.49k|inline bool StructDeclaration::_internal_has_bit_field() const {
11235|  6.49k|  return struct_decl_oneof_case() == kBitField;
11236|  6.49k|}
_ZNK4cdef17StructDeclaration19_internal_bit_fieldEv:
11265|  3.24k|inline const ::cdef::Bitfield& StructDeclaration::_internal_bit_field() const {
11266|  3.24k|  return _internal_has_bit_field()
  ------------------
  |  Branch (11266:10): [True: 3.24k, False: 0]
  ------------------
11267|  3.24k|      ? *_impl_.struct_decl_oneof_.bit_field_
11268|  3.24k|      : reinterpret_cast< ::cdef::Bitfield&>(::cdef::_Bitfield_default_instance_);
11269|  3.24k|}
_ZNK4cdef17StructDeclaration9bit_fieldEv:
11270|  3.24k|inline const ::cdef::Bitfield& StructDeclaration::bit_field() const {
11271|       |  // @@protoc_insertion_point(field_get:cdef.StructDeclaration.bit_field)
11272|  3.24k|  return _internal_bit_field();
11273|  3.24k|}
_ZNK4cdef17StructDeclaration30_internal_has_static_assertionEv:
11308|  56.3k|inline bool StructDeclaration::_internal_has_static_assertion() const {
11309|  56.3k|  return struct_decl_oneof_case() == kStaticAssertion;
11310|  56.3k|}
_ZNK4cdef17StructDeclaration26_internal_static_assertionEv:
11339|  28.1k|inline const ::cdef::StaticAssertion& StructDeclaration::_internal_static_assertion() const {
11340|  28.1k|  return _internal_has_static_assertion()
  ------------------
  |  Branch (11340:10): [True: 28.1k, False: 0]
  ------------------
11341|  28.1k|      ? *_impl_.struct_decl_oneof_.static_assertion_
11342|  28.1k|      : reinterpret_cast< ::cdef::StaticAssertion&>(::cdef::_StaticAssertion_default_instance_);
11343|  28.1k|}
_ZNK4cdef17StructDeclaration16static_assertionEv:
11344|  28.1k|inline const ::cdef::StaticAssertion& StructDeclaration::static_assertion() const {
11345|       |  // @@protoc_insertion_point(field_get:cdef.StructDeclaration.static_assertion)
11346|  28.1k|  return _internal_static_assertion();
11347|  28.1k|}
_ZNK4cdef17StructDeclaration21has_struct_decl_oneofEv:
11381|  35.1k|inline bool StructDeclaration::has_struct_decl_oneof() const {
11382|  35.1k|  return struct_decl_oneof_case() != STRUCT_DECL_ONEOF_NOT_SET;
11383|  35.1k|}
_ZN4cdef17StructDeclaration27clear_has_struct_decl_oneofEv:
11384|  35.1k|inline void StructDeclaration::clear_has_struct_decl_oneof() {
11385|  35.1k|  _impl_._oneof_case_[0] = STRUCT_DECL_ONEOF_NOT_SET;
11386|  35.1k|}
_ZNK4cdef17StructDeclaration22struct_decl_oneof_caseEv:
11387|   199k|inline StructDeclaration::StructDeclOneofCase StructDeclaration::struct_decl_oneof_case() const {
11388|   199k|  return StructDeclaration::StructDeclOneofCase(_impl_._oneof_case_[0]);
11389|   199k|}
_ZNK4cdef21StructDeclarationList38_internal_struct_declaration_list_sizeEv:
11395|  53.4k|inline int StructDeclarationList::_internal_struct_declaration_list_size() const {
11396|  53.4k|  return _impl_.struct_declaration_list_.size();
11397|  53.4k|}
_ZNK4cdef21StructDeclarationList28struct_declaration_list_sizeEv:
11398|  53.4k|inline int StructDeclarationList::struct_declaration_list_size() const {
11399|  53.4k|  return _internal_struct_declaration_list_size();
11400|  53.4k|}
_ZNK4cdef21StructDeclarationList33_internal_struct_declaration_listEi:
11413|  35.1k|inline const ::cdef::StructDeclaration& StructDeclarationList::_internal_struct_declaration_list(int index) const {
11414|  35.1k|  return _impl_.struct_declaration_list_.Get(index);
11415|  35.1k|}
_ZNK4cdef21StructDeclarationList23struct_declaration_listEi:
11416|  35.1k|inline const ::cdef::StructDeclaration& StructDeclarationList::struct_declaration_list(int index) const {
11417|       |  // @@protoc_insertion_point(field_get:cdef.StructDeclarationList.struct_declaration_list)
11418|  35.1k|  return _internal_struct_declaration_list(index);
11419|  35.1k|}
_ZNK4cdef9UnionType27_internal_has_attr_spec_seqEv:
11439|  15.6k|inline bool UnionType::_internal_has_attr_spec_seq() const {
11440|  15.6k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
11441|  15.6k|  PROTOBUF_ASSUME(!value || _impl_.attr_spec_seq_ != nullptr);
  ------------------
  |  |  558|  15.6k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  15.6k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  15.6k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  16.5k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 14.7k, False: 895]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 895, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  16.5k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 14.7k, False: 895]
  |  |  |  Branch (559:20): [True: 895, False: 0]
  |  |  ------------------
  ------------------
11442|  15.6k|  return value;
11443|  15.6k|}
_ZNK4cdef9UnionType17has_attr_spec_seqEv:
11444|  15.6k|inline bool UnionType::has_attr_spec_seq() const {
11445|  15.6k|  return _internal_has_attr_spec_seq();
11446|  15.6k|}
_ZNK4cdef9UnionType23_internal_attr_spec_seqEv:
11451|    895|inline const ::cdef::AttrSpecSeq& UnionType::_internal_attr_spec_seq() const {
11452|    895|  const ::cdef::AttrSpecSeq* p = _impl_.attr_spec_seq_;
11453|    895|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::AttrSpecSeq&>(
  ------------------
  |  Branch (11453:10): [True: 895, False: 0]
  ------------------
11454|      0|      ::cdef::_AttrSpecSeq_default_instance_);
11455|    895|}
_ZNK4cdef9UnionType13attr_spec_seqEv:
11456|    895|inline const ::cdef::AttrSpecSeq& UnionType::attr_spec_seq() const {
11457|       |  // @@protoc_insertion_point(field_get:cdef.UnionType.attr_spec_seq)
11458|    895|  return _internal_attr_spec_seq();
11459|    895|}
_ZNK4cdef9UnionType18_internal_has_nameEv:
11529|  31.3k|inline bool UnionType::_internal_has_name() const {
11530|  31.3k|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
11531|  31.3k|  PROTOBUF_ASSUME(!value || _impl_.name_ != nullptr);
  ------------------
  |  |  558|  31.3k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  31.3k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  31.3k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  33.0k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 29.6k, False: 1.70k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 1.70k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  33.0k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 29.6k, False: 1.70k]
  |  |  |  Branch (559:20): [True: 1.70k, False: 0]
  |  |  ------------------
  ------------------
11532|  31.3k|  return value;
11533|  31.3k|}
_ZNK4cdef9UnionType8has_nameEv:
11534|  15.6k|inline bool UnionType::has_name() const {
11535|  15.6k|  return _internal_has_name();
11536|  15.6k|}
_ZNK4cdef9UnionType14_internal_nameEv:
11541|    852|inline const ::cdef::Identifier& UnionType::_internal_name() const {
11542|    852|  const ::cdef::Identifier* p = _impl_.name_;
11543|    852|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::Identifier&>(
  ------------------
  |  Branch (11543:10): [True: 852, False: 0]
  ------------------
11544|      0|      ::cdef::_Identifier_default_instance_);
11545|    852|}
_ZNK4cdef9UnionType4nameEv:
11546|    852|inline const ::cdef::Identifier& UnionType::name() const {
11547|       |  // @@protoc_insertion_point(field_get:cdef.UnionType.name)
11548|    852|  return _internal_name();
11549|    852|}
_ZNK4cdef9UnionType37_internal_has_struct_declaration_listEv:
11619|  15.6k|inline bool UnionType::_internal_has_struct_declaration_list() const {
11620|  15.6k|  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
11621|  15.6k|  PROTOBUF_ASSUME(!value || _impl_.struct_declaration_list_ != nullptr);
  ------------------
  |  |  558|  15.6k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  15.6k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  15.6k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  31.3k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 15.6k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 15.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  31.3k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 0, False: 15.6k]
  |  |  |  Branch (559:20): [True: 15.6k, False: 0]
  |  |  ------------------
  ------------------
11622|  15.6k|  return value;
11623|  15.6k|}
_ZNK4cdef9UnionType33_internal_struct_declaration_listEv:
11631|  15.6k|inline const ::cdef::StructDeclarationList& UnionType::_internal_struct_declaration_list() const {
11632|  15.6k|  const ::cdef::StructDeclarationList* p = _impl_.struct_declaration_list_;
11633|  15.6k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::StructDeclarationList&>(
  ------------------
  |  Branch (11633:10): [True: 15.6k, False: 0]
  ------------------
11634|      0|      ::cdef::_StructDeclarationList_default_instance_);
11635|  15.6k|}
_ZNK4cdef9UnionType23struct_declaration_listEv:
11636|  15.6k|inline const ::cdef::StructDeclarationList& UnionType::struct_declaration_list() const {
11637|       |  // @@protoc_insertion_point(field_get:cdef.UnionType.struct_declaration_list)
11638|  15.6k|  return _internal_struct_declaration_list();
11639|  15.6k|}
_ZNK4cdef10StructType27_internal_has_attr_spec_seqEv:
11713|  2.58k|inline bool StructType::_internal_has_attr_spec_seq() const {
11714|  2.58k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
11715|  2.58k|  PROTOBUF_ASSUME(!value || _impl_.attr_spec_seq_ != nullptr);
  ------------------
  |  |  558|  2.58k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  2.58k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  2.58k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  3.16k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 2.00k, False: 577]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 577, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  3.16k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 2.00k, False: 577]
  |  |  |  Branch (559:20): [True: 577, False: 0]
  |  |  ------------------
  ------------------
11716|  2.58k|  return value;
11717|  2.58k|}
_ZNK4cdef10StructType17has_attr_spec_seqEv:
11718|  2.58k|inline bool StructType::has_attr_spec_seq() const {
11719|  2.58k|  return _internal_has_attr_spec_seq();
11720|  2.58k|}
_ZNK4cdef10StructType23_internal_attr_spec_seqEv:
11725|    577|inline const ::cdef::AttrSpecSeq& StructType::_internal_attr_spec_seq() const {
11726|    577|  const ::cdef::AttrSpecSeq* p = _impl_.attr_spec_seq_;
11727|    577|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::AttrSpecSeq&>(
  ------------------
  |  Branch (11727:10): [True: 577, False: 0]
  ------------------
11728|      0|      ::cdef::_AttrSpecSeq_default_instance_);
11729|    577|}
_ZNK4cdef10StructType13attr_spec_seqEv:
11730|    577|inline const ::cdef::AttrSpecSeq& StructType::attr_spec_seq() const {
11731|       |  // @@protoc_insertion_point(field_get:cdef.StructType.attr_spec_seq)
11732|    577|  return _internal_attr_spec_seq();
11733|    577|}
_ZNK4cdef10StructType18_internal_has_nameEv:
11803|  5.17k|inline bool StructType::_internal_has_name() const {
11804|  5.17k|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
11805|  5.17k|  PROTOBUF_ASSUME(!value || _impl_.name_ != nullptr);
  ------------------
  |  |  558|  5.17k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  5.17k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  5.17k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  5.90k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 4.44k, False: 728]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 728, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  5.90k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 4.44k, False: 728]
  |  |  |  Branch (559:20): [True: 728, False: 0]
  |  |  ------------------
  ------------------
11806|  5.17k|  return value;
11807|  5.17k|}
_ZNK4cdef10StructType8has_nameEv:
11808|  2.58k|inline bool StructType::has_name() const {
11809|  2.58k|  return _internal_has_name();
11810|  2.58k|}
_ZNK4cdef10StructType14_internal_nameEv:
11815|    364|inline const ::cdef::Identifier& StructType::_internal_name() const {
11816|    364|  const ::cdef::Identifier* p = _impl_.name_;
11817|    364|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::Identifier&>(
  ------------------
  |  Branch (11817:10): [True: 364, False: 0]
  ------------------
11818|      0|      ::cdef::_Identifier_default_instance_);
11819|    364|}
_ZNK4cdef10StructType4nameEv:
11820|    364|inline const ::cdef::Identifier& StructType::name() const {
11821|       |  // @@protoc_insertion_point(field_get:cdef.StructType.name)
11822|    364|  return _internal_name();
11823|    364|}
_ZNK4cdef10StructType37_internal_has_struct_declaration_listEv:
11893|  2.58k|inline bool StructType::_internal_has_struct_declaration_list() const {
11894|  2.58k|  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
11895|  2.58k|  PROTOBUF_ASSUME(!value || _impl_.struct_declaration_list_ != nullptr);
  ------------------
  |  |  558|  2.58k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  2.58k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  2.58k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  5.17k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 2.58k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 2.58k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  5.17k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 0, False: 2.58k]
  |  |  |  Branch (559:20): [True: 2.58k, False: 0]
  |  |  ------------------
  ------------------
11896|  2.58k|  return value;
11897|  2.58k|}
_ZNK4cdef10StructType33_internal_struct_declaration_listEv:
11905|  2.58k|inline const ::cdef::StructDeclarationList& StructType::_internal_struct_declaration_list() const {
11906|  2.58k|  const ::cdef::StructDeclarationList* p = _impl_.struct_declaration_list_;
11907|  2.58k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::StructDeclarationList&>(
  ------------------
  |  Branch (11907:10): [True: 2.58k, False: 0]
  ------------------
11908|      0|      ::cdef::_StructDeclarationList_default_instance_);
11909|  2.58k|}
_ZNK4cdef10StructType23struct_declaration_listEv:
11910|  2.58k|inline const ::cdef::StructDeclarationList& StructType::struct_declaration_list() const {
11911|       |  // @@protoc_insertion_point(field_get:cdef.StructType.struct_declaration_list)
11912|  2.58k|  return _internal_struct_declaration_list();
11913|  2.58k|}
_ZNK4cdef14ArithmeticType20has_arithmetic_oneofEv:
14017|  3.47k|inline bool ArithmeticType::has_arithmetic_oneof() const {
14018|  3.47k|  return arithmetic_oneof_case() != ARITHMETIC_ONEOF_NOT_SET;
14019|  3.47k|}
_ZN4cdef14ArithmeticType26clear_has_arithmetic_oneofEv:
14020|  3.47k|inline void ArithmeticType::clear_has_arithmetic_oneof() {
14021|  3.47k|  _impl_._oneof_case_[0] = ARITHMETIC_ONEOF_NOT_SET;
14022|  3.47k|}
_ZNK4cdef14ArithmeticType21arithmetic_oneof_caseEv:
14023|  9.25k|inline ArithmeticType::ArithmeticOneofCase ArithmeticType::arithmetic_oneof_case() const {
14024|  9.25k|  return ArithmeticType::ArithmeticOneofCase(_impl_._oneof_case_[0]);
14025|  9.25k|}
_ZNK4cdef13TypeSpecifier29_internal_has_arithmetic_typeEv:
14101|  3.47k|inline bool TypeSpecifier::_internal_has_arithmetic_type() const {
14102|  3.47k|  return type_specifier_oneof_case() == kArithmeticType;
14103|  3.47k|}
_ZNK4cdef13TypeSpecifier25_internal_arithmetic_typeEv:
14132|  3.47k|inline const ::cdef::ArithmeticType& TypeSpecifier::_internal_arithmetic_type() const {
14133|  3.47k|  return _internal_has_arithmetic_type()
  ------------------
  |  Branch (14133:10): [True: 3.47k, False: 0]
  ------------------
14134|  3.47k|      ? *_impl_.type_specifier_oneof_.arithmetic_type_
14135|  3.47k|      : reinterpret_cast< ::cdef::ArithmeticType&>(::cdef::_ArithmeticType_default_instance_);
14136|  3.47k|}
_ZNK4cdef13TypeSpecifier15arithmetic_typeEv:
14137|  3.47k|inline const ::cdef::ArithmeticType& TypeSpecifier::arithmetic_type() const {
14138|       |  // @@protoc_insertion_point(field_get:cdef.TypeSpecifier.arithmetic_type)
14139|  3.47k|  return _internal_arithmetic_type();
14140|  3.47k|}
_ZNK4cdef13TypeSpecifier25_internal_has_atomic_typeEv:
14175|  2.32k|inline bool TypeSpecifier::_internal_has_atomic_type() const {
14176|  2.32k|  return type_specifier_oneof_case() == kAtomicType;
14177|  2.32k|}
_ZNK4cdef13TypeSpecifier21_internal_atomic_typeEv:
14206|  1.16k|inline const ::cdef::AtomicType& TypeSpecifier::_internal_atomic_type() const {
14207|  1.16k|  return _internal_has_atomic_type()
  ------------------
  |  Branch (14207:10): [True: 1.16k, False: 0]
  ------------------
14208|  1.16k|      ? *_impl_.type_specifier_oneof_.atomic_type_
14209|  1.16k|      : reinterpret_cast< ::cdef::AtomicType&>(::cdef::_AtomicType_default_instance_);
14210|  1.16k|}
_ZNK4cdef13TypeSpecifier11atomic_typeEv:
14211|  1.16k|inline const ::cdef::AtomicType& TypeSpecifier::atomic_type() const {
14212|       |  // @@protoc_insertion_point(field_get:cdef.TypeSpecifier.atomic_type)
14213|  1.16k|  return _internal_atomic_type();
14214|  1.16k|}
_ZNK4cdef13TypeSpecifier26_internal_has_typedef_typeEv:
14249|  1.58k|inline bool TypeSpecifier::_internal_has_typedef_type() const {
14250|  1.58k|  return type_specifier_oneof_case() == kTypedefType;
14251|  1.58k|}
_ZNK4cdef13TypeSpecifier22_internal_typedef_typeEv:
14280|  1.58k|inline const ::cdef::TypedefType& TypeSpecifier::_internal_typedef_type() const {
14281|  1.58k|  return _internal_has_typedef_type()
  ------------------
  |  Branch (14281:10): [True: 1.58k, False: 0]
  ------------------
14282|  1.58k|      ? *_impl_.type_specifier_oneof_.typedef_type_
14283|  1.58k|      : reinterpret_cast< ::cdef::TypedefType&>(::cdef::_TypedefType_default_instance_);
14284|  1.58k|}
_ZNK4cdef13TypeSpecifier12typedef_typeEv:
14285|  1.58k|inline const ::cdef::TypedefType& TypeSpecifier::typedef_type() const {
14286|       |  // @@protoc_insertion_point(field_get:cdef.TypeSpecifier.typedef_type)
14287|  1.58k|  return _internal_typedef_type();
14288|  1.58k|}
_ZNK4cdef13TypeSpecifier25_internal_has_struct_typeEv:
14323|  5.17k|inline bool TypeSpecifier::_internal_has_struct_type() const {
14324|  5.17k|  return type_specifier_oneof_case() == kStructType;
14325|  5.17k|}
_ZNK4cdef13TypeSpecifier21_internal_struct_typeEv:
14354|  2.58k|inline const ::cdef::StructType& TypeSpecifier::_internal_struct_type() const {
14355|  2.58k|  return _internal_has_struct_type()
  ------------------
  |  Branch (14355:10): [True: 2.58k, False: 0]
  ------------------
14356|  2.58k|      ? *_impl_.type_specifier_oneof_.struct_type_
14357|  2.58k|      : reinterpret_cast< ::cdef::StructType&>(::cdef::_StructType_default_instance_);
14358|  2.58k|}
_ZNK4cdef13TypeSpecifier11struct_typeEv:
14359|  2.58k|inline const ::cdef::StructType& TypeSpecifier::struct_type() const {
14360|       |  // @@protoc_insertion_point(field_get:cdef.TypeSpecifier.struct_type)
14361|  2.58k|  return _internal_struct_type();
14362|  2.58k|}
_ZNK4cdef13TypeSpecifier24_internal_has_union_typeEv:
14397|  31.3k|inline bool TypeSpecifier::_internal_has_union_type() const {
14398|  31.3k|  return type_specifier_oneof_case() == kUnionType;
14399|  31.3k|}
_ZNK4cdef13TypeSpecifier20_internal_union_typeEv:
14428|  15.6k|inline const ::cdef::UnionType& TypeSpecifier::_internal_union_type() const {
14429|  15.6k|  return _internal_has_union_type()
  ------------------
  |  Branch (14429:10): [True: 15.6k, False: 0]
  ------------------
14430|  15.6k|      ? *_impl_.type_specifier_oneof_.union_type_
14431|  15.6k|      : reinterpret_cast< ::cdef::UnionType&>(::cdef::_UnionType_default_instance_);
14432|  15.6k|}
_ZNK4cdef13TypeSpecifier10union_typeEv:
14433|  15.6k|inline const ::cdef::UnionType& TypeSpecifier::union_type() const {
14434|       |  // @@protoc_insertion_point(field_get:cdef.TypeSpecifier.union_type)
14435|  15.6k|  return _internal_union_type();
14436|  15.6k|}
_ZNK4cdef13TypeSpecifier23_internal_has_enum_typeEv:
14471|  3.60k|inline bool TypeSpecifier::_internal_has_enum_type() const {
14472|  3.60k|  return type_specifier_oneof_case() == kEnumType;
14473|  3.60k|}
_ZNK4cdef13TypeSpecifier19_internal_enum_typeEv:
14502|  1.80k|inline const ::cdef::EnumType& TypeSpecifier::_internal_enum_type() const {
14503|  1.80k|  return _internal_has_enum_type()
  ------------------
  |  Branch (14503:10): [True: 1.80k, False: 0]
  ------------------
14504|  1.80k|      ? *_impl_.type_specifier_oneof_.enum_type_
14505|  1.80k|      : reinterpret_cast< ::cdef::EnumType&>(::cdef::_EnumType_default_instance_);
14506|  1.80k|}
_ZNK4cdef13TypeSpecifier9enum_typeEv:
14507|  1.80k|inline const ::cdef::EnumType& TypeSpecifier::enum_type() const {
14508|       |  // @@protoc_insertion_point(field_get:cdef.TypeSpecifier.enum_type)
14509|  1.80k|  return _internal_enum_type();
14510|  1.80k|}
_ZNK4cdef13TypeSpecifier29_internal_has_typeof_operatorEv:
14545|  2.45k|inline bool TypeSpecifier::_internal_has_typeof_operator() const {
14546|  2.45k|  return type_specifier_oneof_case() == kTypeofOperator;
14547|  2.45k|}
_ZNK4cdef13TypeSpecifier25_internal_typeof_operatorEv:
14576|  2.45k|inline const ::cdef::TypeOfOperator& TypeSpecifier::_internal_typeof_operator() const {
14577|  2.45k|  return _internal_has_typeof_operator()
  ------------------
  |  Branch (14577:10): [True: 2.45k, False: 0]
  ------------------
14578|  2.45k|      ? *_impl_.type_specifier_oneof_.typeof_operator_
14579|  2.45k|      : reinterpret_cast< ::cdef::TypeOfOperator&>(::cdef::_TypeOfOperator_default_instance_);
14580|  2.45k|}
_ZNK4cdef13TypeSpecifier15typeof_operatorEv:
14581|  2.45k|inline const ::cdef::TypeOfOperator& TypeSpecifier::typeof_operator() const {
14582|       |  // @@protoc_insertion_point(field_get:cdef.TypeSpecifier.typeof_operator)
14583|  2.45k|  return _internal_typeof_operator();
14584|  2.45k|}
_ZNK4cdef13TypeSpecifier24has_type_specifier_oneofEv:
14618|  32.2k|inline bool TypeSpecifier::has_type_specifier_oneof() const {
14619|  32.2k|  return type_specifier_oneof_case() != TYPE_SPECIFIER_ONEOF_NOT_SET;
14620|  32.2k|}
_ZN4cdef13TypeSpecifier30clear_has_type_specifier_oneofEv:
14621|  32.2k|inline void TypeSpecifier::clear_has_type_specifier_oneof() {
14622|  32.2k|  _impl_._oneof_case_[0] = TYPE_SPECIFIER_ONEOF_NOT_SET;
14623|  32.2k|}
_ZNK4cdef13TypeSpecifier25type_specifier_oneof_caseEv:
14624|   176k|inline TypeSpecifier::TypeSpecifierOneofCase TypeSpecifier::type_specifier_oneof_case() const {
14625|   176k|  return TypeSpecifier::TypeSpecifierOneofCase(_impl_._oneof_case_[0]);
14626|   176k|}
_ZNK4cdef13TypeQualifier27_internal_has_keyword_constEv:
14632|  8.20k|inline bool TypeQualifier::_internal_has_keyword_const() const {
14633|  8.20k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
14634|  8.20k|  return value;
14635|  8.20k|}
_ZNK4cdef13TypeQualifier17has_keyword_constEv:
14636|  8.20k|inline bool TypeQualifier::has_keyword_const() const {
14637|  8.20k|  return _internal_has_keyword_const();
14638|  8.20k|}
_ZNK4cdef13TypeQualifier30_internal_has_keyword_volatileEv:
14660|  8.20k|inline bool TypeQualifier::_internal_has_keyword_volatile() const {
14661|  8.20k|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
14662|  8.20k|  return value;
14663|  8.20k|}
_ZNK4cdef13TypeQualifier20has_keyword_volatileEv:
14664|  8.20k|inline bool TypeQualifier::has_keyword_volatile() const {
14665|  8.20k|  return _internal_has_keyword_volatile();
14666|  8.20k|}
_ZNK4cdef13TypeQualifier30_internal_has_keyword_restrictEv:
14688|  8.20k|inline bool TypeQualifier::_internal_has_keyword_restrict() const {
14689|  8.20k|  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
14690|  8.20k|  return value;
14691|  8.20k|}
_ZNK4cdef13TypeQualifier20has_keyword_restrictEv:
14692|  8.20k|inline bool TypeQualifier::has_keyword_restrict() const {
14693|  8.20k|  return _internal_has_keyword_restrict();
14694|  8.20k|}
_ZNK4cdef13TypeQualifier28_internal_has_keyword_atomicEv:
14716|  8.20k|inline bool TypeQualifier::_internal_has_keyword_atomic() const {
14717|  8.20k|  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
14718|  8.20k|  return value;
14719|  8.20k|}
_ZNK4cdef13TypeQualifier18has_keyword_atomicEv:
14720|  8.20k|inline bool TypeQualifier::has_keyword_atomic() const {
14721|  8.20k|  return _internal_has_keyword_atomic();
14722|  8.20k|}
_ZNK4cdef18AlignmentSpecifier41_internal_has_alignment_specifier_alignasEv:
14748|  4.68k|inline bool AlignmentSpecifier::_internal_has_alignment_specifier_alignas() const {
14749|  4.68k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
14750|  4.68k|  return value;
14751|  4.68k|}
_ZNK4cdef18AlignmentSpecifier31has_alignment_specifier_alignasEv:
14752|  4.68k|inline bool AlignmentSpecifier::has_alignment_specifier_alignas() const {
14753|  4.68k|  return _internal_has_alignment_specifier_alignas();
14754|  4.68k|}
_ZNK4cdef14DeclaratorAttr18_internal_has_nameEv:
14780|  4.43k|inline bool DeclaratorAttr::_internal_has_name() const {
14781|  4.43k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
14782|  4.43k|  PROTOBUF_ASSUME(!value || _impl_.name_ != nullptr);
  ------------------
  |  |  558|  4.43k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  4.43k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  4.43k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  8.87k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 4.43k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 4.43k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  8.87k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 0, False: 4.43k]
  |  |  |  Branch (559:20): [True: 4.43k, False: 0]
  |  |  ------------------
  ------------------
14783|  4.43k|  return value;
14784|  4.43k|}
_ZNK4cdef14DeclaratorAttr14_internal_nameEv:
14792|  4.43k|inline const ::cdef::Identifier& DeclaratorAttr::_internal_name() const {
14793|  4.43k|  const ::cdef::Identifier* p = _impl_.name_;
14794|  4.43k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::Identifier&>(
  ------------------
  |  Branch (14794:10): [True: 4.43k, False: 0]
  ------------------
14795|      0|      ::cdef::_Identifier_default_instance_);
14796|  4.43k|}
_ZNK4cdef14DeclaratorAttr4nameEv:
14797|  4.43k|inline const ::cdef::Identifier& DeclaratorAttr::name() const {
14798|       |  // @@protoc_insertion_point(field_get:cdef.DeclaratorAttr.name)
14799|  4.43k|  return _internal_name();
14800|  4.43k|}
_ZNK4cdef14DeclaratorAttr27_internal_has_attr_spec_seqEv:
14870|  4.43k|inline bool DeclaratorAttr::_internal_has_attr_spec_seq() const {
14871|  4.43k|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
14872|  4.43k|  PROTOBUF_ASSUME(!value || _impl_.attr_spec_seq_ != nullptr);
  ------------------
  |  |  558|  4.43k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  4.43k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  4.43k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  5.19k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 3.68k, False: 756]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 756, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  5.19k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 3.68k, False: 756]
  |  |  |  Branch (559:20): [True: 756, False: 0]
  |  |  ------------------
  ------------------
14873|  4.43k|  return value;
14874|  4.43k|}
_ZNK4cdef14DeclaratorAttr17has_attr_spec_seqEv:
14875|  4.43k|inline bool DeclaratorAttr::has_attr_spec_seq() const {
14876|  4.43k|  return _internal_has_attr_spec_seq();
14877|  4.43k|}
_ZNK4cdef14DeclaratorAttr23_internal_attr_spec_seqEv:
14882|    756|inline const ::cdef::AttrSpecSeq& DeclaratorAttr::_internal_attr_spec_seq() const {
14883|    756|  const ::cdef::AttrSpecSeq* p = _impl_.attr_spec_seq_;
14884|    756|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::AttrSpecSeq&>(
  ------------------
  |  Branch (14884:10): [True: 756, False: 0]
  ------------------
14885|      0|      ::cdef::_AttrSpecSeq_default_instance_);
14886|    756|}
_ZNK4cdef14DeclaratorAttr13attr_spec_seqEv:
14887|    756|inline const ::cdef::AttrSpecSeq& DeclaratorAttr::attr_spec_seq() const {
14888|       |  // @@protoc_insertion_point(field_get:cdef.DeclaratorAttr.attr_spec_seq)
14889|    756|  return _internal_attr_spec_seq();
14890|    756|}
_ZNK4cdef21DeclaratorParentheses24_internal_has_declaratorEv:
14964|  3.07k|inline bool DeclaratorParentheses::_internal_has_declarator() const {
14965|  3.07k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
14966|  3.07k|  PROTOBUF_ASSUME(!value || _impl_.declarator_ != nullptr);
  ------------------
  |  |  558|  3.07k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  3.07k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  3.07k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  6.15k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 0, False: 3.07k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 3.07k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  6.15k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 0, False: 3.07k]
  |  |  |  Branch (559:20): [True: 3.07k, False: 0]
  |  |  ------------------
  ------------------
14967|  3.07k|  return value;
14968|  3.07k|}
_ZNK4cdef21DeclaratorParentheses20_internal_declaratorEv:
14976|  3.07k|inline const ::cdef::Declarator& DeclaratorParentheses::_internal_declarator() const {
14977|  3.07k|  const ::cdef::Declarator* p = _impl_.declarator_;
14978|  3.07k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::Declarator&>(
  ------------------
  |  Branch (14978:10): [True: 3.07k, False: 0]
  ------------------
14979|      0|      ::cdef::_Declarator_default_instance_);
14980|  3.07k|}
_ZNK4cdef21DeclaratorParentheses10declaratorEv:
14981|  3.07k|inline const ::cdef::Declarator& DeclaratorParentheses::declarator() const {
14982|       |  // @@protoc_insertion_point(field_get:cdef.DeclaratorParentheses.declarator)
14983|  3.07k|  return _internal_declarator();
14984|  3.07k|}
_ZNK4cdef10Declarator29_internal_has_declarator_attrEv:
15058|  8.87k|inline bool Declarator::_internal_has_declarator_attr() const {
15059|  8.87k|  return declarator_oneof_case() == kDeclaratorAttr;
15060|  8.87k|}
_ZNK4cdef10Declarator25_internal_declarator_attrEv:
15089|  4.43k|inline const ::cdef::DeclaratorAttr& Declarator::_internal_declarator_attr() const {
15090|  4.43k|  return _internal_has_declarator_attr()
  ------------------
  |  Branch (15090:10): [True: 4.43k, False: 0]
  ------------------
15091|  4.43k|      ? *_impl_.declarator_oneof_.declarator_attr_
15092|  4.43k|      : reinterpret_cast< ::cdef::DeclaratorAttr&>(::cdef::_DeclaratorAttr_default_instance_);
15093|  4.43k|}
_ZNK4cdef10Declarator15declarator_attrEv:
15094|  4.43k|inline const ::cdef::DeclaratorAttr& Declarator::declarator_attr() const {
15095|       |  // @@protoc_insertion_point(field_get:cdef.Declarator.declarator_attr)
15096|  4.43k|  return _internal_declarator_attr();
15097|  4.43k|}
_ZNK4cdef10Declarator36_internal_has_declarator_parenthesesEv:
15132|  6.15k|inline bool Declarator::_internal_has_declarator_parentheses() const {
15133|  6.15k|  return declarator_oneof_case() == kDeclaratorParentheses;
15134|  6.15k|}
_ZNK4cdef10Declarator32_internal_declarator_parenthesesEv:
15163|  3.07k|inline const ::cdef::DeclaratorParentheses& Declarator::_internal_declarator_parentheses() const {
15164|  3.07k|  return _internal_has_declarator_parentheses()
  ------------------
  |  Branch (15164:10): [True: 3.07k, False: 0]
  ------------------
15165|  3.07k|      ? *_impl_.declarator_oneof_.declarator_parentheses_
15166|  3.07k|      : reinterpret_cast< ::cdef::DeclaratorParentheses&>(::cdef::_DeclaratorParentheses_default_instance_);
15167|  3.07k|}
_ZNK4cdef10Declarator22declarator_parenthesesEv:
15168|  3.07k|inline const ::cdef::DeclaratorParentheses& Declarator::declarator_parentheses() const {
15169|       |  // @@protoc_insertion_point(field_get:cdef.Declarator.declarator_parentheses)
15170|  3.07k|  return _internal_declarator_parentheses();
15171|  3.07k|}
_ZNK4cdef10Declarator32_internal_has_pointer_declaratorEv:
15206|  8.67k|inline bool Declarator::_internal_has_pointer_declarator() const {
15207|  8.67k|  return declarator_oneof_case() == kPointerDeclarator;
15208|  8.67k|}
_ZNK4cdef10Declarator28_internal_pointer_declaratorEv:
15237|  4.33k|inline const ::cdef::PointerDeclarator& Declarator::_internal_pointer_declarator() const {
15238|  4.33k|  return _internal_has_pointer_declarator()
  ------------------
  |  Branch (15238:10): [True: 4.33k, False: 0]
  ------------------
15239|  4.33k|      ? *_impl_.declarator_oneof_.pointer_declarator_
15240|  4.33k|      : reinterpret_cast< ::cdef::PointerDeclarator&>(::cdef::_PointerDeclarator_default_instance_);
15241|  4.33k|}
_ZNK4cdef10Declarator18pointer_declaratorEv:
15242|  4.33k|inline const ::cdef::PointerDeclarator& Declarator::pointer_declarator() const {
15243|       |  // @@protoc_insertion_point(field_get:cdef.Declarator.pointer_declarator)
15244|  4.33k|  return _internal_pointer_declarator();
15245|  4.33k|}
_ZNK4cdef10Declarator30_internal_has_array_declaratorEv:
15280|  5.24k|inline bool Declarator::_internal_has_array_declarator() const {
15281|  5.24k|  return declarator_oneof_case() == kArrayDeclarator;
15282|  5.24k|}
_ZNK4cdef10Declarator26_internal_array_declaratorEv:
15311|  5.24k|inline const ::cdef::ArrayDeclarator& Declarator::_internal_array_declarator() const {
15312|  5.24k|  return _internal_has_array_declarator()
  ------------------
  |  Branch (15312:10): [True: 5.24k, False: 0]
  ------------------
15313|  5.24k|      ? *_impl_.declarator_oneof_.array_declarator_
15314|  5.24k|      : reinterpret_cast< ::cdef::ArrayDeclarator&>(::cdef::_ArrayDeclarator_default_instance_);
15315|  5.24k|}
_ZNK4cdef10Declarator16array_declaratorEv:
15316|  5.24k|inline const ::cdef::ArrayDeclarator& Declarator::array_declarator() const {
15317|       |  // @@protoc_insertion_point(field_get:cdef.Declarator.array_declarator)
15318|  5.24k|  return _internal_array_declarator();
15319|  5.24k|}
_ZNK4cdef10Declarator33_internal_has_function_declaratorEv:
15354|  19.5k|inline bool Declarator::_internal_has_function_declarator() const {
15355|  19.5k|  return declarator_oneof_case() == kFunctionDeclarator;
15356|  19.5k|}
_ZNK4cdef10Declarator29_internal_function_declaratorEv:
15385|  9.79k|inline const ::cdef::FunctionDeclarator& Declarator::_internal_function_declarator() const {
15386|  9.79k|  return _internal_has_function_declarator()
  ------------------
  |  Branch (15386:10): [True: 9.79k, False: 0]
  ------------------
15387|  9.79k|      ? *_impl_.declarator_oneof_.function_declarator_
15388|  9.79k|      : reinterpret_cast< ::cdef::FunctionDeclarator&>(::cdef::_FunctionDeclarator_default_instance_);
15389|  9.79k|}
_ZNK4cdef10Declarator19function_declaratorEv:
15390|  9.79k|inline const ::cdef::FunctionDeclarator& Declarator::function_declarator() const {
15391|       |  // @@protoc_insertion_point(field_get:cdef.Declarator.function_declarator)
15392|  9.79k|  return _internal_function_declarator();
15393|  9.79k|}
_ZNK4cdef10Declarator20has_declarator_oneofEv:
15427|  40.4k|inline bool Declarator::has_declarator_oneof() const {
15428|  40.4k|  return declarator_oneof_case() != DECLARATOR_ONEOF_NOT_SET;
15429|  40.4k|}
_ZN4cdef10Declarator26clear_has_declarator_oneofEv:
15430|  40.4k|inline void Declarator::clear_has_declarator_oneof() {
15431|  40.4k|  _impl_._oneof_case_[0] = DECLARATOR_ONEOF_NOT_SET;
15432|  40.4k|}
_ZNK4cdef10Declarator21declarator_oneof_caseEv:
15433|   196k|inline Declarator::DeclaratorOneofCase Declarator::declarator_oneof_case() const {
15434|   196k|  return Declarator::DeclaratorOneofCase(_impl_._oneof_case_[0]);
15435|   196k|}
_ZNK4cdef26DeclaratorsAndInitializers26_internal_declarators_sizeEv:
15445|  78.6k|inline int DeclaratorsAndInitializers::_internal_declarators_size() const {
15446|  78.6k|  return _impl_.declarators_.size();
15447|  78.6k|}
_ZNK4cdef26DeclaratorsAndInitializers16declarators_sizeEv:
15448|  78.6k|inline int DeclaratorsAndInitializers::declarators_size() const {
15449|  78.6k|  return _internal_declarators_size();
15450|  78.6k|}
_ZNK4cdef26DeclaratorsAndInitializers21_internal_declaratorsEi:
15463|  23.2k|inline const ::cdef::Declarator& DeclaratorsAndInitializers::_internal_declarators(int index) const {
15464|  23.2k|  return _impl_.declarators_.Get(index);
15465|  23.2k|}
_ZNK4cdef26DeclaratorsAndInitializers11declaratorsEi:
15466|  23.2k|inline const ::cdef::Declarator& DeclaratorsAndInitializers::declarators(int index) const {
15467|       |  // @@protoc_insertion_point(field_get:cdef.DeclaratorsAndInitializers.declarators)
15468|  23.2k|  return _internal_declarators(index);
15469|  23.2k|}
_ZNK4cdef26DeclaratorsAndInitializers27_internal_initializers_sizeEv:
15485|  35.1k|inline int DeclaratorsAndInitializers::_internal_initializers_size() const {
15486|  35.1k|  return _impl_.initializers_.size();
15487|  35.1k|}
_ZNK4cdef26DeclaratorsAndInitializers17initializers_sizeEv:
15488|  35.1k|inline int DeclaratorsAndInitializers::initializers_size() const {
15489|  35.1k|  return _internal_initializers_size();
15490|  35.1k|}
_ZNK4cdef26DeclaratorsAndInitializers22_internal_initializersEi:
15503|  2.93k|inline const ::cdef::Initializer& DeclaratorsAndInitializers::_internal_initializers(int index) const {
15504|  2.93k|  return _impl_.initializers_.Get(index);
15505|  2.93k|}
_ZNK4cdef26DeclaratorsAndInitializers12initializersEi:
15506|  2.93k|inline const ::cdef::Initializer& DeclaratorsAndInitializers::initializers(int index) const {
15507|       |  // @@protoc_insertion_point(field_get:cdef.DeclaratorsAndInitializers.initializers)
15508|  2.93k|  return _internal_initializers(index);
15509|  2.93k|}
_ZNK4cdef21SpecifierAndQualifier29_internal_has_qualifiers_listEv:
15529|  37.2k|inline bool SpecifierAndQualifier::_internal_has_qualifiers_list() const {
15530|  37.2k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
15531|  37.2k|  PROTOBUF_ASSUME(!value || _impl_.qualifiers_list_ != nullptr);
  ------------------
  |  |  558|  37.2k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  37.2k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  37.2k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  44.3k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 30.1k, False: 7.11k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 7.11k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  44.3k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 30.1k, False: 7.11k]
  |  |  |  Branch (559:20): [True: 7.11k, False: 0]
  |  |  ------------------
  ------------------
15532|  37.2k|  return value;
15533|  37.2k|}
_ZNK4cdef21SpecifierAndQualifier19has_qualifiers_listEv:
15534|  37.2k|inline bool SpecifierAndQualifier::has_qualifiers_list() const {
15535|  37.2k|  return _internal_has_qualifiers_list();
15536|  37.2k|}
_ZNK4cdef21SpecifierAndQualifier25_internal_qualifiers_listEv:
15541|  7.11k|inline const ::cdef::QualifiersList& SpecifierAndQualifier::_internal_qualifiers_list() const {
15542|  7.11k|  const ::cdef::QualifiersList* p = _impl_.qualifiers_list_;
15543|  7.11k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::QualifiersList&>(
  ------------------
  |  Branch (15543:10): [True: 7.11k, False: 0]
  ------------------
15544|      0|      ::cdef::_QualifiersList_default_instance_);
15545|  7.11k|}
_ZNK4cdef21SpecifierAndQualifier15qualifiers_listEv:
15546|  7.11k|inline const ::cdef::QualifiersList& SpecifierAndQualifier::qualifiers_list() const {
15547|       |  // @@protoc_insertion_point(field_get:cdef.SpecifierAndQualifier.qualifiers_list)
15548|  7.11k|  return _internal_qualifiers_list();
15549|  7.11k|}
_ZNK4cdef21SpecifierAndQualifier29_internal_has_specifiers_listEv:
15619|  74.5k|inline bool SpecifierAndQualifier::_internal_has_specifiers_list() const {
15620|  74.5k|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
15621|  74.5k|  PROTOBUF_ASSUME(!value || _impl_.specifiers_list_ != nullptr);
  ------------------
  |  |  558|  74.5k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  74.5k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  74.5k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|   136k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 12.5k, False: 61.9k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 61.9k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|   136k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 12.5k, False: 61.9k]
  |  |  |  Branch (559:20): [True: 61.9k, False: 0]
  |  |  ------------------
  ------------------
15622|  74.5k|  return value;
15623|  74.5k|}
_ZNK4cdef21SpecifierAndQualifier19has_specifiers_listEv:
15624|  37.2k|inline bool SpecifierAndQualifier::has_specifiers_list() const {
15625|  37.2k|  return _internal_has_specifiers_list();
15626|  37.2k|}
_ZNK4cdef21SpecifierAndQualifier25_internal_specifiers_listEv:
15631|  30.9k|inline const ::cdef::SpecifiersList& SpecifierAndQualifier::_internal_specifiers_list() const {
15632|  30.9k|  const ::cdef::SpecifiersList* p = _impl_.specifiers_list_;
15633|  30.9k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::SpecifiersList&>(
  ------------------
  |  Branch (15633:10): [True: 30.9k, False: 0]
  ------------------
15634|      0|      ::cdef::_SpecifiersList_default_instance_);
15635|  30.9k|}
_ZNK4cdef21SpecifierAndQualifier15specifiers_listEv:
15636|  30.9k|inline const ::cdef::SpecifiersList& SpecifierAndQualifier::specifiers_list() const {
15637|       |  // @@protoc_insertion_point(field_get:cdef.SpecifierAndQualifier.specifiers_list)
15638|  30.9k|  return _internal_specifiers_list();
15639|  30.9k|}
_ZNK4cdef27SpecifiersAndQualifiersList45_internal_specifiers_and_qualifiers_list_sizeEv:
15713|  94.0k|inline int SpecifiersAndQualifiersList::_internal_specifiers_and_qualifiers_list_size() const {
15714|  94.0k|  return _impl_.specifiers_and_qualifiers_list_.size();
15715|  94.0k|}
_ZNK4cdef27SpecifiersAndQualifiersList35specifiers_and_qualifiers_list_sizeEv:
15716|  94.0k|inline int SpecifiersAndQualifiersList::specifiers_and_qualifiers_list_size() const {
15717|  94.0k|  return _internal_specifiers_and_qualifiers_list_size();
15718|  94.0k|}
_ZNK4cdef27SpecifiersAndQualifiersList40_internal_specifiers_and_qualifiers_listEi:
15731|  37.2k|inline const ::cdef::SpecifierAndQualifier& SpecifiersAndQualifiersList::_internal_specifiers_and_qualifiers_list(int index) const {
15732|  37.2k|  return _impl_.specifiers_and_qualifiers_list_.Get(index);
15733|  37.2k|}
_ZNK4cdef27SpecifiersAndQualifiersList30specifiers_and_qualifiers_listEi:
15734|  37.2k|inline const ::cdef::SpecifierAndQualifier& SpecifiersAndQualifiersList::specifiers_and_qualifiers_list(int index) const {
15735|       |  // @@protoc_insertion_point(field_get:cdef.SpecifiersAndQualifiersList.specifiers_and_qualifiers_list)
15736|  37.2k|  return _internal_specifiers_and_qualifiers_list(index);
15737|  37.2k|}
_ZNK4cdef11Declaration44_internal_has_specifiers_and_qualifiers_listEv:
16041|  63.4k|inline bool Declaration::_internal_has_specifiers_and_qualifiers_list() const {
16042|  63.4k|  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
16043|  63.4k|  PROTOBUF_ASSUME(!value || _impl_.specifiers_and_qualifiers_list_ != nullptr);
  ------------------
  |  |  558|  63.4k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  63.4k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  63.4k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|   113k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 13.6k, False: 49.7k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 49.7k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|   113k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 13.6k, False: 49.7k]
  |  |  |  Branch (559:20): [True: 49.7k, False: 0]
  |  |  ------------------
  ------------------
16044|  63.4k|  return value;
16045|  63.4k|}
_ZNK4cdef11Declaration34has_specifiers_and_qualifiers_listEv:
16046|  31.2k|inline bool Declaration::has_specifiers_and_qualifiers_list() const {
16047|  31.2k|  return _internal_has_specifiers_and_qualifiers_list();
16048|  31.2k|}
_ZNK4cdef11Declaration40_internal_specifiers_and_qualifiers_listEv:
16053|  32.2k|inline const ::cdef::SpecifiersAndQualifiersList& Declaration::_internal_specifiers_and_qualifiers_list() const {
16054|  32.2k|  const ::cdef::SpecifiersAndQualifiersList* p = _impl_.specifiers_and_qualifiers_list_;
16055|  32.2k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::SpecifiersAndQualifiersList&>(
  ------------------
  |  Branch (16055:10): [True: 25.1k, False: 7.03k]
  ------------------
16056|  7.03k|      ::cdef::_SpecifiersAndQualifiersList_default_instance_);
16057|  32.2k|}
_ZNK4cdef11Declaration30specifiers_and_qualifiers_listEv:
16058|  32.2k|inline const ::cdef::SpecifiersAndQualifiersList& Declaration::specifiers_and_qualifiers_list() const {
16059|       |  // @@protoc_insertion_point(field_get:cdef.Declaration.specifiers_and_qualifiers_list)
16060|  32.2k|  return _internal_specifiers_and_qualifiers_list();
16061|  32.2k|}
_ZNK4cdef11Declaration42_internal_has_declarators_and_initializersEv:
16131|  58.1k|inline bool Declaration::_internal_has_declarators_and_initializers() const {
16132|  58.1k|  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
16133|  58.1k|  PROTOBUF_ASSUME(!value || _impl_.declarators_and_initializers_ != nullptr);
  ------------------
  |  |  558|  58.1k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  58.1k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  58.1k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  78.7k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 37.5k, False: 20.5k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 20.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  78.7k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 37.5k, False: 20.5k]
  |  |  |  Branch (559:20): [True: 20.5k, False: 0]
  |  |  ------------------
  ------------------
16134|  58.1k|  return value;
16135|  58.1k|}
_ZNK4cdef11Declaration32has_declarators_and_initializersEv:
16136|  25.9k|inline bool Declaration::has_declarators_and_initializers() const {
16137|  25.9k|  return _internal_has_declarators_and_initializers();
16138|  25.9k|}
_ZNK4cdef11Declaration38_internal_declarators_and_initializersEv:
16143|  32.2k|inline const ::cdef::DeclaratorsAndInitializers& Declaration::_internal_declarators_and_initializers() const {
16144|  32.2k|  const ::cdef::DeclaratorsAndInitializers* p = _impl_.declarators_and_initializers_;
16145|  32.2k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::DeclaratorsAndInitializers&>(
  ------------------
  |  Branch (16145:10): [True: 12.6k, False: 19.5k]
  ------------------
16146|  19.5k|      ::cdef::_DeclaratorsAndInitializers_default_instance_);
16147|  32.2k|}
_ZNK4cdef11Declaration28declarators_and_initializersEv:
16148|  32.2k|inline const ::cdef::DeclaratorsAndInitializers& Declaration::declarators_and_initializers() const {
16149|       |  // @@protoc_insertion_point(field_get:cdef.Declaration.declarators_and_initializers)
16150|  32.2k|  return _internal_declarators_and_initializers();
16151|  32.2k|}
_ZNK4cdef11Declaration27_internal_has_attr_spec_seqEv:
16221|  32.2k|inline bool Declaration::_internal_has_attr_spec_seq() const {
16222|  32.2k|  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
16223|  32.2k|  PROTOBUF_ASSUME(!value || _impl_.attr_spec_seq_ != nullptr);
  ------------------
  |  |  558|  32.2k|  GOOGLE_DCHECK(pred);               \
  |  |  ------------------
  |  |  |  |  192|  32.2k|#define GOOGLE_DCHECK    GOOGLE_CHECK
  |  |  |  |  ------------------
  |  |  |  |  |  |  152|  32.2k|  GOOGLE_LOG_IF(FATAL, !(EXPRESSION)) << "CHECK failed: " #EXPRESSION ": "
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  34.5k|  !(CONDITION) ? (void)0 : GOOGLE_LOG(LEVEL)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  145|      0|  ::google::protobuf::internal::LogFinisher() = \
  |  |  |  |  |  |  |  |  |  |  146|      0|      ::google::protobuf::internal::LogMessage( \
  |  |  |  |  |  |  |  |  |  |  147|      0|          ::google::protobuf::LOGLEVEL_##LEVEL, __FILE__, __LINE__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 29.9k, False: 2.28k]
  |  |  |  |  |  |  |  |  |  Branch (149:5): [True: 2.28k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  559|  34.5k|  __builtin_assume(pred)
  |  |  ------------------
  |  |  |  Branch (559:20): [True: 29.9k, False: 2.28k]
  |  |  |  Branch (559:20): [True: 2.28k, False: 0]
  |  |  ------------------
  ------------------
16224|  32.2k|  return value;
16225|  32.2k|}
_ZNK4cdef11Declaration17has_attr_spec_seqEv:
16226|  32.2k|inline bool Declaration::has_attr_spec_seq() const {
16227|  32.2k|  return _internal_has_attr_spec_seq();
16228|  32.2k|}
_ZNK4cdef11Declaration23_internal_attr_spec_seqEv:
16233|  2.28k|inline const ::cdef::AttrSpecSeq& Declaration::_internal_attr_spec_seq() const {
16234|  2.28k|  const ::cdef::AttrSpecSeq* p = _impl_.attr_spec_seq_;
16235|  2.28k|  return p != nullptr ? *p : reinterpret_cast<const ::cdef::AttrSpecSeq&>(
  ------------------
  |  Branch (16235:10): [True: 2.28k, False: 0]
  ------------------
16236|      0|      ::cdef::_AttrSpecSeq_default_instance_);
16237|  2.28k|}
_ZNK4cdef11Declaration13attr_spec_seqEv:
16238|  2.28k|inline const ::cdef::AttrSpecSeq& Declaration::attr_spec_seq() const {
16239|       |  // @@protoc_insertion_point(field_get:cdef.Declaration.attr_spec_seq)
16240|  2.28k|  return _internal_attr_spec_seq();
16241|  2.28k|}
_ZNK4cdef12Declarations27_internal_declarations_sizeEv:
16315|  50.0k|inline int Declarations::_internal_declarations_size() const {
16316|  50.0k|  return _impl_.declarations_.size();
16317|  50.0k|}
_ZNK4cdef12Declarations17declarations_sizeEv:
16318|  50.0k|inline int Declarations::declarations_size() const {
16319|  50.0k|  return _internal_declarations_size();
16320|  50.0k|}
_ZNK4cdef12Declarations22_internal_declarationsEi:
16333|  32.2k|inline const ::cdef::Declaration& Declarations::_internal_declarations(int index) const {
16334|  32.2k|  return _impl_.declarations_.Get(index);
16335|  32.2k|}
_ZNK4cdef12Declarations12declarationsEi:
16336|  32.2k|inline const ::cdef::Declaration& Declarations::declarations(int index) const {
16337|       |  // @@protoc_insertion_point(field_get:cdef.Declarations.declarations)
16338|  32.2k|  return _internal_declarations(index);
16339|  32.2k|}

_ZN14ffi_cdef_proto23MainDefinitionsToStringERKN4cdef12DeclarationsE:
 1104|  17.8k|{
 1105|  17.8k|	std::string decls_str = DeclarationsToString(decls);
 1106|       |
 1107|  17.8k|	return decls_str;
 1108|  17.8k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_120DeclarationsToStringERKN4cdef12DeclarationsE:
 1091|  17.8k|{
 1092|  17.8k|	std::string declarations_str;
 1093|       |
 1094|  50.0k|	for (int i = 0; i < declarations.declarations_size(); ++i)
  ------------------
  |  Branch (1094:18): [True: 32.2k, False: 17.8k]
  ------------------
 1095|  32.2k|		declarations_str += DeclarationToString(declarations.declarations(i));
 1096|       |
 1097|  17.8k|	return declarations_str;
 1098|  17.8k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_119DeclarationToStringERKN4cdef11DeclarationE:
 1053|  32.2k|{
 1054|  32.2k|	std::string declaration_str;
 1055|  32.2k|	std::string specifiers_and_qualifiers_list_str =
 1056|  32.2k|		SpecifiersAndQualifiersListToString(declaration.specifiers_and_qualifiers_list());
 1057|  32.2k|	std::string declarators_and_initializers_str =
 1058|  32.2k|		DeclaratorsAndInitializersToString(declaration.declarators_and_initializers());
 1059|  32.2k|	if (declaration.has_attr_spec_seq()) {
  ------------------
  |  Branch (1059:6): [True: 2.28k, False: 29.9k]
  ------------------
 1060|  2.28k|		declaration_str += AttrSpecSeqToString(declaration.attr_spec_seq());
 1061|  2.28k|		if (declaration.has_declarators_and_initializers() &&
  ------------------
  |  Branch (1061:7): [True: 1.31k, False: 967]
  ------------------
 1062|  2.28k|			declaration.has_specifiers_and_qualifiers_list()) {
  ------------------
  |  Branch (1062:4): [True: 949, False: 365]
  ------------------
 1063|    949|			declaration_str += specifiers_and_qualifiers_list_str;
 1064|    949|			declaration_str += " ";
 1065|    949|			declaration_str += declarators_and_initializers_str;
 1066|    949|		}
 1067|  2.28k|		if (!declaration_str.empty())
  ------------------
  |  Branch (1067:7): [True: 949, False: 1.33k]
  ------------------
 1068|    949|			declaration_str += ";\n";
 1069|       |
 1070|  2.28k|		return declaration_str;
 1071|  2.28k|	}
 1072|       |
 1073|  29.9k|	if (declaration.has_specifiers_and_qualifiers_list()) {
  ------------------
  |  Branch (1073:6): [True: 23.6k, False: 6.29k]
  ------------------
 1074|  23.6k|		declaration_str += specifiers_and_qualifiers_list_str;
 1075|  23.6k|		if (declaration.has_declarators_and_initializers() &&
  ------------------
  |  Branch (1075:7): [True: 6.60k, False: 17.0k]
  ------------------
 1076|  23.6k|			!declarators_and_initializers_str.empty())
  ------------------
  |  Branch (1076:4): [True: 4.92k, False: 1.68k]
  ------------------
 1077|  4.92k|			declaration_str += " " + declarators_and_initializers_str;
 1078|  23.6k|		if (!declaration_str.empty())
  ------------------
  |  Branch (1078:7): [True: 19.7k, False: 3.89k]
  ------------------
 1079|  19.7k|			declaration_str += ";\n";
 1080|       |
 1081|  23.6k|		return declaration_str;
 1082|  23.6k|	}
 1083|       |
 1084|  6.29k|	return declaration_str;
 1085|  29.9k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_135SpecifiersAndQualifiersListToStringERKN4cdef27SpecifiersAndQualifiersListE:
  502|  32.2k|{
  503|  32.2k|	std::string specifiers_and_qualifiers_list_str;
  504|  69.5k|	for (int i = 0; i < specifiers_and_qualifiers_list.specifiers_and_qualifiers_list_size(); ++i) {
  ------------------
  |  Branch (504:18): [True: 37.2k, False: 32.2k]
  ------------------
  505|  37.2k|		specifiers_and_qualifiers_list_str +=
  506|  37.2k|			SpecifierAndQualifierToString(specifiers_and_qualifiers_list.specifiers_and_qualifiers_list(i));
  507|  37.2k|		if (!specifiers_and_qualifiers_list_str.empty() &&
  ------------------
  |  Branch (507:7): [True: 24.5k, False: 12.7k]
  ------------------
  508|  37.2k|			i != specifiers_and_qualifiers_list.specifiers_and_qualifiers_list_size() - 1)
  ------------------
  |  Branch (508:4): [True: 6.28k, False: 18.2k]
  ------------------
  509|  6.28k|			specifiers_and_qualifiers_list_str += " ";
  510|  37.2k|	}
  511|       |
  512|  32.2k|	return specifiers_and_qualifiers_list_str;
  513|  32.2k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_129SpecifierAndQualifierToStringERKN4cdef21SpecifierAndQualifierE:
  483|  37.2k|{
  484|  37.2k|	std::string specifier_and_qualifier_str;
  485|  37.2k|	if (specifier_and_qualifier.has_specifiers_list()) {
  ------------------
  |  Branch (485:6): [True: 30.9k, False: 6.29k]
  ------------------
  486|  30.9k|		if (!specifier_and_qualifier_str.empty())
  ------------------
  |  Branch (486:7): [True: 0, False: 30.9k]
  ------------------
  487|      0|			specifier_and_qualifier_str += " ";
  488|  30.9k|		specifier_and_qualifier_str +=
  489|  30.9k|			SpecifiersListToString(specifier_and_qualifier.specifiers_list());
  490|  30.9k|	}
  491|  37.2k|	if (specifier_and_qualifier.has_qualifiers_list()) {
  ------------------
  |  Branch (491:6): [True: 7.11k, False: 30.1k]
  ------------------
  492|  7.11k|		if (!specifier_and_qualifier_str.empty())
  ------------------
  |  Branch (492:7): [True: 2.17k, False: 4.93k]
  ------------------
  493|  2.17k|			specifier_and_qualifier_str += " ";
  494|  7.11k|		specifier_and_qualifier_str +=
  495|  7.11k|			QualifiersListToString(specifier_and_qualifier.qualifiers_list());
  496|  7.11k|	}
  497|       |
  498|  37.2k|	return specifier_and_qualifier_str;
  499|  37.2k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_122SpecifiersListToStringERKN4cdef14SpecifiersListE:
  437|  30.9k|{
  438|  30.9k|	std::string specifiers_list_str;
  439|  84.3k|	for (int i = 0; i < specifiers_list.specifiers_list_size(); ++i) {
  ------------------
  |  Branch (439:18): [True: 53.3k, False: 30.9k]
  ------------------
  440|  53.3k|		std::string spec_list = SpecifierToString(specifiers_list.specifiers_list(i));
  441|  53.3k|		if (spec_list.empty())
  ------------------
  |  Branch (441:7): [True: 24.0k, False: 29.3k]
  ------------------
  442|  24.0k|			continue;
  443|  29.3k|		if (i != 0)
  ------------------
  |  Branch (443:7): [True: 10.9k, False: 18.3k]
  ------------------
  444|  10.9k|			specifiers_list_str += " ";
  445|  29.3k|		specifiers_list_str += spec_list;
  446|  29.3k|	}
  447|       |
  448|  30.9k|	return specifiers_list_str;
  449|  30.9k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_117SpecifierToStringERKN4cdef9SpecifierE:
  409|  53.3k|{
  410|  53.3k|	std::string specifier_str;
  411|  53.3k|	using Spec = Specifier::SpecifierOneofCase;
  412|  53.3k|	switch (specifier.specifier_oneof_case()) {
  413|  32.2k|	case Spec::kTypeSpecifier:
  ------------------
  |  Branch (413:2): [True: 32.2k, False: 21.1k]
  ------------------
  414|  32.2k|		specifier_str +=
  415|  32.2k|			TypeSpecifierToString(specifier.type_specifier());
  416|  32.2k|		break;
  417|  3.60k|	case Spec::kStorageClassSpecifier:
  ------------------
  |  Branch (417:2): [True: 3.60k, False: 49.7k]
  ------------------
  418|  3.60k|		specifier_str +=
  419|  3.60k|			StorageClassSpecifierToString(specifier.storage_class_specifier());
  420|  3.60k|		break;
  421|  3.37k|	case Spec::kFunctionSpecifier:
  ------------------
  |  Branch (421:2): [True: 3.37k, False: 50.0k]
  ------------------
  422|  3.37k|		specifier_str +=
  423|  3.37k|			FunctionSpecifierToString(specifier.function_specifier());
  424|  3.37k|		break;
  425|  4.68k|	case Spec::kAlignmentSpecifier:
  ------------------
  |  Branch (425:2): [True: 4.68k, False: 48.7k]
  ------------------
  426|  4.68k|		specifier_str +=
  427|  4.68k|			AlignmentSpecifierToString(specifier.alignment_specifier());
  428|  4.68k|		break;
  429|  9.52k|	default:
  ------------------
  |  Branch (429:2): [True: 9.52k, False: 43.8k]
  ------------------
  430|  9.52k|		break;
  431|  53.3k|	}
  432|       |
  433|  53.3k|	return specifier_str;
  434|  53.3k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_121TypeSpecifierToStringERKN4cdef13TypeSpecifierE:
  366|  32.2k|{
  367|  32.2k|	std::string type_specifier_str;
  368|  32.2k|	using TypeType = TypeSpecifier::TypeSpecifierOneofCase;
  369|  32.2k|	switch (type_specifier.type_specifier_oneof_case()) {
  370|  1.35k|	case TypeType::kVoidType:
  ------------------
  |  Branch (370:2): [True: 1.35k, False: 30.8k]
  ------------------
  371|  1.35k|		type_specifier_str = "void";
  372|  1.35k|		break;
  373|  3.47k|	case TypeType::kArithmeticType:
  ------------------
  |  Branch (373:2): [True: 3.47k, False: 28.7k]
  ------------------
  374|  3.47k|		type_specifier_str =
  375|  3.47k|			ArithmeticTypeToString(type_specifier.arithmetic_type());
  376|  3.47k|		break;
  377|  1.16k|	case TypeType::kAtomicType:
  ------------------
  |  Branch (377:2): [True: 1.16k, False: 31.0k]
  ------------------
  378|  1.16k|		type_specifier_str =
  379|  1.16k|			AtomicTypeToString(type_specifier.atomic_type());
  380|  1.16k|		break;
  381|  1.58k|	case TypeType::kTypedefType:
  ------------------
  |  Branch (381:2): [True: 1.58k, False: 30.6k]
  ------------------
  382|  1.58k|		type_specifier_str =
  383|  1.58k|			TypedefTypeToString(type_specifier.typedef_type());
  384|  1.58k|		break;
  385|  2.58k|	case TypeType::kStructType:
  ------------------
  |  Branch (385:2): [True: 2.58k, False: 29.6k]
  ------------------
  386|  2.58k|		type_specifier_str =
  387|  2.58k|			StructTypeToString(type_specifier.struct_type());
  388|  2.58k|		break;
  389|  15.6k|	case TypeType::kUnionType:
  ------------------
  |  Branch (389:2): [True: 15.6k, False: 16.5k]
  ------------------
  390|  15.6k|		type_specifier_str =
  391|  15.6k|			UnionTypeToString(type_specifier.union_type());
  392|  15.6k|		break;
  393|  1.80k|	case TypeType::kEnumType:
  ------------------
  |  Branch (393:2): [True: 1.80k, False: 30.4k]
  ------------------
  394|  1.80k|		type_specifier_str =
  395|  1.80k|			EnumTypeToString(type_specifier.enum_type());
  396|  1.80k|		break;
  397|  2.45k|	case TypeType::kTypeofOperator:
  ------------------
  |  Branch (397:2): [True: 2.45k, False: 29.7k]
  ------------------
  398|  2.45k|		type_specifier_str =
  399|  2.45k|			TypeOfOperatorToString(type_specifier.typeof_operator());
  400|  2.45k|		break;
  401|  2.12k|	default:
  ------------------
  |  Branch (401:2): [True: 2.12k, False: 30.0k]
  ------------------
  402|  2.12k|		break;
  403|  32.2k|	}
  404|       |
  405|  32.2k|	return type_specifier_str;
  406|  32.2k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_122ArithmeticTypeToStringERKN4cdef14ArithmeticTypeE:
  762|  3.47k|{
  763|  3.47k|	std::string type_str;
  764|  3.47k|	using TypeType = ArithmeticType::ArithmeticOneofCase;
  765|  3.47k|	switch (arithmetic_type.arithmetic_oneof_case()) {
  766|       |	/* Boolean type. */
  767|    154|	case TypeType::kTypeBool1:
  ------------------
  |  Branch (767:2): [True: 154, False: 3.31k]
  ------------------
  768|    154|		type_str = "bool";
  769|    154|		break;
  770|     97|	case TypeType::kTypeBool2:
  ------------------
  |  Branch (770:2): [True: 97, False: 3.37k]
  ------------------
  771|     97|		type_str = "_Bool";
  772|     97|		break;
  773|       |	/* Character types. */
  774|      2|	case TypeType::kTypeSignedChar:
  ------------------
  |  Branch (774:2): [True: 2, False: 3.47k]
  ------------------
  775|      2|		type_str = "signed char";
  776|      2|		break;
  777|      0|	case TypeType::kTypeUnsignedChar:
  ------------------
  |  Branch (777:2): [True: 0, False: 3.47k]
  ------------------
  778|      0|		type_str = "unsigned char";
  779|      0|		break;
  780|    252|	case TypeType::kTypeChar:
  ------------------
  |  Branch (780:2): [True: 252, False: 3.22k]
  ------------------
  781|    252|		type_str = "char";
  782|    252|		break;
  783|       |	/* Integer types. */
  784|      7|	case TypeType::kTypeShortInt1:
  ------------------
  |  Branch (784:2): [True: 7, False: 3.46k]
  ------------------
  785|      7|		type_str = "short int";
  786|      7|		break;
  787|     23|	case TypeType::kTypeShortInt2:
  ------------------
  |  Branch (787:2): [True: 23, False: 3.44k]
  ------------------
  788|     23|		type_str = "short";
  789|     23|		break;
  790|     78|	case TypeType::kTypeShortInt3:
  ------------------
  |  Branch (790:2): [True: 78, False: 3.39k]
  ------------------
  791|     78|		type_str = "signed";
  792|     78|		break;
  793|      0|	case TypeType::kTypeUnsignedShortInt1:
  ------------------
  |  Branch (793:2): [True: 0, False: 3.47k]
  ------------------
  794|      0|		type_str = "unsigned short int";
  795|      0|		break;
  796|      6|	case TypeType::kTypeUnsignedShortInt2:
  ------------------
  |  Branch (796:2): [True: 6, False: 3.46k]
  ------------------
  797|      6|		type_str = "unsigned short";
  798|      6|		break;
  799|     66|	case TypeType::kTypeInt1:
  ------------------
  |  Branch (799:2): [True: 66, False: 3.40k]
  ------------------
  800|     66|		type_str = "int";
  801|     66|		break;
  802|    207|	case TypeType::kTypeInt2:
  ------------------
  |  Branch (802:2): [True: 207, False: 3.26k]
  ------------------
  803|    207|		type_str = "signed int";
  804|    207|		break;
  805|      6|	case TypeType::kTypeUnsignedInt1:
  ------------------
  |  Branch (805:2): [True: 6, False: 3.46k]
  ------------------
  806|      6|		type_str = "unsigned int";
  807|      6|		break;
  808|      1|	case TypeType::kTypeUnsignedInt2:
  ------------------
  |  Branch (808:2): [True: 1, False: 3.47k]
  ------------------
  809|      1|		type_str = "unsigned";
  810|      1|		break;
  811|     13|	case TypeType::kTypeLongInt1:
  ------------------
  |  Branch (811:2): [True: 13, False: 3.45k]
  ------------------
  812|     13|		type_str = "long int";
  813|     13|		break;
  814|     21|	case TypeType::kTypeLongInt2:
  ------------------
  |  Branch (814:2): [True: 21, False: 3.45k]
  ------------------
  815|     21|		type_str = "long";
  816|     21|		break;
  817|     12|	case TypeType::kTypeUnsignedLongInt1:
  ------------------
  |  Branch (817:2): [True: 12, False: 3.46k]
  ------------------
  818|     12|		type_str = "unsigned long int";
  819|     12|		break;
  820|      7|	case TypeType::kTypeUnsignedLongInt2:
  ------------------
  |  Branch (820:2): [True: 7, False: 3.46k]
  ------------------
  821|      7|		type_str = "unsigned long";
  822|      7|		break;
  823|     40|	case TypeType::kTypeLongLongInt1:
  ------------------
  |  Branch (823:2): [True: 40, False: 3.43k]
  ------------------
  824|     40|		type_str = "long long int";
  825|     40|		break;
  826|     45|	case TypeType::kTypeLongLongInt2:
  ------------------
  |  Branch (826:2): [True: 45, False: 3.42k]
  ------------------
  827|     45|		type_str = "long long";
  828|     45|		break;
  829|    154|	case TypeType::kTypeUnsignedLongLongInt1:
  ------------------
  |  Branch (829:2): [True: 154, False: 3.31k]
  ------------------
  830|    154|		type_str = "unsigned long long int";
  831|    154|		break;
  832|    657|	case TypeType::kTypeUnsignedLongLongInt2:
  ------------------
  |  Branch (832:2): [True: 657, False: 2.81k]
  ------------------
  833|    657|		type_str = "unsigned long long";
  834|    657|		break;
  835|     12|	case TypeType::kTypeBitInt:
  ------------------
  |  Branch (835:2): [True: 12, False: 3.46k]
  ------------------
  836|       |		/* XXX: Fixed precise width. */
  837|     12|		type_str = "_BitInt(1)";
  838|     12|		break;
  839|      5|	case TypeType::kTypeUnsignedBitInt:
  ------------------
  |  Branch (839:2): [True: 5, False: 3.46k]
  ------------------
  840|       |		/* XXX: Fixed precise width. */
  841|      5|		type_str = "unsigned _BitInt(1)";
  842|      5|		break;
  843|       |	/* Real floating types. */
  844|     33|	case TypeType::kTypeFloat:
  ------------------
  |  Branch (844:2): [True: 33, False: 3.43k]
  ------------------
  845|     33|		type_str = "float";
  846|     33|		break;
  847|     11|	case TypeType::kTypeDouble:
  ------------------
  |  Branch (847:2): [True: 11, False: 3.46k]
  ------------------
  848|     11|		type_str = "double";
  849|     11|		break;
  850|     14|	case TypeType::kTypeLongDouble:
  ------------------
  |  Branch (850:2): [True: 14, False: 3.45k]
  ------------------
  851|     14|		type_str = "long double";
  852|     14|		break;
  853|      4|	case TypeType::kTypeDecimal32:
  ------------------
  |  Branch (853:2): [True: 4, False: 3.46k]
  ------------------
  854|      4|		type_str = "_Decimal32";
  855|      4|		break;
  856|     26|	case TypeType::kTypeDecimal64:
  ------------------
  |  Branch (856:2): [True: 26, False: 3.44k]
  ------------------
  857|     26|		type_str = "_Decimal64";
  858|     26|		break;
  859|      0|	case TypeType::kTypeDecimal128:
  ------------------
  |  Branch (859:2): [True: 0, False: 3.47k]
  ------------------
  860|      0|		type_str = "_Decimal128";
  861|      0|		break;
  862|       |	/* Complex floating types. */
  863|     88|	case TypeType::kTypeFloatComplex:
  ------------------
  |  Branch (863:2): [True: 88, False: 3.38k]
  ------------------
  864|     88|		type_str = "float complex";
  865|     88|		break;
  866|     24|	case TypeType::kTypeDoubleComplex:
  ------------------
  |  Branch (866:2): [True: 24, False: 3.44k]
  ------------------
  867|     24|		type_str = "double complex";
  868|     24|		break;
  869|     20|	case TypeType::kTypeLongDoubleComplex:
  ------------------
  |  Branch (869:2): [True: 20, False: 3.45k]
  ------------------
  870|     20|		type_str = "long double complex";
  871|     20|		break;
  872|       |	/* Imaginary floating types. */
  873|    212|	case TypeType::kTypeFloatImaginary:
  ------------------
  |  Branch (873:2): [True: 212, False: 3.26k]
  ------------------
  874|    212|		type_str = "float imaginary";
  875|    212|		break;
  876|      0|	case TypeType::kTypeDoubleImaginary:
  ------------------
  |  Branch (876:2): [True: 0, False: 3.47k]
  ------------------
  877|      0|		type_str = "double imaginary";
  878|      0|		break;
  879|     17|	case TypeType::kTypeLongDoubleImaginary:
  ------------------
  |  Branch (879:2): [True: 17, False: 3.45k]
  ------------------
  880|     17|		type_str = "long double imaginary";
  881|     17|		break;
  882|  1.15k|	default:
  ------------------
  |  Branch (882:2): [True: 1.15k, False: 2.31k]
  ------------------
  883|  1.15k|		break;
  884|  3.47k|	}
  885|       |
  886|  3.47k|	return type_str;
  887|  3.47k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_118AtomicTypeToStringERKN4cdef10AtomicTypeE:
  893|  1.16k|{
  894|  1.16k|	return "_Atomic";
  895|  1.16k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_119TypedefTypeToStringERKN4cdef11TypedefTypeE:
  901|  1.58k|{
  902|       |	/* FIXME: Not implemented. */
  903|  1.58k|	return "";
  904|  1.58k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_118StructTypeToStringERKN4cdef10StructTypeE:
  979|  2.58k|{
  980|  2.58k|	std::string struct_type_str = "struct";
  981|       |
  982|  2.58k|	if (struct_type.has_attr_spec_seq())
  ------------------
  |  Branch (982:6): [True: 577, False: 2.00k]
  ------------------
  983|    577|		struct_type_str += " " +
  984|    577|			AttrSpecSeqToString(struct_type.attr_spec_seq());
  985|  2.58k|	if (struct_type.has_name()) {
  ------------------
  |  Branch (985:6): [True: 364, False: 2.22k]
  ------------------
  986|    364|		if (!struct_type_str.empty())
  ------------------
  |  Branch (986:7): [True: 364, False: 0]
  ------------------
  987|    364|			struct_type_str += " ";
  988|    364|		struct_type_str += IdentifierToString(struct_type.name());
  989|    364|	}
  990|       |
  991|  2.58k|	struct_type_str += "\n{";
  992|  2.58k|	struct_type_str +=
  993|  2.58k|		StructDeclarationListToString(struct_type.struct_declaration_list());
  994|  2.58k|	struct_type_str += "\n};\n";
  995|       |
  996|  2.58k|	return struct_type_str;
  997|  2.58k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_118IdentifierToStringERKN4cdef10IdentifierE:
  209|  15.4k|{
  210|  15.4k|	std::string identifier_str;
  211|  15.4k|	identifier_str += ConvertToStringDefault(identifier.name());
  212|  15.4k|	identifier_str += std::to_string(identifier.num() % kMaxIdentifiers);
  213|  15.4k|	if (KReservedCKeywords.find(identifier_str) !=
  ------------------
  |  Branch (213:6): [True: 93, False: 15.3k]
  ------------------
  214|  15.4k|		KReservedCKeywords.end()) {
  215|     93|		identifier_str += "_1";
  216|     93|	}
  217|       |
  218|  15.4k|	return identifier_str;
  219|  15.4k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_122ConvertToStringDefaultERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  195|  15.4k|{
  196|  15.4k|	std::string ident = ClearIdentifier(s);
  197|  15.4k|	ident = clamp(ident);
  198|  15.4k|	if (ident.empty())
  ------------------
  |  Branch (198:6): [True: 13.0k, False: 2.44k]
  ------------------
  199|  13.0k|		return std::string(kDefaultIdent);
  200|  2.44k|	return ident;
  201|  15.4k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_115ClearIdentifierERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  169|  15.4k|{
  170|       |	/* FIXME */
  171|  15.4k|	std::string cleared;
  172|       |
  173|  15.4k|	bool has_first_not_digit = false;
  174|  27.6k|	for (char c : identifier) {
  ------------------
  |  Branch (174:14): [True: 27.6k, False: 15.4k]
  ------------------
  175|  27.6k|		if (has_first_not_digit && (std::iswalnum(c) || c == '_')) {
  ------------------
  |  Branch (175:7): [True: 19.0k, False: 8.53k]
  |  Branch (175:31): [True: 17.2k, False: 1.77k]
  |  Branch (175:51): [True: 585, False: 1.19k]
  ------------------
  176|  17.8k|			cleared += c;
  177|  17.8k|		} else if (std::isalpha(c) || c == '_') {
  ------------------
  |  Branch (177:14): [True: 2.03k, False: 7.69k]
  |  Branch (177:33): [True: 414, False: 7.28k]
  ------------------
  178|  2.44k|			has_first_not_digit = true;
  179|  2.44k|			cleared += c;
  180|  2.44k|		}
  181|  27.6k|	}
  182|  15.4k|	return cleared;
  183|  15.4k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_15clampENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEm:
  187|  15.4k|{
  188|  15.4k|	if (s.size() > maxSize)
  ------------------
  |  Branch (188:6): [True: 157, False: 15.2k]
  ------------------
  189|    157|		s.resize(maxSize);
  190|  15.4k|	return s;
  191|  15.4k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_129StructDeclarationListToStringERKN4cdef21StructDeclarationListE:
  961|  18.2k|{
  962|  18.2k|	std::string struct_declaration_list_str;
  963|  18.2k|	struct_declaration_list_str += "\n";
  964|  53.4k|	for (int i = 0; i < struct_declaration_list.struct_declaration_list_size(); ++i) {
  ------------------
  |  Branch (964:18): [True: 35.1k, False: 18.2k]
  ------------------
  965|  35.1k|		std::string struct_declaration_str =
  966|  35.1k|			StructDeclarationToString(struct_declaration_list.struct_declaration_list(i));
  967|  35.1k|		if (struct_declaration_str.empty())
  ------------------
  |  Branch (967:7): [True: 3.77k, False: 31.4k]
  ------------------
  968|  3.77k|			continue;
  969|  31.4k|		struct_declaration_list_str += struct_declaration_str + ";\n";
  970|  31.4k|	}
  971|       |
  972|  18.2k|	return struct_declaration_list_str;
  973|  18.2k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_125StructDeclarationToStringERKN4cdef17StructDeclarationE:
  941|  35.1k|{
  942|  35.1k|	std::string struct_declaration_str;
  943|  35.1k|	using StructDecl = StructDeclaration::StructDeclOneofCase;
  944|  35.1k|	switch (struct_declaration.struct_decl_oneof_case()) {
  945|  3.24k|	case StructDecl::kBitField:
  ------------------
  |  Branch (945:2): [True: 3.24k, False: 31.9k]
  ------------------
  946|  3.24k|		struct_declaration_str +=
  947|  3.24k|			"  " + BitfieldToString(struct_declaration.bit_field());
  948|  3.24k|		break;
  949|  28.1k|	case StructDecl::kStaticAssertion:
  ------------------
  |  Branch (949:2): [True: 28.1k, False: 7.02k]
  ------------------
  950|  28.1k|		struct_declaration_str +=
  951|  28.1k|			"  " + StaticAssertionToString(struct_declaration.static_assertion());
  952|  28.1k|		break;
  953|  3.77k|	default:
  ------------------
  |  Branch (953:2): [True: 3.77k, False: 31.4k]
  ------------------
  954|  3.77k|		break;
  955|  35.1k|	}
  956|       |
  957|  35.1k|	return struct_declaration_str;
  958|  35.1k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_116BitfieldToStringERKN4cdef8BitfieldE:
  749|  3.24k|{
  750|  3.24k|	std::string bit_field_type_str;
  751|  3.24k|	if (bit_field_type.has_name())
  ------------------
  |  Branch (751:6): [True: 789, False: 2.45k]
  ------------------
  752|    789|		bit_field_type_str += IdentifierToString(bit_field_type.name());
  753|  3.24k|	bit_field_type_str += " : " + std::to_string(bit_field_type.width());
  754|       |
  755|  3.24k|	return bit_field_type_str;
  756|  3.24k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_123StaticAssertionToStringERKN4cdef15StaticAssertionE:
  910|  28.1k|{
  911|  28.1k|	std::string static_assertion_str;
  912|  28.1k|	using StaticAssert = StaticAssertion::StaticAssertOneofCase;
  913|  28.1k|	switch (static_assertion.static_assert_oneof_case()) {
  914|  13.1k|	case StaticAssert::kStaticAssert1:
  ------------------
  |  Branch (914:2): [True: 13.1k, False: 14.9k]
  ------------------
  915|  13.1k|		static_assertion_str += "_Static_assert";
  916|  13.1k|		break;
  917|  13.8k|	case StaticAssert::kStaticAssert2:
  ------------------
  |  Branch (917:2): [True: 13.8k, False: 14.2k]
  ------------------
  918|  13.8k|		static_assertion_str += "static_assert";
  919|  13.8k|		break;
  920|  1.08k|	default:
  ------------------
  |  Branch (920:2): [True: 1.08k, False: 27.0k]
  ------------------
  921|  1.08k|		break;
  922|  28.1k|	}
  923|       |
  924|  28.1k|	if (static_assertion_str.empty())
  ------------------
  |  Branch (924:6): [True: 1.08k, False: 27.0k]
  ------------------
  925|  1.08k|		return static_assertion_str;
  926|       |
  927|  27.0k|	static_assertion_str += "(";
  928|  27.0k|	static_assertion_str += std::to_string(static_assertion.expression());
  929|  27.0k|	static_assertion_str += ")";
  930|       |
  931|  27.0k|	if (static_assertion.has_message())
  ------------------
  |  Branch (931:6): [True: 26.2k, False: 792]
  ------------------
  932|  26.2k|		static_assertion_str += ", " + static_assertion.message();
  933|       |
  934|  27.0k|	if (!static_assertion_str.empty())
  ------------------
  |  Branch (934:6): [True: 27.0k, False: 0]
  ------------------
  935|  27.0k|		static_assertion_str += ";\n";
  936|       |
  937|  27.0k|	return static_assertion_str;
  938|  28.1k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_117UnionTypeToStringERKN4cdef9UnionTypeE:
 1003|  15.6k|{
 1004|  15.6k|	std::string union_type_str = "union";
 1005|       |
 1006|  15.6k|	if (union_type.has_attr_spec_seq())
  ------------------
  |  Branch (1006:6): [True: 895, False: 14.7k]
  ------------------
 1007|    895|		union_type_str += " " + AttrSpecSeqToString(union_type.attr_spec_seq());
 1008|       |
 1009|  15.6k|	if (union_type.has_name())
  ------------------
  |  Branch (1009:6): [True: 852, False: 14.8k]
  ------------------
 1010|    852|		union_type_str += " " + IdentifierToString(union_type.name());
 1011|       |
 1012|  15.6k|	union_type_str += "\n{";
 1013|  15.6k|	union_type_str +=
 1014|  15.6k|		StructDeclarationListToString(union_type.struct_declaration_list());
 1015|  15.6k|	union_type_str += "\n};\n";
 1016|       |
 1017|  15.6k|	return union_type_str;
 1018|  15.6k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_116EnumTypeToStringERKN4cdef8EnumTypeE:
 1024|  1.80k|{
 1025|  1.80k|	std::string enum_type_str;
 1026|  1.80k|	enum_type_str += "enum ";
 1027|  1.80k|	enum_type_str += IdentifierToString(enum_type.enum_name());
 1028|  1.80k|	enum_type_str += " {";
 1029|  4.17k|	for (int i = 0; i < enum_type.constant_size(); ++i) {
  ------------------
  |  Branch (1029:18): [True: 2.37k, False: 1.80k]
  ------------------
 1030|  2.37k|		enum_type_str += IdentifierToString(enum_type.constant(i));
 1031|  2.37k|		if (i != enum_type.constant_size() - 1 &&
  ------------------
  |  Branch (1031:7): [True: 1.72k, False: 645]
  ------------------
 1032|  2.37k|			!enum_type_str.empty())
  ------------------
  |  Branch (1032:4): [True: 1.72k, False: 0]
  ------------------
 1033|  1.72k|			enum_type_str += ", ";
 1034|  2.37k|	}
 1035|  1.80k|	enum_type_str += "};\n";
 1036|       |
 1037|  1.80k|	return enum_type_str;
 1038|  1.80k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_122TypeOfOperatorToStringERKN4cdef14TypeOfOperatorE:
 1044|  2.45k|{
 1045|       |	/* FIXME: Not implemented. */
 1046|  2.45k|	return "";
 1047|  2.45k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_129StorageClassSpecifierToStringERKN4cdef21StorageClassSpecifierE:
  330|  3.60k|{
  331|  3.60k|	std::string storage_class_specifier_str;
  332|  3.60k|	using StorageClassSpecifierKeyword = StorageClassSpecifier::StorageClassSpecifierOneofCase;
  333|  3.60k|	switch (storage_class_specifier.storage_class_specifier_oneof_case()) {
  334|    682|	case StorageClassSpecifierKeyword::kStorageClassTypedef:
  ------------------
  |  Branch (334:2): [True: 682, False: 2.92k]
  ------------------
  335|    682|		storage_class_specifier_str = "typedef";
  336|    682|		break;
  337|     66|	case StorageClassSpecifierKeyword::kStorageClassConstexpr:
  ------------------
  |  Branch (337:2): [True: 66, False: 3.53k]
  ------------------
  338|     66|		storage_class_specifier_str = "constexpr";
  339|     66|		break;
  340|    450|	case StorageClassSpecifierKeyword::kStorageClassAuto:
  ------------------
  |  Branch (340:2): [True: 450, False: 3.15k]
  ------------------
  341|    450|		storage_class_specifier_str = "auto";
  342|    450|		break;
  343|     52|	case StorageClassSpecifierKeyword::kStorageClassRegister:
  ------------------
  |  Branch (343:2): [True: 52, False: 3.55k]
  ------------------
  344|     52|		storage_class_specifier_str = "register";
  345|     52|		break;
  346|    159|	case StorageClassSpecifierKeyword::kStorageClassStatic:
  ------------------
  |  Branch (346:2): [True: 159, False: 3.44k]
  ------------------
  347|    159|		storage_class_specifier_str = "static";
  348|    159|		break;
  349|    239|	case StorageClassSpecifierKeyword::kStorageClassExtern:
  ------------------
  |  Branch (349:2): [True: 239, False: 3.36k]
  ------------------
  350|    239|		storage_class_specifier_str = "extern";
  351|    239|		break;
  352|     41|	case StorageClassSpecifierKeyword::kStorageClassThreadLocal1:
  ------------------
  |  Branch (352:2): [True: 41, False: 3.56k]
  ------------------
  353|     41|		storage_class_specifier_str = "thread_local";
  354|     41|		break;
  355|     36|	case StorageClassSpecifierKeyword::kStorageClassThreadLocal2:
  ------------------
  |  Branch (355:2): [True: 36, False: 3.56k]
  ------------------
  356|     36|		storage_class_specifier_str = "_Thread_local";
  357|     36|		break;
  358|  1.88k|	default:
  ------------------
  |  Branch (358:2): [True: 1.88k, False: 1.72k]
  ------------------
  359|  1.88k|		break;
  360|  3.60k|	}
  361|       |
  362|  3.60k|	return storage_class_specifier_str;
  363|  3.60k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_125FunctionSpecifierToStringERKN4cdef17FunctionSpecifierE:
  314|  3.37k|{
  315|  3.37k|	std::string function_specifier_str;
  316|  3.37k|	if (function_specifier.has_keyword_inline()) {
  ------------------
  |  Branch (316:6): [True: 629, False: 2.74k]
  ------------------
  317|    629|		function_specifier_str += "inline";
  318|    629|	}
  319|       |
  320|  3.37k|	if (function_specifier.has_keyword_noreturn()) {
  ------------------
  |  Branch (320:6): [True: 983, False: 2.39k]
  ------------------
  321|    983|		if (!function_specifier_str.empty())
  ------------------
  |  Branch (321:7): [True: 87, False: 896]
  ------------------
  322|     87|			function_specifier_str += " ";
  323|    983|		function_specifier_str += "_Noreturn";
  324|    983|	}
  325|       |
  326|  3.37k|	return function_specifier_str;
  327|  3.37k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_126AlignmentSpecifierToStringERKN4cdef18AlignmentSpecifierE:
  305|  4.68k|{
  306|  4.68k|	std::string alignment_specifier_str;
  307|  4.68k|	if (alignment_specifier.has_alignment_specifier_alignas())
  ------------------
  |  Branch (307:6): [True: 1.21k, False: 3.46k]
  ------------------
  308|  1.21k|		alignment_specifier_str += "_Alignas";
  309|       |
  310|  4.68k|	return alignment_specifier_str;
  311|  4.68k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_122QualifiersListToStringERKN4cdef14QualifiersListE:
  468|  10.8k|{
  469|  10.8k|	std::string qualifiers_list_str;
  470|  17.9k|	for (int i = 0; i < qualifiers_list.qualifiers_list_size(); ++i) {
  ------------------
  |  Branch (470:18): [True: 7.05k, False: 10.8k]
  ------------------
  471|  7.05k|		std::string qualifier_str = QualifierToString(qualifiers_list.qualifiers_list(i));
  472|  7.05k|		if (qualifier_str.empty())
  ------------------
  |  Branch (472:7): [True: 3.16k, False: 3.89k]
  ------------------
  473|  3.16k|			continue;
  474|  3.89k|		if (!qualifiers_list_str.empty())
  ------------------
  |  Branch (474:7): [True: 877, False: 3.01k]
  ------------------
  475|    877|			qualifiers_list_str += " ";
  476|  3.89k|		qualifiers_list_str += QualifierToString(qualifiers_list.qualifiers_list(i));
  477|  3.89k|	}
  478|       |
  479|  10.8k|	return qualifiers_list_str;
  480|  10.8k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_117QualifierToStringERKN4cdef9QualifierE:
  452|  10.9k|{
  453|  10.9k|	std::string qualifier_str;
  454|  10.9k|	using Qual = Qualifier::QualifierOneofCase;
  455|  10.9k|	switch (qualifier.qualifier_oneof_case()) {
  456|  8.20k|	case Qual::kTypeQualifier:
  ------------------
  |  Branch (456:2): [True: 8.20k, False: 2.74k]
  ------------------
  457|  8.20k|		qualifier_str +=
  458|  8.20k|			TypeQualifierToString(qualifier.type_qualifier());
  459|  8.20k|		break;
  460|  2.74k|	default:
  ------------------
  |  Branch (460:2): [True: 2.74k, False: 8.20k]
  ------------------
  461|  2.74k|		break;
  462|  10.9k|	}
  463|       |
  464|  10.9k|	return qualifier_str;
  465|  10.9k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_121TypeQualifierToStringERKN4cdef13TypeQualifierE:
  281|  8.20k|{
  282|  8.20k|	std::string type_qualifier_str;
  283|  8.20k|	if (type_qualifier.has_keyword_const())
  ------------------
  |  Branch (283:6): [True: 3.81k, False: 4.38k]
  ------------------
  284|  3.81k|		type_qualifier_str += "const";
  285|  8.20k|	if (type_qualifier.has_keyword_volatile()) {
  ------------------
  |  Branch (285:6): [True: 2.08k, False: 6.11k]
  ------------------
  286|  2.08k|		if (!type_qualifier_str.empty())
  ------------------
  |  Branch (286:7): [True: 1.30k, False: 774]
  ------------------
  287|  1.30k|			type_qualifier_str += " ";
  288|  2.08k|		type_qualifier_str += "volatile";
  289|  2.08k|	}
  290|  8.20k|	if (type_qualifier.has_keyword_restrict()) {
  ------------------
  |  Branch (290:6): [True: 2.45k, False: 5.74k]
  ------------------
  291|  2.45k|		if (!type_qualifier_str.empty())
  ------------------
  |  Branch (291:7): [True: 1.38k, False: 1.07k]
  ------------------
  292|  1.38k|			type_qualifier_str += " ";
  293|  2.45k|		type_qualifier_str += "restrict";
  294|  2.45k|	}
  295|  8.20k|	if (type_qualifier.has_keyword_atomic()) {
  ------------------
  |  Branch (295:6): [True: 2.67k, False: 5.52k]
  ------------------
  296|  2.67k|		if (!type_qualifier_str.empty())
  ------------------
  |  Branch (296:7): [True: 562, False: 2.11k]
  ------------------
  297|    562|			type_qualifier_str += " ";
  298|  2.67k|		type_qualifier_str += "atomic";
  299|  2.67k|	}
  300|       |
  301|  8.20k|	return type_qualifier_str;
  302|  8.20k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_134DeclaratorsAndInitializersToStringERKN4cdef26DeclaratorsAndInitializersE:
  557|  32.2k|{
  558|  32.2k|	std::string declarators_and_initializers_str;
  559|  55.4k|	for (int i = 0; i < declarators_and_initializers.declarators_size(); ++i) {
  ------------------
  |  Branch (559:18): [True: 23.2k, False: 32.2k]
  ------------------
  560|  23.2k|		declarators_and_initializers_str +=
  561|  23.2k|			DeclaratorToString(declarators_and_initializers.declarators(i));
  562|  23.2k|		if (i != declarators_and_initializers.declarators_size() - 1)
  ------------------
  |  Branch (562:7): [True: 12.6k, False: 10.5k]
  ------------------
  563|  12.6k|			declarators_and_initializers_str += ", ";
  564|  23.2k|	}
  565|       |
  566|  35.1k|	for (int i = 0; i < declarators_and_initializers.initializers_size(); ++i) {
  ------------------
  |  Branch (566:18): [True: 2.93k, False: 32.2k]
  ------------------
  567|  2.93k|		declarators_and_initializers_str +=
  568|  2.93k|			InitializerToString(declarators_and_initializers.initializers(i));
  569|  2.93k|	}
  570|       |
  571|  32.2k|	return declarators_and_initializers_str;
  572|  32.2k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_118DeclaratorToStringERKN4cdef10DeclaratorE:
  516|  40.4k|{
  517|  40.4k|	std::string declarator_str;
  518|  40.4k|	using TDeclarator = Declarator::DeclaratorOneofCase;
  519|  40.4k|	switch (declarator.declarator_oneof_case()) {
  520|  4.43k|	case TDeclarator::kDeclaratorAttr:
  ------------------
  |  Branch (520:2): [True: 4.43k, False: 36.0k]
  ------------------
  521|  4.43k|		declarator_str +=
  522|  4.43k|			DeclaratorAttrToString(declarator.declarator_attr());
  523|  4.43k|		break;
  524|  3.07k|	case TDeclarator::kDeclaratorParentheses:
  ------------------
  |  Branch (524:2): [True: 3.07k, False: 37.3k]
  ------------------
  525|  3.07k|		declarator_str +=
  526|  3.07k|			DeclaratorParenthesesToString(declarator.declarator_parentheses());
  527|  3.07k|		break;
  528|  4.33k|	case TDeclarator::kPointerDeclarator:
  ------------------
  |  Branch (528:2): [True: 4.33k, False: 36.1k]
  ------------------
  529|  4.33k|		declarator_str +=
  530|  4.33k|			PointerDeclaratorToString(declarator.pointer_declarator());
  531|  4.33k|		break;
  532|  5.24k|	case TDeclarator::kArrayDeclarator:
  ------------------
  |  Branch (532:2): [True: 5.24k, False: 35.1k]
  ------------------
  533|  5.24k|		declarator_str +=
  534|  5.24k|			ArrayDeclaratorToString(declarator.array_declarator());
  535|  5.24k|		break;
  536|  9.79k|	case TDeclarator::kFunctionDeclarator:
  ------------------
  |  Branch (536:2): [True: 9.79k, False: 30.6k]
  ------------------
  537|  9.79k|		declarator_str +=
  538|  9.79k|			FunctionDeclaratorToString(declarator.function_declarator());
  539|  9.79k|		break;
  540|  13.5k|	default:
  ------------------
  |  Branch (540:2): [True: 13.5k, False: 26.8k]
  ------------------
  541|  13.5k|		break;
  542|  40.4k|	}
  543|       |
  544|  40.4k|	return declarator_str;
  545|  40.4k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_122DeclaratorAttrToStringERKN4cdef14DeclaratorAttrE:
  644|  4.43k|{
  645|  4.43k|	std::string declarator_attr_str;
  646|  4.43k|	declarator_attr_str += IdentifierToString(declarator_attr.name());
  647|  4.43k|	if (declarator_attr.has_attr_spec_seq())
  ------------------
  |  Branch (647:6): [True: 756, False: 3.68k]
  ------------------
  648|    756|		declarator_attr_str += " " +
  649|    756|			AttrSpecSeqToString(declarator_attr.attr_spec_seq());
  650|       |
  651|  4.43k|	return declarator_attr_str;
  652|  4.43k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_129DeclaratorParenthesesToStringERKN4cdef21DeclaratorParenthesesE:
  655|  3.07k|{
  656|  3.07k|	std::string declarator_parentheses_str = "(";
  657|  3.07k|	declarator_parentheses_str +=
  658|  3.07k|		DeclaratorToString(declarator_parentheses.declarator());
  659|  3.07k|	declarator_parentheses_str += ")";
  660|       |
  661|  3.07k|	return declarator_parentheses_str;
  662|  3.07k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_125PointerDeclaratorToStringERKN4cdef17PointerDeclaratorE:
  701|  4.33k|{
  702|  4.33k|	std::string pointer_declarator_str = "*";
  703|  4.33k|	if (pointer_declarator.has_attr_spec_seq())
  ------------------
  |  Branch (703:6): [True: 724, False: 3.61k]
  ------------------
  704|    724|		pointer_declarator_str += " " +
  705|    724|			AttrSpecSeqToString(pointer_declarator.attr_spec_seq());
  706|  4.33k|	if (pointer_declarator.has_qualifiers_list())
  ------------------
  |  Branch (706:6): [True: 1.51k, False: 2.82k]
  ------------------
  707|  1.51k|		pointer_declarator_str += " " +
  708|  1.51k|			QualifiersListToString(pointer_declarator.qualifiers_list());
  709|  4.33k|	pointer_declarator_str += DeclaratorToString(pointer_declarator.declarator());
  710|       |
  711|  4.33k|	return pointer_declarator_str;
  712|  4.33k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_123ArrayDeclaratorToStringERKN4cdef15ArrayDeclaratorE:
  718|  5.24k|{
  719|  5.24k|	std::string array_declarator_str;
  720|  5.24k|	if (array_declarator.has_keyword_static() &&
  ------------------
  |  Branch (720:6): [True: 1.57k, False: 3.67k]
  ------------------
  721|  5.24k|	    array_declarator.has_qualifiers_list() &&
  ------------------
  |  Branch (721:6): [True: 1.08k, False: 483]
  ------------------
  722|  5.24k|		array_declarator.has_expression()) {
  ------------------
  |  Branch (722:3): [True: 824, False: 263]
  ------------------
  723|    824|		array_declarator_str += "static ";
  724|    824|		array_declarator_str += QualifiersListToString(array_declarator.qualifiers_list());
  725|       |		/* FIXME: expression is not a constant number. */
  726|    824|		array_declarator_str +=
  727|    824|			"[" +
  728|    824|			std::to_string(array_declarator.expression()) +
  729|    824|			"]";
  730|  4.42k|	} else if (array_declarator.has_qualifiers_list()) {
  ------------------
  |  Branch (730:13): [True: 1.40k, False: 3.02k]
  ------------------
  731|  1.40k|		array_declarator_str +=
  732|  1.40k|			"[" +
  733|  1.40k|			QualifiersListToString(array_declarator.qualifiers_list()) +
  734|  1.40k|			" * ]";
  735|  1.40k|	} else
  736|  3.02k|		return "";
  737|       |
  738|  2.22k|	if (array_declarator.has_attr_spec_seq())
  ------------------
  |  Branch (738:6): [True: 103, False: 2.12k]
  ------------------
  739|    103|		array_declarator_str += " " +
  740|    103|			AttrSpecSeqToString(array_declarator.attr_spec_seq());
  741|       |
  742|  2.22k|	return array_declarator_str;
  743|  5.24k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_126FunctionDeclaratorToStringERKN4cdef18FunctionDeclaratorE:
  668|  9.79k|{
  669|  9.79k|	std::string function_declarator_str;
  670|  9.79k|	function_declarator_str +=
  671|  9.79k|		DeclaratorToString(function_declarator.noptr_declarator());
  672|  9.79k|	function_declarator_str += "(";
  673|       |
  674|  9.79k|	using FuncDecl = FunctionDeclarator::ParenthesesContentOneofCase;
  675|  9.79k|	switch (function_declarator.parentheses_content_oneof_case()) {
  676|  5.18k|	case FuncDecl::kParametersList:
  ------------------
  |  Branch (676:2): [True: 5.18k, False: 4.61k]
  ------------------
  677|  5.18k|		function_declarator_str +=
  678|  5.18k|			ParametersListToString(function_declarator.parameters_list());
  679|  5.18k|		break;
  680|  2.18k|	case FuncDecl::kIdentifiersList:
  ------------------
  |  Branch (680:2): [True: 2.18k, False: 7.61k]
  ------------------
  681|  2.18k|		function_declarator_str +=
  682|  2.18k|			IdentifiersListToString(function_declarator.identifiers_list());
  683|  2.18k|		break;
  684|  2.42k|	default:
  ------------------
  |  Branch (684:2): [True: 2.42k, False: 7.36k]
  ------------------
  685|  2.42k|		break;
  686|  9.79k|	}
  687|       |
  688|  9.79k|	function_declarator_str += ")";
  689|       |
  690|  9.79k|	if (function_declarator.has_attr_spec_seq())
  ------------------
  |  Branch (690:6): [True: 707, False: 9.09k]
  ------------------
  691|    707|		function_declarator_str += " " +
  692|    707|			AttrSpecSeqToString(function_declarator.attr_spec_seq());
  693|       |
  694|  9.79k|	return function_declarator_str;
  695|  9.79k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_122ParametersListToStringERKN4cdef14ParametersListE:
  255|  5.18k|{
  256|  5.18k|	std::string parameters_list_str;
  257|       |
  258|  5.18k|	using ParametersList = ParametersList::ParametersListOneofCase;
  259|  5.18k|	switch (parameters_list.parameters_list_oneof_case()) {
  260|    743|	case ParametersList::kKeywordVoid:
  ------------------
  |  Branch (260:2): [True: 743, False: 4.44k]
  ------------------
  261|    743|		parameters_list_str += "void";
  262|    743|		break;
  263|  3.04k|	case ParametersList::kParameters:
  ------------------
  |  Branch (263:2): [True: 3.04k, False: 2.14k]
  ------------------
  264|  3.04k|		parameters_list_str +=
  265|  3.04k|			ParametersToString(parameters_list.parameters());
  266|  3.04k|		break;
  267|  1.40k|	default:
  ------------------
  |  Branch (267:2): [True: 1.40k, False: 3.78k]
  ------------------
  268|  1.40k|		break;
  269|  5.18k|	}
  270|       |
  271|  5.18k|	if (parameters_list.has_ellipsis()) {
  ------------------
  |  Branch (271:6): [True: 833, False: 4.35k]
  ------------------
  272|    833|		if (!parameters_list_str.empty())
  ------------------
  |  Branch (272:7): [True: 204, False: 629]
  ------------------
  273|    204|			parameters_list_str += ", ";
  274|    833|		parameters_list_str += "...";
  275|    833|	}
  276|       |
  277|  5.18k|	return parameters_list_str;
  278|  5.18k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_118ParametersToStringERKN4cdef10ParametersE:
  244|  3.04k|{
  245|  3.04k|	std::string parameters_str;
  246|  4.33k|	for (int i = 0; i < parameters.parameters_size(); ++i) {
  ------------------
  |  Branch (246:18): [True: 1.28k, False: 3.04k]
  ------------------
  247|  1.28k|		parameters_str += ParameterToString(parameters.parameters(i));
  248|  1.28k|		if (i != parameters.parameters_size() - 1)
  ------------------
  |  Branch (248:7): [True: 280, False: 1.00k]
  ------------------
  249|    280|			parameters_str += ", ";
  250|  1.28k|	}
  251|  3.04k|	return parameters_str;
  252|  3.04k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_117ParameterToStringERKN4cdef9ParameterE:
  237|  1.28k|{
  238|  1.28k|	std::string parameter_str;
  239|  1.28k|	parameter_str += IdentifierToString(parameter.name());
  240|  1.28k|	return parameter_str;
  241|  1.28k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_123IdentifiersListToStringERKN4cdef15IdentifiersListE:
  222|  2.18k|{
  223|  2.18k|	std::string identifiers_list_str;
  224|  5.72k|	for (int i = 0; i < identifiers.identifiers_size(); ++i) {
  ------------------
  |  Branch (224:18): [True: 3.54k, False: 2.18k]
  ------------------
  225|  3.54k|		std::string ident_str = IdentifierToString(identifiers.identifiers(i));
  226|  3.54k|		if (ident_str.empty())
  ------------------
  |  Branch (226:7): [True: 0, False: 3.54k]
  ------------------
  227|      0|			continue;
  228|  3.54k|		if (i != 0)
  ------------------
  |  Branch (228:7): [True: 2.17k, False: 1.37k]
  ------------------
  229|  2.17k|			identifiers_list_str += ", ";
  230|  3.54k|		identifiers_list_str += ident_str;
  231|  3.54k|	}
  232|       |
  233|  2.18k|	return identifiers_list_str;
  234|  2.18k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_119InitializerToStringERKN4cdef11InitializerE:
  551|  2.93k|{
  552|       |	/* FIXME: Not implemented. */
  553|  2.93k|	return "";
  554|  2.93k|}
cdef_print.cc:_ZN14ffi_cdef_proto12_GLOBAL__N_119AttrSpecSeqToStringERKN4cdef11AttrSpecSeqE:
  575|  6.04k|{
  576|  6.04k|	std::string attr_spec_seq_str;
  577|  6.04k|#ifdef C99
  578|  6.04k|	return attr_spec_seq_str;
  579|      0|#endif /* C99 */
  580|      0|	if (attr_spec_seq.has_keyword_deprecated()) {
  ------------------
  |  Branch (580:6): [True: 0, False: 0]
  ------------------
  581|      0|		if (!attr_spec_seq_str.empty())
  ------------------
  |  Branch (581:7): [True: 0, False: 0]
  ------------------
  582|      0|			attr_spec_seq_str += " ";
  583|      0|		attr_spec_seq_str += "[[deprecated]]";
  584|      0|	}
  585|       |
  586|      0|	if (attr_spec_seq.has_keyword_deprecated_reason()) {
  ------------------
  |  Branch (586:6): [True: 0, False: 0]
  ------------------
  587|      0|		if (!attr_spec_seq_str.empty())
  ------------------
  |  Branch (587:7): [True: 0, False: 0]
  ------------------
  588|      0|			attr_spec_seq_str += " ";
  589|      0|		attr_spec_seq_str += "[[deprecated(\"reason\")]]";
  590|      0|	}
  591|       |
  592|      0|	if (attr_spec_seq.has_keyword_fallthrough()) {
  ------------------
  |  Branch (592:6): [True: 0, False: 0]
  ------------------
  593|      0|		if (!attr_spec_seq_str.empty())
  ------------------
  |  Branch (593:7): [True: 0, False: 0]
  ------------------
  594|      0|			attr_spec_seq_str += " ";
  595|      0|		attr_spec_seq_str += "[[fallthrough]]";
  596|      0|	}
  597|       |
  598|      0|	if (attr_spec_seq.has_keyword_nodiscard()) {
  ------------------
  |  Branch (598:6): [True: 0, False: 0]
  ------------------
  599|      0|		if (!attr_spec_seq_str.empty())
  ------------------
  |  Branch (599:7): [True: 0, False: 0]
  ------------------
  600|      0|			attr_spec_seq_str += " ";
  601|      0|		attr_spec_seq_str += "[[nodiscard]]";
  602|      0|	}
  603|       |
  604|      0|	if (attr_spec_seq.has_keyword_nodiscard_reason()) {
  ------------------
  |  Branch (604:6): [True: 0, False: 0]
  ------------------
  605|      0|		if (!attr_spec_seq_str.empty())
  ------------------
  |  Branch (605:7): [True: 0, False: 0]
  ------------------
  606|      0|			attr_spec_seq_str += " ";
  607|      0|		attr_spec_seq_str += "[[nodiscard(\"reason\")]]";
  608|      0|	}
  609|       |
  610|      0|	if (attr_spec_seq.has_keyword_maybe_unused()) {
  ------------------
  |  Branch (610:6): [True: 0, False: 0]
  ------------------
  611|      0|		if (!attr_spec_seq_str.empty())
  ------------------
  |  Branch (611:7): [True: 0, False: 0]
  ------------------
  612|      0|			attr_spec_seq_str += " ";
  613|      0|		attr_spec_seq_str += "[[maybe_unused]]";
  614|      0|	}
  615|       |
  616|      0|	if (attr_spec_seq.has_keyword_noreturn_1()) {
  ------------------
  |  Branch (616:6): [True: 0, False: 0]
  ------------------
  617|      0|		if (!attr_spec_seq_str.empty())
  ------------------
  |  Branch (617:7): [True: 0, False: 0]
  ------------------
  618|      0|			attr_spec_seq_str += " ";
  619|      0|		attr_spec_seq_str += "[[noreturn]]";
  620|      0|	}
  621|       |
  622|      0|	if (attr_spec_seq.has_keyword_noreturn_2()) {
  ------------------
  |  Branch (622:6): [True: 0, False: 0]
  ------------------
  623|      0|		if (!attr_spec_seq_str.empty())
  ------------------
  |  Branch (623:7): [True: 0, False: 0]
  ------------------
  624|      0|			attr_spec_seq_str += " ";
  625|      0|		attr_spec_seq_str += "[[_Noreturn]]";
  626|      0|	}
  627|       |
  628|      0|	if (attr_spec_seq.has_keyword_unsequenced()) {
  ------------------
  |  Branch (628:6): [True: 0, False: 0]
  ------------------
  629|      0|		if (!attr_spec_seq_str.empty())
  ------------------
  |  Branch (629:7): [True: 0, False: 0]
  ------------------
  630|      0|			attr_spec_seq_str += " ";
  631|      0|		attr_spec_seq_str += "[[unsequenced]]";
  632|      0|	}
  633|       |
  634|      0|	if (attr_spec_seq.has_keyword_reproducible()) {
  ------------------
  |  Branch (634:6): [True: 0, False: 0]
  ------------------
  635|      0|		if (!attr_spec_seq_str.empty())
  ------------------
  |  Branch (635:7): [True: 0, False: 0]
  ------------------
  636|      0|			attr_spec_seq_str += " ";
  637|      0|		attr_spec_seq_str += "[[reproducible]]";
  638|      0|	}
  639|       |
  640|      0|	return attr_spec_seq_str;
  641|  6.04k|}

ffi_cdef_proto_test.cc:_ZL17TestOneProtoInputRKN4cdef12DeclarationsE:
   43|  17.8k|{
   44|  17.8k|	lua_State *L = luaL_newstate();
   45|  17.8k|	if (!L)
  ------------------
  |  Branch (45:6): [True: 0, False: 17.8k]
  ------------------
   46|      0|		return;
   47|       |
   48|  17.8k|	std::string cdef = ffi_cdef_proto::MainDefinitionsToString(message);
   49|  17.8k|	std::string chunk = "local ffi = require('ffi')\n";
   50|  17.8k|	chunk += "ffi.cdef[[\n";
   51|  17.8k|	chunk += cdef;
   52|  17.8k|	chunk += "]]\n";
   53|       |
   54|  17.8k|	if (::getenv("LPM_DUMP_NATIVE_INPUT") && chunk.size() != 0) {
  ------------------
  |  Branch (54:6): [True: 0, False: 17.8k]
  |  Branch (54:43): [True: 0, False: 0]
  ------------------
   55|      0|		std::cout << "-------------------------" << std::endl;
   56|      0|		std::cout << chunk << std::endl;
   57|      0|	}
   58|       |
   59|  17.8k|	luaL_openlibs(L);
   60|       |
   61|  17.8k|	if (luaL_loadbuffer(L, chunk.c_str(), chunk.size(), "fuzz") != LUA_OK) {
  ------------------
  |  |   43|  17.8k|#define LUA_OK		0
  ------------------
  |  Branch (61:6): [True: 6.74k, False: 11.0k]
  ------------------
   62|  6.74k|		report_error(L, "luaL_loadbuffer()");
   63|  6.74k|		goto end;
   64|  6.74k|	}
   65|       |
   66|       |	/*
   67|       |	 * Using lua_pcall (protected call) to catch errors due to
   68|       |	 * wrong semantics of some generated C code chunks.
   69|       |	 */
   70|  11.0k|	if (lua_pcall(L, 0, 0, 0) != LUA_OK) {
  ------------------
  |  |   43|  11.0k|#define LUA_OK		0
  ------------------
  |  Branch (70:6): [True: 7.26k, False: 3.82k]
  ------------------
   71|  7.26k|		report_error(L, "lua_pcall()");
   72|  7.26k|		goto end;
   73|  7.26k|	}
   74|       |
   75|  17.8k|end:
   76|  17.8k|	lua_settop(L, 0);
   77|  17.8k|	lua_close(L);
   78|  17.8k|}
ffi_cdef_proto_test.cc:_ZL12report_errorP9lua_StateRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
   31|  14.0k|{
   32|  14.0k|	const char *verbose = ::getenv("LUA_FUZZER_VERBOSE");
   33|  14.0k|	if (!verbose)
  ------------------
  |  Branch (33:6): [True: 14.0k, False: 0]
  ------------------
   34|  14.0k|		return;
   35|       |
   36|      0|	std::string err_str = lua_tostring(L, 1);
  ------------------
  |  |  281|      0|#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
  ------------------
   37|       |	/* Pop error message from stack. */
   38|      0|	lua_pop(L, 1);
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   39|      0|	std::cerr << prefix << " error: " << err_str << std::endl;
   40|      0|}

