luaL_findtable:
   84|   110k|{
   85|   110k|  const char *e;
   86|   110k|  lua_pushvalue(L, idx);
   87|   110k|  do {
   88|   110k|    e = strchr(fname, '.');
   89|   110k|    if (e == NULL) e = fname + strlen(fname);
  ------------------
  |  Branch (89:9): [True: 110k, False: 0]
  ------------------
   90|   110k|    lua_pushlstring(L, fname, (size_t)(e - fname));
   91|   110k|    lua_rawget(L, -2);
   92|   110k|    if (lua_isnil(L, -1)) {  /* no such field? */
  ------------------
  |  |  269|   110k|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|   110k|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 110k, False: 0]
  |  |  ------------------
  ------------------
   93|   110k|      lua_pop(L, 1);  /* remove this nil */
  ------------------
  |  |  256|   110k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   94|   110k|      lua_createtable(L, 0, (*e == '.' ? 1 : szhint)); /* new table for field */
  ------------------
  |  Branch (94:30): [True: 0, False: 110k]
  ------------------
   95|   110k|      lua_pushlstring(L, fname, (size_t)(e - fname));
   96|   110k|      lua_pushvalue(L, -2);
   97|   110k|      lua_settable(L, -4);  /* set new table into field */
   98|   110k|    } else if (!lua_istable(L, -1)) {  /* field has a non-table value? */
  ------------------
  |  |  267|      0|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|      0|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (98:16): [True: 0, False: 0]
  ------------------
   99|      0|      lua_pop(L, 2);  /* remove table and value */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  100|      0|      return fname;  /* return problematic part of the name */
  101|      0|    }
  102|   110k|    lua_remove(L, -2);  /* remove previous table */
  103|   110k|    fname = e + 1;
  104|   110k|  } while (*e == '.');
  ------------------
  |  Branch (104:12): [True: 0, False: 110k]
  ------------------
  105|   110k|  return NULL;
  106|   110k|}
luaL_pushmodule:
  116|  36.7k|{
  117|  36.7k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_LOADED", 16);
  ------------------
  |  |   36|  36.7k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  118|  36.7k|  lua_getfield(L, -1, modname);
  119|  36.7k|  if (!lua_istable(L, -1)) {
  ------------------
  |  |  267|  36.7k|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|  36.7k|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (119:7): [True: 36.7k, False: 0]
  ------------------
  120|  36.7k|    lua_pop(L, 1);
  ------------------
  |  |  256|  36.7k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  121|  36.7k|    if (luaL_findtable(L, LUA_GLOBALSINDEX, modname, sizehint) != NULL)
  ------------------
  |  |   38|  36.7k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (121:9): [True: 0, False: 36.7k]
  ------------------
  122|      0|      lj_err_callerv(L, LJ_ERR_BADMODN, modname);
  123|  36.7k|    lua_pushvalue(L, -1);
  124|  36.7k|    lua_setfield(L, -3, modname);  /* _LOADED[modname] = new table. */
  125|  36.7k|  }
  126|  36.7k|  lua_remove(L, -2);  /* Remove _LOADED table. */
  127|  36.7k|}
luaL_openlib:
  131|  36.7k|{
  132|  36.7k|  lj_lib_checkfpu(L);
  ------------------
  |  |   74|  36.7k|#define lj_lib_checkfpu(L)	UNUSED(L)
  |  |  ------------------
  |  |  |  |   91|  36.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  133|  36.7k|  if (libname) {
  ------------------
  |  Branch (133:7): [True: 36.7k, False: 0]
  ------------------
  134|  36.7k|    luaL_pushmodule(L, libname, libsize(l));
  135|  36.7k|    lua_insert(L, -(nup + 1));  /* Move module table below upvalues. */
  136|  36.7k|  }
  137|  36.7k|  if (l)
  ------------------
  |  Branch (137:7): [True: 36.7k, False: 0]
  ------------------
  138|  36.7k|    luaL_setfuncs(L, l, nup);
  139|      0|  else
  140|      0|    lua_pop(L, nup);  /* Remove upvalues. */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  141|  36.7k|}
luaL_register:
  145|  36.7k|{
  146|  36.7k|  luaL_openlib(L, libname, l, 0);
  147|  36.7k|}
luaL_setfuncs:
  150|  36.7k|{
  151|  36.7k|  luaL_checkstack(L, nup, "too many upvalues");
  152|  73.4k|  for (; l->name; l++) {
  ------------------
  |  Branch (152:10): [True: 36.7k, False: 36.7k]
  ------------------
  153|  36.7k|    int i;
  154|  36.7k|    for (i = 0; i < nup; i++)  /* Copy upvalues to the top. */
  ------------------
  |  Branch (154:17): [True: 0, False: 36.7k]
  ------------------
  155|      0|      lua_pushvalue(L, -nup);
  156|  36.7k|    lua_pushcclosure(L, l->func, nup);
  157|  36.7k|    lua_setfield(L, -(nup + 2), l->name);
  158|  36.7k|  }
  159|  36.7k|  lua_pop(L, nup);  /* Remove upvalues. */
  ------------------
  |  |  256|  36.7k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  160|  36.7k|}
luaL_ref:
  278|    126|{
  279|    126|  int ref;
  280|    126|  t = abs_index(L, t);
  ------------------
  |  |  275|    126|  ((i) > 0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
  |  |  ------------------
  |  |  |  |   36|      0|#define LUA_REGISTRYINDEX	(-10000)
  |  |  ------------------
  |  |  |  Branch (275:4): [True: 126, False: 0]
  |  |  |  Branch (275:15): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  281|    126|  if (lua_isnil(L, -1)) {
  ------------------
  |  |  269|    126|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|    126|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 19, False: 107]
  |  |  ------------------
  ------------------
  282|     19|    lua_pop(L, 1);  /* remove from stack */
  ------------------
  |  |  256|     19|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  283|     19|    return LUA_REFNIL;  /* `nil' has a unique fixed reference */
  ------------------
  |  |   60|     19|#define LUA_REFNIL      (-1)
  ------------------
  284|     19|  }
  285|    107|  lua_rawgeti(L, t, FREELIST_REF);  /* get first free element */
  ------------------
  |  |  271|    107|#define FREELIST_REF	0
  ------------------
  286|    107|  ref = (int)lua_tointeger(L, -1);  /* ref = t[FREELIST_REF] */
  287|    107|  lua_pop(L, 1);  /* remove it from stack */
  ------------------
  |  |  256|    107|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  288|    107|  if (ref != 0) {  /* any free element? */
  ------------------
  |  Branch (288:7): [True: 0, False: 107]
  ------------------
  289|      0|    lua_rawgeti(L, t, ref);  /* remove it from list */
  290|      0|    lua_rawseti(L, t, FREELIST_REF);  /* (t[FREELIST_REF] = t[ref]) */
  ------------------
  |  |  271|      0|#define FREELIST_REF	0
  ------------------
  291|    107|  } else {  /* no free elements */
  292|    107|    ref = (int)lua_objlen(L, t);
  293|    107|    ref++;  /* create new reference */
  294|    107|  }
  295|    107|  lua_rawseti(L, t, ref);
  296|    107|  return ref;
  297|    126|}
luaL_newstate:
  371|  36.7k|{
  372|  36.7k|  lua_State *L;
  373|       |#if LJ_64 && !LJ_GC64
  374|       |  L = lj_state_newstate(LJ_ALLOCF_INTERNAL, NULL);
  375|       |#else
  376|  36.7k|  L = lua_newstate(LJ_ALLOCF_INTERNAL, NULL);
  ------------------
  |  |   36|  36.7k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  377|  36.7k|#endif
  378|  36.7k|  if (L) {
  ------------------
  |  Branch (378:7): [True: 36.7k, False: 0]
  ------------------
  379|  36.7k|    G(L)->panic = panic;
  ------------------
  |  |  705|  36.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  380|  36.7k|#ifndef LUAJIT_DISABLE_VMEVENT
  381|  36.7k|    luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   36|  36.7k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   12|  36.7k|#define LJ_VMEVENTS_REGKEY	"_VMEVENTS"
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   13|  36.7k|#define LJ_VMEVENTS_HSIZE	4
  ------------------
  382|  36.7k|    lua_pushcfunction(L, error_finalizer);
  ------------------
  |  |  262|  36.7k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  383|  36.7k|    lua_rawseti(L, -2, VMEVENT_HASH(LJ_VMEVENT_ERRFIN));
  ------------------
  |  |   16|  36.7k|#define VMEVENT_HASH(ev)	((int)(ev) & ~7)
  ------------------
  384|  36.7k|    G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |  705|  36.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |   15|  36.7k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  ------------------
  385|  36.7k|    L->top--;
  386|  36.7k|#endif
  387|  36.7k|  }
  388|  36.7k|  return L;
  389|  36.7k|}
lib_aux.c:libsize:
  109|  36.7k|{
  110|  36.7k|  int size = 0;
  111|  73.4k|  for (; l && l->name; l++) size++;
  ------------------
  |  Branch (111:10): [True: 73.4k, False: 0]
  |  Branch (111:15): [True: 36.7k, False: 36.7k]
  ------------------
  112|  36.7k|  return size;
  113|  36.7k|}

lj_alloc_create:
 1392|  36.7k|{
 1393|  36.7k|  size_t tsize = DEFAULT_GRANULARITY;
  ------------------
  |  |   41|  36.7k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
 1394|       |#if LUAJIT_USE_ASAN
 1395|       |  tsize -= TOTAL_REDZONE_SIZE;
 1396|       |#endif
 1397|  36.7k|  char *tbase;
 1398|  36.7k|  INIT_MMAP();
  ------------------
  |  |  527|  36.7k|#define INIT_MMAP()		((void)0)
  ------------------
 1399|  36.7k|  UNUSED(rs);
  ------------------
  |  |   91|  36.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1400|  36.7k|  tbase = (char *)(CALL_MMAP(rs, tsize));
  ------------------
  |  |  438|  36.7k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1401|  36.7k|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|  36.7k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  36.7k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  36.7k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1401:7): [True: 36.7k, False: 0]
  ------------------
 1402|  36.7k|    size_t msize = pad_request(sizeof(struct malloc_state));
  ------------------
  |  |  587|  36.7k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|  36.7k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  36.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1403|  36.7k|    mchunkptr mn;
 1404|       |#if LUAJIT_USE_ASAN
 1405|       |    mchunkptr msp = (mchunkptr)(tbase + align_offset(chunk2mem(tbase) - REDZONE_SIZE));
 1406|       |    mstate m = (mstate)(chunk2mem(msp) - REDZONE_SIZE);
 1407|       |#else
 1408|  36.7k|    mchunkptr msp = align_as_chunk(tbase);
  ------------------
  |  |  579|  36.7k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  36.7k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 36.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  36.7k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1409|  36.7k|    mstate m = (mstate)(chunk2mem(msp));
  ------------------
  |  |  575|  36.7k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  36.7k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  36.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1410|  36.7k|#endif
 1411|  36.7k|    memset(m, 0, msize);
 1412|  36.7k|    msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  595|  36.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  596|  36.7k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|  36.7k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
 1413|  36.7k|    m->seg.base = tbase;
 1414|  36.7k|    m->seg.size = tsize;
 1415|  36.7k|    m->release_checks = MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|  36.7k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1416|  36.7k|    init_bins(m);
 1417|       |#if LUAJIT_USE_ASAN
 1418|       |    mn = next_chunk((mchunkptr)((char *)(m) - TWO_SIZE_T_SIZES));
 1419|       |#else
 1420|  36.7k|    mn = next_chunk(mem2chunk(m));
  ------------------
  |  |  615|  36.7k|#define next_chunk(p)	((mchunkptr)(((char *)(p)) + ((p)->head & ~INUSE_BITS)))
  |  |  ------------------
  |  |  |  |  597|  36.7k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  36.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  36.7k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  36.7k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1421|  36.7k|#endif
 1422|  36.7k|    init_top(m, mn, (size_t)((tbase + tsize) - (char *)mn) - TOP_FOOT_SIZE);
  ------------------
  |  |  754|  36.7k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  36.7k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  36.7k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|  36.7k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  36.7k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  36.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|  36.7k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  36.7k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1423|  36.7k|    return m;
 1424|  36.7k|  }
 1425|      0|  return NULL;
 1426|  36.7k|}
lj_alloc_setprng:
 1429|  36.7k|{
 1430|  36.7k|  mstate ms = (mstate)msp;
 1431|  36.7k|  ms->prng = rs;
 1432|  36.7k|}
lj_alloc_destroy:
 1435|  36.7k|{
 1436|  36.7k|  mstate ms = (mstate)msp;
 1437|  36.7k|  msegmentptr sp = &ms->seg;
 1438|  73.4k|  while (sp != 0) {
  ------------------
  |  Branch (1438:10): [True: 36.7k, False: 36.7k]
  ------------------
 1439|  36.7k|    char *base = sp->base;
 1440|  36.7k|    size_t size = sp->size;
 1441|  36.7k|    sp = sp->next;
 1442|       |#if LUAJIT_USE_ASAN
 1443|       |    ASAN_UNPOISON_MEMORY_REGION(base, size);
 1444|       |#endif
 1445|  36.7k|    CALL_MUNMAP(base, size);
 1446|  36.7k|  }
 1447|  36.7k|}
lj_alloc_f:
 1711|  5.29M|{
 1712|  5.29M|  (void)osize;
 1713|  5.29M|  if (nsize == 0) {
  ------------------
  |  Branch (1713:7): [True: 2.72M, False: 2.56M]
  ------------------
 1714|  2.72M|    return lj_alloc_free(msp, ptr);
 1715|  2.72M|  } else if (ptr == NULL) {
  ------------------
  |  Branch (1715:14): [True: 2.55M, False: 12.6k]
  ------------------
 1716|  2.55M|    return lj_alloc_malloc(msp, nsize);
 1717|  2.55M|  } else {
 1718|  12.6k|    return lj_alloc_realloc(msp, ptr, nsize);
 1719|  12.6k|  }
 1720|  5.29M|}
lj_alloc.c:mmap_probe:
  334|  36.7k|{
  335|       |  /* Hint for next allocation. Doesn't need to be thread-safe. */
  336|  36.7k|  static uintptr_t hint_addr = 0;
  337|  36.7k|  int olderr = errno;
  338|  36.7k|  int retry;
  339|       |#if LUAJIT_USE_ASAN
  340|       |  size_t mem_size = size;
  341|       |  size = (size_t)align_up((void *)size, SIZE_ALIGNMENT) + TOTAL_REDZONE_SIZE;
  342|       |#endif
  343|  36.7k|  for (retry = 0; retry < LJ_ALLOC_MMAP_PROBE_MAX; retry++) {
  ------------------
  |  |  228|  36.7k|#define LJ_ALLOC_MMAP_PROBE_MAX		30
  ------------------
  |  Branch (343:19): [True: 36.7k, False: 0]
  ------------------
  344|  36.7k|    void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  214|  36.7k|#define MMAP_PROT		(PROT_READ|PROT_WRITE)
  ------------------
                  void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  225|  36.7k|#define MMAP_FLAGS_PROBE	MMAP_FLAGS
  |  |  ------------------
  |  |  |  |  218|  36.7k|#define MMAP_FLAGS		(MAP_PRIVATE|MAP_ANONYMOUS)
  |  |  ------------------
  ------------------
  345|  36.7k|    uintptr_t addr = (uintptr_t)p;
  346|  36.7k|    if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  102|  36.7k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                  if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  231|  73.4k|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (346:9): [True: 36.7k, False: 0]
  |  Branch (346:42): [True: 36.7k, False: 0]
  ------------------
  347|  36.7k|	((addr + size) >> LJ_ALLOC_MBITS) == 0) {
  ------------------
  |  |  102|  36.7k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (347:2): [True: 36.7k, False: 0]
  ------------------
  348|       |      /* We got a suitable address. Bump the hint address. */
  349|  36.7k|      hint_addr = addr + size;
  350|  36.7k|      errno = olderr;
  351|       |#if LUAJIT_USE_ASAN
  352|       |      p = mark_memory_region(p, mem_size, size);
  353|       |#endif
  354|  36.7k|      return p;
  355|  36.7k|    }
  356|      0|    if (p != MFAIL) {
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|      0|      munmap(p, size);
  358|      0|    } else if (errno == ENOMEM) {
  ------------------
  |  Branch (358:16): [True: 0, False: 0]
  ------------------
  359|      0|      return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  360|      0|    }
  361|      0|    if (hint_addr) {
  ------------------
  |  Branch (361:9): [True: 0, False: 0]
  ------------------
  362|       |      /* First, try linear probing. */
  363|      0|      if (retry < LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (363:11): [True: 0, False: 0]
  ------------------
  364|      0|	hint_addr += 0x1000000;
  365|      0|	if (((hint_addr + size) >> LJ_ALLOC_MBITS) != 0)
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (365:6): [True: 0, False: 0]
  ------------------
  366|      0|	  hint_addr = 0;
  367|      0|	continue;
  368|      0|      } else if (retry == LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (368:18): [True: 0, False: 0]
  ------------------
  369|       |	/* Next, try a no-hint probe to get back an ASLR address. */
  370|      0|	hint_addr = 0;
  371|      0|	continue;
  372|      0|      }
  373|      0|    }
  374|       |    /* Finally, try pseudo-random probing. */
  375|      0|    do {
  376|      0|      hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                    hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  648|      0|#define LJ_PAGESIZE		4096
  ------------------
  377|      0|    } while (hint_addr < LJ_ALLOC_MMAP_PROBE_LOWER);
  ------------------
  |  |  231|      0|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (377:14): [True: 0, False: 0]
  ------------------
  378|      0|  }
  379|      0|  errno = olderr;
  380|      0|  return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  381|  36.7k|}
lj_alloc.c:init_bins:
 1051|  36.7k|{
 1052|       |  /* Establish circular links for smallbins */
 1053|  36.7k|  bindex_t i;
 1054|  1.21M|  for (i = 0; i < NSMALLBINS; i++) {
  ------------------
  |  |  675|  1.21M|#define NSMALLBINS		(32U)
  ------------------
  |  Branch (1054:15): [True: 1.17M, False: 36.7k]
  ------------------
 1055|  1.17M|    sbinptr bin = smallbin_at(m,i);
  ------------------
  |  |  764|  1.17M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1056|  1.17M|    bin->fd = bin->bk = bin;
 1057|  1.17M|  }
 1058|  36.7k|}
lj_alloc.c:init_top:
 1030|  36.7k|{
 1031|       |  /* Ensure alignment */
 1032|  36.7k|  void *t = chunk2mem(p);
  ------------------
  |  |  575|  36.7k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  36.7k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  36.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1033|       |#if LUAJIT_USE_ASAN
 1034|       |  t -= REDZONE_SIZE;
 1035|       |#endif
 1036|  36.7k|  size_t offset = align_offset(t);
  ------------------
  |  |   66|  36.7k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 36.7k, False: 0]
  |  |  ------------------
  |  |   67|  36.7k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1037|       |
 1038|  36.7k|  p = (mchunkptr)((char *)p + offset);
 1039|  36.7k|  psize -= offset;
 1040|       |
 1041|  36.7k|  m->top = p;
 1042|  36.7k|  m->topsize = psize;
 1043|  36.7k|  p->head = psize | PINUSE_BIT;
  ------------------
  |  |  595|  36.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1044|       |  /* set size of fake trailing chunk holding overhead space only once */
 1045|  36.7k|  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  611|  36.7k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  754|  36.7k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  36.7k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  36.7k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|  36.7k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  36.7k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  36.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|  36.7k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  36.7k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1046|  36.7k|  m->trim_check = DEFAULT_TRIM_THRESHOLD; /* reset on each update */
  ------------------
  |  |   42|  36.7k|#define DEFAULT_TRIM_THRESHOLD	((size_t)2U * (size_t)1024U * (size_t)1024U)
  ------------------
 1047|  36.7k|}
lj_alloc.c:CALL_MUNMAP:
  472|  36.7k|{
  473|  36.7k|  int olderr = errno;
  474|       |#if LUAJIT_USE_ASAN
  475|       |  memmove(ptr, ptr, size); /* check that memory is not poisoned */
  476|       |  size = asan_get_size(ptr, POISON_SIZE);
  477|       |  ptr -= REDZONE_SIZE;
  478|       |#endif
  479|  36.7k|  int ret = munmap(ptr, size);
  480|       |#if LUAJIT_USE_ASAN
  481|       |  if (ret == 0) {
  482|       |    ASAN_POISON_MEMORY_REGION(ptr, size);
  483|       |  }
  484|       |#endif
  485|  36.7k|  errno = olderr;
  486|  36.7k|  return ret;
  487|  36.7k|}
lj_alloc.c:lj_alloc_free:
 1560|  2.72M|{
 1561|       |#if LUAJIT_USE_ASAN
 1562|       |  if (ptr != 0) {    
 1563|       |    size_t mem_size = asan_get_size(ptr, MEM_SIZE);
 1564|       |    size_t poison_size = asan_get_size(ptr, POISON_SIZE);
 1565|       |
 1566|       |    memmove(ptr, ptr, mem_size);
 1567|       |    ASAN_POISON_MEMORY_REGION(ptr - REDZONE_SIZE, poison_size);
 1568|       |  }
 1569|       |  return NULL;
 1570|       |#else
 1571|  2.72M|  if (ptr != 0) {
  ------------------
  |  Branch (1571:7): [True: 2.51M, False: 207k]
  ------------------
 1572|  2.51M|    mchunkptr p = mem2chunk(ptr);
  ------------------
  |  |  576|  2.51M|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  2.51M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.51M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1573|  2.51M|    mstate fm = (mstate)msp;
 1574|  2.51M|    size_t psize = chunksize(p);
  ------------------
  |  |  605|  2.51M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  2.51M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  2.51M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.51M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  2.51M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  2.51M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1575|  2.51M|    mchunkptr next = chunk_plus_offset(p, psize);
  ------------------
  |  |  611|  2.51M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1576|  2.51M|    if (!pinuse(p)) {
  ------------------
  |  |  604|  2.51M|#define pinuse(p)		((p)->head & PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  2.51M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.51M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1576:9): [True: 1.02M, False: 1.49M]
  ------------------
 1577|  1.02M|      size_t prevsize = p->prev_foot;
 1578|  1.02M|      if ((prevsize & IS_DIRECT_BIT) != 0) {
  ------------------
  |  |   74|  1.02M|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  1.02M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  |  Branch (1578:11): [True: 0, False: 1.02M]
  ------------------
 1579|      0|	prevsize &= ~IS_DIRECT_BIT;
  ------------------
  |  |   74|      0|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1580|      0|	psize += prevsize + DIRECT_FOOT_PAD;
  ------------------
  |  |  563|      0|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|      0|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1581|      0|	CALL_MUNMAP((char *)p - prevsize, psize);
 1582|      0|	return NULL;
 1583|  1.02M|      } else {
 1584|  1.02M|	mchunkptr prev = chunk_minus_offset(p, prevsize);
  ------------------
  |  |  612|  1.02M|#define chunk_minus_offset(p, s)	((mchunkptr)(((char *)(p)) - (s)))
  ------------------
 1585|  1.02M|	psize += prevsize;
 1586|  1.02M|	p = prev;
 1587|       |	/* consolidate backward */
 1588|  1.02M|	if (p != fm->dv) {
  ------------------
  |  Branch (1588:6): [True: 1.02M, False: 0]
  ------------------
 1589|  1.02M|	  unlink_chunk(fm, p, prevsize);
  ------------------
  |  |  974|  1.02M|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|  1.02M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  1.02M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|  1.02M|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 694k, False: 327k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  844|   694k|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  845|   694k|  mchunkptr F = P->fd;\
  |  |  |  |  846|   694k|  mchunkptr B = P->bk;\
  |  |  |  |  847|   694k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|   694k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|   694k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  848|   694k|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (848:7): [True: 327k, False: 366k]
  |  |  |  |  ------------------
  |  |  |  |  849|   327k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|   327k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   327k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  850|   366k|  } else {\
  |  |  |  |  851|   366k|    F->bk = B;\
  |  |  |  |  852|   366k|    B->fd = F;\
  |  |  |  |  853|   366k|  }\
  |  |  |  |  854|   694k|}
  |  |  ------------------
  |  |  975|   694k|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  921|   327k|#define unlink_large_chunk(M, X) {\
  |  |  |  |  922|   327k|  tchunkptr XP = X->parent;\
  |  |  |  |  923|   327k|  tchunkptr R;\
  |  |  |  |  924|   327k|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (924:7): [True: 5.23k, False: 321k]
  |  |  |  |  ------------------
  |  |  |  |  925|  5.23k|    tchunkptr F = X->fd;\
  |  |  |  |  926|  5.23k|    R = X->bk;\
  |  |  |  |  927|  5.23k|    F->bk = R;\
  |  |  |  |  928|  5.23k|    R->fd = F;\
  |  |  |  |  929|   321k|  } else {\
  |  |  |  |  930|   321k|    tchunkptr *RP;\
  |  |  |  |  931|   321k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (931:9): [True: 18.7k, False: 303k]
  |  |  |  |  ------------------
  |  |  |  |  932|   321k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (932:2): [True: 15.1k, False: 288k]
  |  |  |  |  ------------------
  |  |  |  |  933|  33.8k|      tchunkptr *CP;\
  |  |  |  |  934|  35.7k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (934:14): [True: 810, False: 34.9k]
  |  |  |  |  ------------------
  |  |  |  |  935|  35.7k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (935:7): [True: 1.06k, False: 33.8k]
  |  |  |  |  ------------------
  |  |  |  |  936|  1.87k|	R = *(RP = CP);\
  |  |  |  |  937|  1.87k|      }\
  |  |  |  |  938|  33.8k|      *RP = 0;\
  |  |  |  |  939|  33.8k|    }\
  |  |  |  |  940|   321k|  }\
  |  |  |  |  941|   327k|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (941:7): [True: 324k, False: 2.76k]
  |  |  |  |  ------------------
  |  |  |  |  942|   324k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|   324k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  943|   324k|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (943:9): [True: 275k, False: 48.6k]
  |  |  |  |  ------------------
  |  |  |  |  944|   275k|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (944:11): [True: 241k, False: 34.1k]
  |  |  |  |  ------------------
  |  |  |  |  945|   275k|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|   241k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   241k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  946|   275k|    } else {\
  |  |  |  |  947|  48.6k|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (947:11): [True: 26.0k, False: 22.5k]
  |  |  |  |  ------------------
  |  |  |  |  948|  48.6k|	XP->child[0] = R;\
  |  |  |  |  949|  48.6k|      else \
  |  |  |  |  950|  48.6k|	XP->child[1] = R;\
  |  |  |  |  951|  48.6k|    }\
  |  |  |  |  952|   324k|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (952:9): [True: 36.3k, False: 288k]
  |  |  |  |  ------------------
  |  |  |  |  953|  36.3k|      tchunkptr C0, C1;\
  |  |  |  |  954|  36.3k|      R->parent = XP;\
  |  |  |  |  955|  36.3k|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (955:11): [True: 3.07k, False: 33.2k]
  |  |  |  |  ------------------
  |  |  |  |  956|  3.07k|	R->child[0] = C0;\
  |  |  |  |  957|  3.07k|	C0->parent = R;\
  |  |  |  |  958|  3.07k|      }\
  |  |  |  |  959|  36.3k|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (959:11): [True: 1.33k, False: 35.0k]
  |  |  |  |  ------------------
  |  |  |  |  960|  1.33k|	R->child[1] = C1;\
  |  |  |  |  961|  1.33k|	C1->parent = R;\
  |  |  |  |  962|  1.33k|      }\
  |  |  |  |  963|  36.3k|    }\
  |  |  |  |  964|   324k|  }\
  |  |  |  |  965|   327k|}
  |  |  ------------------
  ------------------
 1590|  1.02M|	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  597|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  597|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1590:13): [True: 0, False: 0]
  ------------------
 1591|      0|	  fm->dvsize = psize;
 1592|      0|	  set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  631|      0|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  607|      0|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  627|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  623|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1593|      0|	  return NULL;
 1594|      0|	}
 1595|  1.02M|      }
 1596|  1.02M|    }
 1597|  2.51M|    if (!cinuse(next)) {  /* consolidate forward */
  ------------------
  |  |  603|  2.51M|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|  2.51M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  2.51M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1597:9): [True: 1.49M, False: 1.02M]
  ------------------
 1598|  1.49M|      if (next == fm->top) {
  ------------------
  |  Branch (1598:11): [True: 220k, False: 1.27M]
  ------------------
 1599|   220k|	size_t tsize = fm->topsize += psize;
 1600|   220k|	fm->top = p;
 1601|   220k|	p->head = tsize | PINUSE_BIT;
  ------------------
  |  |  595|   220k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   220k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1602|   220k|	if (p == fm->dv) {
  ------------------
  |  Branch (1602:6): [True: 0, False: 220k]
  ------------------
 1603|      0|	  fm->dv = 0;
 1604|      0|	  fm->dvsize = 0;
 1605|      0|	}
 1606|   220k|	if (tsize > fm->trim_check)
  ------------------
  |  Branch (1606:6): [True: 0, False: 220k]
  ------------------
 1607|      0|	  alloc_trim(fm, 0);
 1608|   220k|	return NULL;
 1609|  1.27M|      } else if (next == fm->dv) {
  ------------------
  |  Branch (1609:18): [True: 0, False: 1.27M]
  ------------------
 1610|      0|	size_t dsize = fm->dvsize += psize;
 1611|      0|	fm->dv = p;
 1612|      0|	set_size_and_pinuse_of_free_chunk(p, dsize);
  ------------------
  |  |  627|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1613|      0|	return NULL;
 1614|  1.27M|      } else {
 1615|  1.27M|	size_t nsize = chunksize(next);
  ------------------
  |  |  605|  1.27M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  1.27M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  1.27M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.27M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  1.27M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  1.27M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1616|  1.27M|	psize += nsize;
 1617|  1.27M|	unlink_chunk(fm, next, nsize);
  ------------------
  |  |  974|  1.27M|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|  1.27M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  1.27M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|  1.27M|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 926k, False: 349k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  844|   926k|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  845|   926k|  mchunkptr F = P->fd;\
  |  |  |  |  846|   926k|  mchunkptr B = P->bk;\
  |  |  |  |  847|   926k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|   926k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|   926k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  848|   926k|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (848:7): [True: 554k, False: 371k]
  |  |  |  |  ------------------
  |  |  |  |  849|   554k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|   554k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   554k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  850|   554k|  } else {\
  |  |  |  |  851|   371k|    F->bk = B;\
  |  |  |  |  852|   371k|    B->fd = F;\
  |  |  |  |  853|   371k|  }\
  |  |  |  |  854|   926k|}
  |  |  ------------------
  |  |  975|   926k|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  921|   349k|#define unlink_large_chunk(M, X) {\
  |  |  |  |  922|   349k|  tchunkptr XP = X->parent;\
  |  |  |  |  923|   349k|  tchunkptr R;\
  |  |  |  |  924|   349k|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (924:7): [True: 5.48k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  925|  5.48k|    tchunkptr F = X->fd;\
  |  |  |  |  926|  5.48k|    R = X->bk;\
  |  |  |  |  927|  5.48k|    F->bk = R;\
  |  |  |  |  928|  5.48k|    R->fd = F;\
  |  |  |  |  929|   344k|  } else {\
  |  |  |  |  930|   344k|    tchunkptr *RP;\
  |  |  |  |  931|   344k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (931:9): [True: 12.4k, False: 331k]
  |  |  |  |  ------------------
  |  |  |  |  932|   344k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (932:2): [True: 12.5k, False: 319k]
  |  |  |  |  ------------------
  |  |  |  |  933|  24.9k|      tchunkptr *CP;\
  |  |  |  |  934|  26.1k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (934:14): [True: 550, False: 25.6k]
  |  |  |  |  ------------------
  |  |  |  |  935|  26.1k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (935:7): [True: 618, False: 24.9k]
  |  |  |  |  ------------------
  |  |  |  |  936|  1.16k|	R = *(RP = CP);\
  |  |  |  |  937|  1.16k|      }\
  |  |  |  |  938|  24.9k|      *RP = 0;\
  |  |  |  |  939|  24.9k|    }\
  |  |  |  |  940|   344k|  }\
  |  |  |  |  941|   349k|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (941:7): [True: 346k, False: 3.41k]
  |  |  |  |  ------------------
  |  |  |  |  942|   346k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|   346k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  943|   346k|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (943:9): [True: 299k, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  944|   299k|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (944:11): [True: 274k, False: 25.4k]
  |  |  |  |  ------------------
  |  |  |  |  945|   299k|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|   274k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   274k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  946|   299k|    } else {\
  |  |  |  |  947|  46.7k|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (947:11): [True: 25.8k, False: 20.8k]
  |  |  |  |  ------------------
  |  |  |  |  948|  46.7k|	XP->child[0] = R;\
  |  |  |  |  949|  46.7k|      else \
  |  |  |  |  950|  46.7k|	XP->child[1] = R;\
  |  |  |  |  951|  46.7k|    }\
  |  |  |  |  952|   346k|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (952:9): [True: 27.0k, False: 319k]
  |  |  |  |  ------------------
  |  |  |  |  953|  27.0k|      tchunkptr C0, C1;\
  |  |  |  |  954|  27.0k|      R->parent = XP;\
  |  |  |  |  955|  27.0k|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (955:11): [True: 2.15k, False: 24.9k]
  |  |  |  |  ------------------
  |  |  |  |  956|  2.15k|	R->child[0] = C0;\
  |  |  |  |  957|  2.15k|	C0->parent = R;\
  |  |  |  |  958|  2.15k|      }\
  |  |  |  |  959|  27.0k|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (959:11): [True: 757, False: 26.3k]
  |  |  |  |  ------------------
  |  |  |  |  960|    757|	R->child[1] = C1;\
  |  |  |  |  961|    757|	C1->parent = R;\
  |  |  |  |  962|    757|      }\
  |  |  |  |  963|  27.0k|    }\
  |  |  |  |  964|   346k|  }\
  |  |  |  |  965|   349k|}
  |  |  ------------------
  ------------------
 1618|  1.27M|	set_size_and_pinuse_of_free_chunk(p, psize);
  ------------------
  |  |  627|  1.27M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|  1.27M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.27M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|  1.27M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1619|  1.27M|	if (p == fm->dv) {
  ------------------
  |  Branch (1619:6): [True: 0, False: 1.27M]
  ------------------
 1620|      0|	  fm->dvsize = psize;
 1621|      0|	  return NULL;
 1622|      0|	}
 1623|  1.27M|      }
 1624|  1.49M|    } else {
 1625|  1.02M|      set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  631|  1.02M|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  607|  1.02M|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  1.02M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.02M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  627|  1.02M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  1.02M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.02M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  623|  1.02M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1626|  1.02M|    }
 1627|       |
 1628|  2.29M|    if (is_small(psize)) {
  ------------------
  |  |  758|  2.29M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  677|  2.29M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  675|  2.29M|#define NSMALLBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (758:22): [True: 1.62M, False: 677k]
  |  |  ------------------
  ------------------
 1629|  1.62M|      insert_small_chunk(fm, p, psize);
  ------------------
  |  |  829|  1.62M|#define insert_small_chunk(M, P, S) {\
  |  |  830|  1.62M|  bindex_t I = small_index(S);\
  |  |  ------------------
  |  |  |  |  759|  1.62M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  1.62M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  831|  1.62M|  mchunkptr B = smallbin_at(M, I);\
  |  |  ------------------
  |  |  |  |  764|  1.62M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  ------------------
  |  |  832|  1.62M|  mchunkptr F = B;\
  |  |  833|  1.62M|  if (!smallmap_is_marked(M, I))\
  |  |  ------------------
  |  |  |  |  803|  1.62M|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  1.62M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (833:7): [True: 881k, False: 738k]
  |  |  ------------------
  |  |  834|  1.62M|    mark_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  801|   881k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|   881k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  835|  1.62M|  else\
  |  |  836|  1.62M|    F = B->fd;\
  |  |  837|  1.62M|  B->fd = P;\
  |  |  838|  1.62M|  F->bk = P;\
  |  |  839|  1.62M|  P->fd = F;\
  |  |  840|  1.62M|  P->bk = B;\
  |  |  841|  1.62M|}
  ------------------
 1630|  1.62M|    } else {
 1631|   677k|      tchunkptr tp = (tchunkptr)p;
 1632|   677k|      insert_large_chunk(fm, tp, psize);
  ------------------
  |  |  882|   677k|#define insert_large_chunk(M, X, S) {\
  |  |  883|   677k|  tbinptr *H;\
  |  |  884|   677k|  bindex_t I;\
  |  |  885|   677k|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  768|   677k|#define compute_tree_index(S, I)\
  |  |  |  |  769|   677k|{\
  |  |  |  |  770|   677k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|   677k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  771|   677k|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (771:7): [True: 0, False: 677k]
  |  |  |  |  ------------------
  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  773|   677k|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (773:14): [True: 0, False: 677k]
  |  |  |  |  ------------------
  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  775|   677k|  } else {\
  |  |  |  |  776|   677k|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   677k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  777|   677k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|   677k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  778|   677k|  }\
  |  |  |  |  779|   677k|}
  |  |  ------------------
  |  |  886|   677k|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  765|   677k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  887|   677k|  X->index = I;\
  |  |  888|   677k|  X->child[0] = X->child[1] = 0;\
  |  |  889|   677k|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  807|   677k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|   677k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (889:7): [True: 515k, False: 161k]
  |  |  ------------------
  |  |  890|   515k|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  805|   515k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|   515k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  891|   515k|    *H = X;\
  |  |  892|   515k|    X->parent = (tchunkptr)H;\
  |  |  893|   515k|    X->fd = X->bk = X;\
  |  |  894|   515k|  } else {\
  |  |  895|   161k|    tchunkptr T = *H;\
  |  |  896|   161k|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  787|   161k|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|   161k|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:5): [True: 0, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  788|   161k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|   161k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   161k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|   161k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  897|   172k|    for (;;) {\
  |  |  898|   172k|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  605|   172k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  597|   172k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  595|   172k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|   172k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  596|   172k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|   172k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (898:11): [True: 162k, False: 10.7k]
  |  |  ------------------
  |  |  899|   162k|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|   162k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|   162k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  900|   162k|	K <<= 1;\
  |  |  901|   162k|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (901:6): [True: 11.7k, False: 150k]
  |  |  ------------------
  |  |  902|  11.7k|	  T = *C;\
  |  |  903|   150k|	} else {\
  |  |  904|   150k|	  *C = X;\
  |  |  905|   150k|	  X->parent = T;\
  |  |  906|   150k|	  X->fd = X->bk = X;\
  |  |  907|   150k|	  break;\
  |  |  908|   150k|	}\
  |  |  909|   162k|      } else {\
  |  |  910|  10.7k|	tchunkptr F = T->fd;\
  |  |  911|  10.7k|	T->fd = F->bk = X;\
  |  |  912|  10.7k|	X->fd = F;\
  |  |  913|  10.7k|	X->bk = T;\
  |  |  914|  10.7k|	X->parent = 0;\
  |  |  915|  10.7k|	break;\
  |  |  916|  10.7k|      }\
  |  |  917|   172k|    }\
  |  |  918|   161k|  }\
  |  |  919|   677k|}
  ------------------
 1633|   677k|      if (--fm->release_checks == 0)
  ------------------
  |  Branch (1633:11): [True: 0, False: 677k]
  ------------------
 1634|      0|	release_unused_segments(fm);
 1635|   677k|    }
 1636|  2.29M|  }
 1637|  2.50M|  return NULL;
 1638|  2.72M|#endif
 1639|  2.72M|}
lj_alloc.c:lj_alloc_malloc:
 1450|  2.55M|{
 1451|       |#if LUAJIT_USE_ASAN
 1452|       |  size_t mem_size = nsize;
 1453|       |  size_t poison_size = (size_t)align_up((void *)nsize, SIZE_ALIGNMENT) + TOTAL_REDZONE_SIZE;
 1454|       |  nsize = poison_size;
 1455|       |#endif
 1456|  2.55M|  mstate ms = (mstate)msp;
 1457|  2.55M|  void *mem;
 1458|  2.55M|  size_t nb;
 1459|  2.55M|  if (nsize <= MAX_SMALL_REQUEST) {
  ------------------
  |  |  682|  2.55M|#define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  681|  2.55M|#define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  680|  2.55M|#define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.55M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  2.55M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.55M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |   62|  2.55M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  2.55M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.55M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  558|  2.55M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.55M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1459:7): [True: 2.35M, False: 194k]
  ------------------
 1460|  2.35M|    bindex_t idx;
 1461|  2.35M|    binmap_t smallbits;
 1462|  2.35M|    nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  583|  2.35M|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  567|  2.35M|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  2.35M|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  2.35M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  2.35M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.35M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  2.35M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  2.35M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.35M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  558|  2.35M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.35M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  2.35M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  567|    308|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|    308|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    308|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    308|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    308|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    308|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    308|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    308|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  587|  4.71M|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|  2.35M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.35M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  2.35M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  2.35M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.35M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  2.35M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  2.35M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.35M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1462:10): [True: 308, False: 2.35M]
  ------------------
 1463|  2.35M|    idx = small_index(nb);
  ------------------
  |  |  759|  2.35M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  677|  2.35M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1464|  2.35M|    smallbits = ms->smallmap >> idx;
 1465|       |
 1466|  2.35M|    if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
  ------------------
  |  Branch (1466:9): [True: 0, False: 2.35M]
  ------------------
 1467|      0|      mchunkptr b, p;
 1468|      0|      idx += ~smallbits & 1;       /* Uses next bin if idx empty */
 1469|      0|      b = smallbin_at(ms, idx);
  ------------------
  |  |  764|      0|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1470|      0|      p = b->fd;
 1471|      0|      unlink_first_small_chunk(ms, b, p, idx);
  ------------------
  |  |  857|      0|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  858|      0|  mchunkptr F = P->fd;\
  |  |  859|      0|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (859:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  860|      0|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  802|      0|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  861|      0|  } else {\
  |  |  862|      0|    B->fd = F;\
  |  |  863|      0|    F->bk = B;\
  |  |  864|      0|  }\
  |  |  865|      0|}
  ------------------
 1472|      0|      set_inuse_and_pinuse(ms, p, small_index2size(idx));
  ------------------
  |  |  819|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1473|      0|      mem = chunk2mem(p);
  ------------------
  |  |  575|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1474|       |#if LUAJIT_USE_ASAN
 1475|       |      mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1476|       |#endif
 1477|      0|      return mem;
 1478|  2.35M|    } else if (nb > ms->dvsize) {
  ------------------
  |  Branch (1478:16): [True: 2.35M, False: 0]
  ------------------
 1479|  2.35M|      if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
  ------------------
  |  Branch (1479:11): [True: 0, False: 2.35M]
  ------------------
 1480|      0|	mchunkptr b, p, r;
 1481|      0|	size_t rsize;
 1482|      0|	binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
  ------------------
  |  |  810|      0|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1483|      0|	bindex_t i = lj_ffs(leftbits);
  ------------------
  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1484|      0|	b = smallbin_at(ms, i);
  ------------------
  |  |  764|      0|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1485|      0|	p = b->fd;
 1486|      0|	unlink_first_small_chunk(ms, b, p, i);
  ------------------
  |  |  857|      0|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  858|      0|  mchunkptr F = P->fd;\
  |  |  859|      0|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (859:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  860|      0|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  802|      0|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  861|      0|  } else {\
  |  |  862|      0|    B->fd = F;\
  |  |  863|      0|    F->bk = B;\
  |  |  864|      0|  }\
  |  |  865|      0|}
  ------------------
 1487|      0|	rsize = small_index2size(i) - nb;
  ------------------
  |  |  760|      0|#define small_index2size(i)	((i)  << SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  677|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1488|       |	/* Fit here cannot be remainderless if 4byte sizes */
 1489|      0|	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  ------------------
              	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1489:6): [Folded - Ignored]
  |  Branch (1489:26): [True: 0, False: 0]
  ------------------
 1490|      0|	  set_inuse_and_pinuse(ms, p, small_index2size(i));
  ------------------
  |  |  819|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|	} else {
 1492|      0|	  set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  824|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1493|      0|	  r = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1494|      0|	  set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1495|      0|	  replace_dv(ms, r, rsize);
  ------------------
  |  |  869|      0|#define replace_dv(M, P, S) {\
  |  |  870|      0|  size_t DVS = M->dvsize;\
  |  |  871|      0|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (871:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  872|      0|    mchunkptr DV = M->dv;\
  |  |  873|      0|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  829|      0|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|      0|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|      0|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|      0|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|      0|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|      0|  mchunkptr F = B;\
  |  |  |  |  833|      0|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|      0|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  834|      0|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|      0|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|      0|  else\
  |  |  |  |  836|      0|    F = B->fd;\
  |  |  |  |  837|      0|  B->fd = P;\
  |  |  |  |  838|      0|  F->bk = P;\
  |  |  |  |  839|      0|  P->fd = F;\
  |  |  |  |  840|      0|  P->bk = B;\
  |  |  |  |  841|      0|}
  |  |  ------------------
  |  |  874|      0|  }\
  |  |  875|      0|  M->dvsize = S;\
  |  |  876|      0|  M->dv = P;\
  |  |  877|      0|}
  ------------------
 1496|      0|	}
 1497|      0|	mem = chunk2mem(p);
  ------------------
  |  |  575|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1498|       |#if LUAJIT_USE_ASAN
 1499|       |  mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1500|       |#endif
 1501|      0|	return mem;
 1502|  2.35M|      } else if (ms->treemap != 0 && (mem = tmalloc_small(ms, nb)) != 0) {
  ------------------
  |  Branch (1502:18): [True: 0, False: 2.35M]
  |  Branch (1502:38): [True: 0, False: 0]
  ------------------
 1503|       |#if LUAJIT_USE_ASAN
 1504|       |  mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1505|       |#endif
 1506|      0|	return mem;
 1507|      0|      }
 1508|  2.35M|    }
 1509|  2.35M|  } else if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  582|   194k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  567|   194k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|   194k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   194k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   194k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   194k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   194k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   194k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   194k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1509:14): [True: 0, False: 194k]
  ------------------
 1510|      0|    nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
  ------------------
  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  ------------------
 1511|   194k|  } else {
 1512|   194k|    nb = pad_request(nsize);
  ------------------
  |  |  587|   194k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|   194k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   194k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   194k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   194k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   194k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   194k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   194k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   194k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1513|   194k|    if (ms->treemap != 0 && (mem = tmalloc_large(ms, nb)) != 0) {
  ------------------
  |  Branch (1513:9): [True: 0, False: 194k]
  |  Branch (1513:29): [True: 0, False: 0]
  ------------------
 1514|       |#if LUAJIT_USE_ASAN
 1515|       |      mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1516|       |#endif
 1517|      0|      return mem;
 1518|      0|    }
 1519|   194k|  }
 1520|       |
 1521|  2.55M|  if (nb <= ms->dvsize) {
  ------------------
  |  Branch (1521:7): [True: 0, False: 2.55M]
  ------------------
 1522|      0|    size_t rsize = ms->dvsize - nb;
 1523|      0|    mchunkptr p = ms->dv;
 1524|      0|    if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
  ------------------
  |  |  567|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1524:9): [True: 0, False: 0]
  ------------------
 1525|      0|      mchunkptr r = ms->dv = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1526|      0|      ms->dvsize = rsize;
 1527|      0|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1528|      0|      set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  824|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1529|      0|    } else { /* exhaust dv */
 1530|      0|      size_t dvs = ms->dvsize;
 1531|      0|      ms->dvsize = 0;
 1532|      0|      ms->dv = 0;
 1533|      0|      set_inuse_and_pinuse(ms, p, dvs);
  ------------------
  |  |  819|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1534|      0|    }
 1535|      0|    mem = chunk2mem(p);
  ------------------
  |  |  575|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1536|       |#if LUAJIT_USE_ASAN
 1537|       |    mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1538|       |#endif
 1539|      0|    return mem;
 1540|  2.55M|  } else if (nb < ms->topsize) { /* Split top */
  ------------------
  |  Branch (1540:14): [True: 2.55M, False: 0]
  ------------------
 1541|  2.55M|    size_t rsize = ms->topsize -= nb;
 1542|  2.55M|    mchunkptr p = ms->top;
 1543|  2.55M|    mchunkptr r = ms->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|  2.55M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1544|  2.55M|    r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  595|  2.55M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  2.55M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1545|  2.55M|    set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  824|  2.55M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  2.55M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.55M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  2.55M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  2.55M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1546|  2.55M|    mem = chunk2mem(p);
  ------------------
  |  |  575|  2.55M|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  2.55M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.55M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|       |#if LUAJIT_USE_ASAN
 1548|       |    mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1549|       |#endif
 1550|  2.55M|    return mem;
 1551|  2.55M|  }
 1552|       |#if LUAJIT_USE_ASAN
 1553|       |  return mark_memory_region(alloc_sys(ms, nb) - REDZONE_SIZE, mem_size, poison_size);
 1554|       |#else
 1555|      0|  return alloc_sys(ms, nb);
 1556|  2.55M|#endif
 1557|  2.55M|}
lj_alloc.c:lj_alloc_realloc:
 1642|  12.6k|{
 1643|       |#if LUAJIT_USE_ASAN
 1644|       |  if (nsize >= MAX_REQUEST)
 1645|       |    return NULL;
 1646|       |
 1647|       |  mstate m = (mstate)msp;
 1648|       |
 1649|       |  size_t mem_size = asan_get_size(ptr, MEM_SIZE);
 1650|       |  size_t poison_size = asan_get_size(ptr, POISON_SIZE);
 1651|       |
 1652|       |  void *newmem = lj_alloc_malloc(m, nsize);
 1653|       |
 1654|       |  if (newmem == NULL)
 1655|       |    return NULL;
 1656|       |
 1657|       |  memcpy(newmem, ptr, nsize > mem_size ? mem_size : nsize);
 1658|       |  ASAN_POISON_MEMORY_REGION(ptr - REDZONE_SIZE, poison_size);
 1659|       |  return newmem;
 1660|       |#else
 1661|  12.6k|  if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  582|  12.6k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  567|  12.6k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  12.6k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  12.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  12.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  12.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  12.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  12.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  12.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1661:7): [True: 0, False: 12.6k]
  ------------------
 1662|      0|    return NULL;
 1663|  12.6k|  } else {
 1664|  12.6k|    mstate m = (mstate)msp;
 1665|  12.6k|    mchunkptr oldp = mem2chunk(ptr);
  ------------------
  |  |  576|  12.6k|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  12.6k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  12.6k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1666|  12.6k|    size_t oldsize = chunksize(oldp);
  ------------------
  |  |  605|  12.6k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  12.6k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  12.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  12.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  12.6k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  12.6k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1667|  12.6k|    mchunkptr next = chunk_plus_offset(oldp, oldsize);
  ------------------
  |  |  611|  12.6k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1668|  12.6k|    mchunkptr newp = 0;
 1669|  12.6k|    size_t nb = request2size(nsize);
  ------------------
  |  |  591|  12.6k|  (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  583|  12.6k|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  567|  12.6k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  556|  12.6k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|  12.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|  12.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|  12.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|  12.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  12.6k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  12.6k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  567|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  587|  12.6k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  12.6k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  12.6k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  12.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  12.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  12.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  12.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  12.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  12.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (591:4): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 1670|       |
 1671|       |    /* Try to either shrink or extend into top. Else malloc-copy-free */
 1672|  12.6k|    if (is_direct(oldp)) {
  ------------------
  |  |  634|  12.6k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |  595|  12.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |   74|      0|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (634:4): [True: 0, False: 12.6k]
  |  |  |  Branch (634:33): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1673|      0|      newp = direct_resize(oldp, nb);  /* this may return NULL. */
 1674|  12.6k|    } else if (oldsize >= nb) { /* already big enough */
  ------------------
  |  Branch (1674:16): [True: 0, False: 12.6k]
  ------------------
 1675|      0|      size_t rsize = oldsize - nb;
 1676|      0|      newp = oldp;
 1677|      0|      if (rsize >= MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1677:11): [True: 0, False: 0]
  ------------------
 1678|      0|	mchunkptr rem = chunk_plus_offset(newp, nb);
  ------------------
  |  |  611|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1679|      0|	set_inuse(m, newp, nb);
  ------------------
  |  |  814|      0|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  815|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1680|      0|	set_inuse(m, rem, rsize);
  ------------------
  |  |  814|      0|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  815|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1681|      0|	lj_alloc_free(m, chunk2mem(rem));
  ------------------
  |  |  575|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1682|      0|      }
 1683|  12.6k|    } else if (next == m->top && oldsize + m->topsize > nb) {
  ------------------
  |  Branch (1683:16): [True: 11.7k, False: 887]
  |  Branch (1683:34): [True: 11.7k, False: 0]
  ------------------
 1684|       |      /* Expand into top */
 1685|  11.7k|      size_t newsize = oldsize + m->topsize;
 1686|  11.7k|      size_t newtopsize = newsize - nb;
 1687|  11.7k|      mchunkptr newtop = chunk_plus_offset(oldp, nb);
  ------------------
  |  |  611|  11.7k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1688|  11.7k|      set_inuse(m, oldp, nb);
  ------------------
  |  |  814|  11.7k|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  11.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  11.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  11.7k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  11.7k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  815|  11.7k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  11.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  11.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1689|  11.7k|      newtop->head = newtopsize |PINUSE_BIT;
  ------------------
  |  |  595|  11.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  11.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1690|  11.7k|      m->top = newtop;
 1691|  11.7k|      m->topsize = newtopsize;
 1692|  11.7k|      newp = oldp;
 1693|  11.7k|    }
 1694|       |
 1695|  12.6k|    if (newp != 0) {
  ------------------
  |  Branch (1695:9): [True: 11.7k, False: 887]
  ------------------
 1696|  11.7k|      return chunk2mem(newp);
  ------------------
  |  |  575|  11.7k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  11.7k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  11.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1697|  11.7k|    } else {
 1698|    887|      void *newmem = lj_alloc_malloc(m, nsize);
 1699|    887|      if (newmem != 0) {
  ------------------
  |  Branch (1699:11): [True: 887, False: 0]
  ------------------
 1700|    887|	size_t oc = oldsize - overhead_for(oldp);
  ------------------
  |  |  638|    887| (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  634|    887|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|    887|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    887|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|      0|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (634:4): [True: 0, False: 887]
  |  |  |  |  |  Branch (634:33): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  561|      0|#define DIRECT_CHUNK_OVERHEAD	(TWO_SIZE_T_SIZES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  558|    887|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|    887|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1701|    887|	memcpy(newmem, ptr, oc < nsize ? oc : nsize);
  ------------------
  |  Branch (1701:22): [True: 887, False: 0]
  ------------------
 1702|    887|	lj_alloc_free(m, ptr);
 1703|    887|      }
 1704|    887|      return newmem;
 1705|    887|    }
 1706|  12.6k|  }
 1707|  12.6k|#endif
 1708|  12.6k|}

lua_status:
   98|     24|{
   99|     24|  return L->status;
  100|     24|}
lua_checkstack:
  103|  37.7k|{
  104|  37.7k|  if (size > LUAI_MAXCSTACK || (L->top - L->base + size) > LUAI_MAXCSTACK) {
  ------------------
  |  |   92|  75.4k|#define LUAI_MAXCSTACK	8000	/* Max. # of stack slots for a C func (<10K). */
  ------------------
                if (size > LUAI_MAXCSTACK || (L->top - L->base + size) > LUAI_MAXCSTACK) {
  ------------------
  |  |   92|  37.7k|#define LUAI_MAXCSTACK	8000	/* Max. # of stack slots for a C func (<10K). */
  ------------------
  |  Branch (104:7): [True: 0, False: 37.7k]
  |  Branch (104:32): [True: 0, False: 37.7k]
  ------------------
  105|      0|    return 0;  /* Stack overflow. */
  106|  37.7k|  } else if (size > 0) {
  ------------------
  |  Branch (106:14): [True: 982, False: 36.7k]
  ------------------
  107|    982|    int avail = (int)(mref(L->maxstack, TValue) - L->top);
  ------------------
  |  |   36|    982|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  108|    982|    if (size > avail &&
  ------------------
  |  Branch (108:9): [True: 887, False: 95]
  ------------------
  109|    982|	lj_state_cpgrowstack(L, (MSize)(size - avail)) != LUA_OK) {
  ------------------
  |  |   43|    887|#define LUA_OK		0
  ------------------
  |  Branch (109:2): [True: 0, False: 887]
  ------------------
  110|      0|      L->top--;
  111|      0|      return 0;  /* Out of memory. */
  112|      0|    }
  113|    982|  }
  114|  37.7k|  return 1;
  115|  37.7k|}
luaL_checkstack:
  118|  36.7k|{
  119|  36.7k|  if (!lua_checkstack(L, size))
  ------------------
  |  Branch (119:7): [True: 0, False: 36.7k]
  ------------------
  120|      0|    lj_err_callerv(L, LJ_ERR_STKOVM, msg);
  121|  36.7k|}
lua_xmove:
  124|    109|{
  125|    109|  TValue *f, *t;
  126|    109|  if (L == to) return;
  ------------------
  |  Branch (126:7): [True: 0, False: 109]
  ------------------
  127|    109|  lj_checkapi_slot(n);
  ------------------
  |  |   32|    109|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|    109|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    109|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 109, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    109|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  128|    109|  lj_checkapi(G(L) == G(to), "move across global states");
  ------------------
  |  |  357|    109|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    109|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 109, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    109|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  129|    109|  lj_state_checkstack(to, (MSize)n);
  130|    109|  f = L->top;
  131|    109|  t = to->top = to->top + n;
  132|    218|  while (--n >= 0) copyTV(to, --t, --f);
  ------------------
  |  Branch (132:10): [True: 109, False: 109]
  ------------------
  133|    109|  L->top = f;
  134|    109|}
lua_version:
  137|     28|{
  138|     28|  static const lua_Number version = LUA_VERSION_NUM;
  ------------------
  |  |   21|     28|#define LUA_VERSION_NUM	501
  ------------------
  139|     28|  UNUSED(L);
  ------------------
  |  |   91|     28|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  140|     28|  return &version;
  141|     28|}
lua_gettop:
  146|   386k|{
  147|   386k|  return (int)(L->top - L->base);
  148|   386k|}
lua_settop:
  151|   221k|{
  152|   221k|  if (idx >= 0) {
  ------------------
  |  Branch (152:7): [True: 37.0k, False: 184k]
  ------------------
  153|  37.0k|    lj_checkapi(idx <= tvref(L->maxstack) - L->base, "bad stack slot %d", idx);
  ------------------
  |  |  357|  37.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  37.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 37.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  37.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  154|  37.0k|    if (L->base + idx > L->top) {
  ------------------
  |  Branch (154:9): [True: 20, False: 37.0k]
  ------------------
  155|     20|      if (L->base + idx >= tvref(L->maxstack))
  ------------------
  |  |  217|     20|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     20|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (155:11): [True: 0, False: 20]
  ------------------
  156|      0|	lj_state_growstack(L, (MSize)idx - (MSize)(L->top - L->base));
  157|     29|      do { setnilV(L->top++); } while (L->top < L->base + idx);
  ------------------
  |  |  872|     29|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  |  Branch (157:40): [True: 9, False: 20]
  ------------------
  158|  37.0k|    } else {
  159|  37.0k|      L->top = L->base + idx;
  160|  37.0k|    }
  161|   184k|  } else {
  162|   184k|    lj_checkapi(-(idx+1) <= (L->top - L->base), "bad stack slot %d", idx);
  ------------------
  |  |  357|   184k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   184k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 184k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   184k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  163|   184k|    L->top += idx+1;  /* Shrinks top (idx < 0). */
  164|   184k|  }
  165|   221k|}
lua_remove:
  168|   147k|{
  169|   147k|  TValue *p = index2adr_stack(L, idx);
  170|   294k|  while (++p < L->top) copyTV(L, p-1, p);
  ------------------
  |  Branch (170:10): [True: 147k, False: 147k]
  ------------------
  171|   147k|  L->top--;
  172|   147k|}
lua_insert:
  175|  36.8k|{
  176|  36.8k|  TValue *q, *p = index2adr_stack(L, idx);
  177|  73.9k|  for (q = L->top; q > p; q--) copyTV(L, q, q-1);
  ------------------
  |  Branch (177:20): [True: 37.0k, False: 36.8k]
  ------------------
  178|  36.8k|  copyTV(L, p, L->top);
  179|  36.8k|}
lua_replace:
  203|    109|{
  204|    109|  lj_checkapi_slot(1);
  ------------------
  |  |   32|    109|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|    109|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    109|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 109, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    109|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  205|    109|  copy_slot(L, L->top - 1, idx);
  206|    109|  L->top--;
  207|    109|}
lua_copy:
  210|     33|{
  211|     33|  copy_slot(L, index2adr(L, fromidx), toidx);
  212|     33|}
lua_pushvalue:
  215|   257k|{
  216|   257k|  copyTV(L, L->top, index2adr(L, idx));
  217|   257k|  incr_top(L);
  ------------------
  |  |   12|   257k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   514k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   257k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 257k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  218|   257k|}
lua_type:
  223|   152k|{
  224|   152k|  cTValue *o = index2adr(L, idx);
  225|   152k|  if (tvisnumber(o)) {
  ------------------
  |  |  802|   152k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   152k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   152k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   152k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 826, False: 152k]
  |  |  ------------------
  ------------------
  226|    826|    return LUA_TNUMBER;
  ------------------
  |  |   78|    826|#define LUA_TNUMBER		3
  ------------------
  227|       |#if LJ_64 && !LJ_GC64
  228|       |  } else if (tvislightud(o)) {
  229|       |    return LUA_TLIGHTUSERDATA;
  230|       |#endif
  231|   152k|  } else if (o == niltv(L)) {
  ------------------
  |  |  667|   152k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|   152k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   152k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   152k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 152k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   152k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (231:14): [True: 0, False: 152k]
  ------------------
  232|      0|    return LUA_TNONE;
  ------------------
  |  |   73|      0|#define LUA_TNONE		(-1)
  ------------------
  233|   152k|  } else {  /* Magic internal/external tag conversion. ORDER LJ_T */
  234|   152k|    uint32_t t = ~itype(o);
  ------------------
  |  |  781|   152k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  235|   152k|#if LJ_64
  236|   152k|    int tt = (int)((U64x(75a06,98042110) >> 4*t) & 15u);
  ------------------
  |  |   94|   152k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  237|       |#else
  238|       |    int tt = (int)(((t < 8 ? 0x98042110u : 0x75a06u) >> 4*(t&7)) & 15u);
  239|       |#endif
  240|   152k|    lj_assertL(tt != LUA_TNIL || tvisnil(o), "bad tag conversion");
  ------------------
  |  |  365|   152k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   299k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 4.93k, False: 147k]
  |  |  |  |  |  Branch (355:5): [True: 147k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   152k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  241|   152k|    return tt;
  242|   152k|  }
  243|   152k|}
luaL_checktype:
  246|    130|{
  247|    130|  if (lua_type(L, idx) != tt)
  ------------------
  |  Branch (247:7): [True: 0, False: 130]
  ------------------
  248|      0|    lj_err_argt(L, idx, tt);
  249|    130|}
luaL_checkany:
  252|     39|{
  253|     39|  if (index2adr(L, idx) == niltv(L))
  ------------------
  |  |  667|     39|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|     39|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     39|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     39|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 39, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     39|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (253:7): [True: 0, False: 39]
  ------------------
  254|      0|    lj_err_arg(L, idx, LJ_ERR_NOVAL);
  255|     39|}
lua_typename:
  258|     28|{
  259|     28|  UNUSED(L);
  ------------------
  |  |   91|     28|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  260|     28|  return lj_obj_typename[t+1];
  261|     28|}
lua_iscfunction:
  264|    151|{
  265|    151|  cTValue *o = index2adr(L, idx);
  266|    151|  return tvisfunc(o) && !isluafunc(funcV(o));
  ------------------
  |  |  796|    302|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|    151|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|    151|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 6, False: 145]
  |  |  ------------------
  ------------------
                return tvisfunc(o) && !isluafunc(funcV(o));
  ------------------
  |  |  476|     12|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      6|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (266:25): [True: 6, False: 0]
  ------------------
  267|    151|}
lua_isnumber:
  270|    187|{
  271|    187|  cTValue *o = index2adr(L, idx);
  272|    187|  TValue tmp;
  273|    187|  return (tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), &tmp)));
  ------------------
  |  |  802|    374|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    187|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    187|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    187|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 71, False: 116]
  |  |  ------------------
  ------------------
                return (tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), &tmp)));
  ------------------
  |  |  795|    232|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    116|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    116|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 52, False: 64]
  |  |  ------------------
  ------------------
                return (tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), &tmp)));
  ------------------
  |  |   31|    104|#define lj_strscan_number(s, o)		lj_strscan_num((s), (o))
  |  |  ------------------
  |  |  |  Branch (31:34): [True: 6, False: 46]
  |  |  |  Branch (31:50): [True: 52, False: 0]
  |  |  ------------------
  ------------------
  274|    187|}
lua_isstring:
  277|    172|{
  278|    172|  cTValue *o = index2adr(L, idx);
  279|    172|  return (tvisstr(o) || tvisnumber(o));
  ------------------
  |  |  795|    344|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    172|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    172|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 9, False: 163]
  |  |  ------------------
  ------------------
                return (tvisstr(o) || tvisnumber(o));
  ------------------
  |  |  802|    163|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    163|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    163|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    163|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 88, False: 75]
  |  |  ------------------
  ------------------
  280|    172|}
lua_isuserdata:
  283|    229|{
  284|    229|  cTValue *o = index2adr(L, idx);
  285|    229|  return (tvisudata(o) || tvislightud(o));
  ------------------
  |  |  801|    458|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|    229|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|    229|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 229]
  |  |  ------------------
  ------------------
                return (tvisudata(o) || tvislightud(o));
  ------------------
  |  |  793|    229|#define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  781|    229|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  263|    229|#define LJ_TLIGHTUD		(~3u)
  |  |  ------------------
  |  |  |  Branch (793:24): [True: 0, False: 229]
  |  |  ------------------
  ------------------
  286|    229|}
lua_rawequal:
  289|  1.14k|{
  290|  1.14k|  cTValue *o1 = index2adr(L, idx1);
  291|  1.14k|  cTValue *o2 = index2adr(L, idx2);
  292|  1.14k|  return (o1 == niltv(L) || o2 == niltv(L)) ? 0 : lj_obj_equal(o1, o2);
  ------------------
  |  |  667|  1.14k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  2.29k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.14k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.14k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.14k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.14k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                return (o1 == niltv(L) || o2 == niltv(L)) ? 0 : lj_obj_equal(o1, o2);
  ------------------
  |  |  667|  1.14k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  1.14k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.14k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.14k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.14k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.14k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (292:11): [True: 0, False: 1.14k]
  |  Branch (292:29): [True: 0, False: 1.14k]
  ------------------
  293|  1.14k|}
lua_equal:
  296|  1.14k|{
  297|  1.14k|  cTValue *o1 = index2adr(L, idx1);
  298|  1.14k|  cTValue *o2 = index2adr(L, idx2);
  299|  1.14k|  if (tvisint(o1) && tvisint(o2)) {
  ------------------
  |  |  803|  2.28k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  2.28k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                if (tvisint(o1) && tvisint(o2)) {
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  300|      0|    return intV(o1) == intV(o2);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  return intV(o1) == intV(o2);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  301|  1.14k|  } else if (tvisnumber(o1) && tvisnumber(o2)) {
  ------------------
  |  |  802|  2.28k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  1.14k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.14k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.14k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 229, False: 914]
  |  |  ------------------
  ------------------
                } else if (tvisnumber(o1) && tvisnumber(o2)) {
  ------------------
  |  |  802|    229|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    229|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    229|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    229|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 139, False: 90]
  |  |  ------------------
  ------------------
  302|    139|    return numberVnum(o1) == numberVnum(o2);
  303|  1.00k|  } else if (itype(o1) != itype(o2)) {
  ------------------
  |  |  781|  1.00k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
                } else if (itype(o1) != itype(o2)) {
  ------------------
  |  |  781|  1.00k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  |  Branch (303:14): [True: 193, False: 811]
  ------------------
  304|    193|    return 0;
  305|    811|  } else if (tvispri(o1)) {
  ------------------
  |  |  807|    811|#define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  781|    811|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  283|    811|#define LJ_TISPRI		LJ_TTRUE
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|    811|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (807:20): [True: 2, False: 809]
  |  |  ------------------
  ------------------
  306|      2|    return o1 != niltv(L) && o2 != niltv(L);
  ------------------
  |  |  667|      2|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      4|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      2|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  return o1 != niltv(L) && o2 != niltv(L);
  ------------------
  |  |  667|      2|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      2|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      2|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (306:12): [True: 2, False: 0]
  |  Branch (306:30): [True: 2, False: 0]
  ------------------
  307|       |#if LJ_64 && !LJ_GC64
  308|       |  } else if (tvislightud(o1)) {
  309|       |    return o1->u64 == o2->u64;
  310|       |#endif
  311|    809|  } else if (gcrefeq(o1->gcr, o2->gcr)) {
  ------------------
  |  |   70|    809|#define gcrefeq(r1, r2)	((r1).gcptr64 == (r2).gcptr64)
  |  |  ------------------
  |  |  |  Branch (70:25): [True: 125, False: 684]
  |  |  ------------------
  ------------------
  312|    125|    return 1;
  313|    684|  } else if (!tvistabud(o1)) {
  ------------------
  |  |  808|    684|#define tvistabud(o)	(itype(o) <= LJ_TISTABUD)  /* && !tvisnum() */
  |  |  ------------------
  |  |  |  |  781|    684|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistabud(o)	(itype(o) <= LJ_TISTABUD)  /* && !tvisnum() */
  |  |  ------------------
  |  |  |  |  285|    684|#define LJ_TISTABUD		LJ_TTAB
  |  |  |  |  ------------------
  |  |  |  |  |  |  271|    684|#define LJ_TTAB			(~11u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (313:14): [True: 487, False: 197]
  ------------------
  314|    487|    return 0;
  315|    487|  } else {
  316|    197|    TValue *base = lj_meta_equal(L, gcV(o1), gcV(o2), 0);
  ------------------
  |  |  858|    197|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|    197|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    197|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    197|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 197, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    197|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  TValue *base = lj_meta_equal(L, gcV(o1), gcV(o2), 0);
  ------------------
  |  |  858|    197|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|    197|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    197|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    197|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 197, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    197|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  317|    197|    if ((uintptr_t)base <= 1) {
  ------------------
  |  Branch (317:9): [True: 197, False: 0]
  ------------------
  318|    197|      return (int)(uintptr_t)base;
  319|    197|    } else {
  320|      0|      L->top = base+2;
  321|      0|      lj_vm_call(L, base, 1+1);
  322|      0|      L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  323|      0|      return tvistruecond(L->top+1+LJ_FR2);
  ------------------
  |  |  806|      0|#define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  282|      0|#define LJ_TISTRUECOND		LJ_TFALSE
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  324|      0|    }
  325|    197|  }
  326|  1.14k|}
lua_lessthan:
  329|    274|{
  330|    274|  cTValue *o1 = index2adr(L, idx1);
  331|    274|  cTValue *o2 = index2adr(L, idx2);
  332|    274|  if (o1 == niltv(L) || o2 == niltv(L)) {
  ------------------
  |  |  667|    274|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|    548|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    274|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    274|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 274, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    274|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if (o1 == niltv(L) || o2 == niltv(L)) {
  ------------------
  |  |  667|    274|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|    274|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    274|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    274|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 274, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    274|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (332:7): [True: 0, False: 274]
  |  Branch (332:25): [True: 0, False: 274]
  ------------------
  333|      0|    return 0;
  334|    274|  } else if (tvisint(o1) && tvisint(o2)) {
  ------------------
  |  |  803|    548|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|    548|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                } else if (tvisint(o1) && tvisint(o2)) {
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  335|      0|    return intV(o1) < intV(o2);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  return intV(o1) < intV(o2);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    274|  } else if (tvisnumber(o1) && tvisnumber(o2)) {
  ------------------
  |  |  802|    548|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    274|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    274|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    274|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 118, False: 156]
  |  |  ------------------
  ------------------
                } else if (tvisnumber(o1) && tvisnumber(o2)) {
  ------------------
  |  |  802|    118|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    118|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    118|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    118|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 118, False: 0]
  |  |  ------------------
  ------------------
  337|    118|    return numberVnum(o1) < numberVnum(o2);
  338|    156|  } else {
  339|    156|    TValue *base = lj_meta_comp(L, o1, o2, 0);
  340|    156|    if ((uintptr_t)base <= 1) {
  ------------------
  |  Branch (340:9): [True: 156, False: 0]
  ------------------
  341|    156|      return (int)(uintptr_t)base;
  342|    156|    } else {
  343|      0|      L->top = base+2;
  344|      0|      lj_vm_call(L, base, 1+1);
  345|      0|      L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  346|      0|      return tvistruecond(L->top+1+LJ_FR2);
  ------------------
  |  |  806|      0|#define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  282|      0|#define LJ_TISTRUECOND		LJ_TFALSE
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  347|      0|    }
  348|    156|  }
  349|    274|}
lua_tonumber:
  352|    244|{
  353|    244|  cTValue *o = index2adr(L, idx);
  354|    244|  TValue tmp;
  355|    244|  if (LJ_LIKELY(tvisnumber(o)))
  ------------------
  |  |  145|    244|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 77, False: 167]
  |  |  ------------------
  ------------------
  356|     77|    return numberVnum(o);
  357|    167|  else if (tvisstr(o) && lj_strscan_num(strV(o), &tmp))
  ------------------
  |  |  795|    334|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    167|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    167|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 106, False: 61]
  |  |  ------------------
  ------------------
                else if (tvisstr(o) && lj_strscan_num(strV(o), &tmp))
  ------------------
  |  |  859|    106|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    106|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    106|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    106|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 106, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    106|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (357:26): [True: 35, False: 71]
  ------------------
  358|    167|    return numV(&tmp);
  ------------------
  |  |  866|     35|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|     35|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     35|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     35|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 35, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     35|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  359|    132|  else
  360|    132|    return 0;
  361|    244|}
lua_tonumberx:
  364|    258|{
  365|    258|  cTValue *o = index2adr(L, idx);
  366|    258|  TValue tmp;
  367|    258|  if (LJ_LIKELY(tvisnumber(o))) {
  ------------------
  |  |  145|    258|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 78, False: 180]
  |  |  ------------------
  ------------------
  368|     78|    if (ok) *ok = 1;
  ------------------
  |  Branch (368:9): [True: 78, False: 0]
  ------------------
  369|     78|    return numberVnum(o);
  370|    180|  } else if (tvisstr(o) && lj_strscan_num(strV(o), &tmp)) {
  ------------------
  |  |  795|    360|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    180|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    180|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 109, False: 71]
  |  |  ------------------
  ------------------
                } else if (tvisstr(o) && lj_strscan_num(strV(o), &tmp)) {
  ------------------
  |  |  859|    109|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    109|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    109|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    109|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 109, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    109|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (370:28): [True: 47, False: 62]
  ------------------
  371|     47|    if (ok) *ok = 1;
  ------------------
  |  Branch (371:9): [True: 47, False: 0]
  ------------------
  372|     47|    return numV(&tmp);
  ------------------
  |  |  866|     47|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|     47|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     47|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     47|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 47, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     47|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  373|    133|  } else {
  374|    133|    if (ok) *ok = 0;
  ------------------
  |  Branch (374:9): [True: 133, False: 0]
  ------------------
  375|    133|    return 0;
  376|    133|  }
  377|    258|}
luaL_checknumber:
  380|    103|{
  381|    103|  cTValue *o = index2adr(L, idx);
  382|    103|  TValue tmp;
  383|    103|  if (LJ_LIKELY(tvisnumber(o)))
  ------------------
  |  |  145|    103|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 103, False: 0]
  |  |  ------------------
  ------------------
  384|    103|    return numberVnum(o);
  385|      0|  else if (!(tvisstr(o) && lj_strscan_num(strV(o), &tmp)))
  ------------------
  |  |  795|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                else if (!(tvisstr(o) && lj_strscan_num(strV(o), &tmp)))
  ------------------
  |  |  859|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (385:28): [True: 0, False: 0]
  ------------------
  386|      0|    lj_err_argt(L, idx, LUA_TNUMBER);
  ------------------
  |  |   78|      0|#define LUA_TNUMBER		3
  ------------------
  387|      0|  return numV(&tmp);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  388|      0|}
lua_tointeger:
  404|    284|{
  405|    284|  cTValue *o = index2adr(L, idx);
  406|    284|  TValue tmp;
  407|    284|  lua_Number n;
  408|    284|  if (LJ_LIKELY(tvisint(o))) {
  ------------------
  |  |  145|    284|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [Folded - Ignored]
  |  |  |  Branch (145:42): [Folded - Ignored]
  |  |  |  Branch (145:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  409|      0|    return intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  410|    284|  } else if (LJ_LIKELY(tvisnum(o))) {
  ------------------
  |  |  145|    284|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 29, False: 255]
  |  |  ------------------
  ------------------
  411|     29|    n = numV(o);
  ------------------
  |  |  866|     29|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|     29|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     29|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     29|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 29, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     29|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  412|    255|  } else {
  413|    255|    if (!(tvisstr(o) && lj_strscan_number(strV(o), &tmp)))
  ------------------
  |  |  795|    510|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    255|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    255|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 65, False: 190]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(o) && lj_strscan_number(strV(o), &tmp)))
  ------------------
  |  |   31|    130|#define lj_strscan_number(s, o)		lj_strscan_num((s), (o))
  |  |  ------------------
  |  |  |  Branch (31:34): [True: 23, False: 42]
  |  |  |  Branch (31:50): [True: 65, False: 0]
  |  |  ------------------
  ------------------
  414|    232|      return 0;
  415|     23|    if (tvisint(&tmp))
  ------------------
  |  |  803|     23|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|     46|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  416|     23|      return intV(&tmp);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  417|     23|    n = numV(&tmp);
  ------------------
  |  |  866|     23|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|     23|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     23|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     23|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 23, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     23|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  418|     23|  }
  419|     52|#if LJ_64
  420|     52|  return (lua_Integer)n;
  421|       |#else
  422|       |  return lj_num2int(n);
  423|       |#endif
  424|    284|}
lua_tointegerx:
  427|    161|{
  428|    161|  cTValue *o = index2adr(L, idx);
  429|    161|  TValue tmp;
  430|    161|  lua_Number n;
  431|    161|  if (LJ_LIKELY(tvisint(o))) {
  ------------------
  |  |  145|    161|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [Folded - Ignored]
  |  |  |  Branch (145:42): [Folded - Ignored]
  |  |  |  Branch (145:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  432|      0|    if (ok) *ok = 1;
  ------------------
  |  Branch (432:9): [True: 0, False: 0]
  ------------------
  433|      0|    return intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  434|    161|  } else if (LJ_LIKELY(tvisnum(o))) {
  ------------------
  |  |  145|    161|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 26, False: 135]
  |  |  ------------------
  ------------------
  435|     26|    n = numV(o);
  ------------------
  |  |  866|     26|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|     26|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     26|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     26|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 26, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     26|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  436|    135|  } else {
  437|    135|    if (!(tvisstr(o) && lj_strscan_number(strV(o), &tmp))) {
  ------------------
  |  |  795|    270|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    135|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    135|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 57, False: 78]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(o) && lj_strscan_number(strV(o), &tmp))) {
  ------------------
  |  |   31|    114|#define lj_strscan_number(s, o)		lj_strscan_num((s), (o))
  |  |  ------------------
  |  |  |  Branch (31:34): [True: 20, False: 37]
  |  |  |  Branch (31:50): [True: 57, False: 0]
  |  |  ------------------
  ------------------
  438|    115|      if (ok) *ok = 0;
  ------------------
  |  Branch (438:11): [True: 115, False: 0]
  ------------------
  439|    115|      return 0;
  440|    115|    }
  441|     20|    if (tvisint(&tmp)) {
  ------------------
  |  |  803|     20|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|     40|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  442|      0|      if (ok) *ok = 1;
  ------------------
  |  Branch (442:11): [True: 0, False: 0]
  ------------------
  443|      0|      return intV(&tmp);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  444|      0|    }
  445|     20|    n = numV(&tmp);
  ------------------
  |  |  866|     20|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|     20|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     20|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     20|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 20, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     20|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  446|     20|  }
  447|     46|  if (ok) *ok = 1;
  ------------------
  |  Branch (447:7): [True: 46, False: 0]
  ------------------
  448|     46|#if LJ_64
  449|     46|  return (lua_Integer)n;
  450|       |#else
  451|       |  return lj_num2int(n);
  452|       |#endif
  453|    161|}
luaL_checkinteger:
  456|     46|{
  457|     46|  cTValue *o = index2adr(L, idx);
  458|     46|  TValue tmp;
  459|     46|  lua_Number n;
  460|     46|  if (LJ_LIKELY(tvisint(o))) {
  ------------------
  |  |  145|     46|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [Folded - Ignored]
  |  |  |  Branch (145:42): [Folded - Ignored]
  |  |  |  Branch (145:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  461|      0|    return intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  462|     46|  } else if (LJ_LIKELY(tvisnum(o))) {
  ------------------
  |  |  145|     46|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 46, False: 0]
  |  |  ------------------
  ------------------
  463|     46|    n = numV(o);
  ------------------
  |  |  866|     46|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|     46|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     46|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     46|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 46, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     46|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  464|     46|  } else {
  465|      0|    if (!(tvisstr(o) && lj_strscan_number(strV(o), &tmp)))
  ------------------
  |  |  795|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(o) && lj_strscan_number(strV(o), &tmp)))
  ------------------
  |  |   31|      0|#define lj_strscan_number(s, o)		lj_strscan_num((s), (o))
  |  |  ------------------
  |  |  |  Branch (31:34): [True: 0, False: 0]
  |  |  |  Branch (31:50): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  466|      0|      lj_err_argt(L, idx, LUA_TNUMBER);
  ------------------
  |  |   78|      0|#define LUA_TNUMBER		3
  ------------------
  467|      0|    if (tvisint(&tmp))
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  468|      0|      return (lua_Integer)intV(&tmp);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  469|      0|    n = numV(&tmp);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  470|      0|  }
  471|     46|#if LJ_64
  472|     46|  return (lua_Integer)n;
  473|       |#else
  474|       |  return lj_num2int(n);
  475|       |#endif
  476|     46|}
lua_toboolean:
  504|    146|{
  505|    146|  cTValue *o = index2adr(L, idx);
  506|    146|  return tvistruecond(o);
  ------------------
  |  |  806|    146|#define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  781|    146|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  282|    146|#define LJ_TISTRUECOND		LJ_TFALSE
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|    146|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  507|    146|}
lua_tolstring:
  510|    275|{
  511|    275|  TValue *o = index2adr(L, idx);
  512|    275|  GCstr *s;
  513|    275|  if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|    275|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 18, False: 257]
  |  |  ------------------
  ------------------
  514|     18|    s = strV(o);
  ------------------
  |  |  859|     18|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|     18|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     18|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     18|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 18, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     18|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  515|    257|  } else if (tvisnumber(o)) {
  ------------------
  |  |  802|    257|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    257|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    257|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    257|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 142, False: 115]
  |  |  ------------------
  ------------------
  516|    142|    lj_gc_check(L);
  ------------------
  |  |   66|    142|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|    142|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 12, False: 130]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|    142|      lj_gc_step(L); }
  ------------------
  517|    142|    o = index2adr(L, idx);  /* GC may move the stack. */
  518|    142|    s = lj_strfmt_number(L, o);
  519|    142|    setstrV(L, o, s);
  520|    142|  } else {
  521|    115|    if (len != NULL) *len = 0;
  ------------------
  |  Branch (521:9): [True: 0, False: 115]
  ------------------
  522|    115|    return NULL;
  523|    115|  }
  524|    160|  if (len != NULL) *len = s->len;
  ------------------
  |  Branch (524:7): [True: 0, False: 160]
  ------------------
  525|    160|  return strdata(s);
  ------------------
  |  |  316|    160|#define strdata(s)	((const char *)((s)+1))
  ------------------
  526|    275|}
luaL_checklstring:
  529|     12|{
  530|     12|  TValue *o = index2adr(L, idx);
  531|     12|  GCstr *s;
  532|     12|  if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|     12|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 12, False: 0]
  |  |  ------------------
  ------------------
  533|     12|    s = strV(o);
  ------------------
  |  |  859|     12|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|     12|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     12|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     12|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 12, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     12|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  534|     12|  } else if (tvisnumber(o)) {
  ------------------
  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  535|      0|    lj_gc_check(L);
  ------------------
  |  |   66|      0|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      0|      lj_gc_step(L); }
  ------------------
  536|      0|    o = index2adr(L, idx);  /* GC may move the stack. */
  537|      0|    s = lj_strfmt_number(L, o);
  538|      0|    setstrV(L, o, s);
  539|      0|  } else {
  540|      0|    lj_err_argt(L, idx, LUA_TSTRING);
  ------------------
  |  |   79|      0|#define LUA_TSTRING		4
  ------------------
  541|      0|  }
  542|     12|  if (len != NULL) *len = s->len;
  ------------------
  |  Branch (542:7): [True: 0, False: 12]
  ------------------
  543|     12|  return strdata(s);
  ------------------
  |  |  316|     12|#define strdata(s)	((const char *)((s)+1))
  ------------------
  544|     12|}
lua_objlen:
  582|    252|{
  583|    252|  TValue *o = index2adr(L, idx);
  584|    252|  if (tvisstr(o)) {
  ------------------
  |  |  795|    252|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    252|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    252|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 4, False: 248]
  |  |  ------------------
  ------------------
  585|      4|    return strV(o)->len;
  ------------------
  |  |  859|      4|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      4|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      4|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      4|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      4|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  586|    248|  } else if (tvistab(o)) {
  ------------------
  |  |  800|    248|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|    248|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|    248|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 132, False: 116]
  |  |  ------------------
  ------------------
  587|    132|    return (size_t)lj_tab_len(tabV(o));
  ------------------
  |  |  864|    132|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|    132|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    132|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    132|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 132, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    132|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  588|    132|  } else if (tvisudata(o)) {
  ------------------
  |  |  801|    116|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|    116|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|    116|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 116]
  |  |  ------------------
  ------------------
  589|      0|    return udataV(o)->len;
  ------------------
  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  590|    116|  } else if (tvisnumber(o)) {
  ------------------
  |  |  802|    116|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    116|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    116|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    116|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 98, False: 18]
  |  |  ------------------
  ------------------
  591|     98|    GCstr *s = lj_strfmt_number(L, o);
  592|     98|    setstrV(L, o, s);
  593|     98|    return s->len;
  594|     98|  } else {
  595|     18|    return 0;
  596|     18|  }
  597|    252|}
lua_tocfunction:
  600|    136|{
  601|    136|  cTValue *o = index2adr(L, idx);
  602|    136|  if (tvisfunc(o)) {
  ------------------
  |  |  796|    136|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|    136|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|    136|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 3, False: 133]
  |  |  ------------------
  ------------------
  603|      3|    BCOp op = bc_op(*mref(funcV(o)->c.pc, BCIns));
  ------------------
  |  |   34|      6|#define bc_op(i)	((BCOp)((i)&0xff))
  |  |  ------------------
  |  |  |  Branch (34:27): [True: 3, False: 0]
  |  |  ------------------
  ------------------
  604|      3|    if (op == BC_FUNCC || op == BC_FUNCCW)
  ------------------
  |  Branch (604:9): [True: 3, False: 0]
  |  Branch (604:27): [True: 0, False: 0]
  ------------------
  605|      3|      return funcV(o)->c.f;
  ------------------
  |  |  860|      3|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|      3|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      3|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  606|      3|  }
  607|    133|  return NULL;
  608|    136|}
lua_touserdata:
  611|    132|{
  612|    132|  cTValue *o = index2adr(L, idx);
  613|    132|  if (tvisudata(o))
  ------------------
  |  |  801|    132|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|    132|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|    132|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 132]
  |  |  ------------------
  ------------------
  614|    132|    return uddata(udataV(o));
  ------------------
  |  |  342|      0|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  615|    132|  else if (tvislightud(o))
  ------------------
  |  |  793|    132|#define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  781|    132|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  263|    132|#define LJ_TLIGHTUD		(~3u)
  |  |  ------------------
  |  |  |  Branch (793:24): [True: 0, False: 132]
  |  |  ------------------
  ------------------
  616|      0|    return lightudV(G(L), o);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  617|    132|  else
  618|    132|    return NULL;
  619|    132|}
lua_tothread:
  622|    139|{
  623|    139|  cTValue *o = index2adr(L, idx);
  624|    139|  return (!tvisthread(o)) ? NULL : threadV(o);
  ------------------
  |  |  797|    139|#define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  781|    139|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  266|    139|#define LJ_TTHREAD		(~6u)
  |  |  ------------------
  ------------------
                return (!tvisthread(o)) ? NULL : threadV(o);
  ------------------
  |  |  861|      2|#define threadV(o)	check_exp(tvisthread(o), &gcval(o)->th)
  |  |  ------------------
  |  |  |  |  367|      2|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      2|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (624:10): [True: 137, False: 2]
  ------------------
  625|    139|}
lua_topointer:
  628|    183|{
  629|    183|  return lj_obj_ptr(G(L), index2adr(L, idx));
  ------------------
  |  |  705|    183|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    183|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  630|    183|}
lua_pushnil:
  635|  5.34k|{
  636|  5.34k|  setnilV(L->top);
  ------------------
  |  |  872|  5.34k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  637|  5.34k|  incr_top(L);
  ------------------
  |  |   12|  5.34k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  10.6k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  5.34k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 5.34k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  638|  5.34k|}
lua_pushnumber:
  641|  43.9k|{
  642|  43.9k|  setnumV(L->top, n);
  ------------------
  |  |  945|  43.9k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  643|  43.9k|  if (LJ_UNLIKELY(tvisnan(L->top)))
  ------------------
  |  |  146|  43.9k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 43.9k]
  |  |  ------------------
  ------------------
  644|      0|    setnanV(L->top);  /* Canonicalize injected NaNs. */
  ------------------
  |  |  946|      0|#define setnanV(o)		((o)->u64 = U64x(fff80000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  645|  43.9k|  incr_top(L);
  ------------------
  |  |   12|  43.9k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  87.8k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  43.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 43.9k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  646|  43.9k|}
lua_pushinteger:
  649|  5.11k|{
  650|  5.11k|  setintptrV(L->top, n);
  ------------------
  |  |  968|  5.11k|#define setintptrV(o, i)	setint64V((o), (i))
  ------------------
  651|  5.11k|  incr_top(L);
  ------------------
  |  |   12|  5.11k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  10.2k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  5.11k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 5.11k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  652|  5.11k|}
lua_pushlstring:
  655|   236k|{
  656|   236k|  GCstr *s;
  657|   236k|  lj_gc_check(L);
  ------------------
  |  |   66|   236k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   236k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 26, False: 236k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   236k|      lj_gc_step(L); }
  ------------------
  658|   236k|  s = lj_str_new(L, str, len);
  659|   236k|  setstrV(L, L->top, s);
  660|   236k|  incr_top(L);
  ------------------
  |  |   12|   236k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   472k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   236k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 236k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  661|   236k|}
lua_pushstring:
  664|  4.48k|{
  665|  4.48k|  if (str == NULL) {
  ------------------
  |  Branch (665:7): [True: 0, False: 4.48k]
  ------------------
  666|      0|    setnilV(L->top);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  667|  4.48k|  } else {
  668|  4.48k|    GCstr *s;
  669|  4.48k|    lj_gc_check(L);
  ------------------
  |  |   66|  4.48k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  4.48k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 14, False: 4.46k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  4.48k|      lj_gc_step(L); }
  ------------------
  670|  4.48k|    s = lj_str_newz(L, str);
  ------------------
  |  |   27|  4.48k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  671|  4.48k|    setstrV(L, L->top, s);
  672|  4.48k|  }
  673|  4.48k|  incr_top(L);
  ------------------
  |  |   12|  4.48k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  8.96k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  4.48k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 4.48k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  674|  4.48k|}
lua_pushfstring:
  684|  12.7k|{
  685|  12.7k|  const char *ret;
  686|  12.7k|  va_list argp;
  687|  12.7k|  lj_gc_check(L);
  ------------------
  |  |   66|  12.7k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  12.7k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 534, False: 12.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  12.7k|      lj_gc_step(L); }
  ------------------
  688|  12.7k|  va_start(argp, fmt);
  689|  12.7k|  ret = lj_strfmt_pushvf(L, fmt, argp);
  690|  12.7k|  va_end(argp);
  691|  12.7k|  return ret;
  692|  12.7k|}
lua_pushcclosure:
  695|  86.9k|{
  696|  86.9k|  GCfunc *fn;
  697|  86.9k|  lj_gc_check(L);
  ------------------
  |  |   66|  86.9k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  86.9k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 247, False: 86.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  86.9k|      lj_gc_step(L); }
  ------------------
  698|  86.9k|  lj_checkapi_slot(n);
  ------------------
  |  |   32|  86.9k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  86.9k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  86.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 86.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  86.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  699|  86.9k|  fn = lj_func_newC(L, (MSize)n, getcurrenv(L));
  700|  86.9k|  fn->c.f = f;
  701|  86.9k|  L->top -= n;
  702|  87.6k|  while (n--)
  ------------------
  |  Branch (702:10): [True: 721, False: 86.9k]
  ------------------
  703|    721|    copyTV(L, &fn->c.upvalue[n], L->top+n);
  704|  86.9k|  setfuncV(L, L->top, fn);
  705|  86.9k|  lj_assertL(iswhite(obj2gco(fn)), "new GC object is not white");
  ------------------
  |  |  365|  86.9k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  86.9k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 86.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  86.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  706|  86.9k|  incr_top(L);
  ------------------
  |  |   12|  86.9k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   173k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  86.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 86.9k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  707|  86.9k|}
lua_pushboolean:
  710|  8.53k|{
  711|  8.53k|  setboolV(L->top, (b != 0));
  ------------------
  |  |  874|  8.53k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  712|  8.53k|  incr_top(L);
  ------------------
  |  |   12|  8.53k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  17.0k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  8.53k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 8.53k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  713|  8.53k|}
lua_createtable:
  725|   121k|{
  726|   121k|  lj_gc_check(L);
  ------------------
  |  |   66|   121k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   121k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 63, False: 121k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   121k|      lj_gc_step(L); }
  ------------------
  727|   121k|  settabV(L, L->top, lj_tab_new_ah(L, narray, nrec));
  728|   121k|  incr_top(L);
  ------------------
  |  |   12|   121k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   243k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   121k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 121k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  729|   121k|}
lua_pushthread:
  748|     36|{
  749|     36|  setthreadV(L, L->top, L);
  750|     36|  incr_top(L);
  ------------------
  |  |   12|     36|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|     72|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     36|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 36]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  751|     36|  return (mainthread(G(L)) == L);
  ------------------
  |  |  665|     36|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|     36|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  752|     36|}
lua_newthread:
  755|  9.96k|{
  756|  9.96k|  lua_State *L1;
  757|  9.96k|  lj_gc_check(L);
  ------------------
  |  |   66|  9.96k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  9.96k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 15, False: 9.95k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  9.96k|      lj_gc_step(L); }
  ------------------
  758|  9.96k|  L1 = lj_state_new(L);
  759|  9.96k|  setthreadV(L, L->top, L1);
  760|  9.96k|  incr_top(L);
  ------------------
  |  |   12|  9.96k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  19.9k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  9.96k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 9.96k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  761|  9.96k|  return L1;
  762|  9.96k|}
lua_newuserdata:
  765|    347|{
  766|    347|  GCudata *ud;
  767|    347|  lj_gc_check(L);
  ------------------
  |  |   66|    347|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|    347|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 28, False: 319]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|    347|      lj_gc_step(L); }
  ------------------
  768|    347|  if (size > LJ_MAX_UDATA)
  ------------------
  |  |   56|    347|#define LJ_MAX_UDATA	LJ_MAX_MEM32	/* Max. userdata length. */
  |  |  ------------------
  |  |  |  |   49|    347|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (768:7): [True: 0, False: 347]
  ------------------
  769|      0|    lj_err_msg(L, LJ_ERR_UDATAOV);
  770|    347|  ud = lj_udata_new(L, (MSize)size, getcurrenv(L));
  771|    347|  setudataV(L, L->top, ud);
  772|    347|  incr_top(L);
  ------------------
  |  |   12|    347|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    694|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    347|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 347]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  773|    347|  return uddata(ud);
  ------------------
  |  |  342|    347|#define uddata(u)	((void *)((u)+1))
  ------------------
  774|    347|}
lua_concat:
  777|    303|{
  778|    303|  lj_checkapi_slot(n);
  ------------------
  |  |   32|    303|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|    303|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    303|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 303, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    303|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  779|    303|  if (n >= 2) {
  ------------------
  |  Branch (779:7): [True: 244, False: 59]
  ------------------
  780|    244|    n--;
  781|    244|    do {
  782|    244|      TValue *top = lj_meta_cat(L, L->top-1, -n);
  783|    244|      if (top == NULL) {
  ------------------
  |  Branch (783:11): [True: 244, False: 0]
  ------------------
  784|    244|	L->top -= n;
  785|    244|	break;
  786|    244|      }
  787|      0|      n -= (int)(L->top - (top - 2*LJ_FR2));
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  788|      0|      L->top = top+2;
  789|      0|      lj_vm_call(L, top, 1+1);
  790|      0|      L->top -= 1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  791|      0|      copyTV(L, L->top-1, L->top+LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  792|      0|    } while (--n > 0);
  ------------------
  |  Branch (792:14): [True: 0, False: 0]
  ------------------
  793|    244|  } else if (n == 0) {  /* Push empty string. */
  ------------------
  |  Branch (793:14): [True: 52, False: 7]
  ------------------
  794|     52|    setstrV(L, L->top, &G(L)->strempty);
  ------------------
  |  |  705|     52|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     52|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  795|     52|    incr_top(L);
  ------------------
  |  |   12|     52|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    104|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     52|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 52]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  796|     52|  }
  797|       |  /* else n == 1: nothing to do. */
  798|    303|}
lua_gettable:
  803|     86|{
  804|     86|  cTValue *t = index2adr_check(L, idx);
  805|     86|  cTValue *v = lj_meta_tget(L, t, L->top-1);
  806|     86|  if (v == NULL) {
  ------------------
  |  Branch (806:7): [True: 0, False: 86]
  ------------------
  807|      0|    L->top += 2;
  808|      0|    lj_vm_call(L, L->top-2, 1+1);
  809|      0|    L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  810|      0|    v = L->top+1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  811|      0|  }
  812|     86|  copyTV(L, L->top-1, v);
  813|     86|}
lua_getfield:
  816|  75.4k|{
  817|  75.4k|  cTValue *v, *t = index2adr_check(L, idx);
  818|  75.4k|  TValue key;
  819|  75.4k|  setstrV(L, &key, lj_str_newz(L, k));
  ------------------
  |  |   27|  75.4k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  820|  75.4k|  v = lj_meta_tget(L, t, &key);
  821|  75.4k|  if (v == NULL) {
  ------------------
  |  Branch (821:7): [True: 0, False: 75.4k]
  ------------------
  822|      0|    L->top += 2;
  823|      0|    lj_vm_call(L, L->top-2, 1+1);
  824|      0|    L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  825|      0|    v = L->top+1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  826|      0|  }
  827|  75.4k|  copyTV(L, L->top, v);
  828|  75.4k|  incr_top(L);
  ------------------
  |  |   12|  75.4k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   150k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  75.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 75.4k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  829|  75.4k|}
lua_rawget:
  832|   110k|{
  833|   110k|  cTValue *t = index2adr(L, idx);
  834|   110k|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|   110k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   110k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 110k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   110k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  835|   110k|  copyTV(L, L->top-1, lj_tab_get(L, tabV(t), L->top-1));
  ------------------
  |  |  864|   110k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   110k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   110k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   110k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 110k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   110k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  836|   110k|}
lua_rawgeti:
  839|    244|{
  840|    244|  cTValue *v, *t = index2adr(L, idx);
  841|    244|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|    244|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    244|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 244, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    244|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  842|    244|  v = lj_tab_getint(tabV(t), n);
  ------------------
  |  |   82|    488|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|    488|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 244]
  |  |  |  |  |  Branch (79:50): [True: 244, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (82:66): [True: 244, False: 0]
  |  |  ------------------
  ------------------
  843|    244|  if (v) {
  ------------------
  |  Branch (843:7): [True: 0, False: 244]
  ------------------
  844|      0|    copyTV(L, L->top, v);
  845|    244|  } else {
  846|    244|    setnilV(L->top);
  ------------------
  |  |  872|    244|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  847|    244|  }
  848|    244|  incr_top(L);
  ------------------
  |  |   12|    244|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    488|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    244|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 244]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  849|    244|}
lua_getmetatable:
  852|    335|{
  853|    335|  cTValue *o = index2adr(L, idx);
  854|    335|  GCtab *mt = NULL;
  855|    335|  if (tvistab(o))
  ------------------
  |  |  800|    335|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|    335|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|    335|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 126, False: 209]
  |  |  ------------------
  ------------------
  856|    126|    mt = tabref(tabV(o)->metatable);
  ------------------
  |  |  514|    126|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|    252|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 126, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  857|    209|  else if (tvisudata(o))
  ------------------
  |  |  801|    209|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|    209|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|    209|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 209]
  |  |  ------------------
  ------------------
  858|      0|    mt = tabref(udataV(o)->metatable);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  859|    209|  else
  860|    209|    mt = tabref(basemt_obj(G(L), o));
  ------------------
  |  |  514|    209|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|    418|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 104, False: 105]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  861|    335|  if (mt == NULL)
  ------------------
  |  Branch (861:7): [True: 335, False: 0]
  ------------------
  862|    335|    return 0;
  863|      0|  settabV(L, L->top, mt);
  864|      0|  incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  865|      0|  return 1;
  866|    335|}
luaL_getmetafield:
  869|    278|{
  870|    278|  if (lua_getmetatable(L, idx)) {
  ------------------
  |  Branch (870:7): [True: 0, False: 278]
  ------------------
  871|      0|    cTValue *tv = lj_tab_getstr(tabV(L->top-1), lj_str_newz(L, field));
  ------------------
  |  |  864|      0|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  cTValue *tv = lj_tab_getstr(tabV(L->top-1), lj_str_newz(L, field));
  ------------------
  |  |   27|      0|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  872|      0|    if (tv && !tvisnil(tv)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (872:9): [True: 0, False: 0]
  |  Branch (872:15): [True: 0, False: 0]
  ------------------
  873|      0|      copyTV(L, L->top-1, tv);
  874|      0|      return 1;
  875|      0|    }
  876|      0|    L->top--;
  877|      0|  }
  878|    278|  return 0;
  879|    278|}
lua_getfenv:
  882|    461|{
  883|    461|  cTValue *o = index2adr_check(L, idx);
  884|    461|  if (tvisfunc(o)) {
  ------------------
  |  |  796|    461|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|    461|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|    461|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 20, False: 441]
  |  |  ------------------
  ------------------
  885|     20|    settabV(L, L->top, tabref(funcV(o)->c.env));
  ------------------
  |  |  514|     20|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|     40|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 20, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  886|    441|  } else if (tvisudata(o)) {
  ------------------
  |  |  801|    441|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|    441|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|    441|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 441]
  |  |  ------------------
  ------------------
  887|      0|    settabV(L, L->top, tabref(udataV(o)->env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  888|    441|  } else if (tvisthread(o)) {
  ------------------
  |  |  797|    441|#define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  781|    441|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  266|    441|#define LJ_TTHREAD		(~6u)
  |  |  ------------------
  |  |  |  Branch (797:23): [True: 25, False: 416]
  |  |  ------------------
  ------------------
  889|     25|    settabV(L, L->top, tabref(threadV(o)->env));
  ------------------
  |  |  514|     25|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|     50|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 25, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  890|    416|  } else {
  891|    416|    setnilV(L->top);
  ------------------
  |  |  872|    416|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  892|    416|  }
  893|    461|  incr_top(L);
  ------------------
  |  |   12|    461|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    922|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    461|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 461]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  894|    461|}
lua_next:
  897|    453|{
  898|    453|  cTValue *t = index2adr(L, idx);
  899|    453|  int more;
  900|    453|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|    453|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    453|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 453, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    453|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  901|    453|  more = lj_tab_next(tabV(t), L->top-1, L->top-1);
  ------------------
  |  |  864|    453|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|    453|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    453|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    453|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 453, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    453|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  902|    453|  if (more > 0) {
  ------------------
  |  Branch (902:7): [True: 445, False: 8]
  ------------------
  903|    445|    incr_top(L);  /* Return new key and value slot. */
  ------------------
  |  |   12|    445|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    890|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    445|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 445]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  904|    445|  } else if (!more) {  /* End of traversal. */
  ------------------
  |  Branch (904:14): [True: 8, False: 0]
  ------------------
  905|      8|    L->top--;  /* Remove key slot. */
  906|      8|  } else {
  907|      0|    lj_err_msg(L, LJ_ERR_NEXTIDX);
  908|      0|  }
  909|    453|  return more;
  910|    453|}
lua_getupvalue:
  913|    175|{
  914|    175|  TValue *val;
  915|    175|  GCobj *o;
  916|    175|  const char *name = lj_debug_uvnamev(index2adr(L, idx), (uint32_t)(n-1), &val, &o);
  917|    175|  if (name) {
  ------------------
  |  Branch (917:7): [True: 0, False: 175]
  ------------------
  918|      0|    copyTV(L, L->top, val);
  919|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  920|      0|  }
  921|    175|  return name;
  922|    175|}
lua_settable:
  968|   110k|{
  969|   110k|  TValue *o;
  970|   110k|  cTValue *t = index2adr_check(L, idx);
  971|   110k|  lj_checkapi_slot(2);
  ------------------
  |  |   32|   110k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|   110k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   110k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 110k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   110k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  972|   110k|  o = lj_meta_tset(L, t, L->top-2);
  973|   110k|  if (o) {
  ------------------
  |  Branch (973:7): [True: 110k, False: 0]
  ------------------
  974|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  975|   110k|    L->top -= 2;
  976|   110k|    copyTV(L, o, L->top+1);
  977|   110k|  } else {
  978|      0|    TValue *base = L->top;
  979|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  980|      0|    L->top = base+3;
  981|      0|    lj_vm_call(L, base, 0+1);
  982|      0|    L->top -= 3+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  983|      0|  }
  984|   110k|}
lua_setfield:
  987|  74.6k|{
  988|  74.6k|  TValue *o;
  989|  74.6k|  TValue key;
  990|  74.6k|  cTValue *t = index2adr_check(L, idx);
  991|  74.6k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|  74.6k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  74.6k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  74.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 74.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  74.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  992|  74.6k|  setstrV(L, &key, lj_str_newz(L, k));
  ------------------
  |  |   27|  74.6k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  993|  74.6k|  o = lj_meta_tset(L, t, &key);
  994|  74.6k|  if (o) {
  ------------------
  |  Branch (994:7): [True: 74.6k, False: 0]
  ------------------
  995|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  996|  74.6k|    copyTV(L, o, --L->top);
  997|  74.6k|  } else {
  998|      0|    TValue *base = L->top;
  999|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1000|      0|    L->top = base+3;
 1001|      0|    lj_vm_call(L, base, 0+1);
 1002|      0|    L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1003|      0|  }
 1004|  74.6k|}
lua_rawset:
 1007|    281|{
 1008|    281|  GCtab *t = tabV(index2adr(L, idx));
  ------------------
  |  |  864|    281|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|    281|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    281|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    281|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 281, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    281|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1009|      0|  TValue *dst, *key;
 1010|    281|  lj_checkapi_slot(2);
  ------------------
  |  |   32|    281|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|    281|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    281|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 281, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    281|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1011|    281|  key = L->top-2;
 1012|    281|  dst = lj_tab_set(L, t, key);
 1013|    281|  copyTV(L, dst, key+1);
 1014|    281|  lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|    281|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|    281|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 281]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1015|    281|  L->top = key;
 1016|    281|}
lua_rawseti:
 1019|  74.9k|{
 1020|  74.9k|  GCtab *t = tabV(index2adr(L, idx));
  ------------------
  |  |  864|  74.9k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  74.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  74.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  74.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 74.9k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  74.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1021|      0|  TValue *dst, *src;
 1022|  74.9k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|  74.9k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  74.9k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  74.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 74.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  74.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1023|  74.9k|  dst = lj_tab_setint(L, t, n);
  ------------------
  |  |   84|  74.9k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   79|  74.9k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 37.8k, False: 37.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   80|  37.8k|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|  37.8k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|  37.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|  74.9k|  src = L->top-1;
 1025|  74.9k|  copyTV(L, dst, src);
 1026|  74.9k|  lj_gc_barriert(L, t, dst);
  ------------------
  |  |   97|  74.9k|  { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   35|   149k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   149k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  74.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  74.9k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  74.9k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  74.9k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  74.9k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  74.9k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 36.8k, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  73.6k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  36.8k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  36.8k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  36.8k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 36.8k, False: 3]
  |  |  |  |  |  |  |  Branch (32:22): [True: 36.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|  36.8k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  36.8k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 36.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   98|  74.9k|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1027|  74.9k|  L->top = src;
 1028|  74.9k|}
lua_setmetatable:
 1031|  38.0k|{
 1032|  38.0k|  global_State *g;
 1033|  38.0k|  GCtab *mt;
 1034|  38.0k|  cTValue *o = index2adr_check(L, idx);
 1035|  38.0k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|  38.0k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  38.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  38.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 38.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  38.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1036|  38.0k|  if (tvisnil(L->top-1)) {
  ------------------
  |  |  782|  38.0k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 38.0k, False: 0]
  |  |  ------------------
  ------------------
 1037|  38.0k|    mt = NULL;
 1038|  38.0k|  } else {
 1039|      0|    lj_checkapi(tvistab(L->top-1), "top stack slot is not a table");
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1040|      0|    mt = tabV(L->top-1);
  ------------------
  |  |  864|      0|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1041|      0|  }
 1042|  38.0k|  g = G(L);
  ------------------
  |  |  705|  38.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  38.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1043|  38.0k|  if (tvistab(o)) {
  ------------------
  |  |  800|  38.0k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|  38.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|  38.0k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 3.63k, False: 34.3k]
  |  |  ------------------
  ------------------
 1044|  3.63k|    setgcref(tabV(o)->metatable, obj2gco(mt));
  ------------------
  |  |   72|  7.27k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 3.63k, False: 0]
  |  |  ------------------
  ------------------
 1045|  3.63k|    if (mt)
  ------------------
  |  Branch (1045:9): [True: 0, False: 3.63k]
  ------------------
 1046|  3.63k|      lj_gc_objbarriert(L, tabV(o), mt);
  ------------------
  |  |  100|      0|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (33:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  101|      0|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (101:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1047|  34.3k|  } else if (tvisudata(o)) {
  ------------------
  |  |  801|  34.3k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|  34.3k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|  34.3k|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 34.3k]
  |  |  ------------------
  ------------------
 1048|      0|    setgcref(udataV(o)->metatable, obj2gco(mt));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1049|      0|    if (mt)
  ------------------
  |  Branch (1049:9): [True: 0, False: 0]
  ------------------
 1050|      0|      lj_gc_objbarrier(L, udataV(o), mt);
  ------------------
  |  |  108|      0|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (33:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  109|      0|      lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
 1051|  34.3k|  } else {
 1052|       |    /* Flush cache, since traces specialize to basemt. But not during __gc. */
 1053|  34.3k|    if (lj_trace_flushall(L))
  ------------------
  |  Branch (1053:9): [True: 0, False: 34.3k]
  ------------------
 1054|      0|      lj_err_caller(L, LJ_ERR_NOGCMM);
 1055|  34.3k|    o = index2adr(L, idx);  /* Stack may have been reallocated. */
 1056|  34.3k|    if (tvisbool(o)) {
  ------------------
  |  |  789|  34.3k|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|  68.7k|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  34.3k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|  34.3k|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 73, False: 34.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|  34.3k|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  34.3k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|  34.3k|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 6.42k, False: 27.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1057|       |      /* NOBARRIER: basemt is a GC root. */
 1058|  6.49k|      setgcref(basemt_it(g, LJ_TTRUE), obj2gco(mt));
  ------------------
  |  |   72|  6.49k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1059|  6.49k|      setgcref(basemt_it(g, LJ_TFALSE), obj2gco(mt));
  ------------------
  |  |   72|  6.49k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1060|  27.8k|    } else {
 1061|       |      /* NOBARRIER: basemt is a GC root. */
 1062|  27.8k|      setgcref(basemt_obj(g, o), obj2gco(mt));
  ------------------
  |  |   72|  55.7k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 3.84k, False: 24.0k]
  |  |  ------------------
  ------------------
 1063|  27.8k|    }
 1064|  34.3k|  }
 1065|  38.0k|  L->top--;
 1066|  38.0k|  return 1;
 1067|  38.0k|}
luaL_setmetatable:
 1070|     30|{
 1071|     30|  lua_getfield(L, LUA_REGISTRYINDEX, tname);
  ------------------
  |  |   36|     30|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
 1072|     30|  lua_setmetatable(L, -2);
 1073|     30|}
lua_setfenv:
 1076|     78|{
 1077|     78|  cTValue *o = index2adr_check(L, idx);
 1078|     78|  GCtab *t;
 1079|     78|  lj_checkapi_slot(1);
  ------------------
  |  |   32|     78|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|     78|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     78|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 78, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     78|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1080|     78|  lj_checkapi(tvistab(L->top-1), "top stack slot is not a table");
  ------------------
  |  |  357|     78|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     78|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 78, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     78|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1081|     78|  t = tabV(L->top-1);
  ------------------
  |  |  864|     78|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|     78|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     78|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     78|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 78, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     78|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1082|     78|  if (tvisfunc(o)) {
  ------------------
  |  |  796|     78|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|     78|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|     78|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 2, False: 76]
  |  |  ------------------
  ------------------
 1083|      2|    setgcref(funcV(o)->c.env, obj2gco(t));
  ------------------
  |  |   72|      4|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 1084|     76|  } else if (tvisudata(o)) {
  ------------------
  |  |  801|     76|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|     76|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|     76|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 76]
  |  |  ------------------
  ------------------
 1085|      0|    setgcref(udataV(o)->env, obj2gco(t));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1086|     76|  } else if (tvisthread(o)) {
  ------------------
  |  |  797|     76|#define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  781|     76|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  266|     76|#define LJ_TTHREAD		(~6u)
  |  |  ------------------
  |  |  |  Branch (797:23): [True: 1, False: 75]
  |  |  ------------------
  ------------------
 1087|      1|    setgcref(threadV(o)->env, obj2gco(t));
  ------------------
  |  |   72|      2|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 1, False: 0]
  |  |  ------------------
  ------------------
 1088|     75|  } else {
 1089|     75|    L->top--;
 1090|     75|    return 0;
 1091|     75|  }
 1092|      3|  lj_gc_objbarrier(L, gcV(o), t);
  ------------------
  |  |  108|      3|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   32|      6|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      3|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      3|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      3|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      6|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      3|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 3]
  |  |  |  |  |  Branch (33:22): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  109|      3|      lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
 1093|      3|  L->top--;
 1094|      3|  return 1;
 1095|      3|}
lua_setupvalue:
 1098|    159|{
 1099|    159|  cTValue *f = index2adr(L, idx);
 1100|    159|  TValue *val;
 1101|    159|  GCobj *o;
 1102|    159|  const char *name;
 1103|    159|  lj_checkapi_slot(1);
  ------------------
  |  |   32|    159|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|    159|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    159|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 159, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    159|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1104|    159|  name = lj_debug_uvnamev(f, (uint32_t)(n-1), &val, &o);
 1105|    159|  if (name) {
  ------------------
  |  Branch (1105:7): [True: 0, False: 159]
  ------------------
 1106|      0|    L->top--;
 1107|      0|    copyTV(L, val, L->top);
 1108|      0|    lj_gc_barrier(L, o, L->top);
  ------------------
  |  |  105|      0|  { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  106|      0|      lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1109|      0|  }
 1110|    159|  return name;
 1111|    159|}
lua_call:
 1129|  2.43k|{
 1130|  2.43k|  lj_checkapi(L->status == LUA_OK || L->status == LUA_ERRERR,
  ------------------
  |  |  357|  2.43k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.43k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 2.43k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.43k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1131|  2.43k|	      "thread called in wrong state %d", L->status);
 1132|  2.43k|  lj_checkapi_slot(nargs+1);
  ------------------
  |  |   32|  2.43k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  2.43k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.43k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2.43k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.43k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1133|  2.43k|  lj_vm_call(L, api_call_base(L, nargs), nresults+1);
 1134|  2.43k|}
lua_pcall:
 1137|     48|{
 1138|     48|  global_State *g = G(L);
  ------------------
  |  |  705|     48|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     48|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1139|     48|  uint8_t oldh = hook_save(g);
  ------------------
  |  |  684|     48|#define hook_save(g)		((g)->hookmask & ~HOOK_EVENTMASK)
  |  |  ------------------
  |  |  |  |  672|     48|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
 1140|     48|  ptrdiff_t ef;
 1141|     48|  int status;
 1142|     48|  lj_checkapi(L->status == LUA_OK || L->status == LUA_ERRERR,
  ------------------
  |  |  357|     48|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     48|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 48, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     48|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1143|     48|	      "thread called in wrong state %d", L->status);
 1144|     48|  lj_checkapi_slot(nargs+1);
  ------------------
  |  |   32|     48|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|     48|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     48|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 48, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     48|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1145|     48|  if (errfunc == 0) {
  ------------------
  |  Branch (1145:7): [True: 48, False: 0]
  ------------------
 1146|     48|    ef = 0;
 1147|     48|  } else {
 1148|      0|    cTValue *o = index2adr_stack(L, errfunc);
 1149|      0|    ef = savestack(L, o);
  ------------------
  |  |   14|      0|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1150|      0|  }
 1151|     48|  status = lj_vm_pcall(L, api_call_base(L, nargs), nresults+1, ef);
 1152|     48|  if (status) hook_restore(g, oldh);
  ------------------
  |  |  686|      0|  ((g)->hookmask = ((g)->hookmask & HOOK_EVENTMASK) | (h))
  |  |  ------------------
  |  |  |  |  672|      0|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  |  Branch (1152:7): [True: 0, False: 48]
  ------------------
 1153|     48|  return status;
 1154|     48|}
lua_cpcall:
 1173|    308|{
 1174|    308|  global_State *g = G(L);
  ------------------
  |  |  705|    308|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    308|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1175|    308|  uint8_t oldh = hook_save(g);
  ------------------
  |  |  684|    308|#define hook_save(g)		((g)->hookmask & ~HOOK_EVENTMASK)
  |  |  ------------------
  |  |  |  |  672|    308|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
 1176|    308|  int status;
 1177|    308|  lj_checkapi(L->status == LUA_OK || L->status == LUA_ERRERR,
  ------------------
  |  |  357|    308|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    308|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 308, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    308|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1178|    308|	      "thread called in wrong state %d", L->status);
 1179|    308|  status = lj_vm_cpcall(L, func, ud, cpcall);
 1180|    308|  if (status) hook_restore(g, oldh);
  ------------------
  |  |  686|      0|  ((g)->hookmask = ((g)->hookmask & HOOK_EVENTMASK) | (h))
  |  |  ------------------
  |  |  |  |  672|      0|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  |  Branch (1180:7): [True: 0, False: 308]
  ------------------
 1181|    308|  return status;
 1182|    308|}
luaL_callmeta:
 1185|    118|{
 1186|    118|  if (luaL_getmetafield(L, idx, field)) {
  ------------------
  |  Branch (1186:7): [True: 0, False: 118]
  ------------------
 1187|      0|    TValue *top = L->top--;
 1188|      0|    if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
 1189|      0|    copyTV(L, top++, index2adr(L, idx));
 1190|      0|    L->top = top;
 1191|      0|    lj_vm_call(L, top-1, 1+1);
 1192|      0|    return 1;
 1193|      0|  }
 1194|    118|  return 0;
 1195|    118|}
lua_isyieldable:
 1200|     26|{
 1201|     26|  return cframe_canyield(L->cframe);
  ------------------
  |  |  292|     26|#define cframe_canyield(cf)	((intptr_t)(cf) & CFRAME_RESUME)
  |  |  ------------------
  |  |  |  |  275|     26|#define CFRAME_RESUME		1
  |  |  ------------------
  ------------------
 1202|     26|}
lua_resume:
 1246|     74|{
 1247|     74|  if (L->cframe == NULL && L->status <= LUA_YIELD)
  ------------------
  |  |   44|     74|#define LUA_YIELD	1
  ------------------
  |  Branch (1247:7): [True: 74, False: 0]
  |  Branch (1247:28): [True: 74, False: 0]
  ------------------
 1248|     74|    return lj_vm_resume(L,
 1249|     74|      L->status == LUA_OK ? api_call_base(L, nargs) : L->top - nargs,
  ------------------
  |  |   43|     74|#define LUA_OK		0
  ------------------
  |  Branch (1249:7): [True: 74, False: 0]
  ------------------
 1250|     74|      0, 0);
 1251|      0|  L->top = L->base;
 1252|      0|  setstrV(L, L->top, lj_err_str(L, LJ_ERR_COSUSP));
 1253|      0|  incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1254|      0|  return LUA_ERRRUN;
  ------------------
  |  |   45|      0|#define LUA_ERRRUN	2
  ------------------
 1255|     74|}
lua_gc:
 1260|  34.9k|{
 1261|  34.9k|  global_State *g = G(L);
  ------------------
  |  |  705|  34.9k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  34.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1262|  34.9k|  int res = 0;
 1263|  34.9k|  switch (what) {
 1264|  5.38k|  case LUA_GCSTOP:
  ------------------
  |  |  222|  5.38k|#define LUA_GCSTOP		0
  ------------------
  |  Branch (1264:3): [True: 5.38k, False: 29.5k]
  ------------------
 1265|  5.38k|    g->gc.threshold = LJ_MAX_MEM;
  ------------------
  |  |   52|  5.38k|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|  5.38k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|  5.38k|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
 1266|  5.38k|    break;
 1267|  2.81k|  case LUA_GCRESTART:
  ------------------
  |  |  223|  2.81k|#define LUA_GCRESTART		1
  ------------------
  |  Branch (1267:3): [True: 2.81k, False: 32.1k]
  ------------------
 1268|  2.81k|    g->gc.threshold = data == -1 ? (g->gc.total/100)*g->gc.pause : g->gc.total;
  ------------------
  |  Branch (1268:23): [True: 0, False: 2.81k]
  ------------------
 1269|  2.81k|    break;
 1270|  6.93k|  case LUA_GCCOLLECT:
  ------------------
  |  |  224|  6.93k|#define LUA_GCCOLLECT		2
  ------------------
  |  Branch (1270:3): [True: 6.93k, False: 27.9k]
  ------------------
 1271|  6.93k|    lj_gc_fullgc(L);
 1272|  6.93k|    break;
 1273|  3.15k|  case LUA_GCCOUNT:
  ------------------
  |  |  225|  3.15k|#define LUA_GCCOUNT		3
  ------------------
  |  Branch (1273:3): [True: 3.15k, False: 31.7k]
  ------------------
 1274|  3.15k|    res = (int)(g->gc.total >> 10);
 1275|  3.15k|    break;
 1276|  1.56k|  case LUA_GCCOUNTB:
  ------------------
  |  |  226|  1.56k|#define LUA_GCCOUNTB		4
  ------------------
  |  Branch (1276:3): [True: 1.56k, False: 33.3k]
  ------------------
 1277|  1.56k|    res = (int)(g->gc.total & 0x3ff);
 1278|  1.56k|    break;
 1279|  10.6k|  case LUA_GCSTEP: {
  ------------------
  |  |  227|  10.6k|#define LUA_GCSTEP		5
  ------------------
  |  Branch (1279:3): [True: 10.6k, False: 24.2k]
  ------------------
 1280|  10.6k|    GCSize a = (GCSize)data << 10;
 1281|  10.6k|    g->gc.threshold = (a <= g->gc.total) ? (g->gc.total - a) : 0;
  ------------------
  |  Branch (1281:23): [True: 10.6k, False: 0]
  ------------------
 1282|  21.3k|    while (g->gc.total >= g->gc.threshold)
  ------------------
  |  Branch (1282:12): [True: 10.6k, False: 10.6k]
  ------------------
 1283|  10.6k|      if (lj_gc_step(L) > 0) {
  ------------------
  |  Branch (1283:11): [True: 4, False: 10.6k]
  ------------------
 1284|      4|	res = 1;
 1285|      4|	break;
 1286|      4|      }
 1287|  10.6k|    break;
 1288|      0|  }
 1289|  2.02k|  case LUA_GCSETPAUSE:
  ------------------
  |  |  228|  2.02k|#define LUA_GCSETPAUSE		6
  ------------------
  |  Branch (1289:3): [True: 2.02k, False: 32.8k]
  ------------------
 1290|  2.02k|    res = (int)(g->gc.pause);
 1291|  2.02k|    g->gc.pause = (MSize)data;
 1292|  2.02k|    break;
 1293|  2.38k|  case LUA_GCSETSTEPMUL:
  ------------------
  |  |  229|  2.38k|#define LUA_GCSETSTEPMUL	7
  ------------------
  |  Branch (1293:3): [True: 2.38k, False: 32.5k]
  ------------------
 1294|  2.38k|    res = (int)(g->gc.stepmul);
 1295|  2.38k|    g->gc.stepmul = (MSize)data;
 1296|  2.38k|    break;
 1297|      0|  case LUA_GCISRUNNING:
  ------------------
  |  |  230|      0|#define LUA_GCISRUNNING		9
  ------------------
  |  Branch (1297:3): [True: 0, False: 34.9k]
  ------------------
 1298|      0|    res = (g->gc.threshold != LJ_MAX_MEM);
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
 1299|      0|    break;
 1300|      0|  default:
  ------------------
  |  Branch (1300:3): [True: 0, False: 34.9k]
  ------------------
 1301|      0|    res = -1;  /* Invalid option. */
 1302|  34.9k|  }
 1303|  34.9k|  return res;
 1304|  34.9k|}
lua_getallocf:
 1307|     52|{
 1308|     52|  global_State *g = G(L);
  ------------------
  |  |  705|     52|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     52|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1309|     52|  if (ud) *ud = g->allocd;
  ------------------
  |  Branch (1309:7): [True: 52, False: 0]
  ------------------
 1310|     52|  return g->allocf;
 1311|     52|}
lj_api.c:index2adr_stack:
   72|   183k|{
   73|   183k|  if (idx > 0) {
  ------------------
  |  Branch (73:7): [True: 255, False: 183k]
  ------------------
   74|    255|    TValue *o = L->base + (idx - 1);
   75|    255|    if (o < L->top) {
  ------------------
  |  Branch (75:9): [True: 255, False: 0]
  ------------------
   76|    255|      return o;
   77|    255|    } else {
   78|      0|      lj_checkapi(0, "invalid stack slot %d", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|      return niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    }
   81|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (81:12): [True: 0, False: 0]
  ------------------
   82|   183k|  } else {
   83|   183k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|   183k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   367k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 183k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 183k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   183k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|   183k|		"invalid stack slot %d", idx);
   85|   183k|    return L->top + idx;
   86|   183k|  }
   87|   183k|}
lj_api.c:copy_slot:
  182|    142|{
  183|    142|  if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|    142|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (183:7): [True: 0, False: 142]
  ------------------
  184|      0|    lj_checkapi(tvistab(f), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  185|       |    /* NOBARRIER: A thread (i.e. L) is never black. */
  186|      0|    setgcref(L->env, obj2gco(tabV(f)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  187|    142|  } else if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|    142|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (187:14): [True: 0, False: 142]
  ------------------
  188|      0|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|      0|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  189|      0|    if (fn->c.gct != ~LJ_TFUNC)
  ------------------
  |  |  268|      0|#define LJ_TFUNC		(~8u)
  ------------------
  |  Branch (189:9): [True: 0, False: 0]
  ------------------
  190|      0|      lj_err_msg(L, LJ_ERR_NOENV);
  191|      0|    lj_checkapi(tvistab(f), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  192|      0|    setgcref(fn->c.env, obj2gco(tabV(f)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  193|      0|    lj_gc_barrier(L, fn, f);
  ------------------
  |  |  105|      0|  { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  106|      0|      lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  194|    142|  } else {
  195|    142|    TValue *o = index2adr_check(L, idx);
  196|    142|    copyTV(L, o, f);
  197|    142|    if (idx < LUA_GLOBALSINDEX)  /* Need a barrier for upvalues. */
  ------------------
  |  |   38|    142|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (197:9): [True: 0, False: 142]
  ------------------
  198|    142|      lj_gc_barrier(L, curr_func(L), f);
  ------------------
  |  |  105|      0|  { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  106|      0|      lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  199|    142|  }
  200|    142|}
lj_api.c:index2adr:
   35|  1.01M|{
   36|  1.01M|  if (idx > 0) {
  ------------------
  |  Branch (36:7): [True: 18.6k, False: 995k]
  ------------------
   37|  18.6k|    TValue *o = L->base + (idx - 1);
   38|  18.6k|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (38:12): [True: 18.6k, False: 0]
  ------------------
   39|   995k|  } else if (idx > LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|   995k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (39:14): [True: 846k, False: 148k]
  ------------------
   40|   846k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|   846k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.69M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 846k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 846k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   846k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   41|   846k|		"bad stack slot %d", idx);
   42|   846k|    return L->top + idx;
   43|   846k|  } else if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|   148k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (43:14): [True: 37.0k, False: 111k]
  ------------------
   44|  37.0k|    TValue *o = &G(L)->tmptv;
  ------------------
  |  |  705|  37.0k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  37.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   45|  37.0k|    settabV(L, o, tabref(L->env));
  ------------------
  |  |  514|  37.0k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  37.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   46|  37.0k|    return o;
   47|   111k|  } else if (idx == LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|   111k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (47:14): [True: 111k, False: 0]
  ------------------
   48|   111k|    return registry(L);
  ------------------
  |  |  706|   111k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  705|   111k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   111k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   49|   111k|  } else {
   50|      0|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|      0|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   51|      0|    lj_checkapi(fn->c.gct == ~LJ_TFUNC && !isluafunc(fn),
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   52|      0|		"calling frame is not a C function");
   53|      0|    if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|      0|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (53:9): [True: 0, False: 0]
  ------------------
   54|      0|      TValue *o = &G(L)->tmptv;
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   55|      0|      settabV(L, o, tabref(fn->c.env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   56|      0|      return o;
   57|      0|    } else {
   58|      0|      idx = LUA_GLOBALSINDEX - idx;
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
   59|      0|      return idx <= fn->c.nupvalues ? &fn->c.upvalue[idx-1] : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (59:14): [True: 0, False: 0]
  ------------------
   60|      0|    }
   61|      0|  }
   62|  1.01M|}
lj_api.c:getcurrenv:
   90|  87.6k|{
   91|  87.6k|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|  87.6k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|  87.6k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  87.6k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  87.6k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   92|  87.6k|  return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  268|  87.6k|#define LJ_TFUNC		(~8u)
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|  87.6k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  87.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (92:10): [True: 0, False: 87.6k]
  ------------------
   93|  87.6k|}
lj_api.c:index2adr_check:
   65|   299k|{
   66|   299k|  TValue *o = index2adr(L, idx);
   67|   299k|  lj_checkapi(o != niltv(L), "invalid stack slot %d", idx);
  ------------------
  |  |  357|   299k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   598k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 299k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 299k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   299k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   68|   299k|  return o;
   69|   299k|}
lj_api.c:api_call_base:
 1117|  2.55k|{
 1118|  2.55k|  TValue *o = L->top, *base = o - nargs;
 1119|  2.55k|  L->top = o+1;
 1120|  2.55k|  for (; o > base; o--) copyTV(L, o, o-1);
  ------------------
  |  Branch (1120:10): [True: 0, False: 2.55k]
  ------------------
 1121|  2.55k|  setnilV(o);
  ------------------
  |  |  872|  2.55k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
 1122|  2.55k|  return o+1;
 1123|  2.55k|}
lj_api.c:cpcall:
 1157|    308|{
 1158|    308|  GCfunc *fn = lj_func_newC(L, 0, getcurrenv(L));
 1159|    308|  TValue *top = L->top;
 1160|    308|  fn->c.f = func;
 1161|    308|  setfuncV(L, top++, fn);
 1162|    308|  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|    308|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|    308|#define setnilV(o)		((o)->it64 = -1)
  ------------------
 1163|    308|#if LJ_64
 1164|    308|  ud = lj_lightud_intern(L, ud);
 1165|    308|#endif
 1166|    308|  setrawlightudV(top++, ud);
 1167|    308|  cframe_nres(L->cframe) = 1+0;  /* Zero results. */
  ------------------
  |  |  280|    308|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|    308|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
 1168|    308|  L->top = top;
 1169|    308|  return top-1;  /* Now call the newly allocated C function. */
 1170|    308|}

lj_buf_more2:
   61|  24.8k|{
   62|  24.8k|  if (sbufisext(sb)) {
  ------------------
  |  |   56|  24.8k|#define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   55|  24.8k|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|  24.8k|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   43|  24.8k|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  |  |  ------------------
  |  |  |  Branch (56:24): [True: 0, False: 24.8k]
  |  |  ------------------
  ------------------
   63|      0|    SBufExt *sbx = (SBufExt *)sb;
   64|      0|    MSize len = sbufxlen(sbx);
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
   65|      0|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   66|      0|      lj_err_mem(sbufL(sbx));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    if (len + sz > sbufsz(sbx)) {  /* Must grow. */
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|      buf_grow((SBuf *)sbx, len + sz);
   69|      0|    } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   39|      0|#define sbufxslack(sbx)		((MSize)((sbx)->r - (sbx)->b))
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (69:33): [True: 0, False: 0]
  ------------------
   70|       |      /* Also grow to avoid excessive compactions, if slack < size/8. */
   71|      0|      buf_grow((SBuf *)sbx, sbuflen(sbx) + sz);  /* Not sbufxlen! */
  ------------------
  |  |   36|      0|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   72|      0|      return sbx->w;
   73|      0|    }
   74|      0|    if (sbx->r != sbx->b) {  /* Compact by moving down. */
  ------------------
  |  Branch (74:9): [True: 0, False: 0]
  ------------------
   75|      0|      memmove(sbx->b, sbx->r, len);
   76|      0|      sbx->r = sbx->b;
   77|      0|      sbx->w = sbx->b + len;
   78|      0|      lj_assertG_(G(sbufL(sbx)), len + sz <= sbufsz(sbx), "bad SBuf compact");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|    }
   80|  24.8k|  } else {
   81|  24.8k|    MSize len = sbuflen(sb);
  ------------------
  |  |   36|  24.8k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   82|  24.8k|    lj_assertG_(G(sbufL(sb)), sz > sbufleft(sb), "SBuf overflow");
  ------------------
  |  |  363|  24.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  24.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 24.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  24.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   83|  24.8k|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|  49.7k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 24.8k]
  |  |  |  Branch (146:44): [True: 0, False: 24.8k]
  |  |  |  Branch (146:44): [True: 0, False: 24.8k]
  |  |  ------------------
  ------------------
   84|      0|      lj_err_mem(sbufL(sb));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  24.8k|    buf_grow(sb, len + sz);
   86|  24.8k|  }
   87|  24.8k|  return sb->w;
   88|  24.8k|}
lj_buf_shrink:
   91|  7.21k|{
   92|  7.21k|  char *b = sb->b;
   93|  7.21k|  MSize osz = (MSize)(sb->e - b);
   94|  7.21k|  if (osz > 2*LJ_MIN_SBUF) {
  ------------------
  |  |   80|  7.21k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (94:7): [True: 0, False: 7.21k]
  ------------------
   95|      0|    b = lj_mem_realloc(L, b, osz, (osz >> 1));
   96|      0|    sb->w = sb->b = b;  /* Not supposed to keep data across shrinks. */
   97|      0|    sb->e = b + (osz >> 1);
   98|      0|  }
   99|  7.21k|  lj_assertG_(G(sbufL(sb)), !sbufisext(sb), "YAGNI shrink SBufExt");
  ------------------
  |  |  363|  7.21k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  7.21k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7.21k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.21k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  100|  7.21k|}
lj_buf_putmem:
  131|  63.9k|{
  132|  63.9k|  char *w = lj_buf_more(sb, len);
  133|  63.9k|  w = lj_buf_wmem(w, q, len);
  134|  63.9k|  sb->w = w;
  135|  63.9k|  return sb;
  136|  63.9k|}
lj_buf.c:buf_grow:
   20|  24.8k|{
   21|  24.8k|  MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   35|  24.8k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
                MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   36|  24.8k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   22|  24.8k|  char *b;
   23|  24.8k|  GCSize flag;
   24|  24.8k|  if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|  24.8k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
                if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|  13.1k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (24:7): [True: 13.1k, False: 11.7k]
  ------------------
   25|  36.7k|  while (nsz < sz) nsz += nsz;
  ------------------
  |  Branch (25:10): [True: 11.8k, False: 24.8k]
  ------------------
   26|  24.8k|  flag = sbufflag(sb);
  ------------------
  |  |   55|  24.8k|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  ------------------
  |  |  |  |   37|  24.8k|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  ------------------
   27|  24.8k|  if ((flag & SBUF_FLAG_COW)) {  /* Copy-on-write semantics. */
  ------------------
  |  |   44|  24.8k|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  ------------------
  |  Branch (27:7): [True: 0, False: 24.8k]
  ------------------
   28|      0|    lj_assertG_(G(sbufL(sb)), sb->w == sb->e, "bad SBuf COW");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   29|      0|    b = (char *)lj_mem_new(sbufL(sb), nsz);
  ------------------
  |  |  117|      0|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  ------------------
   30|      0|    setsbufflag(sb, flag & ~(GCSize)SBUF_FLAG_COW);
  ------------------
  |  |   62|      0|#define setsbufflag(sb, flag)	(setmrefu((sb)->L, (flag)))
  |  |  ------------------
  |  |  |  |   40|      0|#define setmrefu(r, u)	((r).ptr64 = (uint64_t)(u))
  |  |  ------------------
  ------------------
   31|      0|    setgcrefnull(sbufX(sb)->cowref);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  |  |  ------------------
  |  |  |  Branch (76:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   32|      0|    memcpy(b, sb->b, osz);
   33|  24.8k|  } else {
   34|  24.8k|    b = (char *)lj_mem_realloc(sbufL(sb), sb->b, osz, nsz);
  ------------------
  |  |   48|  24.8k|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|  24.8k|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|  24.8k|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|  24.8k|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   35|  24.8k|  }
   36|  24.8k|  if ((flag & SBUF_FLAG_EXT)) {
  ------------------
  |  |   43|  24.8k|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  ------------------
  |  Branch (36:7): [True: 0, False: 24.8k]
  ------------------
   37|      0|    sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|      0|  }
   39|       |  /* Adjust buffer pointers. */
   40|  24.8k|  sb->b = b;
   41|  24.8k|  sb->w = b + len;
   42|  24.8k|  sb->e = b + nsz;
   43|  24.8k|  if ((flag & SBUF_FLAG_BORROW)) {  /* Adjust borrowed buffer pointers. */
  ------------------
  |  |   45|  24.8k|#define SBUF_FLAG_BORROW	4	/* Borrowed string buffer. */
  ------------------
  |  Branch (43:7): [True: 0, False: 24.8k]
  ------------------
   44|      0|    SBuf *bsb = mref(sbufX(sb)->bsb, SBuf);
  ------------------
  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   45|      0|    bsb->b = b;
   46|      0|    bsb->w = b + len;
   47|      0|    bsb->e = b + nsz;
   48|      0|  }
   49|  24.8k|}

lj_state.c:lj_buf_init:
   75|  36.7k|{
   76|  36.7k|  setsbufL(sb, L);
  ------------------
  |  |   49|  36.7k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  36.7k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  36.7k|  sb->w = sb->e = sb->b = NULL;
   78|  36.7k|}
lj_state.c:lj_buf_free:
   94|  36.7k|{
   95|  36.7k|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  36.7k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  36.7k|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  36.7k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  36.7k|}
lj_strfmt.c:lj_buf_tmp_:
   86|  12.9k|{
   87|  12.9k|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|  12.9k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  12.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|  12.9k|  setsbufL(sb, L);
  ------------------
  |  |   49|  12.9k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  12.9k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|  12.9k|  lj_buf_reset(sb);
   90|  12.9k|  return sb;
   91|  12.9k|}
lj_strfmt.c:lj_buf_reset:
   81|  12.9k|{
   82|  12.9k|  sb->w = sb->b;
   83|  12.9k|}
lj_strfmt.c:lj_buf_more:
  107|  37.8k|{
  108|  37.8k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  37.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 11.7k, False: 26.1k]
  |  |  ------------------
  ------------------
  109|  11.7k|    return lj_buf_more2(sb, sz);
  110|  26.1k|  return sb->w;
  111|  37.8k|}
lj_strfmt.c:lj_buf_putb:
  181|  12.6k|{
  182|  12.6k|  char *w = lj_buf_more(sb, 1);
  183|  12.6k|  *w++ = (char)c;
  184|  12.6k|  sb->w = w;
  185|  12.6k|}
lj_strfmt.c:lj_buf_str:
  201|  12.9k|{
  202|  12.9k|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|  12.9k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  203|  12.9k|}
lj_strfmt_num.c:lj_buf_more:
  107|  12.8k|{
  108|  12.8k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  12.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 12.8k]
  |  |  ------------------
  ------------------
  109|      0|    return lj_buf_more2(sb, sz);
  110|  12.8k|  return sb->w;
  111|  12.8k|}
lj_lex.c:lj_buf_free:
   94|    188|{
   95|    188|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|    188|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    188|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 188, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|    188|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|    188|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|    188|}
lj_lex.c:lj_buf_reset:
   81|  1.12k|{
   82|  1.12k|  sb->w = sb->b;
   83|  1.12k|}
lj_lex.c:lj_buf_putb:
  181|    752|{
  182|    752|  char *w = lj_buf_more(sb, 1);
  183|    752|  *w++ = (char)c;
  184|    752|  sb->w = w;
  185|    752|}
lj_lex.c:lj_buf_more:
  107|    752|{
  108|    752|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|    752|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 188, False: 564]
  |  |  ------------------
  ------------------
  109|    188|    return lj_buf_more2(sb, sz);
  110|    564|  return sb->w;
  111|    752|}
lj_parse.c:lj_buf_reset:
   81|    188|{
   82|    188|  sb->w = sb->b;
   83|    188|}
lj_parse.c:lj_buf_more:
  107|    188|{
  108|    188|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|    188|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 188]
  |  |  ------------------
  ------------------
  109|      0|    return lj_buf_more2(sb, sz);
  110|    188|  return sb->w;
  111|    188|}
lj_parse.c:lj_buf_putb:
  181|    188|{
  182|    188|  char *w = lj_buf_more(sb, 1);
  183|    188|  *w++ = (char)c;
  184|    188|  sb->w = w;
  185|    188|}
lj_load.c:lj_buf_init:
   75|    188|{
   76|    188|  setsbufL(sb, L);
  ------------------
  |  |   49|    188|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|    188|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|    188|  sb->w = sb->e = sb->b = NULL;
   78|    188|}
lj_buf.c:lj_buf_more:
  107|  63.9k|{
  108|  63.9k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  63.9k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 12.7k, False: 51.1k]
  |  |  ------------------
  ------------------
  109|  12.7k|    return lj_buf_more2(sb, sz);
  110|  51.1k|  return sb->w;
  111|  63.9k|}
lj_buf.c:lj_buf_wmem:
  176|  63.9k|{
  177|  63.9k|  return (char *)memcpy(p, q, len) + len;
  178|  63.9k|}
lj_meta.c:lj_buf_tmp_:
   86|    244|{
   87|    244|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|    244|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    244|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|    244|  setsbufL(sb, L);
  ------------------
  |  |   49|    244|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|    244|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|    244|  lj_buf_reset(sb);
   90|    244|  return sb;
   91|    244|}
lj_meta.c:lj_buf_reset:
   81|    244|{
   82|    244|  sb->w = sb->b;
   83|    244|}
lj_meta.c:lj_buf_more:
  107|    244|{
  108|    244|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|    244|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 138, False: 106]
  |  |  ------------------
  ------------------
  109|    138|    return lj_buf_more2(sb, sz);
  110|    106|  return sb->w;
  111|    244|}
lj_meta.c:lj_buf_str:
  201|    244|{
  202|    244|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|    244|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  203|    244|}

lj_ctype_initfin:
  651|  36.7k|{
  652|       |  /* NOBARRIER: The table is new (marked white). */
  653|  36.7k|  GCtab *t = lj_tab_new(L, 0, 1);
  654|  36.7k|  setgcref(t->metatable, obj2gco(t));
  ------------------
  |  |   72|  36.7k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  655|  36.7k|  setstrV(L, lj_tab_setstr(L, t, lj_str_newlit(L, "__mode")),
  ------------------
  |  |   28|  36.7k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  656|  36.7k|	  lj_str_newlit(L, "k"));
  ------------------
  |  |   28|  36.7k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  657|  36.7k|  t->nomm = (uint8_t)(~(1u<<MM_mode));
  658|  36.7k|  setgcref(G(L)->gcroot[GCROOT_FFI_FIN], obj2gco(t));
  ------------------
  |  |   72|  36.7k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  659|  36.7k|}
lj_ctype_freestate:
  663|  36.7k|{
  664|  36.7k|  CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  386|  36.7k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  665|  36.7k|  if (cts) {
  ------------------
  |  Branch (665:7): [True: 0, False: 36.7k]
  ------------------
  666|      0|    lj_ccallback_mcode_free(cts);
  667|      0|    lj_mem_freevec(g, cts->tab, cts->sizetab, CType);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  668|      0|    lj_mem_freevec(g, cts->cb.cbid, cts->cb.sizeid, CTypeID1);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  669|      0|    lj_mem_freet(g, cts);
  ------------------
  |  |  134|      0|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  670|      0|  }
  671|  36.7k|}

lj_debug_frame:
   26|    248|{
   27|    248|  cTValue *frame, *nextframe, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  217|    248|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    248|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                cTValue *frame, *nextframe, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  569|    248|#define LJ_FR2			1
  ------------------
   28|       |  /* Traverse frames backwards. */
   29|    248|  for (nextframe = frame = L->base-1; frame > bot; ) {
  ------------------
  |  Branch (29:39): [True: 0, False: 248]
  ------------------
   30|      0|    if (frame_gc(frame) == obj2gco(L))
  ------------------
  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  ------------------
  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  if (frame_gc(frame) == obj2gco(L))
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  |  Branch (30:9): [True: 0, False: 0]
  ------------------
   31|      0|      level++;  /* Skip dummy frames. See lj_err_optype_call(). */
   32|      0|    if (level-- == 0) {
  ------------------
  |  Branch (32:9): [True: 0, False: 0]
  ------------------
   33|      0|      *size = (int)(nextframe - frame);
   34|      0|      return frame;  /* Level found. */
   35|      0|    }
   36|      0|    nextframe = frame;
   37|      0|    if (frame_islua(frame)) {
  ------------------
  |  |   77|      0|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   38|      0|      frame = frame_prevl(frame);
  ------------------
  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
   39|      0|    } else {
   40|      0|      if (frame_isvarg(frame))
  ------------------
  |  |   80|      0|#define frame_isvarg(f)		(frame_typep(f) == FRAME_VARG)
  |  |  ------------------
  |  |  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (80:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   41|      0|	level++;  /* Skip vararg pseudo-frame. */
   42|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   43|      0|    }
   44|      0|  }
   45|    248|  *size = level;
   46|    248|  return NULL;  /* Level not found. */
   47|    248|}
lj_debug_uvnamev:
  231|    334|{
  232|    334|  if (tvisfunc(o)) {
  ------------------
  |  |  796|    334|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|    334|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|    334|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 120, False: 214]
  |  |  ------------------
  ------------------
  233|    120|    GCfunc *fn = funcV(o);
  ------------------
  |  |  860|    120|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|    120|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    120|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    120|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 120, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    120|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  234|    120|    if (isluafunc(fn)) {
  ------------------
  |  |  476|    120|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|    120|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 120]
  |  |  ------------------
  ------------------
  235|      0|      GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  236|      0|      if (idx < pt->sizeuv) {
  ------------------
  |  Branch (236:11): [True: 0, False: 0]
  ------------------
  237|      0|	GCobj *uvo = gcref(fn->l.uvptr[idx]);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  238|      0|	*tvp = uvval(&uvo->uv);
  ------------------
  |  |  449|      0|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  239|      0|	*op = uvo;
  240|      0|	return lj_debug_uvname(pt, idx);
  241|      0|      }
  242|    120|    } else {
  243|    120|      if (idx < fn->c.nupvalues) {
  ------------------
  |  Branch (243:11): [True: 0, False: 120]
  ------------------
  244|      0|	*tvp = &fn->c.upvalue[idx];
  245|      0|	*op = obj2gco(fn);
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  246|      0|	return "";
  247|      0|      }
  248|    120|    }
  249|    120|  }
  250|    334|  return NULL;
  251|    334|}
lj_debug_addloc:
  361|    126|{
  362|    126|  if (frame) {
  ------------------
  |  Branch (362:7): [True: 74, False: 52]
  ------------------
  363|     74|    GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|     74|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|     74|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|     74|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|     74|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|     74|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  364|     74|    if (isluafunc(fn)) {
  ------------------
  |  |  476|     74|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|     74|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 74]
  |  |  ------------------
  ------------------
  365|      0|      BCLine line = debug_frameline(L, fn, nextframe);
  366|      0|      if (line >= 0) {
  ------------------
  |  Branch (366:11): [True: 0, False: 0]
  ------------------
  367|      0|	GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  368|      0|	char buf[LUA_IDSIZE];
  369|      0|	lj_debug_shortname(buf, proto_chunkname(pt), pt->firstline);
  ------------------
  |  |  424|      0|#define proto_chunkname(pt)	(strref((pt)->chunkname))
  |  |  ------------------
  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|	lj_strfmt_pushf(L, "%s:%d: %s", buf, line, msg);
  371|      0|	return;
  372|      0|      }
  373|      0|    }
  374|     74|  }
  375|    126|  lj_strfmt_pushf(L, "%s", msg);
  376|    126|}
lj_debug_getinfo:
  434|    130|{
  435|    130|  int opt_f = 0, opt_L = 0;
  436|    130|  TValue *frame = NULL;
  437|    130|  TValue *nextframe = NULL;
  438|    130|  GCfunc *fn;
  439|    130|  if (*what == '>') {
  ------------------
  |  Branch (439:7): [True: 130, False: 0]
  ------------------
  440|    130|    TValue *func = L->top - 1;
  441|    130|    if (!tvisfunc(func)) return 0;
  ------------------
  |  |  796|    130|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|    130|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|    130|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  ------------------
  |  Branch (441:9): [True: 0, False: 130]
  ------------------
  442|    130|    fn = funcV(func);
  ------------------
  |  |  860|    130|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|    130|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    130|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    130|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 130, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    130|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  443|      0|    L->top--;
  444|    130|    what++;
  445|    130|  } else {
  446|      0|    uint32_t offset = (uint32_t)ar->i_ci & 0xffff;
  447|      0|    uint32_t size = (uint32_t)ar->i_ci >> 16;
  448|      0|    lj_assertL(offset != 0, "bad frame offset");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  449|      0|    frame = tvref(L->stack) + offset;
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  450|      0|    if (size) nextframe = frame + size;
  ------------------
  |  Branch (450:9): [True: 0, False: 0]
  ------------------
  451|      0|    lj_assertL(frame <= tvref(L->maxstack) &&
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  452|      0|	       (!nextframe || nextframe <= tvref(L->maxstack)),
  453|      0|	       "broken frame chain");
  454|      0|    fn = frame_func(frame);
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  455|      0|    lj_assertL(fn->c.gct == ~LJ_TFUNC, "bad frame function");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  456|      0|  }
  457|    350|  for (; *what; what++) {
  ------------------
  |  Branch (457:10): [True: 265, False: 85]
  ------------------
  458|    265|    if (*what == 'S') {
  ------------------
  |  Branch (458:9): [True: 45, False: 220]
  ------------------
  459|     45|      if (isluafunc(fn)) {
  ------------------
  |  |  476|     45|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|     45|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 45]
  |  |  ------------------
  ------------------
  460|      0|	GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  461|      0|	BCLine firstline = pt->firstline;
  462|      0|	GCstr *name = proto_chunkname(pt);
  ------------------
  |  |  424|      0|#define proto_chunkname(pt)	(strref((pt)->chunkname))
  |  |  ------------------
  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  463|      0|	ar->source = strdata(name);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  464|      0|	lj_debug_shortname(ar->short_src, name, pt->firstline);
  465|      0|	ar->linedefined = (int)firstline;
  466|      0|	ar->lastlinedefined = (int)(firstline + pt->numline);
  467|      0|	ar->what = (firstline || !pt->numline) ? "Lua" : "main";
  ------------------
  |  Branch (467:14): [True: 0, False: 0]
  |  Branch (467:27): [True: 0, False: 0]
  ------------------
  468|     45|      } else {
  469|     45|	ar->source = "=[C]";
  470|     45|	ar->short_src[0] = '[';
  471|     45|	ar->short_src[1] = 'C';
  472|     45|	ar->short_src[2] = ']';
  473|     45|	ar->short_src[3] = '\0';
  474|     45|	ar->linedefined = -1;
  475|     45|	ar->lastlinedefined = -1;
  476|     45|	ar->what = "C";
  477|     45|      }
  478|    220|    } else if (*what == 'l') {
  ------------------
  |  Branch (478:16): [True: 45, False: 175]
  ------------------
  479|     45|      ar->currentline = frame ? debug_frameline(L, fn, nextframe) : -1;
  ------------------
  |  Branch (479:25): [True: 0, False: 45]
  ------------------
  480|    175|    } else if (*what == 'u') {
  ------------------
  |  Branch (480:16): [True: 85, False: 90]
  ------------------
  481|     85|      ar->nups = fn->c.nupvalues;
  482|     85|      if (ext) {
  ------------------
  |  Branch (482:11): [True: 0, False: 85]
  ------------------
  483|      0|	if (isluafunc(fn)) {
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  484|      0|	  GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  485|      0|	  ar->nparams = pt->numparams;
  486|      0|	  ar->isvararg = !!(pt->flags & PROTO_VARARG);
  ------------------
  |  |  400|      0|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
  487|      0|	} else {
  488|      0|	  ar->nparams = 0;
  489|      0|	  ar->isvararg = 1;
  490|      0|	}
  491|      0|      }
  492|     90|    } else if (*what == 'n') {
  ------------------
  |  Branch (492:16): [True: 45, False: 45]
  ------------------
  493|     45|      ar->namewhat = frame ? lj_debug_funcname(L, frame, &ar->name) : NULL;
  ------------------
  |  Branch (493:22): [True: 0, False: 45]
  ------------------
  494|     45|      if (ar->namewhat == NULL) {
  ------------------
  |  Branch (494:11): [True: 45, False: 0]
  ------------------
  495|     45|	ar->namewhat = "";
  496|     45|	ar->name = NULL;
  497|     45|      }
  498|     45|    } else if (*what == 'f') {
  ------------------
  |  Branch (498:16): [True: 0, False: 45]
  ------------------
  499|      0|      opt_f = 1;
  500|     45|    } else if (*what == 'L') {
  ------------------
  |  Branch (500:16): [True: 0, False: 45]
  ------------------
  501|      0|      opt_L = 1;
  502|     45|    } else {
  503|     45|      return 0;  /* Bad option. */
  504|     45|    }
  505|    265|  }
  506|     85|  if (opt_f) {
  ------------------
  |  Branch (506:7): [True: 0, False: 85]
  ------------------
  507|      0|    setfuncV(L, L->top, fn);
  508|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  509|      0|  }
  510|     85|  if (opt_L) {
  ------------------
  |  Branch (510:7): [True: 0, False: 85]
  ------------------
  511|      0|    if (isluafunc(fn)) {
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  512|      0|      GCtab *t = lj_tab_new(L, 0, 0);
  513|      0|      GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  514|      0|      const void *lineinfo = proto_lineinfo(pt);
  ------------------
  |  |  426|      0|#define proto_lineinfo(pt)	(mref((pt)->lineinfo, const void))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  515|      0|      if (lineinfo) {
  ------------------
  |  Branch (515:11): [True: 0, False: 0]
  ------------------
  516|      0|	BCLine first = pt->firstline;
  517|      0|	int sz = pt->numline < 256 ? 1 : pt->numline < 65536 ? 2 : 4;
  ------------------
  |  Branch (517:11): [True: 0, False: 0]
  |  Branch (517:35): [True: 0, False: 0]
  ------------------
  518|      0|	MSize i, szl = pt->sizebc-1;
  519|      0|	for (i = 0; i < szl; i++) {
  ------------------
  |  Branch (519:14): [True: 0, False: 0]
  ------------------
  520|      0|	  BCLine line = first +
  521|      0|	    (sz == 1 ? (BCLine)((const uint8_t *)lineinfo)[i] :
  ------------------
  |  Branch (521:7): [True: 0, False: 0]
  ------------------
  522|      0|	     sz == 2 ? (BCLine)((const uint16_t *)lineinfo)[i] :
  ------------------
  |  Branch (522:7): [True: 0, False: 0]
  ------------------
  523|      0|	     (BCLine)((const uint32_t *)lineinfo)[i]);
  524|      0|	  setboolV(lj_tab_setint(L, t, line), 1);
  ------------------
  |  |  874|      0|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  |  |  ------------------
  |  |  |  Branch (874:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  525|      0|	}
  526|      0|      }
  527|      0|      settabV(L, L->top, t);
  528|      0|    } else {
  529|      0|      setnilV(L->top);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  530|      0|    }
  531|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  532|      0|  }
  533|     85|  return 1;  /* Ok. */
  534|     85|}
lua_getinfo:
  537|    130|{
  538|    130|  return lj_debug_getinfo(L, what, (lj_Debug *)ar, 0);
  539|    130|}
lua_getstack:
  542|    196|{
  543|    196|  int size;
  544|    196|  cTValue *frame = lj_debug_frame(L, level, &size);
  545|    196|  if (frame) {
  ------------------
  |  Branch (545:7): [True: 0, False: 196]
  ------------------
  546|      0|    ar->i_ci = (size << 16) + (int)(frame - tvref(L->stack));
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  547|      0|    return 1;
  548|    196|  } else {
  549|    196|    ar->i_ci = level - size;
  550|    196|    return 0;
  551|    196|  }
  552|    196|}
luaL_traceback:
  665|     95|{
  666|     95|  int top = (int)(L->top - L->base);
  667|     95|  int lim = TRACEBACK_LEVELS1;
  ------------------
  |  |  660|     95|#define TRACEBACK_LEVELS1	12
  ------------------
  668|     95|  lua_Debug ar;
  669|     95|  if (msg) lua_pushfstring(L, "%s\n", msg);
  ------------------
  |  Branch (669:7): [True: 95, False: 0]
  ------------------
  670|     95|  lua_pushliteral(L, "stack traceback:");
  ------------------
  |  |  276|     95|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  671|     95|  while (lua_getstack(L1, level++, &ar)) {
  ------------------
  |  Branch (671:10): [True: 0, False: 95]
  ------------------
  672|      0|    GCfunc *fn;
  673|      0|    if (level > lim) {
  ------------------
  |  Branch (673:9): [True: 0, False: 0]
  ------------------
  674|      0|      if (!lua_getstack(L1, level + TRACEBACK_LEVELS2, &ar)) {
  ------------------
  |  |  661|      0|#define TRACEBACK_LEVELS2	10
  ------------------
  |  Branch (674:11): [True: 0, False: 0]
  ------------------
  675|      0|	level--;
  676|      0|      } else {
  677|      0|	lua_pushliteral(L, "\n\t...");
  ------------------
  |  |  276|      0|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  678|      0|	lua_getstack(L1, -10, &ar);
  679|      0|	level = ar.i_ci - TRACEBACK_LEVELS2;
  ------------------
  |  |  661|      0|#define TRACEBACK_LEVELS2	10
  ------------------
  680|      0|      }
  681|      0|      lim = 2147483647;
  682|      0|      continue;
  683|      0|    }
  684|      0|    lua_getinfo(L1, "Snlf", &ar);
  685|      0|    fn = funcV(L1->top-1); L1->top--;
  ------------------
  |  |  860|      0|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  686|      0|    if (isffunc(fn) && !*ar.namewhat)
  ------------------
  |  |  478|      0|#define isffunc(fn)	((fn)->c.ffid > FF_C)
  |  |  ------------------
  |  |  |  |  475|      0|#define FF_C		1
  |  |  ------------------
  |  |  |  Branch (478:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (686:24): [True: 0, False: 0]
  ------------------
  687|      0|      lua_pushfstring(L, "\n\t[builtin#%d]:", fn->c.ffid);
  688|      0|    else
  689|      0|      lua_pushfstring(L, "\n\t%s:", ar.short_src);
  690|      0|    if (ar.currentline > 0)
  ------------------
  |  Branch (690:9): [True: 0, False: 0]
  ------------------
  691|      0|      lua_pushfstring(L, "%d:", ar.currentline);
  692|      0|    if (*ar.namewhat) {
  ------------------
  |  Branch (692:9): [True: 0, False: 0]
  ------------------
  693|      0|      lua_pushfstring(L, " in function " LUA_QS, ar.name);
  ------------------
  |  |   88|      0|#define LUA_QS		LUA_QL("%s")
  |  |  ------------------
  |  |  |  |   87|      0|#define LUA_QL(x)	"'" x "'"
  |  |  ------------------
  ------------------
  694|      0|    } else {
  695|      0|      if (*ar.what == 'm') {
  ------------------
  |  Branch (695:11): [True: 0, False: 0]
  ------------------
  696|      0|	lua_pushliteral(L, " in main chunk");
  ------------------
  |  |  276|      0|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  697|      0|      } else if (*ar.what == 'C') {
  ------------------
  |  Branch (697:18): [True: 0, False: 0]
  ------------------
  698|      0|	lua_pushfstring(L, " at %p", fn->c.f);
  699|      0|      } else {
  700|      0|	lua_pushfstring(L, " in function <%s:%d>",
  701|      0|			ar.short_src, ar.linedefined);
  702|      0|      }
  703|      0|    }
  704|      0|    if ((int)(L->top - L->base) - top >= 15)
  ------------------
  |  Branch (704:9): [True: 0, False: 0]
  ------------------
  705|      0|      lua_concat(L, (int)(L->top - L->base) - top);
  706|      0|  }
  707|     95|  lua_concat(L, (int)(L->top - L->base) - top);
  708|     95|}

lj_str.c:lj_bswap:
  181|    270|{
  182|    270|  return (uint32_t)__builtin_bswap32((int32_t)x);
  183|    270|}
lj_str.c:lj_getu32:
  237|  6.96M|{
  238|  6.96M|  return ((const Unaligned32 *)p)->u;
  239|  6.96M|}

lj_dispatch_init:
   61|  36.7k|{
   62|  36.7k|  uint32_t i;
   63|  36.7k|  ASMFunction *disp = GG->dispatch;
   64|  3.30M|  for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|  3.30M|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (64:15): [True: 3.26M, False: 36.7k]
  ------------------
   65|  3.26M|    disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |   84|  3.26M|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  3.26M|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
                  disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  3.26M|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  3.26M|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   66|  2.42M|  for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|  36.7k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
                for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|  2.42M|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  2.42M|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (66:26): [True: 2.38M, False: 36.7k]
  ------------------
   67|  2.38M|    disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  2.38M|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  2.38M|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   68|       |  /* The JIT engine is off by default. luaopen_jit() turns it on. */
   69|  36.7k|  disp[BC_FORL] = disp[BC_IFORL];
   70|  36.7k|  disp[BC_ITERL] = disp[BC_IITERL];
   71|       |  /* Workaround for stable v2.1 bytecode. TODO: Replace with BC_IITERN. */
   72|  36.7k|  disp[BC_ITERN] = &lj_vm_IITERN;
   73|  36.7k|  disp[BC_LOOP] = disp[BC_ILOOP];
   74|  36.7k|  disp[BC_FUNCF] = disp[BC_IFUNCF];
   75|  36.7k|  disp[BC_FUNCV] = disp[BC_IFUNCV];
   76|  36.7k|  GG->g.bc_cfunc_ext = GG->g.bc_cfunc_int = BCINS_AD(BC_FUNCC, LUA_MINSTACK, 0);
  ------------------
  |  |   56|  36.7k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   77|  2.12M|  for (i = 0; i < GG_NUM_ASMFF; i++)
  ------------------
  |  |   82|  2.12M|#define GG_NUM_ASMFF	57
  ------------------
  |  Branch (77:15): [True: 2.09M, False: 36.7k]
  ------------------
   78|  2.09M|    GG->bcff[i] = BCINS_AD(BC__MAX+i, 0, 0);
  ------------------
  |  |   56|  2.09M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   79|       |#if LJ_TARGET_MIPS
   80|       |  memcpy(GG->got, dispatch_got, LJ_GOT__MAX*sizeof(ASMFunction *));
   81|       |#endif
   82|  36.7k|}
lj_dispatch_update:
  107|  71.2k|{
  108|  71.2k|  uint8_t oldmode = g->dispatchmode;
  109|  71.2k|  uint8_t mode = 0;
  110|  71.2k|#if LJ_HASJIT
  111|  71.2k|  mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  116|  71.2k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  71.2k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  71.2k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |   16|  71.2k|#define JIT_F_ON		0x00000001
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (111:11): [True: 0, False: 71.2k]
  ------------------
  112|  71.2k|  mode |= G2J(g)->state != LJ_TRACE_IDLE ?
  ------------------
  |  |  116|  71.2k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  71.2k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  71.2k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (112:11): [True: 0, False: 71.2k]
  ------------------
  113|  71.2k|	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  114|  71.2k|#endif
  115|  71.2k|#if LJ_HASPROFILE
  116|  71.2k|  mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  677|  71.2k|#define HOOK_PROFILE		0x80
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (116:11): [True: 0, False: 71.2k]
  ------------------
  117|  71.2k|#endif
  118|  71.2k|  mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  325|  71.2k|#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
  |  |  ------------------
  |  |  |  |  315|  71.2k|#define LUA_HOOKLINE	2
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  326|  71.2k|#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
  |  |  ------------------
  |  |  |  |  316|  71.2k|#define LUA_HOOKCOUNT	3
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  100|  29.1k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (118:11): [True: 29.1k, False: 42.0k]
  ------------------
  119|  71.2k|  mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |  323|  71.2k|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|  71.2k|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |   98|  9.73k|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (119:11): [True: 9.73k, False: 61.4k]
  ------------------
  120|  71.2k|  mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |  324|  71.2k|#define LUA_MASKRET	(1 << LUA_HOOKRET)
  |  |  ------------------
  |  |  |  |  314|  71.2k|#define LUA_HOOKRET	1
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |   99|  11.2k|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (120:11): [True: 11.2k, False: 59.9k]
  ------------------
  121|  71.2k|  if (oldmode != mode) {  /* Mode changed? */
  ------------------
  |  Branch (121:7): [True: 25.0k, False: 46.1k]
  ------------------
  122|  25.0k|    ASMFunction *disp = G2GG(g)->dispatch;
  ------------------
  |  |  112|  25.0k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|  25.0k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  123|  25.0k|    ASMFunction f_forl, f_iterl, f_itern, f_loop, f_funcf, f_funcv;
  124|  25.0k|    g->dispatchmode = mode;
  125|       |
  126|       |    /* Hotcount if JIT is on, but not while recording. */
  127|  25.0k|    if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|  25.0k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  102|  25.0k|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|  25.0k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (127:9): [True: 0, False: 25.0k]
  ------------------
  128|      0|      f_forl = makeasmfunc(lj_bc_ofs[BC_FORL]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  129|      0|      f_iterl = makeasmfunc(lj_bc_ofs[BC_ITERL]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  130|      0|      f_itern = makeasmfunc(lj_bc_ofs[BC_ITERN]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  131|      0|      f_loop = makeasmfunc(lj_bc_ofs[BC_LOOP]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  132|      0|      f_funcf = makeasmfunc(lj_bc_ofs[BC_FUNCF]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  133|      0|      f_funcv = makeasmfunc(lj_bc_ofs[BC_FUNCV]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  134|  25.0k|    } else {  /* Otherwise use the non-hotcounting instructions. */
  135|  25.0k|      f_forl = disp[GG_LEN_DDISP+BC_IFORL];
  ------------------
  |  |   84|  25.0k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  25.0k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  136|  25.0k|      f_iterl = disp[GG_LEN_DDISP+BC_IITERL];
  ------------------
  |  |   84|  25.0k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  25.0k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  137|  25.0k|      f_itern = &lj_vm_IITERN;
  138|  25.0k|      f_loop = disp[GG_LEN_DDISP+BC_ILOOP];
  ------------------
  |  |   84|  25.0k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  25.0k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  139|  25.0k|      f_funcf = makeasmfunc(lj_bc_ofs[BC_IFUNCF]);
  ------------------
  |  |  114|  25.0k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  25.0k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  140|  25.0k|      f_funcv = makeasmfunc(lj_bc_ofs[BC_IFUNCV]);
  ------------------
  |  |  114|  25.0k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  25.0k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  141|  25.0k|    }
  142|       |    /* Init static counting instruction dispatch first (may be copied below). */
  143|  25.0k|    disp[GG_LEN_DDISP+BC_FORL] = f_forl;
  ------------------
  |  |   84|  25.0k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  25.0k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  144|  25.0k|    disp[GG_LEN_DDISP+BC_ITERL] = f_iterl;
  ------------------
  |  |   84|  25.0k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  25.0k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  145|  25.0k|    disp[GG_LEN_DDISP+BC_ITERN] = f_itern;
  ------------------
  |  |   84|  25.0k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  25.0k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  146|  25.0k|    disp[GG_LEN_DDISP+BC_LOOP] = f_loop;
  ------------------
  |  |   84|  25.0k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  25.0k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  147|       |
  148|       |    /* Set dynamic instruction dispatch. */
  149|  25.0k|    if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  103|  25.0k|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  102|  25.0k|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  100|  25.0k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (149:9): [True: 14.5k, False: 10.4k]
  ------------------
  150|       |      /* Need to update the whole table. */
  151|  14.5k|      if (!(mode & DISPMODE_INS)) {  /* No ins dispatch? */
  ------------------
  |  |  100|  14.5k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (151:11): [True: 0, False: 14.5k]
  ------------------
  152|       |	/* Copy static dispatch table to dynamic dispatch table. */
  153|      0|	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
              	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  154|       |	/* Overwrite with dynamic return dispatch. */
  155|      0|	if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (155:6): [True: 0, False: 0]
  ------------------
  156|      0|	  disp[BC_RETM] = lj_vm_rethook;
  157|      0|	  disp[BC_RET] = lj_vm_rethook;
  158|      0|	  disp[BC_RET0] = lj_vm_rethook;
  159|      0|	  disp[BC_RET1] = lj_vm_rethook;
  160|      0|	}
  161|  14.5k|      } else {
  162|       |	/* The recording dispatch also checks for hooks. */
  163|  14.5k|	ASMFunction f = (mode & DISPMODE_PROF) ? lj_vm_profhook :
  ------------------
  |  |  103|  14.5k|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
  |  Branch (163:18): [True: 0, False: 14.5k]
  ------------------
  164|  14.5k|			(mode & DISPMODE_REC) ? lj_vm_record : lj_vm_inshook;
  ------------------
  |  |  102|  14.5k|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
  |  Branch (164:4): [True: 0, False: 14.5k]
  ------------------
  165|  14.5k|	uint32_t i;
  166|  1.31M|	for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|  1.31M|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (166:14): [True: 1.29M, False: 14.5k]
  ------------------
  167|  1.29M|	  disp[i] = f;
  168|  14.5k|      }
  169|  14.5k|    } else if (!(mode & DISPMODE_INS)) {
  ------------------
  |  |  100|  10.4k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (169:16): [True: 10.4k, False: 0]
  ------------------
  170|       |      /* Otherwise set dynamic counting ins. */
  171|  10.4k|      disp[BC_FORL] = f_forl;
  172|  10.4k|      disp[BC_ITERL] = f_iterl;
  173|  10.4k|      disp[BC_ITERN] = f_itern;
  174|  10.4k|      disp[BC_LOOP] = f_loop;
  175|       |      /* Set dynamic return dispatch. */
  176|  10.4k|      if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|  10.4k|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (176:11): [True: 5.61k, False: 4.86k]
  ------------------
  177|  5.61k|	disp[BC_RETM] = lj_vm_rethook;
  178|  5.61k|	disp[BC_RET] = lj_vm_rethook;
  179|  5.61k|	disp[BC_RET0] = lj_vm_rethook;
  180|  5.61k|	disp[BC_RET1] = lj_vm_rethook;
  181|  5.61k|      } else {
  182|  4.86k|	disp[BC_RETM] = disp[GG_LEN_DDISP+BC_RETM];
  ------------------
  |  |   84|  4.86k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  4.86k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  183|  4.86k|	disp[BC_RET] = disp[GG_LEN_DDISP+BC_RET];
  ------------------
  |  |   84|  4.86k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  4.86k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  184|  4.86k|	disp[BC_RET0] = disp[GG_LEN_DDISP+BC_RET0];
  ------------------
  |  |   84|  4.86k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  4.86k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  185|  4.86k|	disp[BC_RET1] = disp[GG_LEN_DDISP+BC_RET1];
  ------------------
  |  |   84|  4.86k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  4.86k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  186|  4.86k|      }
  187|  10.4k|    }
  188|       |
  189|       |    /* Set dynamic call dispatch. */
  190|  25.0k|    if ((oldmode ^ mode) & DISPMODE_CALL) {  /* Update the whole table? */
  ------------------
  |  |   98|  25.0k|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (190:9): [True: 4.86k, False: 20.1k]
  ------------------
  191|  4.86k|      uint32_t i;
  192|  4.86k|      if ((mode & DISPMODE_CALL) == 0) {  /* No call hooks? */
  ------------------
  |  |   98|  4.86k|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (192:11): [True: 0, False: 4.86k]
  ------------------
  193|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (193:25): [True: 0, False: 0]
  ------------------
  194|      0|	  disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  195|  4.86k|      } else {
  196|   321k|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|  4.86k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|   321k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|   321k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (196:25): [True: 316k, False: 4.86k]
  ------------------
  197|   316k|	  disp[i] = lj_vm_callhook;
  198|  4.86k|      }
  199|  4.86k|    }
  200|  25.0k|    if (!(mode & DISPMODE_CALL)) {  /* Overwrite dynamic counting ins. */
  ------------------
  |  |   98|  25.0k|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (200:9): [True: 20.1k, False: 4.86k]
  ------------------
  201|  20.1k|      disp[BC_FUNCF] = f_funcf;
  202|  20.1k|      disp[BC_FUNCV] = f_funcv;
  203|  20.1k|    }
  204|       |
  205|  25.0k|#if LJ_HASJIT
  206|       |    /* Reset hotcounts for JIT off to on transition. */
  207|  25.0k|    if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|  25.0k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (207:9): [True: 0, False: 25.0k]
  |  Branch (207:34): [True: 0, False: 0]
  ------------------
  208|      0|      lj_dispatch_init_hotcount(g);
  209|  25.0k|#endif
  210|  25.0k|  }
  211|  71.2k|}
lua_sethook:
  330|  34.4k|{
  331|  34.4k|  global_State *g = G(L);
  ------------------
  |  |  705|  34.4k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  34.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  332|  34.4k|  mask &= HOOK_EVENTMASK;
  ------------------
  |  |  672|  34.4k|#define HOOK_EVENTMASK		0x0f
  ------------------
  333|  34.4k|  if (func == NULL || mask == 0) { mask = 0; func = NULL; }  /* Consistency. */
  ------------------
  |  Branch (333:7): [True: 0, False: 34.4k]
  |  Branch (333:23): [True: 9.43k, False: 25.0k]
  ------------------
  334|  34.4k|  g->hookf = func;
  335|  34.4k|  g->hookcount = g->hookcstart = (int32_t)count;
  336|  34.4k|  g->hookmask = (uint8_t)((g->hookmask & ~HOOK_EVENTMASK) | mask);
  ------------------
  |  |  672|  34.4k|#define HOOK_EVENTMASK		0x0f
  ------------------
  337|  34.4k|  lj_trace_abort(g);  /* Abort recording on any hook change. */
  ------------------
  |  |   45|  34.4k|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|  34.4k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  34.4k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  34.4k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  338|  34.4k|  lj_dispatch_update(g);
  339|  34.4k|  return 1;
  340|  34.4k|}
lua_gethook:
  343|     46|{
  344|     46|  return G(L)->hookf;
  ------------------
  |  |  705|     46|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     46|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  345|     46|}
lua_gethookmask:
  348|     52|{
  349|     52|  return G(L)->hookmask & HOOK_EVENTMASK;
  ------------------
  |  |  705|     52|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     52|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                return G(L)->hookmask & HOOK_EVENTMASK;
  ------------------
  |  |  672|     52|#define HOOK_EVENTMASK		0x0f
  ------------------
  350|     52|}
lua_gethookcount:
  353|     54|{
  354|     54|  return (int)G(L)->hookcstart;
  ------------------
  |  |  705|     54|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     54|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  355|     54|}
lj_dispatch_call:
  468|    287|{
  469|    287|  ERRNO_SAVE
  ------------------
  |  |  156|    287|#define ERRNO_SAVE	int olderr = errno;
  ------------------
  470|    287|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|    287|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|    287|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|    287|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|    287|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  471|    287|  BCOp op;
  472|    287|  global_State *g = G(L);
  ------------------
  |  |  705|    287|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    287|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  473|    287|#if LJ_HASJIT
  474|    287|  jit_State *J = G2J(g);
  ------------------
  |  |  116|    287|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|    287|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|    287|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  475|    287|#endif
  476|    287|  int missing = call_init(L, fn);
  477|    287|#if LJ_HASJIT
  478|    287|  J->L = L;
  479|    287|  if ((uintptr_t)pc & 1) {  /* Marker for hot call. */
  ------------------
  |  Branch (479:7): [True: 0, False: 287]
  ------------------
  480|      0|#ifdef LUA_USE_ASSERT
  481|      0|    ptrdiff_t delta = L->top - L->base;
  482|      0|#endif
  483|      0|    pc = (const BCIns *)((uintptr_t)pc & ~(uintptr_t)1);
  484|      0|    lj_trace_hot(J, pc);
  485|      0|    lj_assertG(L->top - L->base == delta,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  486|      0|	       "unbalanced stack after hot call");
  487|      0|    goto out;
  488|    287|  } else if (J->state != LJ_TRACE_IDLE &&
  ------------------
  |  Branch (488:14): [True: 0, False: 287]
  ------------------
  489|    287|	     !(g->hookmask & (HOOK_GC|HOOK_VMEVENT))) {
  ------------------
  |  |  676|      0|#define HOOK_GC			0x40
  ------------------
              	     !(g->hookmask & (HOOK_GC|HOOK_VMEVENT))) {
  ------------------
  |  |  675|      0|#define HOOK_VMEVENT		0x20
  ------------------
  |  Branch (489:7): [True: 0, False: 0]
  ------------------
  490|      0|#ifdef LUA_USE_ASSERT
  491|      0|    ptrdiff_t delta = L->top - L->base;
  492|      0|#endif
  493|       |    /* Record the FUNC* bytecodes, too. */
  494|      0|    lj_trace_ins(J, pc-1);  /* The interpreter bytecode PC is offset by 1. */
  495|      0|    lj_assertG(L->top - L->base == delta,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  496|      0|	       "unbalanced stack after hot instruction");
  497|      0|  }
  498|    287|#endif
  499|    287|  if ((g->hookmask & LUA_MASKCALL)) {
  ------------------
  |  |  323|    287|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|    287|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
  |  Branch (499:7): [True: 287, False: 0]
  ------------------
  500|    287|    int i;
  501|    287|    for (i = 0; i < missing; i++)  /* Add missing parameters. */
  ------------------
  |  Branch (501:17): [True: 0, False: 287]
  ------------------
  502|      0|      setnilV(L->top++);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  503|    287|    callhook(L, LUA_HOOKCALL, -1);
  ------------------
  |  |  313|    287|#define LUA_HOOKCALL	0
  ------------------
  504|       |    /* Preserve modifications of missing parameters by lua_setlocal(). */
  505|    287|    while (missing-- > 0 && tvisnil(L->top - 1))
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (505:12): [True: 0, False: 287]
  ------------------
  506|      0|      L->top--;
  507|    287|  }
  508|    287|#if LJ_HASJIT
  509|    287|out:
  510|    287|#endif
  511|    287|  op = bc_op(pc[-1]);  /* Get FUNC* op. */
  ------------------
  |  |   34|    287|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  512|    287|#if LJ_HASJIT
  513|       |  /* Use the non-hotcounting variants if JIT is off or while recording. */
  514|    287|  if ((!(J->flags & JIT_F_ON) || J->state != LJ_TRACE_IDLE) &&
  ------------------
  |  |   16|    287|#define JIT_F_ON		0x00000001
  ------------------
  |  Branch (514:8): [True: 287, False: 0]
  |  Branch (514:34): [True: 0, False: 0]
  ------------------
  515|    287|      (op == BC_FUNCF || op == BC_FUNCV))
  ------------------
  |  Branch (515:8): [True: 0, False: 287]
  |  Branch (515:26): [True: 0, False: 287]
  ------------------
  516|      0|    op = (BCOp)((int)op+(int)BC_IFUNCF-(int)BC_FUNCF);
  517|    287|#endif
  518|    287|  ERRNO_RESTORE
  ------------------
  |  |  157|    287|#define ERRNO_RESTORE	errno = olderr;
  ------------------
  519|    287|  return makeasmfunc(lj_bc_ofs[op]);  /* Return static dispatch target. */
  ------------------
  |  |  114|    287|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|    287|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  520|    287|}
lj_dispatch.c:callhook:
  359|    287|{
  360|    287|  global_State *g = G(L);
  ------------------
  |  |  705|    287|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    287|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  361|    287|  lua_Hook hookf = g->hookf;
  362|    287|  if (hookf && !hook_active(g)) {
  ------------------
  |  |  678|    287|#define hook_active(g)		((g)->hookmask & HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|    287|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  |  Branch (362:7): [True: 287, False: 0]
  |  Branch (362:16): [True: 287, False: 0]
  ------------------
  363|    287|    lua_Debug ar;
  364|    287|    lj_trace_abort(g);  /* Abort recording on any hook call. */
  ------------------
  |  |   45|    287|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|    287|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|    287|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|    287|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  365|    287|    ar.event = event;
  366|    287|    ar.currentline = line;
  367|       |    /* Top frame, nextframe = NULL. */
  368|    287|    ar.i_ci = (int)((L->base-1) - tvref(L->stack));
  ------------------
  |  |  217|    287|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    287|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  369|    287|    lj_state_checkstack(L, 1+LUA_MINSTACK);
  ------------------
  |  |   88|    287|#define LUA_MINSTACK	20
  ------------------
  370|       |#if LJ_HASPROFILE && !LJ_PROFILE_SIGPROF
  371|       |    lj_profile_hook_enter(g);
  372|       |#else
  373|    287|    hook_enter(g);
  ------------------
  |  |  679|    287|#define hook_enter(g)		((g)->hookmask |= HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|    287|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  374|    287|#endif
  375|    287|    hookf(L, &ar);
  376|    287|    lj_assertG(hook_active(g), "active hook flag removed");
  ------------------
  |  |  364|    287|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    287|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 287, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    287|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  377|    287|    setgcref(g->cur_L, obj2gco(L));
  ------------------
  |  |   72|    287|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  378|       |#if LJ_HASPROFILE && !LJ_PROFILE_SIGPROF
  379|       |    lj_profile_hook_leave(g);
  380|       |#else
  381|    287|    hook_leave(g);
  ------------------
  |  |  683|    287|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|    287|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  382|    287|#endif
  383|    287|  }
  384|    287|}
lj_dispatch.c:call_init:
  450|    287|{
  451|    287|  if (isluafunc(fn)) {
  ------------------
  |  |  476|    287|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|    287|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 287]
  |  |  ------------------
  ------------------
  452|      0|    GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  453|      0|    int numparams = pt->numparams;
  454|      0|    int gotparams = (int)(L->top - L->base);
  455|      0|    int need = pt->framesize;
  456|      0|    if ((pt->flags & PROTO_VARARG)) need += 1+LJ_FR2+gotparams;
  ------------------
  |  |  400|      0|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
                  if ((pt->flags & PROTO_VARARG)) need += 1+LJ_FR2+gotparams;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  |  Branch (456:9): [True: 0, False: 0]
  ------------------
  457|      0|    lj_state_checkstack(L, (MSize)need);
  458|      0|    numparams -= gotparams;
  459|      0|    return numparams >= 0 ? numparams : 0;
  ------------------
  |  Branch (459:12): [True: 0, False: 0]
  ------------------
  460|    287|  } else {
  461|    287|    lj_state_checkstack(L, LUA_MINSTACK);
  ------------------
  |  |   88|    287|#define LUA_MINSTACK	20
  ------------------
  462|    287|    return 0;
  463|    287|  }
  464|    287|}

lj_err_unwind_dwarf:
  439|    148|{
  440|    148|  void *cf;
  441|    148|  lua_State *L;
  442|    148|  if (version != 1)
  ------------------
  |  Branch (442:7): [True: 0, False: 148]
  ------------------
  443|      0|    return _URC_FATAL_PHASE1_ERROR;
  ------------------
  |  |  403|      0|#define _URC_FATAL_PHASE1_ERROR	3
  ------------------
  444|    148|  cf = (void *)_Unwind_GetCFA(ctx);
  445|    148|  L = cframe_L(cf);
  ------------------
  |  |  285|    148|  (&gcref(*(GCRef *)(((char *)(cf))+CFRAME_OFS_L))->th)
  |  |  ------------------
  |  |  |  |   67|    148|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  446|    148|  if ((actions & _UA_SEARCH_PHASE)) {
  ------------------
  |  |  431|    148|#define _UA_SEARCH_PHASE	1
  ------------------
  |  Branch (446:7): [True: 74, False: 74]
  ------------------
  447|     74|#if LJ_UNWIND_EXT
  448|     74|    if (err_unwind(L, cf, 0) == NULL)
  ------------------
  |  Branch (448:9): [True: 0, False: 74]
  ------------------
  449|      0|      return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  406|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  450|     74|#endif
  451|     74|    if (!LJ_UEXCLASS_CHECK(uexclass)) {
  ------------------
  |  |  411|     74|#define LJ_UEXCLASS_CHECK(cl)	(((cl) ^ LJ_UEXCLASS) <= 0xff)
  |  |  ------------------
  |  |  |  |  409|     74|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  ------------------
  |  Branch (451:9): [True: 0, False: 74]
  ------------------
  452|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_ERRCPP));
  453|      0|    }
  454|     74|    return _URC_HANDLER_FOUND;
  ------------------
  |  |  404|     74|#define _URC_HANDLER_FOUND	6
  ------------------
  455|     74|  }
  456|     74|  if ((actions & _UA_CLEANUP_PHASE)) {
  ------------------
  |  |  432|     74|#define _UA_CLEANUP_PHASE	2
  ------------------
  |  Branch (456:7): [True: 74, False: 0]
  ------------------
  457|     74|    int errcode;
  458|     74|    if (LJ_UEXCLASS_CHECK(uexclass)) {
  ------------------
  |  |  411|     74|#define LJ_UEXCLASS_CHECK(cl)	(((cl) ^ LJ_UEXCLASS) <= 0xff)
  |  |  ------------------
  |  |  |  |  409|     74|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  |  |  |  Branch (411:31): [True: 74, False: 0]
  |  |  ------------------
  ------------------
  459|     74|      errcode = LJ_UEXCLASS_ERRCODE(uexclass);
  ------------------
  |  |  412|     74|#define LJ_UEXCLASS_ERRCODE(cl)	((int)((cl) & 0xff))
  ------------------
  460|     74|    } else {
  461|      0|      if ((actions & _UA_HANDLER_FRAME))
  ------------------
  |  |  433|      0|#define _UA_HANDLER_FRAME	4
  ------------------
  |  Branch (461:11): [True: 0, False: 0]
  ------------------
  462|      0|	_Unwind_DeleteException(uex);
  463|      0|      errcode = LUA_ERRRUN;
  ------------------
  |  |   45|      0|#define LUA_ERRRUN	2
  ------------------
  464|      0|    }
  465|     74|#if LJ_UNWIND_EXT
  466|     74|    cf = err_unwind(L, cf, errcode);
  467|     74|    if ((actions & _UA_FORCE_UNWIND)) {
  ------------------
  |  |  434|     74|#define _UA_FORCE_UNWIND	8
  ------------------
  |  Branch (467:9): [True: 0, False: 74]
  ------------------
  468|      0|      return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  406|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  469|     74|    } else if (cf) {
  ------------------
  |  Branch (469:16): [True: 74, False: 0]
  ------------------
  470|     74|      ASMFunction ip;
  471|     74|      _Unwind_SetGR(ctx, LJ_TARGET_EHRETREG, errcode);
  ------------------
  |  |  206|     74|#define LJ_TARGET_EHRETREG	0
  ------------------
  472|     74|      ip = cframe_unwind_ff(cf) ? lj_vm_unwind_ff_eh : lj_vm_unwind_c_eh;
  ------------------
  |  |  293|     74|#define cframe_unwind_ff(cf)	((intptr_t)(cf) & CFRAME_UNWIND_FF)
  |  |  ------------------
  |  |  |  |  276|     74|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  ------------------
  |  |  |  Branch (293:30): [True: 0, False: 74]
  |  |  ------------------
  ------------------
  473|     74|      _Unwind_SetIP(ctx, (uintptr_t)lj_ptr_strip(ip));
  ------------------
  |  | 1059|     74|#define lj_ptr_strip(ptr) (ptr)
  ------------------
  474|     74|      return _URC_INSTALL_CONTEXT;
  ------------------
  |  |  405|     74|#define _URC_INSTALL_CONTEXT	7
  ------------------
  475|     74|    }
  476|      0|#if LJ_TARGET_X86ORX64
  477|      0|    else if ((actions & _UA_HANDLER_FRAME)) {
  ------------------
  |  |  433|      0|#define _UA_HANDLER_FRAME	4
  ------------------
  |  Branch (477:14): [True: 0, False: 0]
  ------------------
  478|       |      /* Workaround for ancient libgcc bug. Still present in RHEL 5.5. :-/
  479|       |      ** Real fix: http://gcc.gnu.org/viewcvs/trunk/gcc/unwind-dw2.c?r1=121165&r2=124837&pathrev=153877&diff_format=h
  480|       |      */
  481|      0|      _Unwind_SetGR(ctx, LJ_TARGET_EHRETREG, errcode);
  ------------------
  |  |  206|      0|#define LJ_TARGET_EHRETREG	0
  ------------------
  482|      0|      _Unwind_SetIP(ctx, (uintptr_t)lj_vm_unwind_rethrow);
  483|      0|      return _URC_INSTALL_CONTEXT;
  ------------------
  |  |  405|      0|#define _URC_INSTALL_CONTEXT	7
  ------------------
  484|      0|    }
  485|     74|#endif
  486|       |#else
  487|       |    /* This is not the proper way to escape from the unwinder. We get away with
  488|       |    ** it on non-x64 because the interpreter restores all callee-saved regs.
  489|       |    */
  490|       |    lj_err_throw(L, errcode);
  491|       |#if LJ_TARGET_X64
  492|       |#error "Broken build system -- only use the provided Makefiles!"
  493|       |#endif
  494|       |#endif
  495|     74|  }
  496|      0|  return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  406|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  497|     74|}
lj_err_verify:
  505|  36.7k|{
  506|  36.7k|#if !LJ_TARGET_OSX
  507|       |  /* Check disabled on MacOS due to brilliant software engineering at Apple. */
  508|  36.7k|  struct dwarf_eh_bases ehb;
  509|  36.7k|  lj_assertX(_Unwind_Find_FDE((void *)lj_err_throw, &ehb), "broken build: external frame unwinding enabled, but missing -funwind-tables");
  ------------------
  |  |  366|  36.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  510|  36.7k|#endif
  511|       |  /* Check disabled, because of broken Fedora/ARM64. See #722.
  512|       |  lj_assertX(_Unwind_Find_FDE((void *)_Unwind_RaiseException, &ehb), "broken build: external frame unwinding enabled, but system libraries have no unwind tables");
  513|       |  */
  514|  36.7k|}
lj_err_throw:
  769|     74|{
  770|     74|  global_State *g = G(L);
  ------------------
  |  |  705|     74|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     74|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  771|     74|  lj_trace_abort(g);
  ------------------
  |  |   45|     74|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|     74|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|     74|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|     74|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  772|     74|  L->status = LUA_OK;
  ------------------
  |  |   43|     74|#define LUA_OK		0
  ------------------
  773|     74|#if LJ_UNWIND_EXT
  774|     74|  err_raise_ext(g, errcode);
  775|       |  /*
  776|       |  ** A return from this function signals a corrupt C stack that cannot be
  777|       |  ** unwound. We have no choice but to call the panic function and exit.
  778|       |  **
  779|       |  ** Usually this is caused by a C function without unwind information.
  780|       |  ** This may happen if you've manually enabled LUAJIT_UNWIND_EXTERNAL
  781|       |  ** and forgot to recompile *every* non-C++ file with -funwind-tables.
  782|       |  */
  783|     74|  if (G(L)->panic)
  ------------------
  |  |  705|     74|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     74|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (783:7): [True: 0, False: 74]
  ------------------
  784|      0|    G(L)->panic(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  785|       |#else
  786|       |#if LJ_HASJIT
  787|       |  setmref(g->jit_base, NULL);
  788|       |#endif
  789|       |  {
  790|       |    void *cf = err_unwind(L, NULL, errcode);
  791|       |    if (cframe_unwind_ff(cf))
  792|       |      lj_vm_unwind_ff(cframe_raw(cf));
  793|       |    else
  794|       |      lj_vm_unwind_c(cframe_raw(cf), errcode);
  795|       |  }
  796|       |#endif
  797|     74|  exit(EXIT_FAILURE);
  798|     74|}
lj_err_str:
  802|  36.7k|{
  803|  36.7k|  return lj_str_newz(L, err2msg(em));
  ------------------
  |  |   27|  36.7k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  804|  36.7k|}
lj_err_run:
  880|     74|{
  881|     74|  ptrdiff_t ef = (LJ_HASJIT && tvref(G(L)->jit_base)) ? 0 : finderrfunc(L);
  ------------------
  |  |  578|    148|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                ptrdiff_t ef = (LJ_HASJIT && tvref(G(L)->jit_base)) ? 0 : finderrfunc(L);
  ------------------
  |  |  217|     74|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     74|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 74]
  |  |  ------------------
  ------------------
  882|     74|  if (ef) {
  ------------------
  |  Branch (882:7): [True: 0, False: 74]
  ------------------
  883|      0|    TValue *errfunc, *top;
  884|      0|    lj_state_checkstack(L, LUA_MINSTACK * 2);  /* Might raise new error. */
  ------------------
  |  |   88|      0|#define LUA_MINSTACK	20
  ------------------
  885|      0|    lj_trace_abort(G(L));
  ------------------
  |  |   45|      0|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  886|      0|    errfunc = restorestack(L, ef);
  ------------------
  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  887|      0|    top = L->top;
  888|      0|    if (!tvisfunc(errfunc) || L->status == LUA_ERRERR) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  ------------------
                  if (!tvisfunc(errfunc) || L->status == LUA_ERRERR) {
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  |  Branch (888:9): [True: 0, False: 0]
  |  Branch (888:31): [True: 0, False: 0]
  ------------------
  889|      0|      setstrV(L, top-1, lj_err_str(L, LJ_ERR_ERRERR));
  890|      0|      lj_err_throw(L, LUA_ERRERR);
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  891|      0|    }
  892|      0|    L->status = LUA_ERRERR;
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  893|      0|    copyTV(L, top+LJ_FR2, top-1);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  894|      0|    copyTV(L, top-1, errfunc);
  895|      0|    if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  896|      0|    L->top = top+1;
  897|      0|    lj_vm_call(L, top, 1+1);  /* Stack: |errfunc|msg| -> |msg| */
  898|      0|  }
  899|     74|  lj_err_throw(L, LUA_ERRRUN);
  ------------------
  |  |   45|     74|#define LUA_ERRRUN	2
  ------------------
  900|     74|}
lj_err_optype_call:
  984|     74|{
  985|       |  /* Gross hack if lua_[p]call or pcall/xpcall fail for a non-callable object:
  986|       |  ** L->base still points to the caller. So add a dummy frame with L instead
  987|       |  ** of a function. See lua_getstack().
  988|       |  */
  989|     74|  const BCIns *pc = cframe_Lpc(L);
  ------------------
  |  |  295|     74|#define cframe_Lpc(L)		cframe_pc(cframe_raw(L->cframe))
  |  |  ------------------
  |  |  |  |  287|     74|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     74|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  990|     74|  if (((ptrdiff_t)pc & FRAME_TYPE) != FRAME_LUA) {
  ------------------
  |  |   28|     74|#define FRAME_TYPE		3
  ------------------
  |  Branch (990:7): [True: 74, False: 0]
  ------------------
  991|     74|    const char *tname = lj_typename(o);
  ------------------
  |  | 1042|     74|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|     74|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|     74|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|     74|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|     74|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|     74|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 0, False: 74]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|     74|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  992|     74|    setframe_gc(o, obj2gco(L), LJ_TTHREAD);
  ------------------
  |  |   49|     74|#define setframe_gc(f, p, tp)	(setgcVraw((f), (p), (tp)))
  ------------------
  993|     74|    if (LJ_FR2) o++;
  ------------------
  |  |  569|     74|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
  994|     74|    setframe_pc(o, pc);
  ------------------
  |  |   51|     74|#define setframe_pc(f, pc)	((f)->ftsz = (int64_t)(intptr_t)(pc))
  ------------------
  995|     74|    L->top = L->base = o+1;
  996|     74|    err_msgv(L, LJ_ERR_BADCALL, tname);
  997|     74|  }
  998|      0|  lj_err_optype(L, o, LJ_ERR_OPCALL);
  999|     74|}
luaL_where:
 1138|     52|{
 1139|     52|  int size;
 1140|     52|  cTValue *frame = lj_debug_frame(L, level, &size);
 1141|     52|  lj_debug_addloc(L, "", frame, size ? frame+size : NULL);
  ------------------
  |  Branch (1141:33): [True: 52, False: 0]
  ------------------
 1142|     52|}
lj_err.c:err_unwind:
  110|    148|{
  111|    148|  TValue *frame = L->base-1;
  112|    148|  void *cf = L->cframe;
  113|    148|  while (cf) {
  ------------------
  |  Branch (113:10): [True: 148, False: 0]
  ------------------
  114|    148|    int32_t nres = cframe_nres(cframe_raw(cf));
  ------------------
  |  |  280|    148|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|    148|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
  115|    148|    if (nres < 0) {  /* C frame without Lua frame? */
  ------------------
  |  Branch (115:9): [True: 0, False: 148]
  ------------------
  116|      0|      TValue *top = restorestack(L, -nres);
  ------------------
  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  117|      0|      if (frame < top) {  /* Frame reached? */
  ------------------
  |  Branch (117:11): [True: 0, False: 0]
  ------------------
  118|      0|	if (errcode) {
  ------------------
  |  Branch (118:6): [True: 0, False: 0]
  ------------------
  119|      0|	  L->base = frame+1;
  120|      0|	  L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  121|      0|	  unwindstack(L, top);
  122|      0|	}
  123|      0|	return cf;
  124|      0|      }
  125|      0|    }
  126|    148|    if (frame <= tvref(L->stack)+LJ_FR2)
  ------------------
  |  |  217|    148|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    148|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  if (frame <= tvref(L->stack)+LJ_FR2)
  ------------------
  |  |  569|    148|#define LJ_FR2			1
  ------------------
  |  Branch (126:9): [True: 0, False: 148]
  ------------------
  127|      0|      break;
  128|    148|    switch (frame_typep(frame)) {
  ------------------
  |  |   76|    148|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|    148|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|    148|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|    148|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|    148|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (76:25): [True: 0, False: 148]
  |  |  ------------------
  ------------------
  129|      0|    case FRAME_LUA:  /* Lua frame. */
  ------------------
  |  Branch (129:5): [True: 0, False: 148]
  ------------------
  130|      0|    case FRAME_LUAP:
  ------------------
  |  Branch (130:5): [True: 0, False: 148]
  ------------------
  131|      0|      frame = frame_prevl(frame);
  ------------------
  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
  132|      0|      break;
  133|      0|    case FRAME_C:  /* C frame. */
  ------------------
  |  Branch (133:5): [True: 0, False: 148]
  ------------------
  134|      0|    unwind_c:
  135|      0|#if LJ_UNWIND_EXT
  136|      0|      if (errcode) {
  ------------------
  |  Branch (136:11): [True: 0, False: 0]
  ------------------
  137|      0|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|      0|	L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  139|      0|	unwindstack(L, frame - LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  140|      0|      } else if (cf != stopcf) {
  ------------------
  |  Branch (140:18): [True: 0, False: 0]
  ------------------
  141|      0|	cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  142|      0|	frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  143|      0|	break;
  144|      0|      }
  145|      0|      return NULL;  /* Continue unwinding. */
  146|       |#else
  147|       |      UNUSED(stopcf);
  148|       |      cf = cframe_prev(cf);
  149|       |      frame = frame_prevd(frame);
  150|       |      break;
  151|       |#endif
  152|    148|    case FRAME_CP:  /* Protected C frame. */
  ------------------
  |  Branch (152:5): [True: 148, False: 0]
  ------------------
  153|    148|      if (cframe_canyield(cf)) {  /* Resume? */
  ------------------
  |  |  292|    148|#define cframe_canyield(cf)	((intptr_t)(cf) & CFRAME_RESUME)
  |  |  ------------------
  |  |  |  |  275|    148|#define CFRAME_RESUME		1
  |  |  ------------------
  |  |  |  Branch (292:29): [True: 148, False: 0]
  |  |  ------------------
  ------------------
  154|    148|	if (errcode) {
  ------------------
  |  Branch (154:6): [True: 74, False: 74]
  ------------------
  155|     74|	  hook_leave(G(L));  /* Assumes nobody uses coroutines inside hooks. */
  ------------------
  |  |  683|     74|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|     74|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  156|     74|	  L->cframe = NULL;
  157|     74|	  L->status = (uint8_t)errcode;
  158|     74|	}
  159|    148|	return cf;
  160|    148|      }
  161|      0|      if (errcode) {
  ------------------
  |  Branch (161:11): [True: 0, False: 0]
  ------------------
  162|      0|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  163|      0|	L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  164|      0|	unwindstack(L, frame - LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  165|      0|      }
  166|      0|      return cf;
  167|      0|    case FRAME_CONT:  /* Continuation frame. */
  ------------------
  |  Branch (167:5): [True: 0, False: 148]
  ------------------
  168|      0|      if (frame_iscont_fficb(frame))
  ------------------
  |  |  106|      0|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|      0|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|      0|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  169|      0|	goto unwind_c;
  170|       |      /* fallthrough */
  171|      0|    case FRAME_VARG:  /* Vararg frame. */
  ------------------
  |  Branch (171:5): [True: 0, False: 148]
  ------------------
  172|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|      0|      break;
  174|      0|    case FRAME_PCALL:  /* FF pcall() frame. */
  ------------------
  |  Branch (174:5): [True: 0, False: 148]
  ------------------
  175|      0|    case FRAME_PCALLH:  /* FF pcall() frame inside hook. */
  ------------------
  |  Branch (175:5): [True: 0, False: 148]
  ------------------
  176|      0|      if (errcode) {
  ------------------
  |  Branch (176:11): [True: 0, False: 0]
  ------------------
  177|      0|	global_State *g;
  178|      0|	if (errcode == LUA_YIELD) {
  ------------------
  |  |   44|      0|#define LUA_YIELD	1
  ------------------
  |  Branch (178:6): [True: 0, False: 0]
  ------------------
  179|      0|	  frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  180|      0|	  break;
  181|      0|	}
  182|      0|	g = G(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  183|      0|	setgcref(g->cur_L, obj2gco(L));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  184|      0|	if (frame_typep(frame) == FRAME_PCALL)
  ------------------
  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (184:6): [True: 0, False: 0]
  ------------------
  185|      0|	  hook_leave(g);
  ------------------
  |  |  683|      0|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|      0|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  186|      0|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  187|      0|	L->cframe = cf;
  188|      0|	unwindstack(L, L->base);
  189|      0|      }
  190|      0|      return (void *)((intptr_t)cf | CFRAME_UNWIND_FF);
  ------------------
  |  |  276|      0|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  ------------------
  191|    148|    }
  192|    148|  }
  193|       |  /* No C frame. */
  194|      0|  if (errcode) {
  ------------------
  |  Branch (194:7): [True: 0, False: 0]
  ------------------
  195|      0|    L->base = tvref(L->stack)+1+LJ_FR2;
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = tvref(L->stack)+1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  196|      0|    L->cframe = NULL;
  197|      0|    unwindstack(L, L->base);
  198|      0|    if (G(L)->panic)
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (198:9): [True: 0, False: 0]
  ------------------
  199|      0|      G(L)->panic(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  200|      0|    exit(EXIT_FAILURE);
  201|      0|  }
  202|      0|  return L;  /* Anything non-NULL will do. */
  203|      0|}
lj_err.c:err_raise_ext:
  754|     74|{
  755|     74|  memset(&static_uex, 0, sizeof(static_uex));
  756|     74|  static_uex.ex.exclass = LJ_UEXCLASS_MAKE(errcode);
  ------------------
  |  |  410|     74|#define LJ_UEXCLASS_MAKE(c)	(LJ_UEXCLASS | (uint64_t)(c))
  |  |  ------------------
  |  |  |  |  409|     74|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  ------------------
  757|     74|  static_uex.g = g;
  758|     74|  _Unwind_RaiseException(&static_uex.ex);
  759|     74|}
lj_err.c:finderrfunc:
  829|     74|{
  830|     74|  cTValue *frame = L->base-1, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  217|     74|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     74|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                cTValue *frame = L->base-1, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  569|     74|#define LJ_FR2			1
  ------------------
  831|     74|  void *cf = L->cframe;
  832|     74|  while (frame > bot && cf) {
  ------------------
  |  Branch (832:10): [True: 74, False: 0]
  |  Branch (832:25): [True: 74, False: 0]
  ------------------
  833|     74|    while (cframe_nres(cframe_raw(cf)) < 0) {  /* cframe without frame? */
  ------------------
  |  |  280|     74|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|     74|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
  |  Branch (833:12): [True: 0, False: 74]
  ------------------
  834|      0|      if (frame >= restorestack(L, -cframe_nres(cf)))
  ------------------
  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (834:11): [True: 0, False: 0]
  ------------------
  835|      0|	break;
  836|      0|      if (cframe_errfunc(cf) >= 0)  /* Error handler not inherited (-1)? */
  ------------------
  |  |  279|      0|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|      0|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  |  Branch (836:11): [True: 0, False: 0]
  ------------------
  837|      0|	return cframe_errfunc(cf);
  ------------------
  |  |  279|      0|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|      0|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  838|      0|      cf = cframe_prev(cf);  /* Else unwind cframe and continue searching. */
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  839|      0|      if (cf == NULL)
  ------------------
  |  Branch (839:11): [True: 0, False: 0]
  ------------------
  840|      0|	return 0;
  841|      0|    }
  842|     74|    switch (frame_typep(frame)) {
  ------------------
  |  |   76|     74|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|     74|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|     74|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|     74|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|     74|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  843|      0|    case FRAME_LUA:
  ------------------
  |  Branch (843:5): [True: 0, False: 74]
  ------------------
  844|      0|    case FRAME_LUAP:
  ------------------
  |  Branch (844:5): [True: 0, False: 74]
  ------------------
  845|      0|      frame = frame_prevl(frame);
  ------------------
  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
  846|      0|      break;
  847|      0|    case FRAME_C:
  ------------------
  |  Branch (847:5): [True: 0, False: 74]
  ------------------
  848|      0|      cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  849|       |      /* fallthrough */
  850|      0|    case FRAME_VARG:
  ------------------
  |  Branch (850:5): [True: 0, False: 74]
  ------------------
  851|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  852|      0|      break;
  853|      0|    case FRAME_CONT:
  ------------------
  |  Branch (853:5): [True: 0, False: 74]
  ------------------
  854|      0|      if (frame_iscont_fficb(frame))
  ------------------
  |  |  106|      0|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|      0|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|      0|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  855|      0|	cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  856|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  857|      0|      break;
  858|     74|    case FRAME_CP:
  ------------------
  |  Branch (858:5): [True: 74, False: 0]
  ------------------
  859|     74|      if (cframe_canyield(cf)) return 0;
  ------------------
  |  |  292|     74|#define cframe_canyield(cf)	((intptr_t)(cf) & CFRAME_RESUME)
  |  |  ------------------
  |  |  |  |  275|     74|#define CFRAME_RESUME		1
  |  |  ------------------
  |  |  |  Branch (292:29): [True: 74, False: 0]
  |  |  ------------------
  ------------------
  860|      0|      if (cframe_errfunc(cf) >= 0)
  ------------------
  |  |  279|      0|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|      0|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  |  Branch (860:11): [True: 0, False: 0]
  ------------------
  861|      0|	return cframe_errfunc(cf);
  ------------------
  |  |  279|      0|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|      0|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  862|      0|      cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  863|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  864|      0|      break;
  865|      0|    case FRAME_PCALL:
  ------------------
  |  Branch (865:5): [True: 0, False: 74]
  ------------------
  866|      0|    case FRAME_PCALLH:
  ------------------
  |  Branch (866:5): [True: 0, False: 74]
  ------------------
  867|      0|      if (frame_func(frame_prevd(frame))->c.ffid == FF_xpcall)
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (867:11): [True: 0, False: 0]
  ------------------
  868|      0|	return savestack(L, frame_prevd(frame)+1);  /* xpcall's errorfunc. */
  ------------------
  |  |   14|      0|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  869|      0|      return 0;
  870|      0|    default:
  ------------------
  |  Branch (870:5): [True: 0, False: 74]
  ------------------
  871|      0|      lj_assertL(0, "bad frame type");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  872|      0|      return 0;
  873|     74|    }
  874|     74|  }
  875|      0|  return 0;
  876|     74|}
lj_err.c:err_msgv:
  922|     74|{
  923|     74|  const char *msg;
  924|     74|  va_list argp;
  925|     74|  va_start(argp, em);
  926|     74|  if (LJ_HASJIT) {
  ------------------
  |  |  578|     74|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  927|     74|    TValue *base = tvref(G(L)->jit_base);
  ------------------
  |  |  217|     74|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     74|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  928|     74|    if (base) L->base = base;
  ------------------
  |  Branch (928:9): [True: 0, False: 74]
  ------------------
  929|     74|  }
  930|     74|  if (curr_funcisL(L)) L->top = curr_topL(L);
  ------------------
  |  |  716|     74|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|     74|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|     74|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 0, False: 74]
  |  |  ------------------
  ------------------
                if (curr_funcisL(L)) L->top = curr_topL(L);
  ------------------
  |  |  718|      0|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|      0|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  931|     74|  msg = lj_strfmt_pushvf(L, err2msg(em), argp);
  ------------------
  |  |   21|     74|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  932|     74|  va_end(argp);
  933|     74|  lj_debug_addloc(L, msg, L->base-1, NULL);
  934|     74|  lj_err_run(L);
  935|     74|}

lj_func_freeproto:
   21|    188|{
   22|    188|  lj_mem_free(g, pt, pt->sizept);
   23|    188|}
lj_func_closeuv:
   84|  73.4k|{
   85|  73.4k|  GCupval *uv;
   86|  73.4k|  global_State *g = G(L);
  ------------------
  |  |  705|  73.4k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  73.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   87|  73.4k|  while (gcref(L->openupval) != NULL &&
  ------------------
  |  |   67|  73.4k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (87:10): [True: 0, False: 73.4k]
  ------------------
   88|  73.4k|	 uvval((uv = gco2uv(gcref(L->openupval)))) >= level) {
  ------------------
  |  |  449|      0|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (88:3): [True: 0, False: 0]
  ------------------
   89|      0|    GCobj *o = obj2gco(uv);
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   90|      0|    lj_assertG(!isblack(o), "bad black upvalue");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   91|      0|    lj_assertG(!uv->closed && uvval(uv) != &uv->tv, "closed upvalue in chain");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   92|      0|    setgcrefr(L->openupval, uv->nextgc);  /* No longer in open list. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   93|      0|    if (isdead(g, o)) {
  ------------------
  |  |   37|      0|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|      0|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   94|      0|      lj_func_freeuv(g, uv);
   95|      0|    } else {
   96|      0|      unlinkuv(g, uv);
   97|      0|      lj_gc_closeuv(g, uv);
   98|      0|    }
   99|      0|  }
  100|  73.4k|}
lj_func_newC:
  112|  87.2k|{
  113|  87.2k|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeCfunc(nelems));
  ------------------
  |  |  481|  87.2k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  114|  87.2k|  fn->c.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|  87.2k|#define LJ_TFUNC		(~8u)
  ------------------
  115|  87.2k|  fn->c.ffid = FF_C;
  ------------------
  |  |  475|  87.2k|#define FF_C		1
  ------------------
  116|  87.2k|  fn->c.nupvalues = (uint8_t)nelems;
  117|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  118|  87.2k|  setmref(fn->c.pc, &G(L)->bc_cfunc_ext);
  ------------------
  |  |   39|  87.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  119|  87.2k|  setgcref(fn->c.env, obj2gco(env));
  ------------------
  |  |   72|  87.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  120|  87.2k|  return fn;
  121|  87.2k|}
lj_func_newL_empty:
  141|    188|{
  142|    188|  GCfunc *fn = func_newL(L, pt, env);
  143|    188|  MSize i, nuv = pt->sizeuv;
  144|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  145|    188|  for (i = 0; i < nuv; i++) {
  ------------------
  |  Branch (145:15): [True: 0, False: 188]
  ------------------
  146|      0|    GCupval *uv = func_emptyuv(L);
  147|      0|    int32_t v = proto_uv(pt)[i];
  ------------------
  |  |  422|      0|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  148|      0|    uv->immutable = ((v / PROTO_UV_IMMUTABLE) & 1);
  ------------------
  |  |  413|      0|#define PROTO_UV_IMMUTABLE	0x4000	/* Immutable upvalue. */
  ------------------
  149|      0|    uv->dhash = (uint32_t)(uintptr_t)pt ^ (v << 24);
  150|      0|    setgcref(fn->l.uvptr[i], obj2gco(uv));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  151|      0|  }
  152|    188|  fn->l.nupvalues = (uint8_t)nuv;
  153|    188|  return fn;
  154|    188|}
lj_func_free:
  186|  87.4k|{
  187|  87.4k|  MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|  87.4k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  87.4k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 188, False: 87.2k]
  |  |  ------------------
  ------------------
                MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|    188|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  188|  87.4k|			       sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|   174k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  189|  87.4k|  lj_mem_free(g, fn, size);
  190|  87.4k|}
lj_func.c:func_newL:
  124|    188|{
  125|    188|  uint32_t count;
  126|    188|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeLfunc((MSize)pt->sizeuv));
  ------------------
  |  |  482|    188|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  127|    188|  fn->l.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|    188|#define LJ_TFUNC		(~8u)
  ------------------
  128|    188|  fn->l.ffid = FF_LUA;
  ------------------
  |  |  474|    188|#define FF_LUA		0
  ------------------
  129|    188|  fn->l.nupvalues = 0;  /* Set to zero until upvalues are initialized. */
  130|       |  /* NOBARRIER: Really a setgcref. But the GCfunc is new (marked white). */
  131|    188|  setmref(fn->l.pc, proto_bc(pt));
  ------------------
  |  |   39|    188|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  132|    188|  setgcref(fn->l.env, obj2gco(env));
  ------------------
  |  |   72|    188|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  133|       |  /* Saturating 3 bit counter (0..7) for created closures. */
  134|    188|  count = (uint32_t)pt->flags + PROTO_CLCOUNT;
  ------------------
  |  |  408|    188|#define PROTO_CLCOUNT		0x20	/* Base of saturating 3 bit counter. */
  ------------------
  135|    188|  pt->flags = (uint8_t)(count - ((count >> PROTO_CLC_BITS) & PROTO_CLCOUNT));
  ------------------
  |  |  409|    188|#define PROTO_CLC_BITS		3
  ------------------
                pt->flags = (uint8_t)(count - ((count >> PROTO_CLC_BITS) & PROTO_CLCOUNT));
  ------------------
  |  |  408|    188|#define PROTO_CLCOUNT		0x20	/* Base of saturating 3 bit counter. */
  ------------------
  136|    188|  return fn;
  137|    188|}

lj_gc_separateudata:
  142|  80.6k|{
  143|  80.6k|  size_t m = 0;
  144|  80.6k|  GCRef *p = &mainthread(g)->nextgc;
  ------------------
  |  |  665|  80.6k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  80.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  145|  80.6k|  GCobj *o;
  146|  81.3k|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  81.3k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (146:10): [True: 694, False: 80.6k]
  ------------------
  147|    694|    if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   32|  1.38k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|    694|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|    694|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|    694|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 694, False: 0]
  |  |  ------------------
  ------------------
                  if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   40|  1.38k|#define isfinalized(u)		((u)->marked & LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|    694|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  |  |  |  Branch (40:25): [True: 347, False: 347]
  |  |  |  Branch (40:27): [True: 694, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (147:25): [True: 0, False: 0]
  ------------------
  148|    347|      p = &o->gch.nextgc;  /* Nothing to do. */
  149|    347|    } else if (!lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc)) {
  ------------------
  |  |   20|    694|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 347, False: 0]
  |  |  |  Branch (20:5): [True: 347, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  Branch (20:28): [True: 0, False: 0]
  |  |  ------------------
  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (149:16): [True: 347, False: 0]
  ------------------
  150|    347|      markfinalized(o);  /* Done, as there's no __gc metamethod. */
  ------------------
  |  |   46|    347|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|    347|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  151|    347|      p = &o->gch.nextgc;
  152|    347|    } else {  /* Otherwise move userdata to be finalized to mmudata list. */
  153|      0|      m += sizeudata(gco2ud(o));
  ------------------
  |  |  343|      0|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  |  |  ------------------
  |  |  |  Branch (343:47): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  154|      0|      markfinalized(o);
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  155|      0|      *p = o->gch.nextgc;
  156|      0|      if (gcref(g->gc.mmudata)) {  /* Link to end of mmudata list. */
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  157|      0|	GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  158|      0|	setgcrefr(o->gch.nextgc, root->gch.nextgc);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  159|      0|	setgcref(root->gch.nextgc, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  160|      0|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  161|      0|      } else {  /* Create circular list. */
  162|      0|	setgcref(o->gch.nextgc, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  163|      0|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  164|      0|      }
  165|      0|    }
  166|    694|  }
  167|  80.6k|  return m;
  168|  80.6k|}
lj_gc_finalize_udata:
  576|  36.7k|{
  577|  36.7k|  while (gcref(G(L)->gc.mmudata) != NULL)
  ------------------
  |  |   67|  36.7k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (577:10): [True: 0, False: 36.7k]
  ------------------
  578|      0|    gc_finalize(L);
  579|  36.7k|}
lj_gc_finalize_cdata:
  584|  36.7k|{
  585|  36.7k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  586|  36.7k|  GCtab *t = tabref(g->gcroot[GCROOT_FFI_FIN]);
  ------------------
  |  |  514|  36.7k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  36.7k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  587|  36.7k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|  36.7k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  588|  36.7k|  ptrdiff_t i;
  589|  36.7k|  setgcrefnull(t->metatable);  /* Mark finalizer table as disabled. */
  ------------------
  |  |   76|  36.7k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  590|   110k|  for (i = (ptrdiff_t)t->hmask; i >= 0; i--)
  ------------------
  |  Branch (590:33): [True: 73.4k, False: 36.7k]
  ------------------
  591|  73.4k|    if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  782|   146k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
                  if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  799|  36.7k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  36.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  36.7k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 36.7k]
  |  |  ------------------
  ------------------
  |  Branch (591:9): [True: 36.7k, False: 36.7k]
  ------------------
  592|      0|      GCobj *o = gcV(&node[i].key);
  ------------------
  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  593|      0|      TValue tmp;
  594|      0|      makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  595|      0|      o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  596|      0|      copyTV(L, &tmp, &node[i].val);
  597|      0|      setnilV(&node[i].val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  598|      0|      gc_call_finalizer(g, L, &tmp, o);
  599|      0|    }
  600|  36.7k|}
lj_gc_freeall:
  605|  36.7k|{
  606|  36.7k|  MSize i;
  607|       |  /* Free everything, except super-fixed objects (the main thread). */
  608|  36.7k|  g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   27|  36.7k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  36.7k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  36.7k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
                g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   25|  36.7k|#define LJ_GC_SFIXED	0x40
  ------------------
  609|  36.7k|  gc_fullsweep(g, &g->gc.root);
  ------------------
  |  |  401|  36.7k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  ------------------
  610|  9.43M|  for (i = g->str.mask; i != ~(MSize)0; i--)  /* Free all string hash chains. */
  ------------------
  |  Branch (610:25): [True: 9.40M, False: 36.7k]
  ------------------
  611|  9.40M|    gc_sweepstr(g, &g->str.tab[i]);
  612|  36.7k|}
lj_gc_step:
  721|  11.6k|{
  722|  11.6k|  global_State *g = G(L);
  ------------------
  |  |  705|  11.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  11.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  723|  11.6k|  GCSize lim;
  724|  11.6k|  int32_t ostate = g->vmstate;
  725|  11.6k|  setvmstate(g, GC);
  ------------------
  |  |  539|  11.6k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  726|  11.6k|  lim = (GCSTEPSIZE/100) * g->gc.stepmul;
  ------------------
  |  |   32|  11.6k|#define GCSTEPSIZE	1024u
  ------------------
  727|  11.6k|  if (lim == 0)
  ------------------
  |  Branch (727:7): [True: 4, False: 11.6k]
  ------------------
  728|      4|    lim = LJ_MAX_MEM;
  ------------------
  |  |   52|      4|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      4|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      4|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  729|  11.6k|  if (g->gc.total > g->gc.threshold)
  ------------------
  |  Branch (729:7): [True: 68, False: 11.6k]
  ------------------
  730|     68|    g->gc.debt += g->gc.total - g->gc.threshold;
  731|   121k|  do {
  732|   121k|    lim -= (GCSize)gc_onestep(L);
  733|   121k|    if (g->gc.state == GCSpause) {
  ------------------
  |  Branch (733:9): [True: 4, False: 121k]
  ------------------
  734|      4|      g->gc.threshold = (g->gc.estimate/100) * g->gc.pause;
  735|      4|      g->vmstate = ostate;
  736|      4|      return 1;  /* Finished a GC cycle. */
  737|      4|    }
  738|   121k|  } while (sizeof(lim) == 8 ? ((int64_t)lim > 0) : ((int32_t)lim > 0));
  ------------------
  |  Branch (738:12): [Folded - Ignored]
  |  Branch (738:12): [True: 109k, False: 11.6k]
  ------------------
  739|  11.6k|  if (g->gc.debt < GCSTEPSIZE) {
  ------------------
  |  |   32|  11.6k|#define GCSTEPSIZE	1024u
  ------------------
  |  Branch (739:7): [True: 11.6k, False: 0]
  ------------------
  740|  11.6k|    g->gc.threshold = g->gc.total + GCSTEPSIZE;
  ------------------
  |  |   32|  11.6k|#define GCSTEPSIZE	1024u
  ------------------
  741|  11.6k|    g->vmstate = ostate;
  742|  11.6k|    return -1;
  743|  11.6k|  } else {
  744|      0|    g->gc.debt -= GCSTEPSIZE;
  ------------------
  |  |   32|      0|#define GCSTEPSIZE	1024u
  ------------------
  745|      0|    g->gc.threshold = g->gc.total;
  746|      0|    g->vmstate = ostate;
  747|      0|    return 0;
  748|      0|  }
  749|  11.6k|}
lj_gc_fullgc:
  774|  6.93k|{
  775|  6.93k|  global_State *g = G(L);
  ------------------
  |  |  705|  6.93k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  6.93k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  776|  6.93k|  int32_t ostate = g->vmstate;
  777|  6.93k|  setvmstate(g, GC);
  ------------------
  |  |  539|  6.93k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  778|  6.93k|  if (g->gc.state <= GCSatomic) {  /* Caught somewhere in the middle. */
  ------------------
  |  Branch (778:7): [True: 6.93k, False: 0]
  ------------------
  779|  6.93k|    setmref(g->gc.sweep, &g->gc.root);  /* Sweep everything (preserving it). */
  ------------------
  |  |   39|  6.93k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  780|  6.93k|    setgcrefnull(g->gc.gray);  /* Reset lists from partial propagation. */
  ------------------
  |  |   76|  6.93k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  781|  6.93k|    setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|  6.93k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  782|  6.93k|    setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|  6.93k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  783|  6.93k|    g->gc.state = GCSsweepstring;  /* Fast forward to the sweep phase. */
  784|  6.93k|    g->gc.sweepstr = 0;
  785|  6.93k|  }
  786|  1.78M|  while (g->gc.state == GCSsweepstring || g->gc.state == GCSsweep)
  ------------------
  |  Branch (786:10): [True: 1.77M, False: 13.8k]
  |  Branch (786:43): [True: 6.93k, False: 6.93k]
  ------------------
  787|  1.78M|    gc_onestep(L);  /* Finish sweep. */
  788|  6.93k|  lj_assertG(g->gc.state == GCSfinalize || g->gc.state == GCSpause,
  ------------------
  |  |  364|  6.93k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 6.93k]
  |  |  |  |  |  Branch (355:5): [True: 6.93k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.93k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  789|  6.93k|	     "bad GC state");
  790|       |  /* Now perform a full GC. */
  791|  6.93k|  g->gc.state = GCSpause;
  792|  1.87M|  do { gc_onestep(L); } while (g->gc.state != GCSpause);
  ------------------
  |  Branch (792:32): [True: 1.86M, False: 6.93k]
  ------------------
  793|  6.93k|  g->gc.threshold = (g->gc.estimate/100) * g->gc.pause;
  794|  6.93k|  g->vmstate = ostate;
  795|  6.93k|}
lj_mem_realloc:
  862|  2.20M|{
  863|  2.20M|  global_State *g = G(L);
  ------------------
  |  |  705|  2.20M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.20M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  864|  2.20M|  lj_assertG((osz == 0) == (p == NULL), "realloc API violation");
  ------------------
  |  |  364|  2.20M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.20M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.20M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.20M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  865|  2.20M|  p = g->allocf(g->allocd, p, osz, nsz);
  866|  2.20M|  if (p == NULL && nsz > 0)
  ------------------
  |  Branch (866:7): [True: 0, False: 2.20M]
  |  Branch (866:20): [True: 0, False: 0]
  ------------------
  867|      0|    lj_err_mem(L);
  868|  2.20M|  lj_assertG((nsz == 0) == (p == NULL), "allocf API violation");
  ------------------
  |  |  364|  2.20M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.20M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.20M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.20M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  869|  2.20M|  lj_assertG(checkptrGC(p),
  ------------------
  |  |  364|  2.20M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.40M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.20M, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.20M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  870|  2.20M|	     "allocated memory address %p outside required range", p);
  871|  2.20M|  g->gc.total = (g->gc.total - osz) + nsz;
  872|  2.20M|  return p;
  873|  2.20M|}
lj_mem_newgco:
  877|   329k|{
  878|   329k|  global_State *g = G(L);
  ------------------
  |  |  705|   329k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   329k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  879|   329k|  GCobj *o = (GCobj *)g->allocf(g->allocd, NULL, 0, size);
  880|   329k|  if (o == NULL)
  ------------------
  |  Branch (880:7): [True: 0, False: 329k]
  ------------------
  881|      0|    lj_err_mem(L);
  882|   329k|  lj_assertG(checkptrGC(o),
  ------------------
  |  |  364|   329k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   659k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 329k, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|   329k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  883|   329k|	     "allocated memory address %p outside required range", o);
  884|   329k|  g->gc.total += size;
  885|   329k|  setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|   329k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  886|   329k|  setgcref(g->gc.root, o);
  ------------------
  |  |   72|   329k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  887|   329k|  newwhite(g, o);
  ------------------
  |  |   40|   329k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|   329k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   329k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   329k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   329k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   329k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  888|   329k|  return o;
  889|   329k|}
lj_mem_grow:
  893|    188|{
  894|    188|  MSize sz = (*szp) << 1;
  895|    188|  if (sz < LJ_MIN_VECSZ)
  ------------------
  |  |   81|    188|#define LJ_MIN_VECSZ	8		/* Min. size for growable vectors. */
  ------------------
  |  Branch (895:7): [True: 188, False: 0]
  ------------------
  896|    188|    sz = LJ_MIN_VECSZ;
  ------------------
  |  |   81|    188|#define LJ_MIN_VECSZ	8		/* Min. size for growable vectors. */
  ------------------
  897|    188|  if (sz > lim)
  ------------------
  |  Branch (897:7): [True: 0, False: 188]
  ------------------
  898|      0|    sz = lim;
  899|    188|  p = lj_mem_realloc(L, p, (*szp)*esz, sz*esz);
  900|    188|  *szp = sz;
  901|    188|  return p;
  902|    188|}
lj_gc.c:gc_sweep:
  405|   115k|{
  406|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  407|   115k|  int ow = otherwhite(g);
  ------------------
  |  |   36|   115k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   115k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   115k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   115k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  408|   115k|  GCobj *o;
  409|   624k|  while ((o = gcref(*p)) != NULL && lim-- > 0) {
  ------------------
  |  |   67|   624k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (409:10): [True: 509k, False: 115k]
  |  Branch (409:37): [True: 509k, False: 0]
  ------------------
  410|   509k|    if (o->gch.gct == ~LJ_TTHREAD)  /* Need to sweep open upvalues, too. */
  ------------------
  |  |  266|   509k|#define LJ_TTHREAD		(~6u)
  ------------------
  |  Branch (410:9): [True: 65.1k, False: 443k]
  ------------------
  411|  65.1k|      gc_fullsweep(g, &gco2th(o)->openupval);
  ------------------
  |  |  401|   130k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  |  |  ------------------
  |  |  |  Branch (401:41): [True: 65.1k, False: 0]
  |  |  ------------------
  ------------------
  412|   509k|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|   509k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|   509k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|   509k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (412:9): [True: 178k, False: 330k]
  ------------------
  413|   178k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|   178k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   178k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 178k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   178k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  414|   178k|		 "sweep of undead object");
  415|   178k|      makewhite(g, o);  /* Value is alive, change to the current white. */
  ------------------
  |  |   42|   178k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|   178k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   178k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   178k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   178k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|   178k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   178k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   178k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   178k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   178k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  416|   178k|      p = &o->gch.nextgc;
  417|   330k|    } else {  /* Otherwise value is dead, free it. */
  418|   330k|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|   330k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   660k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 330k]
  |  |  |  |  |  Branch (355:5): [True: 330k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   330k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  419|   330k|		 "sweep of unlive object");
  420|   330k|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|   330k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  421|   330k|      if (o == gcref(g->gc.root))
  ------------------
  |  |   67|   330k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (421:11): [True: 0, False: 330k]
  ------------------
  422|      0|	setgcrefr(g->gc.root, o->gch.nextgc);  /* Adjust list anchor. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  423|   330k|      gc_freefunc[o->gch.gct - ~LJ_TSTR](g, o);
  ------------------
  |  |  264|   330k|#define LJ_TSTR			(~4u)
  ------------------
  424|   330k|    }
  425|   509k|  }
  426|   115k|  return p;
  427|   115k|}
lj_gc.c:gc_sweepstr:
  431|  12.9M|{
  432|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  433|  12.9M|  int ow = otherwhite(g);
  ------------------
  |  |   36|  12.9M|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  12.9M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  12.9M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  12.9M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  434|  12.9M|  uintptr_t u = gcrefu(*chain);
  ------------------
  |  |   69|  12.9M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  435|  12.9M|  GCRef q;
  436|  12.9M|  GCRef *p = &q;
  437|  12.9M|  GCobj *o;
  438|  12.9M|  setgcrefp(q, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  12.9M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  439|  15.5M|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  15.5M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (439:10): [True: 2.56M, False: 12.9M]
  ------------------
  440|  2.56M|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|  2.56M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  2.56M|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  2.56M|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (440:9): [True: 700k, False: 1.86M]
  ------------------
  441|   700k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|   700k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   861k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 538k, False: 161k]
  |  |  |  |  |  Branch (355:5): [True: 161k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   700k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  442|   700k|		 "sweep of undead string");
  443|   700k|      makewhite(g, o);  /* String is alive, change to the current white. */
  ------------------
  |  |   42|   700k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|   700k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   700k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   700k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   700k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|   700k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   700k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   700k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   700k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   700k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  444|   700k|      p = &o->gch.nextgc;
  445|  1.86M|    } else {  /* Otherwise string is dead, free it. */
  446|  1.86M|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|  1.86M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.73M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 1.86M]
  |  |  |  |  |  Branch (355:5): [True: 1.86M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.86M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  447|  1.86M|		 "sweep of unlive string");
  448|  1.86M|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|  1.86M|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  449|  1.86M|      lj_str_free(g, gco2str(o));
  ------------------
  |  |  765|  1.86M|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  1.86M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.86M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.86M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.86M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.86M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  450|  1.86M|    }
  451|  2.56M|  }
  452|  12.9M|  setgcrefp(*chain, (gcrefu(q) | (u & 1)));
  ------------------
  |  |   75|  12.9M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  453|  12.9M|}
lj_gc.c:gc_onestep:
  654|  3.77M|{
  655|  3.77M|  global_State *g = G(L);
  ------------------
  |  |  705|  3.77M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.77M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  656|  3.77M|  switch (g->gc.state) {
  657|  18.3k|  case GCSpause:
  ------------------
  |  Branch (657:3): [True: 18.3k, False: 3.76M]
  ------------------
  658|  18.3k|    gc_mark_start(g);  /* Start a new GC cycle by marking all GC roots. */
  659|  18.3k|    return 0;
  660|   170k|  case GCSpropagate:
  ------------------
  |  Branch (660:3): [True: 170k, False: 3.60M]
  ------------------
  661|   170k|    if (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|   170k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (661:9): [True: 163k, False: 7.21k]
  ------------------
  662|   163k|      return propagatemark(g);  /* Propagate one gray object. */
  663|  7.21k|    g->gc.state = GCSatomic;  /* End of mark phase. */
  664|  7.21k|    return 0;
  665|  7.21k|  case GCSatomic:
  ------------------
  |  Branch (665:3): [True: 7.21k, False: 3.77M]
  ------------------
  666|  7.21k|    if (tvref(g->jit_base))  /* Don't run atomic phase on trace. */
  ------------------
  |  |  217|  7.21k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  7.21k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 7.21k]
  |  |  ------------------
  ------------------
  667|      0|      return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  668|  7.21k|    atomic(g, L);
  669|  7.21k|    g->gc.state = GCSsweepstring;  /* Start of sweep phase. */
  670|  7.21k|    g->gc.sweepstr = 0;
  671|  7.21k|    return 0;
  672|  3.56M|  case GCSsweepstring: {
  ------------------
  |  Branch (672:3): [True: 3.56M, False: 209k]
  ------------------
  673|  3.56M|    GCSize old = g->gc.total;
  674|  3.56M|    gc_sweepstr(g, &g->str.tab[g->gc.sweepstr++]);  /* Sweep one chain. */
  675|  3.56M|    if (g->gc.sweepstr > g->str.mask)
  ------------------
  |  Branch (675:9): [True: 13.8k, False: 3.55M]
  ------------------
  676|  13.8k|      g->gc.state = GCSsweep;  /* All string hash chains sweeped. */
  677|  3.56M|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|  3.56M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.56M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.56M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.56M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  678|  3.56M|    g->gc.estimate -= old - g->gc.total;
  679|  3.56M|    return GCSWEEPCOST;
  ------------------
  |  |   34|  3.56M|#define GCSWEEPCOST	10
  ------------------
  680|  3.56M|    }
  681|  13.8k|  case GCSsweep: {
  ------------------
  |  Branch (681:3): [True: 13.8k, False: 3.76M]
  ------------------
  682|  13.8k|    GCSize old = g->gc.total;
  683|  13.8k|    setmref(g->gc.sweep, gc_sweep(g, mref(g->gc.sweep, GCRef), GCSWEEPMAX));
  ------------------
  |  |   39|  13.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  684|  13.8k|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|  13.8k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  685|  13.8k|    g->gc.estimate -= old - g->gc.total;
  686|  13.8k|    if (gcref(*mref(g->gc.sweep, GCRef)) == NULL) {
  ------------------
  |  |   67|  13.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (686:9): [True: 13.8k, False: 0]
  ------------------
  687|  13.8k|      if (g->str.num <= (g->str.mask >> 2) && g->str.mask > LJ_MIN_STRTAB*2-1)
  ------------------
  |  |   79|  13.8k|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  |  Branch (687:11): [True: 13.8k, False: 0]
  |  Branch (687:47): [True: 0, False: 13.8k]
  ------------------
  688|      0|	lj_str_resize(L, g->str.mask >> 1);  /* Shrink string table. */
  689|  13.8k|      if (gcref(g->gc.mmudata)) {  /* Need any finalizations? */
  ------------------
  |  |   67|  13.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
  690|      0|	g->gc.state = GCSfinalize;
  691|  13.8k|      } else {  /* Otherwise skip this phase to help the JIT. */
  692|  13.8k|	g->gc.state = GCSpause;  /* End of GC cycle. */
  693|  13.8k|	g->gc.debt = 0;
  694|  13.8k|      }
  695|  13.8k|    }
  696|  13.8k|    return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   33|  13.8k|#define GCSWEEPMAX	40
  ------------------
                  return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   34|  13.8k|#define GCSWEEPCOST	10
  ------------------
  697|  13.8k|    }
  698|      0|  case GCSfinalize:
  ------------------
  |  Branch (698:3): [True: 0, False: 3.77M]
  ------------------
  699|      0|    if (gcref(g->gc.mmudata) != NULL) {
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (699:9): [True: 0, False: 0]
  ------------------
  700|      0|      GCSize old = g->gc.total;
  701|      0|      if (tvref(g->jit_base))  /* Don't call finalizers on trace. */
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  702|      0|	return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  703|      0|      gc_finalize(L);  /* Finalize one userdata object. */
  704|      0|      if (old >= g->gc.total && g->gc.estimate > old - g->gc.total)
  ------------------
  |  Branch (704:11): [True: 0, False: 0]
  |  Branch (704:33): [True: 0, False: 0]
  ------------------
  705|      0|	g->gc.estimate -= old - g->gc.total;
  706|      0|      if (g->gc.estimate > GCFINALIZECOST)
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  |  Branch (706:11): [True: 0, False: 0]
  ------------------
  707|      0|	g->gc.estimate -= GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  708|      0|      return GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  709|      0|    }
  710|      0|    g->gc.state = GCSpause;  /* End of GC cycle. */
  711|      0|    g->gc.debt = 0;
  712|      0|    return 0;
  713|      0|  default:
  ------------------
  |  Branch (713:3): [True: 0, False: 3.77M]
  ------------------
  714|      0|    lj_assertG(0, "bad GC state");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  715|      0|    return 0;
  716|  3.77M|  }
  717|  3.77M|}
lj_gc.c:gc_mark_start:
  103|  18.3k|{
  104|  18.3k|  setgcrefnull(g->gc.gray);
  ------------------
  |  |   76|  18.3k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  105|  18.3k|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|  18.3k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  106|  18.3k|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|  18.3k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  107|  18.3k|  gc_markobj(g, mainthread(g));
  ------------------
  |  |   52|  18.3k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  18.3k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  18.3k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  18.3k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  18.3k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 18.3k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  18.3k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  108|  18.3k|  gc_markobj(g, tabref(mainthread(g)->env));
  ------------------
  |  |   52|  18.3k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  18.3k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  18.3k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  18.3k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  18.3k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 18.3k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  18.3k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  109|  18.3k|  gc_marktv(g, &g->registrytv);
  ------------------
  |  |   46|  18.3k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  18.3k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  36.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 18.3k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 18.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  18.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  18.3k|	       "TValue and GC type mismatch"); \
  |  |   48|  18.3k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  18.3k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  36.6k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  18.3k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  18.3k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  18.3k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  18.3k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  18.3k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  18.3k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 18.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  36.6k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  18.3k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  18.3k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  18.3k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 18.3k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 18.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  18.3k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  18.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  18.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  18.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 18.3k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  18.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  110|  18.3k|  gc_mark_gcroot(g);
  111|  18.3k|  g->gc.state = GCSpropagate;
  112|  18.3k|}
lj_gc.c:gc_mark_gcroot:
   94|  25.5k|{
   95|  25.5k|  ptrdiff_t i;
   96|  1.02M|  for (i = 0; i < GCROOT_MAX; i++)
  ------------------
  |  Branch (96:15): [True: 996k, False: 25.5k]
  ------------------
   97|   996k|    if (gcref(g->gcroot[i]) != NULL)
  ------------------
  |  |   67|   996k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (97:9): [True: 587k, False: 408k]
  ------------------
   98|   587k|      gc_markobj(g, gcref(g->gcroot[i]));
  ------------------
  |  |   52|   587k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   587k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   587k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   587k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   587k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 421k, False: 165k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|   421k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   99|  25.5k|}
lj_gc.c:propagatemark:
  324|   173k|{
  325|   173k|  GCobj *o = gcref(g->gc.gray);
  ------------------
  |  |   67|   173k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  326|   173k|  int gct = o->gch.gct;
  327|   173k|  lj_assertG(isgray(o), "propagation of non-gray object");
  ------------------
  |  |  364|   173k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   173k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 173k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   173k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  328|   173k|  gray2black(o);
  ------------------
  |  |   39|   173k|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|   173k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  329|   173k|  setgcrefr(g->gc.gray, o->gch.gclist);  /* Remove from gray list. */
  ------------------
  |  |   77|   173k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  330|   173k|  if (LJ_LIKELY(gct == ~LJ_TTAB)) {
  ------------------
  |  |  145|   173k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 114k, False: 58.8k]
  |  |  ------------------
  ------------------
  331|   114k|    GCtab *t = gco2tab(o);
  ------------------
  |  |  771|   114k|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   114k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   114k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   114k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 114k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   114k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  332|   114k|    if (gc_traverse_tab(g, t) > 0)
  ------------------
  |  Branch (332:9): [True: 0, False: 114k]
  ------------------
  333|      0|      black2gray(o);  /* Keep weak tables gray. */
  ------------------
  |  |   44|      0|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  334|   114k|    return sizeof(GCtab) + sizeof(TValue) * t->asize +
  335|   114k|			   (t->hmask ? sizeof(Node) * (t->hmask + 1) : 0);
  ------------------
  |  Branch (335:8): [True: 110k, False: 4.25k]
  ------------------
  336|   114k|  } else if (LJ_LIKELY(gct == ~LJ_TFUNC)) {
  ------------------
  |  |  145|  58.8k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 38.7k, False: 20.0k]
  |  |  ------------------
  ------------------
  337|  38.7k|    GCfunc *fn = gco2func(o);
  ------------------
  |  |  769|  38.7k|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  ------------------
  |  |  |  |  367|  38.7k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  38.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  38.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 38.7k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  38.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  338|      0|    gc_traverse_func(g, fn);
  339|  38.7k|    return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|  38.7k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  38.7k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 38.7k]
  |  |  ------------------
  ------------------
                  return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|      0|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  340|  38.7k|			   sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|  38.7k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  341|  38.7k|  } else if (LJ_LIKELY(gct == ~LJ_TPROTO)) {
  ------------------
  |  |  145|  20.0k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 20.0k]
  |  |  ------------------
  ------------------
  342|      0|    GCproto *pt = gco2pt(o);
  ------------------
  |  |  768|      0|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  343|      0|    gc_traverse_proto(g, pt);
  344|      0|    return pt->sizept;
  345|  20.0k|  } else if (LJ_LIKELY(gct == ~LJ_TTHREAD)) {
  ------------------
  |  |  145|  20.0k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 20.0k, False: 0]
  |  |  ------------------
  ------------------
  346|  20.0k|    lua_State *th = gco2th(o);
  ------------------
  |  |  767|  20.0k|#define gco2th(o)	check_exp((o)->gch.gct == ~LJ_TTHREAD, &(o)->th)
  |  |  ------------------
  |  |  |  |  367|  20.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  20.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  20.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 20.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  20.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  347|  20.0k|    setgcrefr(th->gclist, g->gc.grayagain);
  ------------------
  |  |   77|  20.0k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  348|  20.0k|    setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|  20.0k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  349|  20.0k|    black2gray(o);  /* Threads are never black. */
  ------------------
  |  |   44|  20.0k|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  20.0k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  350|  20.0k|    gc_traverse_thread(g, th);
  351|  20.0k|    return sizeof(lua_State) + sizeof(TValue) * th->stacksize;
  352|  20.0k|  } else {
  353|      0|#if LJ_HASJIT
  354|      0|    GCtrace *T = gco2trace(o);
  ------------------
  |  |  296|      0|#define gco2trace(o)	check_exp((o)->gch.gct == ~LJ_TTRACE, (GCtrace *)(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  355|      0|    gc_traverse_trace(g, T);
  356|      0|    return ((sizeof(GCtrace)+7)&~7) + (T->nins-T->nk)*sizeof(IRIns) +
  357|      0|	   T->nsnap*sizeof(SnapShot) + T->nsnapmap*sizeof(SnapEntry);
  358|       |#else
  359|       |    lj_assertG(0, "bad GC type %d", gct);
  360|       |    return 0;
  361|       |#endif
  362|      0|  }
  363|   173k|}
lj_gc.c:gc_traverse_tab:
  174|   114k|{
  175|   114k|  int weak = 0;
  176|   114k|  cTValue *mode;
  177|   114k|  GCtab *mt = tabref(t->metatable);
  ------------------
  |  |  514|   114k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   114k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  178|   114k|  if (mt)
  ------------------
  |  Branch (178:7): [True: 18.3k, False: 95.9k]
  ------------------
  179|  18.3k|    gc_markobj(g, mt);
  ------------------
  |  |   52|  18.3k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  18.3k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  18.3k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  18.3k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  18.3k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  180|   114k|  mode = lj_meta_fastg(g, mt, MM_mode);
  ------------------
  |  |   20|   114k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 95.9k, False: 18.3k]
  |  |  |  Branch (20:26): [True: 0, False: 18.3k]
  |  |  ------------------
  |  |   21|  18.3k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|  18.3k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|  18.3k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|  18.3k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  181|   114k|  if (mode && tvisstr(mode)) {  /* Valid __mode field? */
  ------------------
  |  |  795|  18.3k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  18.3k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  18.3k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 18.3k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (181:7): [True: 18.3k, False: 95.9k]
  ------------------
  182|  18.3k|    const char *modestr = strVdata(mode);
  ------------------
  |  |  318|  18.3k|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|  36.6k|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 18.3k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|    int c;
  184|  36.6k|    while ((c = *modestr++)) {
  ------------------
  |  Branch (184:12): [True: 18.3k, False: 18.3k]
  ------------------
  185|  18.3k|      if (c == 'k') weak |= LJ_GC_WEAKKEY;
  ------------------
  |  |   21|  18.3k|#define LJ_GC_WEAKKEY	0x08
  ------------------
  |  Branch (185:11): [True: 18.3k, False: 0]
  ------------------
  186|      0|      else if (c == 'v') weak |= LJ_GC_WEAKVAL;
  ------------------
  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (186:16): [True: 0, False: 0]
  ------------------
  187|  18.3k|    }
  188|  18.3k|    if (weak) {  /* Weak tables are cleared in the atomic phase. */
  ------------------
  |  Branch (188:9): [True: 18.3k, False: 0]
  ------------------
  189|  18.3k|#if LJ_HASFFI
  190|  18.3k|      if (gcref(g->gcroot[GCROOT_FFI_FIN]) == obj2gco(t)) {
  ------------------
  |  |   67|  18.3k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                    if (gcref(g->gcroot[GCROOT_FFI_FIN]) == obj2gco(t)) {
  ------------------
  |  |  775|  18.3k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  |  Branch (190:11): [True: 18.3k, False: 0]
  ------------------
  191|  18.3k|	weak = (int)(~0u & ~LJ_GC_WEAKVAL);
  ------------------
  |  |   22|  18.3k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  192|  18.3k|      } else
  193|      0|#endif
  194|      0|      {
  195|      0|	t->marked = (uint8_t)((t->marked & ~LJ_GC_WEAK) | weak);
  ------------------
  |  |   29|      0|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|      0|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  196|      0|	setgcrefr(t->gclist, g->gc.weak);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  197|      0|	setgcref(g->gc.weak, obj2gco(t));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  198|      0|      }
  199|  18.3k|    }
  200|  18.3k|  }
  201|   114k|  if (weak == LJ_GC_WEAK)  /* Nothing to mark if both keys/values are weak. */
  ------------------
  |  |   29|   114k|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|   114k|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|   114k|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  |  Branch (201:7): [True: 0, False: 114k]
  ------------------
  202|      0|    return 1;
  203|   114k|  if (!(weak & LJ_GC_WEAKVAL)) {  /* Mark array part. */
  ------------------
  |  |   22|   114k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (203:7): [True: 114k, False: 0]
  ------------------
  204|   114k|    MSize i, asize = t->asize;
  205|   114k|    for (i = 0; i < asize; i++)
  ------------------
  |  Branch (205:17): [True: 0, False: 114k]
  ------------------
  206|   114k|      gc_marktv(g, arrayslot(t, i));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  207|   114k|  }
  208|   114k|  if (t->hmask > 0) {  /* Mark hash part. */
  ------------------
  |  Branch (208:7): [True: 110k, False: 4.25k]
  ------------------
  209|   110k|    Node *node = noderef(t->node);
  ------------------
  |  |  515|   110k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   110k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  210|   110k|    MSize i, hmask = t->hmask;
  211|  1.79M|    for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (211:17): [True: 1.68M, False: 110k]
  ------------------
  212|  1.68M|      Node *n = &node[i];
  213|  1.68M|      if (!tvisnil(&n->val)) {  /* Mark non-empty slot. */
  ------------------
  |  |  782|  1.68M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (213:11): [True: 128k, False: 1.55M]
  ------------------
  214|   128k|	lj_assertG(!tvisnil(&n->key), "mark of nil key in non-empty slot");
  ------------------
  |  |  364|   128k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   128k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 128k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   128k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  215|   128k|	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   21|   128k|#define LJ_GC_WEAKKEY	0x08
  ------------------
              	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   46|   110k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|   110k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   201k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 18.3k, False: 91.6k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 91.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   110k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|   110k|	       "TValue and GC type mismatch"); \
  |  |   48|   110k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|   110k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   220k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|   110k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   110k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   110k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|   110k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   110k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   110k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 91.6k, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   183k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  91.6k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  91.6k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  91.6k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 73.3k, False: 18.3k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 91.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  73.3k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  73.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  73.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  73.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 73.3k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  73.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (215:6): [True: 110k, False: 18.3k]
  ------------------
  216|   128k|	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   22|   128k|#define LJ_GC_WEAKVAL	0x10
  ------------------
              	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   46|   128k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|   128k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   256k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 128k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 128k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   128k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|   128k|	       "TValue and GC type mismatch"); \
  |  |   48|   128k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|   128k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   256k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|   128k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   128k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   128k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|   128k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   128k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   128k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 128k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   256k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|   128k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|   128k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|   128k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 110k, False: 18.3k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 128k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|   110k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   110k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   110k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   110k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 110k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   110k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (216:6): [True: 128k, False: 0]
  ------------------
  217|   128k|      }
  218|  1.68M|    }
  219|   110k|  }
  220|   114k|  return weak;
  221|   114k|}
lj_gc.c:gc_traverse_func:
  225|  38.7k|{
  226|  38.7k|  gc_markobj(g, tabref(fn->c.env));
  ------------------
  |  |   52|  38.7k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  38.7k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  38.7k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  38.7k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  38.7k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 38.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  227|  38.7k|  if (isluafunc(fn)) {
  ------------------
  |  |  476|  38.7k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  38.7k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 38.7k]
  |  |  ------------------
  ------------------
  228|      0|    uint32_t i;
  229|      0|    lj_assertG(fn->l.nupvalues <= funcproto(fn)->sizeuv,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  230|      0|	       "function upvalues out of range");
  231|      0|    gc_markobj(g, funcproto(fn));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  232|      0|    for (i = 0; i < fn->l.nupvalues; i++)  /* Mark Lua function upvalues. */
  ------------------
  |  Branch (232:17): [True: 0, False: 0]
  ------------------
  233|      0|      gc_markobj(g, &gcref(fn->l.uvptr[i])->uv);
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  234|  38.7k|  } else {
  235|  38.7k|    uint32_t i;
  236|  38.7k|    for (i = 0; i < fn->c.nupvalues; i++)  /* Mark C function upvalues. */
  ------------------
  |  Branch (236:17): [True: 0, False: 38.7k]
  ------------------
  237|  38.7k|      gc_marktv(g, &fn->c.upvalue[i]);
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  238|  38.7k|  }
  239|  38.7k|}
lj_gc.c:gc_traverse_thread:
  309|  20.0k|{
  310|  20.0k|  TValue *o, *top = th->top;
  311|  63.3k|  for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  217|  20.0k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  20.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  569|  20.0k|#define LJ_FR2			1
  ------------------
  |  Branch (311:39): [True: 43.2k, False: 20.0k]
  ------------------
  312|  43.2k|    gc_marktv(g, o);
  ------------------
  |  |   46|  43.2k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  43.2k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  79.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 6.99k, False: 36.3k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 36.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  43.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  43.2k|	       "TValue and GC type mismatch"); \
  |  |   48|  43.2k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  43.2k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  86.5k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  43.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  43.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  43.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  43.2k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  43.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  43.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 36.3k, False: 6.99k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  72.6k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  36.3k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  36.3k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  36.3k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 10.9k, False: 25.3k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 36.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  10.9k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  10.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  10.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  10.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 10.9k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  10.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  313|  20.0k|  if (g->gc.state == GCSatomic) {
  ------------------
  |  Branch (313:7): [True: 10.0k, False: 10.0k]
  ------------------
  314|  10.0k|    top = tvref(th->stack) + th->stacksize;
  ------------------
  |  |  217|  10.0k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  10.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  315|   450k|    for (; o < top; o++)  /* Clear unmarked slots. */
  ------------------
  |  Branch (315:12): [True: 440k, False: 10.0k]
  ------------------
  316|   440k|      setnilV(o);
  ------------------
  |  |  872|   440k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  317|  10.0k|  }
  318|  20.0k|  gc_markobj(g, tabref(th->env));
  ------------------
  |  |   52|  20.0k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  20.0k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  20.0k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  20.0k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  20.0k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 20.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  319|  20.0k|  lj_state_shrinkstack(th, gc_traverse_frames(g, th));
  320|  20.0k|}
lj_gc.c:gc_traverse_frames:
  292|  20.0k|{
  293|  20.0k|  TValue *frame, *top = th->top-1, *bot = tvref(th->stack);
  ------------------
  |  |  217|  20.0k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  20.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  294|       |  /* Note: extra vararg frame not skipped, marks function twice (harmless). */
  295|  20.0k|  for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  569|  20.0k|#define LJ_FR2			1
  ------------------
                for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  110|      0|#define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |   77|      0|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (295:28): [True: 0, False: 20.0k]
  ------------------
  296|      0|    GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|      0|    TValue *ftop = frame;
  298|      0|    if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  299|      0|    if (ftop > top) top = ftop;
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|    if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
                  if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (300:9): [Folded - Ignored]
  ------------------
  301|      0|  }
  302|  20.0k|  top++;  /* Correct bias of -1 (frame == base-1). */
  303|  20.0k|  if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|  20.0k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  20.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (303:7): [True: 0, False: 20.0k]
  ------------------
  304|  20.0k|  return (MSize)(top - bot);  /* Return minimum needed stack size. */
  305|  20.0k|}
lj_gc.c:gc_traverse_trace:
  256|  7.21k|{
  257|  7.21k|  IRRef ref;
  258|  7.21k|  if (T->traceno == 0) return;
  ------------------
  |  Branch (258:7): [True: 7.21k, False: 0]
  ------------------
  259|      0|  for (ref = T->nk; ref < REF_TRUE; ref++) {
  ------------------
  |  Branch (259:21): [True: 0, False: 0]
  ------------------
  260|      0|    IRIns *ir = &T->ir[ref];
  261|      0|    if (ir->o == IR_KGC)
  ------------------
  |  Branch (261:9): [True: 0, False: 0]
  ------------------
  262|      0|      gc_markobj(g, ir_kgc(ir));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  263|      0|    if (irt_is64(ir->t) && ir->o != IR_KNULL)
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (263:28): [True: 0, False: 0]
  ------------------
  264|      0|      ref++;
  265|      0|  }
  266|      0|  if (T->link) gc_marktrace(g, T->link);
  ------------------
  |  Branch (266:7): [True: 0, False: 0]
  ------------------
  267|      0|  if (T->nextroot) gc_marktrace(g, T->nextroot);
  ------------------
  |  Branch (267:7): [True: 0, False: 0]
  ------------------
  268|      0|  if (T->nextside) gc_marktrace(g, T->nextside);
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|  gc_markobj(g, gcref(T->startpt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  270|      0|}
lj_gc.c:atomic:
  618|  7.21k|{
  619|  7.21k|  size_t udsize;
  620|       |
  621|  7.21k|  gc_mark_uv(g);  /* Need to remark open upvalues (the thread may be dead). */
  622|  7.21k|  gc_propagate_gray(g);  /* Propagate any left-overs. */
  623|       |
  624|  7.21k|  setgcrefr(g->gc.gray, g->gc.weak);  /* Empty the list of weak tables. */
  ------------------
  |  |   77|  7.21k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  625|  7.21k|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|  7.21k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  626|  7.21k|  lj_assertG(!iswhite(obj2gco(mainthread(g))), "main thread turned white");
  ------------------
  |  |  364|  7.21k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  7.21k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7.21k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.21k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  627|  7.21k|  gc_markobj(g, L);  /* Mark running thread. */
  ------------------
  |  |   52|  7.21k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  7.21k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  7.21k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  7.21k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  7.21k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 7.21k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  628|  7.21k|  gc_traverse_curtrace(g);  /* Traverse current trace. */
  ------------------
  |  |  273|  7.21k|#define gc_traverse_curtrace(g)	gc_traverse_trace(g, &G2J(g)->cur)
  |  |  ------------------
  |  |  |  |  116|  7.21k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  7.21k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  7.21k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  629|  7.21k|  gc_mark_gcroot(g);  /* Mark GC roots (again). */
  630|  7.21k|  gc_propagate_gray(g);  /* Propagate all of the above. */
  631|       |
  632|  7.21k|  setgcrefr(g->gc.gray, g->gc.grayagain);  /* Empty the 2nd chance list. */
  ------------------
  |  |   77|  7.21k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  633|  7.21k|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|  7.21k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  634|  7.21k|  gc_propagate_gray(g);  /* Propagate it. */
  635|       |
  636|  7.21k|  udsize = lj_gc_separateudata(g, 0);  /* Separate userdata to be finalized. */
  637|  7.21k|  gc_mark_mmudata(g);  /* Mark them. */
  638|  7.21k|  udsize += gc_propagate_gray(g);  /* And propagate the marks. */
  639|       |
  640|       |  /* All marking done, clear weak tables. */
  641|  7.21k|  gc_clearweak(g, gcref(g->gc.weak));
  ------------------
  |  |   67|  7.21k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  642|       |
  643|  7.21k|  lj_buf_shrink(L, &g->tmpbuf);  /* Shrink temp buffer. */
  644|       |
  645|       |  /* Prepare for sweep phase. */
  646|  7.21k|  g->gc.currentwhite = (uint8_t)otherwhite(g);  /* Flip current white. */
  ------------------
  |  |   36|  7.21k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  7.21k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  7.21k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  7.21k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  647|  7.21k|  g->strempty.marked = g->gc.currentwhite;
  648|  7.21k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|  7.21k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  649|  7.21k|  g->gc.estimate = g->gc.total - (GCSize)udsize;  /* Initial estimate. */
  650|  7.21k|}
lj_gc.c:gc_mark_uv:
  116|  7.21k|{
  117|  7.21k|  GCupval *uv;
  118|  7.21k|  for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|  7.21k|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|  7.21k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|      0|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (118:33): [True: 0, False: 7.21k]
  ------------------
  119|      0|    lj_assertG(uvprev(uvnext(uv)) == uv && uvnext(uvprev(uv)) == uv,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  120|      0|	       "broken upvalue chain");
  121|      0|    if (isgray(obj2gco(uv)))
  ------------------
  |  |   34|      0|#define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  |  |               #define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (34:19): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  122|      0|      gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  123|      0|  }
  124|  7.21k|}
lj_gc.c:gc_propagate_gray:
  367|  28.8k|{
  368|  28.8k|  size_t m = 0;
  369|  38.9k|  while (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|  38.9k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (369:10): [True: 10.0k, False: 28.8k]
  ------------------
  370|  10.0k|    m += propagatemark(g);
  371|  28.8k|  return m;
  372|  28.8k|}
lj_gc.c:gc_mark_mmudata:
  128|  7.21k|{
  129|  7.21k|  GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|  7.21k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  130|  7.21k|  GCobj *u = root;
  131|  7.21k|  if (u) {
  ------------------
  |  Branch (131:7): [True: 0, False: 7.21k]
  ------------------
  132|      0|    do {
  133|      0|      u = gcnext(u);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  134|      0|      makewhite(g, u);  /* Could be from previous GC. */
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  135|      0|      gc_mark(g, u);
  136|      0|    } while (u != root);
  ------------------
  |  Branch (136:14): [True: 0, False: 0]
  ------------------
  137|      0|  }
  138|  7.21k|}
lj_gc.c:gc_clearweak:
  473|  7.21k|{
  474|  7.21k|  UNUSED(g);
  ------------------
  |  |   91|  7.21k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  475|  7.21k|  while (o) {
  ------------------
  |  Branch (475:10): [True: 0, False: 7.21k]
  ------------------
  476|      0|    GCtab *t = gco2tab(o);
  ------------------
  |  |  771|      0|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  477|      0|    lj_assertG((t->marked & LJ_GC_WEAK), "clear of non-weak table");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  478|      0|    if ((t->marked & LJ_GC_WEAKVAL)) {
  ------------------
  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (478:9): [True: 0, False: 0]
  ------------------
  479|      0|      MSize i, asize = t->asize;
  480|      0|      for (i = 0; i < asize; i++) {
  ------------------
  |  Branch (480:19): [True: 0, False: 0]
  ------------------
  481|       |	/* Clear array slot when value is about to be collected. */
  482|      0|	TValue *tv = arrayslot(t, i);
  ------------------
  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  483|      0|	if (gc_mayclear(tv, 1))
  ------------------
  |  Branch (483:6): [True: 0, False: 0]
  ------------------
  484|      0|	  setnilV(tv);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  485|      0|      }
  486|      0|    }
  487|      0|    if (t->hmask > 0) {
  ------------------
  |  Branch (487:9): [True: 0, False: 0]
  ------------------
  488|      0|      Node *node = noderef(t->node);
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  489|      0|      MSize i, hmask = t->hmask;
  490|      0|      for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (490:19): [True: 0, False: 0]
  ------------------
  491|      0|	Node *n = &node[i];
  492|       |	/* Clear hash slot when key or value is about to be collected. */
  493|      0|	if (!tvisnil(&n->val) && (gc_mayclear(&n->key, 0) ||
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (493:6): [True: 0, False: 0]
  |  Branch (493:28): [True: 0, False: 0]
  ------------------
  494|      0|				  gc_mayclear(&n->val, 1)))
  ------------------
  |  Branch (494:7): [True: 0, False: 0]
  ------------------
  495|      0|	  setnilV(&n->val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  496|      0|      }
  497|      0|    }
  498|      0|    o = gcref(t->gclist);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  499|      0|  }
  500|  7.21k|}
lj_gc.c:gc_mark:
   59|   670k|{
   60|   670k|  int gct = o->gch.gct;
   61|   670k|  lj_assertG(iswhite(o), "mark of non-white object");
  ------------------
  |  |  364|   670k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   670k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 670k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   670k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   62|   670k|  lj_assertG(!isdead(g, o), "mark of dead object");
  ------------------
  |  |  364|   670k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   670k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 670k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   670k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|   670k|  white2gray(o);
  ------------------
  |  |   38|   670k|#define white2gray(x)		((x)->gch.marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   670k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   670k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   670k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|   670k|  if (LJ_UNLIKELY(gct == ~LJ_TUDATA)) {
  ------------------
  |  |  146|   670k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 670k]
  |  |  ------------------
  ------------------
   65|      0|    GCtab *mt = tabref(gco2ud(o)->metatable);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   66|      0|    gray2black(o);  /* Userdata are never gray. */
  ------------------
  |  |   39|      0|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   67|      0|    if (mt) gc_markobj(g, mt);
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|    gc_markobj(g, tabref(gco2ud(o)->env));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   69|      0|    if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  ------------------
  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  772|      0|#define gco2ud(o)	check_exp((o)->gch.gct == ~LJ_TUDATA, &(o)->ud)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (69:25): [True: 0, False: 0]
  ------------------
   70|      0|      SBufExt *sbx = (SBufExt *)uddata(gco2ud(o));
  ------------------
  |  |  342|      0|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   71|      0|      if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   72|      0|	gc_markobj(g, gcref(sbx->cowref));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   73|      0|      if (gcref(sbx->dict_str))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   74|      0|	gc_markobj(g, gcref(sbx->dict_str));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   75|      0|      if (gcref(sbx->dict_mt))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   76|      0|	gc_markobj(g, gcref(sbx->dict_mt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   77|      0|    }
   78|   670k|  } else if (LJ_UNLIKELY(gct == ~LJ_TUPVAL)) {
  ------------------
  |  |  146|   670k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 670k]
  |  |  ------------------
  ------------------
   79|      0|    GCupval *uv = gco2uv(o);
  ------------------
  |  |  766|      0|#define gco2uv(o)	check_exp((o)->gch.gct == ~LJ_TUPVAL, &(o)->uv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   81|      0|    if (uv->closed)
  ------------------
  |  Branch (81:9): [True: 0, False: 0]
  ------------------
   82|      0|      gray2black(o);  /* Closed upvalues are never gray. */
  ------------------
  |  |   39|      0|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   83|   670k|  } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  264|  1.34M|#define LJ_TSTR			(~4u)
  ------------------
                } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  270|   174k|#define LJ_TCDATA		(~10u)
  ------------------
  |  Branch (83:14): [True: 174k, False: 496k]
  |  Branch (83:33): [True: 174k, False: 0]
  ------------------
   84|   174k|    lj_assertG(gct == ~LJ_TFUNC || gct == ~LJ_TTAB ||
  ------------------
  |  |  364|   174k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   853k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 38.7k, False: 135k]
  |  |  |  |  |  Branch (355:5): [True: 114k, False: 21.1k]
  |  |  |  |  |  Branch (355:5): [True: 21.1k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   174k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|   174k|	       gct == ~LJ_TTHREAD || gct == ~LJ_TPROTO || gct == ~LJ_TTRACE,
   86|   174k|	       "bad GC type %d", gct);
   87|   174k|    setgcrefr(o->gch.gclist, g->gc.gray);
  ------------------
  |  |   77|   174k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   88|   174k|    setgcref(g->gc.gray, o);
  ------------------
  |  |   72|   174k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   89|   174k|  }
   90|   670k|}

lj_str.c:lj_mem_free:
  120|  1.90M|{
  121|  1.90M|  g->gc.total -= (GCSize)osize;
  122|  1.90M|  g->allocf(g->allocd, p, osize, 0);
  123|  1.90M|}
lj_func.c:lj_mem_free:
  120|  87.6k|{
  121|  87.6k|  g->gc.total -= (GCSize)osize;
  122|  87.6k|  g->allocf(g->allocd, p, osize, 0);
  123|  87.6k|}
lj_state.c:lj_mem_free:
  120|   130k|{
  121|   130k|  g->gc.total -= (GCSize)osize;
  122|   130k|  g->allocf(g->allocd, p, osize, 0);
  123|   130k|}
lj_lex.c:lj_mem_free:
  120|    564|{
  121|    564|  g->gc.total -= (GCSize)osize;
  122|    564|  g->allocf(g->allocd, p, osize, 0);
  123|    564|}
lj_trace.c:lj_mem_free:
  120|   146k|{
  121|   146k|  g->gc.total -= (GCSize)osize;
  122|   146k|  g->allocf(g->allocd, p, osize, 0);
  123|   146k|}
lj_tab.c:lj_mem_free:
  120|   453k|{
  121|   453k|  g->gc.total -= (GCSize)osize;
  122|   453k|  g->allocf(g->allocd, p, osize, 0);
  123|   453k|}
lj_tab.c:lj_gc_barrierback:
   82|     59|{
   83|     59|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|     59|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|     59|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|     59|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    118|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 59, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 59, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     59|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|     59|	     "bad object states for backward barrier");
   86|     59|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|     59|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    118|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 59, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 59, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     59|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|     59|	     "bad GC state");
   88|     59|  black2gray(o);
  ------------------
  |  |   44|     59|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|     59|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|     59|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|     59|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|     59|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|     59|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|     59|}
lj_udata.c:lj_mem_free:
  120|    347|{
  121|    347|  g->gc.total -= (GCSize)osize;
  122|    347|  g->allocf(g->allocd, p, osize, 0);
  123|    347|}
lj_meta.c:lj_gc_barrierback:
   82|    330|{
   83|    330|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|    330|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|    330|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|    330|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    660|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 330, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 330, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    330|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|    330|	     "bad object states for backward barrier");
   86|    330|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|    330|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    660|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 330, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 330, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    330|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|    330|	     "bad GC state");
   88|    330|  black2gray(o);
  ------------------
  |  |   44|    330|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|    330|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|    330|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|    330|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|    330|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|    330|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|    330|}

lj_lex_setup:
  399|    188|{
  400|    188|  int header = 0;
  401|    188|  ls->L = L;
  402|    188|  ls->fs = NULL;
  403|    188|  ls->pe = ls->p = NULL;
  404|    188|  ls->vstack = NULL;
  405|    188|  ls->sizevstack = 0;
  406|    188|  ls->vtop = 0;
  407|    188|  ls->bcstack = NULL;
  408|    188|  ls->sizebcstack = 0;
  409|    188|  ls->tok = 0;
  410|    188|  ls->lookahead = TK_eof;  /* No look-ahead token. */
  411|    188|  ls->linenumber = 1;
  412|    188|  ls->lastline = 1;
  413|    188|  ls->endmark = 0;
  414|    188|  ls->fr2 = LJ_FR2;  /* Generate native bytecode by default. */
  ------------------
  |  |  569|    188|#define LJ_FR2			1
  ------------------
  415|    188|  lex_next(ls);  /* Read-ahead first char. */
  416|    188|  if (ls->c == 0xef && ls->p + 2 <= ls->pe && (uint8_t)ls->p[0] == 0xbb &&
  ------------------
  |  Branch (416:7): [True: 0, False: 188]
  |  Branch (416:24): [True: 0, False: 0]
  |  Branch (416:47): [True: 0, False: 0]
  ------------------
  417|    188|      (uint8_t)ls->p[1] == 0xbf) {  /* Skip UTF-8 BOM (if buffered). */
  ------------------
  |  Branch (417:7): [True: 0, False: 0]
  ------------------
  418|      0|    ls->p += 2;
  419|      0|    lex_next(ls);
  420|      0|    header = 1;
  421|      0|  }
  422|    188|  if (ls->c == '#') {  /* Skip POSIX #! header line. */
  ------------------
  |  Branch (422:7): [True: 0, False: 188]
  ------------------
  423|      0|    do {
  424|      0|      lex_next(ls);
  425|      0|      if (ls->c == LEX_EOF) return 0;
  ------------------
  |  |   42|      0|#define LEX_EOF			(-1)
  ------------------
  |  Branch (425:11): [True: 0, False: 0]
  ------------------
  426|      0|    } while (!lex_iseol(ls));
  ------------------
  |  |   43|      0|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 0, False: 0]
  |  |  |  Branch (43:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  427|      0|    lex_newline(ls);
  428|      0|    header = 1;
  429|      0|  }
  430|    188|  if (ls->c == LUA_SIGNATURE[0]) {  /* Bytecode dump. */
  ------------------
  |  |   27|    188|#define	LUA_SIGNATURE	"\033Lua"
  ------------------
  |  Branch (430:7): [True: 0, False: 188]
  ------------------
  431|      0|    if (header) {
  ------------------
  |  Branch (431:9): [True: 0, False: 0]
  ------------------
  432|       |      /*
  433|       |      ** Loading bytecode with an extra header is disabled for security
  434|       |      ** reasons. This may circumvent the usual check for bytecode vs.
  435|       |      ** Lua code by looking at the first char. Since this is a potential
  436|       |      ** security violation no attempt is made to echo the chunkname either.
  437|       |      */
  438|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_BCBAD));
  439|      0|      lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|      0|#define LUA_ERRSYNTAX	3
  ------------------
  440|      0|    }
  441|      0|    return 1;
  442|      0|  }
  443|    188|  return 0;
  444|    188|}
lj_lex_cleanup:
  448|    188|{
  449|    188|  global_State *g = G(L);
  ------------------
  |  |  705|    188|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    188|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  450|    188|  lj_mem_freevec(g, ls->bcstack, ls->sizebcstack, BCInsLine);
  ------------------
  |  |  130|    188|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  451|    188|  lj_mem_freevec(g, ls->vstack, ls->sizevstack, VarInfo);
  ------------------
  |  |  130|    188|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  452|    188|  lj_buf_free(g, &ls->sb);
  453|    188|}
lj_lex_next:
  457|  1.12k|{
  458|  1.12k|  ls->lastline = ls->linenumber;
  459|  1.12k|  if (LJ_LIKELY(ls->lookahead == TK_eof)) {  /* No lookahead token? */
  ------------------
  |  |  145|  1.12k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1.12k, False: 0]
  |  |  ------------------
  ------------------
  460|  1.12k|    ls->tok = lex_scan(ls, &ls->tokval);  /* Get next token. */
  461|  1.12k|  } else {  /* Otherwise return lookahead token. */
  462|      0|    ls->tok = ls->lookahead;
  463|      0|    ls->lookahead = TK_eof;
  464|      0|    ls->tokval = ls->lookaheadval;
  465|      0|  }
  466|  1.12k|}
lj_lex_init:
  507|  36.7k|{
  508|  36.7k|  uint32_t i;
  509|   844k|  for (i = 0; i < TK_RESERVED; i++) {
  ------------------
  |  Branch (509:15): [True: 807k, False: 36.7k]
  ------------------
  510|   807k|    GCstr *s = lj_str_newz(L, tokennames[i]);
  ------------------
  |  |   27|   807k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  511|   807k|    fixstring(s);  /* Reserved words are never collected. */
  ------------------
  |  |   45|   807k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|   807k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  512|   807k|    s->reserved = (uint8_t)(i+1);
  513|   807k|  }
  514|  36.7k|}
lj_lex.c:lex_next:
   64|  1.88k|{
   65|  1.88k|  return (ls->c = ls->p < ls->pe ? (LexChar)(uint8_t)*ls->p++ : lex_more(ls));
  ------------------
  |  Branch (65:19): [True: 1.50k, False: 376]
  ------------------
   66|  1.88k|}
lj_lex.c:lex_more:
   47|    376|{
   48|    376|  size_t sz;
   49|    376|  const char *p = ls->rfunc(ls->L, ls->rdata, &sz);
   50|    376|  if (p == NULL || sz == 0) return LEX_EOF;
  ------------------
  |  |   42|    188|#define LEX_EOF			(-1)
  ------------------
  |  Branch (50:7): [True: 188, False: 188]
  |  Branch (50:20): [True: 0, False: 188]
  ------------------
   51|    188|  if (sz >= LJ_MAX_BUF) {
  ------------------
  |  |   55|    188|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|    188|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 0, False: 188]
  ------------------
   52|      0|    if (sz != ~(size_t)0) lj_err_mem(ls->L);
  ------------------
  |  Branch (52:9): [True: 0, False: 0]
  ------------------
   53|      0|    sz = ~(uintptr_t)0 - (uintptr_t)p;
   54|      0|    if (sz >= LJ_MAX_BUF) sz = LJ_MAX_BUF-1;
  ------------------
  |  |   55|      0|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
                  if (sz >= LJ_MAX_BUF) sz = LJ_MAX_BUF-1;
  ------------------
  |  |   55|      0|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (54:9): [True: 0, False: 0]
  ------------------
   55|      0|    ls->endmark = 1;
   56|      0|  }
   57|    188|  ls->pe = p + sz;
   58|    188|  ls->p = p + 1;
   59|    188|  return (LexChar)(uint8_t)p[0];
   60|    188|}
lj_lex.c:lex_scan:
  292|  1.12k|{
  293|  1.12k|  lj_buf_reset(&ls->sb);
  294|  1.88k|  for (;;) {
  295|  1.88k|    if (lj_char_isident(ls->c)) {
  ------------------
  |  |   32|  1.88k|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|  1.88k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 564, False: 1.31k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  296|    564|      GCstr *s;
  297|    564|      if (lj_char_isdigit(ls->c)) {  /* Numeric literal. */
  ------------------
  |  |   28|    564|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    564|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 188, False: 376]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  298|    188|	lex_number(ls, tv);
  299|    188|	return TK_number;
  300|    188|      }
  301|       |      /* Identifier or reserved word. */
  302|    376|      do {
  303|    376|	lex_savenext(ls);
  304|    376|      } while (lj_char_isident(ls->c));
  ------------------
  |  |   32|    376|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|    376|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 0, False: 376]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|    376|      s = lj_parse_keepstr(ls, ls->sb.b, sbuflen(&ls->sb));
  ------------------
  |  |   36|    376|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  306|    376|      setstrV(ls->L, tv, s);
  307|    376|      if (s->reserved > 0)  /* Reserved word? */
  ------------------
  |  Branch (307:11): [True: 0, False: 376]
  ------------------
  308|      0|	return TK_OFS + s->reserved;
  309|    376|      return TK_name;
  310|    376|    }
  311|  1.31k|    switch (ls->c) {
  312|      0|    case '\n':
  ------------------
  |  Branch (312:5): [True: 0, False: 1.31k]
  ------------------
  313|      0|    case '\r':
  ------------------
  |  Branch (313:5): [True: 0, False: 1.31k]
  ------------------
  314|      0|      lex_newline(ls);
  315|      0|      continue;
  316|    752|    case ' ':
  ------------------
  |  Branch (316:5): [True: 752, False: 564]
  ------------------
  317|    752|    case '\t':
  ------------------
  |  Branch (317:5): [True: 0, False: 1.31k]
  ------------------
  318|    752|    case '\v':
  ------------------
  |  Branch (318:5): [True: 0, False: 1.31k]
  ------------------
  319|    752|    case '\f':
  ------------------
  |  Branch (319:5): [True: 0, False: 1.31k]
  ------------------
  320|    752|      lex_next(ls);
  321|    752|      continue;
  322|      0|    case '-':
  ------------------
  |  Branch (322:5): [True: 0, False: 1.31k]
  ------------------
  323|      0|      lex_next(ls);
  324|      0|      if (ls->c != '-') return '-';
  ------------------
  |  Branch (324:11): [True: 0, False: 0]
  ------------------
  325|      0|      lex_next(ls);
  326|      0|      if (ls->c == '[') {  /* Long comment "--[=*[...]=*]". */
  ------------------
  |  Branch (326:11): [True: 0, False: 0]
  ------------------
  327|      0|	int sep = lex_skipeq(ls);
  328|      0|	lj_buf_reset(&ls->sb);  /* `lex_skipeq' may dirty the buffer */
  329|      0|	if (sep >= 0) {
  ------------------
  |  Branch (329:6): [True: 0, False: 0]
  ------------------
  330|      0|	  lex_longstring(ls, NULL, sep);
  331|      0|	  lj_buf_reset(&ls->sb);
  332|      0|	  continue;
  333|      0|	}
  334|      0|      }
  335|       |      /* Short comment "--.*\n". */
  336|      0|      while (!lex_iseol(ls) && ls->c != LEX_EOF)
  ------------------
  |  |   43|      0|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 0, False: 0]
  |  |  |  Branch (43:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    while (!lex_iseol(ls) && ls->c != LEX_EOF)
  ------------------
  |  |   42|      0|#define LEX_EOF			(-1)
  ------------------
  |  Branch (336:32): [True: 0, False: 0]
  ------------------
  337|      0|	lex_next(ls);
  338|      0|      continue;
  339|      0|    case '[': {
  ------------------
  |  Branch (339:5): [True: 0, False: 1.31k]
  ------------------
  340|      0|      int sep = lex_skipeq(ls);
  341|      0|      if (sep >= 0) {
  ------------------
  |  Branch (341:11): [True: 0, False: 0]
  ------------------
  342|      0|	lex_longstring(ls, tv, sep);
  343|      0|	return TK_string;
  344|      0|      } else if (sep == -1) {
  ------------------
  |  Branch (344:18): [True: 0, False: 0]
  ------------------
  345|      0|	return '[';
  346|      0|      } else {
  347|      0|	lj_lex_error(ls, TK_string, LJ_ERR_XLDELIM);
  348|      0|	continue;
  349|      0|      }
  350|      0|      }
  351|    188|    case '=':
  ------------------
  |  Branch (351:5): [True: 188, False: 1.12k]
  ------------------
  352|    188|      lex_next(ls);
  353|    188|      if (ls->c != '=') return '='; else { lex_next(ls); return TK_eq; }
  ------------------
  |  Branch (353:11): [True: 188, False: 0]
  ------------------
  354|      0|    case '<':
  ------------------
  |  Branch (354:5): [True: 0, False: 1.31k]
  ------------------
  355|      0|      lex_next(ls);
  356|      0|      if (ls->c != '=') return '<'; else { lex_next(ls); return TK_le; }
  ------------------
  |  Branch (356:11): [True: 0, False: 0]
  ------------------
  357|      0|    case '>':
  ------------------
  |  Branch (357:5): [True: 0, False: 1.31k]
  ------------------
  358|      0|      lex_next(ls);
  359|      0|      if (ls->c != '=') return '>'; else { lex_next(ls); return TK_ge; }
  ------------------
  |  Branch (359:11): [True: 0, False: 0]
  ------------------
  360|      0|    case '~':
  ------------------
  |  Branch (360:5): [True: 0, False: 1.31k]
  ------------------
  361|      0|      lex_next(ls);
  362|      0|      if (ls->c != '=') return '~'; else { lex_next(ls); return TK_ne; }
  ------------------
  |  Branch (362:11): [True: 0, False: 0]
  ------------------
  363|      0|    case ':':
  ------------------
  |  Branch (363:5): [True: 0, False: 1.31k]
  ------------------
  364|      0|      lex_next(ls);
  365|      0|      if (ls->c != ':') return ':'; else { lex_next(ls); return TK_label; }
  ------------------
  |  Branch (365:11): [True: 0, False: 0]
  ------------------
  366|      0|    case '"':
  ------------------
  |  Branch (366:5): [True: 0, False: 1.31k]
  ------------------
  367|      0|    case '\'':
  ------------------
  |  Branch (367:5): [True: 0, False: 1.31k]
  ------------------
  368|      0|      lex_string(ls, tv);
  369|      0|      return TK_string;
  370|      0|    case '.':
  ------------------
  |  Branch (370:5): [True: 0, False: 1.31k]
  ------------------
  371|      0|      if (lex_savenext(ls) == '.') {
  ------------------
  |  Branch (371:11): [True: 0, False: 0]
  ------------------
  372|      0|	lex_next(ls);
  373|      0|	if (ls->c == '.') {
  ------------------
  |  Branch (373:6): [True: 0, False: 0]
  ------------------
  374|      0|	  lex_next(ls);
  375|      0|	  return TK_dots;   /* ... */
  376|      0|	}
  377|      0|	return TK_concat;   /* .. */
  378|      0|      } else if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|      0|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|      0|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (378:18): [True: 0, False: 0]
  ------------------
  379|      0|	return '.';
  380|      0|      } else {
  381|      0|	lex_number(ls, tv);
  382|      0|	return TK_number;
  383|      0|      }
  384|    188|    case LEX_EOF:
  ------------------
  |  |   42|    188|#define LEX_EOF			(-1)
  ------------------
  |  Branch (384:5): [True: 188, False: 1.12k]
  ------------------
  385|    188|      return TK_eof;
  386|    188|    default: {
  ------------------
  |  Branch (386:5): [True: 188, False: 1.12k]
  ------------------
  387|    188|      LexChar c = ls->c;
  388|    188|      lex_next(ls);
  389|    188|      return c;  /* Single-char tokens (+ - / ...). */
  390|      0|    }
  391|  1.31k|    }
  392|  1.31k|  }
  393|  1.12k|}
lj_lex.c:lex_number:
   96|    188|{
   97|    188|  StrScanFmt fmt;
   98|    188|  LexChar c, xp = 'e';
   99|    188|  lj_assertLS(lj_char_isdigit(ls->c), "bad usage");
  ------------------
  |  |   89|    188|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    188|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    188|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 188, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  100|    188|  if ((c = ls->c) == '0' && (lex_savenext(ls) | 0x20) == 'x')
  ------------------
  |  Branch (100:7): [True: 0, False: 188]
  |  Branch (100:29): [True: 0, False: 0]
  ------------------
  101|      0|    xp = 'p';
  102|    376|  while (lj_char_isident(ls->c) || ls->c == '.' ||
  ------------------
  |  |   32|    376|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|    752|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 188, False: 188]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (102:36): [True: 0, False: 188]
  ------------------
  103|    376|	 ((ls->c == '-' || ls->c == '+') && (c | 0x20) == xp)) {
  ------------------
  |  Branch (103:5): [True: 0, False: 188]
  |  Branch (103:21): [True: 0, False: 188]
  |  Branch (103:38): [True: 0, False: 0]
  ------------------
  104|    188|    c = ls->c;
  105|    188|    lex_savenext(ls);
  106|    188|  }
  107|    188|  lex_save(ls, '\0');
  108|    188|  fmt = lj_strscan_scan((const uint8_t *)ls->sb.b, sbuflen(&ls->sb)-1, tv,
  ------------------
  |  |   36|    188|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  109|    188|	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |  549|    188|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |   12|      0|#define STRSCAN_OPT_TOINT	0x01  /* Convert to int32_t, if possible. */
  ------------------
              	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |   13|    188|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  110|    188|	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |  585|    188|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |   15|    188|#define STRSCAN_OPT_LL		0x08
  ------------------
              	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |   14|    188|#define STRSCAN_OPT_IMAG	0x04
  ------------------
  111|    188|  if (LJ_DUALNUM && fmt == STRSCAN_INT) {
  ------------------
  |  |  549|    376|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (111:21): [True: 0, False: 0]
  ------------------
  112|      0|    setitype(tv, LJ_TISNUM);
  ------------------
  |  |  871|      0|#define setitype(o, i)		((o)->it = ((i) << 15))
  ------------------
  113|    188|  } else if (fmt == STRSCAN_NUM) {
  ------------------
  |  Branch (113:14): [True: 188, False: 0]
  ------------------
  114|       |    /* Already in correct format. */
  115|    188|#if LJ_HASFFI
  116|    188|  } else if (fmt != STRSCAN_ERROR) {
  ------------------
  |  Branch (116:14): [True: 0, False: 0]
  ------------------
  117|      0|    lua_State *L = ls->L;
  118|      0|    GCcdata *cd;
  119|      0|    lj_assertLS(fmt == STRSCAN_I64 || fmt == STRSCAN_U64 || fmt == STRSCAN_IMAG,
  ------------------
  |  |   89|      0|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  120|      0|		"unexpected number format %d", fmt);
  121|      0|    ctype_loadffi(L);
  ------------------
  |  |  398|      0|  do { \
  |  |  399|      0|    if (!ctype_ctsG(G(L))) { \
  |  |  ------------------
  |  |  |  |  386|      0|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (399:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  400|      0|      ptrdiff_t oldtop = (char *)L->top - mref(L->stack, char); \
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  401|      0|      luaopen_ffi(L); \
  |  |  402|      0|      L->top = (TValue *)(mref(L->stack, char) + oldtop); \
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  403|      0|    } \
  |  |  404|      0|  } while (0)
  |  |  ------------------
  |  |  |  Branch (404:12): [Folded - Ignored]
  |  |  ------------------
  ------------------
  122|      0|    if (fmt == STRSCAN_IMAG) {
  ------------------
  |  Branch (122:9): [True: 0, False: 0]
  ------------------
  123|      0|      cd = lj_cdata_new_(L, CTID_COMPLEX_DOUBLE, 2*sizeof(double));
  124|      0|      ((double *)cdataptr(cd))[0] = 0;
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  125|      0|      ((double *)cdataptr(cd))[1] = numV(tv);
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
                    ((double *)cdataptr(cd))[1] = numV(tv);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  126|      0|    } else {
  127|      0|      cd = lj_cdata_new_(L, fmt==STRSCAN_I64 ? CTID_INT64 : CTID_UINT64, 8);
  ------------------
  |  Branch (127:29): [True: 0, False: 0]
  ------------------
  128|      0|      *(uint64_t *)cdataptr(cd) = tv->u64;
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  129|      0|    }
  130|      0|    lj_parse_keepcdata(ls, tv, cd);
  131|      0|#endif
  132|      0|  } else {
  133|      0|    lj_assertLS(fmt == STRSCAN_ERROR,
  ------------------
  |  |   89|      0|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  134|      0|		"unexpected number format %d", fmt);
  135|      0|    lj_lex_error(ls, TK_number, LJ_ERR_XNUMBER);
  136|      0|  }
  137|    188|}
lj_lex.c:lex_savenext:
   76|    564|{
   77|    564|  lex_save(ls, ls->c);
   78|    564|  return lex_next(ls);
   79|    564|}
lj_lex.c:lex_save:
   70|    752|{
   71|    752|  lj_buf_putb(&ls->sb, c);
   72|    752|}

lua_loadx:
   64|    188|{
   65|    188|  LexState ls;
   66|    188|  int status;
   67|    188|  ls.rfunc = reader;
   68|    188|  ls.rdata = data;
   69|    188|  ls.chunkarg = chunkname ? chunkname : "?";
  ------------------
  |  Branch (69:17): [True: 188, False: 0]
  ------------------
   70|    188|  ls.mode = mode;
   71|    188|  lj_buf_init(L, &ls.sb);
   72|    188|  status = lj_vm_cpcall(L, NULL, &ls, cpparser);
   73|    188|  lj_lex_cleanup(L, &ls);
   74|    188|  lj_gc_check(L);
  ------------------
  |  |   66|    188|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|    188|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 188]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|    188|      lj_gc_step(L); }
  ------------------
   75|    188|  return status;
   76|    188|}
luaL_loadbufferx:
  154|    188|{
  155|    188|  StringReaderCtx ctx;
  156|    188|  ctx.str = buf;
  157|    188|  ctx.size = size;
  158|    188|  return lua_loadx(L, reader_string, &ctx, name, mode);
  159|    188|}
luaL_loadbuffer:
  163|    188|{
  164|    188|  return luaL_loadbufferx(L, buf, size, name, NULL);
  165|    188|}
luaL_loadstring:
  168|    188|{
  169|    188|  return luaL_loadbuffer(L, s, strlen(s), s);
  170|    188|}
lj_load.c:cpparser:
   29|    188|{
   30|    188|  LexState *ls = (LexState *)ud;
   31|    188|  GCproto *pt;
   32|    188|  GCfunc *fn;
   33|    188|  int bc;
   34|    188|  UNUSED(dummy);
  ------------------
  |  |   91|    188|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
   35|    188|  cframe_errfunc(L->cframe) = -1;  /* Inherit error function. */
  ------------------
  |  |  279|    188|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|    188|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
   36|    188|  bc = lj_lex_setup(L, ls);
   37|    188|  if (ls->mode) {
  ------------------
  |  Branch (37:7): [True: 0, False: 188]
  ------------------
   38|      0|    int xmode = 1;
   39|      0|    const char *mode = ls->mode;
   40|      0|    char c;
   41|      0|    while ((c = *mode++)) {
  ------------------
  |  Branch (41:12): [True: 0, False: 0]
  ------------------
   42|      0|      if (c == (bc ? 'b' : 't')) xmode = 0;
  ------------------
  |  Branch (42:11): [True: 0, False: 0]
  |  Branch (42:17): [True: 0, False: 0]
  ------------------
   43|      0|      if (c == (LJ_FR2 ? 'W' : 'X')) ls->fr2 = !LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (c == (LJ_FR2 ? 'W' : 'X')) ls->fr2 = !LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  |  Branch (43:11): [True: 0, False: 0]
  ------------------
   44|      0|    }
   45|      0|    if (xmode) {
  ------------------
  |  Branch (45:9): [True: 0, False: 0]
  ------------------
   46|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_XMODE));
   47|      0|      lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|      0|#define LUA_ERRSYNTAX	3
  ------------------
   48|      0|    }
   49|      0|  }
   50|    188|  pt = bc ? lj_bcread(ls) : lj_parse(ls);
  ------------------
  |  Branch (50:8): [True: 0, False: 188]
  ------------------
   51|    188|  if (ls->fr2 == LJ_FR2) {
  ------------------
  |  |  569|    188|#define LJ_FR2			1
  ------------------
  |  Branch (51:7): [True: 188, False: 0]
  ------------------
   52|    188|    fn = lj_func_newL_empty(L, pt, tabref(L->env));
  ------------------
  |  |  514|    188|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|    188|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   53|       |    /* Don't combine above/below into one statement. */
   54|    188|    setfuncV(L, L->top++, fn);
   55|    188|  } else {
   56|       |    /* Non-native generation returns a dumpable, but non-runnable prototype. */
   57|      0|    setprotoV(L, L->top++, pt);
   58|      0|  }
   59|    188|  return NULL;
   60|    188|}
lj_load.c:reader_string:
  143|    376|{
  144|    376|  StringReaderCtx *ctx = (StringReaderCtx *)ud;
  145|    376|  UNUSED(L);
  ------------------
  |  |   91|    376|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  146|    376|  if (ctx->size == 0) return NULL;
  ------------------
  |  Branch (146:7): [True: 188, False: 188]
  ------------------
  147|    188|  *size = ctx->size;
  148|    188|  ctx->size = 0;
  149|    188|  return ctx->str;
  150|    376|}

lj_mcode_free:
  306|  71.0k|{
  307|  71.0k|  MCode *mc = J->mcarea;
  308|  71.0k|  J->mcarea = NULL;
  309|  71.0k|  J->szallmcarea = 0;
  310|  71.0k|  while (mc) {
  ------------------
  |  Branch (310:10): [True: 0, False: 71.0k]
  ------------------
  311|      0|    MCode *next = ((MCLink *)mc)->next;
  312|      0|    size_t sz = ((MCLink *)mc)->size;
  313|      0|    lj_err_deregister_mcode(mc, sz, (uint8_t *)mc + sizeof(MCLink));
  314|      0|    mcode_free(J, mc, sz);
  315|      0|    mc = next;
  316|      0|  }
  317|  71.0k|}

lj_meta_init:
   30|  36.7k|{
   31|  36.7k|#define MMNAME(name)	"__" #name
   32|  36.7k|  const char *metanames = MMDEF(MMNAME);
  ------------------
  |  |  557|  36.7k|  _(index) _(newindex) _(gc) _(mode) _(eq) _(len) \
  |  |  ------------------
  |  |  |  |   32|  36.7k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|  36.7k|#define MMNAME(name)	"__" #name
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  558|  36.7k|  /* Only the above (fast) metamethods are negative cached (max. 8). */ \
  |  |  559|  36.7k|  _(lt) _(le) _(concat) _(call) \
  |  |  560|  36.7k|  /* The following must be in ORDER ARITH. */ \
  |  |  561|  36.7k|  _(add) _(sub) _(mul) _(div) _(mod) _(pow) _(unm) \
  |  |  562|  36.7k|  /* The following are used in the standard libraries. */ \
  |  |  563|  36.7k|  _(metatable) _(tostring) MMDEF_FFI(_) MMDEF_PAIRS(_)
  |  |  ------------------
  |  |  |  |  549|  36.7k|#define MMDEF_PAIRS(_) _(pairs) _(ipairs)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  36.7k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   31|  36.7k|#define MMNAME(name)	"__" #name
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   33|  36.7k|#undef MMNAME
   34|  36.7k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   35|  36.7k|  const char *p, *q;
   36|  36.7k|  uint32_t mm;
   37|   844k|  for (mm = 0, p = metanames; *p; mm++, p = q) {
  ------------------
  |  Branch (37:31): [True: 807k, False: 36.7k]
  ------------------
   38|   807k|    GCstr *s;
   39|  4.11M|    for (q = p+2; *q && *q != '_'; q++) ;
  ------------------
  |  Branch (39:19): [True: 4.07M, False: 36.7k]
  |  Branch (39:25): [True: 3.30M, False: 771k]
  ------------------
   40|   807k|    s = lj_str_new(L, p, (size_t)(q-p));
   41|       |    /* NOBARRIER: g->gcroot[] is a GC root. */
   42|   807k|    setgcref(g->gcroot[GCROOT_MMNAME+mm], obj2gco(s));
  ------------------
  |  |   72|   807k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   43|   807k|  }
   44|  36.7k|}
lj_meta_cache:
   48|  18.3k|{
   49|  18.3k|  cTValue *mo = lj_tab_getstr(mt, name);
   50|  18.3k|  lj_assertX(mm <= MM_FAST, "bad metamethod %d", mm);
  ------------------
  |  |  366|  18.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  18.3k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 18.3k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  18.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   51|  18.3k|  if (!mo || tvisnil(mo)) {  /* No metamethod? */
  ------------------
  |  |  782|  18.3k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 18.3k]
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 0, False: 18.3k]
  ------------------
   52|      0|    mt->nomm |= (uint8_t)(1u<<mm);  /* Set negative cache flag. */
   53|      0|    return NULL;
   54|      0|  }
   55|  18.3k|  return mo;
   56|  18.3k|}
lj_meta_lookup:
   60|     74|{
   61|     74|  GCtab *mt;
   62|     74|  if (tvistab(o))
  ------------------
  |  |  800|     74|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|     74|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|     74|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 0, False: 74]
  |  |  ------------------
  ------------------
   63|      0|    mt = tabref(tabV(o)->metatable);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|     74|  else if (tvisudata(o))
  ------------------
  |  |  801|     74|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|     74|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|     74|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 74]
  |  |  ------------------
  ------------------
   65|      0|    mt = tabref(udataV(o)->metatable);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   66|     74|  else
   67|     74|    mt = tabref(basemt_obj(G(L), o));
  ------------------
  |  |  514|     74|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|    148|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 74]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   68|     74|  if (mt) {
  ------------------
  |  Branch (68:7): [True: 0, False: 74]
  ------------------
   69|      0|    cTValue *mo = lj_tab_getstr(mt, mmname_str(G(L), mm));
  ------------------
  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  ------------------
  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   70|      0|    if (mo)
  ------------------
  |  Branch (70:9): [True: 0, False: 0]
  ------------------
   71|      0|      return mo;
   72|      0|  }
   73|     74|  return niltv(L);
  ------------------
  |  |  667|     74|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|     74|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     74|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     74|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 74, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     74|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   74|     74|}
lj_meta_tget:
  136|  75.5k|{
  137|  75.5k|  int loop;
  138|  75.5k|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|  75.5k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (138:18): [True: 75.5k, False: 0]
  ------------------
  139|  75.5k|    cTValue *mo;
  140|  75.5k|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|  75.5k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 75.5k, False: 0]
  |  |  ------------------
  ------------------
  141|  75.5k|      GCtab *t = tabV(o);
  ------------------
  |  |  864|  75.5k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  75.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  75.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  75.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 75.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  75.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  142|      0|      cTValue *tv = lj_tab_get(L, t, k);
  143|  75.5k|      if (!tvisnil(tv) ||
  ------------------
  |  |  782|   151k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (143:11): [True: 309, False: 75.2k]
  ------------------
  144|  75.5k|	  !(mo = lj_meta_fast(L, tabref(t->metatable), MM_index)))
  ------------------
  |  |   22|  75.2k|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|  75.2k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 75.2k, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (144:4): [True: 75.2k, False: 0]
  ------------------
  145|  75.5k|	return tv;
  146|  75.5k|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_index))) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  147|      0|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  148|      0|      return NULL;  /* unreachable */
  149|      0|    }
  150|      0|    if (tvisfunc(mo)) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  151|      0|      L->top = mmcall(L, lj_cont_ra, mo, o, k);
  152|      0|      return NULL;  /* Trigger metamethod call. */
  153|      0|    }
  154|      0|    o = mo;
  155|      0|  }
  156|      0|  lj_err_msg(L, LJ_ERR_GETLOOP);
  157|      0|  return NULL;  /* unreachable */
  158|  75.5k|}
lj_meta_tset:
  162|   184k|{
  163|   184k|  TValue tmp;
  164|   184k|  int loop;
  165|   184k|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|   184k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (165:18): [True: 184k, False: 0]
  ------------------
  166|   184k|    cTValue *mo;
  167|   184k|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|   184k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 184k, False: 0]
  |  |  ------------------
  ------------------
  168|   184k|      GCtab *t = tabV(o);
  ------------------
  |  |  864|   184k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   184k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   184k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   184k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 184k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   184k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  169|      0|      cTValue *tv = lj_tab_get(L, t, k);
  170|   184k|      if (LJ_LIKELY(!tvisnil(tv))) {
  ------------------
  |  |  145|   184k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 336, False: 184k]
  |  |  ------------------
  ------------------
  171|    336|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  172|    336|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|    336|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|    336|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 6, False: 330]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      6|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      6|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|    336|	return (TValue *)tv;
  174|   184k|      } else if (!(mo = lj_meta_fast(L, tabref(t->metatable), MM_newindex))) {
  ------------------
  |  |   22|   184k|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|   184k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 184k, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (174:18): [True: 184k, False: 0]
  ------------------
  175|   184k|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  176|   184k|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|   184k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|   184k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 324, False: 184k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|    324|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    324|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|   184k|	if (tv != niltv(L))
  ------------------
  |  |  667|   184k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|   184k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   184k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   184k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 184k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   184k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (177:6): [True: 0, False: 184k]
  ------------------
  178|      0|	  return (TValue *)tv;
  179|   184k|	if (tvisnil(k)) lj_err_msg(L, LJ_ERR_NILIDX);
  ------------------
  |  |  782|   184k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
  180|   184k|	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  803|   184k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|   369k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [Folded - Ignored]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  181|   184k|	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  804|   369k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   184k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   184k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   184k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
              	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  812|      0|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  182|   184k|	return lj_tab_newkey(L, t, k);
  183|   184k|      }
  184|   184k|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_newindex))) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  185|      0|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  186|      0|      return NULL;  /* unreachable */
  187|      0|    }
  188|      0|    if (tvisfunc(mo)) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  189|      0|      L->top = mmcall(L, lj_cont_nop, mo, o, k);
  190|       |      /* L->top+2 = v filled in by caller. */
  191|      0|      return NULL;  /* Trigger metamethod call. */
  192|      0|    }
  193|      0|    copyTV(L, &tmp, mo);
  194|      0|    o = &tmp;
  195|      0|  }
  196|      0|  lj_err_msg(L, LJ_ERR_SETLOOP);
  197|      0|  return NULL;  /* unreachable */
  198|   184k|}
lj_meta_cat:
  239|    244|{
  240|    244|  int fromc = 0;
  241|    244|  if (left < 0) { left = -left; fromc = 1; }
  ------------------
  |  Branch (241:7): [True: 244, False: 0]
  ------------------
  242|    244|  do {
  243|    244|    if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  795|    488|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    244|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    244|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 162, False: 82]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  802|    326|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|     82|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|     82|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     82|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 82, False: 0]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  244|    244|	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  795|    488|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    244|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    244|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 135, False: 109]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  802|    353|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    109|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    109|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    109|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 109, False: 0]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  245|      0|      cTValue *mo = lj_meta_lookup(L, top-1, MM_concat);
  246|      0|      if (tvisnil(mo)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  247|      0|	mo = lj_meta_lookup(L, top, MM_concat);
  248|      0|	if (tvisnil(mo)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  249|      0|	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  795|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  250|      0|	  lj_err_optype(L, top-1, LJ_ERR_OPCAT);
  251|      0|	  return NULL;  /* unreachable */
  252|      0|	}
  253|      0|      }
  254|       |      /* One of the top two elements is not a string, call __cat metamethod:
  255|       |      **
  256|       |      ** before:    [...][CAT stack .........................]
  257|       |      **                                 top-1     top         top+1 top+2
  258|       |      ** pick two:  [...][CAT stack ...] [o1]      [o2]
  259|       |      ** setup mm:  [...][CAT stack ...] [cont|?]  [mo|tmtype] [o1]  [o2]
  260|       |      ** in asm:    [...][CAT stack ...] [cont|PC] [mo|delta]  [o1]  [o2]
  261|       |      **            ^-- func base                              ^-- mm base
  262|       |      ** after mm:  [...][CAT stack ...] <--push-- [result]
  263|       |      ** next step: [...][CAT stack .............]
  264|       |      */
  265|      0|      copyTV(L, top+2*LJ_FR2+2, top);  /* Carefully ordered stack copies! */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  266|      0|      copyTV(L, top+2*LJ_FR2+1, top-1);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  267|      0|      copyTV(L, top+LJ_FR2, mo);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  268|      0|      setcont(top-1, lj_cont_cat);
  ------------------
  |  |  895|      0|#define setcont(o, f)		((o)->u64 = (uint64_t)(uintptr_t)contptr(f))
  |  |  ------------------
  |  |  |  |  894|      0|#define contptr(f)		((void *)(f))
  |  |  ------------------
  ------------------
  269|      0|      if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  270|      0|      return top+1;  /* Trigger metamethod call. */
  271|    244|    } else {
  272|       |      /* Pick as many strings as possible from the top and concatenate them:
  273|       |      **
  274|       |      ** before:    [...][CAT stack ...........................]
  275|       |      ** pick str:  [...][CAT stack ...] [...... strings ......]
  276|       |      ** concat:    [...][CAT stack ...] [result]
  277|       |      ** next step: [...][CAT stack ............]
  278|       |      */
  279|    244|      TValue *e, *o = top;
  280|    324|      uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  795|    244|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    244|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    244|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 162, False: 82]
  |  |  ------------------
  ------------------
                    uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  859|    162|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    162|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    162|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    162|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 162, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    162|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  281|    244|		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|     82|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|    164|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|    164|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|     82|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|     82|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 82]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|    326|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  282|    244|      SBuf *sb;
  283|    244|      do {
  284|    270|	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  795|    244|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    244|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    244|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 135, False: 109]
  |  |  ------------------
  ------------------
              	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  859|    135|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    135|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    135|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    135|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 135, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    135|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|    244|		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|    109|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|    218|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|    218|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    109|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|    109|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 109]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|    353|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  286|    244|      } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  795|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (286:16): [True: 0, False: 244]
  ------------------
  287|    244|      if (tlen >= LJ_MAX_STR) lj_err_msg(L, LJ_ERR_STROV);
  ------------------
  |  |   54|    244|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|    244|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (287:11): [True: 0, False: 244]
  ------------------
  288|    244|      sb = lj_buf_tmp_(L);
  289|    244|      lj_buf_more(sb, (MSize)tlen);
  290|    732|      for (e = top, top = o; o <= e; o++) {
  ------------------
  |  Branch (290:30): [True: 488, False: 244]
  ------------------
  291|    488|	if (tvisstr(o)) {
  ------------------
  |  |  795|    488|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    488|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    488|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 297, False: 191]
  |  |  ------------------
  ------------------
  292|    297|	  GCstr *s = strV(o);
  ------------------
  |  |  859|    297|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    297|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    297|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    297|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 297, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    297|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  293|      0|	  MSize len = s->len;
  294|    297|	  lj_buf_putmem(sb, strdata(s), len);
  ------------------
  |  |  316|    297|#define strdata(s)	((const char *)((s)+1))
  ------------------
  295|    297|	} else if (tvisbuf(o)) {
  ------------------
  |  |   65|    191|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|    382|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|    382|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    191|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|    191|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 191]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  296|      0|	  SBufExt *sbx = bufV(o);
  ------------------
  |  |   66|      0|#define bufV(o)		check_exp(tvisbuf(o), ((SBufExt *)uddata(udataV(o))))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|      0|	  lj_buf_putmem(sb, sbx->r, sbufxlen(sbx));
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
  298|    191|	} else if (tvisint(o)) {
  ------------------
  |  |  803|    191|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|    382|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  299|      0|	  lj_strfmt_putint(sb, intV(o));
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  300|    191|	} else {
  301|    191|	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |   67|    191|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|    191|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    191|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|    191|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
              	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |  866|    191|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|    191|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    191|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    191|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 191, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    191|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  302|    191|	}
  303|    488|      }
  304|    244|      setstrV(L, top, lj_buf_str(L, sb));
  305|    244|    }
  306|    244|  } while (left >= 1);
  ------------------
  |  Branch (306:12): [True: 0, False: 244]
  ------------------
  307|    244|  if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) {
  ------------------
  |  |  146|    244|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 50, False: 194]
  |  |  ------------------
  ------------------
  308|     50|    if (!fromc) L->top = curr_topL(L);
  ------------------
  |  |  718|      0|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|      0|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (308:9): [True: 0, False: 50]
  ------------------
  309|     50|    lj_gc_step(L);
  310|     50|  }
  311|    244|  return NULL;
  312|    244|}
lj_meta_equal:
  330|    197|{
  331|       |  /* Field metatable must be at same offset for GCtab and GCudata! */
  332|    197|  cTValue *mo = lj_meta_fast(L, tabref(o1->gch.metatable), MM_eq);
  ------------------
  |  |   22|    197|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|    197|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 197, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  333|    197|  if (mo) {
  ------------------
  |  Branch (333:7): [True: 0, False: 197]
  ------------------
  334|      0|    TValue *top;
  335|      0|    uint32_t it;
  336|      0|    if (tabref(o1->gch.metatable) != tabref(o2->gch.metatable)) {
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                  if (tabref(o1->gch.metatable) != tabref(o2->gch.metatable)) {
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (336:9): [True: 0, False: 0]
  ------------------
  337|      0|      cTValue *mo2 = lj_meta_fast(L, tabref(o2->gch.metatable), MM_eq);
  ------------------
  |  |   22|      0|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|      0|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 0, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  338|      0|      if (mo2 == NULL || !lj_obj_equal(mo, mo2))
  ------------------
  |  Branch (338:11): [True: 0, False: 0]
  |  Branch (338:26): [True: 0, False: 0]
  ------------------
  339|      0|	return (TValue *)(intptr_t)ne;
  340|      0|    }
  341|      0|    top = curr_top(L);
  ------------------
  |  |  719|      0|#define curr_top(L)		(curr_funcisL(L) ? curr_topL(L) : L->top)
  |  |  ------------------
  |  |  |  |  716|      0|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (716:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define curr_top(L)		(curr_funcisL(L) ? curr_topL(L) : L->top)
  |  |  ------------------
  |  |  |  |  718|      0|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  |  |  ------------------
  |  |  |  |  |  |  717|      0|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  342|      0|    setcont(top++, ne ? lj_cont_condf : lj_cont_condt);
  ------------------
  |  |  895|      0|#define setcont(o, f)		((o)->u64 = (uint64_t)(uintptr_t)contptr(f))
  |  |  ------------------
  |  |  |  |  894|      0|#define contptr(f)		((void *)(f))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (894:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  343|      0|    if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  344|      0|    copyTV(L, top++, mo);
  345|      0|    if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  346|      0|    it = ~(uint32_t)o1->gch.gct;
  347|      0|    setgcV(L, top, o1, it);
  348|      0|    setgcV(L, top+1, o2, it);
  349|      0|    return top;  /* Trigger metamethod call. */
  350|      0|  }
  351|    197|  return (TValue *)(intptr_t)ne;
  352|    197|}
lj_meta_comp:
  385|    156|{
  386|    156|  if (LJ_HASFFI && (tviscdata(o1) || tviscdata(o2))) {
  ------------------
  |  |  585|    312|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_HASFFI && (tviscdata(o1) || tviscdata(o2))) {
  ------------------
  |  |  799|    312|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|    156|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|    156|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 156]
  |  |  ------------------
  ------------------
                if (LJ_HASFFI && (tviscdata(o1) || tviscdata(o2))) {
  ------------------
  |  |  799|    156|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|    156|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|    156|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 156]
  |  |  ------------------
  ------------------
  387|      0|    ASMFunction cont = (op & 1) ? lj_cont_condf : lj_cont_condt;
  ------------------
  |  Branch (387:24): [True: 0, False: 0]
  ------------------
  388|      0|    MMS mm = (op & 2) ? MM_le : MM_lt;
  ------------------
  |  Branch (388:14): [True: 0, False: 0]
  ------------------
  389|      0|    cTValue *mo = lj_meta_lookup(L, tviscdata(o1) ? o1 : o2, mm);
  ------------------
  |  |  799|      0|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|      0|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  390|      0|    if (LJ_UNLIKELY(tvisnil(mo))) goto err;
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  391|      0|    return mmcall(L, cont, mo, o1, o2);
  392|    156|  } else if (LJ_52 || itype(o1) == itype(o2)) {
  ------------------
  |  |  697|    312|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                } else if (LJ_52 || itype(o1) == itype(o2)) {
  ------------------
  |  |  781|    156|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
                } else if (LJ_52 || itype(o1) == itype(o2)) {
  ------------------
  |  |  781|    156|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  |  Branch (392:23): [True: 156, False: 0]
  ------------------
  393|       |    /* Never called with two numbers. */
  394|    156|    if (tvisstr(o1) && tvisstr(o2)) {
  ------------------
  |  |  795|    312|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    156|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    156|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 156, False: 0]
  |  |  ------------------
  ------------------
                  if (tvisstr(o1) && tvisstr(o2)) {
  ------------------
  |  |  795|    156|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    156|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    156|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 156, False: 0]
  |  |  ------------------
  ------------------
  395|    156|      int32_t res = lj_str_cmp(strV(o1), strV(o2));
  ------------------
  |  |  859|    156|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    156|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    156|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    156|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 156, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    156|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    int32_t res = lj_str_cmp(strV(o1), strV(o2));
  ------------------
  |  |  859|    156|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    156|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    156|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    156|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 156, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    156|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  396|    156|      return (TValue *)(intptr_t)(((op&2) ? res <= 0 : res < 0) ^ (op&1));
  ------------------
  |  Branch (396:36): [True: 0, False: 156]
  ------------------
  397|    156|    } else {
  398|      0|    trymt:
  399|      0|      while (1) {
  ------------------
  |  Branch (399:14): [Folded - Ignored]
  ------------------
  400|      0|	ASMFunction cont = (op & 1) ? lj_cont_condf : lj_cont_condt;
  ------------------
  |  Branch (400:21): [True: 0, False: 0]
  ------------------
  401|      0|	MMS mm = (op & 2) ? MM_le : MM_lt;
  ------------------
  |  Branch (401:11): [True: 0, False: 0]
  ------------------
  402|      0|	cTValue *mo = lj_meta_lookup(L, o1, mm);
  403|       |#if LJ_52
  404|       |	if (tvisnil(mo) && tvisnil((mo = lj_meta_lookup(L, o2, mm))))
  405|       |#else
  406|      0|	cTValue *mo2 = lj_meta_lookup(L, o2, mm);
  407|      0|	if (tvisnil(mo) || !lj_obj_equal(mo, mo2))
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (407:21): [True: 0, False: 0]
  ------------------
  408|      0|#endif
  409|      0|	{
  410|      0|	  if (op & 2) {  /* MM_le not found: retry with MM_lt. */
  ------------------
  |  Branch (410:8): [True: 0, False: 0]
  ------------------
  411|      0|	    cTValue *ot = o1; o1 = o2; o2 = ot;  /* Swap operands. */
  412|      0|	    op ^= 3;  /* Use LT and flip condition. */
  413|      0|	    continue;
  414|      0|	  }
  415|      0|	  goto err;
  416|      0|	}
  417|      0|	return mmcall(L, cont, mo, o1, o2);
  418|      0|      }
  419|      0|    }
  420|    156|  } else if (tvisbool(o1) && tvisbool(o2)) {
  ------------------
  |  |  789|      0|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|      0|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|      0|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|      0|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                } else if (tvisbool(o1) && tvisbool(o2)) {
  ------------------
  |  |  789|      0|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|      0|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|      0|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|      0|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  421|      0|    goto trymt;
  422|      0|  } else {
  423|      0|  err:
  424|      0|    lj_err_comp(L, o1, o2);
  425|      0|    return NULL;
  426|      0|  }
  427|    156|}
lj_meta_call:
  443|     74|{
  444|     74|  cTValue *mo = lj_meta_lookup(L, func, MM_call);
  445|     74|  TValue *p;
  446|     74|  if (!tvisfunc(mo))
  ------------------
  |  |  796|     74|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|     74|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|     74|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  ------------------
  |  Branch (446:7): [True: 74, False: 0]
  ------------------
  447|     74|    lj_err_optype_call(L, func);
  448|      0|  for (p = top; p > func+2*LJ_FR2; p--) copyTV(L, p, p-1);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  |  Branch (448:17): [True: 0, False: 0]
  ------------------
  449|      0|  if (LJ_FR2) copyTV(L, func+2, func);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
  450|      0|  copyTV(L, func, mo);
  451|      0|}

lj_obj_equal:
   24|  1.14k|{
   25|  1.14k|  if (itype(o1) == itype(o2)) {
  ------------------
  |  |  781|  1.14k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
                if (itype(o1) == itype(o2)) {
  ------------------
  |  |  781|  1.14k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  |  Branch (25:7): [True: 875, False: 274]
  ------------------
   26|    875|    if (tvispri(o1))
  ------------------
  |  |  807|    875|#define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  781|    875|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  283|    875|#define LJ_TISPRI		LJ_TTRUE
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|    875|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (807:20): [True: 5, False: 870]
  |  |  ------------------
  ------------------
   27|      5|      return 1;
   28|    870|    if (!tvisnum(o1))
  ------------------
  |  |  804|    870|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    870|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    870|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    870|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (28:9): [True: 756, False: 114]
  ------------------
   29|    756|      return gcrefeq(o1->gcr, o2->gcr);
  ------------------
  |  |   70|    756|#define gcrefeq(r1, r2)	((r1).gcptr64 == (r2).gcptr64)
  ------------------
   30|    870|  } else if (!tvisnumber(o1) || !tvisnumber(o2)) {
  ------------------
  |  |  802|    548|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    274|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    274|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    274|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                } else if (!tvisnumber(o1) || !tvisnumber(o2)) {
  ------------------
  |  |  802|    196|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    196|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    196|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    196|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (30:14): [True: 78, False: 196]
  |  Branch (30:33): [True: 96, False: 100]
  ------------------
   31|    174|    return 0;
   32|    174|  }
   33|    214|  return numberVnum(o1) == numberVnum(o2);
   34|  1.14k|}
lj_obj_ptr:
   38|    183|{
   39|    183|  UNUSED(g);
  ------------------
  |  |   91|    183|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
   40|    183|  if (tvisudata(o))
  ------------------
  |  |  801|    183|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|    183|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|    183|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 183]
  |  |  ------------------
  ------------------
   41|    183|    return uddata(udataV(o));
  ------------------
  |  |  342|      0|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   42|    183|  else if (tvislightud(o))
  ------------------
  |  |  793|    183|#define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  781|    183|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  263|    183|#define LJ_TLIGHTUD		(~3u)
  |  |  ------------------
  |  |  |  Branch (793:24): [True: 0, False: 183]
  |  |  ------------------
  ------------------
   43|      0|    return lightudV(g, o);
   44|    183|  else if (LJ_HASFFI && tviscdata(o))
  ------------------
  |  |  585|    366|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                else if (LJ_HASFFI && tviscdata(o))
  ------------------
  |  |  799|    183|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|    183|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|    183|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 183]
  |  |  ------------------
  ------------------
   45|    183|    return cdataptr(cdataV(o));
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  |  |  ------------------
  |  |  |  Branch (360:33): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   46|    183|  else if (tvisgcv(o))
  ------------------
  |  |  809|    183|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|    183|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    183|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    183|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|    183|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    183|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    183|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 42, False: 141]
  |  |  ------------------
  ------------------
   47|    183|    return gcV(o);
  ------------------
  |  |  858|     42|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|     42|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     42|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     42|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 42, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     42|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   48|    141|  else
   49|    141|    return NULL;
   50|    183|}

lj_err.c:setgcVraw:
  918|     74|{
  919|     74|#if LJ_GC64
  920|     74|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|     74|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|     74|}
lj_obj.c:numberVnum:
 1029|    428|{
 1030|    428|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|    428|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1031|    428|    return (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1032|    428|  else
 1033|    428|    return numV(o);
  ------------------
  |  |  866|    428|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|    428|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    428|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    428|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 428, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    428|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1034|    428|}
lj_state.c:setgcVraw:
  918|  83.4k|{
  919|  83.4k|#if LJ_GC64
  920|  83.4k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  83.4k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  83.4k|}
lj_state.c:setgcV:
  927|  83.4k|{
  928|  83.4k|  setgcVraw(o, v, it);
  929|  83.4k|  checklivetv(L, o, "store to dead GC object");
  930|  83.4k|}
lj_state.c:checklivetv:
  904|  83.4k|{
  905|  83.4k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  83.4k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  83.4k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  83.4k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  83.4k|#if LUA_USE_ASSERT
  907|  83.4k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  83.4k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  83.4k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  83.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  83.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  83.4k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  83.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  83.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 83.4k, False: 0]
  |  |  ------------------
  ------------------
  908|  83.4k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  83.4k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  83.4k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 83.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  83.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  83.4k|	       "mismatch of TValue type %d vs GC type %d",
  910|  83.4k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  83.4k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  83.4k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  83.4k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 83.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  83.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  83.4k|  }
  914|  83.4k|#endif
  915|  83.4k|}
lj_state.c:settabV:
  933|  36.7k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  36.7k|{ \
  935|  36.7k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  36.7k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  36.7k|}
lj_state.c:setthreadV:
  933|  46.6k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  46.6k|{ \
  935|  46.6k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  46.6k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  46.6k|}
lj_strfmt.c:checklivetv:
  904|  12.9k|{
  905|  12.9k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  12.9k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  12.9k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  12.9k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  12.9k|#if LUA_USE_ASSERT
  907|  12.9k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  12.9k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  12.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  12.9k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  12.9k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  12.9k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  12.9k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  12.9k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 12.9k, False: 0]
  |  |  ------------------
  ------------------
  908|  12.9k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  12.9k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  12.9k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 12.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  12.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  12.9k|	       "mismatch of TValue type %d vs GC type %d",
  910|  12.9k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  12.9k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  12.9k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  12.9k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 12.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  12.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  12.9k|  }
  914|  12.9k|#endif
  915|  12.9k|}
lj_strfmt.c:setstrV:
  933|  12.9k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  12.9k|{ \
  935|  12.9k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  12.9k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  12.9k|}
lj_strfmt.c:setgcV:
  927|  12.9k|{
  928|  12.9k|  setgcVraw(o, v, it);
  929|  12.9k|  checklivetv(L, o, "store to dead GC object");
  930|  12.9k|}
lj_strfmt.c:setgcVraw:
  918|  12.9k|{
  919|  12.9k|#if LJ_GC64
  920|  12.9k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  12.9k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  12.9k|}
lj_api.c:copyTV:
  975|   925k|{
  976|   925k|  *o1 = *o2;
  977|   925k|  checklivetv(L, o1, "copy of dead GC object");
  978|   925k|}
lj_api.c:checklivetv:
  904|  1.57M|{
  905|  1.57M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.57M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.57M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.57M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  1.57M|#if LUA_USE_ASSERT
  907|  1.57M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  1.57M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  1.57M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.57M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.57M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  1.57M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.57M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.57M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 1.34M, False: 225k]
  |  |  ------------------
  ------------------
  908|  1.34M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  1.34M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.34M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.34M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.34M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  1.34M|	       "mismatch of TValue type %d vs GC type %d",
  910|  1.34M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  1.34M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  1.34M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.34M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.34M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.34M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  1.34M|  }
  914|  1.57M|#endif
  915|  1.57M|}
lj_api.c:numberVnum:
 1029|    772|{
 1030|    772|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|    772|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1031|    772|    return (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1032|    772|  else
 1033|    772|    return numV(o);
  ------------------
  |  |  866|    772|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|    772|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    772|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    772|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 772, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    772|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1034|    772|}
lj_api.c:setstrV:
  933|   391k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   391k|{ \
  935|   391k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   391k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   391k|}
lj_api.c:setgcV:
  927|   647k|{
  928|   647k|  setgcVraw(o, v, it);
  929|   647k|  checklivetv(L, o, "store to dead GC object");
  930|   647k|}
lj_api.c:setint64V:
  960|  5.11k|{
  961|  5.11k|  if (LJ_DUALNUM && LJ_LIKELY(i == (int64_t)(int32_t)i))
  ------------------
  |  |  549|  10.2k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_DUALNUM && LJ_LIKELY(i == (int64_t)(int32_t)i))
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  962|      0|    setintV(o, (int32_t)i);
  963|  5.11k|  else
  964|  5.11k|    setnumV(o, (lua_Number)i);
  ------------------
  |  |  945|  5.11k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  965|  5.11k|}
lj_api.c:setfuncV:
  933|  87.2k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  87.2k|{ \
  935|  87.2k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  87.2k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  87.2k|}
lj_api.c:setrawlightudV:
  883|    308|{
  884|    308|#if LJ_GC64
  885|    308|  o->u64 = (uint64_t)p | (((uint64_t)LJ_TLIGHTUD) << 47);
  ------------------
  |  |  263|    308|#define LJ_TLIGHTUD		(~3u)
  ------------------
  886|       |#elif LJ_64
  887|       |  o->u64 = (uint64_t)p | (((uint64_t)0xffff) << 48);
  888|       |#else
  889|       |  setgcrefp(o->gcr, p); setitype(o, LJ_TLIGHTUD);
  890|       |#endif
  891|    308|}
lj_api.c:settabV:
  933|   158k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   158k|{ \
  935|   158k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   158k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   158k|}
lj_api.c:setthreadV:
  933|  10.0k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  10.0k|{ \
  935|  10.0k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  10.0k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  10.0k|}
lj_api.c:setudataV:
  933|    347|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    347|{ \
  935|    347|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    347|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    347|}
lj_api.c:setgcVraw:
  918|   647k|{
  919|   647k|#if LJ_GC64
  920|   647k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   647k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   647k|}
lj_lex.c:setstrV:
  933|    376|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    376|{ \
  935|    376|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    376|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    376|}
lj_lex.c:setgcV:
  927|    376|{
  928|    376|  setgcVraw(o, v, it);
  929|    376|  checklivetv(L, o, "store to dead GC object");
  930|    376|}
lj_lex.c:setgcVraw:
  918|    376|{
  919|    376|#if LJ_GC64
  920|    376|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|    376|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|    376|}
lj_lex.c:checklivetv:
  904|    376|{
  905|    376|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    376|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    376|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    376|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|    376|#if LUA_USE_ASSERT
  907|    376|  if (tvisgcv(o)) {
  ------------------
  |  |  809|    376|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|    376|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    376|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    376|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|    376|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    376|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    376|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 376, False: 0]
  |  |  ------------------
  ------------------
  908|    376|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|    376|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    376|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 376, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    376|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|    376|	       "mismatch of TValue type %d vs GC type %d",
  910|    376|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|    376|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|    376|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    376|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 376, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    376|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|    376|  }
  914|    376|#endif
  915|    376|}
lj_parse.c:setgcV:
  927|    752|{
  928|    752|  setgcVraw(o, v, it);
  929|    752|  checklivetv(L, o, "store to dead GC object");
  930|    752|}
lj_parse.c:setgcVraw:
  918|    752|{
  919|    752|#if LJ_GC64
  920|    752|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|    752|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|    752|}
lj_parse.c:checklivetv:
  904|    940|{
  905|    940|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    940|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    940|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    940|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|    940|#if LUA_USE_ASSERT
  907|    940|  if (tvisgcv(o)) {
  ------------------
  |  |  809|    940|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|    940|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    940|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    940|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|    940|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    940|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    940|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 752, False: 188]
  |  |  ------------------
  ------------------
  908|    752|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|    752|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    752|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 752, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    752|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|    752|	       "mismatch of TValue type %d vs GC type %d",
  910|    752|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|    752|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|    752|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    752|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 752, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    752|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|    752|  }
  914|    940|#endif
  915|    940|}
lj_parse.c:setstrV:
  933|    188|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    188|{ \
  935|    188|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    188|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    188|}
lj_parse.c:settabV:
  933|    188|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    188|{ \
  935|    188|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    188|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    188|}
lj_parse.c:copyTV:
  975|    188|{
  976|    188|  *o1 = *o2;
  977|    188|  checklivetv(L, o1, "copy of dead GC object");
  978|    188|}
lj_load.c:setgcV:
  927|    188|{
  928|    188|  setgcVraw(o, v, it);
  929|    188|  checklivetv(L, o, "store to dead GC object");
  930|    188|}
lj_load.c:setgcVraw:
  918|    188|{
  919|    188|#if LJ_GC64
  920|    188|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|    188|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|    188|}
lj_load.c:checklivetv:
  904|    188|{
  905|    188|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    188|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    188|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    188|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|    188|#if LUA_USE_ASSERT
  907|    188|  if (tvisgcv(o)) {
  ------------------
  |  |  809|    188|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|    188|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    188|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    188|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|    188|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    188|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    188|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 188, False: 0]
  |  |  ------------------
  ------------------
  908|    188|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|    188|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    188|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 188, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|    188|	       "mismatch of TValue type %d vs GC type %d",
  910|    188|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|    188|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|    188|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    188|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 188, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|    188|  }
  914|    188|#endif
  915|    188|}
lj_load.c:setfuncV:
  933|    188|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    188|{ \
  935|    188|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    188|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    188|}
lj_ctype.c:setstrV:
  933|  36.7k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  36.7k|{ \
  935|  36.7k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  36.7k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  36.7k|}
lj_ctype.c:setgcV:
  927|  36.7k|{
  928|  36.7k|  setgcVraw(o, v, it);
  929|  36.7k|  checklivetv(L, o, "store to dead GC object");
  930|  36.7k|}
lj_ctype.c:setgcVraw:
  918|  36.7k|{
  919|  36.7k|#if LJ_GC64
  920|  36.7k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  36.7k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  36.7k|}
lj_ctype.c:checklivetv:
  904|  36.7k|{
  905|  36.7k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  36.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  36.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  36.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  36.7k|#if LUA_USE_ASSERT
  907|  36.7k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  36.7k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  36.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  36.7k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  36.7k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  36.7k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  36.7k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  36.7k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 36.7k, False: 0]
  |  |  ------------------
  ------------------
  908|  36.7k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  36.7k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  36.7k|	       "mismatch of TValue type %d vs GC type %d",
  910|  36.7k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  36.7k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  36.7k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  36.7k|  }
  914|  36.7k|#endif
  915|  36.7k|}
lj_tab.c:checklivetv:
  904|  37.1k|{
  905|  37.1k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  37.1k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  37.1k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  37.1k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  37.1k|#if LUA_USE_ASSERT
  907|  37.1k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  37.1k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  37.1k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  37.1k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  37.1k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  37.1k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  37.1k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  37.1k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 37.1k, False: 0]
  |  |  ------------------
  ------------------
  908|  37.1k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  37.1k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  37.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 37.1k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  37.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  37.1k|	       "mismatch of TValue type %d vs GC type %d",
  910|  37.1k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  37.1k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  37.1k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  37.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 37.1k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  37.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  37.1k|  }
  914|  37.1k|#endif
  915|  37.1k|}
lj_tab.c:setstrV:
  933|  37.1k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  37.1k|{ \
  935|  37.1k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  37.1k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  37.1k|}
lj_tab.c:setgcV:
  927|  37.1k|{
  928|  37.1k|  setgcVraw(o, v, it);
  929|  37.1k|  checklivetv(L, o, "store to dead GC object");
  930|  37.1k|}
lj_tab.c:setgcVraw:
  918|  37.1k|{
  919|  37.1k|#if LJ_GC64
  920|  37.1k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  37.1k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  37.1k|}
lj_meta.c:checklivetv:
  904|    244|{
  905|    244|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    244|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    244|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    244|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|    244|#if LUA_USE_ASSERT
  907|    244|  if (tvisgcv(o)) {
  ------------------
  |  |  809|    244|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|    244|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    244|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    244|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|    244|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    244|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    244|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 244, False: 0]
  |  |  ------------------
  ------------------
  908|    244|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|    244|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    244|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 244, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    244|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|    244|	       "mismatch of TValue type %d vs GC type %d",
  910|    244|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|    244|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|    244|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    244|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 244, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    244|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|    244|  }
  914|    244|#endif
  915|    244|}
lj_meta.c:setgcVraw:
  918|    244|{
  919|    244|#if LJ_GC64
  920|    244|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|    244|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|    244|}
lj_meta.c:setstrV:
  933|    244|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    244|{ \
  935|    244|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    244|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    244|}
lj_meta.c:setgcV:
  927|    244|{
  928|    244|  setgcVraw(o, v, it);
  929|    244|  checklivetv(L, o, "store to dead GC object");
  930|    244|}

lj_parse_keepstr:
  240|    376|{
  241|       |  /* NOBARRIER: the key is new or kept alive. */
  242|    376|  lua_State *L = ls->L;
  243|    376|  GCstr *s = lj_str_new(L, str, len);
  244|    376|  TValue *tv = lj_tab_setstr(L, ls->fs->kt, s);
  245|    376|  if (tvisnil(tv)) setboolV(tv, 1);
  ------------------
  |  |  782|    376|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 188, False: 188]
  |  |  ------------------
  ------------------
                if (tvisnil(tv)) setboolV(tv, 1);
  ------------------
  |  |  874|    188|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  246|    376|  lj_gc_check(L);
  ------------------
  |  |   66|    376|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|    376|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 29, False: 347]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|    376|      lj_gc_step(L); }
  ------------------
  247|    376|  return s;
  248|    376|}
lj_parse:
 2720|    188|{
 2721|    188|  FuncState fs;
 2722|    188|  FuncScope bl;
 2723|    188|  GCproto *pt;
 2724|    188|  lua_State *L = ls->L;
 2725|       |#ifdef LUAJIT_DISABLE_DEBUGINFO
 2726|       |  ls->chunkname = lj_str_newlit(L, "=");
 2727|       |#else
 2728|    188|  ls->chunkname = lj_str_newz(L, ls->chunkarg);
  ------------------
  |  |   27|    188|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
 2729|    188|#endif
 2730|    188|  setstrV(L, L->top, ls->chunkname);  /* Anchor chunkname string. */
 2731|    188|  incr_top(L);
  ------------------
  |  |   12|    188|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    376|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    188|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 188]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2732|    188|  ls->level = 0;
 2733|    188|  fs_init(ls, &fs);
 2734|    188|  fs.linedefined = 0;
 2735|    188|  fs.numparams = 0;
 2736|    188|  fs.bcbase = NULL;
 2737|    188|  fs.bclim = 0;
 2738|    188|  fs.flags |= PROTO_VARARG;  /* Main chunk is always a vararg func. */
  ------------------
  |  |  400|    188|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
 2739|    188|  fscope_begin(&fs, &bl, 0);
 2740|    188|  bcemit_AD(&fs, BC_FUNCV, 0, 0);  /* Placeholder. */
  ------------------
  |  |  435|    188|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|    188|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2741|    188|  lj_lex_next(ls);  /* Read-ahead first token. */
 2742|    188|  parse_chunk(ls);
 2743|    188|  if (ls->tok != TK_eof)
  ------------------
  |  Branch (2743:7): [True: 0, False: 188]
  ------------------
 2744|      0|    err_token(ls, TK_eof);
 2745|    188|  pt = fs_finish(ls, ls->linenumber);
 2746|    188|  L->top--;  /* Drop chunkname. */
 2747|    188|  lj_assertL(fs.prev == NULL && ls->fs == NULL, "mismatched frame nesting");
  ------------------
  |  |  365|    188|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    376|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 188, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 188, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 2748|    188|  lj_assertL(pt->sizeuv == 0, "toplevel proto has upvalues");
  ------------------
  |  |  365|    188|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    188|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 188, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 2749|    188|  return pt;
 2750|    188|}
lj_parse.c:fs_init:
 1626|    188|{
 1627|    188|  lua_State *L = ls->L;
 1628|    188|  fs->prev = ls->fs; ls->fs = fs;  /* Append to list. */
 1629|    188|  fs->ls = ls;
 1630|    188|  fs->vbase = ls->vtop;
 1631|    188|  fs->L = L;
 1632|    188|  fs->pc = 0;
 1633|    188|  fs->lasttarget = 0;
 1634|    188|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|    188|#define NO_JMP		(~(BCPos)0)
  ------------------
 1635|    188|  fs->freereg = 0;
 1636|    188|  fs->nkgc = 0;
 1637|    188|  fs->nkn = 0;
 1638|    188|  fs->nactvar = 0;
 1639|    188|  fs->nuv = 0;
 1640|    188|  fs->bl = NULL;
 1641|    188|  fs->flags = 0;
 1642|    188|  fs->framesize = 1;  /* Minimum frame size. */
 1643|    188|  fs->kt = lj_tab_new(L, 0, 0);
 1644|       |  /* Anchor table of constants in stack to avoid being collected. */
 1645|    188|  settabV(L, L->top, fs->kt);
 1646|    188|  incr_top(L);
  ------------------
  |  |   12|    188|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    376|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    188|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 188]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1647|    188|}
lj_parse.c:fscope_begin:
 1283|    188|{
 1284|    188|  bl->nactvar = (uint8_t)fs->nactvar;
 1285|    188|  bl->flags = flags;
 1286|    188|  bl->vstart = fs->ls->vtop;
 1287|    188|  bl->prev = fs->bl;
 1288|    188|  fs->bl = bl;
 1289|    188|  lj_assertFS(fs->freereg == fs->nactvar, "bad regalloc");
  ------------------
  |  |  167|    188|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    188|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    188|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 188, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1290|    188|}
lj_parse.c:bcemit_INS:
  416|    940|{
  417|    940|  BCPos pc = fs->pc;
  418|    940|  LexState *ls = fs->ls;
  419|    940|  jmp_patchval(fs, fs->jpc, pc, NO_REG, pc);
  ------------------
  |  |   30|    940|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|    940|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  420|    940|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|    940|#define NO_JMP		(~(BCPos)0)
  ------------------
  421|    940|  if (LJ_UNLIKELY(pc >= fs->bclim)) {
  ------------------
  |  |  146|    940|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 188, False: 752]
  |  |  ------------------
  ------------------
  422|    188|    ptrdiff_t base = fs->bcbase - ls->bcstack;
  423|    188|    checklimit(fs, ls->sizebcstack, LJ_MAX_BCINS, "bytecode instructions");
  ------------------
  |  |  192|    188|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 188]
  |  |  ------------------
  ------------------
  424|    188|    lj_mem_growvec(fs->L, ls->bcstack, ls->sizebcstack, LJ_MAX_BCINS,BCInsLine);
  ------------------
  |  |  129|    188|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
  425|    188|    fs->bclim = (BCPos)(ls->sizebcstack - base);
  426|    188|    fs->bcbase = ls->bcstack + base;
  427|    188|  }
  428|    940|  fs->bcbase[pc].ins = ins;
  429|    940|  fs->bcbase[pc].line = ls->lastline;
  430|    940|  fs->pc = pc+1;
  431|    940|  return pc;
  432|    940|}
lj_parse.c:jmp_patchval:
  347|    940|{
  348|    940|  while (list != NO_JMP) {
  ------------------
  |  |   31|    940|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (348:10): [True: 0, False: 940]
  ------------------
  349|      0|    BCPos next = jmp_next(fs, list);
  350|      0|    if (jmp_patchtestreg(fs, list, reg))
  ------------------
  |  Branch (350:9): [True: 0, False: 0]
  ------------------
  351|      0|      jmp_patchins(fs, list, vtarget);  /* Jump to target with value. */
  352|      0|    else
  353|      0|      jmp_patchins(fs, list, dtarget);  /* Jump to default target. */
  354|      0|    list = next;
  355|      0|  }
  356|    940|}
lj_parse.c:parse_chunk:
 2704|    188|{
 2705|    188|  int islast = 0;
 2706|    188|  synlevel_begin(ls);
 2707|    376|  while (!islast && !parse_isend(ls->tok)) {
  ------------------
  |  Branch (2707:10): [True: 376, False: 0]
  |  Branch (2707:21): [True: 188, False: 188]
  ------------------
 2708|    188|    islast = parse_stmt(ls);
 2709|    188|    lex_opt(ls, ';');
 2710|    188|    lj_assertLS(ls->fs->framesize >= ls->fs->freereg &&
  ------------------
  |  |   89|    188|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    188|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    376|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 188, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 188, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2711|    188|		ls->fs->freereg >= ls->fs->nactvar,
 2712|    188|		"bad regalloc");
 2713|    188|    ls->fs->freereg = ls->fs->nactvar;  /* Free registers after each stmt. */
 2714|    188|  }
 2715|    188|  synlevel_end(ls);
  ------------------
  |  | 2042|    188|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2716|    188|}
lj_parse.c:synlevel_begin:
 2037|    564|{
 2038|    564|  if (++ls->level >= LJ_MAX_XLEVEL)
  ------------------
  |  |   65|    564|#define LJ_MAX_XLEVEL	200		/* Max. syntactic nesting level. */
  ------------------
  |  Branch (2038:7): [True: 0, False: 564]
  ------------------
 2039|      0|    lj_lex_error(ls, 0, LJ_ERR_XLEVELS);
 2040|    564|}
lj_parse.c:parse_isend:
 2314|    376|{
 2315|    376|  switch (tok) {
 2316|    188|  case TK_else: case TK_elseif: case TK_end: case TK_until: case TK_eof:
  ------------------
  |  Branch (2316:3): [True: 0, False: 376]
  |  Branch (2316:17): [True: 0, False: 376]
  |  Branch (2316:33): [True: 0, False: 376]
  |  Branch (2316:46): [True: 0, False: 376]
  |  Branch (2316:61): [True: 188, False: 188]
  ------------------
 2317|    188|    return 1;
 2318|    188|  default:
  ------------------
  |  Branch (2318:3): [True: 188, False: 188]
  ------------------
 2319|    188|    return 0;
 2320|    376|  }
 2321|    376|}
lj_parse.c:parse_stmt:
 2646|    188|{
 2647|    188|  BCLine line = ls->linenumber;
 2648|    188|  switch (ls->tok) {
 2649|      0|  case TK_if:
  ------------------
  |  Branch (2649:3): [True: 0, False: 188]
  ------------------
 2650|      0|    parse_if(ls, line);
 2651|      0|    break;
 2652|      0|  case TK_while:
  ------------------
  |  Branch (2652:3): [True: 0, False: 188]
  ------------------
 2653|      0|    parse_while(ls, line);
 2654|      0|    break;
 2655|      0|  case TK_do:
  ------------------
  |  Branch (2655:3): [True: 0, False: 188]
  ------------------
 2656|      0|    lj_lex_next(ls);
 2657|      0|    parse_block(ls);
 2658|      0|    lex_match(ls, TK_end, TK_do, line);
 2659|      0|    break;
 2660|      0|  case TK_for:
  ------------------
  |  Branch (2660:3): [True: 0, False: 188]
  ------------------
 2661|      0|    parse_for(ls, line);
 2662|      0|    break;
 2663|      0|  case TK_repeat:
  ------------------
  |  Branch (2663:3): [True: 0, False: 188]
  ------------------
 2664|      0|    parse_repeat(ls, line);
 2665|      0|    break;
 2666|      0|  case TK_function:
  ------------------
  |  Branch (2666:3): [True: 0, False: 188]
  ------------------
 2667|      0|    parse_func(ls, line);
 2668|      0|    break;
 2669|      0|  case TK_local:
  ------------------
  |  Branch (2669:3): [True: 0, False: 188]
  ------------------
 2670|      0|    lj_lex_next(ls);
 2671|      0|    parse_local(ls);
 2672|      0|    break;
 2673|      0|  case TK_return:
  ------------------
  |  Branch (2673:3): [True: 0, False: 188]
  ------------------
 2674|      0|    parse_return(ls);
 2675|      0|    return 1;  /* Must be last. */
 2676|      0|  case TK_break:
  ------------------
  |  Branch (2676:3): [True: 0, False: 188]
  ------------------
 2677|      0|    lj_lex_next(ls);
 2678|      0|    parse_break(ls);
 2679|      0|    return !LJ_52;  /* Must be last in Lua 5.1. */
  ------------------
  |  |  697|      0|#define LJ_52			0
  ------------------
 2680|       |#if LJ_52
 2681|       |  case ';':
 2682|       |    lj_lex_next(ls);
 2683|       |    break;
 2684|       |#endif
 2685|      0|  case TK_label:
  ------------------
  |  Branch (2685:3): [True: 0, False: 188]
  ------------------
 2686|      0|    parse_label(ls);
 2687|      0|    break;
 2688|      0|  case TK_goto:
  ------------------
  |  Branch (2688:3): [True: 0, False: 188]
  ------------------
 2689|      0|    if (LJ_52 || lj_lex_lookahead(ls) == TK_name) {
  ------------------
  |  |  697|      0|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (2689:18): [True: 0, False: 0]
  ------------------
 2690|      0|      lj_lex_next(ls);
 2691|      0|      parse_goto(ls);
 2692|      0|      break;
 2693|      0|    }
 2694|       |    /* fallthrough */
 2695|    188|  default:
  ------------------
  |  Branch (2695:3): [True: 188, False: 0]
  ------------------
 2696|    188|    parse_call_assign(ls);
 2697|    188|    break;
 2698|    188|  }
 2699|    188|  return 0;
 2700|    188|}
lj_parse.c:expr:
 2126|    188|{
 2127|    188|  expr_binop(ls, v, 0);  /* Priority 0: parse whole expression. */
 2128|    188|}
lj_parse.c:expr_binop:
 2105|    376|{
 2106|    376|  BinOpr op;
 2107|    376|  synlevel_begin(ls);
 2108|    376|  expr_unop(ls, v);
 2109|    376|  op = token2binop(ls->tok);
 2110|    564|  while (op != OPR_NOBINOPR && priority[op].left > limit) {
  ------------------
  |  Branch (2110:10): [True: 188, False: 376]
  |  Branch (2110:32): [True: 188, False: 0]
  ------------------
 2111|    188|    ExpDesc v2;
 2112|    188|    BinOpr nextop;
 2113|    188|    lj_lex_next(ls);
 2114|    188|    bcemit_binop_left(ls->fs, op, v);
 2115|       |    /* Parse binary expression with higher priority. */
 2116|    188|    nextop = expr_binop(ls, &v2, priority[op].right);
 2117|    188|    bcemit_binop(ls->fs, op, v, &v2);
 2118|    188|    op = nextop;
 2119|    188|  }
 2120|    376|  synlevel_end(ls);
  ------------------
  |  | 2042|    376|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2121|    376|  return op;  /* Return unconsumed binary operator (if any). */
 2122|    376|}
lj_parse.c:expr_unop:
 2086|    376|{
 2087|    376|  BCOp op;
 2088|    376|  if (ls->tok == TK_not) {
  ------------------
  |  Branch (2088:7): [True: 0, False: 376]
  ------------------
 2089|      0|    op = BC_NOT;
 2090|    376|  } else if (ls->tok == '-') {
  ------------------
  |  Branch (2090:14): [True: 0, False: 376]
  ------------------
 2091|      0|    op = BC_UNM;
 2092|    376|  } else if (ls->tok == '#') {
  ------------------
  |  Branch (2092:14): [True: 0, False: 376]
  ------------------
 2093|      0|    op = BC_LEN;
 2094|    376|  } else {
 2095|    376|    expr_simple(ls, v);
 2096|    376|    return;
 2097|    376|  }
 2098|      0|  lj_lex_next(ls);
 2099|      0|  expr_binop(ls, v, UNARY_PRIORITY);
  ------------------
  |  | 2079|      0|#define UNARY_PRIORITY		8  /* Priority for unary operators. */
  ------------------
 2100|      0|  bcemit_unop(ls->fs, op, v);
 2101|      0|}
lj_parse.c:expr_simple:
 1992|    376|{
 1993|    376|  switch (ls->tok) {
 1994|    188|  case TK_number:
  ------------------
  |  Branch (1994:3): [True: 188, False: 188]
  ------------------
 1995|    188|    expr_init(v, (LJ_HASFFI && tviscdata(&ls->tokval)) ? VKCDATA : VKNUM, 0);
  ------------------
  |  |  585|    376|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  expr_init(v, (LJ_HASFFI && tviscdata(&ls->tokval)) ? VKCDATA : VKNUM, 0);
  ------------------
  |  |  799|    188|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|    188|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|    188|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 188]
  |  |  ------------------
  ------------------
 1996|    188|    copyTV(ls->L, &v->u.nval, &ls->tokval);
 1997|    188|    break;
 1998|      0|  case TK_string:
  ------------------
  |  Branch (1998:3): [True: 0, False: 376]
  ------------------
 1999|      0|    expr_init(v, VKSTR, 0);
 2000|      0|    v->u.sval = strV(&ls->tokval);
  ------------------
  |  |  859|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2001|      0|    break;
 2002|      0|  case TK_nil:
  ------------------
  |  Branch (2002:3): [True: 0, False: 376]
  ------------------
 2003|      0|    expr_init(v, VKNIL, 0);
 2004|      0|    break;
 2005|      0|  case TK_true:
  ------------------
  |  Branch (2005:3): [True: 0, False: 376]
  ------------------
 2006|      0|    expr_init(v, VKTRUE, 0);
 2007|      0|    break;
 2008|      0|  case TK_false:
  ------------------
  |  Branch (2008:3): [True: 0, False: 376]
  ------------------
 2009|      0|    expr_init(v, VKFALSE, 0);
 2010|      0|    break;
 2011|      0|  case TK_dots: {  /* Vararg. */
  ------------------
  |  Branch (2011:3): [True: 0, False: 376]
  ------------------
 2012|      0|    FuncState *fs = ls->fs;
 2013|      0|    BCReg base;
 2014|      0|    checkcond(ls, fs->flags & PROTO_VARARG, LJ_ERR_XDOTS);
  ------------------
  |  |  194|      0|#define checkcond(ls, c, em)		{ if (!(c)) err_syntax(ls, em); }
  |  |  ------------------
  |  |  |  Branch (194:37): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2015|      0|    bcreg_reserve(fs, 1);
 2016|      0|    base = fs->freereg-1;
 2017|      0|    expr_init(v, VCALL, bcemit_ABC(fs, BC_VARG, base, 2, fs->numparams));
  ------------------
  |  |  434|      0|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
 2018|      0|    v->u.s.aux = base;
 2019|      0|    break;
 2020|      0|  }
 2021|      0|  case '{':  /* Table constructor. */
  ------------------
  |  Branch (2021:3): [True: 0, False: 376]
  ------------------
 2022|      0|    expr_table(ls, v);
 2023|      0|    return;
 2024|      0|  case TK_function:
  ------------------
  |  Branch (2024:3): [True: 0, False: 376]
  ------------------
 2025|      0|    lj_lex_next(ls);
 2026|      0|    parse_body(ls, v, 0, ls->linenumber);
 2027|      0|    return;
 2028|    188|  default:
  ------------------
  |  Branch (2028:3): [True: 188, False: 188]
  ------------------
 2029|    188|    expr_primary(ls, v);
 2030|    188|    return;
 2031|    376|  }
 2032|    188|  lj_lex_next(ls);
 2033|    188|}
lj_parse.c:expr_init:
   84|    564|{
   85|    564|  e->k = k;
   86|    564|  e->u.s.info = info;
   87|    564|  e->f = e->t = NO_JMP;
  ------------------
  |  |   31|    564|#define NO_JMP		(~(BCPos)0)
  ------------------
   88|    564|}
lj_parse.c:bcreg_reserve:
  391|    376|{
  392|    376|  bcreg_bump(fs, n);
  393|    376|  fs->freereg += n;
  394|    376|}
lj_parse.c:bcreg_bump:
  380|    376|{
  381|    376|  BCReg sz = fs->freereg + n;
  382|    376|  if (sz > fs->framesize) {
  ------------------
  |  Branch (382:7): [True: 0, False: 376]
  ------------------
  383|      0|    if (sz >= LJ_MAX_SLOTS)
  ------------------
  |  |   67|      0|#define LJ_MAX_SLOTS	250		/* Max. # of slots in a Lua func. */
  ------------------
  |  Branch (383:9): [True: 0, False: 0]
  ------------------
  384|      0|      err_syntax(fs->ls, LJ_ERR_XSLOTS);
  385|      0|    fs->framesize = (uint8_t)sz;
  386|      0|  }
  387|    376|}
lj_parse.c:expr_toval:
  614|    376|{
  615|    376|  if (expr_hasjump(e))
  ------------------
  |  |   71|    376|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (71:26): [True: 0, False: 376]
  |  |  ------------------
  ------------------
  616|      0|    expr_toanyreg(fs, e);
  617|    376|  else
  618|    376|    expr_discharge(fs, e);
  619|    376|}
lj_parse.c:expr_discharge:
  444|  1.69k|{
  445|  1.69k|  BCIns ins;
  446|  1.69k|  if (e->k == VUPVAL) {
  ------------------
  |  Branch (446:7): [True: 0, False: 1.69k]
  ------------------
  447|      0|    ins = BCINS_AD(BC_UGET, 0, e->u.s.info);
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  448|  1.69k|  } else if (e->k == VGLOBAL) {
  ------------------
  |  Branch (448:14): [True: 188, False: 1.50k]
  ------------------
  449|    188|    ins = BCINS_AD(BC_GGET, 0, const_str(fs, e));
  ------------------
  |  |   56|    188|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  450|  1.50k|  } else if (e->k == VINDEXED) {
  ------------------
  |  Branch (450:14): [True: 0, False: 1.50k]
  ------------------
  451|      0|    BCReg rc = e->u.s.aux;
  452|      0|    if ((int32_t)rc < 0) {
  ------------------
  |  Branch (452:9): [True: 0, False: 0]
  ------------------
  453|      0|      ins = BCINS_ABC(BC_TGETS, 0, e->u.s.info, ~rc);
  ------------------
  |  |   54|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  454|      0|    } else if (rc > BCMAX_C) {
  ------------------
  |  |   27|      0|#define BCMAX_C		0xff
  ------------------
  |  Branch (454:16): [True: 0, False: 0]
  ------------------
  455|      0|      ins = BCINS_ABC(BC_TGETB, 0, e->u.s.info, rc-(BCMAX_C+1));
  ------------------
  |  |   54|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  456|      0|    } else {
  457|      0|      bcreg_free(fs, rc);
  458|      0|      ins = BCINS_ABC(BC_TGETV, 0, e->u.s.info, rc);
  ------------------
  |  |   54|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  459|      0|    }
  460|      0|    bcreg_free(fs, e->u.s.info);
  461|  1.50k|  } else if (e->k == VCALL) {
  ------------------
  |  Branch (461:14): [True: 0, False: 1.50k]
  ------------------
  462|      0|    e->u.s.info = e->u.s.aux;
  463|      0|    e->k = VNONRELOC;
  464|      0|    return;
  465|  1.50k|  } else if (e->k == VLOCAL) {
  ------------------
  |  Branch (465:14): [True: 0, False: 1.50k]
  ------------------
  466|      0|    e->k = VNONRELOC;
  467|      0|    return;
  468|  1.50k|  } else {
  469|  1.50k|    return;
  470|  1.50k|  }
  471|    188|  e->u.s.info = bcemit_INS(fs, ins);
  472|    188|  e->k = VRELOCABLE;
  473|    188|}
lj_parse.c:const_str:
  233|    376|{
  234|    376|  lj_assertFS(expr_isstrk(e) || e->k == VGLOBAL, "bad usage");
  ------------------
  |  |  167|    376|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    376|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    752|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 376]
  |  |  |  |  |  |  |  Branch (355:5): [True: 376, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    376|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  235|    376|  return const_gc(fs, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  775|    376|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                return const_gc(fs, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  264|    376|#define LJ_TSTR			(~4u)
  ------------------
  236|    376|}
lj_parse.c:bcreg_free:
  398|    188|{
  399|    188|  if (reg >= fs->nactvar) {
  ------------------
  |  Branch (399:7): [True: 188, False: 0]
  ------------------
  400|    188|    fs->freereg--;
  401|    188|    lj_assertFS(reg == fs->freereg, "bad regfree");
  ------------------
  |  |  167|    188|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    188|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    188|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 188, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  402|    188|  }
  403|    188|}
lj_parse.c:lex_str:
 1039|    376|{
 1040|    376|  GCstr *s;
 1041|    376|  if (ls->tok != TK_name && (LJ_52 || ls->tok != TK_goto))
  ------------------
  |  |  697|      0|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (1041:7): [True: 0, False: 376]
  |  Branch (1041:39): [True: 0, False: 0]
  ------------------
 1042|      0|    err_token(ls, TK_name);
 1043|    376|  s = strV(&ls->tokval);
  ------------------
  |  |  859|    376|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    376|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    376|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    376|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 376, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    376|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1044|      0|  lj_lex_next(ls);
 1045|    376|  return s;
 1046|    376|}
lj_parse.c:const_gc:
  219|    376|{
  220|    376|  lua_State *L = fs->L;
  221|    376|  TValue key, *o;
  222|    376|  setgcV(L, &key, gc, itype);
  223|       |  /* NOBARRIER: the key is new or kept alive. */
  224|    376|  o = lj_tab_set(L, fs->kt, &key);
  225|    376|  if (tvhaskslot(o))
  ------------------
  |  |  201|    376|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 188, False: 188]
  |  |  ------------------
  ------------------
  226|    188|    return tvkslot(o);
  ------------------
  |  |  202|    188|#define tvkslot(o)	((o)->u32.lo)
  ------------------
  227|    188|  o->u64 = fs->nkgc;
  228|    188|  return fs->nkgc++;
  229|    376|}
lj_parse.c:expr_toanyreg:
  599|    564|{
  600|    564|  expr_discharge(fs, e);
  601|    564|  if (e->k == VNONRELOC) {
  ------------------
  |  Branch (601:7): [True: 188, False: 376]
  ------------------
  602|    188|    if (!expr_hasjump(e)) return e->u.s.info;  /* Already in a register. */
  ------------------
  |  |   71|    188|#define expr_hasjump(e)		((e)->t != (e)->f)
  ------------------
  |  Branch (602:9): [True: 188, False: 0]
  ------------------
  603|      0|    if (e->u.s.info >= fs->nactvar) {
  ------------------
  |  Branch (603:9): [True: 0, False: 0]
  ------------------
  604|      0|      expr_toreg(fs, e, e->u.s.info);  /* Discharge to temp. register. */
  605|      0|      return e->u.s.info;
  606|      0|    }
  607|      0|  }
  608|    376|  expr_tonextreg(fs, e);  /* Discharge to next register. */
  609|    376|  return e->u.s.info;
  610|    564|}
lj_parse.c:expr_toreg:
  565|    376|{
  566|    376|  expr_toreg_nobranch(fs, e, reg);
  567|    376|  if (e->k == VJMP)
  ------------------
  |  Branch (567:7): [True: 0, False: 376]
  ------------------
  568|      0|    jmp_append(fs, &e->t, e->u.s.info);  /* Add it to the true jump list. */
  569|    376|  if (expr_hasjump(e)) {  /* Discharge expression with branches. */
  ------------------
  |  |   71|    376|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (71:26): [True: 0, False: 376]
  |  |  ------------------
  ------------------
  570|      0|    BCPos jend, jfalse = NO_JMP, jtrue = NO_JMP;
  ------------------
  |  |   31|      0|#define NO_JMP		(~(BCPos)0)
  ------------------
                  BCPos jend, jfalse = NO_JMP, jtrue = NO_JMP;
  ------------------
  |  |   31|      0|#define NO_JMP		(~(BCPos)0)
  ------------------
  571|      0|    if (jmp_novalue(fs, e->t) || jmp_novalue(fs, e->f)) {
  ------------------
  |  Branch (571:9): [True: 0, False: 0]
  |  Branch (571:34): [True: 0, False: 0]
  ------------------
  572|      0|      BCPos jval = (e->k == VJMP) ? NO_JMP : bcemit_jmp(fs);
  ------------------
  |  |   31|      0|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (572:20): [True: 0, False: 0]
  ------------------
  573|      0|      jfalse = bcemit_AD(fs, BC_KPRI, reg, VKFALSE);
  ------------------
  |  |  435|      0|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  574|      0|      bcemit_AJ(fs, BC_JMP, fs->freereg, 1);
  ------------------
  |  |  436|      0|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|      0|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  575|      0|      jtrue = bcemit_AD(fs, BC_KPRI, reg, VKTRUE);
  ------------------
  |  |  435|      0|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  576|      0|      jmp_tohere(fs, jval);
  577|      0|    }
  578|      0|    jend = fs->pc;
  579|      0|    fs->lasttarget = jend;
  580|      0|    jmp_patchval(fs, e->f, jend, reg, jfalse);
  581|      0|    jmp_patchval(fs, e->t, jend, reg, jtrue);
  582|      0|  }
  583|    376|  e->f = e->t = NO_JMP;
  ------------------
  |  |   31|    376|#define NO_JMP		(~(BCPos)0)
  ------------------
  584|    376|  e->u.s.info = reg;
  585|    376|  e->k = VNONRELOC;
  586|    376|}
lj_parse.c:expr_toreg_nobranch:
  513|    376|{
  514|    376|  BCIns ins;
  515|    376|  expr_discharge(fs, e);
  516|    376|  if (e->k == VKSTR) {
  ------------------
  |  Branch (516:7): [True: 0, False: 376]
  ------------------
  517|      0|    ins = BCINS_AD(BC_KSTR, reg, const_str(fs, e));
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  518|    376|  } else if (e->k == VKNUM) {
  ------------------
  |  Branch (518:14): [True: 0, False: 376]
  ------------------
  519|       |#if LJ_DUALNUM
  520|       |    cTValue *tv = expr_numtv(e);
  521|       |    if (tvisint(tv) && checki16(intV(tv)))
  522|       |      ins = BCINS_AD(BC_KSHORT, reg, (BCReg)(uint16_t)intV(tv));
  523|       |    else
  524|       |#else
  525|      0|    lua_Number n = expr_numberV(e);
  ------------------
  |  |   80|      0|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|      0|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  526|      0|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  527|      0|    if (checki16(k) && n == (lua_Number)k)
  ------------------
  |  |  103|      0|#define checki16(x)	((x) == (int32_t)(int16_t)(x))
  |  |  ------------------
  |  |  |  Branch (103:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (527:24): [True: 0, False: 0]
  ------------------
  528|      0|      ins = BCINS_AD(BC_KSHORT, reg, (BCReg)(uint16_t)k);
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  529|      0|    else
  530|      0|#endif
  531|      0|      ins = BCINS_AD(BC_KNUM, reg, const_num(fs, e));
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  532|      0|#if LJ_HASFFI
  533|    376|  } else if (e->k == VKCDATA) {
  ------------------
  |  Branch (533:14): [True: 0, False: 376]
  ------------------
  534|      0|    fs->flags |= PROTO_FFI;
  ------------------
  |  |  401|      0|#define PROTO_FFI		0x04	/* Uses BC_KCDATA for FFI datatypes. */
  ------------------
  535|      0|    ins = BCINS_AD(BC_KCDATA, reg,
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  536|      0|		   const_gc(fs, obj2gco(cdataV(&e->u.nval)), LJ_TCDATA));
  537|      0|#endif
  538|    376|  } else if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (538:14): [True: 376, False: 0]
  ------------------
  539|    376|    setbc_a(bcptr(fs, e), reg);
  ------------------
  |  |   45|    376|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|    376|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    376|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  540|    376|    goto noins;
  541|    376|  } else if (e->k == VNONRELOC) {
  ------------------
  |  Branch (541:14): [True: 0, False: 0]
  ------------------
  542|      0|    if (reg == e->u.s.info)
  ------------------
  |  Branch (542:9): [True: 0, False: 0]
  ------------------
  543|      0|      goto noins;
  544|      0|    ins = BCINS_AD(BC_MOV, reg, e->u.s.info);
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  545|      0|  } else if (e->k == VKNIL) {
  ------------------
  |  Branch (545:14): [True: 0, False: 0]
  ------------------
  546|      0|    bcemit_nil(fs, reg, 1);
  547|      0|    goto noins;
  548|      0|  } else if (e->k <= VKTRUE) {
  ------------------
  |  Branch (548:14): [True: 0, False: 0]
  ------------------
  549|      0|    ins = BCINS_AD(BC_KPRI, reg, const_pri(e));
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  550|      0|  } else {
  551|      0|    lj_assertFS(e->k == VVOID || e->k == VJMP, "bad expr type %d", e->k);
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  552|      0|    return;
  553|      0|  }
  554|      0|  bcemit_INS(fs, ins);
  555|    376|noins:
  556|    376|  e->u.s.info = reg;
  557|    376|  e->k = VNONRELOC;
  558|    376|}
lj_parse.c:expr_tonextreg:
  590|    376|{
  591|    376|  expr_discharge(fs, e);
  592|    376|  expr_free(fs, e);
  593|    376|  bcreg_reserve(fs, 1);
  594|    376|  expr_toreg(fs, e, fs->freereg - 1);
  595|    376|}
lj_parse.c:expr_free:
  407|    564|{
  408|    564|  if (e->k == VNONRELOC)
  ------------------
  |  Branch (408:7): [True: 188, False: 376]
  ------------------
  409|    188|    bcreg_free(fs, e->u.s.info);
  410|    564|}
lj_parse.c:bcemit_store:
  623|    188|{
  624|    188|  BCIns ins;
  625|    188|  if (var->k == VLOCAL) {
  ------------------
  |  Branch (625:7): [True: 0, False: 188]
  ------------------
  626|      0|    fs->ls->vstack[var->u.s.aux].info |= VSTACK_VAR_RW;
  ------------------
  |  |  118|      0|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  627|      0|    expr_free(fs, e);
  628|      0|    expr_toreg(fs, e, var->u.s.info);
  629|      0|    return;
  630|    188|  } else if (var->k == VUPVAL) {
  ------------------
  |  Branch (630:14): [True: 0, False: 188]
  ------------------
  631|      0|    fs->ls->vstack[var->u.s.aux].info |= VSTACK_VAR_RW;
  ------------------
  |  |  118|      0|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  632|      0|    expr_toval(fs, e);
  633|      0|    if (e->k <= VKTRUE)
  ------------------
  |  Branch (633:9): [True: 0, False: 0]
  ------------------
  634|      0|      ins = BCINS_AD(BC_USETP, var->u.s.info, const_pri(e));
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  635|      0|    else if (e->k == VKSTR)
  ------------------
  |  Branch (635:14): [True: 0, False: 0]
  ------------------
  636|      0|      ins = BCINS_AD(BC_USETS, var->u.s.info, const_str(fs, e));
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  637|      0|    else if (e->k == VKNUM)
  ------------------
  |  Branch (637:14): [True: 0, False: 0]
  ------------------
  638|      0|      ins = BCINS_AD(BC_USETN, var->u.s.info, const_num(fs, e));
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  639|      0|    else
  640|      0|      ins = BCINS_AD(BC_USETV, var->u.s.info, expr_toanyreg(fs, e));
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  641|    188|  } else if (var->k == VGLOBAL) {
  ------------------
  |  Branch (641:14): [True: 188, False: 0]
  ------------------
  642|    188|    BCReg ra = expr_toanyreg(fs, e);
  643|    188|    ins = BCINS_AD(BC_GSET, ra, const_str(fs, var));
  ------------------
  |  |   56|    188|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  644|    188|  } else {
  645|      0|    BCReg ra, rc;
  646|      0|    lj_assertFS(var->k == VINDEXED, "bad expr type %d", var->k);
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  647|      0|    ra = expr_toanyreg(fs, e);
  648|      0|    rc = var->u.s.aux;
  649|      0|    if ((int32_t)rc < 0) {
  ------------------
  |  Branch (649:9): [True: 0, False: 0]
  ------------------
  650|      0|      ins = BCINS_ABC(BC_TSETS, ra, var->u.s.info, ~rc);
  ------------------
  |  |   54|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  651|      0|    } else if (rc > BCMAX_C) {
  ------------------
  |  |   27|      0|#define BCMAX_C		0xff
  ------------------
  |  Branch (651:16): [True: 0, False: 0]
  ------------------
  652|      0|      ins = BCINS_ABC(BC_TSETB, ra, var->u.s.info, rc-(BCMAX_C+1));
  ------------------
  |  |   54|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  653|      0|    } else {
  654|      0|#ifdef LUA_USE_ASSERT
  655|       |      /* Free late alloced key reg to avoid assert on free of value reg. */
  656|       |      /* This can only happen when called from expr_table(). */
  657|      0|      if (e->k == VNONRELOC && ra >= fs->nactvar && rc >= ra)
  ------------------
  |  Branch (657:11): [True: 0, False: 0]
  |  Branch (657:32): [True: 0, False: 0]
  |  Branch (657:53): [True: 0, False: 0]
  ------------------
  658|      0|	bcreg_free(fs, rc);
  659|      0|#endif
  660|      0|      ins = BCINS_ABC(BC_TSETV, ra, var->u.s.info, rc);
  ------------------
  |  |   54|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  661|      0|    }
  662|      0|  }
  663|    188|  bcemit_INS(fs, ins);
  664|    188|  expr_free(fs, e);
  665|    188|}
lj_parse.c:const_num:
  206|    188|{
  207|    188|  lua_State *L = fs->L;
  208|    188|  TValue *o;
  209|    188|  lj_assertFS(expr_isnumk(e), "bad usage");
  ------------------
  |  |  167|    188|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    188|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    188|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 188, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  210|    188|  o = lj_tab_set(L, fs->kt, &e->u.nval);
  211|    188|  if (tvhaskslot(o))
  ------------------
  |  |  201|    188|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 0, False: 188]
  |  |  ------------------
  ------------------
  212|      0|    return tvkslot(o);
  ------------------
  |  |  202|      0|#define tvkslot(o)	((o)->u32.lo)
  ------------------
  213|    188|  o->u64 = fs->nkn;
  214|    188|  return fs->nkn++;
  215|    188|}
lj_parse.c:expr_primary:
 1952|    376|{
 1953|    376|  FuncState *fs = ls->fs;
 1954|       |  /* Parse prefix expression. */
 1955|    376|  if (ls->tok == '(') {
  ------------------
  |  Branch (1955:7): [True: 0, False: 376]
  ------------------
 1956|      0|    BCLine line = ls->linenumber;
 1957|      0|    lj_lex_next(ls);
 1958|      0|    expr(ls, v);
 1959|      0|    lex_match(ls, ')', '(', line);
 1960|      0|    expr_discharge(ls->fs, v);
 1961|    376|  } else if (ls->tok == TK_name || (!LJ_52 && ls->tok == TK_goto)) {
  ------------------
  |  |  697|      0|#define LJ_52			0
  ------------------
  |  Branch (1961:14): [True: 376, False: 0]
  |  Branch (1961:37): [Folded - Ignored]
  |  Branch (1961:47): [True: 0, False: 0]
  ------------------
 1962|    376|    var_lookup(ls, v);
  ------------------
  |  | 1157|    376|  var_lookup_((ls)->fs, lex_str(ls), (e), 1)
  ------------------
 1963|    376|  } else {
 1964|      0|    err_syntax(ls, LJ_ERR_XSYMBOL);
 1965|      0|  }
 1966|    376|  for (;;) {  /* Parse multiple expression suffixes. */
 1967|    376|    if (ls->tok == '.') {
  ------------------
  |  Branch (1967:9): [True: 0, False: 376]
  ------------------
 1968|      0|      expr_field(ls, v);
 1969|    376|    } else if (ls->tok == '[') {
  ------------------
  |  Branch (1969:16): [True: 0, False: 376]
  ------------------
 1970|      0|      ExpDesc key;
 1971|      0|      expr_toanyreg(fs, v);
 1972|      0|      expr_bracket(ls, &key);
 1973|      0|      expr_index(fs, v, &key);
 1974|    376|    } else if (ls->tok == ':') {
  ------------------
  |  Branch (1974:16): [True: 0, False: 376]
  ------------------
 1975|      0|      ExpDesc key;
 1976|      0|      lj_lex_next(ls);
 1977|      0|      expr_str(ls, &key);
 1978|      0|      bcemit_method(fs, v, &key);
 1979|      0|      parse_args(ls, v);
 1980|    376|    } else if (ls->tok == '(' || ls->tok == TK_string || ls->tok == '{') {
  ------------------
  |  Branch (1980:16): [True: 0, False: 376]
  |  Branch (1980:34): [True: 0, False: 376]
  |  Branch (1980:58): [True: 0, False: 376]
  ------------------
 1981|      0|      expr_tonextreg(fs, v);
 1982|      0|      if (ls->fr2) bcreg_reserve(fs, 1);
  ------------------
  |  Branch (1982:11): [True: 0, False: 0]
  ------------------
 1983|      0|      parse_args(ls, v);
 1984|    376|    } else {
 1985|    376|      break;
 1986|    376|    }
 1987|    376|  }
 1988|    376|}
lj_parse.c:var_lookup_:
 1132|    752|{
 1133|    752|  if (fs) {
  ------------------
  |  Branch (1133:7): [True: 376, False: 376]
  ------------------
 1134|    376|    BCReg reg = var_lookup_local(fs, name);
 1135|    376|    if ((int32_t)reg >= 0) {  /* Local in this function? */
  ------------------
  |  Branch (1135:9): [True: 0, False: 376]
  ------------------
 1136|      0|      expr_init(e, VLOCAL, reg);
 1137|      0|      if (!first)
  ------------------
  |  Branch (1137:11): [True: 0, False: 0]
  ------------------
 1138|      0|	fscope_uvmark(fs, reg);  /* Scope now has an upvalue. */
 1139|      0|      return (MSize)(e->u.s.aux = (uint32_t)fs->varmap[reg]);
 1140|    376|    } else {
 1141|    376|      MSize vidx = var_lookup_(fs->prev, name, e, 0);  /* Var in outer func? */
 1142|    376|      if ((int32_t)vidx >= 0) {  /* Yes, make it an upvalue here. */
  ------------------
  |  Branch (1142:11): [True: 0, False: 376]
  ------------------
 1143|      0|	e->u.s.info = (uint8_t)var_lookup_uv(fs, vidx, e);
 1144|      0|	e->k = VUPVAL;
 1145|      0|	return vidx;
 1146|      0|      }
 1147|    376|    }
 1148|    376|  } else {  /* Not found in any function, must be a global. */
 1149|    376|    expr_init(e, VGLOBAL, 0);
 1150|    376|    e->u.sval = name;
 1151|    376|  }
 1152|    752|  return (MSize)-1;  /* Global. */
 1153|    752|}
lj_parse.c:var_lookup_local:
 1102|    376|{
 1103|    376|  int i;
 1104|    376|  for (i = fs->nactvar-1; i >= 0; i--) {
  ------------------
  |  Branch (1104:27): [True: 0, False: 376]
  ------------------
 1105|      0|    if (n == strref(var_get(fs->ls, fs, i).name))
  ------------------
  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (1105:9): [True: 0, False: 0]
  ------------------
 1106|      0|      return (BCReg)i;
 1107|      0|  }
 1108|    376|  return (BCReg)-1;  /* Not found. */
 1109|    376|}
lj_parse.c:expr_list:
 1892|    188|{
 1893|    188|  BCReg n = 1;
 1894|    188|  expr(ls, v);
 1895|    188|  while (lex_opt(ls, ',')) {
  ------------------
  |  Branch (1895:10): [True: 0, False: 188]
  ------------------
 1896|      0|    expr_tonextreg(ls->fs, v);
 1897|      0|    expr(ls, v);
 1898|      0|    n++;
 1899|      0|  }
 1900|    188|  return n;
 1901|    188|}
lj_parse.c:token2binop:
 2046|    376|{
 2047|    376|  switch (tok) {
 2048|    188|  case '+':	return OPR_ADD;
  ------------------
  |  Branch (2048:3): [True: 188, False: 188]
  ------------------
 2049|      0|  case '-':	return OPR_SUB;
  ------------------
  |  Branch (2049:3): [True: 0, False: 376]
  ------------------
 2050|      0|  case '*':	return OPR_MUL;
  ------------------
  |  Branch (2050:3): [True: 0, False: 376]
  ------------------
 2051|      0|  case '/':	return OPR_DIV;
  ------------------
  |  Branch (2051:3): [True: 0, False: 376]
  ------------------
 2052|      0|  case '%':	return OPR_MOD;
  ------------------
  |  Branch (2052:3): [True: 0, False: 376]
  ------------------
 2053|      0|  case '^':	return OPR_POW;
  ------------------
  |  Branch (2053:3): [True: 0, False: 376]
  ------------------
 2054|      0|  case TK_concat: return OPR_CONCAT;
  ------------------
  |  Branch (2054:3): [True: 0, False: 376]
  ------------------
 2055|      0|  case TK_ne:	return OPR_NE;
  ------------------
  |  Branch (2055:3): [True: 0, False: 376]
  ------------------
 2056|      0|  case TK_eq:	return OPR_EQ;
  ------------------
  |  Branch (2056:3): [True: 0, False: 376]
  ------------------
 2057|      0|  case '<':	return OPR_LT;
  ------------------
  |  Branch (2057:3): [True: 0, False: 376]
  ------------------
 2058|      0|  case TK_le:	return OPR_LE;
  ------------------
  |  Branch (2058:3): [True: 0, False: 376]
  ------------------
 2059|      0|  case '>':	return OPR_GT;
  ------------------
  |  Branch (2059:3): [True: 0, False: 376]
  ------------------
 2060|      0|  case TK_ge:	return OPR_GE;
  ------------------
  |  Branch (2060:3): [True: 0, False: 376]
  ------------------
 2061|      0|  case TK_and:	return OPR_AND;
  ------------------
  |  Branch (2061:3): [True: 0, False: 376]
  ------------------
 2062|      0|  case TK_or:	return OPR_OR;
  ------------------
  |  Branch (2062:3): [True: 0, False: 376]
  ------------------
 2063|    188|  default:	return OPR_NOBINOPR;
  ------------------
  |  Branch (2063:3): [True: 188, False: 188]
  ------------------
 2064|    376|  }
 2065|    376|}
lj_parse.c:bcemit_binop_left:
  884|    188|{
  885|    188|  if (op == OPR_AND) {
  ------------------
  |  Branch (885:7): [True: 0, False: 188]
  ------------------
  886|      0|    bcemit_branch_t(fs, e);
  887|    188|  } else if (op == OPR_OR) {
  ------------------
  |  Branch (887:14): [True: 0, False: 188]
  ------------------
  888|      0|    bcemit_branch_f(fs, e);
  889|    188|  } else if (op == OPR_CONCAT) {
  ------------------
  |  Branch (889:14): [True: 0, False: 188]
  ------------------
  890|      0|    expr_tonextreg(fs, e);
  891|    188|  } else if (op == OPR_EQ || op == OPR_NE) {
  ------------------
  |  Branch (891:14): [True: 0, False: 188]
  |  Branch (891:30): [True: 0, False: 188]
  ------------------
  892|      0|    if (!expr_isk_nojump(e)) expr_toanyreg(fs, e);
  ------------------
  |  |   74|      0|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|      0|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|      0|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  893|    188|  } else {
  894|    188|    if (!expr_isnumk_nojump(e)) expr_toanyreg(fs, e);
  ------------------
  |  |   76|    188|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|    376|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 0, False: 188]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|      0|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  895|    188|  }
  896|    188|}
lj_parse.c:bcemit_binop:
  900|    188|{
  901|    188|  if (op <= OPR_POW) {
  ------------------
  |  Branch (901:7): [True: 188, False: 0]
  ------------------
  902|    188|    bcemit_arith(fs, op, e1, e2);
  903|    188|  } else if (op == OPR_AND) {
  ------------------
  |  Branch (903:14): [True: 0, False: 0]
  ------------------
  904|      0|    lj_assertFS(e1->t == NO_JMP, "jump list not closed");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  905|      0|    expr_discharge(fs, e2);
  906|      0|    jmp_append(fs, &e2->f, e1->f);
  907|      0|    *e1 = *e2;
  908|      0|  } else if (op == OPR_OR) {
  ------------------
  |  Branch (908:14): [True: 0, False: 0]
  ------------------
  909|      0|    lj_assertFS(e1->f == NO_JMP, "jump list not closed");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  910|      0|    expr_discharge(fs, e2);
  911|      0|    jmp_append(fs, &e2->t, e1->t);
  912|      0|    *e1 = *e2;
  913|      0|  } else if (op == OPR_CONCAT) {
  ------------------
  |  Branch (913:14): [True: 0, False: 0]
  ------------------
  914|      0|    expr_toval(fs, e2);
  915|      0|    if (e2->k == VRELOCABLE && bc_op(*bcptr(fs, e2)) == BC_CAT) {
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (915:9): [True: 0, False: 0]
  |  Branch (915:32): [True: 0, False: 0]
  ------------------
  916|      0|      lj_assertFS(e1->u.s.info == bc_b(*bcptr(fs, e2))-1,
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  917|      0|		  "bad CAT stack layout");
  918|      0|      expr_free(fs, e1);
  919|      0|      setbc_b(bcptr(fs, e2), e1->u.s.info);
  ------------------
  |  |   46|      0|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|      0|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|      0|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  920|      0|      e1->u.s.info = e2->u.s.info;
  921|      0|    } else {
  922|      0|      expr_tonextreg(fs, e2);
  923|      0|      expr_free(fs, e2);
  924|      0|      expr_free(fs, e1);
  925|      0|      e1->u.s.info = bcemit_ABC(fs, BC_CAT, 0, e1->u.s.info, e2->u.s.info);
  ------------------
  |  |  434|      0|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  926|      0|    }
  927|      0|    e1->k = VRELOCABLE;
  928|      0|  } else {
  929|      0|    lj_assertFS(op == OPR_NE || op == OPR_EQ ||
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  930|      0|	       op == OPR_LT || op == OPR_GE || op == OPR_LE || op == OPR_GT,
  931|      0|	       "bad binop %d", op);
  932|      0|    bcemit_comp(fs, op, e1, e2);
  933|      0|  }
  934|    188|}
lj_parse.c:bcemit_arith:
  797|    188|{
  798|    188|  BCReg rb, rc, t;
  799|    188|  uint32_t op;
  800|    188|  if (foldarith(opr, e1, e2))
  ------------------
  |  Branch (800:7): [True: 0, False: 188]
  ------------------
  801|      0|    return;
  802|    188|  if (opr == OPR_POW) {
  ------------------
  |  Branch (802:7): [True: 0, False: 188]
  ------------------
  803|      0|    op = BC_POW;
  804|      0|    rc = expr_toanyreg(fs, e2);
  805|      0|    rb = expr_toanyreg(fs, e1);
  806|    188|  } else {
  807|    188|    op = opr-OPR_ADD+BC_ADDVV;
  808|       |    /* Must discharge 2nd operand first since VINDEXED might free regs. */
  809|    188|    expr_toval(fs, e2);
  810|    188|    if (expr_isnumk(e2) && (rc = const_num(fs, e2)) <= BCMAX_C)
  ------------------
  |  |   75|    376|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 188, False: 0]
  |  |  ------------------
  ------------------
                  if (expr_isnumk(e2) && (rc = const_num(fs, e2)) <= BCMAX_C)
  ------------------
  |  |   27|    188|#define BCMAX_C		0xff
  ------------------
  |  Branch (810:28): [True: 188, False: 0]
  ------------------
  811|    188|      op -= BC_ADDVV-BC_ADDVN;
  812|      0|    else
  813|      0|      rc = expr_toanyreg(fs, e2);
  814|       |    /* 1st operand discharged by bcemit_binop_left, but need KNUM/KSHORT. */
  815|    188|    lj_assertFS(expr_isnumk(e1) || e1->k == VNONRELOC,
  ------------------
  |  |  167|    188|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    188|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    376|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 188]
  |  |  |  |  |  |  |  Branch (355:5): [True: 188, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  816|    188|		"bad expr type %d", e1->k);
  817|    188|    expr_toval(fs, e1);
  818|       |    /* Avoid two consts to satisfy bytecode constraints. */
  819|    188|    if (expr_isnumk(e1) && !expr_isnumk(e2) &&
  ------------------
  |  |   75|    376|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 0, False: 188]
  |  |  ------------------
  ------------------
                  if (expr_isnumk(e1) && !expr_isnumk(e2) &&
  ------------------
  |  |   75|    188|#define expr_isnumk(e)		((e)->k == VKNUM)
  ------------------
  |  Branch (819:28): [True: 0, False: 0]
  ------------------
  820|    188|	(t = const_num(fs, e1)) <= BCMAX_B) {
  ------------------
  |  |   26|      0|#define BCMAX_B		0xff
  ------------------
  |  Branch (820:2): [True: 0, False: 0]
  ------------------
  821|      0|      rb = rc; rc = t; op -= BC_ADDVV-BC_ADDNV;
  822|    188|    } else {
  823|    188|      rb = expr_toanyreg(fs, e1);
  824|    188|    }
  825|    188|  }
  826|       |  /* Using expr_free might cause asserts if the order is wrong. */
  827|    188|  if (e1->k == VNONRELOC && e1->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (827:7): [True: 188, False: 0]
  |  Branch (827:29): [True: 188, False: 0]
  ------------------
  828|    188|  if (e2->k == VNONRELOC && e2->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (828:7): [True: 0, False: 188]
  |  Branch (828:29): [True: 0, False: 0]
  ------------------
  829|    188|  e1->u.s.info = bcemit_ABC(fs, op, 0, rb, rc);
  ------------------
  |  |  434|    188|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|    188|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  830|    188|  e1->k = VRELOCABLE;
  831|    188|}
lj_parse.c:foldarith:
  777|    188|{
  778|    188|  TValue o;
  779|    188|  lua_Number n;
  780|    188|  if (!expr_isnumk_nojump(e1) || !expr_isnumk_nojump(e2)) return 0;
  ------------------
  |  |   76|    376|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|    376|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 0, False: 188]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|      0|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                if (!expr_isnumk_nojump(e1) || !expr_isnumk_nojump(e2)) return 0;
  ------------------
  |  |   76|      0|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|      0|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|      0|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  781|      0|  n = lj_vm_foldarith(expr_numberV(e1), expr_numberV(e2), (int)opr-OPR_ADD);
  ------------------
  |  |   80|      0|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|      0|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                n = lj_vm_foldarith(expr_numberV(e1), expr_numberV(e2), (int)opr-OPR_ADD);
  ------------------
  |  |   80|      0|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|      0|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  782|      0|  setnumV(&o, n);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  783|      0|  if (tvisnan(&o) || tvismzero(&o)) return 0;  /* Avoid NaN and -0 as consts. */
  ------------------
  |  |  812|      0|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                if (tvisnan(&o) || tvismzero(&o)) return 0;  /* Avoid NaN and -0 as consts. */
  ------------------
  |  |  819|      0|#define tvismzero(o)	((o)->u64 == U64x(80000000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  |  |  |  Branch (819:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  784|      0|  if (LJ_DUALNUM) {
  ------------------
  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  785|      0|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  786|      0|    if ((lua_Number)k == n) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      setintV(&e1->u.nval, k);
  788|      0|      return 1;
  789|      0|    }
  790|      0|  }
  791|      0|  setnumV(&e1->u.nval, n);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  792|      0|  return 1;
  793|      0|}
lj_parse.c:lex_check:
 1017|    188|{
 1018|    188|  if (ls->tok != tok)
  ------------------
  |  Branch (1018:7): [True: 0, False: 188]
  ------------------
 1019|      0|    err_token(ls, tok);
 1020|    188|  lj_lex_next(ls);
 1021|    188|}
lj_parse.c:fscope_end:
 1294|    188|{
 1295|    188|  FuncScope *bl = fs->bl;
 1296|    188|  LexState *ls = fs->ls;
 1297|    188|  fs->bl = bl->prev;
 1298|    188|  var_remove(ls, bl->nactvar);
 1299|    188|  fs->freereg = fs->nactvar;
 1300|    188|  lj_assertFS(bl->nactvar == fs->nactvar, "bad regalloc");
  ------------------
  |  |  167|    188|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    188|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    188|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 188, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1301|    188|  if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  108|    188|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
                if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  109|    188|#define FSCOPE_NOCLOSE		0x10	/* Do not close upvalues. */
  ------------------
                if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  108|    188|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1301:7): [True: 0, False: 188]
  ------------------
 1302|      0|    bcemit_AJ(fs, BC_UCLO, bl->nactvar, 0);
  ------------------
  |  |  436|      0|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|      0|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1303|    188|  if ((bl->flags & FSCOPE_BREAK)) {
  ------------------
  |  |  106|    188|#define FSCOPE_BREAK		0x02	/* Break used in scope. */
  ------------------
  |  Branch (1303:7): [True: 0, False: 188]
  ------------------
 1304|      0|    if ((bl->flags & FSCOPE_LOOP)) {
  ------------------
  |  |  105|      0|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
  |  Branch (1304:9): [True: 0, False: 0]
  ------------------
 1305|      0|      MSize idx = gola_new(ls, NAME_BREAK, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  111|      0|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
                    MSize idx = gola_new(ls, NAME_BREAK, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  120|      0|#define VSTACK_LABEL		0x04	/* Label. */
  ------------------
 1306|      0|      ls->vtop = idx;  /* Drop break label immediately. */
 1307|      0|      gola_resolve(ls, bl, idx);
 1308|      0|    } else {  /* Need the fixup step to propagate the breaks. */
 1309|      0|      gola_fixup(ls, bl);
 1310|      0|      return;
 1311|      0|    }
 1312|      0|  }
 1313|    188|  if ((bl->flags & FSCOPE_GOLA)) {
  ------------------
  |  |  107|    188|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
  |  Branch (1313:7): [True: 0, False: 188]
  ------------------
 1314|      0|    gola_fixup(ls, bl);
 1315|      0|  }
 1316|    188|}
lj_parse.c:var_remove:
 1094|    188|{
 1095|    188|  FuncState *fs = ls->fs;
 1096|    188|  while (fs->nactvar > tolevel)
  ------------------
  |  Branch (1096:10): [True: 0, False: 188]
  ------------------
 1097|      0|    var_get(ls, fs, --fs->nactvar).endpc = fs->pc;
  ------------------
  |  | 1050|      0|#define var_get(ls, fs, i)	((ls)->vstack[(fs)->varmap[(i)]])
  ------------------
 1098|    188|}
lj_parse.c:parse_call_assign:
 2243|    188|{
 2244|    188|  FuncState *fs = ls->fs;
 2245|    188|  LHSVarList vl;
 2246|    188|  expr_primary(ls, &vl.v);
 2247|    188|  if (vl.v.k == VCALL) {  /* Function call statement. */
  ------------------
  |  Branch (2247:7): [True: 0, False: 188]
  ------------------
 2248|      0|    setbc_b(bcptr(fs, &vl.v), 1);  /* No results. */
  ------------------
  |  |   46|      0|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|      0|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|      0|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2249|    188|  } else {  /* Start of an assignment. */
 2250|    188|    vl.prev = NULL;
 2251|    188|    parse_assignment(ls, &vl, 1);
 2252|    188|  }
 2253|    188|}
lj_parse.c:parse_assignment:
 2206|    188|{
 2207|    188|  ExpDesc e;
 2208|    188|  checkcond(ls, VLOCAL <= lh->v.k && lh->v.k <= VINDEXED, LJ_ERR_XSYNTAX);
  ------------------
  |  |  194|    376|#define checkcond(ls, c, em)		{ if (!(c)) err_syntax(ls, em); }
  |  |  ------------------
  |  |  |  Branch (194:39): [True: 188, False: 0]
  |  |  |  Branch (194:39): [True: 188, False: 0]
  |  |  ------------------
  ------------------
 2209|    188|  if (lex_opt(ls, ',')) {  /* Collect LHS list and recurse upwards. */
  ------------------
  |  Branch (2209:7): [True: 0, False: 188]
  ------------------
 2210|      0|    LHSVarList vl;
 2211|      0|    vl.prev = lh;
 2212|      0|    expr_primary(ls, &vl.v);
 2213|      0|    if (vl.v.k == VLOCAL)
  ------------------
  |  Branch (2213:9): [True: 0, False: 0]
  ------------------
 2214|      0|      assign_hazard(ls, lh, &vl.v);
 2215|      0|    checklimit(ls->fs, ls->level + nvars, LJ_MAX_XLEVEL, "variable names");
  ------------------
  |  |  192|      0|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2216|      0|    parse_assignment(ls, &vl, nvars+1);
 2217|    188|  } else {  /* Parse RHS. */
 2218|    188|    BCReg nexps;
 2219|    188|    lex_check(ls, '=');
 2220|    188|    nexps = expr_list(ls, &e);
 2221|    188|    if (nexps == nvars) {
  ------------------
  |  Branch (2221:9): [True: 188, False: 0]
  ------------------
 2222|    188|      if (e.k == VCALL) {
  ------------------
  |  Branch (2222:11): [True: 0, False: 188]
  ------------------
 2223|      0|	if (bc_op(*bcptr(ls->fs, &e)) == BC_VARG) {  /* Vararg assignment. */
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2223:6): [True: 0, False: 0]
  ------------------
 2224|      0|	  ls->fs->freereg--;
 2225|      0|	  e.k = VRELOCABLE;
 2226|      0|	} else {  /* Multiple call results. */
 2227|      0|	  e.u.s.info = e.u.s.aux;  /* Base of call is not relocatable. */
 2228|      0|	  e.k = VNONRELOC;
 2229|      0|	}
 2230|      0|      }
 2231|    188|      bcemit_store(ls->fs, &lh->v, &e);
 2232|    188|      return;
 2233|    188|    }
 2234|      0|    assign_adjust(ls, nvars, nexps, &e);
 2235|      0|  }
 2236|       |  /* Assign RHS to LHS and recurse downwards. */
 2237|      0|  expr_init(&e, VNONRELOC, ls->fs->freereg-1);
 2238|      0|  bcemit_store(ls->fs, &lh->v, &e);
 2239|      0|}
lj_parse.c:lex_opt:
 1007|    564|{
 1008|    564|  if (ls->tok == tok) {
  ------------------
  |  Branch (1008:7): [True: 0, False: 564]
  ------------------
 1009|      0|    lj_lex_next(ls);
 1010|      0|    return 1;
 1011|      0|  }
 1012|    564|  return 0;
 1013|    564|}
lj_parse.c:fs_finish:
 1577|    188|{
 1578|    188|  lua_State *L = ls->L;
 1579|    188|  FuncState *fs = ls->fs;
 1580|    188|  BCLine numline = line - fs->linedefined;
 1581|    188|  size_t sizept, ofsk, ofsuv, ofsli, ofsdbg, ofsvar;
 1582|    188|  GCproto *pt;
 1583|       |
 1584|       |  /* Apply final fixups. */
 1585|    188|  fs_fixup_ret(fs);
 1586|       |
 1587|       |  /* Calculate total size of prototype including all colocated arrays. */
 1588|    188|  sizept = sizeof(GCproto) + fs->pc*sizeof(BCIns) + fs->nkgc*sizeof(GCRef);
 1589|    188|  sizept = (sizept + sizeof(TValue)-1) & ~(sizeof(TValue)-1);
 1590|    188|  ofsk = sizept; sizept += fs->nkn*sizeof(TValue);
 1591|    188|  ofsuv = sizept; sizept += ((fs->nuv+1)&~1)*2;
 1592|    188|  ofsli = sizept; sizept += fs_prep_line(fs, numline);
 1593|    188|  ofsdbg = sizept; sizept += fs_prep_var(ls, fs, &ofsvar);
 1594|       |
 1595|       |  /* Allocate prototype and initialize its fields. */
 1596|    188|  pt = (GCproto *)lj_mem_newgco(L, (MSize)sizept);
 1597|    188|  pt->gct = ~LJ_TPROTO;
  ------------------
  |  |  267|    188|#define LJ_TPROTO		(~7u)
  ------------------
 1598|    188|  pt->sizept = (MSize)sizept;
 1599|    188|  pt->trace = 0;
 1600|    188|  pt->flags = (uint8_t)(fs->flags & ~(PROTO_HAS_RETURN|PROTO_FIXUP_RETURN));
  ------------------
  |  |  405|    188|#define PROTO_HAS_RETURN	0x20	/* Already emitted a return. */
  ------------------
                pt->flags = (uint8_t)(fs->flags & ~(PROTO_HAS_RETURN|PROTO_FIXUP_RETURN));
  ------------------
  |  |  406|    188|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
 1601|    188|  pt->numparams = fs->numparams;
 1602|    188|  pt->framesize = fs->framesize;
 1603|    188|  setgcref(pt->chunkname, obj2gco(ls->chunkname));
  ------------------
  |  |   72|    188|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1604|       |
 1605|       |  /* Close potentially uninitialized gap between bc and kgc. */
 1606|    188|  *(uint32_t *)((char *)pt + ofsk - sizeof(GCRef)*(fs->nkgc+1)) = 0;
 1607|    188|  fs_fixup_bc(fs, pt, (BCIns *)((char *)pt + sizeof(GCproto)), fs->pc);
 1608|    188|  fs_fixup_k(fs, pt, (void *)((char *)pt + ofsk));
 1609|    188|  fs_fixup_uv1(fs, pt, (uint16_t *)((char *)pt + ofsuv));
 1610|    188|  fs_fixup_line(fs, pt, (void *)((char *)pt + ofsli), numline);
 1611|    188|  fs_fixup_var(ls, pt, (uint8_t *)((char *)pt + ofsdbg), ofsvar);
 1612|       |
 1613|    188|  lj_vmevent_send(L, BC,
  ------------------
  |  |   39|    188|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|    188|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    188|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|    188|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 188]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
 1614|    188|    setprotoV(L, L->top++, pt);
 1615|    188|  );
 1616|       |
 1617|    188|  L->top--;  /* Pop table of constants. */
 1618|    188|  ls->vtop = fs->vbase;  /* Reset variable stack. */
 1619|    188|  ls->fs = fs->prev;
 1620|    188|  lj_assertL(ls->fs != NULL || ls->tok == TK_eof, "bad parser state");
  ------------------
  |  |  365|    188|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    376|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 188]
  |  |  |  |  |  Branch (355:5): [True: 188, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1621|    188|  return pt;
 1622|    188|}
lj_parse.c:fs_fixup_ret:
 1539|    188|{
 1540|    188|  BCPos lastpc = fs->pc;
 1541|    188|  if (lastpc <= fs->lasttarget || !bcopisret(bc_op(fs->bcbase[lastpc-1].ins))) {
  ------------------
  |  |   34|    188|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (1541:7): [True: 0, False: 188]
  |  Branch (1541:35): [True: 188, False: 0]
  ------------------
 1542|    188|    if ((fs->bl->flags & FSCOPE_UPVAL))
  ------------------
  |  |  108|    188|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1542:9): [True: 0, False: 188]
  ------------------
 1543|      0|      bcemit_AJ(fs, BC_UCLO, 0, 0);
  ------------------
  |  |  436|      0|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|      0|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1544|    188|    bcemit_AD(fs, BC_RET0, 0, 1);  /* Need final return. */
  ------------------
  |  |  435|    188|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|    188|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1545|    188|  }
 1546|    188|  fs->bl->flags |= FSCOPE_NOCLOSE;  /* Handled above. */
  ------------------
  |  |  109|    188|#define FSCOPE_NOCLOSE		0x10	/* Do not close upvalues. */
  ------------------
 1547|    188|  fscope_end(fs);
 1548|    188|  lj_assertFS(fs->bl == NULL, "bad scope nesting");
  ------------------
  |  |  167|    188|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    188|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    188|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 188, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1549|       |  /* May need to fixup returns encoded before first function was created. */
 1550|    188|  if (fs->flags & PROTO_FIXUP_RETURN) {
  ------------------
  |  |  406|    188|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
  |  Branch (1550:7): [True: 0, False: 188]
  ------------------
 1551|      0|    BCPos pc;
 1552|      0|    for (pc = 1; pc < lastpc; pc++) {
  ------------------
  |  Branch (1552:18): [True: 0, False: 0]
  ------------------
 1553|      0|      BCIns ins = fs->bcbase[pc].ins;
 1554|      0|      BCPos offset;
 1555|      0|      switch (bc_op(ins)) {
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
 1556|      0|      case BC_CALLMT: case BC_CALLT:
  ------------------
  |  Branch (1556:7): [True: 0, False: 0]
  |  Branch (1556:23): [True: 0, False: 0]
  ------------------
 1557|      0|      case BC_RETM: case BC_RET: case BC_RET0: case BC_RET1:
  ------------------
  |  Branch (1557:7): [True: 0, False: 0]
  |  Branch (1557:21): [True: 0, False: 0]
  |  Branch (1557:34): [True: 0, False: 0]
  |  Branch (1557:48): [True: 0, False: 0]
  ------------------
 1558|      0|	offset = bcemit_INS(fs, ins);  /* Copy original instruction. */
 1559|      0|	fs->bcbase[offset].line = fs->bcbase[pc].line;
 1560|      0|	offset = offset-(pc+1)+BCBIAS_J;
  ------------------
  |  |   29|      0|#define BCBIAS_J	0x8000
  ------------------
 1561|      0|	if (offset > BCMAX_D)
  ------------------
  |  |   28|      0|#define BCMAX_D		0xffff
  ------------------
  |  Branch (1561:6): [True: 0, False: 0]
  ------------------
 1562|      0|	  err_syntax(fs->ls, LJ_ERR_XFIXUP);
 1563|       |	/* Replace with UCLO plus branch. */
 1564|      0|	fs->bcbase[pc].ins = BCINS_AD(BC_UCLO, 0, offset);
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1565|      0|	break;
 1566|      0|      case BC_FNEW:
  ------------------
  |  Branch (1566:7): [True: 0, False: 0]
  ------------------
 1567|      0|	return;  /* We're done. */
 1568|      0|      default:
  ------------------
  |  Branch (1568:7): [True: 0, False: 0]
  ------------------
 1569|      0|	break;
 1570|      0|      }
 1571|      0|    }
 1572|      0|  }
 1573|    188|}
lj_parse.c:bcopisret:
 1527|    188|{
 1528|    188|  switch (op) {
 1529|      0|  case BC_CALLMT: case BC_CALLT:
  ------------------
  |  Branch (1529:3): [True: 0, False: 188]
  |  Branch (1529:19): [True: 0, False: 188]
  ------------------
 1530|      0|  case BC_RETM: case BC_RET: case BC_RET0: case BC_RET1:
  ------------------
  |  Branch (1530:3): [True: 0, False: 188]
  |  Branch (1530:17): [True: 0, False: 188]
  |  Branch (1530:30): [True: 0, False: 188]
  |  Branch (1530:44): [True: 0, False: 188]
  ------------------
 1531|      0|    return 1;
 1532|    188|  default:
  ------------------
  |  Branch (1532:3): [True: 188, False: 0]
  ------------------
 1533|    188|    return 0;
 1534|    188|  }
 1535|    188|}
lj_parse.c:fs_prep_line:
 1426|    188|{
 1427|    188|  return (fs->pc-1) << (numline < 256 ? 0 : numline < 65536 ? 1 : 2);
  ------------------
  |  Branch (1427:25): [True: 188, False: 0]
  |  Branch (1427:45): [True: 0, False: 0]
  ------------------
 1428|    188|}
lj_parse.c:fs_prep_var:
 1466|    188|{
 1467|    188|  VarInfo *vs =ls->vstack, *ve;
 1468|    188|  MSize i, n;
 1469|    188|  BCPos lastpc;
 1470|    188|  lj_buf_reset(&ls->sb);  /* Copy to temp. string buffer. */
 1471|       |  /* Store upvalue names. */
 1472|    188|  for (i = 0, n = fs->nuv; i < n; i++) {
  ------------------
  |  Branch (1472:28): [True: 0, False: 188]
  ------------------
 1473|      0|    GCstr *s = strref(vs[fs->uvmap[i]].name);
  ------------------
  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1474|      0|    MSize len = s->len+1;
 1475|      0|    char *p = lj_buf_more(&ls->sb, len);
 1476|      0|    p = lj_buf_wmem(p, strdata(s), len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1477|      0|    ls->sb.w = p;
 1478|      0|  }
 1479|    188|  *ofsvar = sbuflen(&ls->sb);
  ------------------
  |  |   36|    188|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1480|    188|  lastpc = 0;
 1481|       |  /* Store local variable names and compressed ranges. */
 1482|    188|  for (ve = vs + ls->vtop, vs += fs->vbase; vs < ve; vs++) {
  ------------------
  |  Branch (1482:45): [True: 0, False: 188]
  ------------------
 1483|      0|    if (!gola_isgotolabel(vs)) {
  ------------------
  |  | 1184|      0|#define gola_isgotolabel(v)	((v)->info & (VSTACK_GOTO|VSTACK_LABEL))
  |  |  ------------------
  |  |  |  |  119|      0|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |               #define gola_isgotolabel(v)	((v)->info & (VSTACK_GOTO|VSTACK_LABEL))
  |  |  ------------------
  |  |  |  |  120|      0|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  ------------------
  |  Branch (1483:9): [True: 0, False: 0]
  ------------------
 1484|      0|      GCstr *s = strref(vs->name);
  ------------------
  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1485|      0|      BCPos startpc;
 1486|      0|      char *p;
 1487|      0|      if ((uintptr_t)s < VARNAME__MAX) {
  ------------------
  |  Branch (1487:11): [True: 0, False: 0]
  ------------------
 1488|      0|	p = lj_buf_more(&ls->sb, 1 + 2*5);
 1489|      0|	*p++ = (char)(uintptr_t)s;
 1490|      0|      } else {
 1491|      0|	MSize len = s->len+1;
 1492|      0|	p = lj_buf_more(&ls->sb, len + 2*5);
 1493|      0|	p = lj_buf_wmem(p, strdata(s), len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1494|      0|      }
 1495|      0|      startpc = vs->startpc;
 1496|      0|      p = lj_strfmt_wuleb128(p, startpc-lastpc);
 1497|      0|      p = lj_strfmt_wuleb128(p, vs->endpc-startpc);
 1498|      0|      ls->sb.w = p;
 1499|      0|      lastpc = startpc;
 1500|      0|    }
 1501|      0|  }
 1502|    188|  lj_buf_putb(&ls->sb, '\0');  /* Terminator for varinfo. */
 1503|    188|  return sbuflen(&ls->sb);
  ------------------
  |  |   36|    188|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1504|    188|}
lj_parse.c:fs_fixup_bc:
 1332|    188|{
 1333|    188|  BCInsLine *base = fs->bcbase;
 1334|    188|  MSize i;
 1335|    188|  BCIns op;
 1336|    188|  pt->sizebc = n;
 1337|    188|  if (fs->ls->fr2 != LJ_FR2) op = BC_NOT;  /* Mark non-native prototype. */
  ------------------
  |  |  569|    188|#define LJ_FR2			1
  ------------------
  |  Branch (1337:7): [True: 0, False: 188]
  ------------------
 1338|    188|  else if ((fs->flags & PROTO_VARARG)) op = BC_FUNCV;
  ------------------
  |  |  400|    188|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
  |  Branch (1338:12): [True: 188, False: 0]
  ------------------
 1339|      0|  else op = BC_FUNCF;
 1340|    188|  bc[0] = BCINS_AD(op, fs->framesize, 0);
  ------------------
  |  |   56|    188|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1341|    940|  for (i = 1; i < n; i++)
  ------------------
  |  Branch (1341:15): [True: 752, False: 188]
  ------------------
 1342|    752|    bc[i] = base[i].ins;
 1343|    188|}
lj_parse.c:fs_fixup_k:
 1364|    188|{
 1365|    188|  GCtab *kt;
 1366|    188|  TValue *array;
 1367|    188|  Node *node;
 1368|    188|  MSize i, hmask;
 1369|    188|  checklimitgt(fs, fs->nkn, BCMAX_D+1, "constants");
  ------------------
  |  |  193|    188|#define checklimitgt(fs, v, l, m)	if ((v) > (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (193:39): [True: 0, False: 188]
  |  |  ------------------
  ------------------
 1370|    188|  checklimitgt(fs, fs->nkgc, BCMAX_D+1, "constants");
  ------------------
  |  |  193|    188|#define checklimitgt(fs, v, l, m)	if ((v) > (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (193:39): [True: 0, False: 188]
  |  |  ------------------
  ------------------
 1371|    188|  setmref(pt->k, kptr);
  ------------------
  |  |   39|    188|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1372|    188|  pt->sizekn = fs->nkn;
 1373|    188|  pt->sizekgc = fs->nkgc;
 1374|    188|  kt = fs->kt;
 1375|    188|  array = tvref(kt->array);
  ------------------
  |  |  217|    188|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    188|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1376|    188|  for (i = 0; i < kt->asize; i++)
  ------------------
  |  Branch (1376:15): [True: 0, False: 188]
  ------------------
 1377|      0|    if (tvhaskslot(&array[i])) {
  ------------------
  |  |  201|      0|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1378|      0|      TValue *tv = &((TValue *)kptr)[tvkslot(&array[i])];
  ------------------
  |  |  202|      0|#define tvkslot(o)	((o)->u32.lo)
  ------------------
 1379|      0|      if (LJ_DUALNUM)
  ------------------
  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1380|      0|	setintV(tv, (int32_t)i);
 1381|      0|      else
 1382|      0|	setnumV(tv, (lua_Number)i);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
 1383|      0|    }
 1384|    188|  node = noderef(kt->node);
  ------------------
  |  |  515|    188|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    188|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1385|    188|  hmask = kt->hmask;
 1386|    564|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (1386:15): [True: 376, False: 188]
  ------------------
 1387|    376|    Node *n = &node[i];
 1388|    376|    if (tvhaskslot(&n->val)) {
  ------------------
  |  |  201|    376|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 376, False: 0]
  |  |  ------------------
  ------------------
 1389|    376|      ptrdiff_t kidx = (ptrdiff_t)tvkslot(&n->val);
  ------------------
  |  |  202|    376|#define tvkslot(o)	((o)->u32.lo)
  ------------------
 1390|    376|      lj_assertFS(!tvisint(&n->key), "unexpected integer key");
  ------------------
  |  |  167|    376|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    376|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    376|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    376|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1391|    376|      if (tvisnum(&n->key)) {
  ------------------
  |  |  804|    376|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    376|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    376|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    376|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 188, False: 188]
  |  |  ------------------
  ------------------
 1392|    188|	TValue *tv = &((TValue *)kptr)[kidx];
 1393|    188|	if (LJ_DUALNUM) {
  ------------------
  |  |  549|    188|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1394|      0|	  lua_Number nn = numV(&n->key);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1395|      0|	  int32_t k = lj_num2int(nn);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
 1396|      0|	  lj_assertFS(!tvismzero(&n->key), "unexpected -0 key");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1397|      0|	  if ((lua_Number)k == nn)
  ------------------
  |  Branch (1397:8): [True: 0, False: 0]
  ------------------
 1398|      0|	    setintV(tv, k);
 1399|      0|	  else
 1400|      0|	    *tv = n->key;
 1401|    188|	} else {
 1402|    188|	  *tv = n->key;
 1403|    188|	}
 1404|    188|      } else {
 1405|    188|	GCobj *o = gcV(&n->key);
  ------------------
  |  |  858|    188|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|    188|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    188|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    188|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 188, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    188|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1406|    188|	setgcref(((GCRef *)kptr)[~kidx], o);
  ------------------
  |  |   72|    188|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1407|    188|	lj_gc_objbarrier(fs->L, pt, o);
  ------------------
  |  |  108|    188|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   32|    376|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    188|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    188|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    188|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 188, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|    188|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|    188|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 188]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  109|    188|      lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
 1408|    188|	if (tvisproto(&n->key))
  ------------------
  |  |  798|    188|#define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  781|    188|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  267|    188|#define LJ_TPROTO		(~7u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 0, False: 188]
  |  |  ------------------
  ------------------
 1409|      0|	  fs_fixup_uv2(fs, gco2pt(o));
  ------------------
  |  |  768|      0|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1410|    188|      }
 1411|    376|    }
 1412|    376|  }
 1413|    188|}
lj_parse.c:fs_fixup_uv1:
 1417|    188|{
 1418|    188|  setmref(pt->uv, uv);
  ------------------
  |  |   39|    188|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1419|    188|  pt->sizeuv = fs->nuv;
 1420|    188|  memcpy(uv, fs->uvtmp, fs->nuv*sizeof(VarIndex));
 1421|    188|}
lj_parse.c:fs_fixup_line:
 1433|    188|{
 1434|    188|  BCInsLine *base = fs->bcbase + 1;
 1435|    188|  BCLine first = fs->linedefined;
 1436|    188|  MSize i = 0, n = fs->pc-1;
 1437|    188|  pt->firstline = fs->linedefined;
 1438|    188|  pt->numline = numline;
 1439|    188|  setmref(pt->lineinfo, lineinfo);
  ------------------
  |  |   39|    188|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1440|    188|  if (LJ_LIKELY(numline < 256)) {
  ------------------
  |  |  145|    188|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 188, False: 0]
  |  |  ------------------
  ------------------
 1441|    188|    uint8_t *li = (uint8_t *)lineinfo;
 1442|    752|    do {
 1443|    752|      BCLine delta = base[i].line - first;
 1444|    752|      lj_assertFS(delta >= 0 && delta < 256, "bad line delta");
  ------------------
  |  |  167|    752|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    752|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.50k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 752, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 752, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    752|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1445|    752|      li[i] = (uint8_t)delta;
 1446|    752|    } while (++i < n);
  ------------------
  |  Branch (1446:14): [True: 564, False: 188]
  ------------------
 1447|    188|  } else if (LJ_LIKELY(numline < 65536)) {
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1448|      0|    uint16_t *li = (uint16_t *)lineinfo;
 1449|      0|    do {
 1450|      0|      BCLine delta = base[i].line - first;
 1451|      0|      lj_assertFS(delta >= 0 && delta < 65536, "bad line delta");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1452|      0|      li[i] = (uint16_t)delta;
 1453|      0|    } while (++i < n);
  ------------------
  |  Branch (1453:14): [True: 0, False: 0]
  ------------------
 1454|      0|  } else {
 1455|      0|    uint32_t *li = (uint32_t *)lineinfo;
 1456|      0|    do {
 1457|      0|      BCLine delta = base[i].line - first;
 1458|      0|      lj_assertFS(delta >= 0, "bad line delta");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1459|      0|      li[i] = (uint32_t)delta;
 1460|      0|    } while (++i < n);
  ------------------
  |  Branch (1460:14): [True: 0, False: 0]
  ------------------
 1461|      0|  }
 1462|    188|}
lj_parse.c:fs_fixup_var:
 1508|    188|{
 1509|    188|  setmref(pt->uvinfo, p);
  ------------------
  |  |   39|    188|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1510|    188|  setmref(pt->varinfo, (char *)p + ofsvar);
  ------------------
  |  |   39|    188|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1511|    188|  memcpy(p, ls->sb.b, sbuflen(&ls->sb));  /* Copy from temp. buffer. */
  ------------------
  |  |   36|    188|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1512|    188|}

lj_prng_u64:
   48|   117k|{
   49|   117k|  uint64_t z, r = 0;
   50|   117k|  TW223_STEP(rs, z, r)
  ------------------
  |  |   41|   117k|  TW223_GEN(rs, z, r, 0, 63, 31, 18) \
  |  |  ------------------
  |  |  |  |   36|   117k|  z = rs->u[i]; \
  |  |  |  |   37|   117k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|   117k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   42|   117k|  TW223_GEN(rs, z, r, 1, 58, 19, 28) \
  |  |  ------------------
  |  |  |  |   36|   117k|  z = rs->u[i]; \
  |  |  |  |   37|   117k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|   117k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   43|   117k|  TW223_GEN(rs, z, r, 2, 55, 24,  7) \
  |  |  ------------------
  |  |  |  |   36|   117k|  z = rs->u[i]; \
  |  |  |  |   37|   117k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|   117k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   44|   117k|  TW223_GEN(rs, z, r, 3, 47, 21,  8)
  |  |  ------------------
  |  |  |  |   36|   117k|  z = rs->u[i]; \
  |  |  |  |   37|   117k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|   117k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  ------------------
   51|   117k|  return r;
   52|   117k|}
lj_prng_seed_secure:
  167|  36.7k|{
  168|       |#if LJ_TARGET_XBOX360
  169|       |
  170|       |  if (XNetRandom(rs->u, (unsigned int)sizeof(rs->u)) == 0)
  171|       |    goto ok;
  172|       |
  173|       |#elif LJ_TARGET_PS3
  174|       |
  175|       |  if (sys_get_random_number(rs->u, sizeof(rs->u)) == 0)
  176|       |    goto ok;
  177|       |
  178|       |#elif LJ_TARGET_PS4 || LJ_TARGET_PS5 || LJ_TARGET_PSVITA
  179|       |
  180|       |  if (sceRandomGetRandomNumber(rs->u, sizeof(rs->u)) == 0)
  181|       |    goto ok;
  182|       |
  183|       |#elif LJ_TARGET_NX
  184|       |
  185|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  186|       |    goto ok;
  187|       |
  188|       |#elif LJ_TARGET_UWP || LJ_TARGET_XBOXONE
  189|       |
  190|       |  if (BCryptGenRandom(NULL, (PUCHAR)(rs->u), (ULONG)sizeof(rs->u),
  191|       |		      BCRYPT_USE_SYSTEM_PREFERRED_RNG) >= 0)
  192|       |    goto ok;
  193|       |
  194|       |#elif LJ_TARGET_WINDOWS
  195|       |
  196|       |  /* Keep the library loaded in case multiple VMs are started. */
  197|       |  if (!libfunc_rgr) {
  198|       |    HMODULE lib = LJ_WIN_LOADLIBA("advapi32.dll");
  199|       |    if (!lib) return 0;
  200|       |    libfunc_rgr = (PRGR)GetProcAddress(lib, "SystemFunction036");
  201|       |    if (!libfunc_rgr) return 0;
  202|       |  }
  203|       |  if (libfunc_rgr(rs->u, (ULONG)sizeof(rs->u)))
  204|       |    goto ok;
  205|       |
  206|       |#elif LJ_TARGET_POSIX
  207|       |
  208|  36.7k|#if LJ_TARGET_LINUX && defined(SYS_getrandom)
  209|       |
  210|  36.7k|  if (syscall(SYS_getrandom, rs->u, sizeof(rs->u), 0) == (long)sizeof(rs->u))
  ------------------
  |  Branch (210:7): [True: 36.7k, False: 0]
  ------------------
  211|  36.7k|    goto ok;
  212|       |
  213|       |#elif LJ_TARGET_HAS_GETENTROPY
  214|       |
  215|       |#ifdef __ELF__
  216|       |  if (&getentropy && getentropy(rs->u, sizeof(rs->u)) == 0)
  217|       |    goto ok;
  218|       |#else
  219|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  220|       |    goto ok;
  221|       |#endif
  222|       |
  223|       |#endif
  224|       |
  225|       |  /* Fallback to /dev/urandom. This may fail if the device is not
  226|       |  ** existent or accessible in a chroot or container, or if the process
  227|       |  ** or the OS ran out of file descriptors.
  228|       |  */
  229|      0|  {
  230|      0|    int fd = open("/dev/urandom", O_RDONLY|O_CLOEXEC);
  231|      0|    if (fd != -1) {
  ------------------
  |  Branch (231:9): [True: 0, False: 0]
  ------------------
  232|      0|      ssize_t n = read(fd, rs->u, sizeof(rs->u));
  233|      0|      (void)close(fd);
  234|      0|      if (n == (ssize_t)sizeof(rs->u))
  ------------------
  |  Branch (234:11): [True: 0, False: 0]
  ------------------
  235|      0|	goto ok;
  236|      0|    }
  237|      0|  }
  238|       |
  239|       |#else
  240|       |
  241|       |  /* Add an elif above for your OS with a secure PRNG seed.
  242|       |  ** Note that fiddling around with rand(), getpid(), time() or coercing
  243|       |  ** ASLR to yield a few bits of randomness is not helpful.
  244|       |  ** If you don't want any security, then don't pretend you have any
  245|       |  ** and simply define LUAJIT_SECURITY_PRNG=0 for the build.
  246|       |  */
  247|       |#error "Missing secure PRNG seed for this OS"
  248|       |
  249|       |#endif
  250|      0|  return 0;  /* Fail. */
  251|       |
  252|  36.7k|ok:
  253|  36.7k|  lj_prng_condition(rs);
  254|  36.7k|  (void)lj_prng_u64(rs);
  255|  36.7k|  return 1;  /* Success. */
  256|      0|}
lj_prng.c:lj_prng_condition:
   65|  36.7k|{
   66|  36.7k|  if (rs->u[0] < (1u << 1)) rs->u[0] += (1u << 1);
  ------------------
  |  Branch (66:7): [True: 0, False: 36.7k]
  ------------------
   67|  36.7k|  if (rs->u[1] < (1u << 6)) rs->u[1] += (1u << 6);
  ------------------
  |  Branch (67:7): [True: 0, False: 36.7k]
  ------------------
   68|  36.7k|  if (rs->u[2] < (1u << 9)) rs->u[2] += (1u << 9);
  ------------------
  |  Branch (68:7): [True: 0, False: 36.7k]
  ------------------
   69|  36.7k|  if (rs->u[3] < (1u << 17)) rs->u[3] += (1u << 17);
  ------------------
  |  Branch (69:7): [True: 0, False: 36.7k]
  ------------------
   70|  36.7k|}

luaJIT_profile_stop:
  341|  36.7k|{
  342|  36.7k|  ProfileState *ps = &profile_state;
  343|  36.7k|  global_State *g = ps->g;
  344|  36.7k|  if (G(L) == g) {  /* Only stop profiler if started by this VM. */
  ------------------
  |  |  705|  36.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (344:7): [True: 0, False: 36.7k]
  ------------------
  345|      0|    profile_timer_stop(ps);
  346|      0|    g->hookmask &= ~HOOK_PROFILE;
  ------------------
  |  |  677|      0|#define HOOK_PROFILE		0x80
  ------------------
  347|      0|    lj_dispatch_update(g);
  348|      0|#if LJ_HASJIT
  349|      0|    G2J(g)->prof_mode = 0;
  ------------------
  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  350|      0|    lj_trace_flushall(L);
  351|      0|#endif
  352|      0|    lj_buf_free(g, &ps->sb);
  353|      0|    ps->sb.w = ps->sb.e = NULL;
  354|      0|    ps->g = NULL;
  355|      0|  }
  356|  36.7k|}

lj_state_shrinkstack:
   92|  20.0k|{
   93|  20.0k|  if (L->stacksize > LJ_STACK_MAXEX)
  ------------------
  |  |   39|  20.0k|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|  20.0k|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  20.0k|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|  20.0k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|  20.0k|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (93:7): [True: 0, False: 20.0k]
  ------------------
   94|      0|    return;  /* Avoid stack shrinking while handling stack overflow. */
   95|  20.0k|  if (4*used < L->stacksize &&
  ------------------
  |  Branch (95:7): [True: 20.0k, False: 0]
  ------------------
   96|  20.0k|      2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   38|  20.0k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  20.0k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  20.0k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   72|  20.0k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  20.0k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  |  Branch (96:7): [True: 0, False: 20.0k]
  ------------------
   97|       |      /* Don't shrink stack of live trace. */
   98|  20.0k|      (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (98:8): [True: 0, False: 0]
  |  Branch (98:41): [True: 0, False: 0]
  ------------------
   99|      0|    resizestack(L, L->stacksize >> 1);
  100|  20.0k|}
lj_state_growstack:
  104|    887|{
  105|    887|  MSize n = L->stacksize + need;
  106|    887|  if (LJ_LIKELY(n < LJ_STACK_MAX)) {  /* The stack can grow as requested. */
  ------------------
  |  |  145|    887|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 887, False: 0]
  |  |  ------------------
  ------------------
  107|    887|    if (n < 2 * L->stacksize) {  /* Try to double the size. */
  ------------------
  |  Branch (107:9): [True: 147, False: 740]
  ------------------
  108|    147|      n = 2 * L->stacksize;
  109|    147|      if (n > LJ_STACK_MAX)
  ------------------
  |  |   37|    147|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|    147|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  |  Branch (109:11): [True: 0, False: 147]
  ------------------
  110|      0|	n = LJ_STACK_MAX;
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  111|    147|    }
  112|    887|    resizestack(L, n);
  113|    887|  } else {  /* Request would overflow. Raise a stack overflow error. */
  114|      0|    if (LJ_HASJIT) {
  ------------------
  |  |  578|      0|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  115|      0|      TValue *base = tvref(G(L)->jit_base);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  116|      0|      if (base) L->base = base;
  ------------------
  |  Branch (116:11): [True: 0, False: 0]
  ------------------
  117|      0|    }
  118|      0|    if (curr_funcisL(L)) {
  ------------------
  |  |  716|      0|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  119|      0|      L->top = curr_topL(L);
  ------------------
  |  |  718|      0|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|      0|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  120|      0|      if (L->top > tvref(L->maxstack)) {
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|       |	/* The current Lua frame violates the stack, so replace it with a
  122|       |	** dummy. This can happen when BC_IFUNCF is trying to grow the stack.
  123|       |	*/
  124|      0|	L->top = L->base;
  125|      0|	setframe_gc(L->base - 1 - LJ_FR2, obj2gco(L), LJ_TTHREAD);
  ------------------
  |  |   49|      0|#define setframe_gc(f, p, tp)	(setgcVraw((f), (p), (tp)))
  ------------------
  126|      0|      }
  127|      0|    }
  128|      0|    if (L->stacksize <= LJ_STACK_MAXEX) {
  ------------------
  |  |   39|      0|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|      0|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (128:9): [True: 0, False: 0]
  ------------------
  129|       |      /* An error handler might want to inspect the stack overflow error, but
  130|       |      ** will need some stack space to run in. We give it a stack size beyond
  131|       |      ** the normal limit in order to do so, then rely on lj_state_relimitstack
  132|       |      ** calls during unwinding to bring us back to a convential stack size.
  133|       |      ** The + 1 is space for the error message, and 2 * LUA_MINSTACK is for
  134|       |      ** the lj_state_checkstack() call in lj_err_run().
  135|       |      */
  136|      0|      resizestack(L, LJ_STACK_MAX + 1 + 2 * LUA_MINSTACK);
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
                    resizestack(L, LJ_STACK_MAX + 1 + 2 * LUA_MINSTACK);
  ------------------
  |  |   88|      0|#define LUA_MINSTACK	20
  ------------------
  137|      0|      lj_err_stkov(L);  /* May invoke an error handler. */
  138|      0|    } else {
  139|       |      /* If we're here, then the stack overflow error handler is requesting
  140|       |      ** to grow the stack even further. We have no choice but to abort the
  141|       |      ** error handler.
  142|       |      */
  143|      0|      GCstr *em = lj_err_str(L, LJ_ERR_STKOV);  /* Might OOM. */
  144|      0|      setstrV(L, L->top++, em);  /* There is always space to push an error. */
  145|      0|      lj_err_throw(L, LUA_ERRERR);  /* Does not invoke an error handler. */
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  146|      0|    }
  147|      0|  }
  148|    887|}
lj_state_cpgrowstack:
  163|    887|{
  164|    887|  return lj_vm_cpcall(L, NULL, &need, cpgrowstack);
  165|    887|}
lua_newstate:
  244|  36.7k|{
  245|  36.7k|  PRNGState prng;
  246|  36.7k|  GG_State *GG;
  247|  36.7k|  lua_State *L;
  248|  36.7k|  global_State *g;
  249|       |  /* We need the PRNG for the memory allocator, so initialize this first. */
  250|  36.7k|  if (!lj_prng_seed_secure(&prng)) {
  ------------------
  |  Branch (250:7): [True: 0, False: 36.7k]
  ------------------
  251|      0|    lj_assertX(0, "secure PRNG seeding failed");
  ------------------
  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  252|       |    /* Can only return NULL here, so this errors with "not enough memory". */
  253|      0|    return NULL;
  254|      0|  }
  255|  36.7k|#ifndef LUAJIT_USE_SYSMALLOC
  256|  36.7k|  if (allocf == LJ_ALLOCF_INTERNAL) {
  ------------------
  |  |   36|  36.7k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  |  Branch (256:7): [True: 36.7k, False: 0]
  ------------------
  257|  36.7k|    allocd = lj_alloc_create(&prng);
  258|  36.7k|    if (!allocd) return NULL;
  ------------------
  |  Branch (258:9): [True: 0, False: 36.7k]
  ------------------
  259|  36.7k|    allocf = lj_alloc_f;
  260|  36.7k|  }
  261|  36.7k|#endif
  262|  36.7k|  GG = (GG_State *)allocf(allocd, NULL, 0, sizeof(GG_State));
  263|  36.7k|  if (GG == NULL || !checkptrGC(GG)) return NULL;
  ------------------
  |  |  110|  36.7k|#define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  562|  36.7k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  109|  36.7k|#define checkptr47(x)	(((uint64_t)(uintptr_t)(x) >> 47) == 0)
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  640|      0|#define LJ_64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  107|      0|#define checkptr31(x)	(((uint64_t)(uintptr_t)(x) >> 31) == 0)
  |  |  ------------------
  ------------------
  |  Branch (263:7): [True: 0, False: 36.7k]
  |  Branch (263:21): [True: 0, False: 36.7k]
  ------------------
  264|  36.7k|  memset(GG, 0, sizeof(GG_State));
  265|  36.7k|  L = &GG->L;
  266|  36.7k|  g = &GG->g;
  267|  36.7k|  L->gct = ~LJ_TTHREAD;
  ------------------
  |  |  266|  36.7k|#define LJ_TTHREAD		(~6u)
  ------------------
  268|  36.7k|  L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   17|  36.7k|#define LJ_GC_WHITE0	0x01
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   24|  36.7k|#define LJ_GC_FIXED	0x20
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   25|  36.7k|#define LJ_GC_SFIXED	0x40
  ------------------
  269|  36.7k|  L->dummy_ffid = FF_C;
  ------------------
  |  |  475|  36.7k|#define FF_C		1
  ------------------
  270|  36.7k|  setmref(L->glref, g);
  ------------------
  |  |   39|  36.7k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  271|  36.7k|  g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   17|  36.7k|#define LJ_GC_WHITE0	0x01
  ------------------
                g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   24|  36.7k|#define LJ_GC_FIXED	0x20
  ------------------
  272|  36.7k|  g->strempty.marked = LJ_GC_WHITE0;
  ------------------
  |  |   17|  36.7k|#define LJ_GC_WHITE0	0x01
  ------------------
  273|  36.7k|  g->strempty.gct = ~LJ_TSTR;
  ------------------
  |  |  264|  36.7k|#define LJ_TSTR			(~4u)
  ------------------
  274|  36.7k|  g->allocf = allocf;
  275|  36.7k|  g->allocd = allocd;
  276|  36.7k|  g->prng = prng;
  277|  36.7k|#ifndef LUAJIT_USE_SYSMALLOC
  278|  36.7k|  if (allocf == lj_alloc_f) {
  ------------------
  |  Branch (278:7): [True: 36.7k, False: 0]
  ------------------
  279|  36.7k|    lj_alloc_setprng(allocd, &g->prng);
  280|  36.7k|  }
  281|  36.7k|#endif
  282|  36.7k|  setgcref(g->mainthref, obj2gco(L));
  ------------------
  |  |   72|  36.7k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  283|  36.7k|  setgcref(g->uvhead.prev, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  36.7k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  284|  36.7k|  setgcref(g->uvhead.next, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  36.7k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  285|  36.7k|  g->str.mask = ~(MSize)0;
  286|  36.7k|  setnilV(registry(L));
  ------------------
  |  |  872|  36.7k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  287|  36.7k|  setnilV(&g->nilnode.val);
  ------------------
  |  |  872|  36.7k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  288|  36.7k|  setnilV(&g->nilnode.key);
  ------------------
  |  |  872|  36.7k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  289|       |#if !LJ_GC64
  290|       |  setmref(g->nilnode.freetop, &g->nilnode);
  291|       |#endif
  292|  36.7k|  lj_buf_init(NULL, &g->tmpbuf);
  293|  36.7k|  g->gc.state = GCSpause;
  294|  36.7k|  setgcref(g->gc.root, obj2gco(L));
  ------------------
  |  |   72|  36.7k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  295|  36.7k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|  36.7k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  296|  36.7k|  g->gc.total = sizeof(GG_State);
  297|  36.7k|  g->gc.pause = LUAI_GCPAUSE;
  ------------------
  |  |   93|  36.7k|#define LUAI_GCPAUSE	200	/* Pause GC until memory is at 200%. */
  ------------------
  298|  36.7k|  g->gc.stepmul = LUAI_GCMUL;
  ------------------
  |  |   94|  36.7k|#define LUAI_GCMUL	200	/* Run GC at 200% of allocation speed. */
  ------------------
  299|  36.7k|  lj_dispatch_init((GG_State *)L);
  300|  36.7k|  L->status = LUA_ERRERR+1;  /* Avoid touching the stack upon memory error. */
  ------------------
  |  |   48|  36.7k|#define LUA_ERRERR	5
  ------------------
  301|  36.7k|  if (lj_vm_cpcall(L, NULL, NULL, cpluaopen) != 0) {
  ------------------
  |  Branch (301:7): [True: 0, False: 36.7k]
  ------------------
  302|       |    /* Memory allocation error: free partial state. */
  303|      0|    close_state(L);
  304|      0|    return NULL;
  305|      0|  }
  306|  36.7k|  L->status = LUA_OK;
  ------------------
  |  |   43|  36.7k|#define LUA_OK		0
  ------------------
  307|  36.7k|  return L;
  308|  36.7k|}
lua_close:
  321|  36.7k|{
  322|  36.7k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  323|  36.7k|  int i;
  324|  36.7k|  L = mainthread(g);  /* Only the main thread can be closed. */
  ------------------
  |  |  665|  36.7k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  36.7k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  325|  36.7k|#if LJ_HASPROFILE
  326|  36.7k|  luaJIT_profile_stop(L);
  327|  36.7k|#endif
  328|  36.7k|  setgcrefnull(g->cur_L);
  ------------------
  |  |   76|  36.7k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  329|  36.7k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  36.7k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  330|  36.7k|  lj_gc_separateudata(g, 1);  /* Separate udata which have GC metamethods. */
  331|  36.7k|#if LJ_HASJIT
  332|  36.7k|  G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |  116|  36.7k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  36.7k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  36.7k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |   16|  36.7k|#define JIT_F_ON		0x00000001
  ------------------
  333|  36.7k|  G2J(g)->state = LJ_TRACE_IDLE;
  ------------------
  |  |  116|  36.7k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  36.7k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  36.7k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  334|  36.7k|  lj_dispatch_update(g);
  335|  36.7k|#endif
  336|  36.7k|  for (i = 0;;) {
  337|  36.7k|    hook_enter(g);
  ------------------
  |  |  679|  36.7k|#define hook_enter(g)		((g)->hookmask |= HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|  36.7k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  338|  36.7k|    L->status = LUA_OK;
  ------------------
  |  |   43|  36.7k|#define LUA_OK		0
  ------------------
  339|  36.7k|    L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  217|  36.7k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  569|  36.7k|#define LJ_FR2			1
  ------------------
  340|  36.7k|    L->cframe = NULL;
  341|  36.7k|    if (lj_vm_cpcall(L, NULL, NULL, cpfinalize) == LUA_OK) {
  ------------------
  |  |   43|  36.7k|#define LUA_OK		0
  ------------------
  |  Branch (341:9): [True: 36.7k, False: 0]
  ------------------
  342|  36.7k|      if (++i >= 10) break;
  ------------------
  |  Branch (342:11): [True: 0, False: 36.7k]
  ------------------
  343|  36.7k|      lj_gc_separateudata(g, 1);  /* Separate udata again. */
  344|  36.7k|      if (gcref(g->gc.mmudata) == NULL)  /* Until nothing is left to do. */
  ------------------
  |  |   67|  36.7k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (344:11): [True: 36.7k, False: 0]
  ------------------
  345|  36.7k|	break;
  346|  36.7k|    }
  347|  36.7k|  }
  348|  36.7k|  close_state(L);
  349|  36.7k|}
lj_state_new:
  352|  9.96k|{
  353|  9.96k|  lua_State *L1 = lj_mem_newobj(L, lua_State);
  ------------------
  |  |  132|  9.96k|#define lj_mem_newobj(L, t)	((t *)lj_mem_newgco(L, sizeof(t)))
  ------------------
  354|  9.96k|  L1->gct = ~LJ_TTHREAD;
  ------------------
  |  |  266|  9.96k|#define LJ_TTHREAD		(~6u)
  ------------------
  355|  9.96k|  L1->dummy_ffid = FF_C;
  ------------------
  |  |  475|  9.96k|#define FF_C		1
  ------------------
  356|  9.96k|  L1->status = LUA_OK;
  ------------------
  |  |   43|  9.96k|#define LUA_OK		0
  ------------------
  357|  9.96k|  L1->stacksize = 0;
  358|  9.96k|  setmref(L1->stack, NULL);
  ------------------
  |  |   39|  9.96k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  359|  9.96k|  L1->cframe = NULL;
  360|       |  /* NOBARRIER: The lua_State is new (marked white). */
  361|  9.96k|  setgcrefnull(L1->openupval);
  ------------------
  |  |   76|  9.96k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  362|  9.96k|  setmrefr(L1->glref, L->glref);
  ------------------
  |  |   41|  9.96k|#define setmrefr(r, v)	((r).ptr64 = (v).ptr64)
  ------------------
  363|  9.96k|  setgcrefr(L1->env, L->env);
  ------------------
  |  |   77|  9.96k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  364|  9.96k|  stack_init(L1, L);  /* init stack */
  365|  9.96k|  lj_assertL(iswhite(obj2gco(L1)), "new thread object is not white");
  ------------------
  |  |  365|  9.96k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.96k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.96k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.96k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  366|  9.96k|  return L1;
  367|  9.96k|}
lj_state_free:
  370|  9.96k|{
  371|  9.96k|  lj_assertG(L != mainthread(g), "free of main thread");
  ------------------
  |  |  364|  9.96k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.96k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.96k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.96k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  372|  9.96k|  if (obj2gco(L) == gcref(g->cur_L))
  ------------------
  |  |  775|  9.96k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                if (obj2gco(L) == gcref(g->cur_L))
  ------------------
  |  |   67|  9.96k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (372:7): [True: 0, False: 9.96k]
  ------------------
  373|      0|    setgcrefnull(g->cur_L);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  374|  9.96k|  if (gcref(L->openupval) != NULL) {
  ------------------
  |  |   67|  9.96k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (374:7): [True: 0, False: 9.96k]
  ------------------
  375|      0|    lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  376|      0|    lj_trace_abort(g);  /* For aa_uref soundness. */
  ------------------
  |  |   45|      0|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  377|      0|    lj_assertG(gcref(L->openupval) == NULL, "stale open upvalues");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  378|      0|  }
  379|  9.96k|  lj_mem_freevec(g, tvref(L->stack), L->stacksize, TValue);
  ------------------
  |  |  130|  9.96k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  380|  9.96k|  lj_mem_freet(g, L);
  ------------------
  |  |  134|  9.96k|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  381|  9.96k|}
lj_state.c:resizestack:
   58|    887|{
   59|    887|  TValue *st, *oldst = tvref(L->stack);
  ------------------
  |  |  217|    887|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    887|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   60|    887|  ptrdiff_t delta;
   61|    887|  MSize oldsize = L->stacksize;
   62|    887|  MSize realsize = n + 1 + LJ_STACK_EXTRA;
  ------------------
  |  |   72|    887|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|    887|#define LJ_FR2			1
  |  |  ------------------
  ------------------
   63|    887|  GCobj *up;
   64|    887|  lj_assertL((MSize)(tvref(L->maxstack)-oldst) == L->stacksize-LJ_STACK_EXTRA-1,
  ------------------
  |  |  365|    887|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    887|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 887, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    887|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   65|    887|	     "inconsistent stack size");
   66|    887|  st = (TValue *)lj_mem_realloc(L, tvref(L->stack),
  ------------------
  |  |  217|    887|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    887|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   67|    887|				(MSize)(oldsize*sizeof(TValue)),
   68|    887|				(MSize)(realsize*sizeof(TValue)));
   69|    887|  setmref(L->stack, st);
  ------------------
  |  |   39|    887|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   70|    887|  delta = (char *)st - (char *)oldst;
   71|    887|  setmref(L->maxstack, st + n);
  ------------------
  |  |   39|    887|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   72|   122k|  while (oldsize < realsize)  /* Clear new slots. */
  ------------------
  |  Branch (72:10): [True: 121k, False: 887]
  ------------------
   73|   121k|    setnilV(st + oldsize++);
  ------------------
  |  |  872|   122k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   74|    887|  L->stacksize = realsize;
   75|    887|  if ((size_t)(mref(G(L)->jit_base, char) - (char *)oldst) < oldsize)
  ------------------
  |  |   36|    887|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (75:7): [True: 0, False: 887]
  ------------------
   76|      0|    setmref(G(L)->jit_base, mref(G(L)->jit_base, char) + delta);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   77|    887|  L->base = (TValue *)((char *)L->base + delta);
   78|    887|  L->top = (TValue *)((char *)L->top + delta);
   79|    887|  for (up = gcref(L->openupval); up != NULL; up = gcnext(up))
  ------------------
  |  |   67|    887|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                for (up = gcref(L->openupval); up != NULL; up = gcnext(up))
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (79:34): [True: 0, False: 887]
  ------------------
   80|      0|    setmref(gco2uv(up)->v, (TValue *)((char *)uvval(gco2uv(up)) + delta));
  ------------------
  |  |   39|    887|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  |  Branch (39:55): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   81|    887|}
lj_state.c:cpgrowstack:
  156|    887|{
  157|    887|  UNUSED(dummy);
  ------------------
  |  |   91|    887|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  158|    887|  lj_state_growstack(co, *(MSize *)ud);
  159|    887|  return NULL;
  160|    887|}
lj_state.c:cpluaopen:
  186|  36.7k|{
  187|  36.7k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  188|  36.7k|  UNUSED(dummy);
  ------------------
  |  |   91|  36.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  189|  36.7k|  UNUSED(ud);
  ------------------
  |  |   91|  36.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  190|  36.7k|  stack_init(L, L);
  191|       |  /* NOBARRIER: State initialization, all objects are white. */
  192|  36.7k|  setgcref(L->env, obj2gco(lj_tab_new(L, 0, LJ_MIN_GLOBAL)));
  ------------------
  |  |   72|  36.7k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  193|  36.7k|  settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |  706|  36.7k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  705|  36.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |   78|  36.7k|#define LJ_MIN_REGISTRY	2		/* Min. registry size (hbits). */
  ------------------
  194|  36.7k|  lj_str_init(L);
  195|  36.7k|  lj_meta_init(L);
  196|  36.7k|  lj_lex_init(L);
  197|  36.7k|  fixstring(lj_err_str(L, LJ_ERR_ERRMEM));  /* Preallocate memory error msg. */
  ------------------
  |  |   45|  36.7k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  36.7k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  198|  36.7k|  g->gc.threshold = 4*g->gc.total;
  199|  36.7k|#if LJ_HASFFI
  200|  36.7k|  lj_ctype_initfin(L);
  201|  36.7k|#endif
  202|  36.7k|  lj_trace_initstate(g);
  203|  36.7k|  lj_err_verify();
  204|  36.7k|  return NULL;
  205|  36.7k|}
lj_state.c:close_state:
  208|  36.7k|{
  209|  36.7k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  210|  36.7k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  36.7k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  211|  36.7k|  lj_gc_freeall(g);
  212|  36.7k|  lj_assertG(gcref(g->gc.root) == obj2gco(L),
  ------------------
  |  |  364|  36.7k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  213|  36.7k|	     "main thread is not first GC object");
  214|  36.7k|  lj_assertG(g->str.num == 0, "leaked %d strings", g->str.num);
  ------------------
  |  |  364|  36.7k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  215|  36.7k|  lj_trace_freestate(g);
  216|  36.7k|#if LJ_HASFFI
  217|  36.7k|  lj_ctype_freestate(g);
  218|  36.7k|#endif
  219|  36.7k|  lj_str_freetab(g);
  ------------------
  |  |   25|  36.7k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  36.7k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  220|  36.7k|  lj_buf_free(g, &g->tmpbuf);
  221|  36.7k|  lj_mem_freevec(g, tvref(L->stack), L->stacksize, TValue);
  ------------------
  |  |  130|  36.7k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  222|  36.7k|#if LJ_64
  223|  36.7k|  if (mref(g->gc.lightudseg, uint32_t)) {
  ------------------
  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:20): [True: 308, False: 36.4k]
  |  |  ------------------
  ------------------
  224|    308|    MSize segnum = g->gc.lightudnum ? (2 << lj_fls(g->gc.lightudnum)) : 2;
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (224:20): [True: 0, False: 308]
  ------------------
  225|    308|    lj_mem_freevec(g, mref(g->gc.lightudseg, uint32_t), segnum, uint32_t);
  ------------------
  |  |  130|    308|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  226|    308|  }
  227|  36.7k|#endif
  228|  36.7k|  lj_assertG(g->gc.total == sizeof(GG_State),
  ------------------
  |  |  364|  36.7k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  229|  36.7k|	     "memory leak of %lld bytes",
  230|  36.7k|	     (long long)(g->gc.total - sizeof(GG_State)));
  231|  36.7k|#ifndef LUAJIT_USE_SYSMALLOC
  232|  36.7k|  if (g->allocf == lj_alloc_f)
  ------------------
  |  Branch (232:7): [True: 36.7k, False: 0]
  ------------------
  233|  36.7k|    lj_alloc_destroy(g->allocd);
  234|      0|  else
  235|      0|#endif
  236|      0|    g->allocf(g->allocd, G2GG(g), sizeof(GG_State), 0);
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  237|  36.7k|}
lj_state.c:cpfinalize:
  311|  36.7k|{
  312|  36.7k|  UNUSED(dummy);
  ------------------
  |  |   91|  36.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  313|  36.7k|  UNUSED(ud);
  ------------------
  |  |   91|  36.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  314|  36.7k|  lj_gc_finalize_cdata(L);
  315|  36.7k|  lj_gc_finalize_udata(L);
  316|       |  /* Frame pop omitted. */
  317|  36.7k|  return NULL;
  318|  36.7k|}
lj_state.c:stack_init:
  169|  46.6k|{
  170|  46.6k|  TValue *stend, *st = lj_mem_newvec(L, LJ_STACK_START+LJ_STACK_EXTRA, TValue);
  ------------------
  |  |  125|  46.6k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  46.6k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  171|  46.6k|  setmref(L1->stack, st);
  ------------------
  |  |   39|  46.6k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  172|  46.6k|  L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   38|  46.6k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  46.6k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  46.6k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   72|  46.6k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  46.6k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  173|  46.6k|  stend = st + L1->stacksize;
  174|  46.6k|  setmref(L1->maxstack, stend - LJ_STACK_EXTRA - 1);
  ------------------
  |  |   39|  46.6k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  175|  46.6k|  setthreadV(L1, st++, L1);  /* Needed for curr_funcisL() on empty stack. */
  176|  46.6k|  if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  569|  46.6k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  872|  46.6k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  177|  46.6k|  L1->base = L1->top = st;
  178|  2.19M|  while (st < stend)  /* Clear new slots. */
  ------------------
  |  Branch (178:10): [True: 2.14M, False: 46.6k]
  ------------------
  179|  2.14M|    setnilV(st++);
  ------------------
  |  |  872|  2.14M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  180|  46.6k|}

lj_dispatch.c:lj_state_checkstack:
   24|    574|{
   25|    574|  if ((mref(L->maxstack, char) - (char *)L->top) <=
  ------------------
  |  |   36|    574|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (25:7): [True: 0, False: 574]
  ------------------
   26|    574|      (ptrdiff_t)need*(ptrdiff_t)sizeof(TValue))
   27|      0|    lj_state_growstack(L, need);
   28|    574|}
lj_api.c:lj_state_checkstack:
   24|    109|{
   25|    109|  if ((mref(L->maxstack, char) - (char *)L->top) <=
  ------------------
  |  |   36|    109|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (25:7): [True: 0, False: 109]
  ------------------
   26|    109|      (ptrdiff_t)need*(ptrdiff_t)sizeof(TValue))
   27|      0|    lj_state_growstack(L, need);
   28|    109|}

lj_str_cmp:
   29|    156|{
   30|    156|  MSize i, n = a->len > b->len ? b->len : a->len;
  ------------------
  |  Branch (30:16): [True: 6, False: 150]
  ------------------
   31|    162|  for (i = 0; i < n; i += 4) {
  ------------------
  |  Branch (31:15): [True: 141, False: 21]
  ------------------
   32|       |    /* Note: innocuous access up to end of string + 3. */
   33|    141|    uint32_t va = *(const uint32_t *)(strdata(a)+i);
  ------------------
  |  |  316|    141|#define strdata(s)	((const char *)((s)+1))
  ------------------
   34|    141|    uint32_t vb = *(const uint32_t *)(strdata(b)+i);
  ------------------
  |  |  316|    141|#define strdata(s)	((const char *)((s)+1))
  ------------------
   35|    141|    if (va != vb) {
  ------------------
  |  Branch (35:9): [True: 135, False: 6]
  ------------------
   36|    135|#if LJ_LE
   37|    135|      va = lj_bswap(va); vb = lj_bswap(vb);
   38|    135|#endif
   39|    135|      i -= n;
   40|    135|      if ((int32_t)i >= -3) {
  ------------------
  |  Branch (40:11): [True: 135, False: 0]
  ------------------
   41|    135|	va >>= 32+(i<<3); vb >>= 32+(i<<3);
   42|    135|	if (va == vb) break;
  ------------------
  |  Branch (42:6): [True: 0, False: 135]
  ------------------
   43|    135|      }
   44|    135|      return va < vb ? -1 : 1;
  ------------------
  |  Branch (44:14): [True: 67, False: 68]
  ------------------
   45|    135|    }
   46|    141|  }
   47|     21|  return (int32_t)(a->len - b->len);
   48|    156|}
lj_str_resize:
  139|  36.7k|{
  140|  36.7k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  141|  36.7k|  GCRef *newtab, *oldtab = g->str.tab;
  142|  36.7k|  MSize i;
  143|       |
  144|       |  /* No resizing during GC traversal or if already too big. */
  145|  36.7k|  if (g->gc.state == GCSsweepstring || newmask >= LJ_MAX_STRTAB-1)
  ------------------
  |  |   58|  36.7k|#define LJ_MAX_STRTAB	(1<<26)		/* Max. string table size. */
  ------------------
  |  Branch (145:7): [True: 0, False: 36.7k]
  |  Branch (145:40): [True: 0, False: 36.7k]
  ------------------
  146|      0|    return;
  147|       |
  148|  36.7k|  newtab = lj_mem_newvec(L, newmask+1, GCRef);
  ------------------
  |  |  125|  36.7k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  36.7k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  149|  36.7k|  memset(newtab, 0, (newmask+1)*sizeof(GCRef));
  150|       |
  151|  36.7k|#if LUAJIT_SECURITY_STRHASH
  152|       |  /* Check which chains need secondary hashes. */
  153|  36.7k|  if (g->str.second) {
  ------------------
  |  Branch (153:7): [True: 0, False: 36.7k]
  ------------------
  154|      0|    int newsecond = 0;
  155|       |    /* Compute primary chain lengths. */
  156|      0|    for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (156:27): [True: 0, False: 0]
  ------------------
  157|      0|      GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  158|      0|      while (o) {
  ------------------
  |  Branch (158:14): [True: 0, False: 0]
  ------------------
  159|      0|	GCstr *s = gco2str(o);
  ------------------
  |  |  765|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  160|      0|	MSize hash = s->hashalg ? hash_sparse(g->str.seed, strdata(s), s->len) :
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (160:15): [True: 0, False: 0]
  ------------------
  161|      0|				  s->hash;
  162|      0|	hash &= newmask;
  163|      0|	setgcrefp(newtab[hash], gcrefu(newtab[hash]) + 1);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  164|      0|	o = gcnext(o);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  165|      0|      }
  166|      0|    }
  167|       |    /* Mark secondary chains. */
  168|      0|    for (i = newmask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (168:23): [True: 0, False: 0]
  ------------------
  169|      0|      int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
                    int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |  135|      0|#define LJ_STR_MAXCOLL		32
  ------------------
  170|      0|      newsecond |= secondary;
  171|      0|      setgcrefp(newtab[i], secondary);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  172|      0|    }
  173|      0|    g->str.second = newsecond;
  174|      0|  }
  175|  36.7k|#endif
  176|       |
  177|       |  /* Reinsert all strings from the old table into the new table. */
  178|  36.7k|  for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (178:25): [True: 0, False: 36.7k]
  ------------------
  179|      0|    GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  180|      0|    while (o) {
  ------------------
  |  Branch (180:12): [True: 0, False: 0]
  ------------------
  181|      0|      GCobj *next = gcnext(o);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  182|      0|      GCstr *s = gco2str(o);
  ------------------
  |  |  765|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|      MSize hash = s->hash;
  184|      0|#if LUAJIT_SECURITY_STRHASH
  185|      0|      uintptr_t u;
  186|      0|      if (LJ_LIKELY(!s->hashalg)) {  /* String hashed with primary hash. */
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  187|      0|	hash &= newmask;
  188|      0|	u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  189|      0|	if (LJ_UNLIKELY(u & 1)) {  /* Switch string to secondary hash. */
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  190|      0|	  s->hash = hash = hash_dense(g->str.seed, s->hash, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  191|      0|	  s->hashalg = 1;
  192|      0|	  hash &= newmask;
  193|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  194|      0|	}
  195|      0|      } else {  /* String hashed with secondary hash. */
  196|      0|	MSize shash = hash_sparse(g->str.seed, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  197|      0|	u = gcrefu(newtab[shash & newmask]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  198|      0|	if (u & 1) {
  ------------------
  |  Branch (198:6): [True: 0, False: 0]
  ------------------
  199|      0|	  hash &= newmask;
  200|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  201|      0|	} else {  /* Revert string back to primary hash. */
  202|      0|	  s->hash = shash;
  203|      0|	  s->hashalg = 0;
  204|      0|	  hash = (shash & newmask);
  205|      0|	}
  206|      0|      }
  207|       |      /* NOBARRIER: The string table is a GC root. */
  208|      0|      setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  209|      0|      setgcrefp(newtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  210|       |#else
  211|       |      hash &= newmask;
  212|       |      /* NOBARRIER: The string table is a GC root. */
  213|       |      setgcrefr(o->gch.nextgc, newtab[hash]);
  214|       |      setgcref(newtab[hash], o);
  215|       |#endif
  216|      0|      o = next;
  217|      0|    }
  218|      0|  }
  219|       |
  220|       |  /* Free old table and replace with new table. */
  221|  36.7k|  lj_str_freetab(g);
  ------------------
  |  |   25|  36.7k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  36.7k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  222|  36.7k|  g->str.tab = newtab;
  223|  36.7k|  g->str.mask = newmask;
  224|  36.7k|}
lj_str_new:
  324|  2.13M|{
  325|  2.13M|  global_State *g = G(L);
  ------------------
  |  |  705|  2.13M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.13M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  326|  2.13M|  if (lenx-1 < LJ_MAX_STR-1) {
  ------------------
  |  |   54|  2.13M|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|  2.13M|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (326:7): [True: 2.12M, False: 2.25k]
  ------------------
  327|  2.12M|    MSize len = (MSize)lenx;
  328|  2.12M|    StrHash hash = hash_sparse(g->str.seed, str, len);
  329|  2.12M|    MSize coll = 0;
  330|  2.12M|    int hashalg = 0;
  331|       |    /* Check if the string has already been interned. */
  332|  2.12M|    GCobj *o = gcref(g->str.tab[hash & g->str.mask]);
  ------------------
  |  |   67|  2.12M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  333|  2.12M|#if LUAJIT_SECURITY_STRHASH
  334|  2.12M|    if (LJ_UNLIKELY((uintptr_t)o & 1)) {  /* Secondary hash for this chain? */
  ------------------
  |  |  146|  2.12M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 2.12M]
  |  |  ------------------
  ------------------
  335|      0|      hashalg = 1;
  336|      0|      hash = hash_dense(g->str.seed, hash, str, len);
  337|      0|      o = (GCobj *)(gcrefu(g->str.tab[hash & g->str.mask]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  338|      0|    }
  339|  2.12M|#endif
  340|  2.31M|    while (o != NULL) {
  ------------------
  |  Branch (340:12): [True: 447k, False: 1.86M]
  ------------------
  341|   447k|      GCstr *sx = gco2str(o);
  ------------------
  |  |  765|   447k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|   447k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   447k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   447k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 447k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   447k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  342|   447k|      if (sx->hash == hash && sx->len == len) {
  ------------------
  |  Branch (342:11): [True: 259k, False: 187k]
  |  Branch (342:31): [True: 259k, False: 3]
  ------------------
  343|   259k|	if (memcmp(str, strdata(sx), len) == 0) {
  ------------------
  |  |  316|   259k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (343:6): [True: 259k, False: 0]
  ------------------
  344|   259k|	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   37|   259k|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|   259k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   259k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   259k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   259k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   259k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   259k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   259k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 259k]
  |  |  ------------------
  ------------------
              	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   43|      0|#define flipwhite(x)	((x)->gch.marked ^= LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  345|   259k|	  return sx;  /* Return existing string. */
  346|   259k|	}
  347|      0|	coll++;
  348|      0|      }
  349|   187k|      coll++;
  350|   187k|      o = gcnext(o);
  ------------------
  |  |   90|   187k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|   187k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  351|   187k|    }
  352|  1.86M|#if LUAJIT_SECURITY_STRHASH
  353|       |    /* Rehash chain if there are too many collisions. */
  354|  1.86M|    if (LJ_UNLIKELY(coll > LJ_STR_MAXCOLL) && !hashalg) {
  ------------------
  |  |  146|  3.73M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 1.86M]
  |  |  ------------------
  ------------------
  |  Branch (354:47): [True: 0, False: 0]
  ------------------
  355|      0|      return lj_str_rehash_chain(L, hash, str, len);
  356|      0|    }
  357|  1.86M|#endif
  358|       |    /* Otherwise allocate a new string. */
  359|  1.86M|    return lj_str_alloc(L, str, len, hash, hashalg);
  360|  1.86M|  } else {
  361|  2.25k|    if (lenx)
  ------------------
  |  Branch (361:9): [True: 0, False: 2.25k]
  ------------------
  362|      0|      lj_err_msg(L, LJ_ERR_STROV);
  363|  2.25k|    return &g->strempty;
  364|  2.25k|  }
  365|  2.13M|}
lj_str_free:
  368|  1.86M|{
  369|  1.86M|  g->str.num--;
  370|  1.86M|  lj_mem_free(g, s, lj_str_size(s->len));
  ------------------
  |  |   29|  1.86M|#define lj_str_size(len)	(sizeof(GCstr) + (((len)+4) & ~(MSize)3))
  ------------------
  371|  1.86M|}
lj_str_init:
  374|  36.7k|{
  375|  36.7k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  376|  36.7k|  g->str.seed = lj_prng_u64(&g->prng);
  377|  36.7k|  lj_str_resize(L, LJ_MIN_STRTAB-1);
  ------------------
  |  |   79|  36.7k|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  378|  36.7k|}
lj_str.c:hash_sparse:
   86|  2.12M|{
   87|       |  /* Constants taken from lookup3 hash by Bob Jenkins. */
   88|  2.12M|  StrHash a, b, h = len ^ (StrHash)seed;
   89|  2.12M|  if (len >= 4) {  /* Caveat: unaligned access! */
  ------------------
  |  Branch (89:7): [True: 1.74M, False: 386k]
  ------------------
   90|  1.74M|    a = lj_getu32(str);
   91|  1.74M|    h ^= lj_getu32(str+len-4);
   92|  1.74M|    b = lj_getu32(str+(len>>1)-2);
   93|  1.74M|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  1.74M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   94|  1.74M|    b += lj_getu32(str+(len>>2)-1);
   95|  1.74M|  } else {
   96|   386k|    a = *(const uint8_t *)str;
   97|   386k|    h ^= *(const uint8_t *)(str+len-1);
   98|   386k|    b = *(const uint8_t *)(str+(len>>1));
   99|   386k|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|   386k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  100|   386k|  }
  101|  2.12M|  a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|  2.12M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  102|  2.12M|  b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|  2.12M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  103|  2.12M|  h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|  2.12M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  104|  2.12M|  return h;
  105|  2.12M|}
lj_str.c:lj_str_alloc:
  286|  1.86M|{
  287|  1.86M|  GCstr *s = lj_mem_newt(L, lj_str_size(len), GCstr);
  ------------------
  |  |  133|  1.86M|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  1.86M|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  288|  1.86M|  global_State *g = G(L);
  ------------------
  |  |  705|  1.86M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.86M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|  1.86M|  uintptr_t u;
  290|  1.86M|  newwhite(g, s);
  ------------------
  |  |   40|  1.86M|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|  1.86M|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  1.86M|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  1.86M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  1.86M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  1.86M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  291|  1.86M|  s->gct = ~LJ_TSTR;
  ------------------
  |  |  264|  1.86M|#define LJ_TSTR			(~4u)
  ------------------
  292|  1.86M|  s->len = len;
  293|  1.86M|  s->hash = hash;
  294|       |#ifndef STRID_RESEED_INTERVAL
  295|       |  s->sid = g->str.id++;
  296|       |#elif STRID_RESEED_INTERVAL
  297|  1.86M|  if (!g->str.idreseed--) {
  ------------------
  |  Branch (297:7): [True: 44.4k, False: 1.82M]
  ------------------
  298|  44.4k|    uint64_t r = lj_prng_u64(&g->prng);
  299|  44.4k|    g->str.id = (StrID)r;
  300|  44.4k|    g->str.idreseed = (uint8_t)(r >> (64 - STRID_RESEED_INTERVAL));
  ------------------
  |  |  276|  44.4k|#define STRID_RESEED_INTERVAL	8
  ------------------
  301|  44.4k|  }
  302|  1.86M|  s->sid = g->str.id++;
  303|       |#else
  304|       |  s->sid = (StrID)lj_prng_u64(&g->prng);
  305|       |#endif
  306|  1.86M|  s->reserved = 0;
  307|  1.86M|  s->hashalg = (uint8_t)hashalg;
  308|       |  /* Clear last 4 bytes of allocated memory. Implies zero-termination, too. */
  309|  1.86M|  *(uint32_t *)(strdatawr(s)+(len & ~(MSize)3)) = 0;
  ------------------
  |  |  317|  1.86M|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  310|  1.86M|  memcpy(strdatawr(s), str, len);
  ------------------
  |  |  317|  1.86M|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  311|       |  /* Add to string hash table. */
  312|  1.86M|  hash &= g->str.mask;
  313|  1.86M|  u = gcrefu(g->str.tab[hash]);
  ------------------
  |  |   69|  1.86M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  314|  1.86M|  setgcrefp(s->nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  1.86M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  315|       |  /* NOBARRIER: The string table is a GC root. */
  316|  1.86M|  setgcrefp(g->str.tab[hash], ((uintptr_t)s | (u & 1)));
  ------------------
  |  |   75|  1.86M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  317|  1.86M|  if (g->str.num++ > g->str.mask)  /* Allow a 100% load factor. */
  ------------------
  |  Branch (317:7): [True: 0, False: 1.86M]
  ------------------
  318|      0|    lj_str_resize(L, (g->str.mask<<1)+1);  /* Grow string table. */
  319|  1.86M|  return s;  /* Return newly interned string. */
  320|  1.86M|}

lj_strfmt_parse:
   35|   127k|{
   36|   127k|  const uint8_t *p = fs->p, *e = fs->e;
   37|   127k|  fs->str = (const char *)p;
   38|   179k|  for (; p < e; p++) {
  ------------------
  |  Branch (38:10): [True: 166k, False: 13.0k]
  ------------------
   39|   166k|    if (*p == '%') {  /* Escape char? */
  ------------------
  |  Branch (39:9): [True: 113k, False: 52.3k]
  ------------------
   40|   113k|      if (p[1] == '%') {  /* '%%'? */
  ------------------
  |  Branch (40:11): [True: 0, False: 113k]
  ------------------
   41|      0|	fs->p = ++p+1;
   42|      0|	goto retlit;
   43|   113k|      } else {
   44|   113k|	SFormat sf = 0;
   45|   113k|	uint32_t c;
   46|   113k|	if (p != (const uint8_t *)fs->str)
  ------------------
  |  Branch (46:6): [True: 50.5k, False: 63.4k]
  ------------------
   47|  50.5k|	  break;
   48|  63.4k|	for (p++; (uint32_t)*p - ' ' <= (uint32_t)('0' - ' '); p++) {
  ------------------
  |  Branch (48:12): [True: 0, False: 63.4k]
  ------------------
   49|       |	  /* Parse flags. */
   50|      0|	  if (*p == '-') sf |= STRFMT_F_LEFT;
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (50:8): [True: 0, False: 0]
  ------------------
   51|      0|	  else if (*p == '+') sf |= STRFMT_F_PLUS;
  ------------------
  |  |   38|      0|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (51:13): [True: 0, False: 0]
  ------------------
   52|      0|	  else if (*p == '0') sf |= STRFMT_F_ZERO;
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (52:13): [True: 0, False: 0]
  ------------------
   53|      0|	  else if (*p == ' ') sf |= STRFMT_F_SPACE;
  ------------------
  |  |   40|      0|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (53:13): [True: 0, False: 0]
  ------------------
   54|      0|	  else if (*p == '#') sf |= STRFMT_F_ALT;
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (54:13): [True: 0, False: 0]
  ------------------
   55|      0|	  else break;
   56|      0|	}
   57|  63.4k|	if ((uint32_t)*p - '0' < 10) {  /* Parse width. */
  ------------------
  |  Branch (57:6): [True: 0, False: 63.4k]
  ------------------
   58|      0|	  uint32_t width = (uint32_t)*p++ - '0';
   59|      0|	  if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (59:8): [True: 0, False: 0]
  ------------------
   60|      0|	    width = (uint32_t)*p++ - '0' + width*10;
   61|      0|	  sf |= (width << STRFMT_SH_WIDTH);
  ------------------
  |  |   45|      0|#define STRFMT_SH_WIDTH	16
  ------------------
   62|      0|	}
   63|  63.4k|	if (*p == '.') {  /* Parse precision. */
  ------------------
  |  Branch (63:6): [True: 0, False: 63.4k]
  ------------------
   64|      0|	  uint32_t prec = 0;
   65|      0|	  p++;
   66|      0|	  if ((uint32_t)*p - '0' < 10) {
  ------------------
  |  Branch (66:8): [True: 0, False: 0]
  ------------------
   67|      0|	    prec = (uint32_t)*p++ - '0';
   68|      0|	    if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (68:10): [True: 0, False: 0]
  ------------------
   69|      0|	      prec = (uint32_t)*p++ - '0' + prec*10;
   70|      0|	  }
   71|      0|	  sf |= ((prec+1) << STRFMT_SH_PREC);
  ------------------
  |  |   46|      0|#define STRFMT_SH_PREC	24
  ------------------
   72|      0|	}
   73|       |	/* Parse conversion. */
   74|  63.4k|	c = (uint32_t)*p - 'A';
   75|  63.4k|	if (LJ_LIKELY(c <= (uint32_t)('x' - 'A'))) {
  ------------------
  |  |  145|  63.4k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 63.4k, False: 0]
  |  |  ------------------
  ------------------
   76|  63.4k|	  uint32_t sx = strfmt_map[c];
   77|  63.4k|	  if (sx) {
  ------------------
  |  Branch (77:8): [True: 63.4k, False: 0]
  ------------------
   78|  63.4k|	    fs->p = p+1;
   79|  63.4k|	    return (sf | sx | ((c & 0x20) ? 0 : STRFMT_F_UPPER));
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (79:25): [True: 63.4k, False: 0]
  ------------------
   80|  63.4k|	  }
   81|  63.4k|	}
   82|       |	/* Return error location. */
   83|      0|	if (*p >= 32) p++;
  ------------------
  |  Branch (83:6): [True: 0, False: 0]
  ------------------
   84|      0|	fs->len = (MSize)(p - (const uint8_t *)fs->str);
   85|      0|	fs->p = fs->e;
   86|      0|	return STRFMT_ERR;
   87|  63.4k|      }
   88|   113k|    }
   89|   166k|  }
   90|  63.6k|  fs->p = p;
   91|  63.6k|retlit:
   92|  63.6k|  fs->len = (MSize)(p - (const uint8_t *)fs->str);
   93|  63.6k|  return fs->len ? STRFMT_LIT : STRFMT_EOF;
  ------------------
  |  Branch (93:10): [True: 50.7k, False: 12.9k]
  ------------------
   94|  63.6k|}
lj_strfmt_wint:
  108|  23.9k|{
  109|  23.9k|  uint32_t u = (uint32_t)k;
  110|  23.9k|  if (k < 0) { u = ~u+1u; *p++ = '-'; }
  ------------------
  |  Branch (110:7): [True: 0, False: 23.9k]
  ------------------
  111|  23.9k|  if (u < 10000) {
  ------------------
  |  Branch (111:7): [True: 16.8k, False: 7.13k]
  ------------------
  112|  16.8k|    if (u < 10) goto dig1;
  ------------------
  |  Branch (112:9): [True: 82, False: 16.7k]
  ------------------
  113|  16.7k|    if (u < 100) goto dig2;
  ------------------
  |  Branch (113:9): [True: 4.78k, False: 11.9k]
  ------------------
  114|  11.9k|    if (u < 1000) goto dig3;
  ------------------
  |  Branch (114:9): [True: 11.9k, False: 0]
  ------------------
  115|  11.9k|  } else {
  116|  7.13k|    uint32_t v = u / 10000; u -= v * 10000;
  117|  7.13k|    if (v < 10000) {
  ------------------
  |  Branch (117:9): [True: 7.13k, False: 0]
  ------------------
  118|  7.13k|      if (v < 10) goto dig5;
  ------------------
  |  Branch (118:11): [True: 0, False: 7.13k]
  ------------------
  119|  7.13k|      if (v < 100) goto dig6;
  ------------------
  |  Branch (119:11): [True: 7.13k, False: 0]
  ------------------
  120|      0|      if (v < 1000) goto dig7;
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|      0|    } else {
  122|      0|      uint32_t w = v / 10000; v -= w * 10000;
  123|      0|      if (w >= 10) WINT_R(w, 10, 10)
  ------------------
  |  |   99|      0|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  |  Branch (123:11): [True: 0, False: 0]
  ------------------
  124|      0|      *p++ = (char)('0'+w);
  125|      0|    }
  126|      0|    WINT_R(v, 23, 1000)
  ------------------
  |  |   99|      0|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  127|      0|    dig7: WINT_R(v, 12, 100)
  ------------------
  |  |   99|      0|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  128|  7.13k|    dig6: WINT_R(v, 10, 10)
  ------------------
  |  |   99|  7.13k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  129|  7.13k|    dig5: *p++ = (char)('0'+v);
  130|  7.13k|  }
  131|  7.13k|  WINT_R(u, 23, 1000)
  ------------------
  |  |   99|  7.13k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  132|  19.0k|  dig3: WINT_R(u, 12, 100)
  ------------------
  |  |   99|  19.0k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  133|  23.8k|  dig2: WINT_R(u, 10, 10)
  ------------------
  |  |   99|  23.8k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  134|  23.9k|  dig1: *p++ = (char)('0'+u);
  135|  23.9k|  return p;
  136|  23.8k|}
lj_strfmt_wptr:
  141|  12.6k|{
  142|  12.6k|  ptrdiff_t x = (ptrdiff_t)v;
  143|  12.6k|  MSize i, n = STRFMT_MAXBUF_PTR;
  ------------------
  |  |   73|  12.6k|#define STRFMT_MAXBUF_PTR	(2+2*sizeof(ptrdiff_t))  /* "0x" + hex ptr. */
  ------------------
  144|  12.6k|  if (x == 0) {
  ------------------
  |  Branch (144:7): [True: 0, False: 12.6k]
  ------------------
  145|      0|    *p++ = 'N'; *p++ = 'U'; *p++ = 'L'; *p++ = 'L';
  146|      0|    return p;
  147|      0|  }
  148|  12.6k|#if LJ_64
  149|       |  /* Shorten output for 64 bit pointers. */
  150|  12.6k|  n = 2+2*4+((x >> 32) ? 2+2*(lj_fls((uint32_t)(x >> 32))>>3) : 0);
  ------------------
  |  |  149|  12.6k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (150:14): [True: 12.6k, False: 0]
  ------------------
  151|  12.6k|#endif
  152|  12.6k|  p[0] = '0';
  153|  12.6k|  p[1] = 'x';
  154|   164k|  for (i = n-1; i >= 2; i--, x >>= 4)
  ------------------
  |  Branch (154:17): [True: 151k, False: 12.6k]
  ------------------
  155|   151k|    p[i] = "0123456789abcdef"[(x & 15)];
  156|  12.6k|  return p+n;
  157|  12.6k|}
lj_strfmt_putptr:
  208|  12.6k|{
  209|  12.6k|  sb->w = lj_strfmt_wptr(lj_buf_more(sb, STRFMT_MAXBUF_PTR), v);
  ------------------
  |  |   73|  12.6k|#define STRFMT_MAXBUF_PTR	(2+2*sizeof(ptrdiff_t))  /* "0x" + hex ptr. */
  ------------------
  210|  12.6k|  return sb;
  211|  12.6k|}
lj_strfmt_putfxint:
  285|  12.6k|{
  286|  12.6k|  char buf[STRFMT_MAXBUF_XINT], *q = buf + sizeof(buf), *w;
  287|  12.6k|#ifdef LUA_USE_ASSERT
  288|  12.6k|  char *ws;
  289|  12.6k|#endif
  290|  12.6k|  MSize prefix = 0, len, prec, pprec, width, need;
  291|       |
  292|       |  /* Figure out signed prefixes. */
  293|  12.6k|  if (STRFMT_TYPE(sf) == STRFMT_INT) {
  ------------------
  |  |   48|  12.6k|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  |  Branch (293:7): [True: 12.6k, False: 0]
  ------------------
  294|  12.6k|    if ((int64_t)k < 0) {
  ------------------
  |  Branch (294:9): [True: 0, False: 12.6k]
  ------------------
  295|      0|      k = ~k+1u;
  296|      0|      prefix = 256 + '-';
  297|  12.6k|    } else if ((sf & STRFMT_F_PLUS)) {
  ------------------
  |  |   38|  12.6k|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (297:16): [True: 0, False: 12.6k]
  ------------------
  298|      0|      prefix = 256 + '+';
  299|  12.6k|    } else if ((sf & STRFMT_F_SPACE)) {
  ------------------
  |  |   40|  12.6k|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (299:16): [True: 0, False: 12.6k]
  ------------------
  300|      0|      prefix = 256 + ' ';
  301|      0|    }
  302|  12.6k|  }
  303|       |
  304|       |  /* Convert number and store to fixed-size buffer in reverse order. */
  305|  12.6k|  prec = STRFMT_PREC(sf);
  ------------------
  |  |   50|  12.6k|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|  12.6k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  306|  12.6k|  if ((int32_t)prec >= 0) sf &= ~STRFMT_F_ZERO;
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (306:7): [True: 0, False: 12.6k]
  ------------------
  307|  12.6k|  if (k == 0) {  /* Special-case zero argument. */
  ------------------
  |  Branch (307:7): [True: 0, False: 12.6k]
  ------------------
  308|      0|    if (prec != 0 ||
  ------------------
  |  Branch (308:9): [True: 0, False: 0]
  ------------------
  309|      0|	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   29|      0|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   29|      0|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (309:2): [True: 0, False: 0]
  ------------------
  310|      0|      *--q = '0';
  311|  12.6k|  } else if (!(sf & (STRFMT_T_HEX|STRFMT_T_OCT))) {  /* Decimal. */
  ------------------
  |  |   28|  12.6k|#define STRFMT_T_HEX	0x0010	/* STRFMT_UINT */
  ------------------
                } else if (!(sf & (STRFMT_T_HEX|STRFMT_T_OCT))) {  /* Decimal. */
  ------------------
  |  |   29|  12.6k|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
  |  Branch (311:14): [True: 12.6k, False: 0]
  ------------------
  312|  12.6k|    uint32_t k2;
  313|  12.6k|    while ((k >> 32)) { *--q = (char)('0' + k % 10); k /= 10; }
  ------------------
  |  Branch (313:12): [True: 0, False: 12.6k]
  ------------------
  314|  12.6k|    k2 = (uint32_t)k;
  315|   113k|    do { *--q = (char)('0' + k2 % 10); k2 /= 10; } while (k2);
  ------------------
  |  Branch (315:59): [True: 100k, False: 12.6k]
  ------------------
  316|  12.6k|  } else if ((sf & STRFMT_T_HEX)) {  /* Hex. */
  ------------------
  |  |   28|      0|#define STRFMT_T_HEX	0x0010	/* STRFMT_UINT */
  ------------------
  |  Branch (316:14): [True: 0, False: 0]
  ------------------
  317|      0|    const char *hexdig = (sf & STRFMT_F_UPPER) ? "0123456789ABCDEF" :
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (317:26): [True: 0, False: 0]
  ------------------
  318|      0|						 "0123456789abcdef";
  319|      0|    do { *--q = hexdig[(k & 15)]; k >>= 4; } while (k);
  ------------------
  |  Branch (319:53): [True: 0, False: 0]
  ------------------
  320|      0|    if ((sf & STRFMT_F_ALT)) prefix = 512 + ((sf & STRFMT_F_UPPER) ? 'X' : 'x');
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
                  if ((sf & STRFMT_F_ALT)) prefix = 512 + ((sf & STRFMT_F_UPPER) ? 'X' : 'x');
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (320:9): [True: 0, False: 0]
  |  Branch (320:46): [True: 0, False: 0]
  ------------------
  321|      0|  } else {  /* Octal. */
  322|      0|    do { *--q = (char)('0' + (uint32_t)(k & 7)); k >>= 3; } while (k);
  ------------------
  |  Branch (322:68): [True: 0, False: 0]
  ------------------
  323|      0|    if ((sf & STRFMT_F_ALT)) *--q = '0';
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (323:9): [True: 0, False: 0]
  ------------------
  324|      0|  }
  325|       |
  326|       |  /* Calculate sizes. */
  327|  12.6k|  len = (MSize)(buf + sizeof(buf) - q);
  328|  12.6k|  if ((int32_t)len >= (int32_t)prec) prec = len;
  ------------------
  |  Branch (328:7): [True: 12.6k, False: 0]
  ------------------
  329|  12.6k|  width = STRFMT_WIDTH(sf);
  ------------------
  |  |   49|  12.6k|#define STRFMT_WIDTH(sf)	(((sf) >> STRFMT_SH_WIDTH) & 255u)
  |  |  ------------------
  |  |  |  |   45|  12.6k|#define STRFMT_SH_WIDTH	16
  |  |  ------------------
  ------------------
  330|  12.6k|  pprec = prec + (prefix >> 8);
  331|  12.6k|  need = width > pprec ? width : pprec;
  ------------------
  |  Branch (331:10): [True: 0, False: 12.6k]
  ------------------
  332|  12.6k|  w = lj_buf_more(sb, need);
  333|  12.6k|#ifdef LUA_USE_ASSERT
  334|  12.6k|  ws = w;
  335|  12.6k|#endif
  336|       |
  337|       |  /* Format number with leading/trailing whitespace and zeros. */
  338|  12.6k|  if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == 0)
  ------------------
  |  |   37|  12.6k|#define STRFMT_F_LEFT	0x0100
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == 0)
  ------------------
  |  |   39|  12.6k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (338:7): [True: 12.6k, False: 0]
  ------------------
  339|  12.6k|    while (width-- > pprec) *w++ = ' ';
  ------------------
  |  Branch (339:12): [True: 0, False: 12.6k]
  ------------------
  340|  12.6k|  if (prefix) {
  ------------------
  |  Branch (340:7): [True: 0, False: 12.6k]
  ------------------
  341|      0|    if ((char)prefix >= 'X') *w++ = '0';
  ------------------
  |  Branch (341:9): [True: 0, False: 0]
  ------------------
  342|      0|    *w++ = (char)prefix;
  343|      0|  }
  344|  12.6k|  if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   37|  12.6k|#define STRFMT_F_LEFT	0x0100
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   39|  12.6k|#define STRFMT_F_ZERO	0x0400
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   39|  12.6k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (344:7): [True: 0, False: 12.6k]
  ------------------
  345|      0|    while (width-- > pprec) *w++ = '0';
  ------------------
  |  Branch (345:12): [True: 0, False: 0]
  ------------------
  346|  12.6k|  while (prec-- > len) *w++ = '0';
  ------------------
  |  Branch (346:10): [True: 0, False: 12.6k]
  ------------------
  347|   126k|  while (q < buf + sizeof(buf)) *w++ = *q++;  /* Add number itself. */
  ------------------
  |  Branch (347:10): [True: 113k, False: 12.6k]
  ------------------
  348|  12.6k|  if ((sf & STRFMT_F_LEFT))
  ------------------
  |  |   37|  12.6k|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (348:7): [True: 0, False: 12.6k]
  ------------------
  349|      0|    while (width-- > pprec) *w++ = ' ';
  ------------------
  |  Branch (349:12): [True: 0, False: 0]
  ------------------
  350|       |
  351|  12.6k|  lj_assertX(need == (MSize)(w - ws), "miscalculated format size");
  ------------------
  |  |  366|  12.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  12.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 12.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  12.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  352|  12.6k|  sb->w = w;
  353|  12.6k|  return sb;
  354|  12.6k|}
lj_strfmt_number:
  500|    240|{
  501|    240|  return tvisint(o) ? lj_strfmt_int(L, intV(o)) : lj_strfmt_num(L, o);
  ------------------
  |  |  803|    240|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|    480|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                return tvisint(o) ? lj_strfmt_int(L, intV(o)) : lj_strfmt_num(L, o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  502|    240|}
lj_strfmt_pushvf:
  556|  12.9k|{
  557|  12.9k|  SBuf *sb = lj_buf_tmp_(L);
  558|  12.9k|  FormatState fs;
  559|  12.9k|  SFormat sf;
  560|  12.9k|  GCstr *str;
  561|  12.9k|  lj_strfmt_init(&fs, fmt, (MSize)strlen(fmt));
  562|   127k|  while ((sf = lj_strfmt_parse(&fs)) != STRFMT_EOF) {
  ------------------
  |  Branch (562:10): [True: 114k, False: 12.9k]
  ------------------
  563|   114k|    switch (STRFMT_TYPE(sf)) {
  ------------------
  |  |   48|   114k|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  564|  50.7k|    case STRFMT_LIT:
  ------------------
  |  Branch (564:5): [True: 50.7k, False: 63.4k]
  ------------------
  565|  50.7k|      lj_buf_putmem(sb, fs.str, fs.len);
  566|  50.7k|      break;
  567|  12.6k|    case STRFMT_INT:
  ------------------
  |  Branch (567:5): [True: 12.6k, False: 101k]
  ------------------
  568|  12.6k|      lj_strfmt_putfxint(sb, sf, va_arg(argp, int32_t));
  569|  12.6k|      break;
  570|      0|    case STRFMT_UINT:
  ------------------
  |  Branch (570:5): [True: 0, False: 114k]
  ------------------
  571|      0|      lj_strfmt_putfxint(sb, sf, va_arg(argp, uint32_t));
  572|      0|      break;
  573|  12.6k|    case STRFMT_NUM:
  ------------------
  |  Branch (573:5): [True: 12.6k, False: 101k]
  ------------------
  574|  12.6k|      lj_strfmt_putfnum(sb, STRFMT_G14, va_arg(argp, lua_Number));
  ------------------
  |  |   67|  12.6k|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|  12.6k|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  12.6k|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|  12.6k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  575|  12.6k|      break;
  576|  12.9k|    case STRFMT_STR: {
  ------------------
  |  Branch (576:5): [True: 12.9k, False: 101k]
  ------------------
  577|  12.9k|      const char *s = va_arg(argp, char *);
  578|  12.9k|      if (s == NULL) s = "(null)";
  ------------------
  |  Branch (578:11): [True: 0, False: 12.9k]
  ------------------
  579|  12.9k|      lj_buf_putmem(sb, s, (MSize)strlen(s));
  580|  12.9k|      break;
  581|      0|      }
  582|  12.6k|    case STRFMT_CHAR:
  ------------------
  |  Branch (582:5): [True: 12.6k, False: 101k]
  ------------------
  583|  12.6k|      lj_buf_putb(sb, va_arg(argp, int));
  584|  12.6k|      break;
  585|  12.6k|    case STRFMT_PTR:
  ------------------
  |  Branch (585:5): [True: 12.6k, False: 101k]
  ------------------
  586|  12.6k|      lj_strfmt_putptr(sb, va_arg(argp, void *));
  587|  12.6k|      break;
  588|      0|    case STRFMT_ERR:
  ------------------
  |  Branch (588:5): [True: 0, False: 114k]
  ------------------
  589|      0|    default:
  ------------------
  |  Branch (589:5): [True: 0, False: 114k]
  ------------------
  590|      0|      lj_buf_putb(sb, '?');
  591|      0|      lj_assertL(0, "bad string format near offset %d", fs.len);
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  592|      0|      break;
  593|   114k|    }
  594|   114k|  }
  595|  12.9k|  str = lj_buf_str(L, sb);
  596|  12.9k|  setstrV(L, L->top, str);
  597|  12.9k|  incr_top(L);
  ------------------
  |  |   12|  12.9k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  25.8k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  12.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 12.9k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  598|  12.9k|  return strdata(str);
  ------------------
  |  |  316|  12.9k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  599|  12.9k|}
lj_strfmt_pushf:
  603|    126|{
  604|    126|  const char *msg;
  605|    126|  va_list argp;
  606|    126|  va_start(argp, fmt);
  607|    126|  msg = lj_strfmt_pushvf(L, fmt, argp);
  608|    126|  va_end(argp);
  609|    126|  return msg;
  610|    126|}

lj_strfmt.c:lj_strfmt_init:
   79|  12.9k|{
   80|  12.9k|  fs->p = (const uint8_t *)p;
   81|  12.9k|  fs->e = (const uint8_t *)p + len;
   82|       |  /* Must be NUL-terminated. May have NULs inside, too. */
   83|  12.9k|  lj_assertX(*fs->e == 0, "format not NUL-terminated");
  ------------------
  |  |  366|  12.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  12.9k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 12.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  12.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|  12.9k|}

lj_strfmt_putfnum:
  579|  12.8k|{
  580|  12.8k|  sb->w = lj_strfmt_wfnum(sb, sf, n, NULL);
  581|  12.8k|  return sb;
  582|  12.8k|}
lj_strfmt_num:
  588|    240|{
  589|    240|  char buf[STRFMT_MAXBUF_NUM];
  590|    240|  MSize len = (MSize)(lj_strfmt_wfnum(NULL, STRFMT_G14, o->n, buf) - buf);
  ------------------
  |  |   67|    240|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|    240|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    240|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|    240|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  591|    240|  return lj_str_new(L, buf, len);
  592|    240|}
lj_strfmt_num.c:lj_strfmt_wfnum:
  270|  13.0k|{
  271|  13.0k|  MSize width = STRFMT_WIDTH(sf), prec = STRFMT_PREC(sf), len;
  ------------------
  |  |   49|  13.0k|#define STRFMT_WIDTH(sf)	(((sf) >> STRFMT_SH_WIDTH) & 255u)
  |  |  ------------------
  |  |  |  |   45|  13.0k|#define STRFMT_SH_WIDTH	16
  |  |  ------------------
  ------------------
                MSize width = STRFMT_WIDTH(sf), prec = STRFMT_PREC(sf), len;
  ------------------
  |  |   50|  13.0k|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|  13.0k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  272|  13.0k|  TValue t;
  273|  13.0k|  t.n = n;
  274|  13.0k|  if (LJ_UNLIKELY((t.u32.hi << 1) >= 0xffe00000)) {
  ------------------
  |  |  146|  13.0k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 859, False: 12.1k]
  |  |  ------------------
  ------------------
  275|       |    /* Handle non-finite values uniformly for %a, %e, %f, %g. */
  276|    859|    int prefix = 0, ch = (sf & STRFMT_F_UPPER) ? 0x202020 : 0;
  ------------------
  |  |   42|    859|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (276:26): [True: 0, False: 859]
  ------------------
  277|    859|    if (((t.u32.hi & 0x000fffff) | t.u32.lo) != 0) {
  ------------------
  |  Branch (277:9): [True: 859, False: 0]
  ------------------
  278|    859|      ch ^= ('n' << 16) | ('a' << 8) | 'n';
  279|    859|      if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|    859|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (279:11): [True: 0, False: 859]
  ------------------
  280|    859|    } else {
  281|      0|      ch ^= ('i' << 16) | ('n' << 8) | 'f';
  282|      0|      if ((t.u32.hi & 0x80000000)) prefix = '-';
  ------------------
  |  Branch (282:11): [True: 0, False: 0]
  ------------------
  283|      0|      else if ((sf & STRFMT_F_PLUS)) prefix = '+';
  ------------------
  |  |   38|      0|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (283:16): [True: 0, False: 0]
  ------------------
  284|      0|      else if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|      0|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (284:16): [True: 0, False: 0]
  ------------------
  285|      0|    }
  286|    859|    len = 3 + (prefix != 0);
  287|    859|    if (!p) p = lj_buf_more(sb, width > len ? width : len);
  ------------------
  |  Branch (287:9): [True: 859, False: 0]
  |  Branch (287:33): [True: 0, False: 859]
  ------------------
  288|    859|    if (!(sf & STRFMT_F_LEFT)) while (width-- > len) *p++ = ' ';
  ------------------
  |  |   37|    859|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (288:9): [True: 859, False: 0]
  |  Branch (288:39): [True: 0, False: 859]
  ------------------
  289|    859|    if (prefix) *p++ = prefix;
  ------------------
  |  Branch (289:9): [True: 0, False: 859]
  ------------------
  290|    859|    *p++ = (char)(ch >> 16); *p++ = (char)(ch >> 8); *p++ = (char)ch;
  291|  12.1k|  } else if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_A)) {
  ------------------
  |  |   51|  12.1k|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                } else if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_A)) {
  ------------------
  |  |   51|  12.1k|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (291:14): [True: 0, False: 12.1k]
  ------------------
  292|       |    /* %a */
  293|      0|    const char *hexdig = (sf & STRFMT_F_UPPER) ? "0123456789ABCDEFPX"
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (293:26): [True: 0, False: 0]
  ------------------
  294|      0|					       : "0123456789abcdefpx";
  295|      0|    int32_t e = (t.u32.hi >> 20) & 0x7ff;
  296|      0|    char prefix = 0, eprefix = '+';
  297|      0|    if (t.u32.hi & 0x80000000) prefix = '-';
  ------------------
  |  Branch (297:9): [True: 0, False: 0]
  ------------------
  298|      0|    else if ((sf & STRFMT_F_PLUS)) prefix = '+';
  ------------------
  |  |   38|      0|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (298:14): [True: 0, False: 0]
  ------------------
  299|      0|    else if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|      0|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (299:14): [True: 0, False: 0]
  ------------------
  300|      0|    t.u32.hi &= 0xfffff;
  301|      0|    if (e) {
  ------------------
  |  Branch (301:9): [True: 0, False: 0]
  ------------------
  302|      0|      t.u32.hi |= 0x100000;
  303|      0|      e -= 1023;
  304|      0|    } else if (t.u32.lo | t.u32.hi) {
  ------------------
  |  Branch (304:16): [True: 0, False: 0]
  ------------------
  305|       |      /* Non-zero denormal - normalise it. */
  306|      0|      uint32_t shift = t.u32.hi ? 20-lj_fls(t.u32.hi) : 52-lj_fls(t.u32.lo);
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
                    uint32_t shift = t.u32.hi ? 20-lj_fls(t.u32.hi) : 52-lj_fls(t.u32.lo);
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (306:24): [True: 0, False: 0]
  ------------------
  307|      0|      e = -1022 - shift;
  308|      0|      t.u64 <<= shift;
  309|      0|    }
  310|       |    /* abs(n) == t.u64 * 2^(e - 52) */
  311|       |    /* If n != 0, bit 52 of t.u64 is set, and is the highest set bit. */
  312|      0|    if ((int32_t)prec < 0) {
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|       |      /* Default precision: use smallest precision giving exact result. */
  314|      0|      prec = t.u32.lo ? 13-lj_ffs(t.u32.lo)/4 : 5-lj_ffs(t.u32.hi|0x100000)/4;
  ------------------
  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
                    prec = t.u32.lo ? 13-lj_ffs(t.u32.lo)/4 : 5-lj_ffs(t.u32.hi|0x100000)/4;
  ------------------
  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
  |  Branch (314:14): [True: 0, False: 0]
  ------------------
  315|      0|    } else if (prec < 13) {
  ------------------
  |  Branch (315:16): [True: 0, False: 0]
  ------------------
  316|       |      /* Precision is sufficiently low as to maybe require rounding. */
  317|      0|      t.u64 += (((uint64_t)1) << (51 - prec*4));
  318|      0|    }
  319|      0|    if (e < 0) {
  ------------------
  |  Branch (319:9): [True: 0, False: 0]
  ------------------
  320|      0|      eprefix = '-';
  321|      0|      e = -e;
  322|      0|    }
  323|      0|    len = 5 + ndigits_dec((uint32_t)e) + prec + (prefix != 0)
  324|      0|	    + ((prec | (sf & STRFMT_F_ALT)) != 0);
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  325|      0|    if (!p) p = lj_buf_more(sb, width > len ? width : len);
  ------------------
  |  Branch (325:9): [True: 0, False: 0]
  |  Branch (325:33): [True: 0, False: 0]
  ------------------
  326|      0|    if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
                  if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (326:9): [True: 0, False: 0]
  ------------------
  327|      0|      while (width-- > len) *p++ = ' ';
  ------------------
  |  Branch (327:14): [True: 0, False: 0]
  ------------------
  328|      0|    }
  329|      0|    if (prefix) *p++ = prefix;
  ------------------
  |  Branch (329:9): [True: 0, False: 0]
  ------------------
  330|      0|    *p++ = '0';
  331|      0|    *p++ = hexdig[17]; /* x or X */
  332|      0|    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
                  if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
                  if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (332:9): [True: 0, False: 0]
  ------------------
  333|      0|      while (width-- > len) *p++ = '0';
  ------------------
  |  Branch (333:14): [True: 0, False: 0]
  ------------------
  334|      0|    }
  335|      0|    *p++ = '0' + (t.u32.hi >> 20); /* Usually '1', sometimes '0' or '2'. */
  336|      0|    if ((prec | (sf & STRFMT_F_ALT))) {
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (336:9): [True: 0, False: 0]
  ------------------
  337|       |      /* Emit fractional part. */
  338|      0|      char *q = p + 1 + prec;
  339|      0|      *p = '.';
  340|      0|      if (prec < 13) t.u64 >>= (52 - prec*4);
  ------------------
  |  Branch (340:11): [True: 0, False: 0]
  ------------------
  341|      0|      else while (prec > 13) p[prec--] = '0';
  ------------------
  |  Branch (341:19): [True: 0, False: 0]
  ------------------
  342|      0|      while (prec) { p[prec--] = hexdig[t.u64 & 15]; t.u64 >>= 4; }
  ------------------
  |  Branch (342:14): [True: 0, False: 0]
  ------------------
  343|      0|      p = q;
  344|      0|    }
  345|      0|    *p++ = hexdig[16]; /* p or P */
  346|      0|    *p++ = eprefix; /* + or - */
  347|      0|    p = lj_strfmt_wint(p, e);
  348|  12.1k|  } else {
  349|       |    /* %e or %f or %g - begin by converting n to "nd" format. */
  350|  12.1k|    uint32_t nd[64];
  351|  12.1k|    uint32_t ndhi = 0, ndlo, i;
  352|  12.1k|    int32_t e = (t.u32.hi >> 20) & 0x7ff, ndebias = 0;
  353|  12.1k|    char prefix = 0, *q;
  354|  12.1k|    if (t.u32.hi & 0x80000000) prefix = '-';
  ------------------
  |  Branch (354:9): [True: 0, False: 12.1k]
  ------------------
  355|  12.1k|    else if ((sf & STRFMT_F_PLUS)) prefix = '+';
  ------------------
  |  |   38|  12.1k|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (355:14): [True: 0, False: 12.1k]
  ------------------
  356|  12.1k|    else if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|  12.1k|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (356:14): [True: 0, False: 12.1k]
  ------------------
  357|  12.1k|    prec += ((int32_t)prec >> 31) & 7; /* Default precision is 6. */
  358|  12.1k|    if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_G)) {
  ------------------
  |  |   51|  12.1k|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                  if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_G)) {
  ------------------
  |  |   51|  12.1k|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (358:9): [True: 12.1k, False: 0]
  ------------------
  359|       |      /* %g - decrement precision if non-zero (to make it like %e). */
  360|  12.1k|      prec--;
  361|  12.1k|      prec ^= (uint32_t)((int32_t)prec >> 31);
  362|  12.1k|    }
  363|  12.1k|    if ((sf & STRFMT_T_FP_E) && prec < 14 && n != 0) {
  ------------------
  |  |   31|  12.1k|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
  |  Branch (363:9): [True: 12.1k, False: 0]
  |  Branch (363:33): [True: 12.1k, False: 0]
  |  Branch (363:46): [True: 12.1k, False: 17]
  ------------------
  364|       |      /* Precision is sufficiently low that rescaling will probably work. */
  365|  12.1k|      if ((ndebias = rescale_e[e >> 6])) {
  ------------------
  |  Branch (365:11): [True: 11.7k, False: 414]
  ------------------
  366|  11.7k|	t.n = n * rescale_n[e >> 6];
  367|  11.7k|	if (LJ_UNLIKELY(!e)) t.n *= 1e10, ndebias -= 10;
  ------------------
  |  |  146|  11.7k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 11.7k, False: 0]
  |  |  ------------------
  ------------------
  368|  11.7k|	t.u64 -= 2; /* Convert 2ulp below (later we convert 2ulp above). */
  369|  11.7k|	nd[0] = 0x100000 | (t.u32.hi & 0xfffff);
  370|  11.7k|	e = ((t.u32.hi >> 20) & 0x7ff) - 1075 - (ND_MUL2K_MAX_SHIFT < 29);
  ------------------
  |  |  116|  11.7k|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  371|  11.7k|	goto load_t_lo; rescale_failed:
  372|  11.7k|	t.n = n;
  373|  11.7k|	e = (t.u32.hi >> 20) & 0x7ff;
  374|  11.7k|	ndebias = ndhi = 0;
  375|  11.7k|      }
  376|  12.1k|    }
  377|  12.1k|    nd[0] = t.u32.hi & 0xfffff;
  378|  12.1k|    if (e == 0) e++; else nd[0] |= 0x100000;
  ------------------
  |  Branch (378:9): [True: 11.7k, False: 414]
  ------------------
  379|  12.1k|    e -= 1043;
  380|  12.1k|    if (t.u32.lo) {
  ------------------
  |  Branch (380:9): [True: 11.7k, False: 431]
  ------------------
  381|  23.5k|      e -= 32 + (ND_MUL2K_MAX_SHIFT < 29); load_t_lo:
  ------------------
  |  |  116|  11.7k|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  382|  23.5k|#if ND_MUL2K_MAX_SHIFT >= 29
  383|  23.5k|      nd[0] = (nd[0] << 3) | (t.u32.lo >> 29);
  384|  23.5k|      ndhi = nd_mul2k(nd, ndhi, 29, t.u32.lo & 0x1fffffff, sf);
  385|       |#elif ND_MUL2K_MAX_SHIFT >= 11
  386|       |      ndhi = nd_mul2k(nd, ndhi, 11, t.u32.lo >> 21, sf);
  387|       |      ndhi = nd_mul2k(nd, ndhi, 11, (t.u32.lo >> 10) & 0x7ff, sf);
  388|       |      ndhi = nd_mul2k(nd, ndhi, 11, (t.u32.lo <<  1) & 0x7ff, sf);
  389|       |#else
  390|       |#error "ND_MUL2K_MAX_SHIFT too small"
  391|       |#endif
  392|  23.5k|    }
  393|  23.9k|    if (e >= 0) {
  ------------------
  |  Branch (393:9): [True: 0, False: 23.9k]
  ------------------
  394|      0|      ndhi = nd_mul2k(nd, ndhi, (uint32_t)e, 0, sf);
  395|      0|      ndlo = 0;
  396|  23.9k|    } else {
  397|  23.9k|      ndlo = nd_div2k(nd, ndhi, (uint32_t)-e, sf);
  398|  23.9k|      if (ndhi && !nd[ndhi]) ndhi--;
  ------------------
  |  Branch (398:11): [True: 23.5k, False: 431]
  |  Branch (398:19): [True: 23.5k, False: 0]
  ------------------
  399|  23.9k|    }
  400|       |    /* abs(n) == nd * 10^ndebias (for slightly loose interpretation of ==) */
  401|  23.9k|    if ((sf & STRFMT_T_FP_E)) {
  ------------------
  |  |   31|  23.9k|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
  |  Branch (401:9): [True: 23.9k, False: 0]
  ------------------
  402|       |      /* %e or %g - assume %e and start by calculating nd's exponent (nde). */
  403|  23.9k|      char eprefix = '+';
  404|  23.9k|      int32_t nde = -1;
  405|  23.9k|      MSize hilen;
  406|  23.9k|      if (ndlo && !nd[ndhi]) {
  ------------------
  |  Branch (406:11): [True: 23.5k, False: 431]
  |  Branch (406:19): [True: 11.7k, False: 11.7k]
  ------------------
  407|   411k|	ndhi = 64; do {} while (!nd[--ndhi]);
  ------------------
  |  Branch (407:26): [True: 399k, False: 11.7k]
  ------------------
  408|  11.7k|	nde -= 64 * 9;
  409|  11.7k|      }
  410|  23.9k|      hilen = ndigits_dec(nd[ndhi]);
  411|  23.9k|      nde += ndhi * 9 + hilen;
  412|  23.9k|      if (ndebias) {
  ------------------
  |  Branch (412:11): [True: 11.7k, False: 12.1k]
  ------------------
  413|       |	/*
  414|       |	** Rescaling was performed, but this introduced some error, and might
  415|       |	** have pushed us across a rounding boundary. We check whether this
  416|       |	** error affected the result by introducing even more error (2ulp in
  417|       |	** either direction), and seeing whether a rounding boundary was
  418|       |	** crossed. Having already converted the -2ulp case, we save off its
  419|       |	** most significant digits, convert the +2ulp case, and compare them.
  420|       |	*/
  421|  11.7k|	int32_t eidx = e + 70 + (ND_MUL2K_MAX_SHIFT < 29)
  ------------------
  |  |  116|  11.7k|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  422|  11.7k|			 + (t.u32.lo >= 0xfffffffe && !(~t.u32.hi << 12));
  ------------------
  |  Branch (422:8): [True: 0, False: 11.7k]
  |  Branch (422:34): [True: 0, False: 0]
  ------------------
  423|  11.7k|	const int8_t *m_e = four_ulp_m_e + eidx * 2;
  424|  11.7k|	lj_assertG_(G(sbufL(sb)), 0 <= eidx && eidx < 128, "bad eidx %d", eidx);
  ------------------
  |  |  363|  11.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  23.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 11.7k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 11.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  425|  11.7k|	nd[33] = nd[ndhi];
  426|  11.7k|	nd[32] = nd[(ndhi - 1) & 0x3f];
  427|  11.7k|	nd[31] = nd[(ndhi - 2) & 0x3f];
  428|  11.7k|	nd_add_m10e(nd, ndhi, (uint8_t)*m_e, m_e[1]);
  429|  11.7k|	if (LJ_UNLIKELY(!nd_similar(nd, ndhi, nd + 33, hilen, prec + 1))) {
  ------------------
  |  |  146|  11.7k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 11.7k, False: 0]
  |  |  ------------------
  ------------------
  430|  11.7k|	  goto rescale_failed;
  431|  11.7k|	}
  432|  11.7k|      }
  433|  12.1k|      if ((int32_t)(prec - nde) < (0x3f & -(int32_t)ndlo) * 9) {
  ------------------
  |  Branch (433:11): [True: 11.7k, False: 431]
  ------------------
  434|       |	/* Precision is sufficiently low as to maybe require rounding. */
  435|  11.7k|	ndhi = nd_add_m10e(nd, ndhi, 5, nde - prec - 1);
  436|  11.7k|	nde += (hilen != ndigits_dec(nd[ndhi]));
  437|  11.7k|      }
  438|  12.1k|      nde += ndebias;
  439|  12.1k|      if ((sf & STRFMT_T_FP_F)) {
  ------------------
  |  |   32|  12.1k|#define STRFMT_T_FP_F	0x0020	/* STRFMT_NUM */
  ------------------
  |  Branch (439:11): [True: 12.1k, False: 0]
  ------------------
  440|       |	/* %g */
  441|  12.1k|	if ((int32_t)prec >= nde && nde >= -4) {
  ------------------
  |  Branch (441:6): [True: 12.1k, False: 0]
  |  Branch (441:30): [True: 431, False: 11.7k]
  ------------------
  442|    431|	  if (nde < 0) ndhi = 0;
  ------------------
  |  Branch (442:8): [True: 0, False: 431]
  ------------------
  443|    431|	  prec -= nde;
  444|    431|	  goto g_format_like_f;
  445|  11.7k|	} else if (!(sf & STRFMT_F_ALT) && prec && width > 5) {
  ------------------
  |  |   41|  11.7k|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (445:13): [True: 11.7k, False: 0]
  |  Branch (445:37): [True: 11.7k, False: 0]
  |  Branch (445:45): [True: 0, False: 11.7k]
  ------------------
  446|       |	  /* Decrease precision in order to strip trailing zeroes. */
  447|      0|	  char tail[9];
  448|      0|	  uint32_t maxprec = hilen - 1 + ((ndhi - ndlo) & 0x3f) * 9;
  449|      0|	  if (prec >= maxprec) prec = maxprec;
  ------------------
  |  Branch (449:8): [True: 0, False: 0]
  ------------------
  450|      0|	  else ndlo = (ndhi - (((int32_t)(prec - hilen) + 9) / 9)) & 0x3f;
  451|      0|	  i = prec - hilen - (((ndhi - ndlo) & 0x3f) * 9) + 10;
  452|      0|	  lj_strfmt_wuint9(tail, nd[ndlo]);
  453|      0|	  while (prec && tail[--i] == '0') {
  ------------------
  |  Branch (453:11): [True: 0, False: 0]
  |  Branch (453:19): [True: 0, False: 0]
  ------------------
  454|      0|	    prec--;
  455|      0|	    if (!i) {
  ------------------
  |  Branch (455:10): [True: 0, False: 0]
  ------------------
  456|      0|	      if (ndlo == ndhi) { prec = 0; break; }
  ------------------
  |  Branch (456:12): [True: 0, False: 0]
  ------------------
  457|      0|	      ndlo = (ndlo + 1) & 0x3f;
  458|      0|	      lj_strfmt_wuint9(tail, nd[ndlo]);
  459|      0|	      i = 9;
  460|      0|	    }
  461|      0|	  }
  462|      0|	}
  463|  12.1k|      }
  464|  11.7k|      if (nde < 0) {
  ------------------
  |  Branch (464:11): [True: 11.7k, False: 0]
  ------------------
  465|       |	/* Make nde non-negative. */
  466|  11.7k|	eprefix = '-';
  467|  11.7k|	nde = -nde;
  468|  11.7k|      }
  469|  11.7k|      len = 3 + prec + (prefix != 0) + ndigits_dec((uint32_t)nde) + (nde < 10)
  470|  11.7k|	      + ((prec | (sf & STRFMT_F_ALT)) != 0);
  ------------------
  |  |   41|  11.7k|#define STRFMT_F_ALT	0x1000
  ------------------
  471|  11.7k|      if (!p) p = lj_buf_more(sb, (width > len ? width : len) + 5);
  ------------------
  |  Branch (471:11): [True: 11.7k, False: 0]
  |  Branch (471:36): [True: 0, False: 11.7k]
  ------------------
  472|  11.7k|      if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   37|  11.7k|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   39|  11.7k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (472:11): [True: 11.7k, False: 0]
  ------------------
  473|  11.7k|	while (width-- > len) *p++ = ' ';
  ------------------
  |  Branch (473:9): [True: 0, False: 11.7k]
  ------------------
  474|  11.7k|      }
  475|  11.7k|      if (prefix) *p++ = prefix;
  ------------------
  |  Branch (475:11): [True: 0, False: 11.7k]
  ------------------
  476|  11.7k|      if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   37|  11.7k|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|  11.7k|#define STRFMT_F_ZERO	0x0400
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|  11.7k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (476:11): [True: 0, False: 11.7k]
  ------------------
  477|      0|	while (width-- > len) *p++ = '0';
  ------------------
  |  Branch (477:9): [True: 0, False: 0]
  ------------------
  478|      0|      }
  479|  11.7k|      q = lj_strfmt_wint(p + 1, nd[ndhi]);
  480|  11.7k|      p[0] = p[1]; /* Put leading digit in the correct place. */
  481|  11.7k|      if ((prec | (sf & STRFMT_F_ALT))) {
  ------------------
  |  |   41|  11.7k|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (481:11): [True: 11.7k, False: 0]
  ------------------
  482|       |	/* Emit fractional part. */
  483|  11.7k|	p[1] = '.'; p += 2;
  484|  11.7k|	prec -= (MSize)(q - p); p = q; /* Account for digits already emitted. */
  485|       |	/* Then emit chunks of 9 digits (this may emit 8 digits too many). */
  486|  28.1k|	for (i = ndhi; (int32_t)prec > 0 && i != ndlo; prec -= 9) {
  ------------------
  |  Branch (486:17): [True: 16.3k, False: 11.7k]
  |  Branch (486:38): [True: 16.3k, False: 0]
  ------------------
  487|  16.3k|	  i = (i - 1) & 0x3f;
  488|  16.3k|	  p = lj_strfmt_wuint9(p, nd[i]);
  489|  16.3k|	}
  490|  11.7k|	if ((sf & STRFMT_T_FP_F) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   32|  11.7k|#define STRFMT_T_FP_F	0x0020	/* STRFMT_NUM */
  ------------------
              	if ((sf & STRFMT_T_FP_F) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   41|  11.7k|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (490:6): [True: 11.7k, False: 0]
  |  Branch (490:30): [True: 11.7k, False: 0]
  ------------------
  491|       |	  /* %g (and not %#g) - strip trailing zeroes. */
  492|  11.7k|	  p += (int32_t)prec & ((int32_t)prec >> 31);
  493|  11.7k|	  while (p[-1] == '0') p--;
  ------------------
  |  Branch (493:11): [True: 0, False: 11.7k]
  ------------------
  494|  11.7k|	  if (p[-1] == '.') p--;
  ------------------
  |  Branch (494:8): [True: 0, False: 11.7k]
  ------------------
  495|  11.7k|	} else {
  496|       |	  /* %e (or %#g) - emit trailing zeroes. */
  497|      0|	  while ((int32_t)prec > 0) { *p++ = '0'; prec--; }
  ------------------
  |  Branch (497:11): [True: 0, False: 0]
  ------------------
  498|      0|	  p += (int32_t)prec;
  499|      0|	}
  500|  11.7k|      } else {
  501|      0|	p++;
  502|      0|      }
  503|  11.7k|      *p++ = (sf & STRFMT_F_UPPER) ? 'E' : 'e';
  ------------------
  |  |   42|  11.7k|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (503:14): [True: 0, False: 11.7k]
  ------------------
  504|  11.7k|      *p++ = eprefix; /* + or - */
  505|  11.7k|      if (nde < 10) *p++ = '0'; /* Always at least two digits of exponent. */
  ------------------
  |  Branch (505:11): [True: 0, False: 11.7k]
  ------------------
  506|  11.7k|      p = lj_strfmt_wint(p, nde);
  507|  11.7k|    } else {
  508|       |      /* %f (or, shortly, %g in %f style) */
  509|      0|      if (prec < (MSize)(0x3f & -(int32_t)ndlo) * 9) {
  ------------------
  |  Branch (509:11): [True: 0, False: 0]
  ------------------
  510|       |	/* Precision is sufficiently low as to maybe require rounding. */
  511|      0|	ndhi = nd_add_m10e(nd, ndhi, 5, 0 - prec - 1);
  512|      0|      }
  513|    431|      g_format_like_f:
  514|    431|      if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT) && prec && width) {
  ------------------
  |  |   31|    431|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
                    if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT) && prec && width) {
  ------------------
  |  |   41|    431|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (514:11): [True: 431, False: 0]
  |  Branch (514:35): [True: 431, False: 0]
  |  Branch (514:59): [True: 431, False: 0]
  |  Branch (514:67): [True: 0, False: 431]
  ------------------
  515|       |	/* Decrease precision in order to strip trailing zeroes. */
  516|      0|	if (ndlo) {
  ------------------
  |  Branch (516:6): [True: 0, False: 0]
  ------------------
  517|       |	  /* nd has a fractional part; we need to look at its digits. */
  518|      0|	  char tail[9];
  519|      0|	  uint32_t maxprec = (64 - ndlo) * 9;
  520|      0|	  if (prec >= maxprec) prec = maxprec;
  ------------------
  |  Branch (520:8): [True: 0, False: 0]
  ------------------
  521|      0|	  else ndlo = 64 - (prec + 8) / 9;
  522|      0|	  i = prec - ((63 - ndlo) * 9);
  523|      0|	  lj_strfmt_wuint9(tail, nd[ndlo]);
  524|      0|	  while (prec && tail[--i] == '0') {
  ------------------
  |  Branch (524:11): [True: 0, False: 0]
  |  Branch (524:19): [True: 0, False: 0]
  ------------------
  525|      0|	    prec--;
  526|      0|	    if (!i) {
  ------------------
  |  Branch (526:10): [True: 0, False: 0]
  ------------------
  527|      0|	      if (ndlo == 63) { prec = 0; break; }
  ------------------
  |  Branch (527:12): [True: 0, False: 0]
  ------------------
  528|      0|	      lj_strfmt_wuint9(tail, nd[++ndlo]);
  529|      0|	      i = 9;
  530|      0|	    }
  531|      0|	  }
  532|      0|	} else {
  533|       |	  /* nd has no fractional part, so precision goes straight to zero. */
  534|      0|	  prec = 0;
  535|      0|	}
  536|      0|      }
  537|    431|      len = ndhi * 9 + ndigits_dec(nd[ndhi]) + prec + (prefix != 0)
  538|    431|		     + ((prec | (sf & STRFMT_F_ALT)) != 0);
  ------------------
  |  |   41|    431|#define STRFMT_F_ALT	0x1000
  ------------------
  539|    431|      if (!p) p = lj_buf_more(sb, (width > len ? width : len) + 8);
  ------------------
  |  Branch (539:11): [True: 191, False: 240]
  |  Branch (539:36): [True: 0, False: 191]
  ------------------
  540|    431|      if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   37|    431|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   39|    431|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (540:11): [True: 431, False: 0]
  ------------------
  541|    431|	while (width-- > len) *p++ = ' ';
  ------------------
  |  Branch (541:9): [True: 0, False: 431]
  ------------------
  542|    431|      }
  543|    431|      if (prefix) *p++ = prefix;
  ------------------
  |  Branch (543:11): [True: 0, False: 431]
  ------------------
  544|    431|      if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   37|    431|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|    431|#define STRFMT_F_ZERO	0x0400
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|    431|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (544:11): [True: 0, False: 431]
  ------------------
  545|      0|	while (width-- > len) *p++ = '0';
  ------------------
  |  Branch (545:9): [True: 0, False: 0]
  ------------------
  546|      0|      }
  547|       |      /* Emit integer part. */
  548|    431|      p = lj_strfmt_wint(p, nd[ndhi]);
  549|    431|      i = ndhi;
  550|    431|      while (i) p = lj_strfmt_wuint9(p, nd[--i]);
  ------------------
  |  Branch (550:14): [True: 0, False: 431]
  ------------------
  551|    431|      if ((prec | (sf & STRFMT_F_ALT))) {
  ------------------
  |  |   41|    431|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (551:11): [True: 431, False: 0]
  ------------------
  552|       |	/* Emit fractional part. */
  553|    431|	*p++ = '.';
  554|       |	/* Emit chunks of 9 digits (this may emit 8 digits too many). */
  555|    431|	while ((int32_t)prec > 0 && i != ndlo) {
  ------------------
  |  Branch (555:9): [True: 431, False: 0]
  |  Branch (555:30): [True: 0, False: 431]
  ------------------
  556|      0|	  i = (i - 1) & 0x3f;
  557|      0|	  p = lj_strfmt_wuint9(p, nd[i]);
  558|      0|	  prec -= 9;
  559|      0|	}
  560|    431|	if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   31|    431|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
              	if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   41|    431|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (560:6): [True: 431, False: 0]
  |  Branch (560:30): [True: 431, False: 0]
  ------------------
  561|       |	  /* %g (and not %#g) - strip trailing zeroes. */
  562|    431|	  p += (int32_t)prec & ((int32_t)prec >> 31);
  563|    431|	  while (p[-1] == '0') p--;
  ------------------
  |  Branch (563:11): [True: 0, False: 431]
  ------------------
  564|    431|	  if (p[-1] == '.') p--;
  ------------------
  |  Branch (564:8): [True: 431, False: 0]
  ------------------
  565|    431|	} else {
  566|       |	  /* %f (or %#g) - emit trailing zeroes. */
  567|      0|	  while ((int32_t)prec > 0) { *p++ = '0'; prec--; }
  ------------------
  |  Branch (567:11): [True: 0, False: 0]
  ------------------
  568|      0|	  p += (int32_t)prec;
  569|      0|	}
  570|    431|      }
  571|    431|    }
  572|  23.9k|  }
  573|  13.0k|  if ((sf & STRFMT_F_LEFT)) while (width-- > len) *p++ = ' ';
  ------------------
  |  |   37|  13.0k|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (573:7): [True: 0, False: 13.0k]
  |  Branch (573:36): [True: 0, False: 0]
  ------------------
  574|  13.0k|  return p;
  575|  13.0k|}
lj_strfmt_num.c:ndigits_dec:
   64|  47.9k|{
   65|  47.9k|  MSize t = ((lj_fls(x | 1) * 77) >> 8) + 1; /* 2^8/77 is roughly log2(10) */
  ------------------
  |  |  149|  47.9k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
   66|  47.9k|  return t + (x > ndigits_dec_threshold[t]);
   67|  47.9k|}
lj_strfmt_num.c:nd_mul2k:
  126|  23.5k|{
  127|  23.5k|  uint32_t i, ndlo = 0, start = 1;
  128|       |  /* Performance hacks. */
  129|  23.5k|  if (k > ND_MUL2K_MAX_SHIFT*2 && STRFMT_FP(sf) != STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |  116|  23.5k|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
                if (k > ND_MUL2K_MAX_SHIFT*2 && STRFMT_FP(sf) != STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|      0|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                if (k > ND_MUL2K_MAX_SHIFT*2 && STRFMT_FP(sf) != STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|      0|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (129:7): [True: 0, False: 23.5k]
  |  Branch (129:35): [True: 0, False: 0]
  ------------------
  130|      0|    start = ndhi - (STRFMT_PREC(sf) + 17) / 8;
  ------------------
  |  |   50|      0|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  131|      0|  }
  132|       |  /* Real logic. */
  133|  47.0k|  while (k >= ND_MUL2K_MAX_SHIFT) {
  ------------------
  |  |  116|  47.0k|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  |  Branch (133:10): [True: 23.5k, False: 23.5k]
  ------------------
  134|  47.0k|    for (i = ndlo; i <= ndhi; i++) {
  ------------------
  |  Branch (134:20): [True: 23.5k, False: 23.5k]
  ------------------
  135|  23.5k|      uint64_t val = ((uint64_t)nd[i] << ND_MUL2K_MAX_SHIFT) | carry_in;
  ------------------
  |  |  116|  23.5k|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  136|  23.5k|      carry_in = ND_MUL2K_DIV1E9(val);
  ------------------
  |  |  117|  23.5k|#define ND_MUL2K_DIV1E9(val)	((uint32_t)((val) / 1000000000))
  ------------------
  137|  23.5k|      nd[i] = (uint32_t)val - carry_in * 1000000000;
  138|  23.5k|    }
  139|  23.5k|    if (carry_in) {
  ------------------
  |  Branch (139:9): [True: 23.5k, False: 0]
  ------------------
  140|  23.5k|      nd[++ndhi] = carry_in; carry_in = 0;
  141|  23.5k|      if (start++ == ndlo) ++ndlo;
  ------------------
  |  Branch (141:11): [True: 0, False: 23.5k]
  ------------------
  142|  23.5k|    }
  143|  23.5k|    k -= ND_MUL2K_MAX_SHIFT;
  ------------------
  |  |  116|  23.5k|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  144|  23.5k|  }
  145|  23.5k|  if (k) {
  ------------------
  |  Branch (145:7): [True: 0, False: 23.5k]
  ------------------
  146|      0|    for (i = ndlo; i <= ndhi; i++) {
  ------------------
  |  Branch (146:20): [True: 0, False: 0]
  ------------------
  147|      0|      uint64_t val = ((uint64_t)nd[i] << k) | carry_in;
  148|      0|      carry_in = ND_MUL2K_DIV1E9(val);
  ------------------
  |  |  117|      0|#define ND_MUL2K_DIV1E9(val)	((uint32_t)((val) / 1000000000))
  ------------------
  149|      0|      nd[i] = (uint32_t)val - carry_in * 1000000000;
  150|      0|    }
  151|      0|    if (carry_in) nd[++ndhi] = carry_in;
  ------------------
  |  Branch (151:9): [True: 0, False: 0]
  ------------------
  152|      0|  }
  153|  23.5k|  return ndhi;
  154|  23.5k|}
lj_strfmt_num.c:nd_div2k:
  158|  23.9k|{
  159|  23.9k|  uint32_t ndlo = 0, stop1 = ~0, stop2 = ~0;
  160|       |  /* Performance hacks. */
  161|  23.9k|  if (!ndhi) {
  ------------------
  |  Branch (161:7): [True: 431, False: 23.5k]
  ------------------
  162|    431|    if (!nd[0]) {
  ------------------
  |  Branch (162:9): [True: 17, False: 414]
  ------------------
  163|     17|      return 0;
  164|    414|    } else {
  165|    414|      uint32_t s = lj_ffs(nd[0]);
  ------------------
  |  |  148|    414|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
  166|    414|      if (s >= k) { nd[0] >>= k; return 0; }
  ------------------
  |  Branch (166:11): [True: 414, False: 0]
  ------------------
  167|      0|      nd[0] >>= s; k -= s;
  168|      0|    }
  169|    431|  }
  170|  23.5k|  if (k > 18) {
  ------------------
  |  Branch (170:7): [True: 23.5k, False: 0]
  ------------------
  171|  23.5k|    if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|  23.5k|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                  if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|  23.5k|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (171:9): [True: 0, False: 23.5k]
  ------------------
  172|      0|      stop1 = 63 - (int32_t)STRFMT_PREC(sf) / 9;
  ------------------
  |  |   50|      0|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  173|  23.5k|    } else {
  174|  23.5k|      int32_t floorlog2 = ndhi * 29 + lj_fls(nd[ndhi]) - k;
  ------------------
  |  |  149|  23.5k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  175|  23.5k|      int32_t floorlog10 = (int32_t)(floorlog2 * 0.30102999566398114);
  176|  23.5k|      stop1 = 62 + (floorlog10 - (int32_t)STRFMT_PREC(sf)) / 9;
  ------------------
  |  |   50|  23.5k|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|  23.5k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  177|  23.5k|      stop2 = 61 + ndhi - (int32_t)STRFMT_PREC(sf) / 8;
  ------------------
  |  |   50|  23.5k|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|  23.5k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  178|  23.5k|    }
  179|  23.5k|  }
  180|       |  /* Real logic. */
  181|  1.45M|  while (k >= 9) {
  ------------------
  |  Branch (181:10): [True: 1.43M, False: 23.5k]
  ------------------
  182|  1.43M|    uint32_t i = ndhi, carry = 0;
  183|  6.56M|    for (;;) {
  184|  6.56M|      uint32_t val = nd[i];
  185|  6.56M|      nd[i] = (val >> 9) + carry;
  186|  6.56M|      carry = (val & 0x1ff) * 1953125;
  187|  6.56M|      if (i == ndlo) break;
  ------------------
  |  Branch (187:11): [True: 1.43M, False: 5.13M]
  ------------------
  188|  5.13M|      i = (i - 1) & 0x3f;
  189|  5.13M|    }
  190|  1.43M|    if (ndlo != stop1 && ndlo != stop2) {
  ------------------
  |  Branch (190:9): [True: 1.36M, False: 65.9k]
  |  Branch (190:26): [True: 468k, False: 898k]
  ------------------
  191|   468k|      if (carry) { ndlo = (ndlo - 1) & 0x3f; nd[ndlo] = carry; }
  ------------------
  |  Branch (191:11): [True: 468k, False: 0]
  ------------------
  192|   468k|      if (!nd[ndhi]) { ndhi = (ndhi - 1) & 0x3f; stop2--; }
  ------------------
  |  Branch (192:11): [True: 21.0k, False: 447k]
  ------------------
  193|   964k|    } else if (!nd[ndhi]) {
  ------------------
  |  Branch (193:16): [True: 407k, False: 557k]
  ------------------
  194|   407k|      if (ndhi != ndlo) { ndhi = (ndhi - 1) & 0x3f; stop2--; }
  ------------------
  |  Branch (194:11): [True: 407k, False: 0]
  ------------------
  195|      0|      else return ndlo;
  196|   407k|    }
  197|  1.43M|    k -= 9;
  198|  1.43M|  }
  199|  23.5k|  if (k) {
  ------------------
  |  Branch (199:7): [True: 23.5k, False: 0]
  ------------------
  200|  23.5k|    uint32_t mask = (1U << k) - 1, mul = 1000000000 >> k, i = ndhi, carry = 0;
  201|  86.9k|    for (;;) {
  202|  86.9k|      uint32_t val = nd[i];
  203|  86.9k|      nd[i] = (val >> k) + carry;
  204|  86.9k|      carry = (val & mask) * mul;
  205|  86.9k|      if (i == ndlo) break;
  ------------------
  |  Branch (205:11): [True: 23.5k, False: 63.4k]
  ------------------
  206|  63.4k|      i = (i - 1) & 0x3f;
  207|  63.4k|    }
  208|  23.5k|    if (carry) { ndlo = (ndlo - 1) & 0x3f; nd[ndlo] = carry; }
  ------------------
  |  Branch (208:9): [True: 23.5k, False: 0]
  ------------------
  209|  23.5k|  }
  210|  23.5k|  return ndlo;
  211|  23.5k|}
lj_strfmt_num.c:nd_add_m10e:
  215|  23.5k|{
  216|  23.5k|  uint32_t i, carry;
  217|  23.5k|  if (e >= 0) {
  ------------------
  |  Branch (217:7): [True: 0, False: 23.5k]
  ------------------
  218|      0|    i = (uint32_t)e/9;
  219|      0|    carry = m * (ndigits_dec_threshold[e - (int32_t)i*9] + 1);
  220|  23.5k|  } else {
  221|  23.5k|    int32_t f = (e-8)/9;
  222|  23.5k|    i = (uint32_t)(64 + f);
  223|  23.5k|    carry = m * (ndigits_dec_threshold[e - f*9] + 1);
  224|  23.5k|  }
  225|  23.5k|  for (;;) {
  226|  23.5k|    uint32_t val = nd[i] + carry;
  227|  23.5k|    if (LJ_UNLIKELY(val >= 1000000000)) {
  ------------------
  |  |  146|  23.5k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 23.5k]
  |  |  ------------------
  ------------------
  228|      0|      val -= 1000000000;
  229|      0|      nd[i] = val;
  230|      0|      if (LJ_UNLIKELY(i == ndhi)) {
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  231|      0|	ndhi = (ndhi + 1) & 0x3f;
  232|      0|	nd[ndhi] = 1;
  233|      0|	break;
  234|      0|      }
  235|      0|      carry = 1;
  236|      0|      i = (i + 1) & 0x3f;
  237|  23.5k|    } else {
  238|  23.5k|      nd[i] = val;
  239|  23.5k|      break;
  240|  23.5k|    }
  241|  23.5k|  }
  242|  23.5k|  return ndhi;
  243|  23.5k|}
lj_strfmt_num.c:nd_similar:
  248|  11.7k|{
  249|  11.7k|  char nd9[9], ref9[9];
  250|  11.7k|  if (hilen <= prec) {
  ------------------
  |  Branch (250:7): [True: 11.7k, False: 0]
  ------------------
  251|  11.7k|    if (LJ_UNLIKELY(nd[ndhi] != *ref)) return 0;
  ------------------
  |  |  146|  11.7k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
  252|  11.7k|    prec -= hilen; ref--; ndhi = (ndhi - 1) & 0x3f;
  253|  11.7k|    if (prec >= 9) {
  ------------------
  |  Branch (253:9): [True: 4.62k, False: 7.13k]
  ------------------
  254|  4.62k|      if (LJ_UNLIKELY(nd[ndhi] != *ref)) return 0;
  ------------------
  |  |  146|  4.62k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 4.62k]
  |  |  ------------------
  ------------------
  255|  4.62k|      prec -= 9; ref--; ndhi = (ndhi - 1) & 0x3f;
  256|  4.62k|    }
  257|  11.7k|  } else {
  258|      0|    prec -= hilen - 9;
  259|      0|  }
  260|  11.7k|  lj_assertX(prec < 9, "bad precision %d", prec);
  ------------------
  |  |  366|  11.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  261|  11.7k|  lj_strfmt_wuint9(nd9, nd[ndhi]);
  262|  11.7k|  lj_strfmt_wuint9(ref9, *ref);
  263|  11.7k|  return !memcmp(nd9, ref9, prec) && (nd9[prec] < '5') == (ref9[prec] < '5');
  ------------------
  |  Branch (263:10): [True: 11.7k, False: 0]
  |  Branch (263:38): [True: 0, False: 11.7k]
  ------------------
  264|  11.7k|}
lj_strfmt_num.c:lj_strfmt_wuint9:
   74|  39.9k|{
   75|  39.9k|  uint32_t v = u / 10000, w;
   76|  39.9k|  u -= v * 10000;
   77|  39.9k|  w = v / 10000;
   78|  39.9k|  v -= w * 10000;
   79|  39.9k|  *p++ = (char)('0'+w);
   80|  39.9k|  WINT_R(v, 23, 1000)
  ------------------
  |  |   70|  39.9k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   81|  39.9k|  WINT_R(v, 12, 100)
  ------------------
  |  |   70|  39.9k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   82|  39.9k|  WINT_R(v, 10, 10)
  ------------------
  |  |   70|  39.9k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   83|  39.9k|  *p++ = (char)('0'+v);
   84|  39.9k|  WINT_R(u, 23, 1000)
  ------------------
  |  |   70|  39.9k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   85|  39.9k|  WINT_R(u, 12, 100)
  ------------------
  |  |   70|  39.9k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   86|  39.9k|  WINT_R(u, 10, 10)
  ------------------
  |  |   70|  39.9k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   87|  39.9k|  *p++ = (char)('0'+u);
   88|  39.9k|  return p;
   89|  39.9k|}

lj_strscan_scan:
  377|    577|{
  378|    577|  int32_t neg = 0;
  379|    577|  const uint8_t *pe = p + len;
  380|       |
  381|       |  /* Remove leading space, parse sign and non-numbers. */
  382|    577|  if (LJ_UNLIKELY(!lj_char_isdigit(*p))) {
  ------------------
  |  |  146|    577|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 258, False: 319]
  |  |  ------------------
  ------------------
  383|    258|    while (lj_char_isspace(*p)) p++;
  384|    258|    if (*p == '+' || *p == '-') neg = (*p++ == '-');
  ------------------
  |  Branch (384:9): [True: 1, False: 257]
  |  Branch (384:22): [True: 2, False: 255]
  ------------------
  385|    258|    if (LJ_UNLIKELY(*p >= 'A')) {  /* Parse "inf", "infinity" or "nan". */
  ------------------
  |  |  146|    258|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 128, False: 130]
  |  |  ------------------
  ------------------
  386|    128|      TValue tmp;
  387|    128|      setnanV(&tmp);
  ------------------
  |  |  946|    128|#define setnanV(o)		((o)->u64 = U64x(fff80000,00000000))
  |  |  ------------------
  |  |  |  |   94|    128|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  388|    128|      if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|    256|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 2, False: 126]
  |  |  ------------------
  ------------------
                    if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|    130|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 2]
  |  |  ------------------
  ------------------
                    if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  389|      0|	if (neg) setminfV(&tmp); else setpinfV(&tmp);
  ------------------
  |  |  948|      0|#define setminfV(o)		((o)->u64 = U64x(fff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
              	if (neg) setminfV(&tmp); else setpinfV(&tmp);
  ------------------
  |  |  947|      0|#define setpinfV(o)		((o)->u64 = U64x(7ff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (389:6): [True: 0, False: 0]
  ------------------
  390|      0|	p += 3;
  391|      0|	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  392|      0|	    casecmp(p[3],'t') && casecmp(p[4],'y')) p += 5;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	    casecmp(p[3],'t') && casecmp(p[4],'y')) p += 5;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  393|    128|      } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|    256|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 2, False: 126]
  |  |  ------------------
  ------------------
                    } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|    130|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 2]
  |  |  ------------------
  ------------------
                    } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  394|      0|	p += 3;
  395|      0|      }
  396|    128|      while (lj_char_isspace(*p)) p++;
  397|    128|      if (*p || p < pe) return STRSCAN_ERROR;
  ------------------
  |  Branch (397:11): [True: 128, False: 0]
  |  Branch (397:17): [True: 0, False: 0]
  ------------------
  398|      0|      o->u64 = tmp.u64;
  399|      0|      return STRSCAN_NUM;
  400|    128|    }
  401|    258|  }
  402|       |
  403|       |  /* Parse regular number. */
  404|    449|  {
  405|    449|    StrScanFmt fmt = STRSCAN_INT;
  406|    449|    int cmask = LJ_CHAR_DIGIT;
  ------------------
  |  |   14|    449|#define LJ_CHAR_DIGIT	0x08
  ------------------
  407|    449|    int base = (opt & STRSCAN_OPT_C) && *p == '0' ? 0 : 10;
  ------------------
  |  |   16|    449|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (407:16): [True: 0, False: 449]
  |  Branch (407:41): [True: 0, False: 0]
  ------------------
  408|    449|    const uint8_t *sp, *dp = NULL;
  409|    449|    uint32_t dig = 0, hasdig = 0, x = 0;
  410|    449|    int32_t ex = 0;
  411|       |
  412|       |    /* Determine base and skip leading zeros. */
  413|    449|    if (LJ_UNLIKELY(*p <= '0')) {
  ------------------
  |  |  146|    449|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 139, False: 310]
  |  |  ------------------
  ------------------
  414|    139|      if (*p == '0') {
  ------------------
  |  Branch (414:11): [True: 26, False: 113]
  ------------------
  415|     26|	if (casecmp(p[1], 'x'))
  ------------------
  |  |   73|     26|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 26]
  |  |  ------------------
  ------------------
  416|      0|	  base = 16, cmask = LJ_CHAR_XDIGIT, p += 2;
  ------------------
  |  |   15|      0|#define LJ_CHAR_XDIGIT	0x10
  ------------------
  417|     26|	else if (casecmp(p[1], 'b'))
  ------------------
  |  |   73|     26|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 26]
  |  |  ------------------
  ------------------
  418|      0|	  base = 2, cmask = LJ_CHAR_DIGIT, p += 2;
  ------------------
  |  |   14|      0|#define LJ_CHAR_DIGIT	0x08
  ------------------
  419|     26|      }
  420|    170|      for ( ; ; p++) {
  421|    170|	if (*p == '0') {
  ------------------
  |  Branch (421:6): [True: 26, False: 144]
  ------------------
  422|     26|	  hasdig = 1;
  423|    144|	} else if (*p == '.') {
  ------------------
  |  Branch (423:13): [True: 5, False: 139]
  ------------------
  424|      5|	  if (dp) return STRSCAN_ERROR;
  ------------------
  |  Branch (424:8): [True: 0, False: 5]
  ------------------
  425|      5|	  dp = p;
  426|    139|	} else {
  427|    139|	  break;
  428|    139|	}
  429|    170|      }
  430|    139|    }
  431|       |
  432|       |    /* Preliminary digit and decimal point scan. */
  433|    742|    for (sp = p; ; p++) {
  434|    742|      if (LJ_LIKELY(lj_char_isa(*p, cmask))) {
  ------------------
  |  |  145|    742|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 293, False: 449]
  |  |  ------------------
  ------------------
  435|    293|	x = x * 10 + (*p & 15);  /* For fast path below. */
  436|    293|	dig++;
  437|    449|      } else if (*p == '.') {
  ------------------
  |  Branch (437:18): [True: 0, False: 449]
  ------------------
  438|      0|	if (dp) return STRSCAN_ERROR;
  ------------------
  |  Branch (438:6): [True: 0, False: 0]
  ------------------
  439|      0|	dp = p;
  440|    449|      } else {
  441|    449|	break;
  442|    449|      }
  443|    742|    }
  444|    449|    if (!(hasdig | dig)) return STRSCAN_ERROR;
  ------------------
  |  Branch (444:9): [True: 130, False: 319]
  ------------------
  445|       |
  446|       |    /* Handle decimal point. */
  447|    319|    if (dp) {
  ------------------
  |  Branch (447:9): [True: 0, False: 319]
  ------------------
  448|      0|      if (base == 2) return STRSCAN_ERROR;
  ------------------
  |  Branch (448:11): [True: 0, False: 0]
  ------------------
  449|      0|      fmt = STRSCAN_NUM;
  450|      0|      if (dig) {
  ------------------
  |  Branch (450:11): [True: 0, False: 0]
  ------------------
  451|      0|	ex = (int32_t)(dp-(p-1)); dp = p-1;
  452|      0|	while (ex < 0 && *dp-- == '0') ex++, dig--;  /* Skip trailing zeros. */
  ------------------
  |  Branch (452:9): [True: 0, False: 0]
  |  Branch (452:19): [True: 0, False: 0]
  ------------------
  453|      0|	if (ex <= -STRSCAN_MAXEXP) return STRSCAN_ERROR;
  ------------------
  |  |   66|      0|#define STRSCAN_MAXEXP	(1 << 20)
  ------------------
  |  Branch (453:6): [True: 0, False: 0]
  ------------------
  454|      0|	if (base == 16) ex *= 4;
  ------------------
  |  Branch (454:6): [True: 0, False: 0]
  ------------------
  455|      0|      }
  456|      0|    }
  457|       |
  458|       |    /* Parse exponent. */
  459|    319|    if (base >= 10 && casecmp(*p, (uint32_t)(base == 16 ? 'p' : 'e'))) {
  ------------------
  |  |   73|    638|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 319]
  |  |  |  Branch (73:40): [True: 0, False: 319]
  |  |  ------------------
  ------------------
  |  Branch (459:9): [True: 319, False: 0]
  ------------------
  460|      0|      uint32_t xx;
  461|      0|      int negx = 0;
  462|      0|      fmt = STRSCAN_NUM; p++;
  463|      0|      if (*p == '+' || *p == '-') negx = (*p++ == '-');
  ------------------
  |  Branch (463:11): [True: 0, False: 0]
  |  Branch (463:24): [True: 0, False: 0]
  ------------------
  464|      0|      if (!lj_char_isdigit(*p)) return STRSCAN_ERROR;
  ------------------
  |  |   28|      0|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|      0|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (464:11): [True: 0, False: 0]
  ------------------
  465|      0|      xx = (*p++ & 15);
  466|      0|      while (lj_char_isdigit(*p)) {
  467|      0|	xx = xx * 10 + (*p & 15);
  468|      0|	if (xx >= STRSCAN_MAXEXP) return STRSCAN_ERROR;
  ------------------
  |  |   66|      0|#define STRSCAN_MAXEXP	(1 << 20)
  ------------------
  |  Branch (468:6): [True: 0, False: 0]
  ------------------
  469|      0|	p++;
  470|      0|      }
  471|      0|      ex += negx ? (int32_t)(~xx+1u) : (int32_t)xx;
  ------------------
  |  Branch (471:13): [True: 0, False: 0]
  ------------------
  472|      0|    }
  473|       |
  474|       |    /* Parse suffix. */
  475|    319|    if (*p) {
  ------------------
  |  Branch (475:9): [True: 0, False: 319]
  ------------------
  476|       |      /* I (IMAG), U (U32), LL (I64), ULL/LLU (U64), L (long), UL/LU (ulong). */
  477|       |      /* NYI: f (float). Not needed until cp_number() handles non-integers. */
  478|      0|      if (casecmp(*p, 'i')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  479|      0|	if (!(opt & STRSCAN_OPT_IMAG)) return STRSCAN_ERROR;
  ------------------
  |  |   14|      0|#define STRSCAN_OPT_IMAG	0x04
  ------------------
  |  Branch (479:6): [True: 0, False: 0]
  ------------------
  480|      0|	p++; fmt = STRSCAN_IMAG;
  481|      0|      } else if (fmt == STRSCAN_INT) {
  ------------------
  |  Branch (481:18): [True: 0, False: 0]
  ------------------
  482|      0|	if (casecmp(*p, 'u')) p++, fmt = STRSCAN_U32;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  483|      0|	if (casecmp(*p, 'l')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  484|      0|	  p++;
  485|      0|	  if (casecmp(*p, 'l')) p++, fmt += STRSCAN_I64 - STRSCAN_INT;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  486|      0|	  else if (!(opt & STRSCAN_OPT_C)) return STRSCAN_ERROR;
  ------------------
  |  |   16|      0|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (486:13): [True: 0, False: 0]
  ------------------
  487|      0|	  else if (sizeof(long) == 8) fmt += STRSCAN_I64 - STRSCAN_INT;
  ------------------
  |  Branch (487:13): [Folded - Ignored]
  ------------------
  488|      0|	}
  489|      0|	if (casecmp(*p, 'u') && (fmt == STRSCAN_INT || fmt == STRSCAN_I64))
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  |  Branch (489:49): [True: 0, False: 0]
  ------------------
  490|      0|	  p++, fmt += STRSCAN_U32 - STRSCAN_INT;
  491|      0|	if ((fmt == STRSCAN_U32 && !(opt & STRSCAN_OPT_C)) ||
  ------------------
  |  |   16|      0|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (491:7): [True: 0, False: 0]
  |  Branch (491:29): [True: 0, False: 0]
  ------------------
  492|      0|	    (fmt >= STRSCAN_I64 && !(opt & STRSCAN_OPT_LL)))
  ------------------
  |  |   15|      0|#define STRSCAN_OPT_LL		0x08
  ------------------
  |  Branch (492:7): [True: 0, False: 0]
  |  Branch (492:29): [True: 0, False: 0]
  ------------------
  493|      0|	  return STRSCAN_ERROR;
  494|      0|      }
  495|      0|      while (lj_char_isspace(*p)) p++;
  496|      0|      if (*p) return STRSCAN_ERROR;
  ------------------
  |  Branch (496:11): [True: 0, False: 0]
  ------------------
  497|      0|    }
  498|    319|    if (p < pe) return STRSCAN_ERROR;
  ------------------
  |  Branch (498:9): [True: 0, False: 319]
  ------------------
  499|       |
  500|       |    /* Fast path for decimal 32 bit integers. */
  501|    319|    if (fmt == STRSCAN_INT && base == 10 &&
  ------------------
  |  Branch (501:9): [True: 319, False: 0]
  |  Branch (501:31): [True: 319, False: 0]
  ------------------
  502|    319|	(dig < 10 || (dig == 10 && *sp <= '2' && x < 0x80000000u+neg))) {
  ------------------
  |  Branch (502:3): [True: 319, False: 0]
  |  Branch (502:16): [True: 0, False: 0]
  |  Branch (502:29): [True: 0, False: 0]
  |  Branch (502:43): [True: 0, False: 0]
  ------------------
  503|    319|      if ((opt & STRSCAN_OPT_TONUM)) {
  ------------------
  |  |   13|    319|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (503:11): [True: 319, False: 0]
  ------------------
  504|    319|	o->n = neg ? -(double)x : (double)x;
  ------------------
  |  Branch (504:9): [True: 0, False: 319]
  ------------------
  505|    319|	return STRSCAN_NUM;
  506|    319|      } else if (x == 0 && neg) {
  ------------------
  |  Branch (506:18): [True: 0, False: 0]
  |  Branch (506:28): [True: 0, False: 0]
  ------------------
  507|      0|	o->n = -0.0;
  508|      0|	return STRSCAN_NUM;
  509|      0|      } else {
  510|      0|	o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (510:9): [True: 0, False: 0]
  ------------------
  511|      0|	return STRSCAN_INT;
  512|      0|      }
  513|    319|    }
  514|       |
  515|       |    /* Dispatch to base-specific parser. */
  516|      0|    if (base == 0 && !(fmt == STRSCAN_NUM || fmt == STRSCAN_IMAG))
  ------------------
  |  Branch (516:9): [True: 0, False: 0]
  |  Branch (516:24): [True: 0, False: 0]
  |  Branch (516:46): [True: 0, False: 0]
  ------------------
  517|      0|      return strscan_oct(sp, o, fmt, neg, dig);
  518|      0|    if (base == 16)
  ------------------
  |  Branch (518:9): [True: 0, False: 0]
  ------------------
  519|      0|      fmt = strscan_hex(sp, o, fmt, opt, ex, neg, dig);
  520|      0|    else if (base == 2)
  ------------------
  |  Branch (520:14): [True: 0, False: 0]
  ------------------
  521|      0|      fmt = strscan_bin(sp, o, fmt, opt, ex, neg, dig);
  522|      0|    else
  523|      0|      fmt = strscan_dec(sp, o, fmt, opt, ex, neg, dig);
  524|       |
  525|       |    /* Try to convert number to integer, if requested. */
  526|      0|    if (fmt == STRSCAN_NUM && (opt & STRSCAN_OPT_TOINT) && !tvismzero(o)) {
  ------------------
  |  |   12|      0|#define STRSCAN_OPT_TOINT	0x01  /* Convert to int32_t, if possible. */
  ------------------
                  if (fmt == STRSCAN_NUM && (opt & STRSCAN_OPT_TOINT) && !tvismzero(o)) {
  ------------------
  |  |  819|      0|#define tvismzero(o)	((o)->u64 == U64x(80000000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (526:9): [True: 0, False: 0]
  |  Branch (526:31): [True: 0, False: 0]
  |  Branch (526:60): [True: 0, False: 0]
  ------------------
  527|      0|      double n = o->n;
  528|      0|      int32_t i = lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  529|      0|      if (n == (lua_Number)i) { o->i = i; return STRSCAN_INT; }
  ------------------
  |  Branch (529:11): [True: 0, False: 0]
  ------------------
  530|      0|    }
  531|      0|    return fmt;
  532|      0|  }
  533|      0|}
lj_strscan_num:
  536|    389|{
  537|    389|  StrScanFmt fmt = lj_strscan_scan((const uint8_t *)strdata(str), str->len, o,
  ------------------
  |  |  316|    389|#define strdata(s)	((const char *)((s)+1))
  ------------------
  538|    389|				   STRSCAN_OPT_TONUM);
  ------------------
  |  |   13|    389|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  539|    389|  lj_assertX(fmt == STRSCAN_ERROR || fmt == STRSCAN_NUM, "bad scan format");
  ------------------
  |  |  366|    389|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    520|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 258, False: 131]
  |  |  |  |  |  Branch (355:5): [True: 131, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    389|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  540|    389|  return (fmt != STRSCAN_ERROR);
  541|    389|}

lj_tab_new:
  140|   232k|{
  141|   232k|  GCtab *t = newtab(L, asize, hbits);
  142|   232k|  clearapart(t);
  143|   232k|  if (t->hmask > 0) clearhpart(t);
  ------------------
  |  Branch (143:7): [True: 220k, False: 11.8k]
  ------------------
  144|   232k|  return t;
  145|   232k|}
lj_tab_new_ah:
  149|   121k|{
  150|   121k|  return lj_tab_new(L, (uint32_t)(a > 0 ? a+1 : 0), hsize2hbits(h));
  ------------------
  |  |   53|   121k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|  73.4k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 110k, False: 11.6k]
  |  |  |  Branch (53:32): [True: 36.7k, False: 73.4k]
  |  |  ------------------
  ------------------
  |  Branch (150:35): [True: 272, False: 121k]
  ------------------
  151|   121k|}
lj_tab_free:
  217|   232k|{
  218|   232k|  if (t->hmask > 0)
  ------------------
  |  Branch (218:7): [True: 220k, False: 11.4k]
  ------------------
  219|   220k|    lj_mem_freevec(g, noderef(t->node), t->hmask+1, Node);
  ------------------
  |  |  130|   220k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  220|   232k|  if (t->asize > 0 && LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|    294|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (220:7): [True: 294, False: 231k]
  |  Branch (220:23): [Folded - Ignored]
  |  Branch (220:47): [True: 249, False: 45]
  ------------------
  221|    249|    lj_mem_freevec(g, tvref(t->array), t->asize, TValue);
  ------------------
  |  |  130|    249|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  222|   232k|  if (LJ_MAX_COLOSIZE != 0 && t->colo)
  ------------------
  |  |   62|   232k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (222:7): [Folded - Ignored]
  |  Branch (222:31): [True: 45, False: 232k]
  ------------------
  223|     45|    lj_mem_free(g, t, sizetabcolo((uint32_t)t->colo & 0x7f));
  ------------------
  |  |  513|     45|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
  224|   232k|  else
  225|   232k|    lj_mem_freet(g, t);
  ------------------
  |  |  134|   232k|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  226|   232k|}
lj_tab_resize:
  232|    398|{
  233|    398|  Node *oldnode = noderef(t->node);
  ------------------
  |  |  515|    398|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    398|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  234|    398|  uint32_t oldasize = t->asize;
  235|    398|  uint32_t oldhmask = t->hmask;
  236|    398|  if (asize > oldasize) {  /* Array part grows? */
  ------------------
  |  Branch (236:7): [True: 22, False: 376]
  ------------------
  237|     22|    TValue *array;
  238|     22|    uint32_t i;
  239|     22|    if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|     22|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|     22|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (239:9): [True: 0, False: 22]
  ------------------
  240|      0|      lj_err_msg(L, LJ_ERR_TABOV);
  241|     22|    if (LJ_MAX_COLOSIZE != 0 && t->colo > 0) {
  ------------------
  |  |   62|     22|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (241:9): [Folded - Ignored]
  |  Branch (241:33): [True: 0, False: 22]
  ------------------
  242|       |      /* A colocated array must be separated and copied. */
  243|      0|      TValue *oarray = tvref(t->array);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  244|      0|      array = lj_mem_newvec(L, asize, TValue);
  ------------------
  |  |  125|      0|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|      0|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  245|      0|      t->colo = (int8_t)(t->colo | 0x80);  /* Mark as separated (colo < 0). */
  246|      0|      for (i = 0; i < oldasize; i++)
  ------------------
  |  Branch (246:19): [True: 0, False: 0]
  ------------------
  247|      0|	copyTV(L, &array[i], &oarray[i]);
  248|     22|    } else {
  249|     22|      array = (TValue *)lj_mem_realloc(L, tvref(t->array),
  ------------------
  |  |  217|     22|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     22|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  250|     22|			  oldasize*sizeof(TValue), asize*sizeof(TValue));
  251|     22|    }
  252|     22|    setmref(t->array, array);
  ------------------
  |  |   39|     22|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  253|     22|    t->asize = asize;
  254|     88|    for (i = oldasize; i < asize; i++)  /* Clear newly allocated slots. */
  ------------------
  |  Branch (254:24): [True: 66, False: 22]
  ------------------
  255|     66|      setnilV(&array[i]);
  ------------------
  |  |  872|     88|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  256|     22|  }
  257|       |  /* Create new (empty) hash part. */
  258|    398|  if (hbits) {
  ------------------
  |  Branch (258:7): [True: 376, False: 22]
  ------------------
  259|    376|    newhpart(L, t, hbits);
  260|    376|    clearhpart(t);
  261|    376|  } else {
  262|     22|    global_State *g = G(L);
  ------------------
  |  |  705|     22|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     22|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  263|     22|    setmref(t->node, &g->nilnode);
  ------------------
  |  |   39|     22|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  264|     22|#if LJ_GC64
  265|     22|    setmref(t->freetop, &g->nilnode);
  ------------------
  |  |   39|     22|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  266|     22|#endif
  267|     22|    t->hmask = 0;
  268|     22|  }
  269|    398|  if (asize < oldasize) {  /* Array part shrinks? */
  ------------------
  |  Branch (269:7): [True: 0, False: 398]
  ------------------
  270|      0|    TValue *array = tvref(t->array);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  271|      0|    uint32_t i;
  272|      0|    t->asize = asize;  /* Note: This 'shrinks' even colocated arrays. */
  273|      0|    for (i = asize; i < oldasize; i++)  /* Reinsert old array values. */
  ------------------
  |  Branch (273:21): [True: 0, False: 0]
  ------------------
  274|      0|      if (!tvisnil(&array[i]))
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (274:11): [True: 0, False: 0]
  ------------------
  275|      0|	copyTV(L, lj_tab_setinth(L, t, (int32_t)i), &array[i]);
  276|       |    /* Physically shrink only separated arrays. */
  277|      0|    if (LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|      0|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (277:9): [Folded - Ignored]
  |  Branch (277:33): [True: 0, False: 0]
  ------------------
  278|      0|      setmref(t->array, lj_mem_realloc(L, array,
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  279|      0|	      oldasize*sizeof(TValue), asize*sizeof(TValue)));
  280|      0|  }
  281|    398|  if (oldhmask > 0) {  /* Reinsert pairs from old hash part. */
  ------------------
  |  Branch (281:7): [True: 0, False: 398]
  ------------------
  282|      0|    global_State *g;
  283|      0|    uint32_t i;
  284|      0|    for (i = 0; i <= oldhmask; i++) {
  ------------------
  |  Branch (284:17): [True: 0, False: 0]
  ------------------
  285|      0|      Node *n = &oldnode[i];
  286|      0|      if (!tvisnil(&n->val))
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (286:11): [True: 0, False: 0]
  ------------------
  287|      0|	copyTV(L, lj_tab_set(L, t, &n->key), &n->val);
  288|      0|    }
  289|      0|    g = G(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  290|      0|    lj_mem_freevec(g, oldnode, oldhmask+1, Node);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  291|      0|  }
  292|    398|}
lj_tab_getinth:
  379|    558|{
  380|    558|  TValue k;
  381|    558|  Node *n;
  382|    558|  k.n = (lua_Number)key;
  383|    558|  n = hashnum(t, &k);
  ------------------
  |  |   45|    558|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|    558|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  384|    558|  do {
  385|    558|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  804|  1.11k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    558|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    558|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    558|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 558]
  |  |  ------------------
  ------------------
  |  Branch (385:29): [True: 0, False: 0]
  ------------------
  386|      0|      return &n->val;
  387|    558|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|    558|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|    558|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (387:12): [True: 0, False: 558]
  ------------------
  388|    558|  return NULL;
  389|    558|}
lj_tab_getstr:
  392|   388k|{
  393|   388k|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|   388k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  394|   388k|  do {
  395|   388k|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  795|   777k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   388k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   388k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 19.4k, False: 369k]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  859|  19.4k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  19.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  19.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  19.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 19.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  19.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (395:29): [True: 18.9k, False: 462]
  ------------------
  396|  18.9k|      return &n->val;
  397|   388k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|   369k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   369k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (397:12): [True: 0, False: 369k]
  ------------------
  398|   369k|  return NULL;
  399|   388k|}
lj_tab_get:
  402|   370k|{
  403|   370k|  if (tvisstr(key)) {
  ------------------
  |  |  795|   370k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   370k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   370k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 370k, False: 191]
  |  |  ------------------
  ------------------
  404|   370k|    cTValue *tv = lj_tab_getstr(t, strV(key));
  ------------------
  |  |  859|   370k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   370k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   370k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   370k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 370k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   370k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   370k|    if (tv)
  ------------------
  |  Branch (405:9): [True: 645, False: 369k]
  ------------------
  406|    645|      return tv;
  407|   370k|  } else if (tvisint(key)) {
  ------------------
  |  |  803|    191|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|    382|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  408|      0|    cTValue *tv = lj_tab_getint(t, intV(key));
  ------------------
  |  |   82|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (79:35): [Folded - Ignored]
  |  |  |  |  |  Branch (79:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:47): [Folded - Ignored]
  |  |  |  |  |  Branch (80:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (82:71): [Folded - Ignored]
  |  |  |  Branch (82:71): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  409|      0|    if (tv)
  ------------------
  |  Branch (409:9): [True: 0, False: 0]
  ------------------
  410|      0|      return tv;
  411|    191|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|    191|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    191|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    191|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    191|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 191, False: 0]
  |  |  ------------------
  ------------------
  412|    191|    lua_Number nk = numV(key);
  ------------------
  |  |  866|    191|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|    191|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    191|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    191|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 191, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    191|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  413|    191|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|    191|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  414|    191|    if (nk == (lua_Number)k) {
  ------------------
  |  Branch (414:9): [True: 191, False: 0]
  ------------------
  415|    191|      cTValue *tv = lj_tab_getint(t, k);
  ------------------
  |  |   82|    191|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|    191|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 191]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  416|    191|      if (tv)
  ------------------
  |  Branch (416:11): [True: 0, False: 191]
  ------------------
  417|      0|	return tv;
  418|    191|    } else {
  419|      0|      goto genlookup;  /* Else use the generic lookup. */
  420|      0|    }
  421|    191|  } else if (!tvisnil(key)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (421:14): [True: 0, False: 0]
  ------------------
  422|      0|    Node *n;
  423|      0|  genlookup:
  424|      0|    n = hashkey(t, key);
  425|      0|    do {
  426|      0|      if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (426:11): [True: 0, False: 0]
  ------------------
  427|      0|	return &n->val;
  428|      0|    } while ((n = nextnode(n)));
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (428:14): [True: 0, False: 0]
  ------------------
  429|      0|  }
  430|   370k|  return niltv(L);
  ------------------
  |  |  667|   370k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|   370k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   370k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   370k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 370k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   370k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  431|   370k|}
lj_tab_newkey:
  437|   259k|{
  438|   259k|  Node *n = hashkey(t, key);
  439|   259k|  if (!tvisnil(&n->val) || t->hmask == 0) {
  ------------------
  |  |  782|   518k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (439:7): [True: 555, False: 258k]
  |  Branch (439:28): [True: 398, False: 258k]
  ------------------
  440|    953|    Node *nodebase = noderef(t->node);
  ------------------
  |  |  515|    953|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    953|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  441|    953|    Node *collide, *freenode = getfreetop(t, nodebase);
  ------------------
  |  |  518|    953|#define getfreetop(t, n)	(noderef((t)->freetop))
  |  |  ------------------
  |  |  |  |  515|    953|#define noderef(r)	(mref((r), Node))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    953|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  442|    953|    lj_assertL(freenode >= nodebase && freenode <= nodebase+t->hmask+1,
  ------------------
  |  |  365|    953|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.90k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 953, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 953, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    953|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  443|    953|	       "bad freenode");
  444|  1.22k|    do {
  445|  1.22k|      if (freenode == nodebase) {  /* No free node found? */
  ------------------
  |  Branch (445:11): [True: 398, False: 822]
  ------------------
  446|    398|	rehashtab(L, t, key);  /* Rehash table. */
  447|    398|	return lj_tab_set(L, t, key);  /* Retry key insertion. */
  448|    398|      }
  449|  1.22k|    } while (!tvisnil(&(--freenode)->key));
  ------------------
  |  |  782|    822|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (449:14): [True: 267, False: 555]
  ------------------
  450|    555|    setfreetop(t, nodebase, freenode);
  ------------------
  |  |  519|    555|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|    555|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  451|    555|    lj_assertL(freenode != &G(L)->nilnode, "store to fallback hash");
  ------------------
  |  |  365|    555|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    555|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 555, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    555|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  452|    555|    collide = hashkey(t, &n->key);
  453|    555|    if (collide != n) {  /* Colliding node not the main node? */
  ------------------
  |  Branch (453:9): [True: 0, False: 555]
  ------------------
  454|      0|      while (noderef(collide->next) != n)  /* Find predecessor. */
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (454:14): [True: 0, False: 0]
  ------------------
  455|      0|	collide = nextnode(collide);
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  456|      0|      setmref(collide->next, freenode);  /* Relink chain. */
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  457|       |      /* Copy colliding node into free node and free main node. */
  458|      0|      freenode->val = n->val;
  459|      0|      freenode->key = n->key;
  460|      0|      freenode->next = n->next;
  461|      0|      setmref(n->next, NULL);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  462|      0|      setnilV(&n->val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  463|       |      /* Rechain pseudo-resurrected string keys with colliding hashes. */
  464|      0|      while (nextnode(freenode)) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (516:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  465|      0|	Node *nn = nextnode(freenode);
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  466|      0|	if (!tvisnil(&nn->val) && hashkey(t, &nn->key) == n) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (466:6): [True: 0, False: 0]
  |  Branch (466:28): [True: 0, False: 0]
  ------------------
  467|      0|	  freenode->next = nn->next;
  468|      0|	  nn->next = n->next;
  469|      0|	  setmref(n->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  470|       |	  /*
  471|       |	  ** Rechaining a resurrected string key creates a new dilemma:
  472|       |	  ** Another string key may have originally been resurrected via
  473|       |	  ** _any_ of the previous nodes as a chain anchor. Including
  474|       |	  ** a node that had to be moved, which makes them unreachable.
  475|       |	  ** It's not feasible to check for all previous nodes, so rechain
  476|       |	  ** any string key that's currently in a non-main positions.
  477|       |	  */
  478|      0|	  while ((nn = nextnode(freenode))) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (478:11): [True: 0, False: 0]
  ------------------
  479|      0|	    if (!tvisnil(&nn->val)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (479:10): [True: 0, False: 0]
  ------------------
  480|      0|	      Node *mn = hashkey(t, &nn->key);
  481|      0|	      if (mn != freenode && mn != nn) {
  ------------------
  |  Branch (481:12): [True: 0, False: 0]
  |  Branch (481:30): [True: 0, False: 0]
  ------------------
  482|      0|		freenode->next = nn->next;
  483|      0|		nn->next = mn->next;
  484|      0|		setmref(mn->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  485|      0|	      } else {
  486|      0|		freenode = nn;
  487|      0|	      }
  488|      0|	    } else {
  489|      0|	      freenode = nn;
  490|      0|	    }
  491|      0|	  }
  492|      0|	  break;
  493|      0|	} else {
  494|      0|	  freenode = nn;
  495|      0|	}
  496|      0|      }
  497|    555|    } else {  /* Otherwise use free node. */
  498|    555|      setmrefr(freenode->next, n->next);  /* Insert into chain. */
  ------------------
  |  |   41|    555|#define setmrefr(r, v)	((r).ptr64 = (v).ptr64)
  ------------------
  499|    555|      setmref(n->next, freenode);
  ------------------
  |  |   39|    555|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  500|    555|      n = freenode;
  501|    555|    }
  502|    555|  }
  503|   258k|  n->key.u64 = key->u64;
  504|   258k|  if (LJ_UNLIKELY(tvismzero(&n->key)))
  ------------------
  |  |  146|   258k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 258k]
  |  |  ------------------
  ------------------
  505|      0|    n->key.u64 = 0;
  506|   258k|  lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|   258k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|   258k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 59, False: 258k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|     59|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     59|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  507|   258k|  lj_assertL(tvisnil(&n->val), "new hash slot is not empty");
  ------------------
  |  |  365|   258k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   258k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 258k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   258k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  508|   258k|  return &n->val;
  509|   258k|}
lj_tab_setinth:
  512|  37.6k|{
  513|  37.6k|  TValue k;
  514|  37.6k|  Node *n;
  515|  37.6k|  k.n = (lua_Number)key;
  516|  37.6k|  n = hashnum(t, &k);
  ------------------
  |  |   45|  37.6k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  37.6k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  517|  37.6k|  do {
  518|  37.6k|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  804|  75.3k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  37.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  37.6k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  37.6k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 37.6k]
  |  |  ------------------
  ------------------
  |  Branch (518:29): [True: 0, False: 0]
  ------------------
  519|      0|      return &n->val;
  520|  37.6k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  37.6k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  37.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (520:12): [True: 0, False: 37.6k]
  ------------------
  521|  37.6k|  return lj_tab_newkey(L, t, &k);
  522|  37.6k|}
lj_tab_setstr:
  525|  37.7k|{
  526|  37.7k|  TValue k;
  527|  37.7k|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|  37.7k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  528|  37.7k|  do {
  529|  37.7k|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  795|  75.4k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  37.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  37.7k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 564, False: 37.1k]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  859|    564|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    564|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    564|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    564|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 564, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    564|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (529:29): [True: 564, False: 0]
  ------------------
  530|    564|      return &n->val;
  531|  37.7k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  37.1k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  37.1k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (531:12): [True: 0, False: 37.1k]
  ------------------
  532|  37.1k|  setstrV(L, &k, key);
  533|  37.1k|  return lj_tab_newkey(L, t, &k);
  534|  37.7k|}
lj_tab_set:
  537|  1.24k|{
  538|  1.24k|  Node *n;
  539|  1.24k|  t->nomm = 0;  /* Invalidate negative metamethod cache. */
  540|  1.24k|  if (tvisstr(key)) {
  ------------------
  |  |  795|  1.24k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  1.24k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  1.24k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 648, False: 595]
  |  |  ------------------
  ------------------
  541|    648|    return lj_tab_setstr(L, t, strV(key));
  ------------------
  |  |  859|    648|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    648|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    648|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    648|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 648, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    648|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  542|    648|  } else if (tvisint(key)) {
  ------------------
  |  |  803|    595|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  1.19k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  543|      0|    return lj_tab_setint(L, t, intV(key));
  ------------------
  |  |   84|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (79:35): [Folded - Ignored]
  |  |  |  |  |  Branch (79:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:47): [Folded - Ignored]
  |  |  |  |  |  Branch (80:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (84:74): [Folded - Ignored]
  |  |  |  Branch (84:74): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  544|    595|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|    595|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    595|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    595|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    595|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 595, False: 0]
  |  |  ------------------
  ------------------
  545|    595|    lua_Number nk = numV(key);
  ------------------
  |  |  866|    595|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|    595|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    595|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    595|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 595, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    595|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  546|    595|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|    595|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  547|    595|    if (nk == (lua_Number)k)
  ------------------
  |  Branch (547:9): [True: 595, False: 0]
  ------------------
  548|    595|      return lj_tab_setint(L, t, k);
  ------------------
  |  |   84|    595|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   79|    595|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 22, False: 573]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   80|     22|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|     22|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|     22|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  549|      0|    if (tvisnan(key))
  ------------------
  |  |  812|      0|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  550|      0|      lj_err_msg(L, LJ_ERR_NANIDX);
  551|       |    /* Else use the generic lookup. */
  552|      0|  } else if (tvisnil(key)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  553|      0|    lj_err_msg(L, LJ_ERR_NILIDX);
  554|      0|  }
  555|      0|  n = hashkey(t, key);
  556|      0|  do {
  557|      0|    if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (557:9): [True: 0, False: 0]
  ------------------
  558|      0|      return &n->val;
  559|      0|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (559:12): [True: 0, False: 0]
  ------------------
  560|      0|  return lj_tab_newkey(L, t, key);
  561|      0|}
lj_tab_keyindex:
  574|    453|{
  575|    453|  TValue tmp;
  576|    453|  if (tvisint(key)) {
  ------------------
  |  |  803|    453|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|    906|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  577|      0|    int32_t k = intV(key);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  578|      0|    if ((uint32_t)k < t->asize)
  ------------------
  |  Branch (578:9): [True: 0, False: 0]
  ------------------
  579|      0|      return (uint32_t)k + 1;
  580|      0|    setnumV(&tmp, (lua_Number)k);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  581|      0|    key = &tmp;
  582|    453|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|    453|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    453|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    453|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    453|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 453]
  |  |  ------------------
  ------------------
  583|      0|    lua_Number nk = numV(key);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  584|      0|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  585|      0|    if ((uint32_t)k < t->asize && nk == (lua_Number)k)
  ------------------
  |  Branch (585:9): [True: 0, False: 0]
  |  Branch (585:35): [True: 0, False: 0]
  ------------------
  586|      0|      return (uint32_t)k + 1;
  587|      0|  }
  588|    453|  if (!tvisnil(key)) {
  ------------------
  |  |  782|    453|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (588:7): [True: 0, False: 453]
  ------------------
  589|      0|    Node *n = hashkey(t, key);
  590|      0|    do {
  591|      0|      if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (591:11): [True: 0, False: 0]
  ------------------
  592|      0|	return t->asize + (uint32_t)((n+1) - noderef(t->node));
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  593|      0|    } while ((n = nextnode(n)));
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (593:14): [True: 0, False: 0]
  ------------------
  594|      0|    if (key->u32.hi == LJ_KEYINDEX)  /* Despecialized ITERN while running. */
  ------------------
  |  |  288|      0|#define LJ_KEYINDEX		0xfffe7fffu
  ------------------
  |  Branch (594:9): [True: 0, False: 0]
  ------------------
  595|      0|      return key->u32.lo;
  596|      0|    return ~0u;  /* Invalid key to next. */
  597|      0|  }
  598|    453|  return 0;  /* A nil key starts the traversal. */
  599|    453|}
lj_tab_next:
  603|    453|{
  604|    453|  uint32_t idx = lj_tab_keyindex(t, key);  /* Find successor index of key. */
  605|       |  /* First traverse the array part. */
  606|    453|  for (; idx < t->asize; idx++) {
  ------------------
  |  Branch (606:10): [True: 0, False: 453]
  ------------------
  607|      0|    cTValue *a = arrayslot(t, idx);
  ------------------
  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  608|      0|    if (LJ_LIKELY(!tvisnil(a))) {
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  609|      0|      setintV(o, idx);
  610|      0|      o[1] = *a;
  611|      0|      return 1;
  612|      0|    }
  613|      0|  }
  614|    453|  idx -= t->asize;
  615|       |  /* Then traverse the hash part. */
  616|    659|  for (; idx <= t->hmask; idx++) {
  ------------------
  |  Branch (616:10): [True: 651, False: 8]
  ------------------
  617|    651|    Node *n = &noderef(t->node)[idx];
  ------------------
  |  |  515|    651|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    651|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  618|    651|    if (!tvisnil(&n->val)) {
  ------------------
  |  |  782|    651|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (618:9): [True: 445, False: 206]
  ------------------
  619|    445|      o[0] = n->key;
  620|    445|      o[1] = n->val;
  621|    445|      return 1;
  622|    445|    }
  623|    651|  }
  624|      8|  return (int32_t)idx < 0 ? -1 : 0;  /* Invalid key or end of traversal. */
  ------------------
  |  Branch (624:10): [True: 0, False: 8]
  ------------------
  625|    453|}
lj_tab_len:
  656|    132|{
  657|    132|  size_t hi = (size_t)t->asize;
  658|    132|  if (hi) hi--;
  ------------------
  |  Branch (658:7): [True: 0, False: 132]
  ------------------
  659|       |  /* In a growing array the last array element is very likely nil. */
  660|    132|  if (hi > 0 && LJ_LIKELY(tvisnil(arrayslot(t, hi)))) {
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (660:7): [True: 0, False: 132]
  ------------------
  661|       |    /* Binary search to find a non-nil to nil transition in the array. */
  662|      0|    size_t lo = 0;
  663|      0|    while (hi - lo > 1) {
  ------------------
  |  Branch (663:12): [True: 0, False: 0]
  ------------------
  664|      0|      size_t mid = (lo+hi) >> 1;
  665|      0|      if (tvisnil(arrayslot(t, mid))) hi = mid; else lo = mid;
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  666|      0|    }
  667|      0|    return (MSize)lo;
  668|      0|  }
  669|       |  /* Without a hash part, there's an implicit nil after the last element. */
  670|    132|  return t->hmask ? tab_len_slow(t, hi) : (MSize)hi;
  ------------------
  |  Branch (670:10): [True: 123, False: 9]
  ------------------
  671|    132|}
lj_tab.c:newtab:
   82|   232k|{
   83|   232k|  GCtab *t;
   84|       |  /* First try to colocate the array part. */
   85|   232k|  if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|   232k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
                if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|    272|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (85:7): [Folded - Ignored]
  |  Branch (85:31): [True: 272, False: 231k]
  |  Branch (85:44): [True: 45, False: 227]
  ------------------
   86|     45|    Node *nilnode;
   87|     45|    lj_assertL((sizeof(GCtab) & 7) == 0, "bad GCtab size");
  ------------------
  |  |  365|     45|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     45|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|     45|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   88|     45|    t = (GCtab *)lj_mem_newgco(L, sizetabcolo(asize));
  ------------------
  |  |  513|     45|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
   89|     45|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|     45|#define LJ_TTAB			(~11u)
  ------------------
   90|     45|    t->nomm = (uint8_t)~0;
   91|     45|    t->colo = (int8_t)asize;
   92|     45|    setmref(t->array, (TValue *)((char *)t + sizeof(GCtab)));
  ------------------
  |  |   39|     45|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   93|     45|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|     45|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   94|     45|    t->asize = asize;
   95|     45|    t->hmask = 0;
   96|     45|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  705|     45|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     45|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   97|     45|    setmref(t->node, nilnode);
  ------------------
  |  |   39|     45|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   98|     45|#if LJ_GC64
   99|     45|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|     45|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  100|     45|#endif
  101|   232k|  } else {  /* Otherwise separately allocate the array part. */
  102|   232k|    Node *nilnode;
  103|   232k|    t = lj_mem_newobj(L, GCtab);
  ------------------
  |  |  132|   232k|#define lj_mem_newobj(L, t)	((t *)lj_mem_newgco(L, sizeof(t)))
  ------------------
  104|   232k|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|   232k|#define LJ_TTAB			(~11u)
  ------------------
  105|   232k|    t->nomm = (uint8_t)~0;
  106|   232k|    t->colo = 0;
  107|   232k|    setmref(t->array, NULL);
  ------------------
  |  |   39|   232k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|   232k|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|   232k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  109|   232k|    t->asize = 0;  /* In case the array allocation fails. */
  110|   232k|    t->hmask = 0;
  111|   232k|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  705|   232k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   232k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  112|   232k|    setmref(t->node, nilnode);
  ------------------
  |  |   39|   232k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  113|   232k|#if LJ_GC64
  114|   232k|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|   232k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  115|   232k|#endif
  116|   232k|    if (asize > 0) {
  ------------------
  |  Branch (116:9): [True: 227, False: 231k]
  ------------------
  117|    227|      if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|    227|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|    227|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (117:11): [True: 0, False: 227]
  ------------------
  118|      0|	lj_err_msg(L, LJ_ERR_TABOV);
  119|    227|      setmref(t->array, lj_mem_newvec(L, asize, TValue));
  ------------------
  |  |   39|    227|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  120|    227|      t->asize = asize;
  121|    227|    }
  122|   232k|  }
  123|   232k|  if (hbits)
  ------------------
  |  Branch (123:7): [True: 220k, False: 11.8k]
  ------------------
  124|   220k|    newhpart(L, t, hbits);
  125|   232k|  return t;
  126|   232k|}
lj_tab.c:clearapart:
   73|   232k|{
   74|   232k|  uint32_t i, asize = t->asize;
   75|   232k|  TValue *array = tvref(t->array);
  ------------------
  |  |  217|   232k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   232k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   76|   270k|  for (i = 0; i < asize; i++)
  ------------------
  |  Branch (76:15): [True: 38.1k, False: 232k]
  ------------------
   77|  38.1k|    setnilV(&array[i]);
  ------------------
  |  |  872|  38.1k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   78|   232k|}
lj_tab.c:clearhpart:
   59|   220k|{
   60|   220k|  uint32_t i, hmask = t->hmask;
   61|   220k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|   220k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   220k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   62|   220k|  lj_assertX(t->hmask != 0, "empty hash part");
  ------------------
  |  |  366|   220k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   220k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 220k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   220k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|  3.60M|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (63:15): [True: 3.37M, False: 220k]
  ------------------
   64|  3.37M|    Node *n = &node[i];
   65|  3.37M|    setmref(n->next, NULL);
  ------------------
  |  |   39|  3.37M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   66|  3.37M|    setnilV(&n->key);
  ------------------
  |  |  872|  3.37M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   67|  3.37M|    setnilV(&n->val);
  ------------------
  |  |  872|  3.37M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   68|  3.37M|  }
   69|   220k|}
lj_tab.c:newhpart:
   38|   220k|{
   39|   220k|  uint32_t hsize;
   40|   220k|  Node *node;
   41|   220k|  lj_assertL(hbits != 0, "zero hash size");
  ------------------
  |  |  365|   220k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   220k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 220k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   220k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   42|   220k|  if (hbits > LJ_MAX_HBITS)
  ------------------
  |  |   59|   220k|#define LJ_MAX_HBITS	26		/* Max. hash bits. */
  ------------------
  |  Branch (42:7): [True: 0, False: 220k]
  ------------------
   43|      0|    lj_err_msg(L, LJ_ERR_TABOV);
   44|   220k|  hsize = 1u << hbits;
   45|   220k|  node = lj_mem_newvec(L, hsize, Node);
  ------------------
  |  |  125|   220k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|   220k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   46|   220k|  setmref(t->node, node);
  ------------------
  |  |   39|   220k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   47|   220k|  setfreetop(t, node, &node[hsize]);
  ------------------
  |  |  519|   220k|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|   220k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   48|   220k|  t->hmask = hsize-1;
   49|   220k|}
lj_tab.c:hashkey:
   21|   259k|{
   22|   259k|  lj_assertX(!tvisint(key), "attempt to hash integer");
  ------------------
  |  |  366|   259k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   259k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   259k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   23|   259k|  if (tvisstr(key))
  ------------------
  |  |  795|   259k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   259k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   259k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 222k, False: 37.6k]
  |  |  ------------------
  ------------------
   24|   259k|    return hashstr(t, strV(key));
  ------------------
  |  |   42|   444k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  |  |  ------------------
  |  |  |  Branch (42:37): [True: 222k, False: 0]
  |  |  ------------------
  ------------------
   25|  37.6k|  else if (tvisnum(key))
  ------------------
  |  |  804|  37.6k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  37.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  37.6k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  37.6k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 37.6k, False: 0]
  |  |  ------------------
  ------------------
   26|  37.6k|    return hashnum(t, key);
  ------------------
  |  |   45|  37.6k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  37.6k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   27|      0|  else if (tvisbool(key))
  ------------------
  |  |  789|      0|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|      0|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|      0|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|      0|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   28|      0|    return hashmask(t, boolV(key));
  ------------------
  |  |  837|      0|#define boolV(o)	check_exp(tvisbool(o), (LJ_TFALSE - itype(o)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   29|      0|  else
   30|      0|    return hashgcref(t, key->gcr);
  ------------------
  |  |   48|      0|  hashlohi((t), (uint32_t)gcrefu(r), (uint32_t)(gcrefu(r) >> 32))
  |  |  ------------------
  |  |  |  |   44|      0|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   31|       |  /* Only hash 32 bits of lightuserdata on a 64 bit CPU. Good enough? */
   32|   259k|}
lj_tab.c:rehashtab:
  358|    398|{
  359|    398|  uint32_t bins[LJ_MAX_ABITS];
  360|    398|  uint32_t total, asize, na, i;
  361|  11.5k|  for (i = 0; i < LJ_MAX_ABITS; i++) bins[i] = 0;
  ------------------
  |  |   60|  11.5k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  ------------------
  |  Branch (361:15): [True: 11.1k, False: 398]
  ------------------
  362|    398|  asize = countarray(t, bins);
  363|    398|  total = 1 + asize;
  364|    398|  total += counthash(t, bins, &asize);
  365|    398|  asize += countint(ek, bins);
  366|    398|  na = bestasize(bins, &asize);
  367|    398|  total -= na;
  368|    398|  lj_tab_resize(L, t, asize, hsize2hbits(total));
  ------------------
  |  |   53|    398|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 376, False: 22]
  |  |  |  Branch (53:32): [True: 376, False: 0]
  |  |  ------------------
  ------------------
  369|    398|}
lj_tab.c:countarray:
  309|    398|{
  310|    398|  uint32_t na, b, i;
  311|    398|  if (t->asize == 0) return 0;
  ------------------
  |  Branch (311:7): [True: 398, False: 0]
  ------------------
  312|      0|  for (na = i = b = 0; b < LJ_MAX_ABITS; b++) {
  ------------------
  |  |   60|      0|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  ------------------
  |  Branch (312:24): [True: 0, False: 0]
  ------------------
  313|      0|    uint32_t n, top = 2u << b;
  314|      0|    TValue *array;
  315|      0|    if (top >= t->asize) {
  ------------------
  |  Branch (315:9): [True: 0, False: 0]
  ------------------
  316|      0|      top = t->asize-1;
  317|      0|      if (i > top)
  ------------------
  |  Branch (317:11): [True: 0, False: 0]
  ------------------
  318|      0|	break;
  319|      0|    }
  320|      0|    array = tvref(t->array);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  321|      0|    for (n = 0; i <= top; i++)
  ------------------
  |  Branch (321:17): [True: 0, False: 0]
  ------------------
  322|      0|      if (!tvisnil(&array[i]))
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (322:11): [True: 0, False: 0]
  ------------------
  323|      0|	n++;
  324|      0|    bins[b] += n;
  325|      0|    na += n;
  326|      0|  }
  327|      0|  return na;
  328|    398|}
lj_tab.c:counthash:
  331|    398|{
  332|    398|  uint32_t total, na, i, hmask = t->hmask;
  333|    398|  Node *node = noderef(t->node);
  ------------------
  |  |  515|    398|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    398|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  334|    796|  for (total = na = 0, i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (334:31): [True: 398, False: 398]
  ------------------
  335|    398|    Node *n = &node[i];
  336|    398|    if (!tvisnil(&n->val)) {
  ------------------
  |  |  782|    398|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (336:9): [True: 0, False: 398]
  ------------------
  337|      0|      na += countint(&n->key, bins);
  338|      0|      total++;
  339|      0|    }
  340|    398|  }
  341|    398|  *narray += na;
  342|    398|  return total;
  343|    398|}
lj_tab.c:countint:
  295|    398|{
  296|    398|  lj_assertX(!tvisint(key), "bad integer key");
  ------------------
  |  |  366|    398|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    398|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    398|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  297|    398|  if (tvisnum(key)) {
  ------------------
  |  |  804|    398|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    398|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    398|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    398|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 126, False: 272]
  |  |  ------------------
  ------------------
  298|    126|    lua_Number nk = numV(key);
  ------------------
  |  |  866|    126|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|    126|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    126|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    126|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 126, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    126|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  299|    126|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|    126|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  300|    126|    if ((uint32_t)k < LJ_MAX_ASIZE && nk == (lua_Number)k) {
  ------------------
  |  |   61|    252|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|    126|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (300:9): [True: 126, False: 0]
  |  Branch (300:39): [True: 126, False: 0]
  ------------------
  301|    126|      bins[(k > 2 ? lj_fls((uint32_t)(k-1)) : 0)]++;
  ------------------
  |  |  149|    104|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (301:13): [True: 104, False: 22]
  ------------------
  302|    126|      return 1;
  303|    126|    }
  304|    126|  }
  305|    272|  return 0;
  306|    398|}
lj_tab.c:bestasize:
  346|    398|{
  347|    398|  uint32_t b, sum, na = 0, sz = 0, nn = *narray;
  348|    524|  for (b = 0, sum = 0; 2*nn > (1u<<b) && sum != nn; b++)
  ------------------
  |  Branch (348:24): [True: 126, False: 398]
  |  Branch (348:42): [True: 126, False: 0]
  ------------------
  349|    126|    if (bins[b] > 0 && 2*(sum += bins[b]) > (1u<<b)) {
  ------------------
  |  Branch (349:9): [True: 22, False: 104]
  |  Branch (349:24): [True: 22, False: 0]
  ------------------
  350|     22|      sz = (2u<<b)+1;
  351|     22|      na = sum;
  352|     22|    }
  353|    398|  *narray = sz;
  354|    398|  return na;
  355|    398|}
lj_tab.c:tab_len_slow:
  631|    123|{
  632|    123|  cTValue *tv;
  633|    123|  size_t lo = hi;
  634|    123|  hi++;
  635|       |  /* Widening search for an upper bound. */
  636|    123|  while ((tv = lj_tab_getint(t, (int32_t)hi)) && !tvisnil(tv)) {
  ------------------
  |  |   82|    123|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|    123|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 123]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                while ((tv = lj_tab_getint(t, (int32_t)hi)) && !tvisnil(tv)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (636:10): [True: 0, False: 123]
  |  Branch (636:50): [True: 0, False: 0]
  ------------------
  637|      0|    lo = hi;
  638|      0|    hi += hi;
  639|      0|    if (hi > (size_t)(0x7fffffff - 2)) {  /* Punt and do a linear search. */
  ------------------
  |  Branch (639:9): [True: 0, False: 0]
  ------------------
  640|      0|      lo = 1;
  641|      0|      while ((tv = lj_tab_getint(t, (int32_t)lo)) && !tvisnil(tv)) lo++;
  ------------------
  |  |   82|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    while ((tv = lj_tab_getint(t, (int32_t)lo)) && !tvisnil(tv)) lo++;
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (641:14): [True: 0, False: 0]
  |  Branch (641:54): [True: 0, False: 0]
  ------------------
  642|      0|      return (MSize)(lo - 1);
  643|      0|    }
  644|      0|  }
  645|       |  /* Binary search to find a non-nil to nil transition. */
  646|    123|  while (hi - lo > 1) {
  ------------------
  |  Branch (646:10): [True: 0, False: 123]
  ------------------
  647|      0|    size_t mid = (lo+hi) >> 1;
  648|      0|    cTValue *tvb = lj_tab_getint(t, (int32_t)mid);
  ------------------
  |  |   82|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  649|      0|    if (tvb && !tvisnil(tvb)) lo = mid; else hi = mid;
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (649:9): [True: 0, False: 0]
  |  Branch (649:16): [True: 0, False: 0]
  ------------------
  650|      0|  }
  651|    123|  return (MSize)lo;
  652|    123|}

lj_tab.c:hashmask:
   36|   724k|{
   37|   724k|  Node *n = noderef(t->node);
  ------------------
  |  |  515|   724k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   724k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   38|   724k|  return &n[hash & t->hmask];
   39|   724k|}
lj_tab.c:hashrot:
   19|  75.8k|{
   20|  75.8k|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|  75.8k|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|  75.8k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|  75.8k|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|  75.8k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|  75.8k|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|  75.8k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|  75.8k|  return hi;
   32|  75.8k|}

lj_trace_flushall:
  277|  34.3k|{
  278|  34.3k|  jit_State *J = L2J(L);
  ------------------
  |  |  117|  34.3k|#define L2J(L)		(&L2GG(L)->J)
  |  |  ------------------
  |  |  |  |  114|  34.3k|#define L2GG(L)		(G2GG(G(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  34.3k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  34.3k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  279|  34.3k|  ptrdiff_t i;
  280|  34.3k|  if ((J2G(J)->hookmask & HOOK_GC))
  ------------------
  |  |  115|  34.3k|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|  34.3k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  34.3k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if ((J2G(J)->hookmask & HOOK_GC))
  ------------------
  |  |  676|  34.3k|#define HOOK_GC			0x40
  ------------------
  |  Branch (280:7): [True: 0, False: 34.3k]
  ------------------
  281|      0|    return 1;
  282|  34.3k|  for (i = (ptrdiff_t)J->sizetrace-1; i > 0; i--) {
  ------------------
  |  Branch (282:39): [True: 0, False: 34.3k]
  ------------------
  283|      0|    GCtrace *T = traceref(J, i);
  ------------------
  |  |  298|      0|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  284|      0|    if (T) {
  ------------------
  |  Branch (284:9): [True: 0, False: 0]
  ------------------
  285|      0|      if (T->root == 0)
  ------------------
  |  Branch (285:11): [True: 0, False: 0]
  ------------------
  286|      0|	trace_flushroot(J, T);
  287|      0|      lj_gdbjit_deltrace(J, T);
  ------------------
  |  |   19|      0|#define lj_gdbjit_deltrace(J, T)	UNUSED(T)
  |  |  ------------------
  |  |  |  |   91|      0|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  288|      0|      T->traceno = T->link = 0;  /* Blacklist the link for cont_stitch. */
  289|      0|      setgcrefnull(J->trace[i]);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  290|      0|    }
  291|      0|  }
  292|  34.3k|  J->cur.traceno = 0;
  293|  34.3k|  J->freetrace = 0;
  294|       |  /* Clear penalty cache. */
  295|  34.3k|  memset(J->penalty, 0, sizeof(J->penalty));
  296|       |  /* Free the whole machine code and invalidate all exit stub groups. */
  297|  34.3k|  lj_mcode_free(J);
  298|  34.3k|  memset(J->exitstubgroup, 0, sizeof(J->exitstubgroup));
  299|  34.3k|  lj_vmevent_send(L, TRACE,
  ------------------
  |  |   39|  34.3k|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|  34.3k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  34.3k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|  34.3k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 34.3k]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
  300|  34.3k|    setstrV(L, L->top++, lj_str_newlit(L, "flush"));
  301|  34.3k|  );
  302|  34.3k|  return 0;
  303|  34.3k|}
lj_trace_initstate:
  307|  36.7k|{
  308|  36.7k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  36.7k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  36.7k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  36.7k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  309|  36.7k|  TValue *tv;
  310|       |
  311|       |  /* Initialize aligned SIMD constants. */
  312|  36.7k|  tv = LJ_KSIMD(J, LJ_KSIMD_ABS);
  ------------------
  |  |  403|  36.7k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  313|  36.7k|  tv[0].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  36.7k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  314|  36.7k|  tv[1].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  36.7k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  315|  36.7k|  tv = LJ_KSIMD(J, LJ_KSIMD_NEG);
  ------------------
  |  |  403|  36.7k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  316|  36.7k|  tv[0].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  36.7k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  317|  36.7k|  tv[1].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  36.7k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  318|       |
  319|       |  /* Initialize 32/64 bit constants. */
  320|  36.7k|#if LJ_TARGET_X86ORX64
  321|  36.7k|  J->k64[LJ_K64_TOBIT].u64 = U64x(43380000,00000000);
  ------------------
  |  |   94|  36.7k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  322|       |#if LJ_32
  323|       |  J->k64[LJ_K64_M2P64_31].u64 = U64x(c1e00000,00000000);
  324|       |#endif
  325|  36.7k|  J->k64[LJ_K64_2P64].u64 = U64x(43f00000,00000000);
  ------------------
  |  |   94|  36.7k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  326|  36.7k|  J->k32[LJ_K32_M2P64_31] = LJ_64 ? 0xdf800000 : 0xcf000000;
  ------------------
  |  |  640|  36.7k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  327|  36.7k|#endif
  328|  36.7k|#if LJ_TARGET_X86ORX64 || LJ_TARGET_MIPS64
  329|  36.7k|  J->k64[LJ_K64_M2P64].u64 = U64x(c3f00000,00000000);
  ------------------
  |  |   94|  36.7k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  330|  36.7k|#endif
  331|       |#if LJ_TARGET_PPC
  332|       |  J->k32[LJ_K32_2P52_2P31] = 0x59800004;
  333|       |  J->k32[LJ_K32_2P52] = 0x59800000;
  334|       |#endif
  335|       |#if LJ_TARGET_PPC || LJ_TARGET_MIPS
  336|       |  J->k32[LJ_K32_2P31] = 0x4f000000;
  337|       |#endif
  338|       |#if LJ_TARGET_MIPS
  339|       |  J->k64[LJ_K64_2P31].u64 = U64x(41e00000,00000000);
  340|       |#if LJ_64
  341|       |  J->k64[LJ_K64_2P63].u64 = U64x(43e00000,00000000);
  342|       |  J->k32[LJ_K32_2P63] = 0x5f000000;
  343|       |  J->k32[LJ_K32_M2P64] = 0xdf800000;
  344|       |#endif
  345|       |#endif
  346|  36.7k|}
lj_trace_freestate:
  350|  36.7k|{
  351|  36.7k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  36.7k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  36.7k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  36.7k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  352|  36.7k|#ifdef LUA_USE_ASSERT
  353|  36.7k|  {  /* This assumes all traces have already been freed. */
  354|  36.7k|    ptrdiff_t i;
  355|  36.7k|    for (i = 1; i < (ptrdiff_t)J->sizetrace; i++)
  ------------------
  |  Branch (355:17): [True: 0, False: 36.7k]
  ------------------
  356|  36.7k|      lj_assertG(i == (ptrdiff_t)J->cur.traceno || traceref(J, i) == NULL,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  357|  36.7k|		 "trace still allocated");
  358|  36.7k|  }
  359|  36.7k|#endif
  360|  36.7k|  lj_mcode_free(J);
  361|  36.7k|  lj_mem_freevec(g, J->snapmapbuf, J->sizesnapmap, SnapEntry);
  ------------------
  |  |  130|  36.7k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  362|  36.7k|  lj_mem_freevec(g, J->snapbuf, J->sizesnap, SnapShot);
  ------------------
  |  |  130|  36.7k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  363|  36.7k|  lj_mem_freevec(g, J->irbuf + J->irbotlim, J->irtoplim - J->irbotlim, IRIns);
  ------------------
  |  |  130|  36.7k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  364|  36.7k|  lj_mem_freevec(g, J->trace, J->sizetrace, GCRef);
  ------------------
  |  |  130|  36.7k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  365|  36.7k|}

lj_udata_new:
   15|    347|{
   16|    347|  GCudata *ud = lj_mem_newt(L, sizeof(GCudata) + sz, GCudata);
  ------------------
  |  |  133|    347|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|    347|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   17|    347|  global_State *g = G(L);
  ------------------
  |  |  705|    347|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    347|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   18|    347|  newwhite(g, ud);  /* Not finalized. */
  ------------------
  |  |   40|    347|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|    347|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|    347|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    347|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    347|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    347|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   19|    347|  ud->gct = ~LJ_TUDATA;
  ------------------
  |  |  272|    347|#define LJ_TUDATA		(~12u)
  ------------------
   20|    347|  ud->udtype = UDTYPE_USERDATA;
   21|    347|  ud->len = sz;
   22|       |  /* NOBARRIER: The GCudata is new (marked white). */
   23|    347|  setgcrefnull(ud->metatable);
  ------------------
  |  |   76|    347|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   24|    347|  setgcref(ud->env, obj2gco(env));
  ------------------
  |  |   72|    347|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   25|       |  /* Chain to userdata list (after main thread). */
   26|    347|  setgcrefr(ud->nextgc, mainthread(g)->nextgc);
  ------------------
  |  |   77|    347|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   27|    347|  setgcref(mainthread(g)->nextgc, obj2gco(ud));
  ------------------
  |  |   72|    347|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   28|    347|  return ud;
   29|    347|}
lj_udata_free:
   32|    347|{
   33|    347|  lj_mem_free(g, ud, sizeudata(ud));
  ------------------
  |  |  343|    347|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  ------------------
   34|    347|}
lj_lightud_intern:
   38|    308|{
   39|    308|  global_State *g = G(L);
  ------------------
  |  |  705|    308|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    308|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   40|    308|  uint64_t u = (uint64_t)p;
   41|    308|  uint32_t up = lightudup(u);
  ------------------
  |  |  844|    308|  ((uint32_t)(((p) >> LJ_LIGHTUD_BITS_LO) << (LJ_LIGHTUD_BITS_LO-32)))
  |  |  ------------------
  |  |  |  |  297|    308|#define LJ_LIGHTUD_BITS_LO	(47 - LJ_LIGHTUD_BITS_SEG)
  |  |  |  |  ------------------
  |  |  |  |  |  |  296|    308|#define LJ_LIGHTUD_BITS_SEG	8
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((uint32_t)(((p) >> LJ_LIGHTUD_BITS_LO) << (LJ_LIGHTUD_BITS_LO-32)))
  |  |  ------------------
  |  |  |  |  297|    308|#define LJ_LIGHTUD_BITS_LO	(47 - LJ_LIGHTUD_BITS_SEG)
  |  |  |  |  ------------------
  |  |  |  |  |  |  296|    308|#define LJ_LIGHTUD_BITS_SEG	8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   42|    308|  uint32_t *segmap = mref(g->gc.lightudseg, uint32_t);
  ------------------
  |  |   36|    308|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
   43|    308|  MSize segnum = g->gc.lightudnum;
   44|    308|  if (segmap) {
  ------------------
  |  Branch (44:7): [True: 0, False: 308]
  ------------------
   45|      0|    MSize seg;
   46|      0|    for (seg = 0; seg <= segnum; seg++)
  ------------------
  |  Branch (46:19): [True: 0, False: 0]
  ------------------
   47|      0|      if (segmap[seg] == up)  /* Fast path. */
  ------------------
  |  Branch (47:11): [True: 0, False: 0]
  ------------------
   48|      0|	return (void *)(((uint64_t)seg << LJ_LIGHTUD_BITS_LO) | lightudlo(u));
  ------------------
  |  |  297|      0|#define LJ_LIGHTUD_BITS_LO	(47 - LJ_LIGHTUD_BITS_SEG)
  |  |  ------------------
  |  |  |  |  296|      0|#define LJ_LIGHTUD_BITS_SEG	8
  |  |  ------------------
  ------------------
              	return (void *)(((uint64_t)seg << LJ_LIGHTUD_BITS_LO) | lightudlo(u));
  ------------------
  |  |  842|      0|  ((u) & (((uint64_t)1 << LJ_LIGHTUD_BITS_LO) - 1))
  |  |  ------------------
  |  |  |  |  297|      0|#define LJ_LIGHTUD_BITS_LO	(47 - LJ_LIGHTUD_BITS_SEG)
  |  |  |  |  ------------------
  |  |  |  |  |  |  296|      0|#define LJ_LIGHTUD_BITS_SEG	8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   49|      0|    segnum++;
   50|       |    /* Leave last segment unused to avoid clash with ITERN key. */
   51|      0|    if (segnum >= (1 << LJ_LIGHTUD_BITS_SEG)-1) lj_err_msg(L, LJ_ERR_BADLU);
  ------------------
  |  |  296|      0|#define LJ_LIGHTUD_BITS_SEG	8
  ------------------
  |  Branch (51:9): [True: 0, False: 0]
  ------------------
   52|      0|  }
   53|    308|  if (!((segnum-1) & segnum) && segnum != 1) {
  ------------------
  |  Branch (53:7): [True: 308, False: 0]
  |  Branch (53:33): [True: 308, False: 0]
  ------------------
   54|    308|    lj_mem_reallocvec(L, segmap, segnum, segnum ? 2*segnum : 2u, uint32_t);
  ------------------
  |  |  127|    616|  ((p) = (t *)lj_mem_realloc(L, p, (on)*sizeof(t), (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  Branch (127:62): [True: 0, False: 308]
  |  |  ------------------
  ------------------
   55|    308|    setmref(g->gc.lightudseg, segmap);
  ------------------
  |  |   39|    308|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   56|    308|  }
   57|    308|  g->gc.lightudnum = segnum;
   58|    308|  segmap[segnum] = up;
   59|    308|  return (void *)(((uint64_t)segnum << LJ_LIGHTUD_BITS_LO) | lightudlo(u));
  ------------------
  |  |  297|    308|#define LJ_LIGHTUD_BITS_LO	(47 - LJ_LIGHTUD_BITS_SEG)
  |  |  ------------------
  |  |  |  |  296|    308|#define LJ_LIGHTUD_BITS_SEG	8
  |  |  ------------------
  ------------------
                return (void *)(((uint64_t)segnum << LJ_LIGHTUD_BITS_LO) | lightudlo(u));
  ------------------
  |  |  842|    308|  ((u) & (((uint64_t)1 << LJ_LIGHTUD_BITS_LO) - 1))
  |  |  ------------------
  |  |  |  |  297|    308|#define LJ_LIGHTUD_BITS_LO	(47 - LJ_LIGHTUD_BITS_SEG)
  |  |  |  |  ------------------
  |  |  |  |  |  |  296|    308|#define LJ_LIGHTUD_BITS_SEG	8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|    308|}

LLVMFuzzerTestOneInput:
 1884|  36.7k|{
 1885|  36.7k|	lua_State *L = luaL_newstate();
 1886|  36.7k|	if (L == NULL)
  ------------------
  |  Branch (1886:6): [True: 0, False: 36.7k]
  ------------------
 1887|      0|		return 0;
 1888|       |
 1889|  36.7k|#if LUA_VERSION_NUM == 501
 1890|  36.7k|	luaL_register(L, TYPE_NAME_TORTURE, TORTURE_meta);
  ------------------
  |  |   43|  36.7k|#define TYPE_NAME_TORTURE "torture_test"
  ------------------
 1891|       |#else
 1892|       |	luaL_newmetatable(L, TYPE_NAME_TORTURE);
 1893|       |	luaL_setfuncs(L, TORTURE_meta, 0);
 1894|       |#endif /* LUA_VERSION_NUM */
 1895|       |
 1896|  36.7k|	FuzzedDataProvider fdp(data, size);
 1897|  36.7k|	int start_slots = 2;
 1898|   110k|	for (int i = 1; i <= start_slots; i++)
  ------------------
  |  Branch (1898:18): [True: 73.4k, False: 36.7k]
  ------------------
 1899|  73.4k|		if (fdp.remaining_bytes() != 0)
  ------------------
  |  Branch (1899:7): [True: 72.2k, False: 1.17k]
  ------------------
 1900|  72.2k|			lua_pushrandom(L, &fdp);
 1901|       |
 1902|  36.7k|	if (lua_gettop(L) != 0 &&
  ------------------
  |  Branch (1902:6): [True: 36.7k, False: 0]
  ------------------
 1903|  36.7k|	    fdp.remaining_bytes() != 0) {
  ------------------
  |  Branch (1903:6): [True: 34.4k, False: 2.24k]
  ------------------
 1904|  34.4k|		__lua_gc(L, &fdp);
 1905|  34.4k|		__lua_sethook(L, &fdp);
 1906|  34.4k|		uint8_t idx = fdp.ConsumeIntegralInRange<uint8_t>(0, (int)ARRAY_SIZE(func) - 1);
  ------------------
  |  |   33|  34.4k|#define ARRAY_SIZE(arr)     (sizeof(arr) / sizeof((arr)[0]))
  ------------------
 1907|  34.4k|		func[idx](L, &fdp);
 1908|  34.4k|	}
 1909|       |
 1910|  36.7k|	lua_settop(L, 0);
 1911|  36.7k|	lua_close(L);
 1912|       |
 1913|  36.7k|	return 0;
 1914|  36.7k|}
torture_test.cc:_ZL9cfunctionP9lua_State:
   38|  2.78k|cfunction(lua_State *L) {
   39|  2.78k|	lua_gettop(L);
   40|  2.78k|	return 0;
   41|  2.78k|}
torture_test.cc:_ZL14lua_pushrandomP9lua_StateP18FuzzedDataProvider:
 1719|  72.2k|{
 1720|  72.2k|	uint8_t idx = fdp->ConsumeIntegralInRange(0, (int)ARRAY_SIZE(push_func) - 1);
  ------------------
  |  |   33|  72.2k|#define ARRAY_SIZE(arr)     (sizeof(arr) / sizeof((arr)[0]))
  ------------------
 1721|  72.2k|	push_func[idx](L, fdp);
 1722|       |
 1723|  72.2k|	bool is_set_mt = fdp->ConsumeBool();
 1724|  72.2k|	if (is_set_mt) {
  ------------------
  |  Branch (1724:6): [True: 37.8k, False: 34.3k]
  ------------------
 1725|  37.8k|		luaL_getmetatable(L, TYPE_NAME_TORTURE);
  ------------------
  |  |  118|  37.8k|#define luaL_getmetatable(L,n)	(lua_getfield(L, LUA_REGISTRYINDEX, (n)))
  |  |  ------------------
  |  |  |  |   36|  37.8k|#define LUA_REGISTRYINDEX	(-10000)
  |  |  ------------------
  ------------------
 1726|  37.8k|		lua_setmetatable(L, -2);
 1727|  37.8k|	}
 1728|  72.2k|}
torture_test.cc:_ZL14__lua_newtableP9lua_StateP18FuzzedDataProvider:
  610|  11.3k|{
  611|  11.3k|	int top = lua_gettop(L);
  612|  11.3k|	lua_newtable(L);
  ------------------
  |  |  258|  11.3k|#define lua_newtable(L)		lua_createtable(L, 0, 0)
  ------------------
  613|  11.3k|	assert(lua_gettop(L) == top + 1);
  614|  11.3k|}
torture_test.cc:_ZL15__lua_newthreadP9lua_StateP18FuzzedDataProvider:
  620|  9.67k|{
  621|  9.67k|	int top = lua_gettop(L);
  622|  9.67k|	lua_newthread(L);
  623|  9.67k|	assert(lua_gettop(L) == top + 1);
  624|  9.67k|}
torture_test.cc:_ZL17__lua_pushbooleanP9lua_StateP18FuzzedDataProvider:
   67|  8.53k|{
   68|  8.53k|	uint8_t n = fdp->ConsumeIntegral<uint8_t>();
   69|  8.53k|	int top = lua_gettop(L);
   70|  8.53k|	lua_pushboolean(L, n);
   71|  8.53k|	assert(lua_gettop(L) == top + 1);
   72|  8.53k|}
torture_test.cc:_ZL19__lua_pushcfunctionP9lua_StateP18FuzzedDataProvider:
  588|  10.6k|{
  589|  10.6k|	(void)fdp;
  590|  10.6k|	int top = lua_gettop(L);
  591|  10.6k|	lua_pushcfunction(L, cfunction);
  ------------------
  |  |  262|  10.6k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  592|  10.6k|	assert(lua_gettop(L) == top + 1);
  593|  10.6k|}
torture_test.cc:_ZL17__lua_pushintegerP9lua_StateP18FuzzedDataProvider:
  260|  5.11k|{
  261|  5.11k|	int top = lua_gettop(L);
  262|  5.11k|	uint8_t n = fdp->ConsumeIntegral<uint8_t>();
  263|  5.11k|	lua_pushinteger(L, n);
  264|  5.11k|	assert(lua_gettop(L) == top + 1);
  265|  5.11k|}
torture_test.cc:_ZL17__lua_pushlstringP9lua_StateP18FuzzedDataProvider:
  271|  15.8k|{
  272|  15.8k|	int top = lua_gettop(L);
  273|  15.8k|	auto str = fdp->ConsumeRandomLengthString(max_str_len);
  274|  15.8k|	lua_pushlstring(L, str.c_str(), str.size());
  275|  15.8k|	assert(lua_gettop(L) == top + 1);
  276|  15.8k|}
torture_test.cc:_ZL13__lua_pushnilP9lua_StateP18FuzzedDataProvider:
  282|  4.88k|{
  283|  4.88k|	int top = lua_gettop(L);
  284|  4.88k|	lua_pushnil(L);
  285|  4.88k|	assert(lua_gettop(L) == top + 1);
  286|  4.88k|}
torture_test.cc:_ZL16__lua_pushnumberP9lua_StateP18FuzzedDataProvider:
  292|  4.73k|{
  293|  4.73k|	int top = lua_gettop(L);
  294|  4.73k|	uint8_t n = fdp->ConsumeIntegral<uint8_t>();
  295|  4.73k|	lua_pushnumber(L, n);
  296|  4.73k|	assert(lua_gettop(L) == top + 1);
  297|  4.73k|}
torture_test.cc:_ZL16__lua_pushstringP9lua_StateP18FuzzedDataProvider:
   56|  4.39k|{
   57|  4.39k|	auto str = fdp->ConsumeRandomLengthString(max_str_len);
   58|  4.39k|	int top = lua_gettop(L);
   59|  4.39k|	lua_pushstring(L, str.c_str());
   60|  4.39k|	assert(lua_gettop(L) == top + 1);
   61|  4.39k|}
torture_test.cc:_ZL8__lua_gcP9lua_StateP18FuzzedDataProvider:
  661|  34.9k|{
  662|  34.9k|	int top = lua_gettop(L);
  663|  34.9k|	uint8_t idx = fdp->ConsumeIntegralInRange<uint8_t>(0, ARRAY_SIZE(gc_mode) - 1);
  ------------------
  |  |   33|  34.9k|#define ARRAY_SIZE(arr)     (sizeof(arr) / sizeof((arr)[0]))
  ------------------
  664|       |#if LUA_VERSION_NUM > 503
  665|       |	if (gc_mode[idx] == LUA_GCGEN) {
  666|       |		uint8_t minor_mul = fdp->ConsumeIntegral<uint8_t>();
  667|       |		uint8_t major_mul = fdp->ConsumeIntegral<uint8_t>();
  668|       |		lua_gc(L, LUA_GCGEN, minor_mul, major_mul);
  669|       |	} else if (gc_mode[idx] == LUA_GCINC) {
  670|       |		uint8_t pause = fdp->ConsumeIntegral<uint8_t>();
  671|       |		uint8_t step_mul = fdp->ConsumeIntegral<uint8_t>();
  672|       |		uint8_t step_size = fdp->ConsumeIntegral<uint8_t>();
  673|       |		lua_gc(L, LUA_GCINC, pause, step_mul, step_size);
  674|       |	} else
  675|       |		lua_gc(L, gc_mode[idx], 0);
  676|       |#else
  677|  34.9k|	lua_gc(L, gc_mode[idx], 0);
  678|  34.9k|#endif /* LUA_VERSION_NUM */
  679|  34.9k|	assert(lua_gettop(L) == top);
  680|  34.9k|}
torture_test.cc:_ZL13__lua_sethookP9lua_StateP18FuzzedDataProvider:
  701|  34.4k|{
  702|  34.4k|	int top = lua_gettop(L);
  703|  34.4k|	uint8_t idx = fdp->ConsumeIntegralInRange<uint8_t>(0, ARRAY_SIZE(hook_mode) - 1);
  ------------------
  |  |   33|  34.4k|#define ARRAY_SIZE(arr)     (sizeof(arr) / sizeof((arr)[0]))
  ------------------
  704|  34.4k|	lua_sethook(L, Hook, hook_mode[idx], 1);
  705|  34.4k|	assert(lua_gettop(L) == top);
  706|  34.4k|}
torture_test.cc:_ZL4HookP9lua_StateP9lua_Debug:
  692|    287|{
  693|    287|	(void)L;
  694|    287|	(void)ar;
  695|    287|}
torture_test.cc:_ZL10__lua_callP9lua_StateP18FuzzedDataProvider:
 1645|  2.43k|{
 1646|  2.43k|	int top = lua_gettop(L);
 1647|       |	/* Function to be called. */
 1648|  2.43k|	lua_pushcfunction(L, cfunction);
  ------------------
  |  |  262|  2.43k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
 1649|  2.43k|	int nargs = 0;
 1650|  2.43k|	int nresults = 0;
 1651|  2.43k|	lua_call(L, nargs, nresults);
 1652|  2.43k|	assert(lua_gettop(L) == top + nresults - nargs);
 1653|  2.43k|}
torture_test.cc:_ZL16__lua_checkstackP9lua_StateP18FuzzedDataProvider:
  124|    999|{
  125|    999|	uint8_t n = fdp->ConsumeIntegral<uint8_t>();
  126|    999|	int rc = lua_checkstack(L, n);
  127|    999|	assert(rc != 0);
  128|    999|}
torture_test.cc:_ZL12__lua_concatP9lua_StateP18FuzzedDataProvider:
  134|    274|{
  135|    274|	int top = lua_gettop(L);
  136|    274|	uint8_t n = fdp->ConsumeIntegralInRange<uint8_t>(0, top);
  137|    622|	for (int i = 1; i <= n; i++) {
  ------------------
  |  Branch (137:18): [True: 414, False: 208]
  ------------------
  138|    414|		int t = lua_type(L, -i);
  139|    414|		if (t != LUA_TNUMBER &&
  ------------------
  |  |   78|    828|#define LUA_TNUMBER		3
  ------------------
  |  Branch (139:7): [True: 202, False: 212]
  ------------------
  140|    414|		    t != LUA_TSTRING)
  ------------------
  |  |   79|    202|#define LUA_TSTRING		4
  ------------------
  |  Branch (140:7): [True: 66, False: 136]
  ------------------
  141|     66|			return;
  142|    414|	}
  143|    208|	lua_concat(L, n);
  144|    208|	assert(lua_gettop(L) == top - n + 1);
  145|    208|}
torture_test.cc:_ZL17__lua_createtableP9lua_StateP18FuzzedDataProvider:
 1734|    299|{
 1735|    299|	int nrows = fdp->ConsumeIntegral<uint8_t>();
 1736|       |	/* XXX: Lua associative arrays. */
 1737|    299|	lua_createtable(L, nrows, 0);
 1738|  38.1k|	for (int i = 0; i < nrows; i++) {
  ------------------
  |  Branch (1738:18): [True: 37.8k, False: 299]
  ------------------
 1739|  37.8k|		lua_pushnumber(L, i);
 1740|  37.8k|		lua_rawseti(L, -2, i + 1);
 1741|  37.8k|	}
 1742|    299|	assert(lua_gettop(L) != 0);
 1743|    299|}
torture_test.cc:_ZL15__lua_getallocfP9lua_StateP18FuzzedDataProvider:
 1579|     52|{
 1580|     52|	int top = lua_gettop(L);
 1581|     52|	void *state;
 1582|     52|	lua_getallocf(L, &state);
 1583|     52|	assert(lua_gettop(L) == top);
 1584|     52|}
torture_test.cc:_ZL14__lua_getfieldP9lua_StateP18FuzzedDataProvider:
 1252|    724|{
 1253|    724|	int top = lua_gettop(L);
 1254|    724|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1255|    724|	if (lua_type(L, index) != LUA_TTABLE)
  ------------------
  |  |   80|    724|#define LUA_TTABLE		5
  ------------------
  |  Branch (1255:6): [True: 80, False: 644]
  ------------------
 1256|     80|		return;
 1257|    644|	auto k = fdp->ConsumeRemainingBytesAsString();
 1258|    644|	lua_getfield(L, index, k.c_str());
 1259|    644|	assert(lua_gettop(L) == top + 1);
 1260|    644|}
torture_test.cc:_ZL15__lua_getglobalP9lua_StateP18FuzzedDataProvider:
  446|     88|{
  447|     88|	auto name = fdp->ConsumeRandomLengthString(max_str_len);
  448|     88|	int top = lua_gettop(L);
  449|     88|	lua_getglobal(L, name.c_str());
  ------------------
  |  |  279|     88|#define lua_getglobal(L,s)	lua_getfield(L, LUA_GLOBALSINDEX, (s))
  |  |  ------------------
  |  |  |  |   38|     88|#define LUA_GLOBALSINDEX	(-10002)
  |  |  ------------------
  ------------------
  450|     88|	assert(lua_gettop(L) == top + 1);
  451|     88|}
torture_test.cc:_ZL13__lua_gethookP9lua_StateP18FuzzedDataProvider:
  712|     46|{
  713|     46|	int top = lua_gettop(L);
  714|     46|	lua_gethook(L);
  715|     46|	assert(lua_gettop(L) == top);
  716|     46|}
torture_test.cc:_ZL18__lua_gethookcountP9lua_StateP18FuzzedDataProvider:
  722|     54|{
  723|     54|	int top = lua_gettop(L);
  724|     54|	int hook_count = lua_gethookcount(L);
  725|     54|	assert(hook_count >= 0);
  726|     54|	assert(lua_gettop(L) == top);
  727|     54|}
torture_test.cc:_ZL17__lua_gethookmaskP9lua_StateP18FuzzedDataProvider:
  733|     52|{
  734|     52|	int top = lua_gettop(L);
  735|     52|	int hook_mask = lua_gethookmask(L);
  736|     52|	assert(hook_mask >= 0);
  737|     52|	assert(lua_gettop(L) == top);
  738|     52|}
torture_test.cc:_ZL13__lua_getinfoP9lua_StateP18FuzzedDataProvider:
  550|     45|{
  551|     45|	int top = lua_gettop(L);
  552|     45|	lua_Debug ar;
  553|     45|	lua_pushcfunction(L, cfunction);
  ------------------
  |  |  262|     45|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  554|     45|	const char *what = ">nSltufLr";
  555|     45|	lua_getinfo(L, what, &ar);
  556|     45|	assert(lua_gettop(L) >= top - 1 &&
  557|     45|	       lua_gettop(L) <= top + 2);
  558|     45|}
torture_test.cc:_ZL18__lua_getmetatableP9lua_StateP18FuzzedDataProvider:
  599|     57|{
  600|     57|	int top = lua_gettop(L);
  601|     57|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  602|     57|	lua_getmetatable(L, index);
  603|     57|	assert(lua_gettop(L) - top <= 1);
  604|     57|}
torture_test.cc:_ZL14__lua_getstackP9lua_StateP18FuzzedDataProvider:
  564|    101|{
  565|    101|	int top = lua_gettop(L);
  566|    101|	int level = fdp->ConsumeIntegral<int8_t>();
  567|    101|	lua_Debug ar;
  568|    101|	lua_getstack(L, level, &ar);
  569|    101|	assert(lua_gettop(L) == top);
  570|    101|}
torture_test.cc:_ZL14__lua_gettableP9lua_StateP18FuzzedDataProvider:
 1047|    166|{
 1048|    166|	int top = lua_gettop(L);
 1049|    166|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1050|    166|	if (!lua_istable(L, index))
  ------------------
  |  |  267|    166|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|    166|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (1050:6): [True: 80, False: 86]
  ------------------
 1051|     80|		return;
 1052|     86|	uint8_t key = fdp->ConsumeIntegral<uint8_t>();
 1053|     86|	lua_pushnumber(L, key);
 1054|     86|	lua_gettable(L, index);
 1055|     86|	assert(lua_gettop(L) == top + 1);
 1056|     86|}
torture_test.cc:_ZL12__lua_gettopP9lua_StateP18FuzzedDataProvider:
  151|     30|{
  152|     30|	int rc = lua_gettop(L);
  153|     30|	assert(rc >= 0);
  154|     30|}
torture_test.cc:_ZL16__lua_getupvalueP9lua_StateP18FuzzedDataProvider:
  469|    175|{
  470|    175|	int top = lua_gettop(L);
  471|    175|	int funcindex = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  472|    175|	int n = fdp->ConsumeIntegral<uint8_t>();
  473|    175|	lua_getupvalue(L, funcindex, n);
  474|    175|	assert(lua_gettop(L) == top || lua_gettop(L) == top + 1);
  475|    175|}
torture_test.cc:_ZL12__lua_insertP9lua_StateP18FuzzedDataProvider:
  160|    139|{
  161|    139|	int top = lua_gettop(L);
  162|    139|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  163|    139|	lua_insert(L, index);
  164|    139|	assert(lua_gettop(L) == top - 1 + 1);
  165|    139|}
torture_test.cc:_ZL15__lua_isbooleanP9lua_StateP18FuzzedDataProvider:
  171|     80|{
  172|     80|	int top = lua_gettop(L);
  173|     80|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  174|     80|	int rc = lua_isboolean(L, index);
  ------------------
  |  |  270|     80|#define lua_isboolean(L,n)	(lua_type(L, (n)) == LUA_TBOOLEAN)
  |  |  ------------------
  |  |  |  |   76|     80|#define LUA_TBOOLEAN		1
  |  |  ------------------
  ------------------
  175|     80|	assert(rc == 0 || rc == 1);
  176|     80|}
torture_test.cc:_ZL17__lua_iscfunctionP9lua_StateP18FuzzedDataProvider:
  182|    151|{
  183|    151|	int top = lua_gettop(L);
  184|    151|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  185|    151|	int rc = lua_iscfunction(L, index);
  186|    151|	assert(rc == 0 || rc == 1);
  187|    151|}
torture_test.cc:_ZL16__lua_isfunctionP9lua_StateP18FuzzedDataProvider:
  193|     46|{
  194|     46|	int top = lua_gettop(L);
  195|     46|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  196|     46|	int rc = lua_isfunction(L, index);
  ------------------
  |  |  266|     46|#define lua_isfunction(L,n)	(lua_type(L, (n)) == LUA_TFUNCTION)
  |  |  ------------------
  |  |  |  |   81|     46|#define LUA_TFUNCTION		6
  |  |  ------------------
  ------------------
  197|     46|	assert(rc == 0 || rc == 1);
  198|     46|}
torture_test.cc:_ZL21__lua_islightuserdataP9lua_StateP18FuzzedDataProvider:
  492|     59|{
  493|     59|	int top = lua_gettop(L);
  494|     59|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  495|     59|	int rc = lua_islightuserdata(L, index);
  ------------------
  |  |  268|     59|#define lua_islightuserdata(L,n)	(lua_type(L, (n)) == LUA_TLIGHTUSERDATA)
  |  |  ------------------
  |  |  |  |   77|     59|#define LUA_TLIGHTUSERDATA	2
  |  |  ------------------
  ------------------
  496|     59|	assert(rc == 0 || rc == 1);
  497|     59|}
torture_test.cc:_ZL11__lua_isnilP9lua_StateP18FuzzedDataProvider:
  204|     31|{
  205|     31|	int top = lua_gettop(L);
  206|     31|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  207|     31|	int rc = lua_isnil(L, index);
  ------------------
  |  |  269|     31|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|     31|#define LUA_TNIL		0
  |  |  ------------------
  ------------------
  208|     31|	assert(rc == 0 || rc == 1);
  209|     31|}
torture_test.cc:_ZL12__lua_isnoneP9lua_StateP18FuzzedDataProvider:
  215|     76|{
  216|     76|	int top = lua_gettop(L);
  217|     76|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  218|     76|	int rc = lua_isnone(L, index);
  ------------------
  |  |  272|     76|#define lua_isnone(L,n)		(lua_type(L, (n)) == LUA_TNONE)
  |  |  ------------------
  |  |  |  |   73|     76|#define LUA_TNONE		(-1)
  |  |  ------------------
  ------------------
  219|     76|	assert(rc == 0 || rc == 1);
  220|     76|	assert(lua_gettop(L) == top);
  221|     76|}
torture_test.cc:_ZL17__lua_isnoneornilP9lua_StateP18FuzzedDataProvider:
  227|     86|{
  228|     86|	int top = lua_gettop(L);
  229|     86|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  230|     86|	lua_isnoneornil(L, index);
  ------------------
  |  |  273|     86|#define lua_isnoneornil(L, n)	(lua_type(L, (n)) <= 0)
  ------------------
  231|     86|	assert(lua_gettop(L) == top);
  232|     86|}
torture_test.cc:_ZL14__lua_isnumberP9lua_StateP18FuzzedDataProvider:
   89|    187|{
   90|    187|	int top = lua_gettop(L);
   91|    187|	uint8_t n = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
   92|    187|	lua_isnumber(L, n);
   93|    187|	assert(lua_gettop(L) == top);
   94|    187|}
torture_test.cc:_ZL14__lua_isstringP9lua_StateP18FuzzedDataProvider:
  238|    172|{
  239|    172|	int top = lua_gettop(L);
  240|    172|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  241|    172|	int rc = lua_isstring(L, index);
  242|    172|	assert(rc == 0 || rc == 1);
  243|    172|}
torture_test.cc:_ZL13__lua_istableP9lua_StateP18FuzzedDataProvider:
  249|    101|{
  250|    101|	int top = lua_gettop(L);
  251|    101|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  252|    101|	int rc = lua_istable(L, index);
  ------------------
  |  |  267|    101|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|    101|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  253|    101|	assert(rc == 0 || rc == 1);
  254|    101|}
torture_test.cc:_ZL14__lua_isthreadP9lua_StateP18FuzzedDataProvider:
  514|     83|{
  515|     83|	int top = lua_gettop(L);
  516|     83|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  517|     83|	int rc = lua_isthread(L, index);
  ------------------
  |  |  271|     83|#define lua_isthread(L,n)	(lua_type(L, (n)) == LUA_TTHREAD)
  |  |  ------------------
  |  |  |  |   83|     83|#define LUA_TTHREAD		8
  |  |  ------------------
  ------------------
  518|     83|	assert(rc == 0 || rc == 1);
  519|     83|}
torture_test.cc:_ZL16__lua_isuserdataP9lua_StateP18FuzzedDataProvider:
  503|    229|{
  504|    229|	int top = lua_gettop(L);
  505|    229|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  506|    229|	int rc = lua_isuserdata(L, index);
  507|    229|	assert(rc == 0 || rc == 1);
  508|    229|}
torture_test.cc:_ZL15__luaL_callmetaP9lua_StateP18FuzzedDataProvider:
 1685|    118|{
 1686|    118|	int top = lua_gettop(L);
 1687|    118|	auto obj = fdp->ConsumeIntegralInRange(1, top);
 1688|    118|	luaL_callmeta(L, obj, MT_FUNC_NAME_TORTURE);
  ------------------
  |  |   44|    118|#define MT_FUNC_NAME_TORTURE "__torture"
  ------------------
 1689|    118|	assert(lua_gettop(L) == top || lua_gettop(L) == top + 1);
 1690|    118|}
torture_test.cc:_ZL15__luaL_checkanyP9lua_StateP18FuzzedDataProvider:
 1371|     39|{
 1372|     39|	int top = lua_gettop(L);
 1373|     39|	uint8_t arg = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1374|       |	/*
 1375|       |	 * Functions called luaL_check* always raise an error
 1376|       |	 * if the check is not satisfied.
 1377|       |	 */
 1378|     39|	luaL_checkany(L, arg);
 1379|     39|	assert(lua_gettop(L) == top);
 1380|     39|}
torture_test.cc:_ZL19__luaL_checkintegerP9lua_StateP18FuzzedDataProvider:
 1321|     98|{
 1322|     98|	int top = lua_gettop(L);
 1323|     98|	uint8_t arg = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1324|       |	/*
 1325|       |	 * Functions called luaL_check* always raise an error
 1326|       |	 * if the check is not satisfied.
 1327|       |	 */
 1328|     98|	if (lua_type(L, arg) != LUA_TNUMBER)
  ------------------
  |  |   78|     98|#define LUA_TNUMBER		3
  ------------------
  |  Branch (1328:6): [True: 52, False: 46]
  ------------------
 1329|     52|		return;
 1330|     46|	luaL_checkinteger(L, arg);
 1331|     46|	assert(lua_gettop(L) == top);
 1332|     46|}
torture_test.cc:_ZL18__luaL_checknumberP9lua_StateP18FuzzedDataProvider:
 1304|    180|{
 1305|    180|	int top = lua_gettop(L);
 1306|    180|	uint8_t narg = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1307|       |	/*
 1308|       |	 * Functions called luaL_check* always raise an error
 1309|       |	 * if the check is not satisfied.
 1310|       |	 */
 1311|    180|	if (lua_type(L, narg) != LUA_TNUMBER)
  ------------------
  |  |   78|    180|#define LUA_TNUMBER		3
  ------------------
  |  Branch (1311:6): [True: 77, False: 103]
  ------------------
 1312|     77|		return;
 1313|    103|	luaL_checknumber(L, narg);
 1314|    103|	assert(lua_gettop(L) == top);
 1315|    103|}
torture_test.cc:_ZL17__luaL_checkstackP9lua_StateP18FuzzedDataProvider:
 1603|     25|{
 1604|     25|	int top = lua_gettop(L);
 1605|     25|	int sz = top + 1;
 1606|     25|	char err_msg[] = "shit happens";
 1607|     25|	luaL_checkstack(L, sz, err_msg);
 1608|     25|	assert(lua_gettop(L) == top);
 1609|     25|}
torture_test.cc:_ZL18__luaL_checkstringP9lua_StateP18FuzzedDataProvider:
 1338|     86|{
 1339|     86|	int top = lua_gettop(L);
 1340|     86|	uint8_t arg = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1341|       |	/*
 1342|       |	 * Functions called luaL_check* always raise an error
 1343|       |	 * if the check is not satisfied.
 1344|       |	 */
 1345|     86|	if (lua_type(L, arg) != LUA_TSTRING)
  ------------------
  |  |   79|     86|#define LUA_TSTRING		4
  ------------------
  |  Branch (1345:6): [True: 74, False: 12]
  ------------------
 1346|     74|		return;
 1347|     12|	luaL_checkstring(L, arg);
  ------------------
  |  |  103|     12|#define luaL_checkstring(L,n)	(luaL_checklstring(L, (n), NULL))
  ------------------
 1348|     12|	assert(lua_gettop(L) == top);
 1349|     12|}
torture_test.cc:_ZL16__luaL_checktypeP9lua_StateP18FuzzedDataProvider:
 1355|    130|{
 1356|    130|	int top = lua_gettop(L);
 1357|    130|	uint8_t arg = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1358|       |	/*
 1359|       |	 * Functions called luaL_check* always raise an error
 1360|       |	 * if the check is not satisfied.
 1361|       |	 */
 1362|    130|	int type = lua_type(L, arg);
 1363|    130|	luaL_checktype(L, arg, type);
 1364|    130|	assert(lua_gettop(L) == top);
 1365|    130|}
torture_test.cc:_ZL19__luaL_getmetafieldP9lua_StateP18FuzzedDataProvider:
 1633|    160|{
 1634|    160|	int top = lua_gettop(L);
 1635|    160|	auto obj = fdp->ConsumeIntegralInRange(1, top);
 1636|    160|	const char e[] = "xxx";
 1637|    160|	luaL_getmetafield(L, obj, e);
 1638|    160|	assert(lua_gettop(L) == top || lua_gettop(L) == top + 1);
 1639|    160|}
torture_test.cc:_ZL17__luaL_loadstringP9lua_StateP18FuzzedDataProvider:
 1674|    188|{
 1675|    188|	int top = lua_gettop(L);
 1676|    188|	int res = luaL_loadstring(L, "a = a + 1");
 1677|    188|	assert(res == LUA_OK);
 1678|    188|	assert(lua_gettop(L) == top + 1);
 1679|    188|}
torture_test.cc:_ZL10__luaL_refP9lua_StateP18FuzzedDataProvider:
 1590|    182|{
 1591|    182|	int top = lua_gettop(L);
 1592|    182|	auto idx = fdp->ConsumeIntegralInRange(1, top);
 1593|    182|	if (lua_type(L, idx) != LUA_TTABLE)
  ------------------
  |  |   80|    182|#define LUA_TTABLE		5
  ------------------
  |  Branch (1593:6): [True: 56, False: 126]
  ------------------
 1594|     56|		return;
 1595|    126|	luaL_ref(L, idx);
 1596|    126|	assert(lua_gettop(L) == top - 1);
 1597|    126|}
torture_test.cc:_ZL16__luaL_tolstringP9lua_StateP18FuzzedDataProvider:
 1463|    134|{
 1464|    134|	int top = lua_gettop(L);
 1465|    134|	auto idx = fdp->ConsumeIntegralInRange(1, top);
 1466|    134|#if LUA_VERSION_NUM < 503
 1467|    134|	lua_tolstring(L, idx, NULL);
 1468|    134|	assert(lua_gettop(L) == top);
 1469|       |#else
 1470|       |	luaL_tolstring(L, idx, NULL);
 1471|       |	assert(lua_gettop(L) == top + 1);
 1472|       |#endif /* LUA_VERSION_NUM */
 1473|    134|}
torture_test.cc:_ZL16__luaL_tracebackP9lua_StateP18FuzzedDataProvider:
 1450|     95|{
 1451|     95|	int top = lua_gettop(L);
 1452|     95|	auto buf = fdp->ConsumeRandomLengthString(max_str_len);
 1453|     95|	luaL_traceback(L, L, buf.c_str(), 1);
 1454|     95|	assert(lua_gettop(L) == top + 1);
 1455|     95|}
torture_test.cc:_ZL12__luaL_whereP9lua_StateP18FuzzedDataProvider:
 1696|     52|{
 1697|     52|	int top = lua_gettop(L);
 1698|     52|	luaL_where(L, 1);
 1699|     52|	assert(lua_gettop(L) == top + 1);
 1700|     52|}
torture_test.cc:_ZL17__lua_newuserdataP9lua_StateP18FuzzedDataProvider:
 1266|    347|{
 1267|    347|	uint8_t size = fdp->ConsumeIntegral<uint8_t>();
 1268|    347|	lua_newuserdata(L, size);
 1269|    347|}
torture_test.cc:_ZL10__lua_nextP9lua_StateP18FuzzedDataProvider:
  536|    503|{
  537|    503|	int top = lua_gettop(L);
  538|    503|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  539|    503|	if (!lua_istable(L, index))
  ------------------
  |  |  267|    503|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|    503|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (539:6): [True: 50, False: 453]
  ------------------
  540|     50|		return;
  541|    453|	lua_pushnil(L);  /* first key */
  542|    453|	lua_next(L, index);
  543|    453|	assert(lua_gettop(L) - top - 1 <= 2);
  544|    453|}
torture_test.cc:_ZL11__lua_pcallP9lua_StateP18FuzzedDataProvider:
 1659|     48|{
 1660|     48|	int top = lua_gettop(L);
 1661|       |	/* Function to be called. */
 1662|     48|	lua_pushcfunction(L, cfunction);
  ------------------
  |  |  262|     48|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
 1663|     48|	int nargs = 0;
 1664|     48|	int nresults = 0;
 1665|     48|	int res = lua_pcall(L, nargs, nresults, 0);
 1666|     48|	assert(res == LUA_OK);
 1667|     48|	assert(lua_gettop(L) == top + nresults - nargs);
 1668|     48|}
torture_test.cc:_ZL9__lua_popP9lua_StateP18FuzzedDataProvider:
   78|    975|{
   79|    975|	int top = lua_gettop(L);
   80|    975|	uint8_t n = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
   81|    975|	lua_pop(L, n);
  ------------------
  |  |  256|    975|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   82|    975|	assert(lua_gettop(L) == top - n);
   83|    975|}
torture_test.cc:_ZL18__lua_pushcclosureP9lua_StateP18FuzzedDataProvider:
  576|    171|{
  577|       |	/* Maximum n is 255 in lua_pushcclosure(3). */
  578|    171|	int n = fdp->ConsumeIntegralInRange<uint8_t>(1, 10);
  579|    721|	for (int i = 1; i < n; i++)
  ------------------
  |  Branch (579:18): [True: 550, False: 171]
  ------------------
  580|    550|		lua_pushnumber(L, i);
  581|    171|	lua_pushcclosure(L, cfunction, n);
  582|    171|}
torture_test.cc:_ZL17__lua_pushfstringP9lua_StateP18FuzzedDataProvider:
 1275|  12.6k|{
 1276|  12.6k|	int top = lua_gettop(L);
 1277|  12.6k|	auto arg1 = fdp->ConsumeRandomLengthString(max_str_len);
 1278|  12.6k|	auto arg2 = fdp->ConsumeRandomLengthString(max_str_len);
 1279|  12.6k|	auto arg3 = fdp->ConsumeRandomLengthString(max_str_len);
 1280|  12.6k|	auto arg4 = fdp->ConsumeRandomLengthString(max_str_len);
 1281|  12.6k|	auto arg5 = fdp->ConsumeRandomLengthString(max_str_len);
 1282|  12.6k|	char fmt_str[] = "%s %f %p %d %c";
 1283|  12.6k|	lua_pushfstring(L, fmt_str, arg1.c_str(), arg2.c_str(),
 1284|  12.6k|	                            arg3.c_str(), arg4.c_str(),
 1285|  12.6k|	                            arg5.c_str());
 1286|  12.6k|	assert(lua_gettop(L) == top + 1);
 1287|  12.6k|}
torture_test.cc:_ZL16__lua_pushthreadP9lua_StateP18FuzzedDataProvider:
  525|     36|{
  526|     36|	int top = lua_gettop(L);
  527|     36|	int rc = lua_pushthread(L);
  528|     36|	assert(rc == 1);
  529|     36|	assert(lua_gettop(L) == top + 1);
  530|     36|}
torture_test.cc:_ZL15__lua_pushvalueP9lua_StateP18FuzzedDataProvider:
  303|     99|{
  304|     99|	int top = lua_gettop(L);
  305|     99|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  306|     99|	lua_pushvalue(L, index);
  307|     99|	assert(lua_gettop(L) == top + 1);
  308|     99|}
torture_test.cc:_ZL14__lua_rawequalP9lua_StateP18FuzzedDataProvider:
 1436|  1.14k|{
 1437|  1.14k|	int top = lua_gettop(L);
 1438|  1.14k|	if (top < 2)
  ------------------
  |  Branch (1438:6): [True: 0, False: 1.14k]
  ------------------
 1439|      0|		return;
 1440|  1.14k|	uint8_t index1 = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1441|  1.14k|	uint8_t index2 = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1442|  1.14k|	lua_rawequal(L, index1, index2);
 1443|  1.14k|	assert(lua_gettop(L) == top);
 1444|  1.14k|}
torture_test.cc:_ZL12__lua_rawgetP9lua_StateP18FuzzedDataProvider:
  744|    153|{
  745|    153|	int top = lua_gettop(L);
  746|    153|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  747|    153|	if (!lua_istable(L, index))
  ------------------
  |  |  267|    153|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|    153|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (747:6): [True: 48, False: 105]
  ------------------
  748|     48|		return;
  749|    105|	uint8_t key = fdp->ConsumeIntegral<uint8_t>();
  750|    105|	lua_pushnumber(L, key);
  751|    105|	top = lua_gettop(L);
  752|    105|	lua_rawget(L, index);
  753|    105|	assert(lua_gettop(L) == top);
  754|    105|}
torture_test.cc:_ZL13__lua_rawgetiP9lua_StateP18FuzzedDataProvider:
  796|    189|{
  797|    189|	int top = lua_gettop(L);
  798|    189|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  799|    189|	if (!lua_istable(L, index))
  ------------------
  |  |  267|    189|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|    189|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (799:6): [True: 52, False: 137]
  ------------------
  800|     52|		return;
  801|    137|	int i = fdp->ConsumeIntegral<uint8_t>();
  802|    137|	lua_rawgeti(L, index, i);
  803|    137|	assert(lua_gettop(L) == top + 1);
  804|    137|}
torture_test.cc:_ZL12__lua_rawsetP9lua_StateP18FuzzedDataProvider:
  760|    329|{
  761|    329|	int top = lua_gettop(L);
  762|    329|	if (top == 0)
  ------------------
  |  Branch (762:6): [True: 0, False: 329]
  ------------------
  763|      0|		return;
  764|    329|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  765|    329|	if (!lua_istable(L, index))
  ------------------
  |  |  267|    329|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|    329|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (765:6): [True: 48, False: 281]
  ------------------
  766|     48|		return;
  767|    281|	uint8_t key = fdp->ConsumeIntegral<uint8_t>();
  768|    281|	uint8_t value = fdp->ConsumeIntegral<uint8_t>();
  769|    281|	lua_pushnumber(L, value);
  770|    281|	lua_pushnumber(L, key);
  771|    281|	top = lua_gettop(L);
  772|    281|	lua_rawset(L, index);
  773|    281|	assert(lua_gettop(L) == top - 2);
  774|    281|}
torture_test.cc:_ZL13__lua_rawsetiP9lua_StateP18FuzzedDataProvider:
  780|    274|{
  781|    274|	int top = lua_gettop(L);
  782|    274|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  783|    274|	if (!lua_istable(L, index))
  ------------------
  |  |  267|    274|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|    274|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (783:6): [True: 27, False: 247]
  ------------------
  784|     27|		return;
  785|    247|	int n = fdp->ConsumeIntegral<uint8_t>();
  786|    247|	__lua_pushnumber(L, fdp);
  787|    247|	top = lua_gettop(L);
  788|    247|	lua_rawseti(L, index, n);
  789|    247|	assert(lua_gettop(L) == top - 1);
  790|    247|}
torture_test.cc:_ZL14__lua_registerP9lua_StateP18FuzzedDataProvider:
 1150|     43|{
 1151|     43|	int top = lua_gettop(L);
 1152|     43|	lua_register(L, "cfunction", cfunction);
  ------------------
  |  |  260|     43|#define lua_register(L,n,f) (lua_pushcfunction(L, (f)), lua_setglobal(L, (n)))
  |  |  ------------------
  |  |  |  |  262|     43|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  |  |  ------------------
  |  |               #define lua_register(L,n,f) (lua_pushcfunction(L, (f)), lua_setglobal(L, (n)))
  |  |  ------------------
  |  |  |  |  278|     43|#define lua_setglobal(L,s)	lua_setfield(L, LUA_GLOBALSINDEX, (s))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|     43|#define LUA_GLOBALSINDEX	(-10002)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1153|     43|	assert(lua_gettop(L) == top);
 1154|     43|}
torture_test.cc:_ZL12__lua_removeP9lua_StateP18FuzzedDataProvider:
  314|    116|{
  315|    116|	int top = lua_gettop(L);
  316|    116|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  317|    116|	lua_remove(L, index);
  318|    116|	assert(lua_gettop(L) == top - 1);
  319|    116|}
torture_test.cc:_ZL13__lua_replaceP9lua_StateP18FuzzedDataProvider:
  325|    109|{
  326|    109|	int top = lua_gettop(L);
  327|    109|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  328|    109|	lua_replace(L, index);
  329|    109|	assert(lua_gettop(L) == top - 1);
  330|    109|}
torture_test.cc:_ZL12__lua_resumeP9lua_StateP18FuzzedDataProvider:
 1165|     74|{
 1166|     74|	lua_State *co = lua_newthread(L);
 1167|     74|	lua_pushcfunction(co, cfunction);
  ------------------
  |  |  262|     74|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
 1168|     74|	int res = -1;
 1169|     74|#if LUA_VERSION_NUM == 501
 1170|     74|	res = lua_resume(L, 0);
 1171|       |#elif LUA_VERSION_NUM == 503 || LUA_VERSION_NUM == 502
 1172|       |	res = lua_resume(co, L, 0);
 1173|       |#else
 1174|       |	int nres;
 1175|       |	res = lua_resume(co, L, 0, &nres);
 1176|       |#endif /* LUA_VERSION_NUM */
 1177|       |	/* assert(res == LUA_OK); */
 1178|     74|	(void)res;
 1179|     74|	lua_settop(co, 0);
 1180|     74|}
torture_test.cc:_ZL14__lua_setfieldP9lua_StateP18FuzzedDataProvider:
 1186|  1.04k|{
 1187|  1.04k|	int top = lua_gettop(L);
 1188|  1.04k|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1189|  1.04k|	if (lua_type(L, index) != LUA_TTABLE)
  ------------------
  |  |   80|  1.04k|#define LUA_TTABLE		5
  ------------------
  |  Branch (1189:6): [True: 39, False: 1.00k]
  ------------------
 1190|     39|		return;
 1191|  1.00k|	auto k = fdp->ConsumeRemainingBytesAsString();
 1192|  1.00k|	lua_setfield(L, index, k.c_str());
 1193|  1.00k|	assert(lua_gettop(L) == top - 1);
 1194|  1.00k|}
torture_test.cc:_ZL15__lua_setglobalP9lua_StateP18FuzzedDataProvider:
  336|    176|{
  337|    176|	int top = lua_gettop(L);
  338|    176|	auto str = fdp->ConsumeRandomLengthString(max_str_len);
  339|    176|	lua_setglobal(L, str.c_str());
  ------------------
  |  |  278|    176|#define lua_setglobal(L,s)	lua_setfield(L, LUA_GLOBALSINDEX, (s))
  |  |  ------------------
  |  |  |  |   38|    176|#define LUA_GLOBALSINDEX	(-10002)
  |  |  ------------------
  ------------------
  340|    176|	assert(lua_gettop(L) == top - 1);
  341|    176|}
torture_test.cc:_ZL18__lua_setmetatableP9lua_StateP18FuzzedDataProvider:
 1000|     84|{
 1001|     84|	luaL_getmetatable(L, TYPE_NAME_TORTURE);
  ------------------
  |  |  118|     84|#define luaL_getmetatable(L,n)	(lua_getfield(L, LUA_REGISTRYINDEX, (n)))
  |  |  ------------------
  |  |  |  |   36|     84|#define LUA_REGISTRYINDEX	(-10000)
  |  |  ------------------
  ------------------
 1002|     84|	int top = lua_gettop(L);
 1003|     84|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1004|     84|	lua_setmetatable(L, index);
 1005|     84|	assert(lua_gettop(L) == top - 1);
 1006|     84|}
torture_test.cc:_ZL14__lua_settableP9lua_StateP18FuzzedDataProvider:
 1237|     42|{
 1238|     42|	int top = lua_gettop(L);
 1239|     42|	lua_createtable(L, 0, 1);
 1240|       |
 1241|     42|	lua_pushstring(L, "language");
 1242|     42|	lua_pushstring(L, "Lua");
 1243|     42|	lua_settable(L, -3);
 1244|       |
 1245|     42|	assert(lua_gettop(L) == top + 1);
 1246|     42|}
torture_test.cc:_ZL12__lua_settopP9lua_StateP18FuzzedDataProvider:
  347|     35|{
  348|     35|	int top = lua_gettop(L);
  349|     35|	int grow_slots = 2;
  350|     35|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top + grow_slots);
  351|     35|	lua_settop(L, index);
  352|     35|	assert(lua_gettop(L) == index);
  353|     35|}
torture_test.cc:_ZL16__lua_setupvalueP9lua_StateP18FuzzedDataProvider:
  457|     74|{
  458|     74|	int top = lua_gettop(L);
  459|     74|	int funcindex = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  460|     74|	int n = fdp->ConsumeIntegral<uint8_t>();
  461|     74|	lua_setupvalue(L, funcindex, n);
  462|     74|	assert(lua_gettop(L) == top);
  463|     74|}
torture_test.cc:_ZL12__lua_statusP9lua_StateP18FuzzedDataProvider:
  359|     24|{
  360|     24|	int rc = lua_status(L);
  361|     24|	assert(rc == 0 || rc == LUA_YIELD);
  362|     24|}
torture_test.cc:_ZL15__lua_tobooleanP9lua_StateP18FuzzedDataProvider:
  368|    146|{
  369|    146|	int top = lua_gettop(L);
  370|    146|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  371|    146|	int rc = lua_toboolean(L, index);
  372|    146|	assert(rc == 0 || rc == 1);
  373|    146|}
torture_test.cc:_ZL17__lua_tocfunctionP9lua_StateP18FuzzedDataProvider:
 1226|    136|{
 1227|    136|	int top = lua_gettop(L);
 1228|    136|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1229|    136|	lua_tocfunction(L, index);
 1230|    136|	assert(lua_gettop(L) == top);
 1231|    136|}
torture_test.cc:_ZL15__lua_tointegerP9lua_StateP18FuzzedDataProvider:
  379|    177|{
  380|    177|	int top = lua_gettop(L);
  381|    177|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  382|    177|	lua_tointeger(L, index);
  383|    177|	assert(lua_gettop(L) == top);
  384|    177|}
torture_test.cc:_ZL16__lua_tointegerxP9lua_StateP18FuzzedDataProvider:
  390|    161|{
  391|    161|	int top = lua_gettop(L);
  392|    161|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  393|    161|	int isnum;
  394|    161|	lua_tointegerx(L, index, &isnum);
  395|    161|	assert(isnum == 0 || isnum == 1);
  396|    161|	assert(lua_gettop(L) == top);
  397|    161|}
torture_test.cc:_ZL15__lua_tolstringP9lua_StateP18FuzzedDataProvider:
  403|     62|{
  404|     62|	int top = lua_gettop(L);
  405|     62|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  406|     62|	lua_tolstring(L, index, NULL);
  407|     62|	assert(lua_gettop(L) == top);
  408|     62|}
torture_test.cc:_ZL14__lua_tonumberP9lua_StateP18FuzzedDataProvider:
  100|    244|{
  101|    244|	int top = lua_gettop(L);
  102|    244|	uint8_t n = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  103|    244|	lua_tonumber(L, n);
  104|    244|	assert(lua_gettop(L) == top);
  105|    244|}
torture_test.cc:_ZL15__lua_topointerP9lua_StateP18FuzzedDataProvider:
 1200|    183|{
 1201|    183|	int top = lua_gettop(L);
 1202|    183|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1203|    183|	const void *p = lua_topointer(L, index);
 1204|       |	/*
 1205|       |	 * The value can be a userdata, a table, a thread, or a function;
 1206|       |	 * otherwise, lua_topointer returns NULL.
 1207|       |	 */
 1208|    183|	int type = lua_type(L, index);
 1209|    183|	if (type == LUA_TUSERDATA  ||
  ------------------
  |  |   82|    366|#define LUA_TUSERDATA		7
  ------------------
  |  Branch (1209:6): [True: 0, False: 183]
  ------------------
 1210|    183|	    type == LUA_TTHREAD    ||
  ------------------
  |  |   83|    366|#define LUA_TTHREAD		8
  ------------------
  |  Branch (1210:6): [True: 7, False: 176]
  ------------------
 1211|    183|	    type == LUA_TTABLE     ||
  ------------------
  |  |   80|    359|#define LUA_TTABLE		5
  ------------------
  |  Branch (1211:6): [True: 27, False: 149]
  ------------------
 1212|    183|#if LUA_VERSION_NUM > 503 || defined(LUAJIT)
 1213|    183|	    type == LUA_TSTRING    ||
  ------------------
  |  |   79|    332|#define LUA_TSTRING		4
  ------------------
  |  Branch (1213:6): [True: 5, False: 144]
  ------------------
 1214|    183|#endif /* LUA_VERSION_NUM */
 1215|    183|	    type == LUA_TFUNCTION)
  ------------------
  |  |   81|    144|#define LUA_TFUNCTION		6
  ------------------
  |  Branch (1215:6): [True: 3, False: 141]
  ------------------
 1216|     42|		assert(p);
 1217|    141|	else
 1218|    141|		assert(p == NULL);
 1219|    183|	assert(lua_gettop(L) == top);
 1220|    183|}
torture_test.cc:_ZL14__lua_tostringP9lua_StateP18FuzzedDataProvider:
  414|     79|{
  415|     79|	int top = lua_gettop(L);
  416|     79|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  417|     79|	lua_tostring(L, index);
  ------------------
  |  |  281|     79|#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
  ------------------
  418|     79|	assert(lua_gettop(L) == top);
  419|     79|}
torture_test.cc:_ZL14__lua_tothreadP9lua_StateP18FuzzedDataProvider:
 1293|    139|{
 1294|    139|	int top = lua_gettop(L);
 1295|    139|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1296|    139|	lua_tothread(L, index);
 1297|    139|	assert(lua_gettop(L) == top);
 1298|    139|}
torture_test.cc:_ZL16__lua_touserdataP9lua_StateP18FuzzedDataProvider:
  481|    132|{
  482|    132|	int top = lua_gettop(L);
  483|    132|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  484|    132|	lua_touserdata(L, index);
  485|    132|	assert(lua_gettop(L) == top);
  486|    132|}
torture_test.cc:_ZL10__lua_typeP9lua_StateP18FuzzedDataProvider:
  425|     46|{
  426|     46|	int top = lua_gettop(L);
  427|     46|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  428|     46|	int type = lua_type(L, index);
  429|     46|	assert(type == LUA_TBOOLEAN       ||
  430|     46|	       type == LUA_TFUNCTION      ||
  431|     46|	       type == LUA_TLIGHTUSERDATA ||
  432|     46|	       type == LUA_TNIL           ||
  433|     46|	       type == LUA_TNUMBER        ||
  434|     46|	       type == LUA_TSTRING        ||
  435|     46|	       type == LUA_TTABLE         ||
  436|     46|	       type == LUA_TTHREAD        ||
  437|     46|	       type == LUA_TUSERDATA      ||
  438|     46|	       type == LUA_TNONE);
  439|     46|	assert(lua_gettop(L) == top);
  440|     46|}
torture_test.cc:_ZL14__lua_typenameP9lua_StateP18FuzzedDataProvider:
  630|     28|{
  631|     28|	int top = lua_gettop(L);
  632|     28|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  633|     28|	const char* name = lua_typename(L, index);
  634|     28|	assert(name);
  635|     28|	assert(lua_gettop(L) == top);
  636|     28|}
torture_test.cc:_ZL15__lua_upvalueidP9lua_StateP18FuzzedDataProvider:
 1417|     85|{
 1418|     85|	int funcindex = -1;
 1419|     85|	lua_Debug ar;
 1420|     85|	lua_pushcfunction(L, cfunction);
  ------------------
  |  |  262|     85|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
 1421|     85|	int n = fdp->ConsumeIntegral<uint8_t>();
 1422|     85|	lua_setupvalue(L, funcindex, n);
 1423|     85|	assert(lua_getinfo(L, ">u", &ar) == 1);
 1424|     85|	if (ar.nups == 0)
  ------------------
  |  Branch (1424:6): [True: 85, False: 0]
  ------------------
 1425|     85|		return;
 1426|      0|	int top = lua_gettop(L);
 1427|      0|	void *p = lua_upvalueid(L, funcindex, n);
 1428|      0|	assert(p);
 1429|      0|	assert(lua_gettop(L) == top);
 1430|      0|}
torture_test.cc:_ZL11__lua_xmoveP9lua_StateP18FuzzedDataProvider:
 1137|    109|{
 1138|    109|	lua_State *co1 = lua_newthread(L);
 1139|    109|	lua_State *co2 = lua_newthread(L);
 1140|    109|	__lua_pushnumber(co1, fdp);
 1141|    109|	lua_xmove(co1, co2, 1);
 1142|    109|	lua_settop(co1, 0);
 1143|    109|	lua_settop(co2, 0);
 1144|    109|}
torture_test.cc:_ZL12__lua_cpcallP9lua_StateP18FuzzedDataProvider:
 1035|    308|{
 1036|    308|	int top = lua_gettop(L);
 1037|    308|	int rc = lua_cpcall(L, cfunction, NULL);
 1038|    308|	assert(rc == 0);
 1039|    308|	assert(lua_gettop(L) - top <= 1);
 1040|    308|}
torture_test.cc:_ZL11__lua_equalP9lua_StateP18FuzzedDataProvider:
  811|  1.14k|{
  812|  1.14k|	int top = lua_gettop(L);
  813|  1.14k|	if (top < 2)
  ------------------
  |  Branch (813:6): [True: 0, False: 1.14k]
  ------------------
  814|      0|		return;
  815|  1.14k|	uint8_t index1 = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  816|  1.14k|	uint8_t index2 = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  817|  1.14k|	lua_equal(L, index1, index2);
  818|  1.14k|	assert(lua_gettop(L) == top);
  819|  1.14k|}
torture_test.cc:_ZL13__lua_getfenvP9lua_StateP18FuzzedDataProvider:
  908|    461|{
  909|    461|	int top = lua_gettop(L);
  910|    461|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  911|    461|	lua_getfenv(L, index);
  912|    461|	assert(lua_gettop(L) == top + 1);
  913|    461|}
torture_test.cc:_ZL14__lua_lessthanP9lua_StateP18FuzzedDataProvider:
  827|    319|{
  828|    319|	int top = lua_gettop(L);
  829|    319|	uint8_t index1 = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  830|    319|	int type1 = lua_type(L, index1);
  831|    319|	switch (type1) {
  832|    118|	case LUA_TNUMBER:
  ------------------
  |  |   78|    118|#define LUA_TNUMBER		3
  ------------------
  |  Branch (832:2): [True: 118, False: 201]
  ------------------
  833|    118|		__lua_pushnumber(L, fdp);
  834|    118|		break;
  835|    156|	case LUA_TSTRING:
  ------------------
  |  |   79|    156|#define LUA_TSTRING		4
  ------------------
  |  Branch (835:2): [True: 156, False: 163]
  ------------------
  836|    156|		__lua_pushstring(L, fdp);
  837|    156|		break;
  838|     45|	default:
  ------------------
  |  Branch (838:2): [True: 45, False: 274]
  ------------------
  839|     45|		return;
  840|    319|	}
  841|    274|	int rc = lua_lessthan(L, index1, -1);
  842|    274|	assert(rc == 0 || rc == 1);
  843|    274|}
torture_test.cc:_ZL12__lua_objlenP9lua_StateP18FuzzedDataProvider:
  851|    145|{
  852|    145|	int top = lua_gettop(L);
  853|    145|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  854|    145|#if LUA_VERSION_NUM == 501
  855|    145|	lua_objlen(L, index);
  856|       |#else
  857|       |	lua_rawlen(L, index);
  858|       |#endif /* LUA_VERSION_NUM */
  859|    145|	assert(lua_gettop(L) == top);
  860|    145|}
torture_test.cc:_ZL13__lua_setfenvP9lua_StateP18FuzzedDataProvider:
  921|    111|{
  922|    111|	int top = lua_gettop(L);
  923|    111|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  924|    111|	if (!lua_istable(L, -1))
  ------------------
  |  |  267|    111|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|    111|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (924:6): [True: 33, False: 78]
  ------------------
  925|     33|		return;
  926|     78|	lua_setfenv(L, index);
  927|     78|	assert(lua_gettop(L) == top - 1);
  928|     78|}
torture_test.cc:_ZL10__lua_copyP9lua_StateP18FuzzedDataProvider:
 1480|     75|{
 1481|     75|	int top = lua_gettop(L);
 1482|     75|	uint8_t fromidx = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1483|     75|	uint8_t toidx = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1484|     75|	if (fromidx == toidx)
  ------------------
  |  Branch (1484:6): [True: 42, False: 33]
  ------------------
 1485|     42|		return;
 1486|     33|	lua_copy(L, fromidx, toidx);
 1487|     33|	assert(lua_gettop(L) == top);
 1488|     33|}
torture_test.cc:_ZL17__lua_isyieldableP9lua_StateP18FuzzedDataProvider:
 1023|     26|{
 1024|     26|	(void)fdp;
 1025|     26|	int rc = lua_isyieldable(L);
 1026|     26|	assert(rc == 0 || rc == 1);
 1027|     26|}
torture_test.cc:_ZL19__luaL_setmetatableP9lua_StateP18FuzzedDataProvider:
 1012|     30|{
 1013|     30|	int top = lua_gettop(L);
 1014|     30|	luaL_setmetatable(L, TYPE_NAME_TORTURE);
  ------------------
  |  |   43|     30|#define TYPE_NAME_TORTURE "torture_test"
  ------------------
 1015|     30|	assert(lua_gettop(L) == top);
 1016|     30|}
torture_test.cc:_ZL15__lua_tonumberxP9lua_StateP18FuzzedDataProvider:
  111|    258|{
  112|    258|	int top = lua_gettop(L);
  113|    258|	auto index = fdp->ConsumeIntegralInRange(1, top);
  114|    258|	int isnum;
  115|    258|	lua_tonumberx(L, index, &isnum);
  116|    258|	assert(isnum == 0 || isnum == 1);
  117|    258|	assert(lua_gettop(L) == top);
  118|    258|}
torture_test.cc:_ZL13__lua_versionP9lua_StateP18FuzzedDataProvider:
 1616|     28|{
 1617|     28|	int top = lua_gettop(L);
 1618|     28|#if LUA_VERSION_NUM < 504
 1619|     28|	const lua_Number *v = lua_version(L);
 1620|     28|	assert(v);
 1621|       |#else
 1622|       |	lua_Number v = lua_version(L);
 1623|       |	assert(v != 0);
 1624|       |#endif /* LUA_VERSION_NUM */
 1625|     28|	assert(lua_gettop(L) == top);
 1626|     28|}

