luaL_findtable:
   84|  1.20k|{
   85|  1.20k|  const char *e;
   86|  1.20k|  lua_pushvalue(L, idx);
   87|  1.20k|  do {
   88|  1.20k|    e = strchr(fname, '.');
   89|  1.20k|    if (e == NULL) e = fname + strlen(fname);
  ------------------
  |  Branch (89:9): [True: 1.20k, False: 0]
  ------------------
   90|  1.20k|    lua_pushlstring(L, fname, (size_t)(e - fname));
   91|  1.20k|    lua_rawget(L, -2);
   92|  1.20k|    if (lua_isnil(L, -1)) {  /* no such field? */
  ------------------
  |  |  269|  1.20k|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|  1.20k|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 1.20k, False: 0]
  |  |  ------------------
  ------------------
   93|  1.20k|      lua_pop(L, 1);  /* remove this nil */
  ------------------
  |  |  256|  1.20k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   94|  1.20k|      lua_createtable(L, 0, (*e == '.' ? 1 : szhint)); /* new table for field */
  ------------------
  |  Branch (94:30): [True: 0, False: 1.20k]
  ------------------
   95|  1.20k|      lua_pushlstring(L, fname, (size_t)(e - fname));
   96|  1.20k|      lua_pushvalue(L, -2);
   97|  1.20k|      lua_settable(L, -4);  /* set new table into field */
   98|  1.20k|    } else if (!lua_istable(L, -1)) {  /* field has a non-table value? */
  ------------------
  |  |  267|      0|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|      0|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (98:16): [True: 0, False: 0]
  ------------------
   99|      0|      lua_pop(L, 2);  /* remove table and value */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  100|      0|      return fname;  /* return problematic part of the name */
  101|      0|    }
  102|  1.20k|    lua_remove(L, -2);  /* remove previous table */
  103|  1.20k|    fname = e + 1;
  104|  1.20k|  } while (*e == '.');
  ------------------
  |  Branch (104:12): [True: 0, False: 1.20k]
  ------------------
  105|  1.20k|  return NULL;
  106|  1.20k|}
luaL_newstate:
  371|  1.20k|{
  372|  1.20k|  lua_State *L;
  373|       |#if LJ_64 && !LJ_GC64
  374|       |  L = lj_state_newstate(LJ_ALLOCF_INTERNAL, NULL);
  375|       |#else
  376|  1.20k|  L = lua_newstate(LJ_ALLOCF_INTERNAL, NULL);
  ------------------
  |  |   36|  1.20k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  377|  1.20k|#endif
  378|  1.20k|  if (L) {
  ------------------
  |  Branch (378:7): [True: 1.20k, False: 0]
  ------------------
  379|  1.20k|    G(L)->panic = panic;
  ------------------
  |  |  702|  1.20k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  380|  1.20k|#ifndef LUAJIT_DISABLE_VMEVENT
  381|  1.20k|    luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   36|  1.20k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   12|  1.20k|#define LJ_VMEVENTS_REGKEY	"_VMEVENTS"
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   13|  1.20k|#define LJ_VMEVENTS_HSIZE	4
  ------------------
  382|  1.20k|    lua_pushcfunction(L, error_finalizer);
  ------------------
  |  |  262|  1.20k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  383|  1.20k|    lua_rawseti(L, -2, VMEVENT_HASH(LJ_VMEVENT_ERRFIN));
  ------------------
  |  |   16|  1.20k|#define VMEVENT_HASH(ev)	((int)(ev) & ~7)
  ------------------
  384|  1.20k|    G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |  702|  1.20k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |   15|  1.20k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  ------------------
  385|  1.20k|    L->top--;
  386|  1.20k|#endif
  387|  1.20k|  }
  388|  1.20k|  return L;
  389|  1.20k|}

lj_alloc_create:
 1227|  1.20k|{
 1228|  1.20k|  size_t tsize = DEFAULT_GRANULARITY;
  ------------------
  |  |   41|  1.20k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
 1229|  1.20k|  char *tbase;
 1230|  1.20k|  INIT_MMAP();
  ------------------
  |  |  379|  1.20k|#define INIT_MMAP()		((void)0)
  ------------------
 1231|  1.20k|  UNUSED(rs);
  ------------------
  |  |   91|  1.20k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1232|  1.20k|  tbase = (char *)(CALL_MMAP(rs, tsize));
  ------------------
  |  |  321|  1.20k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1233|  1.20k|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|  1.20k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  1.20k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  1.20k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1233:7): [True: 1.20k, False: 0]
  ------------------
 1234|  1.20k|    size_t msize = pad_request(sizeof(struct malloc_state));
  ------------------
  |  |  433|  1.20k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|  1.20k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.20k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1235|  1.20k|    mchunkptr mn;
 1236|  1.20k|    mchunkptr msp = align_as_chunk(tbase);
  ------------------
  |  |  425|  1.20k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  1.20k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 1.20k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  1.20k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1237|  1.20k|    mstate m = (mstate)(chunk2mem(msp));
  ------------------
  |  |  422|  1.20k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  1.20k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.20k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1238|  1.20k|    memset(m, 0, msize);
 1239|  1.20k|    msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  441|  1.20k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  442|  1.20k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|  1.20k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
 1240|  1.20k|    m->seg.base = tbase;
 1241|  1.20k|    m->seg.size = tsize;
 1242|  1.20k|    m->release_checks = MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|  1.20k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1243|  1.20k|    init_bins(m);
 1244|  1.20k|    mn = next_chunk(mem2chunk(m));
  ------------------
  |  |  461|  1.20k|#define next_chunk(p)	((mchunkptr)(((char *)(p)) + ((p)->head & ~INUSE_BITS)))
  |  |  ------------------
  |  |  |  |  443|  1.20k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  1.20k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  1.20k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  1.20k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1245|  1.20k|    init_top(m, mn, (size_t)((tbase + tsize) - (char *)mn) - TOP_FOOT_SIZE);
  ------------------
  |  |  600|  1.20k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  1.20k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  1.20k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|  1.20k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  1.20k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  1.20k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|  1.20k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  1.20k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1246|  1.20k|    return m;
 1247|  1.20k|  }
 1248|      0|  return NULL;
 1249|  1.20k|}
lj_alloc_setprng:
 1252|  1.20k|{
 1253|  1.20k|  mstate ms = (mstate)msp;
 1254|  1.20k|  ms->prng = rs;
 1255|  1.20k|}
lj_alloc_destroy:
 1258|  1.20k|{
 1259|  1.20k|  mstate ms = (mstate)msp;
 1260|  1.20k|  msegmentptr sp = &ms->seg;
 1261|  2.40k|  while (sp != 0) {
  ------------------
  |  Branch (1261:10): [True: 1.20k, False: 1.20k]
  ------------------
 1262|  1.20k|    char *base = sp->base;
 1263|  1.20k|    size_t size = sp->size;
 1264|  1.20k|    sp = sp->next;
 1265|  1.20k|    CALL_MUNMAP(base, size);
 1266|  1.20k|  }
 1267|  1.20k|}
lj_alloc_f:
 1474|   145k|{
 1475|   145k|  (void)osize;
 1476|   145k|  if (nsize == 0) {
  ------------------
  |  Branch (1476:7): [True: 75.6k, False: 69.8k]
  ------------------
 1477|  75.6k|    return lj_alloc_free(msp, ptr);
 1478|  75.6k|  } else if (ptr == NULL) {
  ------------------
  |  Branch (1478:14): [True: 69.6k, False: 157]
  ------------------
 1479|  69.6k|    return lj_alloc_malloc(msp, nsize);
 1480|  69.6k|  } else {
 1481|    157|    return lj_alloc_realloc(msp, ptr, nsize);
 1482|    157|  }
 1483|   145k|}
lj_alloc.c:mmap_probe:
  234|  1.20k|{
  235|       |  /* Hint for next allocation. Doesn't need to be thread-safe. */
  236|  1.20k|  static uintptr_t hint_addr = 0;
  237|  1.20k|  int olderr = errno;
  238|  1.20k|  int retry;
  239|  1.20k|  for (retry = 0; retry < LJ_ALLOC_MMAP_PROBE_MAX; retry++) {
  ------------------
  |  |  228|  1.20k|#define LJ_ALLOC_MMAP_PROBE_MAX		30
  ------------------
  |  Branch (239:19): [True: 1.20k, False: 0]
  ------------------
  240|  1.20k|    void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  214|  1.20k|#define MMAP_PROT		(PROT_READ|PROT_WRITE)
  ------------------
                  void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  225|  1.20k|#define MMAP_FLAGS_PROBE	MMAP_FLAGS
  |  |  ------------------
  |  |  |  |  218|  1.20k|#define MMAP_FLAGS		(MAP_PRIVATE|MAP_ANONYMOUS)
  |  |  ------------------
  ------------------
  241|  1.20k|    uintptr_t addr = (uintptr_t)p;
  242|  1.20k|    if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  102|  1.20k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                  if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  231|  2.40k|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (242:9): [True: 1.20k, False: 0]
  |  Branch (242:42): [True: 1.20k, False: 0]
  ------------------
  243|  1.20k|	((addr + size) >> LJ_ALLOC_MBITS) == 0) {
  ------------------
  |  |  102|  1.20k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (243:2): [True: 1.20k, False: 0]
  ------------------
  244|       |      /* We got a suitable address. Bump the hint address. */
  245|  1.20k|      hint_addr = addr + size;
  246|  1.20k|      errno = olderr;
  247|  1.20k|      return p;
  248|  1.20k|    }
  249|      0|    if (p != MFAIL) {
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  |  Branch (249:9): [True: 0, False: 0]
  ------------------
  250|      0|      munmap(p, size);
  251|      0|    } else if (errno == ENOMEM) {
  ------------------
  |  Branch (251:16): [True: 0, False: 0]
  ------------------
  252|      0|      return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  253|      0|    }
  254|      0|    if (hint_addr) {
  ------------------
  |  Branch (254:9): [True: 0, False: 0]
  ------------------
  255|       |      /* First, try linear probing. */
  256|      0|      if (retry < LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (256:11): [True: 0, False: 0]
  ------------------
  257|      0|	hint_addr += 0x1000000;
  258|      0|	if (((hint_addr + size) >> LJ_ALLOC_MBITS) != 0)
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (258:6): [True: 0, False: 0]
  ------------------
  259|      0|	  hint_addr = 0;
  260|      0|	continue;
  261|      0|      } else if (retry == LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (261:18): [True: 0, False: 0]
  ------------------
  262|       |	/* Next, try a no-hint probe to get back an ASLR address. */
  263|      0|	hint_addr = 0;
  264|      0|	continue;
  265|      0|      }
  266|      0|    }
  267|       |    /* Finally, try pseudo-random probing. */
  268|      0|    do {
  269|      0|      hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                    hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  648|      0|#define LJ_PAGESIZE		4096
  ------------------
  270|      0|    } while (hint_addr < LJ_ALLOC_MMAP_PROBE_LOWER);
  ------------------
  |  |  231|      0|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (270:14): [True: 0, False: 0]
  ------------------
  271|      0|  }
  272|      0|  errno = olderr;
  273|      0|  return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  274|  1.20k|}
lj_alloc.c:init_bins:
  892|  1.20k|{
  893|       |  /* Establish circular links for smallbins */
  894|  1.20k|  bindex_t i;
  895|  39.6k|  for (i = 0; i < NSMALLBINS; i++) {
  ------------------
  |  |  521|  39.6k|#define NSMALLBINS		(32U)
  ------------------
  |  Branch (895:15): [True: 38.4k, False: 1.20k]
  ------------------
  896|  38.4k|    sbinptr bin = smallbin_at(m,i);
  ------------------
  |  |  610|  38.4k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
  897|  38.4k|    bin->fd = bin->bk = bin;
  898|  38.4k|  }
  899|  1.20k|}
lj_alloc.c:init_top:
  876|  1.20k|{
  877|       |  /* Ensure alignment */
  878|  1.20k|  size_t offset = align_offset(chunk2mem(p));
  ------------------
  |  |   66|  1.20k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 1.20k, False: 0]
  |  |  ------------------
  |  |   67|  1.20k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  879|  1.20k|  p = (mchunkptr)((char *)p + offset);
  880|  1.20k|  psize -= offset;
  881|       |
  882|  1.20k|  m->top = p;
  883|  1.20k|  m->topsize = psize;
  884|  1.20k|  p->head = psize | PINUSE_BIT;
  ------------------
  |  |  441|  1.20k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  885|       |  /* set size of fake trailing chunk holding overhead space only once */
  886|  1.20k|  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  457|  1.20k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  600|  1.20k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  1.20k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  1.20k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|  1.20k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  1.20k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  1.20k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|  1.20k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  1.20k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.20k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.20k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  887|  1.20k|  m->trim_check = DEFAULT_TRIM_THRESHOLD; /* reset on each update */
  ------------------
  |  |   42|  1.20k|#define DEFAULT_TRIM_THRESHOLD	((size_t)2U * (size_t)1024U * (size_t)1024U)
  ------------------
  888|  1.20k|}
lj_alloc.c:CALL_MUNMAP:
  348|  1.20k|{
  349|  1.20k|  int olderr = errno;
  350|  1.20k|  int ret = munmap(ptr, size);
  351|  1.20k|  errno = olderr;
  352|  1.20k|  return ret;
  353|  1.20k|}
lj_alloc.c:lj_alloc_free:
 1353|  75.8k|{
 1354|  75.8k|  if (ptr != 0) {
  ------------------
  |  Branch (1354:7): [True: 68.6k, False: 7.18k]
  ------------------
 1355|  68.6k|    mchunkptr p = mem2chunk(ptr);
  ------------------
  |  |  423|  68.6k|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  68.6k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  68.6k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1356|  68.6k|    mstate fm = (mstate)msp;
 1357|  68.6k|    size_t psize = chunksize(p);
  ------------------
  |  |  451|  68.6k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  68.6k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  68.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  68.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  68.6k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  68.6k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1358|  68.6k|    mchunkptr next = chunk_plus_offset(p, psize);
  ------------------
  |  |  457|  68.6k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1359|  68.6k|    if (!pinuse(p)) {
  ------------------
  |  |  450|  68.6k|#define pinuse(p)		((p)->head & PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  68.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  68.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1359:9): [True: 29.3k, False: 39.2k]
  ------------------
 1360|  29.3k|      size_t prevsize = p->prev_foot;
 1361|  29.3k|      if ((prevsize & IS_DIRECT_BIT) != 0) {
  ------------------
  |  |   74|  29.3k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  29.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  |  Branch (1361:11): [True: 0, False: 29.3k]
  ------------------
 1362|      0|	prevsize &= ~IS_DIRECT_BIT;
  ------------------
  |  |   74|      0|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1363|      0|	psize += prevsize + DIRECT_FOOT_PAD;
  ------------------
  |  |  415|      0|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|      0|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1364|      0|	CALL_MUNMAP((char *)p - prevsize, psize);
 1365|      0|	return NULL;
 1366|  29.3k|      } else {
 1367|  29.3k|	mchunkptr prev = chunk_minus_offset(p, prevsize);
  ------------------
  |  |  458|  29.3k|#define chunk_minus_offset(p, s)	((mchunkptr)(((char *)(p)) - (s)))
  ------------------
 1368|  29.3k|	psize += prevsize;
 1369|  29.3k|	p = prev;
 1370|       |	/* consolidate backward */
 1371|  29.3k|	if (p != fm->dv) {
  ------------------
  |  Branch (1371:6): [True: 29.3k, False: 0]
  ------------------
 1372|  29.3k|	  unlink_chunk(fm, p, prevsize);
  ------------------
  |  |  820|  29.3k|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|  29.3k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  29.3k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|  29.3k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 21.4k, False: 7.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  690|  21.4k|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  691|  21.4k|  mchunkptr F = P->fd;\
  |  |  |  |  692|  21.4k|  mchunkptr B = P->bk;\
  |  |  |  |  693|  21.4k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  21.4k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|  21.4k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  694|  21.4k|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (694:7): [True: 9.41k, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  695|  9.41k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  9.41k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  9.41k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  696|  12.0k|  } else {\
  |  |  |  |  697|  12.0k|    F->bk = B;\
  |  |  |  |  698|  12.0k|    B->fd = F;\
  |  |  |  |  699|  12.0k|  }\
  |  |  |  |  700|  21.4k|}
  |  |  ------------------
  |  |  821|  21.4k|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  767|  7.89k|#define unlink_large_chunk(M, X) {\
  |  |  |  |  768|  7.89k|  tchunkptr XP = X->parent;\
  |  |  |  |  769|  7.89k|  tchunkptr R;\
  |  |  |  |  770|  7.89k|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (770:7): [True: 177, False: 7.71k]
  |  |  |  |  ------------------
  |  |  |  |  771|    177|    tchunkptr F = X->fd;\
  |  |  |  |  772|    177|    R = X->bk;\
  |  |  |  |  773|    177|    F->bk = R;\
  |  |  |  |  774|    177|    R->fd = F;\
  |  |  |  |  775|  7.71k|  } else {\
  |  |  |  |  776|  7.71k|    tchunkptr *RP;\
  |  |  |  |  777|  7.71k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (777:9): [True: 502, False: 7.21k]
  |  |  |  |  ------------------
  |  |  |  |  778|  7.71k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (778:2): [True: 386, False: 6.82k]
  |  |  |  |  ------------------
  |  |  |  |  779|    888|      tchunkptr *CP;\
  |  |  |  |  780|    915|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (780:14): [True: 12, False: 903]
  |  |  |  |  ------------------
  |  |  |  |  781|    915|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (781:7): [True: 15, False: 888]
  |  |  |  |  ------------------
  |  |  |  |  782|     27|	R = *(RP = CP);\
  |  |  |  |  783|     27|      }\
  |  |  |  |  784|    888|      *RP = 0;\
  |  |  |  |  785|    888|    }\
  |  |  |  |  786|  7.71k|  }\
  |  |  |  |  787|  7.89k|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:7): [True: 7.81k, False: 74]
  |  |  |  |  ------------------
  |  |  |  |  788|  7.81k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|  7.81k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  789|  7.81k|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (789:9): [True: 6.77k, False: 1.04k]
  |  |  |  |  ------------------
  |  |  |  |  790|  6.77k|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (790:11): [True: 5.82k, False: 945]
  |  |  |  |  ------------------
  |  |  |  |  791|  6.77k|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  652|  5.82k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  5.82k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  792|  6.77k|    } else {\
  |  |  |  |  793|  1.04k|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (793:11): [True: 579, False: 466]
  |  |  |  |  ------------------
  |  |  |  |  794|  1.04k|	XP->child[0] = R;\
  |  |  |  |  795|  1.04k|      else \
  |  |  |  |  796|  1.04k|	XP->child[1] = R;\
  |  |  |  |  797|  1.04k|    }\
  |  |  |  |  798|  7.81k|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:9): [True: 991, False: 6.82k]
  |  |  |  |  ------------------
  |  |  |  |  799|    991|      tchunkptr C0, C1;\
  |  |  |  |  800|    991|      R->parent = XP;\
  |  |  |  |  801|    991|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:11): [True: 55, False: 936]
  |  |  |  |  ------------------
  |  |  |  |  802|     55|	R->child[0] = C0;\
  |  |  |  |  803|     55|	C0->parent = R;\
  |  |  |  |  804|     55|      }\
  |  |  |  |  805|    991|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (805:11): [True: 27, False: 964]
  |  |  |  |  ------------------
  |  |  |  |  806|     27|	R->child[1] = C1;\
  |  |  |  |  807|     27|	C1->parent = R;\
  |  |  |  |  808|     27|      }\
  |  |  |  |  809|    991|    }\
  |  |  |  |  810|  7.81k|  }\
  |  |  |  |  811|  7.89k|}
  |  |  ------------------
  ------------------
 1373|  29.3k|	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1373:13): [True: 0, False: 0]
  ------------------
 1374|      0|	  fm->dvsize = psize;
 1375|      0|	  set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  477|      0|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|      0|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1376|      0|	  return NULL;
 1377|      0|	}
 1378|  29.3k|      }
 1379|  29.3k|    }
 1380|  68.6k|    if (!cinuse(next)) {  /* consolidate forward */
  ------------------
  |  |  449|  68.6k|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|  68.6k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  68.6k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1380:9): [True: 39.2k, False: 29.3k]
  ------------------
 1381|  39.2k|      if (next == fm->top) {
  ------------------
  |  Branch (1381:11): [True: 10.6k, False: 28.6k]
  ------------------
 1382|  10.6k|	size_t tsize = fm->topsize += psize;
 1383|  10.6k|	fm->top = p;
 1384|  10.6k|	p->head = tsize | PINUSE_BIT;
  ------------------
  |  |  441|  10.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  10.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1385|  10.6k|	if (p == fm->dv) {
  ------------------
  |  Branch (1385:6): [True: 0, False: 10.6k]
  ------------------
 1386|      0|	  fm->dv = 0;
 1387|      0|	  fm->dvsize = 0;
 1388|      0|	}
 1389|  10.6k|	if (tsize > fm->trim_check)
  ------------------
  |  Branch (1389:6): [True: 0, False: 10.6k]
  ------------------
 1390|      0|	  alloc_trim(fm, 0);
 1391|  10.6k|	return NULL;
 1392|  28.6k|      } else if (next == fm->dv) {
  ------------------
  |  Branch (1392:18): [True: 0, False: 28.6k]
  ------------------
 1393|      0|	size_t dsize = fm->dvsize += psize;
 1394|      0|	fm->dv = p;
 1395|      0|	set_size_and_pinuse_of_free_chunk(p, dsize);
  ------------------
  |  |  473|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1396|      0|	return NULL;
 1397|  28.6k|      } else {
 1398|  28.6k|	size_t nsize = chunksize(next);
  ------------------
  |  |  451|  28.6k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  28.6k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  28.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  28.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  28.6k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  28.6k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1399|  28.6k|	psize += nsize;
 1400|  28.6k|	unlink_chunk(fm, next, nsize);
  ------------------
  |  |  820|  28.6k|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|  28.6k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  28.6k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|  28.6k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 22.0k, False: 6.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  690|  22.0k|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  691|  22.0k|  mchunkptr F = P->fd;\
  |  |  |  |  692|  22.0k|  mchunkptr B = P->bk;\
  |  |  |  |  693|  22.0k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  22.0k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|  22.0k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  694|  22.0k|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (694:7): [True: 11.4k, False: 10.5k]
  |  |  |  |  ------------------
  |  |  |  |  695|  11.4k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  11.4k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  11.4k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  696|  11.4k|  } else {\
  |  |  |  |  697|  10.5k|    F->bk = B;\
  |  |  |  |  698|  10.5k|    B->fd = F;\
  |  |  |  |  699|  10.5k|  }\
  |  |  |  |  700|  22.0k|}
  |  |  ------------------
  |  |  821|  22.0k|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  767|  6.59k|#define unlink_large_chunk(M, X) {\
  |  |  |  |  768|  6.59k|  tchunkptr XP = X->parent;\
  |  |  |  |  769|  6.59k|  tchunkptr R;\
  |  |  |  |  770|  6.59k|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (770:7): [True: 187, False: 6.40k]
  |  |  |  |  ------------------
  |  |  |  |  771|    187|    tchunkptr F = X->fd;\
  |  |  |  |  772|    187|    R = X->bk;\
  |  |  |  |  773|    187|    F->bk = R;\
  |  |  |  |  774|    187|    R->fd = F;\
  |  |  |  |  775|  6.40k|  } else {\
  |  |  |  |  776|  6.40k|    tchunkptr *RP;\
  |  |  |  |  777|  6.40k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (777:9): [True: 257, False: 6.15k]
  |  |  |  |  ------------------
  |  |  |  |  778|  6.40k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (778:2): [True: 219, False: 5.93k]
  |  |  |  |  ------------------
  |  |  |  |  779|    476|      tchunkptr *CP;\
  |  |  |  |  780|    497|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (780:14): [True: 10, False: 487]
  |  |  |  |  ------------------
  |  |  |  |  781|    497|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (781:7): [True: 11, False: 476]
  |  |  |  |  ------------------
  |  |  |  |  782|     21|	R = *(RP = CP);\
  |  |  |  |  783|     21|      }\
  |  |  |  |  784|    476|      *RP = 0;\
  |  |  |  |  785|    476|    }\
  |  |  |  |  786|  6.40k|  }\
  |  |  |  |  787|  6.59k|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:7): [True: 6.46k, False: 135]
  |  |  |  |  ------------------
  |  |  |  |  788|  6.46k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|  6.46k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  789|  6.46k|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (789:9): [True: 5.78k, False: 674]
  |  |  |  |  ------------------
  |  |  |  |  790|  5.78k|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (790:11): [True: 5.28k, False: 506]
  |  |  |  |  ------------------
  |  |  |  |  791|  5.78k|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  652|  5.28k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  5.28k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  792|  5.78k|    } else {\
  |  |  |  |  793|    674|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (793:11): [True: 345, False: 329]
  |  |  |  |  ------------------
  |  |  |  |  794|    674|	XP->child[0] = R;\
  |  |  |  |  795|    674|      else \
  |  |  |  |  796|    674|	XP->child[1] = R;\
  |  |  |  |  797|    674|    }\
  |  |  |  |  798|  6.46k|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:9): [True: 528, False: 5.93k]
  |  |  |  |  ------------------
  |  |  |  |  799|    528|      tchunkptr C0, C1;\
  |  |  |  |  800|    528|      R->parent = XP;\
  |  |  |  |  801|    528|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:11): [True: 34, False: 494]
  |  |  |  |  ------------------
  |  |  |  |  802|     34|	R->child[0] = C0;\
  |  |  |  |  803|     34|	C0->parent = R;\
  |  |  |  |  804|     34|      }\
  |  |  |  |  805|    528|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (805:11): [True: 15, False: 513]
  |  |  |  |  ------------------
  |  |  |  |  806|     15|	R->child[1] = C1;\
  |  |  |  |  807|     15|	C1->parent = R;\
  |  |  |  |  808|     15|      }\
  |  |  |  |  809|    528|    }\
  |  |  |  |  810|  6.46k|  }\
  |  |  |  |  811|  6.59k|}
  |  |  ------------------
  ------------------
 1401|  28.6k|	set_size_and_pinuse_of_free_chunk(p, psize);
  ------------------
  |  |  473|  28.6k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|  28.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  28.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|  28.6k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1402|  28.6k|	if (p == fm->dv) {
  ------------------
  |  Branch (1402:6): [True: 0, False: 28.6k]
  ------------------
 1403|      0|	  fm->dvsize = psize;
 1404|      0|	  return NULL;
 1405|      0|	}
 1406|  28.6k|      }
 1407|  39.2k|    } else {
 1408|  29.3k|      set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  477|  29.3k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|  29.3k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  29.3k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  29.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|  29.3k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  29.3k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  29.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|  29.3k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1409|  29.3k|    }
 1410|       |
 1411|  57.9k|    if (is_small(psize)) {
  ------------------
  |  |  604|  57.9k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  523|  57.9k|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  521|  57.9k|#define NSMALLBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (604:22): [True: 43.5k, False: 14.4k]
  |  |  ------------------
  ------------------
 1412|  43.5k|      insert_small_chunk(fm, p, psize);
  ------------------
  |  |  675|  43.5k|#define insert_small_chunk(M, P, S) {\
  |  |  676|  43.5k|  bindex_t I = small_index(S);\
  |  |  ------------------
  |  |  |  |  605|  43.5k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  43.5k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  677|  43.5k|  mchunkptr B = smallbin_at(M, I);\
  |  |  ------------------
  |  |  |  |  610|  43.5k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  ------------------
  |  |  678|  43.5k|  mchunkptr F = B;\
  |  |  679|  43.5k|  if (!smallmap_is_marked(M, I))\
  |  |  ------------------
  |  |  |  |  649|  43.5k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  43.5k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (679:7): [True: 20.8k, False: 22.6k]
  |  |  ------------------
  |  |  680|  43.5k|    mark_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  647|  20.8k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  20.8k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  681|  43.5k|  else\
  |  |  682|  43.5k|    F = B->fd;\
  |  |  683|  43.5k|  B->fd = P;\
  |  |  684|  43.5k|  F->bk = P;\
  |  |  685|  43.5k|  P->fd = F;\
  |  |  686|  43.5k|  P->bk = B;\
  |  |  687|  43.5k|}
  ------------------
 1413|  43.5k|    } else {
 1414|  14.4k|      tchunkptr tp = (tchunkptr)p;
 1415|  14.4k|      insert_large_chunk(fm, tp, psize);
  ------------------
  |  |  728|  14.4k|#define insert_large_chunk(M, X, S) {\
  |  |  729|  14.4k|  tbinptr *H;\
  |  |  730|  14.4k|  bindex_t I;\
  |  |  731|  14.4k|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  614|  14.4k|#define compute_tree_index(S, I)\
  |  |  |  |  615|  14.4k|{\
  |  |  |  |  616|  14.4k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|  14.4k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  617|  14.4k|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (617:7): [True: 0, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  619|  14.4k|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (619:14): [True: 0, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  621|  14.4k|  } else {\
  |  |  |  |  622|  14.4k|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  14.4k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  623|  14.4k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|  14.4k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  624|  14.4k|  }\
  |  |  |  |  625|  14.4k|}
  |  |  ------------------
  |  |  732|  14.4k|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  611|  14.4k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  733|  14.4k|  X->index = I;\
  |  |  734|  14.4k|  X->child[0] = X->child[1] = 0;\
  |  |  735|  14.4k|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  653|  14.4k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  14.4k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (735:7): [True: 11.1k, False: 3.37k]
  |  |  ------------------
  |  |  736|  11.1k|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  651|  11.1k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  11.1k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  737|  11.1k|    *H = X;\
  |  |  738|  11.1k|    X->parent = (tchunkptr)H;\
  |  |  739|  11.1k|    X->fd = X->bk = X;\
  |  |  740|  11.1k|  } else {\
  |  |  741|  3.37k|    tchunkptr T = *H;\
  |  |  742|  3.37k|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  633|  3.37k|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|  3.37k|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (633:5): [True: 0, False: 3.37k]
  |  |  |  |  ------------------
  |  |  |  |  634|  3.37k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|  3.37k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.37k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|  3.37k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  743|  3.57k|    for (;;) {\
  |  |  744|  3.57k|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  451|  3.57k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  443|  3.57k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  441|  3.57k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|  3.57k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  442|  3.57k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|  3.57k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (744:11): [True: 3.20k, False: 364]
  |  |  ------------------
  |  |  745|  3.20k|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|  3.20k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|  3.20k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  746|  3.20k|	K <<= 1;\
  |  |  747|  3.20k|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (747:6): [True: 194, False: 3.01k]
  |  |  ------------------
  |  |  748|    194|	  T = *C;\
  |  |  749|  3.01k|	} else {\
  |  |  750|  3.01k|	  *C = X;\
  |  |  751|  3.01k|	  X->parent = T;\
  |  |  752|  3.01k|	  X->fd = X->bk = X;\
  |  |  753|  3.01k|	  break;\
  |  |  754|  3.01k|	}\
  |  |  755|  3.20k|      } else {\
  |  |  756|    364|	tchunkptr F = T->fd;\
  |  |  757|    364|	T->fd = F->bk = X;\
  |  |  758|    364|	X->fd = F;\
  |  |  759|    364|	X->bk = T;\
  |  |  760|    364|	X->parent = 0;\
  |  |  761|    364|	break;\
  |  |  762|    364|      }\
  |  |  763|  3.57k|    }\
  |  |  764|  3.37k|  }\
  |  |  765|  14.4k|}
  ------------------
 1416|  14.4k|      if (--fm->release_checks == 0)
  ------------------
  |  Branch (1416:11): [True: 0, False: 14.4k]
  ------------------
 1417|      0|	release_unused_segments(fm);
 1418|  14.4k|    }
 1419|  57.9k|  }
 1420|  65.1k|  return NULL;
 1421|  75.8k|}
lj_alloc.c:lj_alloc_malloc:
 1270|  69.8k|{
 1271|  69.8k|  mstate ms = (mstate)msp;
 1272|  69.8k|  void *mem;
 1273|  69.8k|  size_t nb;
 1274|  69.8k|  if (nsize <= MAX_SMALL_REQUEST) {
  ------------------
  |  |  528|  69.8k|#define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  527|  69.8k|#define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  526|  69.8k|#define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  69.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|  69.8k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  69.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |   62|  69.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  69.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  69.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  410|  69.8k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  69.8k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1274:7): [True: 64.2k, False: 5.64k]
  ------------------
 1275|  64.2k|    bindex_t idx;
 1276|  64.2k|    binmap_t smallbits;
 1277|  64.2k|    nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  429|  64.2k|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  419|  64.2k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  64.2k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  64.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  64.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  64.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  64.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  64.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  64.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  410|  64.2k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  64.2k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  64.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  419|      8|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|      8|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      8|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      8|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      8|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      8|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      8|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      8|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  433|   128k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|  64.1k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  64.1k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  64.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  64.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  64.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  64.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  64.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  64.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1277:10): [True: 8, False: 64.1k]
  ------------------
 1278|  64.2k|    idx = small_index(nb);
  ------------------
  |  |  605|  64.2k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  523|  64.2k|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1279|  64.2k|    smallbits = ms->smallmap >> idx;
 1280|       |
 1281|  64.2k|    if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
  ------------------
  |  Branch (1281:9): [True: 0, False: 64.2k]
  ------------------
 1282|      0|      mchunkptr b, p;
 1283|      0|      idx += ~smallbits & 1;       /* Uses next bin if idx empty */
 1284|      0|      b = smallbin_at(ms, idx);
  ------------------
  |  |  610|      0|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1285|      0|      p = b->fd;
 1286|      0|      unlink_first_small_chunk(ms, b, p, idx);
  ------------------
  |  |  703|      0|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  704|      0|  mchunkptr F = P->fd;\
  |  |  705|      0|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (705:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  706|      0|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  648|      0|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  707|      0|  } else {\
  |  |  708|      0|    B->fd = F;\
  |  |  709|      0|    F->bk = B;\
  |  |  710|      0|  }\
  |  |  711|      0|}
  ------------------
 1287|      0|      set_inuse_and_pinuse(ms, p, small_index2size(idx));
  ------------------
  |  |  665|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1288|      0|      mem = chunk2mem(p);
  ------------------
  |  |  422|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1289|      0|      return mem;
 1290|  64.2k|    } else if (nb > ms->dvsize) {
  ------------------
  |  Branch (1290:16): [True: 64.2k, False: 0]
  ------------------
 1291|  64.2k|      if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
  ------------------
  |  Branch (1291:11): [True: 0, False: 64.2k]
  ------------------
 1292|      0|	mchunkptr b, p, r;
 1293|      0|	size_t rsize;
 1294|      0|	binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
  ------------------
  |  |  656|      0|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1295|      0|	bindex_t i = lj_ffs(leftbits);
  ------------------
  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1296|      0|	b = smallbin_at(ms, i);
  ------------------
  |  |  610|      0|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1297|      0|	p = b->fd;
 1298|      0|	unlink_first_small_chunk(ms, b, p, i);
  ------------------
  |  |  703|      0|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  704|      0|  mchunkptr F = P->fd;\
  |  |  705|      0|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (705:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  706|      0|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  648|      0|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  707|      0|  } else {\
  |  |  708|      0|    B->fd = F;\
  |  |  709|      0|    F->bk = B;\
  |  |  710|      0|  }\
  |  |  711|      0|}
  ------------------
 1299|      0|	rsize = small_index2size(i) - nb;
  ------------------
  |  |  606|      0|#define small_index2size(i)	((i)  << SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  523|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1300|       |	/* Fit here cannot be remainderless if 4byte sizes */
 1301|      0|	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  ------------------
              	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1301:6): [Folded - Ignored]
  |  Branch (1301:26): [True: 0, False: 0]
  ------------------
 1302|      0|	  set_inuse_and_pinuse(ms, p, small_index2size(i));
  ------------------
  |  |  665|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1303|      0|	} else {
 1304|      0|	  set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1305|      0|	  r = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1306|      0|	  set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1307|      0|	  replace_dv(ms, r, rsize);
  ------------------
  |  |  715|      0|#define replace_dv(M, P, S) {\
  |  |  716|      0|  size_t DVS = M->dvsize;\
  |  |  717|      0|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (717:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  718|      0|    mchunkptr DV = M->dv;\
  |  |  719|      0|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  675|      0|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|      0|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|      0|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|      0|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|      0|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|      0|  mchunkptr F = B;\
  |  |  |  |  679|      0|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|      0|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  680|      0|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|      0|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|      0|  else\
  |  |  |  |  682|      0|    F = B->fd;\
  |  |  |  |  683|      0|  B->fd = P;\
  |  |  |  |  684|      0|  F->bk = P;\
  |  |  |  |  685|      0|  P->fd = F;\
  |  |  |  |  686|      0|  P->bk = B;\
  |  |  |  |  687|      0|}
  |  |  ------------------
  |  |  720|      0|  }\
  |  |  721|      0|  M->dvsize = S;\
  |  |  722|      0|  M->dv = P;\
  |  |  723|      0|}
  ------------------
 1308|      0|	}
 1309|      0|	mem = chunk2mem(p);
  ------------------
  |  |  422|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1310|      0|	return mem;
 1311|  64.2k|      } else if (ms->treemap != 0 && (mem = tmalloc_small(ms, nb)) != 0) {
  ------------------
  |  Branch (1311:18): [True: 0, False: 64.2k]
  |  Branch (1311:38): [True: 0, False: 0]
  ------------------
 1312|      0|	return mem;
 1313|      0|      }
 1314|  64.2k|    }
 1315|  64.2k|  } else if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  428|  5.64k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  419|  5.64k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  5.64k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  5.64k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  5.64k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.64k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  5.64k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  5.64k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.64k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1315:14): [True: 0, False: 5.64k]
  ------------------
 1316|      0|    nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
  ------------------
  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  ------------------
 1317|  5.64k|  } else {
 1318|  5.64k|    nb = pad_request(nsize);
  ------------------
  |  |  433|  5.64k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|  5.64k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  5.64k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  5.64k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.64k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.64k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  5.64k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.64k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.64k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1319|  5.64k|    if (ms->treemap != 0 && (mem = tmalloc_large(ms, nb)) != 0) {
  ------------------
  |  Branch (1319:9): [True: 0, False: 5.64k]
  |  Branch (1319:29): [True: 0, False: 0]
  ------------------
 1320|      0|      return mem;
 1321|      0|    }
 1322|  5.64k|  }
 1323|       |
 1324|  69.8k|  if (nb <= ms->dvsize) {
  ------------------
  |  Branch (1324:7): [True: 0, False: 69.8k]
  ------------------
 1325|      0|    size_t rsize = ms->dvsize - nb;
 1326|      0|    mchunkptr p = ms->dv;
 1327|      0|    if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
  ------------------
  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1327:9): [True: 0, False: 0]
  ------------------
 1328|      0|      mchunkptr r = ms->dv = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1329|      0|      ms->dvsize = rsize;
 1330|      0|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1331|      0|      set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1332|      0|    } else { /* exhaust dv */
 1333|      0|      size_t dvs = ms->dvsize;
 1334|      0|      ms->dvsize = 0;
 1335|      0|      ms->dv = 0;
 1336|      0|      set_inuse_and_pinuse(ms, p, dvs);
  ------------------
  |  |  665|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1337|      0|    }
 1338|      0|    mem = chunk2mem(p);
  ------------------
  |  |  422|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1339|      0|    return mem;
 1340|  69.8k|  } else if (nb < ms->topsize) { /* Split top */
  ------------------
  |  Branch (1340:14): [True: 69.8k, False: 0]
  ------------------
 1341|  69.8k|    size_t rsize = ms->topsize -= nb;
 1342|  69.8k|    mchunkptr p = ms->top;
 1343|  69.8k|    mchunkptr r = ms->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|  69.8k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1344|  69.8k|    r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  441|  69.8k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  69.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1345|  69.8k|    set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|  69.8k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  69.8k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  69.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  69.8k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  69.8k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1346|  69.8k|    mem = chunk2mem(p);
  ------------------
  |  |  422|  69.8k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  69.8k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  69.8k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1347|  69.8k|    return mem;
 1348|  69.8k|  }
 1349|      0|  return alloc_sys(ms, nb);
 1350|  69.8k|}
lj_alloc.c:lj_alloc_realloc:
 1424|    157|{
 1425|    157|  if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  428|    157|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  419|    157|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|    157|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    157|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    157|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    157|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    157|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    157|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    157|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1425:7): [True: 0, False: 157]
  ------------------
 1426|      0|    return NULL;
 1427|    157|  } else {
 1428|    157|    mstate m = (mstate)msp;
 1429|    157|    mchunkptr oldp = mem2chunk(ptr);
  ------------------
  |  |  423|    157|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|    157|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|    157|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1430|    157|    size_t oldsize = chunksize(oldp);
  ------------------
  |  |  451|    157|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|    157|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|    157|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    157|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|    157|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|    157|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1431|    157|    mchunkptr next = chunk_plus_offset(oldp, oldsize);
  ------------------
  |  |  457|    157|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1432|    157|    mchunkptr newp = 0;
 1433|    157|    size_t nb = request2size(nsize);
  ------------------
  |  |  437|    157|  (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  429|    157|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  419|    157|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  408|    157|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    157|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|    157|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|    157|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    157|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|    157|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|    157|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|    157|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|    157|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    157|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  433|    157|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|    157|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|    157|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    157|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    157|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    157|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    157|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    157|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    157|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (437:4): [True: 0, False: 157]
  |  |  ------------------
  ------------------
 1434|       |
 1435|       |    /* Try to either shrink or extend into top. Else malloc-copy-free */
 1436|    157|    if (is_direct(oldp)) {
  ------------------
  |  |  480|    157|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |  441|    157|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    157|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |   74|      0|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (480:4): [True: 0, False: 157]
  |  |  |  Branch (480:33): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1437|      0|      newp = direct_resize(oldp, nb);  /* this may return NULL. */
 1438|    157|    } else if (oldsize >= nb) { /* already big enough */
  ------------------
  |  Branch (1438:16): [True: 0, False: 157]
  ------------------
 1439|      0|      size_t rsize = oldsize - nb;
 1440|      0|      newp = oldp;
 1441|      0|      if (rsize >= MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1441:11): [True: 0, False: 0]
  ------------------
 1442|      0|	mchunkptr rem = chunk_plus_offset(newp, nb);
  ------------------
  |  |  457|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1443|      0|	set_inuse(m, newp, nb);
  ------------------
  |  |  660|      0|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1444|      0|	set_inuse(m, rem, rsize);
  ------------------
  |  |  660|      0|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1445|      0|	lj_alloc_free(m, chunk2mem(rem));
  ------------------
  |  |  422|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1446|      0|      }
 1447|    157|    } else if (next == m->top && oldsize + m->topsize > nb) {
  ------------------
  |  Branch (1447:16): [True: 0, False: 157]
  |  Branch (1447:34): [True: 0, False: 0]
  ------------------
 1448|       |      /* Expand into top */
 1449|      0|      size_t newsize = oldsize + m->topsize;
 1450|      0|      size_t newtopsize = newsize - nb;
 1451|      0|      mchunkptr newtop = chunk_plus_offset(oldp, nb);
  ------------------
  |  |  457|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1452|      0|      set_inuse(m, oldp, nb);
  ------------------
  |  |  660|      0|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1453|      0|      newtop->head = newtopsize |PINUSE_BIT;
  ------------------
  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1454|      0|      m->top = newtop;
 1455|      0|      m->topsize = newtopsize;
 1456|      0|      newp = oldp;
 1457|      0|    }
 1458|       |
 1459|    157|    if (newp != 0) {
  ------------------
  |  Branch (1459:9): [True: 0, False: 157]
  ------------------
 1460|      0|      return chunk2mem(newp);
  ------------------
  |  |  422|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1461|    157|    } else {
 1462|    157|      void *newmem = lj_alloc_malloc(m, nsize);
 1463|    157|      if (newmem != 0) {
  ------------------
  |  Branch (1463:11): [True: 157, False: 0]
  ------------------
 1464|    157|	size_t oc = oldsize - overhead_for(oldp);
  ------------------
  |  |  484|    157| (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  480|    157|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|    157|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    157|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|      0|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (480:4): [True: 0, False: 157]
  |  |  |  |  |  Branch (480:33): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  413|      0|#define DIRECT_CHUNK_OVERHEAD	(TWO_SIZE_T_SIZES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  410|    157|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|    157|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1465|    157|	memcpy(newmem, ptr, oc < nsize ? oc : nsize);
  ------------------
  |  Branch (1465:22): [True: 157, False: 0]
  ------------------
 1466|    157|	lj_alloc_free(m, ptr);
 1467|    157|      }
 1468|    157|      return newmem;
 1469|    157|    }
 1470|    157|  }
 1471|    157|}

lua_status:
   98|      2|{
   99|      2|  return L->status;
  100|      2|}
lua_checkstack:
  103|    310|{
  104|    310|  if (size > LUAI_MAXCSTACK || (L->top - L->base + size) > LUAI_MAXCSTACK) {
  ------------------
  |  |   90|    620|#define LUAI_MAXCSTACK	8000	/* Max. # of stack slots for a C func (<10K). */
  ------------------
                if (size > LUAI_MAXCSTACK || (L->top - L->base + size) > LUAI_MAXCSTACK) {
  ------------------
  |  |   90|    310|#define LUAI_MAXCSTACK	8000	/* Max. # of stack slots for a C func (<10K). */
  ------------------
  |  Branch (104:7): [True: 0, False: 310]
  |  Branch (104:32): [True: 0, False: 310]
  ------------------
  105|      0|    return 0;  /* Stack overflow. */
  106|    310|  } else if (size > 0) {
  ------------------
  |  Branch (106:14): [True: 167, False: 143]
  ------------------
  107|    167|    int avail = (int)(mref(L->maxstack, TValue) - L->top);
  ------------------
  |  |   36|    167|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  108|    167|    if (size > avail &&
  ------------------
  |  Branch (108:9): [True: 157, False: 10]
  ------------------
  109|    167|	lj_state_cpgrowstack(L, (MSize)(size - avail)) != LUA_OK) {
  ------------------
  |  |   43|    157|#define LUA_OK		0
  ------------------
  |  Branch (109:2): [True: 0, False: 157]
  ------------------
  110|      0|      L->top--;
  111|      0|      return 0;  /* Out of memory. */
  112|      0|    }
  113|    167|  }
  114|    310|  return 1;
  115|    310|}
lua_gettop:
  146|  10.8k|{
  147|  10.8k|  return (int)(L->top - L->base);
  148|  10.8k|}
lua_settop:
  151|  2.46k|{
  152|  2.46k|  if (idx >= 0) {
  ------------------
  |  Branch (152:7): [True: 1.20k, False: 1.26k]
  ------------------
  153|  1.20k|    lj_checkapi(idx <= tvref(L->maxstack) - L->base, "bad stack slot %d", idx);
  ------------------
  |  |  357|  1.20k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.20k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.20k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  154|  1.20k|    if (L->base + idx > L->top) {
  ------------------
  |  Branch (154:9): [True: 0, False: 1.20k]
  ------------------
  155|      0|      if (L->base + idx >= tvref(L->maxstack))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (155:11): [True: 0, False: 0]
  ------------------
  156|      0|	lj_state_growstack(L, (MSize)idx - (MSize)(L->top - L->base));
  157|      0|      do { setnilV(L->top++); } while (L->top < L->base + idx);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  |  Branch (157:40): [True: 0, False: 0]
  ------------------
  158|  1.20k|    } else {
  159|  1.20k|      L->top = L->base + idx;
  160|  1.20k|    }
  161|  1.26k|  } else {
  162|  1.26k|    lj_checkapi(-(idx+1) <= (L->top - L->base), "bad stack slot %d", idx);
  ------------------
  |  |  357|  1.26k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.26k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.26k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.26k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  163|      0|    L->top += idx+1;  /* Shrinks top (idx < 0). */
  164|  1.26k|  }
  165|  2.46k|}
lua_remove:
  168|  1.20k|{
  169|  1.20k|  TValue *p = index2adr_stack(L, idx);
  170|  2.41k|  while (++p < L->top) copyTV(L, p-1, p);
  ------------------
  |  Branch (170:10): [True: 1.20k, False: 1.20k]
  ------------------
  171|  1.20k|  L->top--;
  172|  1.20k|}
lua_insert:
  175|      8|{
  176|      8|  TValue *q, *p = index2adr_stack(L, idx);
  177|     21|  for (q = L->top; q > p; q--) copyTV(L, q, q-1);
  ------------------
  |  Branch (177:20): [True: 13, False: 8]
  ------------------
  178|      8|  copyTV(L, p, L->top);
  179|      8|}
lua_replace:
  203|      6|{
  204|      6|  lj_checkapi_slot(1);
  ------------------
  |  |   32|      6|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|      6|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      6|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      6|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  205|      0|  copy_slot(L, L->top - 1, idx);
  206|      6|  L->top--;
  207|      6|}
lua_pushvalue:
  215|  2.40k|{
  216|  2.40k|  copyTV(L, L->top, index2adr(L, idx));
  217|  2.40k|  incr_top(L);
  ------------------
  |  |   12|  2.40k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  4.81k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  2.40k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 2.40k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  218|  2.40k|}
lua_type:
  223|  1.36k|{
  224|  1.36k|  cTValue *o = index2adr(L, idx);
  225|  1.36k|  if (tvisnumber(o)) {
  ------------------
  |  |  799|  1.36k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|  1.36k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.36k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.36k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 32, False: 1.33k]
  |  |  ------------------
  ------------------
  226|     32|    return LUA_TNUMBER;
  ------------------
  |  |   78|     32|#define LUA_TNUMBER		3
  ------------------
  227|       |#if LJ_64 && !LJ_GC64
  228|       |  } else if (tvislightud(o)) {
  229|       |    return LUA_TLIGHTUSERDATA;
  230|       |#endif
  231|  1.33k|  } else if (o == niltv(L)) {
  ------------------
  |  |  664|  1.33k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  1.33k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.33k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.33k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.33k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.33k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (231:14): [True: 0, False: 1.33k]
  ------------------
  232|      0|    return LUA_TNONE;
  ------------------
  |  |   73|      0|#define LUA_TNONE		(-1)
  ------------------
  233|  1.33k|  } else {  /* Magic internal/external tag conversion. ORDER LJ_T */
  234|  1.33k|    uint32_t t = ~itype(o);
  ------------------
  |  |  778|  1.33k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  235|  1.33k|#if LJ_64
  236|  1.33k|    int tt = (int)((U64x(75a06,98042110) >> 4*t) & 15u);
  ------------------
  |  |   94|  1.33k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  237|       |#else
  238|       |    int tt = (int)(((t < 8 ? 0x98042110u : 0x75a06u) >> 4*(t&7)) & 15u);
  239|       |#endif
  240|  1.33k|    lj_assertL(tt != LUA_TNIL || tvisnil(o), "bad tag conversion");
  ------------------
  |  |  365|  1.33k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.55k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 119, False: 1.21k]
  |  |  |  |  |  Branch (355:5): [True: 1.21k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.33k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  241|      0|    return tt;
  242|  1.33k|  }
  243|  1.36k|}
lua_typename:
  258|      7|{
  259|      7|  UNUSED(L);
  ------------------
  |  |   91|      7|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  260|      7|  return lj_obj_typename[t+1];
  261|      7|}
lua_iscfunction:
  264|      4|{
  265|      4|  cTValue *o = index2adr(L, idx);
  266|      4|  return tvisfunc(o) && !isluafunc(funcV(o));
  ------------------
  |  |  793|      8|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  778|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      4|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (793:21): [True: 0, False: 4]
  |  |  ------------------
  ------------------
                return tvisfunc(o) && !isluafunc(funcV(o));
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (266:25): [True: 0, False: 0]
  ------------------
  267|      4|}
lua_isnumber:
  270|      7|{
  271|      7|  cTValue *o = index2adr(L, idx);
  272|      7|  TValue tmp;
  273|      7|  return (tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), &tmp)));
  ------------------
  |  |  799|     14|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      7|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      7|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      7|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 2, False: 5]
  |  |  ------------------
  ------------------
                return (tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), &tmp)));
  ------------------
  |  |  792|     10|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      5|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      5|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 1, False: 4]
  |  |  ------------------
  ------------------
                return (tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), &tmp)));
  ------------------
  |  |   31|      2|#define lj_strscan_number(s, o)		lj_strscan_num((s), (o))
  |  |  ------------------
  |  |  |  Branch (31:34): [True: 0, False: 1]
  |  |  |  Branch (31:50): [True: 1, False: 0]
  |  |  ------------------
  ------------------
  274|      7|}
lua_isstring:
  277|      8|{
  278|      8|  cTValue *o = index2adr(L, idx);
  279|      8|  return (tvisstr(o) || tvisnumber(o));
  ------------------
  |  |  792|     16|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      8|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      8|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 3, False: 5]
  |  |  ------------------
  ------------------
                return (tvisstr(o) || tvisnumber(o));
  ------------------
  |  |  799|      5|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      5|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      5|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      5|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 5]
  |  |  ------------------
  ------------------
  280|      8|}
lua_isuserdata:
  283|      4|{
  284|      4|  cTValue *o = index2adr(L, idx);
  285|      4|  return (tvisudata(o) || tvislightud(o));
  ------------------
  |  |  798|      8|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  778|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|      4|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 0, False: 4]
  |  |  ------------------
  ------------------
                return (tvisudata(o) || tvislightud(o));
  ------------------
  |  |  790|      4|#define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  778|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  263|      4|#define LJ_TLIGHTUD		(~3u)
  |  |  ------------------
  |  |  |  Branch (790:24): [True: 0, False: 4]
  |  |  ------------------
  ------------------
  286|      4|}
lua_rawequal:
  289|      7|{
  290|      7|  cTValue *o1 = index2adr(L, idx1);
  291|      7|  cTValue *o2 = index2adr(L, idx2);
  292|      7|  return (o1 == niltv(L) || o2 == niltv(L)) ? 0 : lj_obj_equal(o1, o2);
  ------------------
  |  |  664|      7|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|     14|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      7|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      7|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 7, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      7|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                return (o1 == niltv(L) || o2 == niltv(L)) ? 0 : lj_obj_equal(o1, o2);
  ------------------
  |  |  664|      7|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      7|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      7|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      7|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 7, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      7|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (292:11): [True: 0, False: 7]
  |  Branch (292:29): [True: 0, False: 7]
  ------------------
  293|      7|}
lua_tonumber:
  352|     10|{
  353|     10|  cTValue *o = index2adr(L, idx);
  354|     10|  TValue tmp;
  355|     10|  if (LJ_LIKELY(tvisnumber(o)))
  ------------------
  |  |  145|     10|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1, False: 9]
  |  |  ------------------
  ------------------
  356|      1|    return numberVnum(o);
  357|      9|  else if (tvisstr(o) && lj_strscan_num(strV(o), &tmp))
  ------------------
  |  |  792|     18|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      9|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      9|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 5, False: 4]
  |  |  ------------------
  ------------------
                else if (tvisstr(o) && lj_strscan_num(strV(o), &tmp))
  ------------------
  |  |  856|      5|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      5|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      5|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      5|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      5|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (357:26): [True: 1, False: 4]
  ------------------
  358|      1|    return numV(&tmp);
  ------------------
  |  |  863|      1|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      1|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      1|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      1|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  359|      8|  else
  360|      8|    return 0;
  361|     10|}
lua_tointeger:
  404|      6|{
  405|      6|  cTValue *o = index2adr(L, idx);
  406|      6|  TValue tmp;
  407|      6|  lua_Number n;
  408|      6|  if (LJ_LIKELY(tvisint(o))) {
  ------------------
  |  |  145|      6|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [Folded - Ignored]
  |  |  |  Branch (145:42): [Folded - Ignored]
  |  |  |  Branch (145:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  409|      0|    return intV(o);
  ------------------
  |  |  864|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  410|      6|  } else if (LJ_LIKELY(tvisnum(o))) {
  ------------------
  |  |  145|      6|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1, False: 5]
  |  |  ------------------
  ------------------
  411|      1|    n = numV(o);
  ------------------
  |  |  863|      1|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      1|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      1|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      1|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  412|      5|  } else {
  413|      5|    if (!(tvisstr(o) && lj_strscan_number(strV(o), &tmp)))
  ------------------
  |  |  792|     10|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      5|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      5|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 3, False: 2]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(o) && lj_strscan_number(strV(o), &tmp)))
  ------------------
  |  |   31|      6|#define lj_strscan_number(s, o)		lj_strscan_num((s), (o))
  |  |  ------------------
  |  |  |  Branch (31:34): [True: 1, False: 2]
  |  |  |  Branch (31:50): [True: 3, False: 0]
  |  |  ------------------
  ------------------
  414|      4|      return 0;
  415|      1|    if (tvisint(&tmp))
  ------------------
  |  |  800|      1|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      2|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  416|      0|      return intV(&tmp);
  ------------------
  |  |  864|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  417|      1|    n = numV(&tmp);
  ------------------
  |  |  863|      1|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      1|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      1|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      1|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  418|      1|  }
  419|      2|#if LJ_64
  420|      2|  return (lua_Integer)n;
  421|       |#else
  422|       |  return lj_num2int(n);
  423|       |#endif
  424|      6|}
lua_toboolean:
  504|      4|{
  505|      4|  cTValue *o = index2adr(L, idx);
  506|      4|  return tvistruecond(o);
  ------------------
  |  |  803|      4|#define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  778|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  282|      4|#define LJ_TISTRUECOND		LJ_TFALSE
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      4|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  507|      4|}
lua_tolstring:
  510|     16|{
  511|     16|  TValue *o = index2adr(L, idx);
  512|     16|  GCstr *s;
  513|     16|  if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|     16|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 2, False: 14]
  |  |  ------------------
  ------------------
  514|      2|    s = strV(o);
  ------------------
  |  |  856|      2|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      2|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      2|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  515|     14|  } else if (tvisnumber(o)) {
  ------------------
  |  |  799|     14|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|     14|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|     14|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     14|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 5, False: 9]
  |  |  ------------------
  ------------------
  516|      5|    lj_gc_check(L);
  ------------------
  |  |   66|      5|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      5|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 2, False: 3]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      5|      lj_gc_step(L); }
  ------------------
  517|      5|    o = index2adr(L, idx);  /* GC may move the stack. */
  518|      5|    s = lj_strfmt_number(L, o);
  519|      5|    setstrV(L, o, s);
  520|      9|  } else {
  521|      9|    if (len != NULL) *len = 0;
  ------------------
  |  Branch (521:9): [True: 0, False: 9]
  ------------------
  522|      9|    return NULL;
  523|      9|  }
  524|      7|  if (len != NULL) *len = s->len;
  ------------------
  |  Branch (524:7): [True: 0, False: 7]
  ------------------
  525|      7|  return strdata(s);
  ------------------
  |  |  316|      7|#define strdata(s)	((const char *)((s)+1))
  ------------------
  526|     16|}
lua_objlen:
  582|      7|{
  583|      7|  TValue *o = index2adr(L, idx);
  584|      7|  if (tvisstr(o)) {
  ------------------
  |  |  792|      7|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      7|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      7|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 3, False: 4]
  |  |  ------------------
  ------------------
  585|      3|    return strV(o)->len;
  ------------------
  |  |  856|      3|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      3|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      3|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  586|      4|  } else if (tvistab(o)) {
  ------------------
  |  |  797|      4|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  778|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|      4|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (797:20): [True: 1, False: 3]
  |  |  ------------------
  ------------------
  587|      1|    return (size_t)lj_tab_len(tabV(o));
  ------------------
  |  |  861|      1|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      1|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      1|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      1|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  588|      3|  } else if (tvisudata(o)) {
  ------------------
  |  |  798|      3|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  778|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|      3|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 0, False: 3]
  |  |  ------------------
  ------------------
  589|      0|    return udataV(o)->len;
  ------------------
  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  590|      3|  } else if (tvisnumber(o)) {
  ------------------
  |  |  799|      3|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      3|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      3|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 1, False: 2]
  |  |  ------------------
  ------------------
  591|      1|    GCstr *s = lj_strfmt_number(L, o);
  592|      1|    setstrV(L, o, s);
  593|      1|    return s->len;
  594|      2|  } else {
  595|      2|    return 0;
  596|      2|  }
  597|      7|}
lua_tocfunction:
  600|      6|{
  601|      6|  cTValue *o = index2adr(L, idx);
  602|      6|  if (tvisfunc(o)) {
  ------------------
  |  |  793|      6|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  778|      6|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      6|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (793:21): [True: 0, False: 6]
  |  |  ------------------
  ------------------
  603|      0|    BCOp op = bc_op(*mref(funcV(o)->c.pc, BCIns));
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  |  |  ------------------
  |  |  |  Branch (34:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  604|      0|    if (op == BC_FUNCC || op == BC_FUNCCW)
  ------------------
  |  Branch (604:9): [True: 0, False: 0]
  |  Branch (604:27): [True: 0, False: 0]
  ------------------
  605|      0|      return funcV(o)->c.f;
  ------------------
  |  |  857|      0|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  606|      0|  }
  607|      6|  return NULL;
  608|      6|}
lua_touserdata:
  611|      9|{
  612|      9|  cTValue *o = index2adr(L, idx);
  613|      9|  if (tvisudata(o))
  ------------------
  |  |  798|      9|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  778|      9|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|      9|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 0, False: 9]
  |  |  ------------------
  ------------------
  614|      0|    return uddata(udataV(o));
  ------------------
  |  |  342|      0|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  615|      9|  else if (tvislightud(o))
  ------------------
  |  |  790|      9|#define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  778|      9|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  263|      9|#define LJ_TLIGHTUD		(~3u)
  |  |  ------------------
  |  |  |  Branch (790:24): [True: 0, False: 9]
  |  |  ------------------
  ------------------
  616|      0|    return lightudV(G(L), o);
  ------------------
  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  617|      9|  else
  618|      9|    return NULL;
  619|      9|}
lua_tothread:
  622|      3|{
  623|      3|  cTValue *o = index2adr(L, idx);
  624|      3|  return (!tvisthread(o)) ? NULL : threadV(o);
  ------------------
  |  |  794|      3|#define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  778|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  266|      3|#define LJ_TTHREAD		(~6u)
  |  |  ------------------
  ------------------
                return (!tvisthread(o)) ? NULL : threadV(o);
  ------------------
  |  |  858|      2|#define threadV(o)	check_exp(tvisthread(o), &gcval(o)->th)
  |  |  ------------------
  |  |  |  |  367|      2|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      2|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (624:10): [True: 1, False: 2]
  ------------------
  625|      3|}
lua_pushnil:
  635|    266|{
  636|    266|  setnilV(L->top);
  ------------------
  |  |  869|    266|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  637|    266|  incr_top(L);
  ------------------
  |  |   12|    266|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    532|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    266|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 266]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  638|    266|}
lua_pushnumber:
  641|  1.45k|{
  642|  1.45k|  setnumV(L->top, n);
  ------------------
  |  |  942|  1.45k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  643|  1.45k|  if (LJ_UNLIKELY(tvisnan(L->top)))
  ------------------
  |  |  146|  1.45k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 1.45k]
  |  |  ------------------
  ------------------
  644|      0|    setnanV(L->top);  /* Canonicalize injected NaNs. */
  ------------------
  |  |  943|      0|#define setnanV(o)		((o)->u64 = U64x(fff80000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  645|  1.45k|  incr_top(L);
  ------------------
  |  |   12|  1.45k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  2.91k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.45k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 1.45k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  646|  1.45k|}
lua_pushinteger:
  649|    110|{
  650|    110|  setintptrV(L->top, n);
  ------------------
  |  |  965|    110|#define setintptrV(o, i)	setint64V((o), (i))
  ------------------
  651|    110|  incr_top(L);
  ------------------
  |  |   12|    110|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    220|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    110|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 110]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  652|    110|}
lua_pushlstring:
  655|  2.61k|{
  656|  2.61k|  GCstr *s;
  657|  2.61k|  lj_gc_check(L);
  ------------------
  |  |   66|  2.61k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  2.61k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 1, False: 2.60k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  2.61k|      lj_gc_step(L); }
  ------------------
  658|  2.61k|  s = lj_str_new(L, str, len);
  659|  2.61k|  setstrV(L, L->top, s);
  660|  2.61k|  incr_top(L);
  ------------------
  |  |   12|  2.61k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  5.22k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  2.61k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 2.61k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  661|  2.61k|}
lua_pushstring:
  664|    296|{
  665|    296|  if (str == NULL) {
  ------------------
  |  Branch (665:7): [True: 0, False: 296]
  ------------------
  666|      0|    setnilV(L->top);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  667|    296|  } else {
  668|    296|    GCstr *s;
  669|    296|    lj_gc_check(L);
  ------------------
  |  |   66|    296|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|    296|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 1, False: 295]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|    296|      lj_gc_step(L); }
  ------------------
  670|    296|    s = lj_str_newz(L, str);
  ------------------
  |  |   27|    296|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  671|    296|    setstrV(L, L->top, s);
  672|    296|  }
  673|    296|  incr_top(L);
  ------------------
  |  |   12|    296|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    592|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    296|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 296]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  674|    296|}
lua_pushfstring:
  684|      7|{
  685|      7|  const char *ret;
  686|      7|  va_list argp;
  687|      7|  lj_gc_check(L);
  ------------------
  |  |   66|      7|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      7|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 1, False: 6]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      7|      lj_gc_step(L); }
  ------------------
  688|      7|  va_start(argp, fmt);
  689|      7|  ret = lj_strfmt_pushvf(L, fmt, argp);
  690|      7|  va_end(argp);
  691|      7|  return ret;
  692|      7|}
lua_pushcclosure:
  695|  1.22k|{
  696|  1.22k|  GCfunc *fn;
  697|  1.22k|  lj_gc_check(L);
  ------------------
  |  |   66|  1.22k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  1.22k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 4, False: 1.21k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  1.22k|      lj_gc_step(L); }
  ------------------
  698|  1.22k|  lj_checkapi_slot(n);
  ------------------
  |  |   32|  1.22k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  1.22k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.22k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.22k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.22k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  699|      0|  fn = lj_func_newC(L, (MSize)n, getcurrenv(L));
  700|  1.22k|  fn->c.f = f;
  701|  1.22k|  L->top -= n;
  702|  1.25k|  while (n--)
  ------------------
  |  Branch (702:10): [True: 33, False: 1.22k]
  ------------------
  703|     33|    copyTV(L, &fn->c.upvalue[n], L->top+n);
  704|  1.22k|  setfuncV(L, L->top, fn);
  705|  1.22k|  lj_assertL(iswhite(obj2gco(fn)), "new GC object is not white");
  ------------------
  |  |  365|  1.22k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.22k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.22k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.22k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  706|  1.22k|  incr_top(L);
  ------------------
  |  |   12|  1.22k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  2.44k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.22k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 1.22k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  707|  1.22k|}
lua_pushboolean:
  710|     77|{
  711|     77|  setboolV(L->top, (b != 0));
  ------------------
  |  |  871|     77|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  712|     77|  incr_top(L);
  ------------------
  |  |   12|     77|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    154|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     77|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 77]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  713|     77|}
lua_createtable:
  725|  1.79k|{
  726|  1.79k|  lj_gc_check(L);
  ------------------
  |  |   66|  1.79k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  1.79k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 4, False: 1.78k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  1.79k|      lj_gc_step(L); }
  ------------------
  727|  1.79k|  settabV(L, L->top, lj_tab_new_ah(L, narray, nrec));
  728|  1.79k|  incr_top(L);
  ------------------
  |  |   12|  1.79k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  3.58k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.79k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 1.79k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  729|  1.79k|}
lua_pushthread:
  748|      4|{
  749|      4|  setthreadV(L, L->top, L);
  750|      4|  incr_top(L);
  ------------------
  |  |   12|      4|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      8|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      4|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 4]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  751|      4|  return (mainthread(G(L)) == L);
  ------------------
  |  |  662|      4|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|      4|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  752|      4|}
lua_newthread:
  755|    677|{
  756|    677|  lua_State *L1;
  757|    677|  lj_gc_check(L);
  ------------------
  |  |   66|    677|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|    677|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 1, False: 676]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|    677|      lj_gc_step(L); }
  ------------------
  758|    677|  L1 = lj_state_new(L);
  759|    677|  setthreadV(L, L->top, L1);
  760|    677|  incr_top(L);
  ------------------
  |  |   12|    677|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  1.35k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    677|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 677]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  761|    677|  return L1;
  762|    677|}
lua_newuserdata:
  765|      3|{
  766|      3|  GCudata *ud;
  767|      3|  lj_gc_check(L);
  ------------------
  |  |   66|      3|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      3|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 1, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      3|      lj_gc_step(L); }
  ------------------
  768|      3|  if (size > LJ_MAX_UDATA)
  ------------------
  |  |   56|      3|#define LJ_MAX_UDATA	LJ_MAX_MEM32	/* Max. userdata length. */
  |  |  ------------------
  |  |  |  |   49|      3|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (768:7): [True: 0, False: 3]
  ------------------
  769|      0|    lj_err_msg(L, LJ_ERR_UDATAOV);
  770|      3|  ud = lj_udata_new(L, (MSize)size, getcurrenv(L));
  771|      3|  setudataV(L, L->top, ud);
  772|      3|  incr_top(L);
  ------------------
  |  |   12|      3|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      6|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      3|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 3]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  773|      3|  return uddata(ud);
  ------------------
  |  |  342|      3|#define uddata(u)	((void *)((u)+1))
  ------------------
  774|      3|}
lua_concat:
  777|     31|{
  778|     31|  lj_checkapi_slot(n);
  ------------------
  |  |   32|     31|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|     31|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     31|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 31, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     31|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  779|     31|  if (n >= 2) {
  ------------------
  |  Branch (779:7): [True: 20, False: 11]
  ------------------
  780|     20|    n--;
  781|     20|    do {
  782|     20|      TValue *top = lj_meta_cat(L, L->top-1, -n);
  783|     20|      if (top == NULL) {
  ------------------
  |  Branch (783:11): [True: 20, False: 0]
  ------------------
  784|     20|	L->top -= n;
  785|     20|	break;
  786|     20|      }
  787|      0|      n -= (int)(L->top - (top - 2*LJ_FR2));
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  788|      0|      L->top = top+2;
  789|      0|      lj_vm_call(L, top, 1+1);
  790|      0|      L->top -= 1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  791|      0|      copyTV(L, L->top-1, L->top+LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  792|      0|    } while (--n > 0);
  ------------------
  |  Branch (792:14): [True: 0, False: 0]
  ------------------
  793|     20|  } else if (n == 0) {  /* Push empty string. */
  ------------------
  |  Branch (793:14): [True: 8, False: 3]
  ------------------
  794|      8|    setstrV(L, L->top, &G(L)->strempty);
  ------------------
  |  |  702|      8|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      8|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  795|      8|    incr_top(L);
  ------------------
  |  |   12|      8|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|     16|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      8|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 8]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  796|      8|  }
  797|       |  /* else n == 1: nothing to do. */
  798|     31|}
lua_gettable:
  803|      2|{
  804|      2|  cTValue *t = index2adr_check(L, idx);
  805|      2|  cTValue *v = lj_meta_tget(L, t, L->top-1);
  806|      2|  if (v == NULL) {
  ------------------
  |  Branch (806:7): [True: 0, False: 2]
  ------------------
  807|      0|    L->top += 2;
  808|      0|    lj_vm_call(L, L->top-2, 1+1);
  809|      0|    L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  810|      0|    v = L->top+1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  811|      0|  }
  812|      2|  copyTV(L, L->top-1, v);
  813|      2|}
lua_getfield:
  816|     18|{
  817|     18|  cTValue *v, *t = index2adr_check(L, idx);
  818|     18|  TValue key;
  819|     18|  setstrV(L, &key, lj_str_newz(L, k));
  ------------------
  |  |   27|     18|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  820|     18|  v = lj_meta_tget(L, t, &key);
  821|     18|  if (v == NULL) {
  ------------------
  |  Branch (821:7): [True: 0, False: 18]
  ------------------
  822|      0|    L->top += 2;
  823|      0|    lj_vm_call(L, L->top-2, 1+1);
  824|      0|    L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  825|      0|    v = L->top+1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  826|      0|  }
  827|     18|  copyTV(L, L->top, v);
  828|     18|  incr_top(L);
  ------------------
  |  |   12|     18|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|     36|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     18|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 18]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  829|     18|}
lua_rawget:
  832|  1.20k|{
  833|  1.20k|  cTValue *t = index2adr(L, idx);
  834|  1.20k|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|  1.20k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.20k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.20k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  835|  1.20k|  copyTV(L, L->top-1, lj_tab_get(L, tabV(t), L->top-1));
  ------------------
  |  |  861|  1.20k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  1.20k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.20k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.20k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.20k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  836|  1.20k|}
lua_rawgeti:
  839|      4|{
  840|      4|  cTValue *v, *t = index2adr(L, idx);
  841|      4|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|      4|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      4|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      4|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  842|      4|  v = lj_tab_getint(tabV(t), n);
  ------------------
  |  |   85|      8|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   82|      8|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 4]
  |  |  |  |  |  Branch (82:50): [True: 4, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (85:66): [True: 4, False: 0]
  |  |  ------------------
  ------------------
  843|      4|  if (v) {
  ------------------
  |  Branch (843:7): [True: 0, False: 4]
  ------------------
  844|      0|    copyTV(L, L->top, v);
  845|      4|  } else {
  846|      4|    setnilV(L->top);
  ------------------
  |  |  869|      4|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  847|      4|  }
  848|      4|  incr_top(L);
  ------------------
  |  |   12|      4|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      8|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      4|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 4]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  849|      4|}
lua_getmetatable:
  852|      6|{
  853|      6|  cTValue *o = index2adr(L, idx);
  854|      6|  GCtab *mt = NULL;
  855|      6|  if (tvistab(o))
  ------------------
  |  |  797|      6|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  778|      6|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|      6|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (797:20): [True: 1, False: 5]
  |  |  ------------------
  ------------------
  856|      1|    mt = tabref(tabV(o)->metatable);
  ------------------
  |  |  514|      1|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      2|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  857|      5|  else if (tvisudata(o))
  ------------------
  |  |  798|      5|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  778|      5|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|      5|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 0, False: 5]
  |  |  ------------------
  ------------------
  858|      0|    mt = tabref(udataV(o)->metatable);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  859|      5|  else
  860|      5|    mt = tabref(basemt_obj(G(L), o));
  ------------------
  |  |  514|      5|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|     10|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 1, False: 4]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  861|      6|  if (mt == NULL)
  ------------------
  |  Branch (861:7): [True: 6, False: 0]
  ------------------
  862|      6|    return 0;
  863|      0|  settabV(L, L->top, mt);
  864|      0|  incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  865|      0|  return 1;
  866|      6|}
lua_getfenv:
  882|      6|{
  883|      6|  cTValue *o = index2adr_check(L, idx);
  884|      6|  if (tvisfunc(o)) {
  ------------------
  |  |  793|      6|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  778|      6|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      6|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (793:21): [True: 0, False: 6]
  |  |  ------------------
  ------------------
  885|      0|    settabV(L, L->top, tabref(funcV(o)->c.env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  886|      6|  } else if (tvisudata(o)) {
  ------------------
  |  |  798|      6|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  778|      6|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|      6|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 0, False: 6]
  |  |  ------------------
  ------------------
  887|      0|    settabV(L, L->top, tabref(udataV(o)->env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  888|      6|  } else if (tvisthread(o)) {
  ------------------
  |  |  794|      6|#define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  778|      6|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  266|      6|#define LJ_TTHREAD		(~6u)
  |  |  ------------------
  |  |  |  Branch (794:23): [True: 2, False: 4]
  |  |  ------------------
  ------------------
  889|      2|    settabV(L, L->top, tabref(threadV(o)->env));
  ------------------
  |  |  514|      2|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      4|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 2, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  890|      4|  } else {
  891|      4|    setnilV(L->top);
  ------------------
  |  |  869|      4|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  892|      4|  }
  893|      6|  incr_top(L);
  ------------------
  |  |   12|      6|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|     12|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      6|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 6]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  894|      6|}
lua_next:
  897|      3|{
  898|      3|  cTValue *t = index2adr(L, idx);
  899|      3|  int more;
  900|      3|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|      3|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  901|      3|  more = lj_tab_next(tabV(t), L->top-1, L->top-1);
  ------------------
  |  |  861|      3|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      3|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      3|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  902|      3|  if (more > 0) {
  ------------------
  |  Branch (902:7): [True: 0, False: 3]
  ------------------
  903|      0|    incr_top(L);  /* Return new key and value slot. */
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  904|      3|  } else if (!more) {  /* End of traversal. */
  ------------------
  |  Branch (904:14): [True: 3, False: 0]
  ------------------
  905|      3|    L->top--;  /* Remove key slot. */
  906|      3|  } else {
  907|      0|    lj_err_msg(L, LJ_ERR_NEXTIDX);
  908|      0|  }
  909|      3|  return more;
  910|      3|}
lua_getupvalue:
  913|      5|{
  914|      5|  TValue *val;
  915|      5|  GCobj *o;
  916|      5|  const char *name = lj_debug_uvnamev(index2adr(L, idx), (uint32_t)(n-1), &val, &o);
  917|      5|  if (name) {
  ------------------
  |  Branch (917:7): [True: 0, False: 5]
  ------------------
  918|      0|    copyTV(L, L->top, val);
  919|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  920|      0|  }
  921|      5|  return name;
  922|      5|}
lua_settable:
  968|  1.20k|{
  969|  1.20k|  TValue *o;
  970|  1.20k|  cTValue *t = index2adr_check(L, idx);
  971|  1.20k|  lj_checkapi_slot(2);
  ------------------
  |  |   32|  1.20k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  1.20k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.20k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.20k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  972|      0|  o = lj_meta_tset(L, t, L->top-2);
  973|  1.20k|  if (o) {
  ------------------
  |  Branch (973:7): [True: 1.20k, False: 0]
  ------------------
  974|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  975|  1.20k|    L->top -= 2;
  976|  1.20k|    copyTV(L, o, L->top+1);
  977|  1.20k|  } else {
  978|      0|    TValue *base = L->top;
  979|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  980|      0|    L->top = base+3;
  981|      0|    lj_vm_call(L, base, 0+1);
  982|      0|    L->top -= 3+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  983|      0|  }
  984|  1.20k|}
lua_setfield:
  987|     16|{
  988|     16|  TValue *o;
  989|     16|  TValue key;
  990|     16|  cTValue *t = index2adr_check(L, idx);
  991|     16|  lj_checkapi_slot(1);
  ------------------
  |  |   32|     16|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|     16|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     16|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     16|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  992|     16|  setstrV(L, &key, lj_str_newz(L, k));
  ------------------
  |  |   27|     16|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  993|     16|  o = lj_meta_tset(L, t, &key);
  994|     16|  if (o) {
  ------------------
  |  Branch (994:7): [True: 16, False: 0]
  ------------------
  995|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  996|     16|    copyTV(L, o, --L->top);
  997|     16|  } else {
  998|      0|    TValue *base = L->top;
  999|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1000|      0|    L->top = base+3;
 1001|      0|    lj_vm_call(L, base, 0+1);
 1002|      0|    L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1003|      0|  }
 1004|     16|}
lua_rawset:
 1007|      4|{
 1008|      4|  GCtab *t = tabV(index2adr(L, idx));
  ------------------
  |  |  861|      4|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      4|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      4|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      4|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      4|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1009|      0|  TValue *dst, *key;
 1010|      4|  lj_checkapi_slot(2);
  ------------------
  |  |   32|      4|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|      4|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      4|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 4, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      4|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1011|      0|  key = L->top-2;
 1012|      4|  dst = lj_tab_set(L, t, key);
 1013|      4|  copyTV(L, dst, key+1);
 1014|      4|  lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|      4|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|      4|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 4]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1015|      4|  L->top = key;
 1016|      4|}
lua_rawseti:
 1019|  2.50k|{
 1020|  2.50k|  GCtab *t = tabV(index2adr(L, idx));
  ------------------
  |  |  861|  2.50k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  2.50k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.50k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.50k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.50k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.50k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1021|      0|  TValue *dst, *src;
 1022|  2.50k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|  2.50k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  2.50k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.50k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2.50k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.50k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1023|  2.50k|  dst = lj_tab_setint(L, t, n);
  ------------------
  |  |   87|  2.50k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   82|  2.50k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 1.29k, False: 1.20k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   83|  1.29k|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|  1.29k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|  1.29k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|  2.50k|  src = L->top-1;
 1025|  2.50k|  copyTV(L, dst, src);
 1026|  2.50k|  lj_gc_barriert(L, t, dst);
  ------------------
  |  |   97|  2.50k|  { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   35|  5.00k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|  5.00k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|  2.50k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  2.50k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  2.50k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  2.50k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  2.50k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  2.50k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 1.20k, False: 1.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  2.40k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  1.20k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  1.20k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  1.20k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 1.20k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 1.20k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|  1.20k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  1.20k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 1.20k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   98|  2.50k|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1027|  2.50k|  L->top = src;
 1028|  2.50k|}
lua_setfenv:
 1075|      4|{
 1076|      4|  cTValue *o = index2adr_check(L, idx);
 1077|      4|  GCtab *t;
 1078|      4|  lj_checkapi_slot(1);
  ------------------
  |  |   32|      4|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|      4|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      4|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 4, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      4|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1079|      4|  lj_checkapi(tvistab(L->top-1), "top stack slot is not a table");
  ------------------
  |  |  357|      4|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      4|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      4|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1080|      4|  t = tabV(L->top-1);
  ------------------
  |  |  861|      4|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      4|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      4|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      4|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      4|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1081|      4|  if (tvisfunc(o)) {
  ------------------
  |  |  793|      4|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  778|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      4|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (793:21): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 1082|      0|    setgcref(funcV(o)->c.env, obj2gco(t));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1083|      4|  } else if (tvisudata(o)) {
  ------------------
  |  |  798|      4|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  778|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|      4|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 1084|      0|    setgcref(udataV(o)->env, obj2gco(t));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1085|      4|  } else if (tvisthread(o)) {
  ------------------
  |  |  794|      4|#define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  778|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  266|      4|#define LJ_TTHREAD		(~6u)
  |  |  ------------------
  |  |  |  Branch (794:23): [True: 2, False: 2]
  |  |  ------------------
  ------------------
 1086|      2|    setgcref(threadV(o)->env, obj2gco(t));
  ------------------
  |  |   72|      4|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 1087|      2|  } else {
 1088|      2|    L->top--;
 1089|      2|    return 0;
 1090|      2|  }
 1091|      2|  lj_gc_objbarrier(L, gcV(o), t);
  ------------------
  |  |  108|      2|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   32|      4|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      2|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      2|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      2|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 1, False: 1]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      2|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      1|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 1]
  |  |  |  |  |  Branch (33:22): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  109|      2|      lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (772:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
 1092|      2|  L->top--;
 1093|      2|  return 1;
 1094|      4|}
lua_setupvalue:
 1097|      5|{
 1098|      5|  cTValue *f = index2adr(L, idx);
 1099|      5|  TValue *val;
 1100|      5|  GCobj *o;
 1101|      5|  const char *name;
 1102|      5|  lj_checkapi_slot(1);
  ------------------
  |  |   32|      5|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|      5|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      5|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 5, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      5|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1103|      0|  name = lj_debug_uvnamev(f, (uint32_t)(n-1), &val, &o);
 1104|      5|  if (name) {
  ------------------
  |  Branch (1104:7): [True: 0, False: 5]
  ------------------
 1105|      0|    L->top--;
 1106|      0|    copyTV(L, val, L->top);
 1107|      0|    lj_gc_barrier(L, o, L->top);
  ------------------
  |  |  105|      0|  { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  106|      0|      lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1108|      0|  }
 1109|      0|  return name;
 1110|      5|}
lua_cpcall:
 1172|      8|{
 1173|      8|  global_State *g = G(L);
  ------------------
  |  |  702|      8|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      8|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1174|      8|  uint8_t oldh = hook_save(g);
  ------------------
  |  |  681|      8|#define hook_save(g)		((g)->hookmask & ~HOOK_EVENTMASK)
  |  |  ------------------
  |  |  |  |  669|      8|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
 1175|      8|  int status;
 1176|      8|  lj_checkapi(L->status == LUA_OK || L->status == LUA_ERRERR,
  ------------------
  |  |  357|      8|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      8|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 8, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      8|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1177|      0|	      "thread called in wrong state %d", L->status);
 1178|      0|  status = lj_vm_cpcall(L, func, ud, cpcall);
 1179|      8|  if (status) hook_restore(g, oldh);
  ------------------
  |  |  683|      0|  ((g)->hookmask = ((g)->hookmask & HOOK_EVENTMASK) | (h))
  |  |  ------------------
  |  |  |  |  669|      0|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  |  Branch (1179:7): [True: 0, False: 8]
  ------------------
 1180|      8|  return status;
 1181|      8|}
lua_gc:
 1259|  1.11k|{
 1260|  1.11k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.11k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.11k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1261|  1.11k|  int res = 0;
 1262|  1.11k|  switch (what) {
 1263|     60|  case LUA_GCSTOP:
  ------------------
  |  |  222|     60|#define LUA_GCSTOP		0
  ------------------
  |  Branch (1263:3): [True: 60, False: 1.05k]
  ------------------
 1264|     60|    g->gc.threshold = LJ_MAX_MEM;
  ------------------
  |  |   52|     60|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|     60|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|     60|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
 1265|     60|    break;
 1266|    163|  case LUA_GCRESTART:
  ------------------
  |  |  223|    163|#define LUA_GCRESTART		1
  ------------------
  |  Branch (1266:3): [True: 163, False: 955]
  ------------------
 1267|    163|    g->gc.threshold = data == -1 ? (g->gc.total/100)*g->gc.pause : g->gc.total;
  ------------------
  |  Branch (1267:23): [True: 0, False: 163]
  ------------------
 1268|    163|    break;
 1269|    281|  case LUA_GCCOLLECT:
  ------------------
  |  |  224|    281|#define LUA_GCCOLLECT		2
  ------------------
  |  Branch (1269:3): [True: 281, False: 837]
  ------------------
 1270|    281|    lj_gc_fullgc(L);
 1271|    281|    break;
 1272|     77|  case LUA_GCCOUNT:
  ------------------
  |  |  225|     77|#define LUA_GCCOUNT		3
  ------------------
  |  Branch (1272:3): [True: 77, False: 1.04k]
  ------------------
 1273|     77|    res = (int)(g->gc.total >> 10);
 1274|     77|    break;
 1275|     86|  case LUA_GCCOUNTB:
  ------------------
  |  |  226|     86|#define LUA_GCCOUNTB		4
  ------------------
  |  Branch (1275:3): [True: 86, False: 1.03k]
  ------------------
 1276|     86|    res = (int)(g->gc.total & 0x3ff);
 1277|     86|    break;
 1278|    282|  case LUA_GCSTEP: {
  ------------------
  |  |  227|    282|#define LUA_GCSTEP		5
  ------------------
  |  Branch (1278:3): [True: 282, False: 836]
  ------------------
 1279|    282|    GCSize a = (GCSize)data << 10;
 1280|    282|    g->gc.threshold = (a <= g->gc.total) ? (g->gc.total - a) : 0;
  ------------------
  |  Branch (1280:23): [True: 282, False: 0]
  ------------------
 1281|    563|    while (g->gc.total >= g->gc.threshold)
  ------------------
  |  Branch (1281:12): [True: 282, False: 281]
  ------------------
 1282|    282|      if (lj_gc_step(L) > 0) {
  ------------------
  |  Branch (1282:11): [True: 1, False: 281]
  ------------------
 1283|      1|	res = 1;
 1284|      1|	break;
 1285|      1|      }
 1286|    282|    break;
 1287|      0|  }
 1288|     35|  case LUA_GCSETPAUSE:
  ------------------
  |  |  228|     35|#define LUA_GCSETPAUSE		6
  ------------------
  |  Branch (1288:3): [True: 35, False: 1.08k]
  ------------------
 1289|     35|    res = (int)(g->gc.pause);
 1290|     35|    g->gc.pause = (MSize)data;
 1291|     35|    break;
 1292|     64|  case LUA_GCSETSTEPMUL:
  ------------------
  |  |  229|     64|#define LUA_GCSETSTEPMUL	7
  ------------------
  |  Branch (1292:3): [True: 64, False: 1.05k]
  ------------------
 1293|     64|    res = (int)(g->gc.stepmul);
 1294|     64|    g->gc.stepmul = (MSize)data;
 1295|     64|    break;
 1296|     70|  case LUA_GCISRUNNING:
  ------------------
  |  |  230|     70|#define LUA_GCISRUNNING		9
  ------------------
  |  Branch (1296:3): [True: 70, False: 1.04k]
  ------------------
 1297|     70|    res = (g->gc.threshold != LJ_MAX_MEM);
  ------------------
  |  |   52|     70|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|     70|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|     70|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
 1298|     70|    break;
 1299|      0|  default:
  ------------------
  |  Branch (1299:3): [True: 0, False: 1.11k]
  ------------------
 1300|      0|    res = -1;  /* Invalid option. */
 1301|  1.11k|  }
 1302|  1.11k|  return res;
 1303|  1.11k|}
lj_api.c:index2adr_stack:
   72|  1.21k|{
   73|  1.21k|  if (idx > 0) {
  ------------------
  |  Branch (73:7): [True: 15, False: 1.20k]
  ------------------
   74|     15|    TValue *o = L->base + (idx - 1);
   75|     15|    if (o < L->top) {
  ------------------
  |  Branch (75:9): [True: 15, False: 0]
  ------------------
   76|     15|      return o;
   77|     15|    } else {
   78|      0|      lj_checkapi(0, "invalid stack slot %d", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|      return niltv(L);
  ------------------
  |  |  664|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    }
   81|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  664|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (81:12): [True: 0, False: 0]
  ------------------
   82|  1.20k|  } else {
   83|  1.20k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|  1.20k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.40k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 1.20k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1.20k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|      0|		"invalid stack slot %d", idx);
   85|      0|    return L->top + idx;
   86|  1.20k|  }
   87|  1.21k|}
lj_api.c:copy_slot:
  182|      6|{
  183|      6|  if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|      6|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (183:7): [True: 0, False: 6]
  ------------------
  184|      0|    lj_checkapi(tvistab(f), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  185|       |    /* NOBARRIER: A thread (i.e. L) is never black. */
  186|      0|    setgcref(L->env, obj2gco(tabV(f)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  187|      6|  } else if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|      6|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (187:14): [True: 0, False: 6]
  ------------------
  188|      0|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  707|      0|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  830|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  189|      0|    if (fn->c.gct != ~LJ_TFUNC)
  ------------------
  |  |  268|      0|#define LJ_TFUNC		(~8u)
  ------------------
  |  Branch (189:9): [True: 0, False: 0]
  ------------------
  190|      0|      lj_err_msg(L, LJ_ERR_NOENV);
  191|      0|    lj_checkapi(tvistab(f), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  192|      0|    setgcref(fn->c.env, obj2gco(tabV(f)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  193|      0|    lj_gc_barrier(L, fn, f);
  ------------------
  |  |  105|      0|  { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  106|      0|      lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  194|      6|  } else {
  195|      6|    TValue *o = index2adr_check(L, idx);
  196|      6|    copyTV(L, o, f);
  197|      6|    if (idx < LUA_GLOBALSINDEX)  /* Need a barrier for upvalues. */
  ------------------
  |  |   38|      6|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (197:9): [True: 0, False: 6]
  ------------------
  198|      0|      lj_gc_barrier(L, curr_func(L), f);
  ------------------
  |  |  105|      0|  { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  106|      0|      lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  199|      6|  }
  200|      6|}
lj_api.c:index2adr:
   35|  11.3k|{
   36|  11.3k|  if (idx > 0) {
  ------------------
  |  Branch (36:7): [True: 316, False: 11.0k]
  ------------------
   37|    316|    TValue *o = L->base + (idx - 1);
   38|    316|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  664|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (38:12): [True: 316, False: 0]
  ------------------
   39|  11.0k|  } else if (idx > LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|  11.0k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (39:14): [True: 9.83k, False: 1.22k]
  ------------------
   40|  9.83k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|  9.83k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  19.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 9.83k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 9.83k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.83k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   41|      0|		"bad stack slot %d", idx);
   42|      0|    return L->top + idx;
   43|  9.83k|  } else if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|  1.22k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (43:14): [True: 22, False: 1.20k]
  ------------------
   44|     22|    TValue *o = &G(L)->tmptv;
  ------------------
  |  |  702|     22|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     22|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   45|     22|    settabV(L, o, tabref(L->env));
  ------------------
  |  |  514|     22|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|     22|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   46|     22|    return o;
   47|  1.20k|  } else if (idx == LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|  1.20k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (47:14): [True: 1.20k, False: 0]
  ------------------
   48|  1.20k|    return registry(L);
  ------------------
  |  |  703|  1.20k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  702|  1.20k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   49|  1.20k|  } else {
   50|      0|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  707|      0|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  830|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   51|      0|    lj_checkapi(fn->c.gct == ~LJ_TFUNC && !isluafunc(fn),
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   52|      0|		"calling frame is not a C function");
   53|      0|    if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|      0|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (53:9): [True: 0, False: 0]
  ------------------
   54|      0|      TValue *o = &G(L)->tmptv;
  ------------------
  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   55|      0|      settabV(L, o, tabref(fn->c.env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   56|      0|      return o;
   57|      0|    } else {
   58|      0|      idx = LUA_GLOBALSINDEX - idx;
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
   59|      0|      return idx <= fn->c.nupvalues ? &fn->c.upvalue[idx-1] : niltv(L);
  ------------------
  |  |  664|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (59:14): [True: 0, False: 0]
  ------------------
   60|      0|    }
   61|      0|  }
   62|  11.3k|}
lj_api.c:getcurrenv:
   90|  1.23k|{
   91|  1.23k|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  707|  1.23k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  830|  1.23k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  1.23k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  1.23k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   92|  1.23k|  return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  268|  1.23k|#define LJ_TFUNC		(~8u)
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|  1.23k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  1.23k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (92:10): [True: 0, False: 1.23k]
  ------------------
   93|  1.23k|}
lj_api.c:index2adr_check:
   65|  1.25k|{
   66|  1.25k|  TValue *o = index2adr(L, idx);
   67|  1.25k|  lj_checkapi(o != niltv(L), "invalid stack slot %d", idx);
  ------------------
  |  |  357|  1.25k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.50k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.25k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1.25k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.25k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   68|      0|  return o;
   69|  1.25k|}
lj_api.c:cpcall:
 1156|      8|{
 1157|      8|  GCfunc *fn = lj_func_newC(L, 0, getcurrenv(L));
 1158|      8|  TValue *top = L->top;
 1159|      8|  fn->c.f = func;
 1160|      8|  setfuncV(L, top++, fn);
 1161|      8|  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|      8|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  869|      8|#define setnilV(o)		((o)->it64 = -1)
  ------------------
 1162|      8|#if LJ_64
 1163|      8|  ud = lj_lightud_intern(L, ud);
 1164|      8|#endif
 1165|      8|  setrawlightudV(top++, ud);
 1166|      8|  cframe_nres(L->cframe) = 1+0;  /* Zero results. */
  ------------------
  |  |  280|      8|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|      8|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
 1167|      8|  L->top = top;
 1168|      8|  return top-1;  /* Now call the newly allocated C function. */
 1169|      8|}

lj_buf_more2:
   61|     20|{
   62|     20|  if (sbufisext(sb)) {
  ------------------
  |  |   56|     20|#define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   55|     20|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|     20|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   43|     20|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  |  |  ------------------
  |  |  |  Branch (56:24): [True: 0, False: 20]
  |  |  ------------------
  ------------------
   63|      0|    SBufExt *sbx = (SBufExt *)sb;
   64|      0|    MSize len = sbufxlen(sbx);
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
   65|      0|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   66|      0|      lj_err_mem(sbufL(sbx));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    if (len + sz > sbufsz(sbx)) {  /* Must grow. */
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|      buf_grow((SBuf *)sbx, len + sz);
   69|      0|    } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   39|      0|#define sbufxslack(sbx)		((MSize)((sbx)->r - (sbx)->b))
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (69:33): [True: 0, False: 0]
  ------------------
   70|       |      /* Also grow to avoid excessive compactions, if slack < size/8. */
   71|      0|      buf_grow((SBuf *)sbx, sbuflen(sbx) + sz);  /* Not sbufxlen! */
  ------------------
  |  |   36|      0|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   72|      0|      return sbx->w;
   73|      0|    }
   74|      0|    if (sbx->r != sbx->b) {  /* Compact by moving down. */
  ------------------
  |  Branch (74:9): [True: 0, False: 0]
  ------------------
   75|      0|      memmove(sbx->b, sbx->r, len);
   76|      0|      sbx->r = sbx->b;
   77|      0|      sbx->w = sbx->b + len;
   78|      0|      lj_assertG_(G(sbufL(sbx)), len + sz <= sbufsz(sbx), "bad SBuf compact");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|    }
   80|     20|  } else {
   81|     20|    MSize len = sbuflen(sb);
  ------------------
  |  |   36|     20|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   82|     20|    lj_assertG_(G(sbufL(sb)), sz > sbufleft(sb), "SBuf overflow");
  ------------------
  |  |  363|     20|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     20|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 20, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     20|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   83|     20|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|     40|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 20]
  |  |  |  Branch (146:44): [True: 0, False: 20]
  |  |  |  Branch (146:44): [True: 0, False: 20]
  |  |  ------------------
  ------------------
   84|      0|      lj_err_mem(sbufL(sb));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|     20|    buf_grow(sb, len + sz);
   86|     20|  }
   87|     20|  return sb->w;
   88|     20|}
lj_buf_shrink:
   91|    395|{
   92|    395|  char *b = sb->b;
   93|    395|  MSize osz = (MSize)(sb->e - b);
   94|    395|  if (osz > 2*LJ_MIN_SBUF) {
  ------------------
  |  |   80|    395|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (94:7): [True: 0, False: 395]
  ------------------
   95|      0|    MSize n = (MSize)(sb->w - b);
   96|      0|    b = lj_mem_realloc(L, b, osz, (osz >> 1));
   97|      0|    sb->b = b;
   98|      0|    sb->w = b + n;
   99|      0|    sb->e = b + (osz >> 1);
  100|      0|  }
  101|    395|  lj_assertG_(G(sbufL(sb)), !sbufisext(sb), "YAGNI shrink SBufExt");
  ------------------
  |  |  363|    395|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    395|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 395, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    395|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  102|    395|}
lj_buf_putmem:
  133|     38|{
  134|     38|  char *w = lj_buf_more(sb, len);
  135|     38|  w = lj_buf_wmem(w, q, len);
  136|     38|  sb->w = w;
  137|     38|  return sb;
  138|     38|}
lj_buf.c:buf_grow:
   20|     20|{
   21|     20|  MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   35|     20|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
                MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   36|     20|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   22|     20|  char *b;
   23|     20|  GCSize flag;
   24|     20|  if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|     20|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
                if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|     20|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (24:7): [True: 20, False: 0]
  ------------------
   25|     29|  while (nsz < sz) nsz += nsz;
  ------------------
  |  Branch (25:10): [True: 9, False: 20]
  ------------------
   26|     20|  flag = sbufflag(sb);
  ------------------
  |  |   55|     20|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  ------------------
  |  |  |  |   37|     20|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  ------------------
   27|     20|  if ((flag & SBUF_FLAG_COW)) {  /* Copy-on-write semantics. */
  ------------------
  |  |   44|     20|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  ------------------
  |  Branch (27:7): [True: 0, False: 20]
  ------------------
   28|      0|    lj_assertG_(G(sbufL(sb)), sb->w == sb->e, "bad SBuf COW");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   29|      0|    b = (char *)lj_mem_new(sbufL(sb), nsz);
  ------------------
  |  |  117|      0|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  ------------------
   30|      0|    setsbufflag(sb, flag & ~(GCSize)SBUF_FLAG_COW);
  ------------------
  |  |   62|      0|#define setsbufflag(sb, flag)	(setmrefu((sb)->L, (flag)))
  |  |  ------------------
  |  |  |  |   40|      0|#define setmrefu(r, u)	((r).ptr64 = (uint64_t)(u))
  |  |  ------------------
  ------------------
   31|      0|    setgcrefnull(sbufX(sb)->cowref);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  |  |  ------------------
  |  |  |  Branch (76:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   32|      0|    memcpy(b, sb->b, osz);
   33|     20|  } else {
   34|     20|    b = (char *)lj_mem_realloc(sbufL(sb), sb->b, osz, nsz);
  ------------------
  |  |   48|     20|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|     20|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|     20|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|     20|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   35|     20|  }
   36|     20|  if ((flag & SBUF_FLAG_EXT)) {
  ------------------
  |  |   43|     20|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  ------------------
  |  Branch (36:7): [True: 0, False: 20]
  ------------------
   37|      0|    sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|      0|  }
   39|       |  /* Adjust buffer pointers. */
   40|      0|  sb->b = b;
   41|     20|  sb->w = b + len;
   42|     20|  sb->e = b + nsz;
   43|     20|  if ((flag & SBUF_FLAG_BORROW)) {  /* Adjust borrowed buffer pointers. */
  ------------------
  |  |   45|     20|#define SBUF_FLAG_BORROW	4	/* Borrowed string buffer. */
  ------------------
  |  Branch (43:7): [True: 0, False: 20]
  ------------------
   44|      0|    SBuf *bsb = mref(sbufX(sb)->bsb, SBuf);
  ------------------
  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   45|      0|    bsb->b = b;
   46|      0|    bsb->w = b + len;
   47|      0|    bsb->e = b + nsz;
   48|      0|  }
   49|     20|}

lj_state.c:lj_buf_init:
   75|  1.20k|{
   76|  1.20k|  setsbufL(sb, L);
  ------------------
  |  |   49|  1.20k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  1.20k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  1.20k|  sb->w = sb->e = sb->b = NULL;
   78|  1.20k|}
lj_state.c:lj_buf_free:
   94|  1.20k|{
   95|  1.20k|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  1.20k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.20k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.20k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  1.20k|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  1.20k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  1.20k|}
lj_strfmt.c:lj_buf_tmp_:
   86|      7|{
   87|      7|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  702|      7|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      7|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|      7|  setsbufL(sb, L);
  ------------------
  |  |   49|      7|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|      7|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|      7|  lj_buf_reset(sb);
   90|      7|  return sb;
   91|      7|}
lj_strfmt.c:lj_buf_reset:
   81|      7|{
   82|      7|  sb->w = sb->b;
   83|      7|}
lj_strfmt.c:lj_buf_str:
  194|      7|{
  195|      7|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|      7|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  196|      7|}
lj_strfmt_num.c:lj_buf_more:
  107|     16|{
  108|     16|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|     16|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 16]
  |  |  ------------------
  ------------------
  109|      0|    return lj_buf_more2(sb, sz);
  110|     16|  return sb->w;
  111|     16|}
lj_buf.c:lj_buf_more:
  107|     38|{
  108|     38|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|     38|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 7, False: 31]
  |  |  ------------------
  ------------------
  109|      7|    return lj_buf_more2(sb, sz);
  110|     31|  return sb->w;
  111|     38|}
lj_buf.c:lj_buf_wmem:
  169|     38|{
  170|     38|  return (char *)memcpy(p, q, len) + len;
  171|     38|}
lj_meta.c:lj_buf_tmp_:
   86|     20|{
   87|     20|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  702|     20|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     20|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|     20|  setsbufL(sb, L);
  ------------------
  |  |   49|     20|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|     20|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|     20|  lj_buf_reset(sb);
   90|     20|  return sb;
   91|     20|}
lj_meta.c:lj_buf_reset:
   81|     20|{
   82|     20|  sb->w = sb->b;
   83|     20|}
lj_meta.c:lj_buf_more:
  107|     20|{
  108|     20|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|     20|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 13, False: 7]
  |  |  ------------------
  ------------------
  109|     13|    return lj_buf_more2(sb, sz);
  110|      7|  return sb->w;
  111|     20|}
lj_meta.c:lj_buf_str:
  194|     20|{
  195|     20|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|     20|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  196|     20|}

lj_ctype_freestate:
  648|  1.20k|{
  649|  1.20k|  CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  385|  1.20k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  650|  1.20k|  if (cts) {
  ------------------
  |  Branch (650:7): [True: 0, False: 1.20k]
  ------------------
  651|      0|    lj_ccallback_mcode_free(cts);
  652|      0|    lj_mem_freevec(g, cts->tab, cts->sizetab, CType);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  653|      0|    lj_mem_freevec(g, cts->cb.cbid, cts->cb.sizeid, CTypeID1);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  654|      0|    lj_mem_freet(g, cts);
  ------------------
  |  |  134|      0|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  655|      0|  }
  656|  1.20k|}

lj_debug_frame:
   26|     11|{
   27|     11|  cTValue *frame, *nextframe, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  217|     11|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     11|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                cTValue *frame, *nextframe, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  569|     11|#define LJ_FR2			1
  ------------------
   28|       |  /* Traverse frames backwards. */
   29|     11|  for (nextframe = frame = L->base-1; frame > bot; ) {
  ------------------
  |  Branch (29:39): [True: 0, False: 11]
  ------------------
   30|      0|    if (frame_gc(frame) == obj2gco(L))
  ------------------
  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  ------------------
  |  |  |  |  830|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  if (frame_gc(frame) == obj2gco(L))
  ------------------
  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  |  Branch (30:9): [True: 0, False: 0]
  ------------------
   31|      0|      level++;  /* Skip dummy frames. See lj_err_optype_call(). */
   32|      0|    if (level-- == 0) {
  ------------------
  |  Branch (32:9): [True: 0, False: 0]
  ------------------
   33|      0|      *size = (int)(nextframe - frame);
   34|      0|      return frame;  /* Level found. */
   35|      0|    }
   36|      0|    nextframe = frame;
   37|      0|    if (frame_islua(frame)) {
  ------------------
  |  |   77|      0|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   38|      0|      frame = frame_prevl(frame);
  ------------------
  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
   39|      0|    } else {
   40|      0|      if (frame_isvarg(frame))
  ------------------
  |  |   80|      0|#define frame_isvarg(f)		(frame_typep(f) == FRAME_VARG)
  |  |  ------------------
  |  |  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (80:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   41|      0|	level++;  /* Skip vararg pseudo-frame. */
   42|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   43|      0|    }
   44|      0|  }
   45|     11|  *size = level;
   46|     11|  return NULL;  /* Level not found. */
   47|     11|}
lj_debug_uvnamev:
  230|     10|{
  231|     10|  if (tvisfunc(o)) {
  ------------------
  |  |  793|     10|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  778|     10|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|     10|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (793:21): [True: 0, False: 10]
  |  |  ------------------
  ------------------
  232|      0|    GCfunc *fn = funcV(o);
  ------------------
  |  |  857|      0|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  233|      0|    if (isluafunc(fn)) {
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  234|      0|      GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  235|      0|      if (idx < pt->sizeuv) {
  ------------------
  |  Branch (235:11): [True: 0, False: 0]
  ------------------
  236|      0|	GCobj *uvo = gcref(fn->l.uvptr[idx]);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  237|      0|	*tvp = uvval(&uvo->uv);
  ------------------
  |  |  449|      0|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  238|      0|	*op = uvo;
  239|      0|	return lj_debug_uvname(pt, idx);
  240|      0|      }
  241|      0|    } else {
  242|      0|      if (idx < fn->c.nupvalues) {
  ------------------
  |  Branch (242:11): [True: 0, False: 0]
  ------------------
  243|      0|	*tvp = &fn->c.upvalue[idx];
  244|      0|	*op = obj2gco(fn);
  ------------------
  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  245|      0|	return "";
  246|      0|      }
  247|      0|    }
  248|      0|  }
  249|     10|  return NULL;
  250|     10|}
lj_debug_getinfo:
  433|      5|{
  434|      5|  int opt_f = 0, opt_L = 0;
  435|      5|  TValue *frame = NULL;
  436|      5|  TValue *nextframe = NULL;
  437|      5|  GCfunc *fn;
  438|      5|  if (*what == '>') {
  ------------------
  |  Branch (438:7): [True: 5, False: 0]
  ------------------
  439|      5|    TValue *func = L->top - 1;
  440|      5|    if (!tvisfunc(func)) return 0;
  ------------------
  |  |  793|      5|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  778|      5|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      5|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  ------------------
  |  Branch (440:9): [True: 0, False: 5]
  ------------------
  441|      5|    fn = funcV(func);
  ------------------
  |  |  857|      5|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|      5|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      5|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      5|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      5|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  442|      0|    L->top--;
  443|      5|    what++;
  444|      5|  } else {
  445|      0|    uint32_t offset = (uint32_t)ar->i_ci & 0xffff;
  446|      0|    uint32_t size = (uint32_t)ar->i_ci >> 16;
  447|      0|    lj_assertL(offset != 0, "bad frame offset");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  448|      0|    frame = tvref(L->stack) + offset;
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  449|      0|    if (size) nextframe = frame + size;
  ------------------
  |  Branch (449:9): [True: 0, False: 0]
  ------------------
  450|      0|    lj_assertL(frame <= tvref(L->maxstack) &&
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  451|      0|	       (!nextframe || nextframe <= tvref(L->maxstack)),
  452|      0|	       "broken frame chain");
  453|      0|    fn = frame_func(frame);
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  830|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  454|      0|    lj_assertL(fn->c.gct == ~LJ_TFUNC, "bad frame function");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  455|      0|  }
  456|     20|  for (; *what; what++) {
  ------------------
  |  Branch (456:10): [True: 20, False: 0]
  ------------------
  457|     20|    if (*what == 'S') {
  ------------------
  |  Branch (457:9): [True: 5, False: 15]
  ------------------
  458|      5|      if (isluafunc(fn)) {
  ------------------
  |  |  476|      5|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      5|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 5]
  |  |  ------------------
  ------------------
  459|      0|	GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  460|      0|	BCLine firstline = pt->firstline;
  461|      0|	GCstr *name = proto_chunkname(pt);
  ------------------
  |  |  424|      0|#define proto_chunkname(pt)	(strref((pt)->chunkname))
  |  |  ------------------
  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  462|      0|	ar->source = strdata(name);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  463|      0|	lj_debug_shortname(ar->short_src, name, pt->firstline);
  464|      0|	ar->linedefined = (int)firstline;
  465|      0|	ar->lastlinedefined = (int)(firstline + pt->numline);
  466|      0|	ar->what = (firstline || !pt->numline) ? "Lua" : "main";
  ------------------
  |  Branch (466:14): [True: 0, False: 0]
  |  Branch (466:27): [True: 0, False: 0]
  ------------------
  467|      5|      } else {
  468|      5|	ar->source = "=[C]";
  469|      5|	ar->short_src[0] = '[';
  470|      5|	ar->short_src[1] = 'C';
  471|      5|	ar->short_src[2] = ']';
  472|      5|	ar->short_src[3] = '\0';
  473|      5|	ar->linedefined = -1;
  474|      5|	ar->lastlinedefined = -1;
  475|      5|	ar->what = "C";
  476|      5|      }
  477|     15|    } else if (*what == 'l') {
  ------------------
  |  Branch (477:16): [True: 5, False: 10]
  ------------------
  478|      5|      ar->currentline = frame ? debug_frameline(L, fn, nextframe) : -1;
  ------------------
  |  Branch (478:25): [True: 0, False: 5]
  ------------------
  479|     10|    } else if (*what == 'u') {
  ------------------
  |  Branch (479:16): [True: 0, False: 10]
  ------------------
  480|      0|      ar->nups = fn->c.nupvalues;
  481|      0|      if (ext) {
  ------------------
  |  Branch (481:11): [True: 0, False: 0]
  ------------------
  482|      0|	if (isluafunc(fn)) {
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  483|      0|	  GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  484|      0|	  ar->nparams = pt->numparams;
  485|      0|	  ar->isvararg = !!(pt->flags & PROTO_VARARG);
  ------------------
  |  |  400|      0|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
  486|      0|	} else {
  487|      0|	  ar->nparams = 0;
  488|      0|	  ar->isvararg = 1;
  489|      0|	}
  490|      0|      }
  491|     10|    } else if (*what == 'n') {
  ------------------
  |  Branch (491:16): [True: 5, False: 5]
  ------------------
  492|      5|      ar->namewhat = frame ? lj_debug_funcname(L, frame, &ar->name) : NULL;
  ------------------
  |  Branch (492:22): [True: 0, False: 5]
  ------------------
  493|      5|      if (ar->namewhat == NULL) {
  ------------------
  |  Branch (493:11): [True: 5, False: 0]
  ------------------
  494|      5|	ar->namewhat = "";
  495|      5|	ar->name = NULL;
  496|      5|      }
  497|      5|    } else if (*what == 'f') {
  ------------------
  |  Branch (497:16): [True: 0, False: 5]
  ------------------
  498|      0|      opt_f = 1;
  499|      5|    } else if (*what == 'L') {
  ------------------
  |  Branch (499:16): [True: 0, False: 5]
  ------------------
  500|      0|      opt_L = 1;
  501|      5|    } else {
  502|      5|      return 0;  /* Bad option. */
  503|      5|    }
  504|     20|  }
  505|      0|  if (opt_f) {
  ------------------
  |  Branch (505:7): [True: 0, False: 0]
  ------------------
  506|      0|    setfuncV(L, L->top, fn);
  507|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  508|      0|  }
  509|      0|  if (opt_L) {
  ------------------
  |  Branch (509:7): [True: 0, False: 0]
  ------------------
  510|      0|    if (isluafunc(fn)) {
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  511|      0|      GCtab *t = lj_tab_new(L, 0, 0);
  512|      0|      GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  513|      0|      const void *lineinfo = proto_lineinfo(pt);
  ------------------
  |  |  426|      0|#define proto_lineinfo(pt)	(mref((pt)->lineinfo, const void))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  514|      0|      if (lineinfo) {
  ------------------
  |  Branch (514:11): [True: 0, False: 0]
  ------------------
  515|      0|	BCLine first = pt->firstline;
  516|      0|	int sz = pt->numline < 256 ? 1 : pt->numline < 65536 ? 2 : 4;
  ------------------
  |  Branch (516:11): [True: 0, False: 0]
  |  Branch (516:35): [True: 0, False: 0]
  ------------------
  517|      0|	MSize i, szl = pt->sizebc-1;
  518|      0|	for (i = 0; i < szl; i++) {
  ------------------
  |  Branch (518:14): [True: 0, False: 0]
  ------------------
  519|      0|	  BCLine line = first +
  520|      0|	    (sz == 1 ? (BCLine)((const uint8_t *)lineinfo)[i] :
  ------------------
  |  Branch (520:7): [True: 0, False: 0]
  ------------------
  521|      0|	     sz == 2 ? (BCLine)((const uint16_t *)lineinfo)[i] :
  ------------------
  |  Branch (521:7): [True: 0, False: 0]
  ------------------
  522|      0|	     (BCLine)((const uint32_t *)lineinfo)[i]);
  523|      0|	  setboolV(lj_tab_setint(L, t, line), 1);
  ------------------
  |  |  871|      0|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  |  |  ------------------
  |  |  |  Branch (871:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  524|      0|	}
  525|      0|      }
  526|      0|      settabV(L, L->top, t);
  527|      0|    } else {
  528|      0|      setnilV(L->top);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  529|      0|    }
  530|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  531|      0|  }
  532|      0|  return 1;  /* Ok. */
  533|      5|}
lua_getinfo:
  536|      5|{
  537|      5|  return lj_debug_getinfo(L, what, (lj_Debug *)ar, 0);
  538|      5|}
lua_getstack:
  541|     11|{
  542|     11|  int size;
  543|     11|  cTValue *frame = lj_debug_frame(L, level, &size);
  544|     11|  if (frame) {
  ------------------
  |  Branch (544:7): [True: 0, False: 11]
  ------------------
  545|      0|    ar->i_ci = (size << 16) + (int)(frame - tvref(L->stack));
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  546|      0|    return 1;
  547|     11|  } else {
  548|     11|    ar->i_ci = level - size;
  549|     11|    return 0;
  550|     11|  }
  551|     11|}
luaL_traceback:
  664|      7|{
  665|      7|  int top = (int)(L->top - L->base);
  666|      7|  int lim = TRACEBACK_LEVELS1;
  ------------------
  |  |  659|      7|#define TRACEBACK_LEVELS1	12
  ------------------
  667|      7|  lua_Debug ar;
  668|      7|  if (msg) lua_pushfstring(L, "%s\n", msg);
  ------------------
  |  Branch (668:7): [True: 7, False: 0]
  ------------------
  669|      7|  lua_pushliteral(L, "stack traceback:");
  ------------------
  |  |  276|      7|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  670|      7|  while (lua_getstack(L1, level++, &ar)) {
  ------------------
  |  Branch (670:10): [True: 0, False: 7]
  ------------------
  671|      0|    GCfunc *fn;
  672|      0|    if (level > lim) {
  ------------------
  |  Branch (672:9): [True: 0, False: 0]
  ------------------
  673|      0|      if (!lua_getstack(L1, level + TRACEBACK_LEVELS2, &ar)) {
  ------------------
  |  |  660|      0|#define TRACEBACK_LEVELS2	10
  ------------------
  |  Branch (673:11): [True: 0, False: 0]
  ------------------
  674|      0|	level--;
  675|      0|      } else {
  676|      0|	lua_pushliteral(L, "\n\t...");
  ------------------
  |  |  276|      0|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  677|      0|	lua_getstack(L1, -10, &ar);
  678|      0|	level = ar.i_ci - TRACEBACK_LEVELS2;
  ------------------
  |  |  660|      0|#define TRACEBACK_LEVELS2	10
  ------------------
  679|      0|      }
  680|      0|      lim = 2147483647;
  681|      0|      continue;
  682|      0|    }
  683|      0|    lua_getinfo(L1, "Snlf", &ar);
  684|      0|    fn = funcV(L1->top-1); L1->top--;
  ------------------
  |  |  857|      0|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  685|      0|    if (isffunc(fn) && !*ar.namewhat)
  ------------------
  |  |  478|      0|#define isffunc(fn)	((fn)->c.ffid > FF_C)
  |  |  ------------------
  |  |  |  |  475|      0|#define FF_C		1
  |  |  ------------------
  |  |  |  Branch (478:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (685:24): [True: 0, False: 0]
  ------------------
  686|      0|      lua_pushfstring(L, "\n\t[builtin#%d]:", fn->c.ffid);
  687|      0|    else
  688|      0|      lua_pushfstring(L, "\n\t%s:", ar.short_src);
  689|      0|    if (ar.currentline > 0)
  ------------------
  |  Branch (689:9): [True: 0, False: 0]
  ------------------
  690|      0|      lua_pushfstring(L, "%d:", ar.currentline);
  691|      0|    if (*ar.namewhat) {
  ------------------
  |  Branch (691:9): [True: 0, False: 0]
  ------------------
  692|      0|      lua_pushfstring(L, " in function " LUA_QS, ar.name);
  ------------------
  |  |   86|      0|#define LUA_QS		LUA_QL("%s")
  |  |  ------------------
  |  |  |  |   85|      0|#define LUA_QL(x)	"'" x "'"
  |  |  ------------------
  ------------------
  693|      0|    } else {
  694|      0|      if (*ar.what == 'm') {
  ------------------
  |  Branch (694:11): [True: 0, False: 0]
  ------------------
  695|      0|	lua_pushliteral(L, " in main chunk");
  ------------------
  |  |  276|      0|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  696|      0|      } else if (*ar.what == 'C') {
  ------------------
  |  Branch (696:18): [True: 0, False: 0]
  ------------------
  697|      0|	lua_pushfstring(L, " at %p", fn->c.f);
  698|      0|      } else {
  699|      0|	lua_pushfstring(L, " in function <%s:%d>",
  700|      0|			ar.short_src, ar.linedefined);
  701|      0|      }
  702|      0|    }
  703|      0|    if ((int)(L->top - L->base) - top >= 15)
  ------------------
  |  Branch (703:9): [True: 0, False: 0]
  ------------------
  704|      0|      lua_concat(L, (int)(L->top - L->base) - top);
  705|      0|  }
  706|      7|  lua_concat(L, (int)(L->top - L->base) - top);
  707|      7|}

lj_str.c:lj_getu32:
  237|   182k|{
  238|   182k|  return ((const Unaligned32 *)p)->u;
  239|   182k|}

lj_dispatch_init:
   61|  1.20k|{
   62|  1.20k|  uint32_t i;
   63|  1.20k|  ASMFunction *disp = GG->dispatch;
   64|   108k|  for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|   108k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (64:15): [True: 106k, False: 1.20k]
  ------------------
   65|   106k|    disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |   84|   106k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|   106k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
                  disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|   106k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|   106k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   66|  79.2k|  for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|  1.20k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
                for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|  79.2k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  79.2k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (66:26): [True: 78.0k, False: 1.20k]
  ------------------
   67|  78.0k|    disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  78.0k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|  78.0k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   68|       |  /* The JIT engine is off by default. luaopen_jit() turns it on. */
   69|  1.20k|  disp[BC_FORL] = disp[BC_IFORL];
   70|  1.20k|  disp[BC_ITERL] = disp[BC_IITERL];
   71|       |  /* Workaround for stable v2.1 bytecode. TODO: Replace with BC_IITERN. */
   72|  1.20k|  disp[BC_ITERN] = &lj_vm_IITERN;
   73|  1.20k|  disp[BC_LOOP] = disp[BC_ILOOP];
   74|  1.20k|  disp[BC_FUNCF] = disp[BC_IFUNCF];
   75|  1.20k|  disp[BC_FUNCV] = disp[BC_IFUNCV];
   76|  1.20k|  GG->g.bc_cfunc_ext = GG->g.bc_cfunc_int = BCINS_AD(BC_FUNCC, LUA_MINSTACK, 0);
  ------------------
  |  |   56|  1.20k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   77|  69.6k|  for (i = 0; i < GG_NUM_ASMFF; i++)
  ------------------
  |  |   82|  69.6k|#define GG_NUM_ASMFF	57
  ------------------
  |  Branch (77:15): [True: 68.4k, False: 1.20k]
  ------------------
   78|  68.4k|    GG->bcff[i] = BCINS_AD(BC__MAX+i, 0, 0);
  ------------------
  |  |   56|  68.4k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   79|       |#if LJ_TARGET_MIPS
   80|       |  memcpy(GG->got, dispatch_got, LJ_GOT__MAX*sizeof(ASMFunction *));
   81|       |#endif
   82|  1.20k|}
lj_dispatch_update:
  107|  2.17k|{
  108|  2.17k|  uint8_t oldmode = g->dispatchmode;
  109|  2.17k|  uint8_t mode = 0;
  110|  2.17k|#if LJ_HASJIT
  111|  2.17k|  mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  116|  2.17k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  2.17k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  2.17k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |   16|  2.17k|#define JIT_F_ON		0x00000001
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (111:11): [True: 0, False: 2.17k]
  ------------------
  112|  2.17k|  mode |= G2J(g)->state != LJ_TRACE_IDLE ?
  ------------------
  |  |  116|  2.17k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  2.17k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  2.17k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (112:11): [True: 0, False: 2.17k]
  ------------------
  113|  2.17k|	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  114|  2.17k|#endif
  115|  2.17k|#if LJ_HASPROFILE
  116|  2.17k|  mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  674|  2.17k|#define HOOK_PROFILE		0x80
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (116:11): [True: 0, False: 2.17k]
  ------------------
  117|  2.17k|#endif
  118|  2.17k|  mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  325|  2.17k|#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
  |  |  ------------------
  |  |  |  |  315|  2.17k|#define LUA_HOOKLINE	2
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  326|  2.17k|#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
  |  |  ------------------
  |  |  |  |  316|  2.17k|#define LUA_HOOKCOUNT	3
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  100|    478|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (118:11): [True: 478, False: 1.69k]
  ------------------
  119|  2.17k|  mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |  323|  2.17k|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|  2.17k|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |   98|    314|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (119:11): [True: 314, False: 1.85k]
  ------------------
  120|  2.17k|  mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |  324|  2.17k|#define LUA_MASKRET	(1 << LUA_HOOKRET)
  |  |  ------------------
  |  |  |  |  314|  2.17k|#define LUA_HOOKRET	1
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |   99|    232|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (120:11): [True: 232, False: 1.93k]
  ------------------
  121|  2.17k|  if (oldmode != mode) {  /* Mode changed? */
  ------------------
  |  Branch (121:7): [True: 512, False: 1.65k]
  ------------------
  122|    512|    ASMFunction *disp = G2GG(g)->dispatch;
  ------------------
  |  |  112|    512|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|    512|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  123|    512|    ASMFunction f_forl, f_iterl, f_itern, f_loop, f_funcf, f_funcv;
  124|    512|    g->dispatchmode = mode;
  125|       |
  126|       |    /* Hotcount if JIT is on, but not while recording. */
  127|    512|    if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|    512|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  102|    512|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|    512|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (127:9): [True: 0, False: 512]
  ------------------
  128|      0|      f_forl = makeasmfunc(lj_bc_ofs[BC_FORL]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  129|      0|      f_iterl = makeasmfunc(lj_bc_ofs[BC_ITERL]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  130|      0|      f_itern = makeasmfunc(lj_bc_ofs[BC_ITERN]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  131|      0|      f_loop = makeasmfunc(lj_bc_ofs[BC_LOOP]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  132|      0|      f_funcf = makeasmfunc(lj_bc_ofs[BC_FUNCF]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  133|      0|      f_funcv = makeasmfunc(lj_bc_ofs[BC_FUNCV]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  134|    512|    } else {  /* Otherwise use the non-hotcounting instructions. */
  135|    512|      f_forl = disp[GG_LEN_DDISP+BC_IFORL];
  ------------------
  |  |   84|    512|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|    512|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  136|    512|      f_iterl = disp[GG_LEN_DDISP+BC_IITERL];
  ------------------
  |  |   84|    512|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|    512|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  137|    512|      f_itern = &lj_vm_IITERN;
  138|    512|      f_loop = disp[GG_LEN_DDISP+BC_ILOOP];
  ------------------
  |  |   84|    512|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|    512|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  139|    512|      f_funcf = makeasmfunc(lj_bc_ofs[BC_IFUNCF]);
  ------------------
  |  |  114|    512|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|    512|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  140|    512|      f_funcv = makeasmfunc(lj_bc_ofs[BC_IFUNCV]);
  ------------------
  |  |  114|    512|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|    512|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  141|    512|    }
  142|       |    /* Init static counting instruction dispatch first (may be copied below). */
  143|    512|    disp[GG_LEN_DDISP+BC_FORL] = f_forl;
  ------------------
  |  |   84|    512|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|    512|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  144|    512|    disp[GG_LEN_DDISP+BC_ITERL] = f_iterl;
  ------------------
  |  |   84|    512|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|    512|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  145|    512|    disp[GG_LEN_DDISP+BC_ITERN] = f_itern;
  ------------------
  |  |   84|    512|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|    512|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  146|    512|    disp[GG_LEN_DDISP+BC_LOOP] = f_loop;
  ------------------
  |  |   84|    512|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|    512|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  147|       |
  148|       |    /* Set dynamic instruction dispatch. */
  149|    512|    if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  103|    512|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  102|    512|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  100|    512|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (149:9): [True: 239, False: 273]
  ------------------
  150|       |      /* Need to update the whole table. */
  151|    239|      if (!(mode & DISPMODE_INS)) {  /* No ins dispatch? */
  ------------------
  |  |  100|    239|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (151:11): [True: 0, False: 239]
  ------------------
  152|       |	/* Copy static dispatch table to dynamic dispatch table. */
  153|      0|	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
              	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  154|       |	/* Overwrite with dynamic return dispatch. */
  155|      0|	if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (155:6): [True: 0, False: 0]
  ------------------
  156|      0|	  disp[BC_RETM] = lj_vm_rethook;
  157|      0|	  disp[BC_RET] = lj_vm_rethook;
  158|      0|	  disp[BC_RET0] = lj_vm_rethook;
  159|      0|	  disp[BC_RET1] = lj_vm_rethook;
  160|      0|	}
  161|    239|      } else {
  162|       |	/* The recording dispatch also checks for hooks. */
  163|    239|	ASMFunction f = (mode & DISPMODE_PROF) ? lj_vm_profhook :
  ------------------
  |  |  103|    239|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
  |  Branch (163:18): [True: 0, False: 239]
  ------------------
  164|    239|			(mode & DISPMODE_REC) ? lj_vm_record : lj_vm_inshook;
  ------------------
  |  |  102|    239|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
  |  Branch (164:4): [True: 0, False: 239]
  ------------------
  165|    239|	uint32_t i;
  166|  21.5k|	for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|  21.5k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (166:14): [True: 21.2k, False: 239]
  ------------------
  167|  21.2k|	  disp[i] = f;
  168|    239|      }
  169|    273|    } else if (!(mode & DISPMODE_INS)) {
  ------------------
  |  |  100|    273|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (169:16): [True: 273, False: 0]
  ------------------
  170|       |      /* Otherwise set dynamic counting ins. */
  171|    273|      disp[BC_FORL] = f_forl;
  172|    273|      disp[BC_ITERL] = f_iterl;
  173|    273|      disp[BC_ITERN] = f_itern;
  174|    273|      disp[BC_LOOP] = f_loop;
  175|       |      /* Set dynamic return dispatch. */
  176|    273|      if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|    273|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (176:11): [True: 116, False: 157]
  ------------------
  177|    116|	disp[BC_RETM] = lj_vm_rethook;
  178|    116|	disp[BC_RET] = lj_vm_rethook;
  179|    116|	disp[BC_RET0] = lj_vm_rethook;
  180|    116|	disp[BC_RET1] = lj_vm_rethook;
  181|    157|      } else {
  182|    157|	disp[BC_RETM] = disp[GG_LEN_DDISP+BC_RETM];
  ------------------
  |  |   84|    157|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|    157|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  183|    157|	disp[BC_RET] = disp[GG_LEN_DDISP+BC_RET];
  ------------------
  |  |   84|    157|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|    157|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  184|    157|	disp[BC_RET0] = disp[GG_LEN_DDISP+BC_RET0];
  ------------------
  |  |   84|    157|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|    157|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  185|    157|	disp[BC_RET1] = disp[GG_LEN_DDISP+BC_RET1];
  ------------------
  |  |   84|    157|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|    157|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  186|    157|      }
  187|    273|    }
  188|       |
  189|       |    /* Set dynamic call dispatch. */
  190|    512|    if ((oldmode ^ mode) & DISPMODE_CALL) {  /* Update the whole table? */
  ------------------
  |  |   98|    512|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (190:9): [True: 157, False: 355]
  ------------------
  191|    157|      uint32_t i;
  192|    157|      if ((mode & DISPMODE_CALL) == 0) {  /* No call hooks? */
  ------------------
  |  |   98|    157|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (192:11): [True: 0, False: 157]
  ------------------
  193|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (193:25): [True: 0, False: 0]
  ------------------
  194|      0|	  disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  195|    157|      } else {
  196|  10.3k|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|    157|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|  10.3k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  10.3k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (196:25): [True: 10.2k, False: 157]
  ------------------
  197|  10.2k|	  disp[i] = lj_vm_callhook;
  198|    157|      }
  199|    157|    }
  200|    512|    if (!(mode & DISPMODE_CALL)) {  /* Overwrite dynamic counting ins. */
  ------------------
  |  |   98|    512|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (200:9): [True: 355, False: 157]
  ------------------
  201|    355|      disp[BC_FUNCF] = f_funcf;
  202|    355|      disp[BC_FUNCV] = f_funcv;
  203|    355|    }
  204|       |
  205|    512|#if LJ_HASJIT
  206|       |    /* Reset hotcounts for JIT off to on transition. */
  207|    512|    if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|    512|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (207:9): [True: 0, False: 512]
  |  Branch (207:34): [True: 0, False: 0]
  ------------------
  208|      0|      lj_dispatch_init_hotcount(g);
  209|    512|#endif
  210|    512|  }
  211|  2.17k|}
lua_sethook:
  330|    970|{
  331|    970|  global_State *g = G(L);
  ------------------
  |  |  702|    970|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    970|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  332|    970|  mask &= HOOK_EVENTMASK;
  ------------------
  |  |  669|    970|#define HOOK_EVENTMASK		0x0f
  ------------------
  333|    970|  if (func == NULL || mask == 0) { mask = 0; func = NULL; }  /* Consistency. */
  ------------------
  |  Branch (333:7): [True: 0, False: 970]
  |  Branch (333:23): [True: 458, False: 512]
  ------------------
  334|    970|  g->hookf = func;
  335|    970|  g->hookcount = g->hookcstart = (int32_t)count;
  336|    970|  g->hookmask = (uint8_t)((g->hookmask & ~HOOK_EVENTMASK) | mask);
  ------------------
  |  |  669|    970|#define HOOK_EVENTMASK		0x0f
  ------------------
  337|    970|  lj_trace_abort(g);  /* Abort recording on any hook change. */
  ------------------
  |  |   45|    970|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|    970|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|    970|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|    970|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  338|    970|  lj_dispatch_update(g);
  339|    970|  return 1;
  340|    970|}
lua_gethook:
  343|      3|{
  344|      3|  return G(L)->hookf;
  ------------------
  |  |  702|      3|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      3|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  345|      3|}
lua_gethookmask:
  348|      4|{
  349|      4|  return G(L)->hookmask & HOOK_EVENTMASK;
  ------------------
  |  |  702|      4|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      4|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                return G(L)->hookmask & HOOK_EVENTMASK;
  ------------------
  |  |  669|      4|#define HOOK_EVENTMASK		0x0f
  ------------------
  350|      4|}
lua_gethookcount:
  353|      3|{
  354|      3|  return (int)G(L)->hookcstart;
  ------------------
  |  |  702|      3|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      3|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  355|      3|}
lj_dispatch_call:
  468|      3|{
  469|      3|  ERRNO_SAVE
  ------------------
  |  |  156|      3|#define ERRNO_SAVE	int olderr = errno;
  ------------------
  470|      3|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  707|      3|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  830|      3|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      3|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      3|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  471|      3|  BCOp op;
  472|      3|  global_State *g = G(L);
  ------------------
  |  |  702|      3|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      3|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  473|      3|#if LJ_HASJIT
  474|      3|  jit_State *J = G2J(g);
  ------------------
  |  |  116|      3|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      3|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      3|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  475|      3|#endif
  476|      3|  int missing = call_init(L, fn);
  477|      3|#if LJ_HASJIT
  478|      3|  J->L = L;
  479|      3|  if ((uintptr_t)pc & 1) {  /* Marker for hot call. */
  ------------------
  |  Branch (479:7): [True: 0, False: 3]
  ------------------
  480|      0|#ifdef LUA_USE_ASSERT
  481|      0|    ptrdiff_t delta = L->top - L->base;
  482|      0|#endif
  483|      0|    pc = (const BCIns *)((uintptr_t)pc & ~(uintptr_t)1);
  484|      0|    lj_trace_hot(J, pc);
  485|      0|    lj_assertG(L->top - L->base == delta,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  486|      0|	       "unbalanced stack after hot call");
  487|      0|    goto out;
  488|      3|  } else if (J->state != LJ_TRACE_IDLE &&
  ------------------
  |  Branch (488:14): [True: 0, False: 3]
  ------------------
  489|      3|	     !(g->hookmask & (HOOK_GC|HOOK_VMEVENT))) {
  ------------------
  |  |  673|      0|#define HOOK_GC			0x40
  ------------------
              	     !(g->hookmask & (HOOK_GC|HOOK_VMEVENT))) {
  ------------------
  |  |  672|      0|#define HOOK_VMEVENT		0x20
  ------------------
  |  Branch (489:7): [True: 0, False: 0]
  ------------------
  490|      0|#ifdef LUA_USE_ASSERT
  491|      0|    ptrdiff_t delta = L->top - L->base;
  492|      0|#endif
  493|       |    /* Record the FUNC* bytecodes, too. */
  494|      0|    lj_trace_ins(J, pc-1);  /* The interpreter bytecode PC is offset by 1. */
  495|      0|    lj_assertG(L->top - L->base == delta,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  496|      0|	       "unbalanced stack after hot instruction");
  497|      0|  }
  498|      3|#endif
  499|      3|  if ((g->hookmask & LUA_MASKCALL)) {
  ------------------
  |  |  323|      3|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|      3|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
  |  Branch (499:7): [True: 3, False: 0]
  ------------------
  500|      3|    int i;
  501|      3|    for (i = 0; i < missing; i++)  /* Add missing parameters. */
  ------------------
  |  Branch (501:17): [True: 0, False: 3]
  ------------------
  502|      0|      setnilV(L->top++);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  503|      3|    callhook(L, LUA_HOOKCALL, -1);
  ------------------
  |  |  313|      3|#define LUA_HOOKCALL	0
  ------------------
  504|       |    /* Preserve modifications of missing parameters by lua_setlocal(). */
  505|      3|    while (missing-- > 0 && tvisnil(L->top - 1))
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (505:12): [True: 0, False: 3]
  ------------------
  506|      0|      L->top--;
  507|      3|  }
  508|      3|#if LJ_HASJIT
  509|      3|out:
  510|      3|#endif
  511|      3|  op = bc_op(pc[-1]);  /* Get FUNC* op. */
  ------------------
  |  |   34|      3|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  512|      3|#if LJ_HASJIT
  513|       |  /* Use the non-hotcounting variants if JIT is off or while recording. */
  514|      3|  if ((!(J->flags & JIT_F_ON) || J->state != LJ_TRACE_IDLE) &&
  ------------------
  |  |   16|      3|#define JIT_F_ON		0x00000001
  ------------------
  |  Branch (514:8): [True: 3, False: 0]
  |  Branch (514:34): [True: 0, False: 0]
  ------------------
  515|      3|      (op == BC_FUNCF || op == BC_FUNCV))
  ------------------
  |  Branch (515:8): [True: 0, False: 3]
  |  Branch (515:26): [True: 0, False: 3]
  ------------------
  516|      0|    op = (BCOp)((int)op+(int)BC_IFUNCF-(int)BC_FUNCF);
  517|      3|#endif
  518|      3|  ERRNO_RESTORE
  ------------------
  |  |  157|      3|#define ERRNO_RESTORE	errno = olderr;
  ------------------
  519|      3|  return makeasmfunc(lj_bc_ofs[op]);  /* Return static dispatch target. */
  ------------------
  |  |  114|      3|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      3|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  520|      3|}
lj_dispatch.c:callhook:
  359|      3|{
  360|      3|  global_State *g = G(L);
  ------------------
  |  |  702|      3|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      3|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  361|      3|  lua_Hook hookf = g->hookf;
  362|      3|  if (hookf && !hook_active(g)) {
  ------------------
  |  |  675|      3|#define hook_active(g)		((g)->hookmask & HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  670|      3|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  |  Branch (362:7): [True: 3, False: 0]
  |  Branch (362:16): [True: 3, False: 0]
  ------------------
  363|      3|    lua_Debug ar;
  364|      3|    lj_trace_abort(g);  /* Abort recording on any hook call. */
  ------------------
  |  |   45|      3|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|      3|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|      3|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|      3|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  365|      3|    ar.event = event;
  366|      3|    ar.currentline = line;
  367|       |    /* Top frame, nextframe = NULL. */
  368|      3|    ar.i_ci = (int)((L->base-1) - tvref(L->stack));
  ------------------
  |  |  217|      3|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      3|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  369|      3|    lj_state_checkstack(L, 1+LUA_MINSTACK);
  ------------------
  |  |   88|      3|#define LUA_MINSTACK	20
  ------------------
  370|       |#if LJ_HASPROFILE && !LJ_PROFILE_SIGPROF
  371|       |    lj_profile_hook_enter(g);
  372|       |#else
  373|      3|    hook_enter(g);
  ------------------
  |  |  676|      3|#define hook_enter(g)		((g)->hookmask |= HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  670|      3|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  374|      3|#endif
  375|      3|    hookf(L, &ar);
  376|      3|    lj_assertG(hook_active(g), "active hook flag removed");
  ------------------
  |  |  364|      3|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  377|      3|    setgcref(g->cur_L, obj2gco(L));
  ------------------
  |  |   72|      3|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  378|       |#if LJ_HASPROFILE && !LJ_PROFILE_SIGPROF
  379|       |    lj_profile_hook_leave(g);
  380|       |#else
  381|      3|    hook_leave(g);
  ------------------
  |  |  680|      3|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  670|      3|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  382|      3|#endif
  383|      3|  }
  384|      3|}
lj_dispatch.c:call_init:
  450|      3|{
  451|      3|  if (isluafunc(fn)) {
  ------------------
  |  |  476|      3|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      3|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 3]
  |  |  ------------------
  ------------------
  452|      0|    GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  453|      0|    int numparams = pt->numparams;
  454|      0|    int gotparams = (int)(L->top - L->base);
  455|      0|    int need = pt->framesize;
  456|      0|    if ((pt->flags & PROTO_VARARG)) need += 1+LJ_FR2+gotparams;
  ------------------
  |  |  400|      0|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
                  if ((pt->flags & PROTO_VARARG)) need += 1+LJ_FR2+gotparams;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  |  Branch (456:9): [True: 0, False: 0]
  ------------------
  457|      0|    lj_state_checkstack(L, (MSize)need);
  458|      0|    numparams -= gotparams;
  459|      0|    return numparams >= 0 ? numparams : 0;
  ------------------
  |  Branch (459:12): [True: 0, False: 0]
  ------------------
  460|      3|  } else {
  461|      3|    lj_state_checkstack(L, LUA_MINSTACK);
  ------------------
  |  |   88|      3|#define LUA_MINSTACK	20
  ------------------
  462|      3|    return 0;
  463|      3|  }
  464|      3|}

lj_err_verify:
  511|  1.20k|{
  512|  1.20k|#if !LJ_TARGET_OSX
  513|       |  /* Check disabled on MacOS due to brilliant software engineering at Apple. */
  514|  1.20k|  struct dwarf_eh_bases ehb;
  515|  1.20k|  lj_assertX(_Unwind_Find_FDE((void *)lj_err_throw, &ehb), "broken build: external frame unwinding enabled, but missing -funwind-tables");
  ------------------
  |  |  366|  1.20k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.20k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.20k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  516|  1.20k|#endif
  517|       |  /* Check disabled, because of broken Fedora/ARM64. See #722.
  518|       |  lj_assertX(_Unwind_Find_FDE((void *)_Unwind_RaiseException, &ehb), "broken build: external frame unwinding enabled, but system libraries have no unwind tables");
  519|       |  */
  520|  1.20k|}
lj_err_str:
  808|  1.20k|{
  809|  1.20k|  return lj_str_newz(L, err2msg(em));
  ------------------
  |  |   27|  1.20k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  810|  1.20k|}

lj_func_closeuv:
   84|  2.40k|{
   85|  2.40k|  GCupval *uv;
   86|  2.40k|  global_State *g = G(L);
  ------------------
  |  |  702|  2.40k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.40k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   87|  2.40k|  while (gcref(L->openupval) != NULL &&
  ------------------
  |  |   67|  2.40k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (87:10): [True: 0, False: 2.40k]
  ------------------
   88|  2.40k|	 uvval((uv = gco2uv(gcref(L->openupval)))) >= level) {
  ------------------
  |  |  449|      0|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (88:3): [True: 0, False: 0]
  ------------------
   89|      0|    GCobj *o = obj2gco(uv);
  ------------------
  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   90|      0|    lj_assertG(!isblack(o), "bad black upvalue");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   91|      0|    lj_assertG(!uv->closed && uvval(uv) != &uv->tv, "closed upvalue in chain");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   92|      0|    setgcrefr(L->openupval, uv->nextgc);  /* No longer in open list. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   93|      0|    if (isdead(g, o)) {
  ------------------
  |  |   37|      0|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|      0|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   94|      0|      lj_func_freeuv(g, uv);
   95|      0|    } else {
   96|      0|      unlinkuv(g, uv);
   97|      0|      lj_gc_closeuv(g, uv);
   98|      0|    }
   99|      0|  }
  100|  2.40k|}
lj_func_newC:
  112|  1.23k|{
  113|  1.23k|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeCfunc(nelems));
  ------------------
  |  |  481|  1.23k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  114|  1.23k|  fn->c.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|  1.23k|#define LJ_TFUNC		(~8u)
  ------------------
  115|  1.23k|  fn->c.ffid = FF_C;
  ------------------
  |  |  475|  1.23k|#define FF_C		1
  ------------------
  116|  1.23k|  fn->c.nupvalues = (uint8_t)nelems;
  117|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  118|  1.23k|  setmref(fn->c.pc, &G(L)->bc_cfunc_ext);
  ------------------
  |  |   39|  1.23k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  119|  1.23k|  setgcref(fn->c.env, obj2gco(env));
  ------------------
  |  |   72|  1.23k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  120|  1.23k|  return fn;
  121|  1.23k|}
lj_func_free:
  186|  1.23k|{
  187|  1.23k|  MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|  1.23k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  1.23k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 1.23k]
  |  |  ------------------
  ------------------
                MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|      0|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  188|  1.23k|			       sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|  2.46k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  189|  1.23k|  lj_mem_free(g, fn, size);
  190|  1.23k|}

lj_gc_separateudata:
  142|  2.79k|{
  143|  2.79k|  size_t m = 0;
  144|  2.79k|  GCRef *p = &mainthread(g)->nextgc;
  ------------------
  |  |  662|  2.79k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  2.79k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  145|  2.79k|  GCobj *o;
  146|  2.80k|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  2.80k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (146:10): [True: 6, False: 2.79k]
  ------------------
  147|      6|    if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   32|     12|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      6|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      6|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      6|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 6, False: 0]
  |  |  ------------------
  ------------------
                  if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   40|     12|#define isfinalized(u)		((u)->marked & LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      6|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  |  |  |  Branch (40:25): [True: 3, False: 3]
  |  |  |  Branch (40:27): [True: 6, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (147:25): [True: 0, False: 0]
  ------------------
  148|      3|      p = &o->gch.nextgc;  /* Nothing to do. */
  149|      3|    } else if (!lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc)) {
  ------------------
  |  |   20|      6|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 3, False: 0]
  |  |  |  Branch (20:5): [True: 3, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  Branch (20:28): [True: 0, False: 0]
  |  |  ------------------
  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  587|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (149:16): [True: 3, False: 0]
  ------------------
  150|      3|      markfinalized(o);  /* Done, as there's no __gc metamethod. */
  ------------------
  |  |   46|      3|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      3|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  151|      3|      p = &o->gch.nextgc;
  152|      3|    } else {  /* Otherwise move userdata to be finalized to mmudata list. */
  153|      0|      m += sizeudata(gco2ud(o));
  ------------------
  |  |  343|      0|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  |  |  ------------------
  |  |  |  Branch (343:47): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  154|      0|      markfinalized(o);
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  155|      0|      *p = o->gch.nextgc;
  156|      0|      if (gcref(g->gc.mmudata)) {  /* Link to end of mmudata list. */
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  157|      0|	GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  158|      0|	setgcrefr(o->gch.nextgc, root->gch.nextgc);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  159|      0|	setgcref(root->gch.nextgc, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  160|      0|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  161|      0|      } else {  /* Create circular list. */
  162|      0|	setgcref(o->gch.nextgc, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  163|      0|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  164|      0|      }
  165|      0|    }
  166|      6|  }
  167|  2.79k|  return m;
  168|  2.79k|}
lj_gc_finalize_udata:
  578|  1.20k|{
  579|  1.20k|  while (gcref(G(L)->gc.mmudata) != NULL)
  ------------------
  |  |   67|  1.20k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (579:10): [True: 0, False: 1.20k]
  ------------------
  580|      0|    gc_finalize(L);
  581|  1.20k|}
lj_gc_finalize_cdata:
  586|  1.20k|{
  587|  1.20k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.20k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  588|  1.20k|  CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  385|  1.20k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  589|  1.20k|  if (cts) {
  ------------------
  |  Branch (589:7): [True: 0, False: 1.20k]
  ------------------
  590|      0|    GCtab *t = cts->finalizer;
  591|      0|    Node *node = noderef(t->node);
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  592|      0|    ptrdiff_t i;
  593|      0|    setgcrefnull(t->metatable);  /* Mark finalizer table as disabled. */
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  594|      0|    for (i = (ptrdiff_t)t->hmask; i >= 0; i--)
  ------------------
  |  Branch (594:35): [True: 0, False: 0]
  ------------------
  595|      0|      if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
                    if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  796|      0|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|      0|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (796:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (595:11): [True: 0, False: 0]
  ------------------
  596|      0|	GCobj *o = gcV(&node[i].key);
  ------------------
  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  597|      0|	TValue tmp;
  598|      0|	makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  599|      0|	o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  600|      0|	copyTV(L, &tmp, &node[i].val);
  601|      0|	setnilV(&node[i].val);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  602|      0|	gc_call_finalizer(g, L, &tmp, o);
  603|      0|      }
  604|      0|  }
  605|  1.20k|}
lj_gc_freeall:
  610|  1.20k|{
  611|  1.20k|  MSize i, strmask;
  612|       |  /* Free everything, except super-fixed objects (the main thread). */
  613|  1.20k|  g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   27|  1.20k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  1.20k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  1.20k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
                g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   25|  1.20k|#define LJ_GC_SFIXED	0x40
  ------------------
  614|  1.20k|  gc_fullsweep(g, &g->gc.root);
  ------------------
  |  |  402|  1.20k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  ------------------
  615|  1.20k|  strmask = g->str.mask;
  616|   308k|  for (i = 0; i <= strmask; i++)  /* Free all string hash chains. */
  ------------------
  |  Branch (616:15): [True: 307k, False: 1.20k]
  ------------------
  617|   307k|    gc_sweepstr(g, &g->str.tab[i]);
  618|  1.20k|}
lj_gc_step:
  733|    303|{
  734|    303|  global_State *g = G(L);
  ------------------
  |  |  702|    303|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    303|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  735|    303|  GCSize lim;
  736|    303|  int32_t ostate = g->vmstate;
  737|    303|  setvmstate(g, GC);
  ------------------
  |  |  539|    303|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  738|    303|  lim = (GCSTEPSIZE/100) * g->gc.stepmul;
  ------------------
  |  |   32|    303|#define GCSTEPSIZE	1024u
  ------------------
  739|    303|  if (lim == 0)
  ------------------
  |  Branch (739:7): [True: 1, False: 302]
  ------------------
  740|      1|    lim = LJ_MAX_MEM;
  ------------------
  |  |   52|      1|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      1|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      1|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  741|    303|  if (g->gc.total > g->gc.threshold)
  ------------------
  |  Branch (741:7): [True: 6, False: 297]
  ------------------
  742|      6|    g->gc.debt += g->gc.total - g->gc.threshold;
  743|  13.6k|  do {
  744|  13.6k|    lim -= (GCSize)gc_onestep(L);
  745|  13.6k|    if (g->gc.state == GCSpause) {
  ------------------
  |  Branch (745:9): [True: 1, False: 13.6k]
  ------------------
  746|      1|      g->gc.threshold = (g->gc.estimate/100) * g->gc.pause;
  747|      1|      g->vmstate = ostate;
  748|      1|      return 1;  /* Finished a GC cycle. */
  749|      1|    }
  750|  13.6k|  } while (sizeof(lim) == 8 ? ((int64_t)lim > 0) : ((int32_t)lim > 0));
  ------------------
  |  Branch (750:12): [Folded - Ignored]
  |  Branch (750:12): [True: 13.3k, False: 302]
  ------------------
  751|    302|  if (g->gc.debt < GCSTEPSIZE) {
  ------------------
  |  |   32|    302|#define GCSTEPSIZE	1024u
  ------------------
  |  Branch (751:7): [True: 302, False: 0]
  ------------------
  752|    302|    g->gc.threshold = g->gc.total + GCSTEPSIZE;
  ------------------
  |  |   32|    302|#define GCSTEPSIZE	1024u
  ------------------
  753|    302|    g->vmstate = ostate;
  754|    302|    return -1;
  755|    302|  } else {
  756|      0|    g->gc.debt -= GCSTEPSIZE;
  ------------------
  |  |   32|      0|#define GCSTEPSIZE	1024u
  ------------------
  757|      0|    g->gc.threshold = g->gc.total;
  758|      0|    g->vmstate = ostate;
  759|      0|    return 0;
  760|      0|  }
  761|    302|}
lj_gc_fullgc:
  786|    281|{
  787|    281|  global_State *g = G(L);
  ------------------
  |  |  702|    281|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    281|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  788|    281|  int32_t ostate = g->vmstate;
  789|    281|  setvmstate(g, GC);
  ------------------
  |  |  539|    281|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  790|    281|  if (g->gc.state <= GCSatomic) {  /* Caught somewhere in the middle. */
  ------------------
  |  Branch (790:7): [True: 281, False: 0]
  ------------------
  791|    281|    setmref(g->gc.sweep, &g->gc.root);  /* Sweep everything (preserving it). */
  ------------------
  |  |   39|    281|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  792|    281|    setgcrefnull(g->gc.gray);  /* Reset lists from partial propagation. */
  ------------------
  |  |   76|    281|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  793|    281|    setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|    281|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  794|    281|    setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|    281|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  795|    281|    g->gc.state = GCSsweepstring;  /* Fast forward to the sweep phase. */
  796|    281|    g->gc.sweepstr = 0;
  797|    281|  }
  798|  72.4k|  while (g->gc.state == GCSsweepstring || g->gc.state == GCSsweep)
  ------------------
  |  Branch (798:10): [True: 71.9k, False: 562]
  |  Branch (798:43): [True: 281, False: 281]
  ------------------
  799|  72.2k|    gc_onestep(L);  /* Finish sweep. */
  800|    281|  lj_assertG(g->gc.state == GCSfinalize || g->gc.state == GCSpause,
  ------------------
  |  |  364|    281|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    562|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 281]
  |  |  |  |  |  Branch (355:5): [True: 281, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    281|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  801|      0|	     "bad GC state");
  802|       |  /* Now perform a full GC. */
  803|      0|  g->gc.state = GCSpause;
  804|  74.8k|  do { gc_onestep(L); } while (g->gc.state != GCSpause);
  ------------------
  |  Branch (804:32): [True: 74.5k, False: 281]
  ------------------
  805|    281|  g->gc.threshold = (g->gc.estimate/100) * g->gc.pause;
  806|    281|  g->vmstate = ostate;
  807|    281|}
lj_mem_realloc:
  874|  62.5k|{
  875|  62.5k|  global_State *g = G(L);
  ------------------
  |  |  702|  62.5k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  62.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  876|  62.5k|  lj_assertG((osz == 0) == (p == NULL), "realloc API violation");
  ------------------
  |  |  364|  62.5k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  62.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 62.5k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  62.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  877|      0|  p = g->allocf(g->allocd, p, osz, nsz);
  878|  62.5k|  if (p == NULL && nsz > 0)
  ------------------
  |  Branch (878:7): [True: 0, False: 62.5k]
  |  Branch (878:20): [True: 0, False: 0]
  ------------------
  879|      0|    lj_err_mem(L);
  880|  62.5k|  lj_assertG((nsz == 0) == (p == NULL), "allocf API violation");
  ------------------
  |  |  364|  62.5k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  62.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 62.5k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  62.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  881|  62.5k|  lj_assertG(checkptrGC(p),
  ------------------
  |  |  364|  62.5k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   125k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 62.5k, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|  62.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  882|      0|	     "allocated memory address %p outside required range", p);
  883|      0|  g->gc.total = (g->gc.total - osz) + nsz;
  884|  62.5k|  return p;
  885|  62.5k|}
lj_mem_newgco:
  889|  6.10k|{
  890|  6.10k|  global_State *g = G(L);
  ------------------
  |  |  702|  6.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  6.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  891|  6.10k|  GCobj *o = (GCobj *)g->allocf(g->allocd, NULL, 0, size);
  892|  6.10k|  if (o == NULL)
  ------------------
  |  Branch (892:7): [True: 0, False: 6.10k]
  ------------------
  893|      0|    lj_err_mem(L);
  894|  6.10k|  lj_assertG(checkptrGC(o),
  ------------------
  |  |  364|  6.10k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  12.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 6.10k, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  895|      0|	     "allocated memory address %p outside required range", o);
  896|      0|  g->gc.total += size;
  897|  6.10k|  setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|  6.10k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  898|  6.10k|  setgcref(g->gc.root, o);
  ------------------
  |  |   72|  6.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  899|  6.10k|  newwhite(g, o);
  ------------------
  |  |   40|  6.10k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  772|  6.10k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  6.10k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  6.10k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  6.10k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  6.10k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  900|  6.10k|  return o;
  901|  6.10k|}
lj_gc.c:gc_sweep:
  406|  4.49k|{
  407|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  408|  4.49k|  int ow = otherwhite(g);
  ------------------
  |  |   36|  4.49k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  4.49k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  4.49k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  4.49k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  409|  4.49k|  GCobj *o;
  410|  15.3k|  while ((o = gcref(*p)) != NULL && lim-- > 0) {
  ------------------
  |  |   67|  15.3k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (410:10): [True: 10.8k, False: 4.49k]
  |  Branch (410:37): [True: 10.8k, False: 0]
  ------------------
  411|  10.8k|    if (o->gch.gct == ~LJ_TTHREAD)  /* Need to sweep open upvalues, too. */
  ------------------
  |  |  266|  10.8k|#define LJ_TTHREAD		(~6u)
  ------------------
  |  Branch (411:9): [True: 2.73k, False: 8.08k]
  ------------------
  412|  2.73k|      gc_fullsweep(g, &gco2th(o)->openupval);
  ------------------
  |  |  402|  5.46k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  |  |  ------------------
  |  |  |  Branch (402:41): [True: 2.73k, False: 0]
  |  |  ------------------
  ------------------
  413|  10.8k|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|  10.8k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  10.8k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  10.8k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (413:9): [True: 4.71k, False: 6.10k]
  ------------------
  414|  4.71k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|  4.71k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.71k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 4.71k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.71k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  415|      0|		 "sweep of undead object");
  416|  4.71k|      makewhite(g, o);  /* Value is alive, change to the current white. */
  ------------------
  |  |   42|  4.71k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|  4.71k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  4.71k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  4.71k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  4.71k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  4.71k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  4.71k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  4.71k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  4.71k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  4.71k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  417|  4.71k|      p = &o->gch.nextgc;
  418|  6.10k|    } else {  /* Otherwise value is dead, free it. */
  419|  6.10k|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|  6.10k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  12.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 6.10k]
  |  |  |  |  |  Branch (355:5): [True: 6.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  420|      0|		 "sweep of unlive object");
  421|  6.10k|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|  6.10k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  422|  6.10k|      if (o == gcref(g->gc.root))
  ------------------
  |  |   67|  6.10k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (422:11): [True: 0, False: 6.10k]
  ------------------
  423|      0|	setgcrefr(g->gc.root, o->gch.nextgc);  /* Adjust list anchor. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  424|  6.10k|      gc_freefunc[o->gch.gct - ~LJ_TSTR](g, o);
  ------------------
  |  |  264|  6.10k|#define LJ_TSTR			(~4u)
  ------------------
  425|  6.10k|    }
  426|  10.8k|  }
  427|  4.49k|  return p;
  428|  4.49k|}
lj_gc.c:gc_sweepstr:
  432|   463k|{
  433|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  434|   463k|  int ow = otherwhite(g);
  ------------------
  |  |   36|   463k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   463k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   463k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   463k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  435|   463k|  uintptr_t u = gcrefu(*chain);
  ------------------
  |  |   69|   463k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  436|   463k|  GCRef q;
  437|   463k|  GCRef *p = &q;
  438|   463k|  GCobj *o;
  439|   463k|  setgcrefp(q, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|   463k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  440|   547k|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|   547k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (440:10): [True: 83.9k, False: 463k]
  ------------------
  441|  83.9k|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|  83.9k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  83.9k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  83.9k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (441:9): [True: 28.2k, False: 55.6k]
  ------------------
  442|  28.2k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|  28.2k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  35.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 20.6k, False: 7.60k]
  |  |  |  |  |  Branch (355:5): [True: 7.60k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  28.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  443|      0|		 "sweep of undead string");
  444|  28.2k|      makewhite(g, o);  /* String is alive, change to the current white. */
  ------------------
  |  |   42|  28.2k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|  28.2k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  28.2k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  28.2k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  28.2k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  28.2k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  28.2k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  28.2k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  28.2k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  28.2k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  445|  28.2k|      p = &o->gch.nextgc;
  446|  55.6k|    } else {  /* Otherwise string is dead, free it. */
  447|  55.6k|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|  55.6k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   111k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 55.6k]
  |  |  |  |  |  Branch (355:5): [True: 55.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  55.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  448|      0|		 "sweep of unlive string");
  449|  55.6k|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|  55.6k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  450|  55.6k|      lj_str_free(g, gco2str(o));
  ------------------
  |  |  762|  55.6k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  55.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  55.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  55.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 55.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  55.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  451|  55.6k|    }
  452|  83.9k|  }
  453|   463k|  setgcrefp(*chain, (gcrefu(q) | (u & 1)));
  ------------------
  |  |   75|   463k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  454|   463k|}
lj_gc.c:gc_onestep:
  660|   160k|{
  661|   160k|  global_State *g = G(L);
  ------------------
  |  |  702|   160k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   160k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  662|   160k|  switch (g->gc.state) {
  663|    471|  case GCSpause:
  ------------------
  |  Branch (663:3): [True: 471, False: 160k]
  ------------------
  664|    471|    gc_mark_start(g);  /* Start a new GC cycle by marking all GC roots. */
  665|    471|    return 0;
  666|  3.32k|  case GCSpropagate:
  ------------------
  |  Branch (666:3): [True: 3.32k, False: 157k]
  ------------------
  667|  3.32k|    if (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|  3.32k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (667:9): [True: 2.92k, False: 395]
  ------------------
  668|  2.92k|      return propagatemark(g);  /* Propagate one gray object. */
  669|    395|    g->gc.state = GCSatomic;  /* End of mark phase. */
  670|    395|    return 0;
  671|    395|  case GCSatomic:
  ------------------
  |  Branch (671:3): [True: 395, False: 160k]
  ------------------
  672|    395|    if (tvref(g->jit_base))  /* Don't run atomic phase on trace. */
  ------------------
  |  |  217|    395|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    395|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 395]
  |  |  ------------------
  ------------------
  673|      0|      return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  674|    395|    atomic(g, L);
  675|    395|    g->gc.state = GCSsweepstring;  /* Start of sweep phase. */
  676|    395|    g->gc.sweepstr = 0;
  677|    395|    return 0;
  678|   155k|  case GCSsweepstring: {
  ------------------
  |  Branch (678:3): [True: 155k, False: 4.75k]
  ------------------
  679|   155k|    GCSize old = g->gc.total;
  680|   155k|    gc_sweepstr(g, &g->str.tab[g->gc.sweepstr++]);  /* Sweep one chain. */
  681|   155k|    if (g->gc.sweepstr > g->str.mask)
  ------------------
  |  Branch (681:9): [True: 563, False: 155k]
  ------------------
  682|    563|      g->gc.state = GCSsweep;  /* All string hash chains sweeped. */
  683|   155k|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|   155k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   155k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 155k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   155k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  684|      0|    g->gc.estimate -= old - g->gc.total;
  685|   155k|    return GCSWEEPCOST;
  ------------------
  |  |   34|   155k|#define GCSWEEPCOST	10
  ------------------
  686|    395|    }
  687|    563|  case GCSsweep: {
  ------------------
  |  Branch (687:3): [True: 563, False: 160k]
  ------------------
  688|    563|    GCSize old = g->gc.total;
  689|    563|    setmref(g->gc.sweep, gc_sweep(g, mref(g->gc.sweep, GCRef), GCSWEEPMAX));
  ------------------
  |  |   39|    563|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  690|    563|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|    563|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    563|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 563, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    563|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  691|      0|    g->gc.estimate -= old - g->gc.total;
  692|    563|    if (gcref(*mref(g->gc.sweep, GCRef)) == NULL) {
  ------------------
  |  |   67|    563|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (692:9): [True: 563, False: 0]
  ------------------
  693|    563|      if (g->str.num <= (g->str.mask >> 2) && g->str.mask > LJ_MIN_STRTAB*2-1)
  ------------------
  |  |   79|    563|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  |  Branch (693:11): [True: 563, False: 0]
  |  Branch (693:47): [True: 0, False: 563]
  ------------------
  694|      0|	lj_str_resize(L, g->str.mask >> 1);  /* Shrink string table. */
  695|    563|      if (gcref(g->gc.mmudata)) {  /* Need any finalizations? */
  ------------------
  |  |   67|    563|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 563]
  |  |  ------------------
  ------------------
  696|      0|	g->gc.state = GCSfinalize;
  697|      0|#if LJ_HASFFI
  698|      0|	g->gc.nocdatafin = 1;
  699|      0|#endif
  700|    563|      } else {  /* Otherwise skip this phase to help the JIT. */
  701|    563|	g->gc.state = GCSpause;  /* End of GC cycle. */
  702|    563|	g->gc.debt = 0;
  703|    563|      }
  704|    563|    }
  705|    563|    return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   33|    563|#define GCSWEEPMAX	40
  ------------------
                  return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   34|    563|#define GCSWEEPCOST	10
  ------------------
  706|    395|    }
  707|      0|  case GCSfinalize:
  ------------------
  |  Branch (707:3): [True: 0, False: 160k]
  ------------------
  708|      0|    if (gcref(g->gc.mmudata) != NULL) {
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (708:9): [True: 0, False: 0]
  ------------------
  709|      0|      GCSize old = g->gc.total;
  710|      0|      if (tvref(g->jit_base))  /* Don't call finalizers on trace. */
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  711|      0|	return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  712|      0|      gc_finalize(L);  /* Finalize one userdata object. */
  713|      0|      if (old >= g->gc.total && g->gc.estimate > old - g->gc.total)
  ------------------
  |  Branch (713:11): [True: 0, False: 0]
  |  Branch (713:33): [True: 0, False: 0]
  ------------------
  714|      0|	g->gc.estimate -= old - g->gc.total;
  715|      0|      if (g->gc.estimate > GCFINALIZECOST)
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  |  Branch (715:11): [True: 0, False: 0]
  ------------------
  716|      0|	g->gc.estimate -= GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  717|      0|      return GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  718|      0|    }
  719|      0|#if LJ_HASFFI
  720|      0|    if (!g->gc.nocdatafin) lj_tab_rehash(L, ctype_ctsG(g)->finalizer);
  ------------------
  |  |  385|      0|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (720:9): [True: 0, False: 0]
  ------------------
  721|      0|#endif
  722|      0|    g->gc.state = GCSpause;  /* End of GC cycle. */
  723|      0|    g->gc.debt = 0;
  724|      0|    return 0;
  725|      0|  default:
  ------------------
  |  Branch (725:3): [True: 0, False: 160k]
  ------------------
  726|      0|    lj_assertG(0, "bad GC state");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  727|      0|    return 0;
  728|   160k|  }
  729|   160k|}
lj_gc.c:gc_mark_start:
  103|    471|{
  104|    471|  setgcrefnull(g->gc.gray);
  ------------------
  |  |   76|    471|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  105|    471|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|    471|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  106|    471|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|    471|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  107|    471|  gc_markobj(g, mainthread(g));
  ------------------
  |  |   52|    471|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|    471|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    471|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    471|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    471|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 471, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|    471|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  108|    471|  gc_markobj(g, tabref(mainthread(g)->env));
  ------------------
  |  |   52|    471|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|    471|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    471|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    471|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    471|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 471, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|    471|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  109|    471|  gc_marktv(g, &g->registrytv);
  ------------------
  |  |   46|    471|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|    471|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    942|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 471]
  |  |  |  |  |  |  |  Branch (355:5): [True: 471, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    471|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|    471|	       "TValue and GC type mismatch"); \
  |  |   48|    471|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|    471|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|    942|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|    471|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|    471|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|    471|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|    471|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|    471|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|    471|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 471, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|    942|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|    471|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|    471|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|    471|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 471, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 471, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|    471|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    471|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    471|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    471|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 471, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    471|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  110|    471|  gc_mark_gcroot(g);
  111|    471|  g->gc.state = GCSpropagate;
  112|    471|}
lj_gc.c:gc_mark_gcroot:
   94|    866|{
   95|    866|  ptrdiff_t i;
   96|  33.7k|  for (i = 0; i < GCROOT_MAX; i++)
  ------------------
  |  Branch (96:15): [True: 32.9k, False: 866]
  ------------------
   97|  32.9k|    if (gcref(g->gcroot[i]) != NULL)
  ------------------
  |  |   67|  32.9k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (97:9): [True: 19.0k, False: 13.8k]
  ------------------
   98|  19.0k|      gc_markobj(g, gcref(g->gcroot[i]));
  ------------------
  |  |   52|  19.0k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  19.0k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  19.0k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  19.0k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  19.0k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 10.3k, False: 8.69k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|  10.3k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   99|    866|}
lj_gc.c:propagatemark:
  325|  3.69k|{
  326|  3.69k|  GCobj *o = gcref(g->gc.gray);
  ------------------
  |  |   67|  3.69k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  327|  3.69k|  int gct = o->gch.gct;
  328|  3.69k|  lj_assertG(isgray(o), "propagation of non-gray object");
  ------------------
  |  |  364|  3.69k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.69k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.69k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.69k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  329|  3.69k|  gray2black(o);
  ------------------
  |  |   39|  3.69k|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  3.69k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  330|  3.69k|  setgcrefr(g->gc.gray, o->gch.gclist);  /* Remove from gray list. */
  ------------------
  |  |   77|  3.69k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  331|  3.69k|  if (LJ_LIKELY(gct == ~LJ_TTAB)) {
  ------------------
  |  |  145|  3.69k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1.61k, False: 2.07k]
  |  |  ------------------
  ------------------
  332|  1.61k|    GCtab *t = gco2tab(o);
  ------------------
  |  |  768|  1.61k|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  1.61k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.61k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.61k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.61k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.61k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  333|  1.61k|    if (gc_traverse_tab(g, t) > 0)
  ------------------
  |  Branch (333:9): [True: 0, False: 1.61k]
  ------------------
  334|      0|      black2gray(o);  /* Keep weak tables gray. */
  ------------------
  |  |   44|      0|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  335|  1.61k|    return sizeof(GCtab) + sizeof(TValue) * t->asize +
  336|  1.61k|			   (t->hmask ? sizeof(Node) * (t->hmask + 1) : 0);
  ------------------
  |  Branch (336:8): [True: 1.41k, False: 203]
  ------------------
  337|  2.07k|  } else if (LJ_LIKELY(gct == ~LJ_TFUNC)) {
  ------------------
  |  |  145|  2.07k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 471, False: 1.60k]
  |  |  ------------------
  ------------------
  338|    471|    GCfunc *fn = gco2func(o);
  ------------------
  |  |  766|    471|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  ------------------
  |  |  |  |  367|    471|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    471|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    471|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 471, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    471|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  339|      0|    gc_traverse_func(g, fn);
  340|    471|    return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|    471|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|    471|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 471]
  |  |  ------------------
  ------------------
                  return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|      0|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  341|    471|			   sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|    471|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  342|  1.60k|  } else if (LJ_LIKELY(gct == ~LJ_TPROTO)) {
  ------------------
  |  |  145|  1.60k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 1.60k]
  |  |  ------------------
  ------------------
  343|      0|    GCproto *pt = gco2pt(o);
  ------------------
  |  |  765|      0|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  344|      0|    gc_traverse_proto(g, pt);
  345|      0|    return pt->sizept;
  346|  1.60k|  } else if (LJ_LIKELY(gct == ~LJ_TTHREAD)) {
  ------------------
  |  |  145|  1.60k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1.60k, False: 0]
  |  |  ------------------
  ------------------
  347|  1.60k|    lua_State *th = gco2th(o);
  ------------------
  |  |  764|  1.60k|#define gco2th(o)	check_exp((o)->gch.gct == ~LJ_TTHREAD, &(o)->th)
  |  |  ------------------
  |  |  |  |  367|  1.60k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.60k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.60k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.60k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.60k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  348|  1.60k|    setgcrefr(th->gclist, g->gc.grayagain);
  ------------------
  |  |   77|  1.60k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  349|  1.60k|    setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|  1.60k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  350|  1.60k|    black2gray(o);  /* Threads are never black. */
  ------------------
  |  |   44|  1.60k|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  1.60k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  351|  1.60k|    gc_traverse_thread(g, th);
  352|  1.60k|    return sizeof(lua_State) + sizeof(TValue) * th->stacksize;
  353|  1.60k|  } else {
  354|      0|#if LJ_HASJIT
  355|      0|    GCtrace *T = gco2trace(o);
  ------------------
  |  |  296|      0|#define gco2trace(o)	check_exp((o)->gch.gct == ~LJ_TTRACE, (GCtrace *)(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  356|      0|    gc_traverse_trace(g, T);
  357|      0|    return ((sizeof(GCtrace)+7)&~7) + (T->nins-T->nk)*sizeof(IRIns) +
  358|      0|	   T->nsnap*sizeof(SnapShot) + T->nsnapmap*sizeof(SnapEntry);
  359|       |#else
  360|       |    lj_assertG(0, "bad GC type %d", gct);
  361|       |    return 0;
  362|       |#endif
  363|      0|  }
  364|  3.69k|}
lj_gc.c:gc_traverse_tab:
  174|  1.61k|{
  175|  1.61k|  int weak = 0;
  176|  1.61k|  cTValue *mode;
  177|  1.61k|  GCtab *mt = tabref(t->metatable);
  ------------------
  |  |  514|  1.61k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  1.61k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  178|  1.61k|  if (mt)
  ------------------
  |  Branch (178:7): [True: 0, False: 1.61k]
  ------------------
  179|      0|    gc_markobj(g, mt);
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  180|  1.61k|  mode = lj_meta_fastg(g, mt, MM_mode);
  ------------------
  |  |   20|  1.61k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 1.61k, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  ------------------
  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  587|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  181|  1.61k|  if (mode && tvisstr(mode)) {  /* Valid __mode field? */
  ------------------
  |  |  792|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (181:7): [True: 0, False: 1.61k]
  ------------------
  182|      0|    const char *modestr = strVdata(mode);
  ------------------
  |  |  318|      0|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|    int c;
  184|      0|    while ((c = *modestr++)) {
  ------------------
  |  Branch (184:12): [True: 0, False: 0]
  ------------------
  185|      0|      if (c == 'k') weak |= LJ_GC_WEAKKEY;
  ------------------
  |  |   21|      0|#define LJ_GC_WEAKKEY	0x08
  ------------------
  |  Branch (185:11): [True: 0, False: 0]
  ------------------
  186|      0|      else if (c == 'v') weak |= LJ_GC_WEAKVAL;
  ------------------
  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (186:16): [True: 0, False: 0]
  ------------------
  187|      0|    }
  188|      0|    if (weak) {  /* Weak tables are cleared in the atomic phase. */
  ------------------
  |  Branch (188:9): [True: 0, False: 0]
  ------------------
  189|      0|#if LJ_HASFFI
  190|      0|      CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  385|      0|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  191|      0|      if (cts && cts->finalizer == t) {
  ------------------
  |  Branch (191:11): [True: 0, False: 0]
  |  Branch (191:18): [True: 0, False: 0]
  ------------------
  192|      0|	weak = (int)(~0u & ~LJ_GC_WEAKVAL);
  ------------------
  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  ------------------
  193|      0|      } else
  194|      0|#endif
  195|      0|      {
  196|      0|	t->marked = (uint8_t)((t->marked & ~LJ_GC_WEAK) | weak);
  ------------------
  |  |   29|      0|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|      0|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  197|      0|	setgcrefr(t->gclist, g->gc.weak);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  198|      0|	setgcref(g->gc.weak, obj2gco(t));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  199|      0|      }
  200|      0|    }
  201|      0|  }
  202|  1.61k|  if (weak == LJ_GC_WEAK)  /* Nothing to mark if both keys/values are weak. */
  ------------------
  |  |   29|  1.61k|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|  1.61k|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|  1.61k|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  |  Branch (202:7): [True: 0, False: 1.61k]
  ------------------
  203|      0|    return 1;
  204|  1.61k|  if (!(weak & LJ_GC_WEAKVAL)) {  /* Mark array part. */
  ------------------
  |  |   22|  1.61k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (204:7): [True: 1.61k, False: 0]
  ------------------
  205|  1.61k|    MSize i, asize = t->asize;
  206|  1.61k|    for (i = 0; i < asize; i++)
  ------------------
  |  Branch (206:17): [True: 0, False: 1.61k]
  ------------------
  207|      0|      gc_marktv(g, arrayslot(t, i));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  208|  1.61k|  }
  209|  1.61k|  if (t->hmask > 0) {  /* Mark hash part. */
  ------------------
  |  Branch (209:7): [True: 1.41k, False: 203]
  ------------------
  210|  1.41k|    Node *node = noderef(t->node);
  ------------------
  |  |  515|  1.41k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  1.41k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  211|  1.41k|    MSize i, hmask = t->hmask;
  212|  35.3k|    for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (212:17): [True: 33.9k, False: 1.41k]
  ------------------
  213|  33.9k|      Node *n = &node[i];
  214|  33.9k|      if (!tvisnil(&n->val)) {  /* Mark non-empty slot. */
  ------------------
  |  |  779|  33.9k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (214:11): [True: 942, False: 32.9k]
  ------------------
  215|    942|	lj_assertG(!tvisnil(&n->key), "mark of nil key in non-empty slot");
  ------------------
  |  |  364|    942|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    942|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 942, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    942|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  216|    942|	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   21|    942|#define LJ_GC_WEAKKEY	0x08
  ------------------
              	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   46|    942|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|    942|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.41k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 471, False: 471]
  |  |  |  |  |  |  |  Branch (355:5): [True: 471, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    942|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|    942|	       "TValue and GC type mismatch"); \
  |  |   48|    942|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|    942|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|  1.88k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|    942|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|    942|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|    942|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|    942|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|    942|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|    942|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 471, False: 471]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|    942|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|    471|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|    471|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|    471|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 471, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 471, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|    471|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    471|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    471|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    471|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 471, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    471|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (216:6): [True: 942, False: 0]
  ------------------
  217|    942|	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   22|    942|#define LJ_GC_WEAKVAL	0x10
  ------------------
              	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   46|    942|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|    942|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.88k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 942]
  |  |  |  |  |  |  |  Branch (355:5): [True: 942, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    942|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|    942|	       "TValue and GC type mismatch"); \
  |  |   48|    942|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|    942|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|  1.88k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|    942|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|    942|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|    942|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|    942|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|    942|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|    942|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 942, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  1.88k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|    942|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|    942|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|    942|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 942, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 942, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|    942|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    942|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    942|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    942|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 942, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    942|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (217:6): [True: 942, False: 0]
  ------------------
  218|    942|      }
  219|  33.9k|    }
  220|  1.41k|  }
  221|  1.61k|  return weak;
  222|  1.61k|}
lj_gc.c:gc_traverse_func:
  226|    471|{
  227|    471|  gc_markobj(g, tabref(fn->c.env));
  ------------------
  |  |   52|    471|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|    471|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    471|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    471|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    471|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 471]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  228|    471|  if (isluafunc(fn)) {
  ------------------
  |  |  476|    471|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|    471|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 471]
  |  |  ------------------
  ------------------
  229|      0|    uint32_t i;
  230|      0|    lj_assertG(fn->l.nupvalues <= funcproto(fn)->sizeuv,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  231|      0|	       "function upvalues out of range");
  232|      0|    gc_markobj(g, funcproto(fn));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (772:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  233|      0|    for (i = 0; i < fn->l.nupvalues; i++)  /* Mark Lua function upvalues. */
  ------------------
  |  Branch (233:17): [True: 0, False: 0]
  ------------------
  234|      0|      gc_markobj(g, &gcref(fn->l.uvptr[i])->uv);
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  235|    471|  } else {
  236|    471|    uint32_t i;
  237|    471|    for (i = 0; i < fn->c.nupvalues; i++)  /* Mark C function upvalues. */
  ------------------
  |  Branch (237:17): [True: 0, False: 471]
  ------------------
  238|      0|      gc_marktv(g, &fn->c.upvalue[i]);
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  239|    471|  }
  240|    471|}
lj_gc.c:gc_traverse_thread:
  310|  1.60k|{
  311|  1.60k|  TValue *o, *top = th->top;
  312|  3.34k|  for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  217|  1.60k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.60k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  569|  1.60k|#define LJ_FR2			1
  ------------------
  |  Branch (312:39): [True: 1.74k, False: 1.60k]
  ------------------
  313|  1.74k|    gc_marktv(g, o);
  ------------------
  |  |   46|  1.74k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  1.74k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.22k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 256, False: 1.48k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.48k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.74k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  1.74k|	       "TValue and GC type mismatch"); \
  |  |   48|  1.74k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  1.74k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|  3.48k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|  1.74k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.74k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.74k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  1.74k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.74k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.74k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 1.48k, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  2.97k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  1.48k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  1.48k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  1.48k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 796, False: 689]
  |  |  |  |  |  |  |  Branch (32:22): [True: 1.48k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|    796|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    796|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    796|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    796|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 796, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    796|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  314|  1.60k|  if (g->gc.state == GCSatomic) {
  ------------------
  |  Branch (314:7): [True: 766, False: 842]
  ------------------
  315|    766|    top = tvref(th->stack) + th->stacksize;
  ------------------
  |  |  217|    766|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    766|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  316|  35.2k|    for (; o < top; o++)  /* Clear unmarked slots. */
  ------------------
  |  Branch (316:12): [True: 34.4k, False: 766]
  ------------------
  317|  34.4k|      setnilV(o);
  ------------------
  |  |  869|  34.4k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  318|    766|  }
  319|  1.60k|  gc_markobj(g, tabref(th->env));
  ------------------
  |  |   52|  1.60k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  1.60k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  1.60k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  1.60k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  1.60k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 1.60k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  320|  1.60k|  lj_state_shrinkstack(th, gc_traverse_frames(g, th));
  321|  1.60k|}
lj_gc.c:gc_traverse_frames:
  293|  1.60k|{
  294|  1.60k|  TValue *frame, *top = th->top-1, *bot = tvref(th->stack);
  ------------------
  |  |  217|  1.60k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.60k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  295|       |  /* Note: extra vararg frame not skipped, marks function twice (harmless). */
  296|  1.60k|  for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  569|  1.60k|#define LJ_FR2			1
  ------------------
                for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  110|      0|#define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |   77|      0|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (296:28): [True: 0, False: 1.60k]
  ------------------
  297|      0|    GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  830|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  298|      0|    TValue *ftop = frame;
  299|      0|    if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  300|      0|    if (ftop > top) top = ftop;
  ------------------
  |  Branch (300:9): [True: 0, False: 0]
  ------------------
  301|      0|    if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
                  if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (301:9): [Folded - Ignored]
  ------------------
  302|      0|  }
  303|  1.60k|  top++;  /* Correct bias of -1 (frame == base-1). */
  304|  1.60k|  if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|  1.60k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.60k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (304:7): [True: 0, False: 1.60k]
  ------------------
  305|  1.60k|  return (MSize)(top - bot);  /* Return minimum needed stack size. */
  306|  1.60k|}
lj_gc.c:gc_traverse_trace:
  257|    395|{
  258|    395|  IRRef ref;
  259|    395|  if (T->traceno == 0) return;
  ------------------
  |  Branch (259:7): [True: 395, False: 0]
  ------------------
  260|      0|  for (ref = T->nk; ref < REF_TRUE; ref++) {
  ------------------
  |  Branch (260:21): [True: 0, False: 0]
  ------------------
  261|      0|    IRIns *ir = &T->ir[ref];
  262|      0|    if (ir->o == IR_KGC)
  ------------------
  |  Branch (262:9): [True: 0, False: 0]
  ------------------
  263|      0|      gc_markobj(g, ir_kgc(ir));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (772:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  264|      0|    if (irt_is64(ir->t) && ir->o != IR_KNULL)
  ------------------
  |  |  408|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  396|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  397|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  398|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  399|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (408:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (264:28): [True: 0, False: 0]
  ------------------
  265|      0|      ref++;
  266|      0|  }
  267|      0|  if (T->link) gc_marktrace(g, T->link);
  ------------------
  |  Branch (267:7): [True: 0, False: 0]
  ------------------
  268|      0|  if (T->nextroot) gc_marktrace(g, T->nextroot);
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|  if (T->nextside) gc_marktrace(g, T->nextside);
  ------------------
  |  Branch (269:7): [True: 0, False: 0]
  ------------------
  270|      0|  gc_markobj(g, gcref(T->startpt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  271|      0|}
lj_gc.c:atomic:
  624|    395|{
  625|    395|  size_t udsize;
  626|       |
  627|    395|  gc_mark_uv(g);  /* Need to remark open upvalues (the thread may be dead). */
  628|    395|  gc_propagate_gray(g);  /* Propagate any left-overs. */
  629|       |
  630|    395|  setgcrefr(g->gc.gray, g->gc.weak);  /* Empty the list of weak tables. */
  ------------------
  |  |   77|    395|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  631|    395|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|    395|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  632|    395|  lj_assertG(!iswhite(obj2gco(mainthread(g))), "main thread turned white");
  ------------------
  |  |  364|    395|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    395|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 395, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    395|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  633|    395|  gc_markobj(g, L);  /* Mark running thread. */
  ------------------
  |  |   52|    395|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|    395|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    395|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    395|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    395|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 395]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  634|    395|  gc_traverse_curtrace(g);  /* Traverse current trace. */
  ------------------
  |  |  274|    395|#define gc_traverse_curtrace(g)	gc_traverse_trace(g, &G2J(g)->cur)
  |  |  ------------------
  |  |  |  |  116|    395|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|    395|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|    395|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  635|    395|  gc_mark_gcroot(g);  /* Mark GC roots (again). */
  636|    395|  gc_propagate_gray(g);  /* Propagate all of the above. */
  637|       |
  638|    395|  setgcrefr(g->gc.gray, g->gc.grayagain);  /* Empty the 2nd chance list. */
  ------------------
  |  |   77|    395|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  639|    395|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|    395|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  640|    395|  gc_propagate_gray(g);  /* Propagate it. */
  641|       |
  642|    395|  udsize = lj_gc_separateudata(g, 0);  /* Separate userdata to be finalized. */
  643|    395|  gc_mark_mmudata(g);  /* Mark them. */
  644|    395|  udsize += gc_propagate_gray(g);  /* And propagate the marks. */
  645|       |
  646|       |  /* All marking done, clear weak tables. */
  647|    395|  gc_clearweak(g, gcref(g->gc.weak));
  ------------------
  |  |   67|    395|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  648|       |
  649|    395|  lj_buf_shrink(L, &g->tmpbuf);  /* Shrink temp buffer. */
  650|       |
  651|       |  /* Prepare for sweep phase. */
  652|    395|  g->gc.currentwhite = (uint8_t)otherwhite(g);  /* Flip current white. */
  ------------------
  |  |   36|    395|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|    395|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|    395|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|    395|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  653|    395|  g->strempty.marked = g->gc.currentwhite;
  654|    395|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|    395|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  655|    395|  g->gc.estimate = g->gc.total - (GCSize)udsize;  /* Initial estimate. */
  656|    395|}
lj_gc.c:gc_mark_uv:
  116|    395|{
  117|    395|  GCupval *uv;
  118|    395|  for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|    395|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|    395|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|      0|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (118:33): [True: 0, False: 395]
  ------------------
  119|      0|    lj_assertG(uvprev(uvnext(uv)) == uv && uvnext(uvprev(uv)) == uv,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  120|      0|	       "broken upvalue chain");
  121|      0|    if (isgray(obj2gco(uv)))
  ------------------
  |  |   34|      0|#define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  |  |               #define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (34:19): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  122|      0|      gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  123|      0|  }
  124|    395|}
lj_gc.c:gc_propagate_gray:
  368|  1.58k|{
  369|  1.58k|  size_t m = 0;
  370|  2.34k|  while (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|  2.34k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (370:10): [True: 766, False: 1.58k]
  ------------------
  371|    766|    m += propagatemark(g);
  372|  1.58k|  return m;
  373|  1.58k|}
lj_gc.c:gc_mark_mmudata:
  128|    395|{
  129|    395|  GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|    395|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  130|    395|  GCobj *u = root;
  131|    395|  if (u) {
  ------------------
  |  Branch (131:7): [True: 0, False: 395]
  ------------------
  132|      0|    do {
  133|      0|      u = gcnext(u);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  134|      0|      makewhite(g, u);  /* Could be from previous GC. */
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  135|      0|      gc_mark(g, u);
  136|      0|    } while (u != root);
  ------------------
  |  Branch (136:14): [True: 0, False: 0]
  ------------------
  137|      0|  }
  138|    395|}
lj_gc.c:gc_clearweak:
  474|    395|{
  475|    395|  UNUSED(g);
  ------------------
  |  |   91|    395|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  476|    395|  while (o) {
  ------------------
  |  Branch (476:10): [True: 0, False: 395]
  ------------------
  477|      0|    GCtab *t = gco2tab(o);
  ------------------
  |  |  768|      0|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  478|      0|    lj_assertG((t->marked & LJ_GC_WEAK), "clear of non-weak table");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  479|      0|    if ((t->marked & LJ_GC_WEAKVAL)) {
  ------------------
  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (479:9): [True: 0, False: 0]
  ------------------
  480|      0|      MSize i, asize = t->asize;
  481|      0|      for (i = 0; i < asize; i++) {
  ------------------
  |  Branch (481:19): [True: 0, False: 0]
  ------------------
  482|       |	/* Clear array slot when value is about to be collected. */
  483|      0|	TValue *tv = arrayslot(t, i);
  ------------------
  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  484|      0|	if (gc_mayclear(tv, 1))
  ------------------
  |  Branch (484:6): [True: 0, False: 0]
  ------------------
  485|      0|	  setnilV(tv);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  486|      0|      }
  487|      0|    }
  488|      0|    if (t->hmask > 0) {
  ------------------
  |  Branch (488:9): [True: 0, False: 0]
  ------------------
  489|      0|      Node *node = noderef(t->node);
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  490|      0|      MSize i, hmask = t->hmask;
  491|      0|      for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (491:19): [True: 0, False: 0]
  ------------------
  492|      0|	Node *n = &node[i];
  493|       |	/* Clear hash slot when key or value is about to be collected. */
  494|      0|	if (!tvisnil(&n->val) && (gc_mayclear(&n->key, 0) ||
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (494:6): [True: 0, False: 0]
  |  Branch (494:28): [True: 0, False: 0]
  ------------------
  495|      0|				  gc_mayclear(&n->val, 1)))
  ------------------
  |  Branch (495:7): [True: 0, False: 0]
  ------------------
  496|      0|	  setnilV(&n->val);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  497|      0|      }
  498|      0|    }
  499|      0|    o = gcref(t->gclist);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  500|      0|  }
  501|    395|}
lj_gc.c:gc_mark:
   59|  13.9k|{
   60|  13.9k|  int gct = o->gch.gct;
   61|  13.9k|  lj_assertG(iswhite(o), "mark of non-white object");
  ------------------
  |  |  364|  13.9k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.9k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   62|  13.9k|  lj_assertG(!isdead(g, o), "mark of dead object");
  ------------------
  |  |  364|  13.9k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.9k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|  13.9k|  white2gray(o);
  ------------------
  |  |   38|  13.9k|#define white2gray(x)		((x)->gch.marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  13.9k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  13.9k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  13.9k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|  13.9k|  if (LJ_UNLIKELY(gct == ~LJ_TUDATA)) {
  ------------------
  |  |  146|  13.9k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 13.9k]
  |  |  ------------------
  ------------------
   65|      0|    GCtab *mt = tabref(gco2ud(o)->metatable);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   66|      0|    gray2black(o);  /* Userdata are never gray. */
  ------------------
  |  |   39|      0|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   67|      0|    if (mt) gc_markobj(g, mt);
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|    gc_markobj(g, tabref(gco2ud(o)->env));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (772:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   69|      0|    if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  ------------------
  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  769|      0|#define gco2ud(o)	check_exp((o)->gch.gct == ~LJ_TUDATA, &(o)->ud)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (69:25): [True: 0, False: 0]
  ------------------
   70|      0|      SBufExt *sbx = (SBufExt *)uddata(gco2ud(o));
  ------------------
  |  |  342|      0|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   71|      0|      if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   72|      0|	gc_markobj(g, gcref(sbx->cowref));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   73|      0|      if (gcref(sbx->dict_str))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   74|      0|	gc_markobj(g, gcref(sbx->dict_str));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   75|      0|      if (gcref(sbx->dict_mt))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   76|      0|	gc_markobj(g, gcref(sbx->dict_mt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   77|      0|    }
   78|  13.9k|  } else if (LJ_UNLIKELY(gct == ~LJ_TUPVAL)) {
  ------------------
  |  |  146|  13.9k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 13.9k]
  |  |  ------------------
  ------------------
   79|      0|    GCupval *uv = gco2uv(o);
  ------------------
  |  |  763|      0|#define gco2uv(o)	check_exp((o)->gch.gct == ~LJ_TUPVAL, &(o)->uv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   81|      0|    if (uv->closed)
  ------------------
  |  Branch (81:9): [True: 0, False: 0]
  ------------------
   82|      0|      gray2black(o);  /* Closed upvalues are never gray. */
  ------------------
  |  |   39|      0|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   83|  13.9k|  } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  264|  27.9k|#define LJ_TSTR			(~4u)
  ------------------
                } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  270|  3.02k|#define LJ_TCDATA		(~10u)
  ------------------
  |  Branch (83:14): [True: 3.02k, False: 10.9k]
  |  Branch (83:33): [True: 3.02k, False: 0]
  ------------------
   84|  3.02k|    lj_assertG(gct == ~LJ_TFUNC || gct == ~LJ_TTAB ||
  ------------------
  |  |  364|  3.02k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  15.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 471, False: 2.55k]
  |  |  |  |  |  Branch (355:5): [True: 1.66k, False: 884]
  |  |  |  |  |  Branch (355:5): [True: 884, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.02k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|      0|	       gct == ~LJ_TTHREAD || gct == ~LJ_TPROTO || gct == ~LJ_TTRACE,
   86|      0|	       "bad GC type %d", gct);
   87|  3.02k|    setgcrefr(o->gch.gclist, g->gc.gray);
  ------------------
  |  |   77|  3.02k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   88|  3.02k|    setgcref(g->gc.gray, o);
  ------------------
  |  |   72|  3.02k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   89|  3.02k|  }
   90|  13.9k|}

lj_state.c:lj_mem_free:
  120|  4.96k|{
  121|  4.96k|  g->gc.total -= (GCSize)osize;
  122|  4.96k|  g->allocf(g->allocd, p, osize, 0);
  123|  4.96k|}
lj_trace.c:lj_mem_free:
  120|  4.80k|{
  121|  4.80k|  g->gc.total -= (GCSize)osize;
  122|  4.80k|  g->allocf(g->allocd, p, osize, 0);
  123|  4.80k|}
lj_str.c:lj_mem_free:
  120|  56.8k|{
  121|  56.8k|  g->gc.total -= (GCSize)osize;
  122|  56.8k|  g->allocf(g->allocd, p, osize, 0);
  123|  56.8k|}
lj_tab.c:lj_mem_free:
  120|  7.82k|{
  121|  7.82k|  g->gc.total -= (GCSize)osize;
  122|  7.82k|  g->allocf(g->allocd, p, osize, 0);
  123|  7.82k|}
lj_func.c:lj_mem_free:
  120|  1.23k|{
  121|  1.23k|  g->gc.total -= (GCSize)osize;
  122|  1.23k|  g->allocf(g->allocd, p, osize, 0);
  123|  1.23k|}
lj_udata.c:lj_mem_free:
  120|      3|{
  121|      3|  g->gc.total -= (GCSize)osize;
  122|      3|  g->allocf(g->allocd, p, osize, 0);
  123|      3|}
lj_meta.c:lj_gc_barrierback:
   82|      1|{
   83|      1|  GCobj *o = obj2gco(t);
  ------------------
  |  |  772|      1|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|      1|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|      1|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 1, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|      0|	     "bad object states for backward barrier");
   86|      1|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|      1|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 1, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|      0|	     "bad GC state");
   88|      1|  black2gray(o);
  ------------------
  |  |   44|      1|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      1|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|      1|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|      1|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|      1|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|      1|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|      1|}

lj_lex_init:
  506|  1.20k|{
  507|  1.20k|  uint32_t i;
  508|  27.6k|  for (i = 0; i < TK_RESERVED; i++) {
  ------------------
  |  Branch (508:15): [True: 26.4k, False: 1.20k]
  ------------------
  509|  26.4k|    GCstr *s = lj_str_newz(L, tokennames[i]);
  ------------------
  |  |   27|  26.4k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  510|  26.4k|    fixstring(s);  /* Reserved words are never collected. */
  ------------------
  |  |   45|  26.4k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  26.4k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  511|  26.4k|    s->reserved = (uint8_t)(i+1);
  512|  26.4k|  }
  513|  1.20k|}

lj_mcode_free:
  287|  1.20k|{
  288|  1.20k|  MCode *mc = J->mcarea;
  289|  1.20k|  J->mcarea = NULL;
  290|  1.20k|  J->szallmcarea = 0;
  291|  1.20k|  while (mc) {
  ------------------
  |  Branch (291:10): [True: 0, False: 1.20k]
  ------------------
  292|      0|    MCode *next = ((MCLink *)mc)->next;
  293|      0|    size_t sz = ((MCLink *)mc)->size;
  294|      0|    lj_err_deregister_mcode(mc, sz, (uint8_t *)mc + sizeof(MCLink));
  295|      0|    mcode_free(J, mc, sz);
  296|      0|    mc = next;
  297|      0|  }
  298|  1.20k|}

lj_meta_init:
   30|  1.20k|{
   31|  1.20k|#define MMNAME(name)	"__" #name
   32|  1.20k|  const char *metanames = MMDEF(MMNAME);
  ------------------
  |  |  557|  1.20k|  _(index) _(newindex) _(gc) _(mode) _(eq) _(len) \
  |  |  ------------------
  |  |  |  |   32|  1.20k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|  1.20k|#define MMNAME(name)	"__" #name
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  558|  1.20k|  /* Only the above (fast) metamethods are negative cached (max. 8). */ \
  |  |  559|  1.20k|  _(lt) _(le) _(concat) _(call) \
  |  |  560|  1.20k|  /* The following must be in ORDER ARITH. */ \
  |  |  561|  1.20k|  _(add) _(sub) _(mul) _(div) _(mod) _(pow) _(unm) \
  |  |  562|  1.20k|  /* The following are used in the standard libraries. */ \
  |  |  563|  1.20k|  _(metatable) _(tostring) MMDEF_FFI(_) MMDEF_PAIRS(_)
  |  |  ------------------
  |  |  |  |  549|  1.20k|#define MMDEF_PAIRS(_) _(pairs) _(ipairs)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  1.20k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   31|  1.20k|#define MMNAME(name)	"__" #name
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   33|  1.20k|#undef MMNAME
   34|  1.20k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.20k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   35|  1.20k|  const char *p, *q;
   36|  1.20k|  uint32_t mm;
   37|  27.6k|  for (mm = 0, p = metanames; *p; mm++, p = q) {
  ------------------
  |  Branch (37:31): [True: 26.4k, False: 1.20k]
  ------------------
   38|  26.4k|    GCstr *s;
   39|   134k|    for (q = p+2; *q && *q != '_'; q++) ;
  ------------------
  |  Branch (39:19): [True: 133k, False: 1.20k]
  |  Branch (39:25): [True: 108k, False: 25.2k]
  ------------------
   40|  26.4k|    s = lj_str_new(L, p, (size_t)(q-p));
   41|       |    /* NOBARRIER: g->gcroot[] is a GC root. */
   42|  26.4k|    setgcref(g->gcroot[GCROOT_MMNAME+mm], obj2gco(s));
  ------------------
  |  |   72|  26.4k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   43|  26.4k|  }
   44|  1.20k|}
lj_meta_tget:
  136|     20|{
  137|     20|  int loop;
  138|     20|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|     20|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (138:18): [True: 20, False: 0]
  ------------------
  139|     20|    cTValue *mo;
  140|     20|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|     20|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 20, False: 0]
  |  |  ------------------
  ------------------
  141|     20|      GCtab *t = tabV(o);
  ------------------
  |  |  861|     20|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|     20|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     20|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     20|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 20, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     20|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  142|      0|      cTValue *tv = lj_tab_get(L, t, k);
  143|     20|      if (!tvisnil(tv) ||
  ------------------
  |  |  779|     40|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (143:11): [True: 0, False: 20]
  ------------------
  144|     20|	  !(mo = lj_meta_fast(L, tabref(t->metatable), MM_index)))
  ------------------
  |  |   22|     20|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|     20|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 20, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  587|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (144:4): [True: 20, False: 0]
  ------------------
  145|     20|	return tv;
  146|     20|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_index))) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  147|      0|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  148|      0|      return NULL;  /* unreachable */
  149|      0|    }
  150|      0|    if (tvisfunc(mo)) {
  ------------------
  |  |  793|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (793:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  151|      0|      L->top = mmcall(L, lj_cont_ra, mo, o, k);
  152|      0|      return NULL;  /* Trigger metamethod call. */
  153|      0|    }
  154|      0|    o = mo;
  155|      0|  }
  156|      0|  lj_err_msg(L, LJ_ERR_GETLOOP);
  157|      0|  return NULL;  /* unreachable */
  158|     20|}
lj_meta_tset:
  162|  1.21k|{
  163|  1.21k|  TValue tmp;
  164|  1.21k|  int loop;
  165|  1.21k|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|  1.21k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (165:18): [True: 1.21k, False: 0]
  ------------------
  166|  1.21k|    cTValue *mo;
  167|  1.21k|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|  1.21k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1.21k, False: 0]
  |  |  ------------------
  ------------------
  168|  1.21k|      GCtab *t = tabV(o);
  ------------------
  |  |  861|  1.21k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  1.21k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.21k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.21k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.21k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.21k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  169|      0|      cTValue *tv = lj_tab_get(L, t, k);
  170|  1.21k|      if (LJ_LIKELY(!tvisnil(tv))) {
  ------------------
  |  |  145|  1.21k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 1.21k]
  |  |  ------------------
  ------------------
  171|      0|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  172|      0|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|      0|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|      0|	return (TValue *)tv;
  174|  1.21k|      } else if (!(mo = lj_meta_fast(L, tabref(t->metatable), MM_newindex))) {
  ------------------
  |  |   22|  1.21k|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|  1.21k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 1.21k, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  587|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (174:18): [True: 1.21k, False: 0]
  ------------------
  175|  1.21k|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  176|  1.21k|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|  1.21k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  1.21k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 1, False: 1.21k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      1|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      1|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|  1.21k|	if (tv != niltv(L))
  ------------------
  |  |  664|  1.21k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  1.21k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.21k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.21k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.21k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.21k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (177:6): [True: 0, False: 1.21k]
  ------------------
  178|      0|	  return (TValue *)tv;
  179|  1.21k|	if (tvisnil(k)) lj_err_msg(L, LJ_ERR_NILIDX);
  ------------------
  |  |  779|  1.21k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 1.21k]
  |  |  ------------------
  ------------------
  180|  1.21k|	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  800|  1.21k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  2.43k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  942|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (942:35): [Folded - Ignored]
  |  |  |  Branch (942:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  181|  1.21k|	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  801|  2.43k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|  1.21k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.21k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.21k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 0, False: 1.21k]
  |  |  ------------------
  ------------------
              	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  809|      0|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  182|  1.21k|	return lj_tab_newkey(L, t, k);
  183|  1.21k|      }
  184|  1.21k|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_newindex))) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  185|      0|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  186|      0|      return NULL;  /* unreachable */
  187|      0|    }
  188|      0|    if (tvisfunc(mo)) {
  ------------------
  |  |  793|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (793:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  189|      0|      L->top = mmcall(L, lj_cont_nop, mo, o, k);
  190|       |      /* L->top+2 = v filled in by caller. */
  191|      0|      return NULL;  /* Trigger metamethod call. */
  192|      0|    }
  193|      0|    copyTV(L, &tmp, mo);
  194|      0|    o = &tmp;
  195|      0|  }
  196|      0|  lj_err_msg(L, LJ_ERR_SETLOOP);
  197|      0|  return NULL;  /* unreachable */
  198|  1.21k|}
lj_meta_cat:
  239|     20|{
  240|     20|  int fromc = 0;
  241|     20|  if (left < 0) { left = -left; fromc = 1; }
  ------------------
  |  Branch (241:7): [True: 20, False: 0]
  ------------------
  242|     20|  do {
  243|     20|    if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  792|     40|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     20|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     20|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 11, False: 9]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  799|     29|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      9|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      9|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      9|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 9, False: 0]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  244|     20|	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  792|     40|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     20|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     20|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 13, False: 7]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  799|     27|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      7|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      7|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      7|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 7, False: 0]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  245|      0|      cTValue *mo = lj_meta_lookup(L, top-1, MM_concat);
  246|      0|      if (tvisnil(mo)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  247|      0|	mo = lj_meta_lookup(L, top, MM_concat);
  248|      0|	if (tvisnil(mo)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  249|      0|	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  792|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  799|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  250|      0|	  lj_err_optype(L, top-1, LJ_ERR_OPCAT);
  251|      0|	  return NULL;  /* unreachable */
  252|      0|	}
  253|      0|      }
  254|       |      /* One of the top two elements is not a string, call __cat metamethod:
  255|       |      **
  256|       |      ** before:    [...][CAT stack .........................]
  257|       |      **                                 top-1     top         top+1 top+2
  258|       |      ** pick two:  [...][CAT stack ...] [o1]      [o2]
  259|       |      ** setup mm:  [...][CAT stack ...] [cont|?]  [mo|tmtype] [o1]  [o2]
  260|       |      ** in asm:    [...][CAT stack ...] [cont|PC] [mo|delta]  [o1]  [o2]
  261|       |      **            ^-- func base                              ^-- mm base
  262|       |      ** after mm:  [...][CAT stack ...] <--push-- [result]
  263|       |      ** next step: [...][CAT stack .............]
  264|       |      */
  265|      0|      copyTV(L, top+2*LJ_FR2+2, top);  /* Carefully ordered stack copies! */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  266|      0|      copyTV(L, top+2*LJ_FR2+1, top-1);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  267|      0|      copyTV(L, top+LJ_FR2, mo);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  268|      0|      setcont(top-1, lj_cont_cat);
  ------------------
  |  |  892|      0|#define setcont(o, f)		((o)->u64 = (uint64_t)(uintptr_t)contptr(f))
  |  |  ------------------
  |  |  |  |  891|      0|#define contptr(f)		((void *)(f))
  |  |  ------------------
  ------------------
  269|      0|      if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  270|      0|      return top+1;  /* Trigger metamethod call. */
  271|     20|    } else {
  272|       |      /* Pick as many strings as possible from the top and concatenate them:
  273|       |      **
  274|       |      ** before:    [...][CAT stack ...........................]
  275|       |      ** pick str:  [...][CAT stack ...] [...... strings ......]
  276|       |      ** concat:    [...][CAT stack ...] [result]
  277|       |      ** next step: [...][CAT stack ............]
  278|       |      */
  279|     20|      TValue *e, *o = top;
  280|     20|      uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  792|     20|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     20|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     20|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 11, False: 9]
  |  |  ------------------
  ------------------
                    uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  856|     11|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|     11|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     11|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     11|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 11, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     11|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  281|     20|		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|      9|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|     18|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|     18|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      9|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      9|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 9]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|     29|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  282|      0|      SBuf *sb;
  283|     20|      do {
  284|     20|	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  792|     20|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     20|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     20|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 13, False: 7]
  |  |  ------------------
  ------------------
              	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  856|     13|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|     13|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     13|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     13|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 13, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     13|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|     20|		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|      7|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|     14|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|     14|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      7|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      7|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 7]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|     27|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  286|     20|      } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  792|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  799|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (286:16): [True: 0, False: 20]
  ------------------
  287|     20|      if (tlen >= LJ_MAX_STR) lj_err_msg(L, LJ_ERR_STROV);
  ------------------
  |  |   54|     20|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|     20|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (287:11): [True: 0, False: 20]
  ------------------
  288|     20|      sb = lj_buf_tmp_(L);
  289|     20|      lj_buf_more(sb, (MSize)tlen);
  290|     60|      for (e = top, top = o; o <= e; o++) {
  ------------------
  |  Branch (290:30): [True: 40, False: 20]
  ------------------
  291|     40|	if (tvisstr(o)) {
  ------------------
  |  |  792|     40|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     40|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     40|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 24, False: 16]
  |  |  ------------------
  ------------------
  292|     24|	  GCstr *s = strV(o);
  ------------------
  |  |  856|     24|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|     24|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     24|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     24|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 24, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     24|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  293|      0|	  MSize len = s->len;
  294|     24|	  lj_buf_putmem(sb, strdata(s), len);
  ------------------
  |  |  316|     24|#define strdata(s)	((const char *)((s)+1))
  ------------------
  295|     24|	} else if (tvisbuf(o)) {
  ------------------
  |  |   65|     16|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|     32|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|     32|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|     16|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|     16|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 16]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  296|      0|	  SBufExt *sbx = bufV(o);
  ------------------
  |  |   66|      0|#define bufV(o)		check_exp(tvisbuf(o), ((SBufExt *)uddata(udataV(o))))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|      0|	  lj_buf_putmem(sb, sbx->r, sbufxlen(sbx));
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
  298|     16|	} else if (tvisint(o)) {
  ------------------
  |  |  800|     16|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|     32|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  299|      0|	  lj_strfmt_putint(sb, intV(o));
  ------------------
  |  |  864|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  300|     16|	} else {
  301|     16|	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |   67|     16|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|     16|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|     16|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|     16|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
              	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |  863|     16|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|     16|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     16|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     16|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 16, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     16|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  302|     16|	}
  303|     40|      }
  304|     20|      setstrV(L, top, lj_buf_str(L, sb));
  305|     20|    }
  306|     20|  } while (left >= 1);
  ------------------
  |  Branch (306:12): [True: 0, False: 20]
  ------------------
  307|     20|  if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) {
  ------------------
  |  |  146|     20|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 6, False: 14]
  |  |  ------------------
  ------------------
  308|      6|    if (!fromc) L->top = curr_topL(L);
  ------------------
  |  |  715|      0|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  714|      0|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (308:9): [True: 0, False: 6]
  ------------------
  309|      0|    lj_gc_step(L);
  310|      6|  }
  311|      0|  return NULL;
  312|     20|}

lj_obj_equal:
   24|      7|{
   25|      7|  if (itype(o1) == itype(o2)) {
  ------------------
  |  |  778|      7|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
                if (itype(o1) == itype(o2)) {
  ------------------
  |  |  778|      7|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  |  Branch (25:7): [True: 3, False: 4]
  ------------------
   26|      3|    if (tvispri(o1))
  ------------------
  |  |  804|      3|#define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  778|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  283|      3|#define LJ_TISPRI		LJ_TTRUE
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|      3|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 1, False: 2]
  |  |  ------------------
  ------------------
   27|      1|      return 1;
   28|      2|    if (!tvisnum(o1))
  ------------------
  |  |  801|      2|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      2|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      2|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      2|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (28:9): [True: 1, False: 1]
  ------------------
   29|      1|      return gcrefeq(o1->gcr, o2->gcr);
  ------------------
  |  |   70|      1|#define gcrefeq(r1, r2)	((r1).gcptr64 == (r2).gcptr64)
  ------------------
   30|      4|  } else if (!tvisnumber(o1) || !tvisnumber(o2)) {
  ------------------
  |  |  799|      8|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      4|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      4|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                } else if (!tvisnumber(o1) || !tvisnumber(o2)) {
  ------------------
  |  |  799|      2|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      2|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      2|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      2|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (30:14): [True: 2, False: 2]
  |  Branch (30:33): [True: 1, False: 1]
  ------------------
   31|      3|    return 0;
   32|      3|  }
   33|      2|  return numberVnum(o1) == numberVnum(o2);
   34|      7|}

lj_state.c:settabV:
  930|  1.20k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|  1.20k|{ \
  932|  1.20k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|  1.20k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|  1.20k|}
lj_state.c:setgcV:
  924|  3.07k|{
  925|  3.07k|  setgcVraw(o, v, it);
  926|  3.07k|  checklivetv(L, o, "store to dead GC object");
  927|  3.07k|}
lj_state.c:setgcVraw:
  915|  3.07k|{
  916|  3.07k|#if LJ_GC64
  917|  3.07k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  3.07k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  918|       |#else
  919|       |  setgcref(o->gcr, v); setitype(o, itype);
  920|       |#endif
  921|  3.07k|}
lj_state.c:checklivetv:
  901|  3.07k|{
  902|  3.07k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.07k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.07k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.07k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  903|  3.07k|#if LUA_USE_ASSERT
  904|  3.07k|  if (tvisgcv(o)) {
  ------------------
  |  |  806|  3.07k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  778|  3.07k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.07k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.07k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  3.07k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.07k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.07k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:20): [True: 3.07k, False: 0]
  |  |  ------------------
  ------------------
  905|  3.07k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  3.07k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.07k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.07k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.07k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  906|      0|	       "mismatch of TValue type %d vs GC type %d",
  907|      0|	       ~itype(o), gcval(o)->gch.gct);
  908|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  909|  3.07k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  3.07k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.07k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.07k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.07k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  910|  3.07k|  }
  911|  3.07k|#endif
  912|  3.07k|}
lj_state.c:setthreadV:
  930|  1.87k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|  1.87k|{ \
  932|  1.87k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|  1.87k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|  1.87k|}
lj_strfmt.c:checklivetv:
  901|      7|{
  902|      7|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|      7|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|      7|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|      7|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  903|      7|#if LUA_USE_ASSERT
  904|      7|  if (tvisgcv(o)) {
  ------------------
  |  |  806|      7|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  778|      7|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|      7|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|      7|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|      7|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|      7|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|      7|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:20): [True: 7, False: 0]
  |  |  ------------------
  ------------------
  905|      7|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|      7|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      7|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      7|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  906|      0|	       "mismatch of TValue type %d vs GC type %d",
  907|      0|	       ~itype(o), gcval(o)->gch.gct);
  908|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  909|      7|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|      7|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      7|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      7|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  910|      7|  }
  911|      7|#endif
  912|      7|}
lj_strfmt.c:setstrV:
  930|      7|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|      7|{ \
  932|      7|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|      7|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|      7|}
lj_strfmt.c:setgcV:
  924|      7|{
  925|      7|  setgcVraw(o, v, it);
  926|      7|  checklivetv(L, o, "store to dead GC object");
  927|      7|}
lj_strfmt.c:setgcVraw:
  915|      7|{
  916|      7|#if LJ_GC64
  917|      7|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|      7|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  918|       |#else
  919|       |  setgcref(o->gcr, v); setitype(o, itype);
  920|       |#endif
  921|      7|}
lj_api.c:copyTV:
  972|  8.61k|{
  973|  8.61k|  *o1 = *o2;
  974|  8.61k|  checklivetv(L, o1, "copy of dead GC object");
  975|  8.61k|}
lj_api.c:checklivetv:
  901|  15.3k|{
  902|  15.3k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  15.3k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  15.3k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  15.3k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  903|  15.3k|#if LUA_USE_ASSERT
  904|  15.3k|  if (tvisgcv(o)) {
  ------------------
  |  |  806|  15.3k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  778|  15.3k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  15.3k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  15.3k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  15.3k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  15.3k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  15.3k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:20): [True: 12.7k, False: 2.56k]
  |  |  ------------------
  ------------------
  905|  12.7k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  12.7k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  12.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 12.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  12.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  906|      0|	       "mismatch of TValue type %d vs GC type %d",
  907|      0|	       ~itype(o), gcval(o)->gch.gct);
  908|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  909|  12.7k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  12.7k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  12.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 12.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  12.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  910|  12.7k|  }
  911|  15.3k|#endif
  912|  15.3k|}
lj_api.c:numberVnum:
 1026|      1|{
 1027|      1|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|      1|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1028|      0|    return (lua_Number)intV(o);
  ------------------
  |  |  864|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1029|      1|  else
 1030|      1|    return numV(o);
  ------------------
  |  |  863|      1|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      1|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      1|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      1|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1031|      1|}
lj_api.c:setstrV:
  930|  2.95k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|  2.95k|{ \
  932|  2.95k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|  2.95k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|  2.95k|}
lj_api.c:setgcV:
  924|  6.68k|{
  925|  6.68k|  setgcVraw(o, v, it);
  926|  6.68k|  checklivetv(L, o, "store to dead GC object");
  927|  6.68k|}
lj_api.c:setint64V:
  957|    110|{
  958|    110|  if (LJ_DUALNUM && LJ_LIKELY(i == (int64_t)(int32_t)i))
  ------------------
  |  |  549|    220|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_DUALNUM && LJ_LIKELY(i == (int64_t)(int32_t)i))
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  959|      0|    setintV(o, (int32_t)i);
  960|    110|  else
  961|    110|    setnumV(o, (lua_Number)i);
  ------------------
  |  |  942|    110|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  962|    110|}
lj_api.c:setfuncV:
  930|  1.23k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|  1.23k|{ \
  932|  1.23k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|  1.23k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|  1.23k|}
lj_api.c:setrawlightudV:
  880|      8|{
  881|      8|#if LJ_GC64
  882|      8|  o->u64 = (uint64_t)p | (((uint64_t)LJ_TLIGHTUD) << 47);
  ------------------
  |  |  263|      8|#define LJ_TLIGHTUD		(~3u)
  ------------------
  883|       |#elif LJ_64
  884|       |  o->u64 = (uint64_t)p | (((uint64_t)0xffff) << 48);
  885|       |#else
  886|       |  setgcrefp(o->gcr, p); setitype(o, LJ_TLIGHTUD);
  887|       |#endif
  888|      8|}
lj_api.c:settabV:
  930|  1.81k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|  1.81k|{ \
  932|  1.81k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|  1.81k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|  1.81k|}
lj_api.c:setthreadV:
  930|    681|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|    681|{ \
  932|    681|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|    681|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|    681|}
lj_api.c:setudataV:
  930|      3|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|      3|{ \
  932|      3|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|      3|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|      3|}
lj_api.c:setgcVraw:
  915|  6.68k|{
  916|  6.68k|#if LJ_GC64
  917|  6.68k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  6.68k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  918|       |#else
  919|       |  setgcref(o->gcr, v); setitype(o, itype);
  920|       |#endif
  921|  6.68k|}
lj_obj.c:numberVnum:
 1026|      4|{
 1027|      4|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|      4|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1028|      0|    return (lua_Number)intV(o);
  ------------------
  |  |  864|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1029|      4|  else
 1030|      4|    return numV(o);
  ------------------
  |  |  863|      4|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      4|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      4|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      4|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      4|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1031|      4|}
lj_tab.c:checklivetv:
  901|      7|{
  902|      7|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|      7|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|      7|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|      7|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  903|      7|#if LUA_USE_ASSERT
  904|      7|  if (tvisgcv(o)) {
  ------------------
  |  |  806|      7|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  778|      7|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|      7|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|      7|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|      7|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|      7|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|      7|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:20): [True: 7, False: 0]
  |  |  ------------------
  ------------------
  905|      7|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|      7|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      7|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      7|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  906|      0|	       "mismatch of TValue type %d vs GC type %d",
  907|      0|	       ~itype(o), gcval(o)->gch.gct);
  908|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  909|      7|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|      7|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      7|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      7|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  910|      7|  }
  911|      7|#endif
  912|      7|}
lj_tab.c:setstrV:
  930|      7|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|      7|{ \
  932|      7|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|      7|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|      7|}
lj_tab.c:setgcV:
  924|      7|{
  925|      7|  setgcVraw(o, v, it);
  926|      7|  checklivetv(L, o, "store to dead GC object");
  927|      7|}
lj_tab.c:setgcVraw:
  915|      7|{
  916|      7|#if LJ_GC64
  917|      7|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|      7|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  918|       |#else
  919|       |  setgcref(o->gcr, v); setitype(o, itype);
  920|       |#endif
  921|      7|}
lj_meta.c:checklivetv:
  901|     20|{
  902|     20|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     20|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     20|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     20|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  903|     20|#if LUA_USE_ASSERT
  904|     20|  if (tvisgcv(o)) {
  ------------------
  |  |  806|     20|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  778|     20|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|     20|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|     20|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|     20|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|     20|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|     20|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:20): [True: 20, False: 0]
  |  |  ------------------
  ------------------
  905|     20|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|     20|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     20|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 20, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     20|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  906|      0|	       "mismatch of TValue type %d vs GC type %d",
  907|      0|	       ~itype(o), gcval(o)->gch.gct);
  908|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  909|     20|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|     20|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     20|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 20, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     20|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  910|     20|  }
  911|     20|#endif
  912|     20|}
lj_meta.c:setgcVraw:
  915|     20|{
  916|     20|#if LJ_GC64
  917|     20|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|     20|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  918|       |#else
  919|       |  setgcref(o->gcr, v); setitype(o, itype);
  920|       |#endif
  921|     20|}
lj_meta.c:setstrV:
  930|     20|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|     20|{ \
  932|     20|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|     20|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|     20|}
lj_meta.c:setgcV:
  924|     20|{
  925|     20|  setgcVraw(o, v, it);
  926|     20|  checklivetv(L, o, "store to dead GC object");
  927|     20|}

lj_prng_u64:
   48|  3.83k|{
   49|  3.83k|  uint64_t z, r = 0;
   50|  3.83k|  TW223_STEP(rs, z, r)
  ------------------
  |  |   41|  3.83k|  TW223_GEN(rs, z, r, 0, 63, 31, 18) \
  |  |  ------------------
  |  |  |  |   36|  3.83k|  z = rs->u[i]; \
  |  |  |  |   37|  3.83k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  3.83k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   42|  3.83k|  TW223_GEN(rs, z, r, 1, 58, 19, 28) \
  |  |  ------------------
  |  |  |  |   36|  3.83k|  z = rs->u[i]; \
  |  |  |  |   37|  3.83k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  3.83k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   43|  3.83k|  TW223_GEN(rs, z, r, 2, 55, 24,  7) \
  |  |  ------------------
  |  |  |  |   36|  3.83k|  z = rs->u[i]; \
  |  |  |  |   37|  3.83k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  3.83k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   44|  3.83k|  TW223_GEN(rs, z, r, 3, 47, 21,  8)
  |  |  ------------------
  |  |  |  |   36|  3.83k|  z = rs->u[i]; \
  |  |  |  |   37|  3.83k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  3.83k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  ------------------
   51|  3.83k|  return r;
   52|  3.83k|}
lj_prng_seed_secure:
  167|  1.20k|{
  168|       |#if LJ_TARGET_XBOX360
  169|       |
  170|       |  if (XNetRandom(rs->u, (unsigned int)sizeof(rs->u)) == 0)
  171|       |    goto ok;
  172|       |
  173|       |#elif LJ_TARGET_PS3
  174|       |
  175|       |  if (sys_get_random_number(rs->u, sizeof(rs->u)) == 0)
  176|       |    goto ok;
  177|       |
  178|       |#elif LJ_TARGET_PS4 || LJ_TARGET_PS5 || LJ_TARGET_PSVITA
  179|       |
  180|       |  if (sceRandomGetRandomNumber(rs->u, sizeof(rs->u)) == 0)
  181|       |    goto ok;
  182|       |
  183|       |#elif LJ_TARGET_NX
  184|       |
  185|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  186|       |    goto ok;
  187|       |
  188|       |#elif LJ_TARGET_UWP || LJ_TARGET_XBOXONE
  189|       |
  190|       |  if (BCryptGenRandom(NULL, (PUCHAR)(rs->u), (ULONG)sizeof(rs->u),
  191|       |		      BCRYPT_USE_SYSTEM_PREFERRED_RNG) >= 0)
  192|       |    goto ok;
  193|       |
  194|       |#elif LJ_TARGET_WINDOWS
  195|       |
  196|       |  /* Keep the library loaded in case multiple VMs are started. */
  197|       |  if (!libfunc_rgr) {
  198|       |    HMODULE lib = LJ_WIN_LOADLIBA("advapi32.dll");
  199|       |    if (!lib) return 0;
  200|       |    libfunc_rgr = (PRGR)GetProcAddress(lib, "SystemFunction036");
  201|       |    if (!libfunc_rgr) return 0;
  202|       |  }
  203|       |  if (libfunc_rgr(rs->u, (ULONG)sizeof(rs->u)))
  204|       |    goto ok;
  205|       |
  206|       |#elif LJ_TARGET_POSIX
  207|       |
  208|  1.20k|#if LJ_TARGET_LINUX && defined(SYS_getrandom)
  209|       |
  210|  1.20k|  if (syscall(SYS_getrandom, rs->u, sizeof(rs->u), 0) == (long)sizeof(rs->u))
  ------------------
  |  Branch (210:7): [True: 1.20k, False: 0]
  ------------------
  211|  1.20k|    goto ok;
  212|       |
  213|       |#elif LJ_TARGET_HAS_GETENTROPY
  214|       |
  215|       |#ifdef __ELF__
  216|       |  if (&getentropy && getentropy(rs->u, sizeof(rs->u)) == 0)
  217|       |    goto ok;
  218|       |#else
  219|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  220|       |    goto ok;
  221|       |#endif
  222|       |
  223|       |#endif
  224|       |
  225|       |  /* Fallback to /dev/urandom. This may fail if the device is not
  226|       |  ** existent or accessible in a chroot or container, or if the process
  227|       |  ** or the OS ran out of file descriptors.
  228|       |  */
  229|      0|  {
  230|      0|    int fd = open("/dev/urandom", O_RDONLY|O_CLOEXEC);
  231|      0|    if (fd != -1) {
  ------------------
  |  Branch (231:9): [True: 0, False: 0]
  ------------------
  232|      0|      ssize_t n = read(fd, rs->u, sizeof(rs->u));
  233|      0|      (void)close(fd);
  234|      0|      if (n == (ssize_t)sizeof(rs->u))
  ------------------
  |  Branch (234:11): [True: 0, False: 0]
  ------------------
  235|      0|	goto ok;
  236|      0|    }
  237|      0|  }
  238|       |
  239|       |#else
  240|       |
  241|       |  /* Add an elif above for your OS with a secure PRNG seed.
  242|       |  ** Note that fiddling around with rand(), getpid(), time() or coercing
  243|       |  ** ASLR to yield a few bits of randomness is not helpful.
  244|       |  ** If you don't want any security, then don't pretend you have any
  245|       |  ** and simply define LUAJIT_SECURITY_PRNG=0 for the build.
  246|       |  */
  247|       |#error "Missing secure PRNG seed for this OS"
  248|       |
  249|       |#endif
  250|      0|  return 0;  /* Fail. */
  251|       |
  252|  1.20k|ok:
  253|  1.20k|  lj_prng_condition(rs);
  254|  1.20k|  (void)lj_prng_u64(rs);
  255|  1.20k|  return 1;  /* Success. */
  256|      0|}
lj_prng.c:lj_prng_condition:
   65|  1.20k|{
   66|  1.20k|  if (rs->u[0] < (1u << 1)) rs->u[0] += (1u << 1);
  ------------------
  |  Branch (66:7): [True: 0, False: 1.20k]
  ------------------
   67|  1.20k|  if (rs->u[1] < (1u << 6)) rs->u[1] += (1u << 6);
  ------------------
  |  Branch (67:7): [True: 0, False: 1.20k]
  ------------------
   68|  1.20k|  if (rs->u[2] < (1u << 9)) rs->u[2] += (1u << 9);
  ------------------
  |  Branch (68:7): [True: 0, False: 1.20k]
  ------------------
   69|  1.20k|  if (rs->u[3] < (1u << 17)) rs->u[3] += (1u << 17);
  ------------------
  |  Branch (69:7): [True: 0, False: 1.20k]
  ------------------
   70|  1.20k|}

luaJIT_profile_stop:
  341|  1.20k|{
  342|  1.20k|  ProfileState *ps = &profile_state;
  343|  1.20k|  global_State *g = ps->g;
  344|  1.20k|  if (G(L) == g) {  /* Only stop profiler if started by this VM. */
  ------------------
  |  |  702|  1.20k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (344:7): [True: 0, False: 1.20k]
  ------------------
  345|      0|    profile_timer_stop(ps);
  346|      0|    g->hookmask &= ~HOOK_PROFILE;
  ------------------
  |  |  674|      0|#define HOOK_PROFILE		0x80
  ------------------
  347|      0|    lj_dispatch_update(g);
  348|      0|#if LJ_HASJIT
  349|      0|    G2J(g)->prof_mode = 0;
  ------------------
  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  350|      0|    lj_trace_flushall(L);
  351|      0|#endif
  352|      0|    lj_buf_free(g, &ps->sb);
  353|      0|    ps->sb.w = ps->sb.e = NULL;
  354|      0|    ps->g = NULL;
  355|      0|  }
  356|  1.20k|}

lj_state_shrinkstack:
   92|  1.60k|{
   93|  1.60k|  if (L->stacksize > LJ_STACK_MAXEX)
  ------------------
  |  |   39|  1.60k|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|  1.60k|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   89|  1.60k|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|  1.60k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|  1.60k|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (93:7): [True: 0, False: 1.60k]
  ------------------
   94|      0|    return;  /* Avoid stack shrinking while handling stack overflow. */
   95|  1.60k|  if (4*used < L->stacksize &&
  ------------------
  |  Branch (95:7): [True: 1.60k, False: 1]
  ------------------
   96|  1.60k|      2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   38|  1.60k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  1.60k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  1.60k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   72|  1.60k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  1.60k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  |  Branch (96:7): [True: 0, False: 1.60k]
  ------------------
   97|       |      /* Don't shrink stack of live trace. */
   98|  1.60k|      (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (98:8): [True: 0, False: 0]
  |  Branch (98:41): [True: 0, False: 0]
  ------------------
   99|      0|    resizestack(L, L->stacksize >> 1);
  100|  1.60k|}
lj_state_growstack:
  104|    157|{
  105|    157|  MSize n;
  106|    157|  if (L->stacksize >= LJ_STACK_MAXEX) {
  ------------------
  |  |   39|    157|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|    157|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   89|    157|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|    157|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|    157|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (106:7): [True: 0, False: 157]
  ------------------
  107|       |    /* 4. Throw 'error in error handling' when we are _over_ the limit. */
  108|      0|    if (L->stacksize > LJ_STACK_MAXEX)
  ------------------
  |  |   39|      0|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   89|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|      0|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (108:9): [True: 0, False: 0]
  ------------------
  109|      0|      lj_err_throw(L, LUA_ERRERR);  /* Does not invoke an error handler. */
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  110|       |    /* 1. We are _at_ the limit after the last growth. */
  111|      0|    if (L->status < LUA_ERRRUN) {  /* 2. Throw 'stack overflow'. */
  ------------------
  |  |   45|      0|#define LUA_ERRRUN	2
  ------------------
  |  Branch (111:9): [True: 0, False: 0]
  ------------------
  112|      0|      L->status = LUA_ERRRUN;  /* Prevent ending here again for pushed msg. */
  ------------------
  |  |   45|      0|#define LUA_ERRRUN	2
  ------------------
  113|      0|      lj_err_msg(L, LJ_ERR_STKOV);  /* May invoke an error handler. */
  114|      0|    }
  115|       |    /* 3. Add space (over the limit) for pushed message and error handler. */
  116|      0|  }
  117|    157|  n = L->stacksize + need;
  118|    157|  if (n > LJ_STACK_MAX) {
  ------------------
  |  |   37|    157|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   89|    157|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  |  Branch (118:7): [True: 0, False: 157]
  ------------------
  119|      0|    n += 2*LUA_MINSTACK;
  ------------------
  |  |   88|      0|#define LUA_MINSTACK	20
  ------------------
  120|    157|  } else if (n < 2*L->stacksize) {
  ------------------
  |  Branch (120:14): [True: 47, False: 110]
  ------------------
  121|     47|    n = 2*L->stacksize;
  122|     47|    if (n >= LJ_STACK_MAX)
  ------------------
  |  |   37|     47|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   89|     47|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  |  Branch (122:9): [True: 0, False: 47]
  ------------------
  123|      0|      n = LJ_STACK_MAX;
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   89|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  124|     47|  }
  125|    157|  resizestack(L, n);
  126|    157|}
lj_state_cpgrowstack:
  141|    157|{
  142|    157|  return lj_vm_cpcall(L, NULL, &need, cpgrowstack);
  143|    157|}
lua_newstate:
  219|  1.20k|{
  220|  1.20k|  PRNGState prng;
  221|  1.20k|  GG_State *GG;
  222|  1.20k|  lua_State *L;
  223|  1.20k|  global_State *g;
  224|       |  /* We need the PRNG for the memory allocator, so initialize this first. */
  225|  1.20k|  if (!lj_prng_seed_secure(&prng)) {
  ------------------
  |  Branch (225:7): [True: 0, False: 1.20k]
  ------------------
  226|      0|    lj_assertX(0, "secure PRNG seeding failed");
  ------------------
  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  227|       |    /* Can only return NULL here, so this errors with "not enough memory". */
  228|      0|    return NULL;
  229|      0|  }
  230|  1.20k|#ifndef LUAJIT_USE_SYSMALLOC
  231|  1.20k|  if (allocf == LJ_ALLOCF_INTERNAL) {
  ------------------
  |  |   36|  1.20k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  |  Branch (231:7): [True: 1.20k, False: 0]
  ------------------
  232|  1.20k|    allocd = lj_alloc_create(&prng);
  233|  1.20k|    if (!allocd) return NULL;
  ------------------
  |  Branch (233:9): [True: 0, False: 1.20k]
  ------------------
  234|  1.20k|    allocf = lj_alloc_f;
  235|  1.20k|  }
  236|  1.20k|#endif
  237|  1.20k|  GG = (GG_State *)allocf(allocd, NULL, 0, sizeof(GG_State));
  238|  1.20k|  if (GG == NULL || !checkptrGC(GG)) return NULL;
  ------------------
  |  |  110|  1.20k|#define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  562|  1.20k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  109|  1.20k|#define checkptr47(x)	(((uint64_t)(uintptr_t)(x) >> 47) == 0)
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  640|      0|#define LJ_64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  107|      0|#define checkptr31(x)	(((uint64_t)(uintptr_t)(x) >> 31) == 0)
  |  |  ------------------
  ------------------
  |  Branch (238:7): [True: 0, False: 1.20k]
  |  Branch (238:21): [True: 0, False: 1.20k]
  ------------------
  239|  1.20k|  memset(GG, 0, sizeof(GG_State));
  240|  1.20k|  L = &GG->L;
  241|  1.20k|  g = &GG->g;
  242|  1.20k|  L->gct = ~LJ_TTHREAD;
  ------------------
  |  |  266|  1.20k|#define LJ_TTHREAD		(~6u)
  ------------------
  243|  1.20k|  L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   17|  1.20k|#define LJ_GC_WHITE0	0x01
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   24|  1.20k|#define LJ_GC_FIXED	0x20
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   25|  1.20k|#define LJ_GC_SFIXED	0x40
  ------------------
  244|  1.20k|  L->dummy_ffid = FF_C;
  ------------------
  |  |  475|  1.20k|#define FF_C		1
  ------------------
  245|  1.20k|  setmref(L->glref, g);
  ------------------
  |  |   39|  1.20k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  246|  1.20k|  g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   17|  1.20k|#define LJ_GC_WHITE0	0x01
  ------------------
                g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   24|  1.20k|#define LJ_GC_FIXED	0x20
  ------------------
  247|  1.20k|  g->strempty.marked = LJ_GC_WHITE0;
  ------------------
  |  |   17|  1.20k|#define LJ_GC_WHITE0	0x01
  ------------------
  248|  1.20k|  g->strempty.gct = ~LJ_TSTR;
  ------------------
  |  |  264|  1.20k|#define LJ_TSTR			(~4u)
  ------------------
  249|  1.20k|  g->allocf = allocf;
  250|  1.20k|  g->allocd = allocd;
  251|  1.20k|  g->prng = prng;
  252|  1.20k|#ifndef LUAJIT_USE_SYSMALLOC
  253|  1.20k|  if (allocf == lj_alloc_f) {
  ------------------
  |  Branch (253:7): [True: 1.20k, False: 0]
  ------------------
  254|  1.20k|    lj_alloc_setprng(allocd, &g->prng);
  255|  1.20k|  }
  256|  1.20k|#endif
  257|  1.20k|  setgcref(g->mainthref, obj2gco(L));
  ------------------
  |  |   72|  1.20k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  258|  1.20k|  setgcref(g->uvhead.prev, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  1.20k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  259|  1.20k|  setgcref(g->uvhead.next, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  1.20k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  260|  1.20k|  g->str.mask = ~(MSize)0;
  261|  1.20k|  setnilV(registry(L));
  ------------------
  |  |  869|  1.20k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  262|  1.20k|  setnilV(&g->nilnode.val);
  ------------------
  |  |  869|  1.20k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  263|  1.20k|  setnilV(&g->nilnode.key);
  ------------------
  |  |  869|  1.20k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  264|       |#if !LJ_GC64
  265|       |  setmref(g->nilnode.freetop, &g->nilnode);
  266|       |#endif
  267|  1.20k|  lj_buf_init(NULL, &g->tmpbuf);
  268|  1.20k|  g->gc.state = GCSpause;
  269|  1.20k|  setgcref(g->gc.root, obj2gco(L));
  ------------------
  |  |   72|  1.20k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  270|  1.20k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|  1.20k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  271|  1.20k|  g->gc.total = sizeof(GG_State);
  272|  1.20k|  g->gc.pause = LUAI_GCPAUSE;
  ------------------
  |  |   91|  1.20k|#define LUAI_GCPAUSE	200	/* Pause GC until memory is at 200%. */
  ------------------
  273|  1.20k|  g->gc.stepmul = LUAI_GCMUL;
  ------------------
  |  |   92|  1.20k|#define LUAI_GCMUL	200	/* Run GC at 200% of allocation speed. */
  ------------------
  274|  1.20k|  lj_dispatch_init((GG_State *)L);
  275|  1.20k|  L->status = LUA_ERRERR+1;  /* Avoid touching the stack upon memory error. */
  ------------------
  |  |   48|  1.20k|#define LUA_ERRERR	5
  ------------------
  276|  1.20k|  if (lj_vm_cpcall(L, NULL, NULL, cpluaopen) != 0) {
  ------------------
  |  Branch (276:7): [True: 0, False: 1.20k]
  ------------------
  277|       |    /* Memory allocation error: free partial state. */
  278|      0|    close_state(L);
  279|      0|    return NULL;
  280|      0|  }
  281|  1.20k|  L->status = LUA_OK;
  ------------------
  |  |   43|  1.20k|#define LUA_OK		0
  ------------------
  282|  1.20k|  return L;
  283|  1.20k|}
lua_close:
  296|  1.20k|{
  297|  1.20k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.20k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  298|  1.20k|  int i;
  299|  1.20k|  L = mainthread(g);  /* Only the main thread can be closed. */
  ------------------
  |  |  662|  1.20k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  1.20k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  300|  1.20k|#if LJ_HASPROFILE
  301|  1.20k|  luaJIT_profile_stop(L);
  302|  1.20k|#endif
  303|  1.20k|  setgcrefnull(g->cur_L);
  ------------------
  |  |   76|  1.20k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  304|  1.20k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  1.20k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  305|  1.20k|  lj_gc_separateudata(g, 1);  /* Separate udata which have GC metamethods. */
  306|  1.20k|#if LJ_HASJIT
  307|  1.20k|  G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |  116|  1.20k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  1.20k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  1.20k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |   16|  1.20k|#define JIT_F_ON		0x00000001
  ------------------
  308|  1.20k|  G2J(g)->state = LJ_TRACE_IDLE;
  ------------------
  |  |  116|  1.20k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  1.20k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  1.20k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  309|  1.20k|  lj_dispatch_update(g);
  310|  1.20k|#endif
  311|  1.20k|  for (i = 0;;) {
  312|  1.20k|    hook_enter(g);
  ------------------
  |  |  676|  1.20k|#define hook_enter(g)		((g)->hookmask |= HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  670|  1.20k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  313|  1.20k|    L->status = LUA_OK;
  ------------------
  |  |   43|  1.20k|#define LUA_OK		0
  ------------------
  314|  1.20k|    L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  217|  1.20k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  569|  1.20k|#define LJ_FR2			1
  ------------------
  315|  1.20k|    L->cframe = NULL;
  316|  1.20k|    if (lj_vm_cpcall(L, NULL, NULL, cpfinalize) == LUA_OK) {
  ------------------
  |  |   43|  1.20k|#define LUA_OK		0
  ------------------
  |  Branch (316:9): [True: 1.20k, False: 0]
  ------------------
  317|  1.20k|      if (++i >= 10) break;
  ------------------
  |  Branch (317:11): [True: 0, False: 1.20k]
  ------------------
  318|  1.20k|      lj_gc_separateudata(g, 1);  /* Separate udata again. */
  319|  1.20k|      if (gcref(g->gc.mmudata) == NULL)  /* Until nothing is left to do. */
  ------------------
  |  |   67|  1.20k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (319:11): [True: 1.20k, False: 0]
  ------------------
  320|  1.20k|	break;
  321|  1.20k|    }
  322|  1.20k|  }
  323|  1.20k|  close_state(L);
  324|  1.20k|}
lj_state_new:
  327|    677|{
  328|    677|  lua_State *L1 = lj_mem_newobj(L, lua_State);
  ------------------
  |  |  132|    677|#define lj_mem_newobj(L, t)	((t *)lj_mem_newgco(L, sizeof(t)))
  ------------------
  329|    677|  L1->gct = ~LJ_TTHREAD;
  ------------------
  |  |  266|    677|#define LJ_TTHREAD		(~6u)
  ------------------
  330|    677|  L1->dummy_ffid = FF_C;
  ------------------
  |  |  475|    677|#define FF_C		1
  ------------------
  331|    677|  L1->status = LUA_OK;
  ------------------
  |  |   43|    677|#define LUA_OK		0
  ------------------
  332|    677|  L1->stacksize = 0;
  333|    677|  setmref(L1->stack, NULL);
  ------------------
  |  |   39|    677|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  334|    677|  L1->cframe = NULL;
  335|       |  /* NOBARRIER: The lua_State is new (marked white). */
  336|    677|  setgcrefnull(L1->openupval);
  ------------------
  |  |   76|    677|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  337|    677|  setmrefr(L1->glref, L->glref);
  ------------------
  |  |   41|    677|#define setmrefr(r, v)	((r).ptr64 = (v).ptr64)
  ------------------
  338|    677|  setgcrefr(L1->env, L->env);
  ------------------
  |  |   77|    677|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  339|    677|  stack_init(L1, L);  /* init stack */
  340|    677|  lj_assertL(iswhite(obj2gco(L1)), "new thread object is not white");
  ------------------
  |  |  365|    677|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    677|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 677, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    677|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  341|      0|  return L1;
  342|    677|}
lj_state_free:
  345|    677|{
  346|    677|  lj_assertG(L != mainthread(g), "free of main thread");
  ------------------
  |  |  364|    677|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    677|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 677, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    677|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  347|    677|  if (obj2gco(L) == gcref(g->cur_L))
  ------------------
  |  |  772|    677|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                if (obj2gco(L) == gcref(g->cur_L))
  ------------------
  |  |   67|    677|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (347:7): [True: 0, False: 677]
  ------------------
  348|      0|    setgcrefnull(g->cur_L);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  349|    677|  if (gcref(L->openupval) != NULL) {
  ------------------
  |  |   67|    677|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (349:7): [True: 0, False: 677]
  ------------------
  350|      0|    lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  351|      0|    lj_trace_abort(g);  /* For aa_uref soundness. */
  ------------------
  |  |   45|      0|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  352|      0|    lj_assertG(gcref(L->openupval) == NULL, "stale open upvalues");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  353|      0|  }
  354|    677|  lj_mem_freevec(g, tvref(L->stack), L->stacksize, TValue);
  ------------------
  |  |  130|    677|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  355|    677|  lj_mem_freet(g, L);
  ------------------
  |  |  134|    677|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  356|    677|}
lj_state.c:resizestack:
   58|    157|{
   59|    157|  TValue *st, *oldst = tvref(L->stack);
  ------------------
  |  |  217|    157|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    157|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   60|    157|  ptrdiff_t delta;
   61|    157|  MSize oldsize = L->stacksize;
   62|    157|  MSize realsize = n + 1 + LJ_STACK_EXTRA;
  ------------------
  |  |   72|    157|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|    157|#define LJ_FR2			1
  |  |  ------------------
  ------------------
   63|    157|  GCobj *up;
   64|    157|  lj_assertL((MSize)(tvref(L->maxstack)-oldst) == L->stacksize-LJ_STACK_EXTRA-1,
  ------------------
  |  |  365|    157|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    157|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 157, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    157|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   65|      0|	     "inconsistent stack size");
   66|    157|  st = (TValue *)lj_mem_realloc(L, tvref(L->stack),
  ------------------
  |  |  217|    157|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    157|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   67|    157|				(MSize)(oldsize*sizeof(TValue)),
   68|    157|				(MSize)(realsize*sizeof(TValue)));
   69|    157|  setmref(L->stack, st);
  ------------------
  |  |   39|    157|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   70|    157|  delta = (char *)st - (char *)oldst;
   71|    157|  setmref(L->maxstack, st + n);
  ------------------
  |  |   39|    157|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   72|  18.3k|  while (oldsize < realsize)  /* Clear new slots. */
  ------------------
  |  Branch (72:10): [True: 18.1k, False: 157]
  ------------------
   73|  18.1k|    setnilV(st + oldsize++);
  ------------------
  |  |  869|  18.1k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   74|    157|  L->stacksize = realsize;
   75|    157|  if ((size_t)(mref(G(L)->jit_base, char) - (char *)oldst) < oldsize)
  ------------------
  |  |   36|    157|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (75:7): [True: 0, False: 157]
  ------------------
   76|      0|    setmref(G(L)->jit_base, mref(G(L)->jit_base, char) + delta);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   77|    157|  L->base = (TValue *)((char *)L->base + delta);
   78|    157|  L->top = (TValue *)((char *)L->top + delta);
   79|    157|  for (up = gcref(L->openupval); up != NULL; up = gcnext(up))
  ------------------
  |  |   67|    157|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                for (up = gcref(L->openupval); up != NULL; up = gcnext(up))
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (79:34): [True: 0, False: 157]
  ------------------
   80|      0|    setmref(gco2uv(up)->v, (TValue *)((char *)uvval(gco2uv(up)) + delta));
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  |  Branch (39:55): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   81|    157|}
lj_state.c:cpgrowstack:
  134|    157|{
  135|    157|  UNUSED(dummy);
  ------------------
  |  |   91|    157|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  136|    157|  lj_state_growstack(co, *(MSize *)ud);
  137|    157|  return NULL;
  138|    157|}
lj_state.c:cpluaopen:
  164|  1.20k|{
  165|  1.20k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.20k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  166|  1.20k|  UNUSED(dummy);
  ------------------
  |  |   91|  1.20k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  167|  1.20k|  UNUSED(ud);
  ------------------
  |  |   91|  1.20k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  168|  1.20k|  stack_init(L, L);
  169|       |  /* NOBARRIER: State initialization, all objects are white. */
  170|  1.20k|  setgcref(L->env, obj2gco(lj_tab_new(L, 0, LJ_MIN_GLOBAL)));
  ------------------
  |  |   72|  1.20k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  171|  1.20k|  settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |  703|  1.20k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  702|  1.20k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |   78|  1.20k|#define LJ_MIN_REGISTRY	2		/* Min. registry size (hbits). */
  ------------------
  172|  1.20k|  lj_str_init(L);
  173|  1.20k|  lj_meta_init(L);
  174|  1.20k|  lj_lex_init(L);
  175|  1.20k|  fixstring(lj_err_str(L, LJ_ERR_ERRMEM));  /* Preallocate memory error msg. */
  ------------------
  |  |   45|  1.20k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  1.20k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  176|  1.20k|  g->gc.threshold = 4*g->gc.total;
  177|  1.20k|  lj_trace_initstate(g);
  178|  1.20k|  lj_err_verify();
  179|  1.20k|  return NULL;
  180|  1.20k|}
lj_state.c:close_state:
  183|  1.20k|{
  184|  1.20k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.20k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  185|  1.20k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  1.20k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  186|  1.20k|  lj_gc_freeall(g);
  187|  1.20k|  lj_assertG(gcref(g->gc.root) == obj2gco(L),
  ------------------
  |  |  364|  1.20k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.20k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.20k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  188|      0|	     "main thread is not first GC object");
  189|  1.20k|  lj_assertG(g->str.num == 0, "leaked %d strings", g->str.num);
  ------------------
  |  |  364|  1.20k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.20k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.20k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  190|      0|  lj_trace_freestate(g);
  191|  1.20k|#if LJ_HASFFI
  192|  1.20k|  lj_ctype_freestate(g);
  193|  1.20k|#endif
  194|  1.20k|  lj_str_freetab(g);
  ------------------
  |  |   25|  1.20k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  1.20k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  195|  1.20k|  lj_buf_free(g, &g->tmpbuf);
  196|  1.20k|  lj_mem_freevec(g, tvref(L->stack), L->stacksize, TValue);
  ------------------
  |  |  130|  1.20k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  197|  1.20k|#if LJ_64
  198|  1.20k|  if (mref(g->gc.lightudseg, uint32_t)) {
  ------------------
  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:20): [True: 8, False: 1.19k]
  |  |  ------------------
  ------------------
  199|      8|    MSize segnum = g->gc.lightudnum ? (2 << lj_fls(g->gc.lightudnum)) : 2;
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (199:20): [True: 0, False: 8]
  ------------------
  200|      8|    lj_mem_freevec(g, mref(g->gc.lightudseg, uint32_t), segnum, uint32_t);
  ------------------
  |  |  130|      8|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  201|      8|  }
  202|  1.20k|#endif
  203|  1.20k|  lj_assertG(g->gc.total == sizeof(GG_State),
  ------------------
  |  |  364|  1.20k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.20k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.20k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  204|      0|	     "memory leak of %lld bytes",
  205|      0|	     (long long)(g->gc.total - sizeof(GG_State)));
  206|      0|#ifndef LUAJIT_USE_SYSMALLOC
  207|  1.20k|  if (g->allocf == lj_alloc_f)
  ------------------
  |  Branch (207:7): [True: 1.20k, False: 0]
  ------------------
  208|  1.20k|    lj_alloc_destroy(g->allocd);
  209|      0|  else
  210|      0|#endif
  211|      0|    g->allocf(g->allocd, G2GG(g), sizeof(GG_State), 0);
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  212|  1.20k|}
lj_state.c:cpfinalize:
  286|  1.20k|{
  287|  1.20k|  UNUSED(dummy);
  ------------------
  |  |   91|  1.20k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  288|  1.20k|  UNUSED(ud);
  ------------------
  |  |   91|  1.20k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  289|  1.20k|  lj_gc_finalize_cdata(L);
  290|  1.20k|  lj_gc_finalize_udata(L);
  291|       |  /* Frame pop omitted. */
  292|  1.20k|  return NULL;
  293|  1.20k|}
lj_state.c:stack_init:
  147|  1.87k|{
  148|  1.87k|  TValue *stend, *st = lj_mem_newvec(L, LJ_STACK_START+LJ_STACK_EXTRA, TValue);
  ------------------
  |  |  125|  1.87k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  1.87k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  149|  1.87k|  setmref(L1->stack, st);
  ------------------
  |  |   39|  1.87k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  150|  1.87k|  L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   38|  1.87k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  1.87k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  1.87k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   72|  1.87k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  1.87k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  151|  1.87k|  stend = st + L1->stacksize;
  152|  1.87k|  setmref(L1->maxstack, stend - LJ_STACK_EXTRA - 1);
  ------------------
  |  |   39|  1.87k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  153|  1.87k|  setthreadV(L1, st++, L1);  /* Needed for curr_funcisL() on empty stack. */
  154|  1.87k|  if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  569|  1.87k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  869|  1.87k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  155|  1.87k|  L1->base = L1->top = st;
  156|  88.2k|  while (st < stend)  /* Clear new slots. */
  ------------------
  |  Branch (156:10): [True: 86.3k, False: 1.87k]
  ------------------
  157|  86.3k|    setnilV(st++);
  ------------------
  |  |  869|  86.3k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  158|  1.87k|}

lj_dispatch.c:lj_state_checkstack:
   24|      6|{
   25|      6|  if ((mref(L->maxstack, char) - (char *)L->top) <=
  ------------------
  |  |   36|      6|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (25:7): [True: 0, False: 6]
  ------------------
   26|      6|      (ptrdiff_t)need*(ptrdiff_t)sizeof(TValue))
   27|      0|    lj_state_growstack(L, need);
   28|      6|}

lj_str_resize:
  139|  1.20k|{
  140|  1.20k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.20k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  141|  1.20k|  GCRef *newtab, *oldtab = g->str.tab;
  142|  1.20k|  MSize i;
  143|       |
  144|       |  /* No resizing during GC traversal or if already too big. */
  145|  1.20k|  if (g->gc.state == GCSsweepstring || newmask >= LJ_MAX_STRTAB-1)
  ------------------
  |  |   58|  1.20k|#define LJ_MAX_STRTAB	(1<<26)		/* Max. string table size. */
  ------------------
  |  Branch (145:7): [True: 0, False: 1.20k]
  |  Branch (145:40): [True: 0, False: 1.20k]
  ------------------
  146|      0|    return;
  147|       |
  148|  1.20k|  newtab = lj_mem_newvec(L, newmask+1, GCRef);
  ------------------
  |  |  125|  1.20k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  1.20k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  149|  1.20k|  memset(newtab, 0, (newmask+1)*sizeof(GCRef));
  150|       |
  151|  1.20k|#if LUAJIT_SECURITY_STRHASH
  152|       |  /* Check which chains need secondary hashes. */
  153|  1.20k|  if (g->str.second) {
  ------------------
  |  Branch (153:7): [True: 0, False: 1.20k]
  ------------------
  154|      0|    int newsecond = 0;
  155|       |    /* Compute primary chain lengths. */
  156|      0|    for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (156:27): [True: 0, False: 0]
  ------------------
  157|      0|      GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  158|      0|      while (o) {
  ------------------
  |  Branch (158:14): [True: 0, False: 0]
  ------------------
  159|      0|	GCstr *s = gco2str(o);
  ------------------
  |  |  762|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  160|      0|	MSize hash = s->hashalg ? hash_sparse(g->str.seed, strdata(s), s->len) :
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (160:15): [True: 0, False: 0]
  ------------------
  161|      0|				  s->hash;
  162|      0|	hash &= newmask;
  163|      0|	setgcrefp(newtab[hash], gcrefu(newtab[hash]) + 1);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  164|      0|	o = gcnext(o);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  165|      0|      }
  166|      0|    }
  167|       |    /* Mark secondary chains. */
  168|      0|    for (i = newmask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (168:23): [True: 0, False: 0]
  ------------------
  169|      0|      int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
                    int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |  135|      0|#define LJ_STR_MAXCOLL		32
  ------------------
  170|      0|      newsecond |= secondary;
  171|      0|      setgcrefp(newtab[i], secondary);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  172|      0|    }
  173|      0|    g->str.second = newsecond;
  174|      0|  }
  175|  1.20k|#endif
  176|       |
  177|       |  /* Reinsert all strings from the old table into the new table. */
  178|  1.20k|  for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (178:25): [True: 0, False: 1.20k]
  ------------------
  179|      0|    GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  180|      0|    while (o) {
  ------------------
  |  Branch (180:12): [True: 0, False: 0]
  ------------------
  181|      0|      GCobj *next = gcnext(o);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  182|      0|      GCstr *s = gco2str(o);
  ------------------
  |  |  762|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|      MSize hash = s->hash;
  184|      0|#if LUAJIT_SECURITY_STRHASH
  185|      0|      uintptr_t u;
  186|      0|      if (LJ_LIKELY(!s->hashalg)) {  /* String hashed with primary hash. */
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  187|      0|	hash &= newmask;
  188|      0|	u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  189|      0|	if (LJ_UNLIKELY(u & 1)) {  /* Switch string to secondary hash. */
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  190|      0|	  s->hash = hash = hash_dense(g->str.seed, s->hash, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  191|      0|	  s->hashalg = 1;
  192|      0|	  hash &= newmask;
  193|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  194|      0|	}
  195|      0|      } else {  /* String hashed with secondary hash. */
  196|      0|	MSize shash = hash_sparse(g->str.seed, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  197|      0|	u = gcrefu(newtab[shash & newmask]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  198|      0|	if (u & 1) {
  ------------------
  |  Branch (198:6): [True: 0, False: 0]
  ------------------
  199|      0|	  hash &= newmask;
  200|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  201|      0|	} else {  /* Revert string back to primary hash. */
  202|      0|	  s->hash = shash;
  203|      0|	  s->hashalg = 0;
  204|      0|	  hash = (shash & newmask);
  205|      0|	}
  206|      0|      }
  207|       |      /* NOBARRIER: The string table is a GC root. */
  208|      0|      setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  209|      0|      setgcrefp(newtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  210|       |#else
  211|       |      hash &= newmask;
  212|       |      /* NOBARRIER: The string table is a GC root. */
  213|       |      setgcrefr(o->gch.nextgc, newtab[hash]);
  214|       |      setgcref(newtab[hash], o);
  215|       |#endif
  216|      0|      o = next;
  217|      0|    }
  218|      0|  }
  219|       |
  220|       |  /* Free old table and replace with new table. */
  221|  1.20k|  lj_str_freetab(g);
  ------------------
  |  |   25|  1.20k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  1.20k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  222|  1.20k|  g->str.tab = newtab;
  223|  1.20k|  g->str.mask = newmask;
  224|  1.20k|}
lj_str_new:
  324|  56.9k|{
  325|  56.9k|  global_State *g = G(L);
  ------------------
  |  |  702|  56.9k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  56.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  326|  56.9k|  if (lenx-1 < LJ_MAX_STR-1) {
  ------------------
  |  |   54|  56.9k|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|  56.9k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (326:7): [True: 56.8k, False: 90]
  ------------------
  327|  56.8k|    MSize len = (MSize)lenx;
  328|  56.8k|    StrHash hash = hash_sparse(g->str.seed, str, len);
  329|  56.8k|    MSize coll = 0;
  330|  56.8k|    int hashalg = 0;
  331|       |    /* Check if the string has already been interned. */
  332|  56.8k|    GCobj *o = gcref(g->str.tab[hash & g->str.mask]);
  ------------------
  |  |   67|  56.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  333|  56.8k|#if LUAJIT_SECURITY_STRHASH
  334|  56.8k|    if (LJ_UNLIKELY((uintptr_t)o & 1)) {  /* Secondary hash for this chain? */
  ------------------
  |  |  146|  56.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 56.8k]
  |  |  ------------------
  ------------------
  335|      0|      hashalg = 1;
  336|      0|      hash = hash_dense(g->str.seed, hash, str, len);
  337|      0|      o = (GCobj *)(gcrefu(g->str.tab[hash & g->str.mask]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  338|      0|    }
  339|  56.8k|#endif
  340|  61.7k|    while (o != NULL) {
  ------------------
  |  Branch (340:12): [True: 6.10k, False: 55.6k]
  ------------------
  341|  6.10k|      GCstr *sx = gco2str(o);
  ------------------
  |  |  762|  6.10k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  6.10k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  6.10k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  6.10k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 6.10k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  6.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  342|  6.10k|      if (sx->hash == hash && sx->len == len) {
  ------------------
  |  Branch (342:11): [True: 1.23k, False: 4.87k]
  |  Branch (342:31): [True: 1.23k, False: 1]
  ------------------
  343|  1.23k|	if (memcmp(str, strdata(sx), len) == 0) {
  ------------------
  |  |  316|  1.23k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (343:6): [True: 1.23k, False: 0]
  ------------------
  344|  1.23k|	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   37|  1.23k|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|  1.23k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  1.23k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  1.23k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  1.23k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  1.23k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  1.23k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  1.23k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 1.23k]
  |  |  ------------------
  ------------------
              	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   43|      0|#define flipwhite(x)	((x)->gch.marked ^= LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  345|  1.23k|	  return sx;  /* Return existing string. */
  346|  1.23k|	}
  347|      0|	coll++;
  348|      0|      }
  349|  4.87k|      coll++;
  350|  4.87k|      o = gcnext(o);
  ------------------
  |  |   90|  4.87k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  4.87k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  351|  4.87k|    }
  352|  55.6k|#if LUAJIT_SECURITY_STRHASH
  353|       |    /* Rehash chain if there are too many collisions. */
  354|  55.6k|    if (LJ_UNLIKELY(coll > LJ_STR_MAXCOLL) && !hashalg) {
  ------------------
  |  |  146|   111k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 55.6k]
  |  |  ------------------
  ------------------
  |  Branch (354:47): [True: 0, False: 0]
  ------------------
  355|      0|      return lj_str_rehash_chain(L, hash, str, len);
  356|      0|    }
  357|  55.6k|#endif
  358|       |    /* Otherwise allocate a new string. */
  359|  55.6k|    return lj_str_alloc(L, str, len, hash, hashalg);
  360|  55.6k|  } else {
  361|     90|    if (lenx)
  ------------------
  |  Branch (361:9): [True: 0, False: 90]
  ------------------
  362|      0|      lj_err_msg(L, LJ_ERR_STROV);
  363|     90|    return &g->strempty;
  364|     90|  }
  365|  56.9k|}
lj_str_free:
  368|  55.6k|{
  369|  55.6k|  g->str.num--;
  370|  55.6k|  lj_mem_free(g, s, lj_str_size(s->len));
  ------------------
  |  |   29|  55.6k|#define lj_str_size(len)	(sizeof(GCstr) + (((len)+4) & ~(MSize)3))
  ------------------
  371|  55.6k|}
lj_str_init:
  374|  1.20k|{
  375|  1.20k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.20k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.20k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  376|  1.20k|  g->str.seed = lj_prng_u64(&g->prng);
  377|  1.20k|  lj_str_resize(L, LJ_MIN_STRTAB-1);
  ------------------
  |  |   79|  1.20k|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  378|  1.20k|}
lj_str.c:hash_sparse:
   86|  56.8k|{
   87|       |  /* Constants taken from lookup3 hash by Bob Jenkins. */
   88|  56.8k|  StrHash a, b, h = len ^ (StrHash)seed;
   89|  56.8k|  if (len >= 4) {  /* Caveat: unaligned access! */
  ------------------
  |  Branch (89:7): [True: 45.6k, False: 11.2k]
  ------------------
   90|  45.6k|    a = lj_getu32(str);
   91|  45.6k|    h ^= lj_getu32(str+len-4);
   92|  45.6k|    b = lj_getu32(str+(len>>1)-2);
   93|  45.6k|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  45.6k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   94|  45.6k|    b += lj_getu32(str+(len>>2)-1);
   95|  45.6k|  } else {
   96|  11.2k|    a = *(const uint8_t *)str;
   97|  11.2k|    h ^= *(const uint8_t *)(str+len-1);
   98|  11.2k|    b = *(const uint8_t *)(str+(len>>1));
   99|  11.2k|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  11.2k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  100|  11.2k|  }
  101|  56.8k|  a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|  56.8k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  102|  56.8k|  b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|  56.8k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  103|  56.8k|  h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|  56.8k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  104|  56.8k|  return h;
  105|  56.8k|}
lj_str.c:lj_str_alloc:
  286|  55.6k|{
  287|  55.6k|  GCstr *s = lj_mem_newt(L, lj_str_size(len), GCstr);
  ------------------
  |  |  133|  55.6k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  55.6k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  288|  55.6k|  global_State *g = G(L);
  ------------------
  |  |  702|  55.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  55.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|  55.6k|  uintptr_t u;
  290|  55.6k|  newwhite(g, s);
  ------------------
  |  |   40|  55.6k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  772|  55.6k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  55.6k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  55.6k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  55.6k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  55.6k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  291|  55.6k|  s->gct = ~LJ_TSTR;
  ------------------
  |  |  264|  55.6k|#define LJ_TSTR			(~4u)
  ------------------
  292|  55.6k|  s->len = len;
  293|  55.6k|  s->hash = hash;
  294|       |#ifndef STRID_RESEED_INTERVAL
  295|       |  s->sid = g->str.id++;
  296|       |#elif STRID_RESEED_INTERVAL
  297|  55.6k|  if (!g->str.idreseed--) {
  ------------------
  |  Branch (297:7): [True: 1.43k, False: 54.2k]
  ------------------
  298|  1.43k|    uint64_t r = lj_prng_u64(&g->prng);
  299|  1.43k|    g->str.id = (StrID)r;
  300|  1.43k|    g->str.idreseed = (uint8_t)(r >> (64 - STRID_RESEED_INTERVAL));
  ------------------
  |  |  276|  1.43k|#define STRID_RESEED_INTERVAL	8
  ------------------
  301|  1.43k|  }
  302|  55.6k|  s->sid = g->str.id++;
  303|       |#else
  304|       |  s->sid = (StrID)lj_prng_u64(&g->prng);
  305|       |#endif
  306|  55.6k|  s->reserved = 0;
  307|  55.6k|  s->hashalg = (uint8_t)hashalg;
  308|       |  /* Clear last 4 bytes of allocated memory. Implies zero-termination, too. */
  309|  55.6k|  *(uint32_t *)(strdatawr(s)+(len & ~(MSize)3)) = 0;
  ------------------
  |  |  317|  55.6k|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  310|  55.6k|  memcpy(strdatawr(s), str, len);
  ------------------
  |  |  317|  55.6k|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  311|       |  /* Add to string hash table. */
  312|  55.6k|  hash &= g->str.mask;
  313|  55.6k|  u = gcrefu(g->str.tab[hash]);
  ------------------
  |  |   69|  55.6k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  314|  55.6k|  setgcrefp(s->nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  55.6k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  315|       |  /* NOBARRIER: The string table is a GC root. */
  316|  55.6k|  setgcrefp(g->str.tab[hash], ((uintptr_t)s | (u & 1)));
  ------------------
  |  |   75|  55.6k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  317|  55.6k|  if (g->str.num++ > g->str.mask)  /* Allow a 100% load factor. */
  ------------------
  |  Branch (317:7): [True: 0, False: 55.6k]
  ------------------
  318|      0|    lj_str_resize(L, (g->str.mask<<1)+1);  /* Grow string table. */
  319|  55.6k|  return s;  /* Return newly interned string. */
  320|  55.6k|}

lj_strfmt_parse:
   35|     21|{
   36|     21|  const uint8_t *p = fs->p, *e = fs->e;
   37|     21|  fs->str = (const char *)p;
   38|     28|  for (; p < e; p++) {
  ------------------
  |  Branch (38:10): [True: 14, False: 14]
  ------------------
   39|     14|    if (*p == '%') {  /* Escape char? */
  ------------------
  |  Branch (39:9): [True: 7, False: 7]
  ------------------
   40|      7|      if (p[1] == '%') {  /* '%%'? */
  ------------------
  |  Branch (40:11): [True: 0, False: 7]
  ------------------
   41|      0|	fs->p = ++p+1;
   42|      0|	goto retlit;
   43|      7|      } else {
   44|      7|	SFormat sf = 0;
   45|      7|	uint32_t c;
   46|      7|	if (p != (const uint8_t *)fs->str)
  ------------------
  |  Branch (46:6): [True: 0, False: 7]
  ------------------
   47|      0|	  break;
   48|      7|	for (p++; (uint32_t)*p - ' ' <= (uint32_t)('0' - ' '); p++) {
  ------------------
  |  Branch (48:12): [True: 0, False: 7]
  ------------------
   49|       |	  /* Parse flags. */
   50|      0|	  if (*p == '-') sf |= STRFMT_F_LEFT;
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (50:8): [True: 0, False: 0]
  ------------------
   51|      0|	  else if (*p == '+') sf |= STRFMT_F_PLUS;
  ------------------
  |  |   38|      0|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (51:13): [True: 0, False: 0]
  ------------------
   52|      0|	  else if (*p == '0') sf |= STRFMT_F_ZERO;
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (52:13): [True: 0, False: 0]
  ------------------
   53|      0|	  else if (*p == ' ') sf |= STRFMT_F_SPACE;
  ------------------
  |  |   40|      0|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (53:13): [True: 0, False: 0]
  ------------------
   54|      0|	  else if (*p == '#') sf |= STRFMT_F_ALT;
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (54:13): [True: 0, False: 0]
  ------------------
   55|      0|	  else break;
   56|      0|	}
   57|      7|	if ((uint32_t)*p - '0' < 10) {  /* Parse width. */
  ------------------
  |  Branch (57:6): [True: 0, False: 7]
  ------------------
   58|      0|	  uint32_t width = (uint32_t)*p++ - '0';
   59|      0|	  if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (59:8): [True: 0, False: 0]
  ------------------
   60|      0|	    width = (uint32_t)*p++ - '0' + width*10;
   61|      0|	  sf |= (width << STRFMT_SH_WIDTH);
  ------------------
  |  |   45|      0|#define STRFMT_SH_WIDTH	16
  ------------------
   62|      0|	}
   63|      7|	if (*p == '.') {  /* Parse precision. */
  ------------------
  |  Branch (63:6): [True: 0, False: 7]
  ------------------
   64|      0|	  uint32_t prec = 0;
   65|      0|	  p++;
   66|      0|	  if ((uint32_t)*p - '0' < 10) {
  ------------------
  |  Branch (66:8): [True: 0, False: 0]
  ------------------
   67|      0|	    prec = (uint32_t)*p++ - '0';
   68|      0|	    if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (68:10): [True: 0, False: 0]
  ------------------
   69|      0|	      prec = (uint32_t)*p++ - '0' + prec*10;
   70|      0|	  }
   71|      0|	  sf |= ((prec+1) << STRFMT_SH_PREC);
  ------------------
  |  |   46|      0|#define STRFMT_SH_PREC	24
  ------------------
   72|      0|	}
   73|       |	/* Parse conversion. */
   74|      7|	c = (uint32_t)*p - 'A';
   75|      7|	if (LJ_LIKELY(c <= (uint32_t)('x' - 'A'))) {
  ------------------
  |  |  145|      7|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 7, False: 0]
  |  |  ------------------
  ------------------
   76|      7|	  uint32_t sx = strfmt_map[c];
   77|      7|	  if (sx) {
  ------------------
  |  Branch (77:8): [True: 7, False: 0]
  ------------------
   78|      7|	    fs->p = p+1;
   79|      7|	    return (sf | sx | ((c & 0x20) ? 0 : STRFMT_F_UPPER));
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (79:25): [True: 7, False: 0]
  ------------------
   80|      7|	  }
   81|      7|	}
   82|       |	/* Return error location. */
   83|      0|	if (*p >= 32) p++;
  ------------------
  |  Branch (83:6): [True: 0, False: 0]
  ------------------
   84|      0|	fs->len = (MSize)(p - (const uint8_t *)fs->str);
   85|      0|	fs->p = fs->e;
   86|      0|	return STRFMT_ERR;
   87|      7|      }
   88|      7|    }
   89|     14|  }
   90|     14|  fs->p = p;
   91|     14|retlit:
   92|     14|  fs->len = (MSize)(p - (const uint8_t *)fs->str);
   93|     14|  return fs->len ? STRFMT_LIT : STRFMT_EOF;
  ------------------
  |  Branch (93:10): [True: 7, False: 7]
  ------------------
   94|     14|}
lj_strfmt_wint:
  103|     22|{
  104|     22|  uint32_t u = (uint32_t)k;
  105|     22|  if (k < 0) { u = ~u+1u; *p++ = '-'; }
  ------------------
  |  Branch (105:7): [True: 0, False: 22]
  ------------------
  106|     22|  if (u < 10000) {
  ------------------
  |  Branch (106:7): [True: 22, False: 0]
  ------------------
  107|     22|    if (u < 10) goto dig1;
  ------------------
  |  Branch (107:9): [True: 9, False: 13]
  ------------------
  108|     13|    if (u < 100) goto dig2;
  ------------------
  |  Branch (108:9): [True: 5, False: 8]
  ------------------
  109|      8|    if (u < 1000) goto dig3;
  ------------------
  |  Branch (109:9): [True: 8, False: 0]
  ------------------
  110|      8|  } else {
  111|      0|    uint32_t v = u / 10000; u -= v * 10000;
  112|      0|    if (v < 10000) {
  ------------------
  |  Branch (112:9): [True: 0, False: 0]
  ------------------
  113|      0|      if (v < 10) goto dig5;
  ------------------
  |  Branch (113:11): [True: 0, False: 0]
  ------------------
  114|      0|      if (v < 100) goto dig6;
  ------------------
  |  Branch (114:11): [True: 0, False: 0]
  ------------------
  115|      0|      if (v < 1000) goto dig7;
  ------------------
  |  Branch (115:11): [True: 0, False: 0]
  ------------------
  116|      0|    } else {
  117|      0|      uint32_t w = v / 10000; v -= w * 10000;
  118|      0|      if (w >= 10) WINT_R(w, 10, 10)
  ------------------
  |  |   99|      0|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  |  Branch (118:11): [True: 0, False: 0]
  ------------------
  119|      0|      *p++ = (char)('0'+w);
  120|      0|    }
  121|      0|    WINT_R(v, 23, 1000)
  ------------------
  |  |   99|      0|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  122|      0|    dig7: WINT_R(v, 12, 100)
  ------------------
  |  |   99|      0|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  123|      0|    dig6: WINT_R(v, 10, 10)
  ------------------
  |  |   99|      0|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  124|      0|    dig5: *p++ = (char)('0'+v);
  125|      0|  }
  126|      0|  WINT_R(u, 23, 1000)
  ------------------
  |  |   99|      0|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  127|      8|  dig3: WINT_R(u, 12, 100)
  ------------------
  |  |   99|      8|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  128|     13|  dig2: WINT_R(u, 10, 10)
  ------------------
  |  |   99|     13|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  129|     22|  dig1: *p++ = (char)('0'+u);
  130|     22|  return p;
  131|     13|}
lj_strfmt_number:
  495|      6|{
  496|      6|  return tvisint(o) ? lj_strfmt_int(L, intV(o)) : lj_strfmt_num(L, o);
  ------------------
  |  |  800|      6|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|     12|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                return tvisint(o) ? lj_strfmt_int(L, intV(o)) : lj_strfmt_num(L, o);
  ------------------
  |  |  864|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  497|      6|}
lj_strfmt_pushvf:
  551|      7|{
  552|      7|  SBuf *sb = lj_buf_tmp_(L);
  553|      7|  FormatState fs;
  554|      7|  SFormat sf;
  555|      7|  GCstr *str;
  556|      7|  lj_strfmt_init(&fs, fmt, (MSize)strlen(fmt));
  557|     21|  while ((sf = lj_strfmt_parse(&fs)) != STRFMT_EOF) {
  ------------------
  |  Branch (557:10): [True: 14, False: 7]
  ------------------
  558|     14|    switch (STRFMT_TYPE(sf)) {
  ------------------
  |  |   48|     14|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  559|      7|    case STRFMT_LIT:
  ------------------
  |  Branch (559:5): [True: 7, False: 7]
  ------------------
  560|      7|      lj_buf_putmem(sb, fs.str, fs.len);
  561|      7|      break;
  562|      0|    case STRFMT_INT:
  ------------------
  |  Branch (562:5): [True: 0, False: 14]
  ------------------
  563|      0|      lj_strfmt_putfxint(sb, sf, va_arg(argp, int32_t));
  564|      0|      break;
  565|      0|    case STRFMT_UINT:
  ------------------
  |  Branch (565:5): [True: 0, False: 14]
  ------------------
  566|      0|      lj_strfmt_putfxint(sb, sf, va_arg(argp, uint32_t));
  567|      0|      break;
  568|      0|    case STRFMT_NUM:
  ------------------
  |  Branch (568:5): [True: 0, False: 14]
  ------------------
  569|      0|      lj_strfmt_putfnum(sb, STRFMT_G14, va_arg(argp, lua_Number));
  ------------------
  |  |   67|      0|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|      0|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      0|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  570|      0|      break;
  571|      7|    case STRFMT_STR: {
  ------------------
  |  Branch (571:5): [True: 7, False: 7]
  ------------------
  572|      7|      const char *s = va_arg(argp, char *);
  573|      7|      if (s == NULL) s = "(null)";
  ------------------
  |  Branch (573:11): [True: 0, False: 7]
  ------------------
  574|      7|      lj_buf_putmem(sb, s, (MSize)strlen(s));
  575|      7|      break;
  576|      0|      }
  577|      0|    case STRFMT_CHAR:
  ------------------
  |  Branch (577:5): [True: 0, False: 14]
  ------------------
  578|      0|      lj_buf_putb(sb, va_arg(argp, int));
  579|      0|      break;
  580|      0|    case STRFMT_PTR:
  ------------------
  |  Branch (580:5): [True: 0, False: 14]
  ------------------
  581|      0|      lj_strfmt_putptr(sb, va_arg(argp, void *));
  582|      0|      break;
  583|      0|    case STRFMT_ERR:
  ------------------
  |  Branch (583:5): [True: 0, False: 14]
  ------------------
  584|      0|    default:
  ------------------
  |  Branch (584:5): [True: 0, False: 14]
  ------------------
  585|      0|      lj_buf_putb(sb, '?');
  586|      0|      lj_assertL(0, "bad string format near offset %d", fs.len);
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  587|      0|      break;
  588|     14|    }
  589|     14|  }
  590|      7|  str = lj_buf_str(L, sb);
  591|      7|  setstrV(L, L->top, str);
  592|      7|  incr_top(L);
  ------------------
  |  |   12|      7|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|     14|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      7|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 7]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  593|      7|  return strdata(str);
  ------------------
  |  |  316|      7|#define strdata(s)	((const char *)((s)+1))
  ------------------
  594|      7|}

lj_strfmt.c:lj_strfmt_init:
   79|      7|{
   80|      7|  fs->p = (const uint8_t *)p;
   81|      7|  fs->e = (const uint8_t *)p + len;
   82|       |  /* Must be NUL-terminated. May have NULs inside, too. */
   83|      7|  lj_assertX(*fs->e == 0, "format not NUL-terminated");
  ------------------
  |  |  366|      7|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      7|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      7|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|      7|}

lj_strfmt_putfnum:
  578|     16|{
  579|     16|  sb->w = lj_strfmt_wfnum(sb, sf, n, NULL);
  580|     16|  return sb;
  581|     16|}
lj_strfmt_num:
  587|      6|{
  588|      6|  char buf[STRFMT_MAXBUF_NUM];
  589|      6|  MSize len = (MSize)(lj_strfmt_wfnum(NULL, STRFMT_G14, o->n, buf) - buf);
  ------------------
  |  |   67|      6|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|      6|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      6|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|      6|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  590|      6|  return lj_str_new(L, buf, len);
  591|      6|}
lj_strfmt_num.c:lj_strfmt_wfnum:
  270|     22|{
  271|     22|  MSize width = STRFMT_WIDTH(sf), prec = STRFMT_PREC(sf), len;
  ------------------
  |  |   49|     22|#define STRFMT_WIDTH(sf)	(((sf) >> STRFMT_SH_WIDTH) & 255u)
  |  |  ------------------
  |  |  |  |   45|     22|#define STRFMT_SH_WIDTH	16
  |  |  ------------------
  ------------------
                MSize width = STRFMT_WIDTH(sf), prec = STRFMT_PREC(sf), len;
  ------------------
  |  |   50|     22|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|     22|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  272|     22|  TValue t;
  273|     22|  t.n = n;
  274|     22|  if (LJ_UNLIKELY((t.u32.hi << 1) >= 0xffe00000)) {
  ------------------
  |  |  146|     22|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 22]
  |  |  ------------------
  ------------------
  275|       |    /* Handle non-finite values uniformly for %a, %e, %f, %g. */
  276|      0|    int prefix = 0, ch = (sf & STRFMT_F_UPPER) ? 0x202020 : 0;
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (276:26): [True: 0, False: 0]
  ------------------
  277|      0|    if (((t.u32.hi & 0x000fffff) | t.u32.lo) != 0) {
  ------------------
  |  Branch (277:9): [True: 0, False: 0]
  ------------------
  278|      0|      ch ^= ('n' << 16) | ('a' << 8) | 'n';
  279|      0|      if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|      0|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (279:11): [True: 0, False: 0]
  ------------------
  280|      0|    } else {
  281|      0|      ch ^= ('i' << 16) | ('n' << 8) | 'f';
  282|      0|      if ((t.u32.hi & 0x80000000)) prefix = '-';
  ------------------
  |  Branch (282:11): [True: 0, False: 0]
  ------------------
  283|      0|      else if ((sf & STRFMT_F_PLUS)) prefix = '+';
  ------------------
  |  |   38|      0|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (283:16): [True: 0, False: 0]
  ------------------
  284|      0|      else if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|      0|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (284:16): [True: 0, False: 0]
  ------------------
  285|      0|    }
  286|      0|    len = 3 + (prefix != 0);
  287|      0|    if (!p) p = lj_buf_more(sb, width > len ? width : len);
  ------------------
  |  Branch (287:9): [True: 0, False: 0]
  |  Branch (287:33): [True: 0, False: 0]
  ------------------
  288|      0|    if (!(sf & STRFMT_F_LEFT)) while (width-- > len) *p++ = ' ';
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (288:9): [True: 0, False: 0]
  |  Branch (288:39): [True: 0, False: 0]
  ------------------
  289|      0|    if (prefix) *p++ = prefix;
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|    *p++ = (char)(ch >> 16); *p++ = (char)(ch >> 8); *p++ = (char)ch;
  291|     22|  } else if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_A)) {
  ------------------
  |  |   51|     22|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                } else if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_A)) {
  ------------------
  |  |   51|     22|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (291:14): [True: 0, False: 22]
  ------------------
  292|       |    /* %a */
  293|      0|    const char *hexdig = (sf & STRFMT_F_UPPER) ? "0123456789ABCDEFPX"
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (293:26): [True: 0, False: 0]
  ------------------
  294|      0|					       : "0123456789abcdefpx";
  295|      0|    int32_t e = (t.u32.hi >> 20) & 0x7ff;
  296|      0|    char prefix = 0, eprefix = '+';
  297|      0|    if (t.u32.hi & 0x80000000) prefix = '-';
  ------------------
  |  Branch (297:9): [True: 0, False: 0]
  ------------------
  298|      0|    else if ((sf & STRFMT_F_PLUS)) prefix = '+';
  ------------------
  |  |   38|      0|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (298:14): [True: 0, False: 0]
  ------------------
  299|      0|    else if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|      0|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (299:14): [True: 0, False: 0]
  ------------------
  300|      0|    t.u32.hi &= 0xfffff;
  301|      0|    if (e) {
  ------------------
  |  Branch (301:9): [True: 0, False: 0]
  ------------------
  302|      0|      t.u32.hi |= 0x100000;
  303|      0|      e -= 1023;
  304|      0|    } else if (t.u32.lo | t.u32.hi) {
  ------------------
  |  Branch (304:16): [True: 0, False: 0]
  ------------------
  305|       |      /* Non-zero denormal - normalise it. */
  306|      0|      uint32_t shift = t.u32.hi ? 20-lj_fls(t.u32.hi) : 52-lj_fls(t.u32.lo);
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
                    uint32_t shift = t.u32.hi ? 20-lj_fls(t.u32.hi) : 52-lj_fls(t.u32.lo);
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (306:24): [True: 0, False: 0]
  ------------------
  307|      0|      e = -1022 - shift;
  308|      0|      t.u64 <<= shift;
  309|      0|    }
  310|       |    /* abs(n) == t.u64 * 2^(e - 52) */
  311|       |    /* If n != 0, bit 52 of t.u64 is set, and is the highest set bit. */
  312|      0|    if ((int32_t)prec < 0) {
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|       |      /* Default precision: use smallest precision giving exact result. */
  314|      0|      prec = t.u32.lo ? 13-lj_ffs(t.u32.lo)/4 : 5-lj_ffs(t.u32.hi|0x100000)/4;
  ------------------
  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
                    prec = t.u32.lo ? 13-lj_ffs(t.u32.lo)/4 : 5-lj_ffs(t.u32.hi|0x100000)/4;
  ------------------
  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
  |  Branch (314:14): [True: 0, False: 0]
  ------------------
  315|      0|    } else if (prec < 13) {
  ------------------
  |  Branch (315:16): [True: 0, False: 0]
  ------------------
  316|       |      /* Precision is sufficiently low as to maybe require rounding. */
  317|      0|      t.u64 += (((uint64_t)1) << (51 - prec*4));
  318|      0|    }
  319|      0|    if (e < 0) {
  ------------------
  |  Branch (319:9): [True: 0, False: 0]
  ------------------
  320|      0|      eprefix = '-';
  321|      0|      e = -e;
  322|      0|    }
  323|      0|    len = 5 + ndigits_dec((uint32_t)e) + prec + (prefix != 0)
  324|      0|	    + ((prec | (sf & STRFMT_F_ALT)) != 0);
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  325|      0|    if (!p) p = lj_buf_more(sb, width > len ? width : len);
  ------------------
  |  Branch (325:9): [True: 0, False: 0]
  |  Branch (325:33): [True: 0, False: 0]
  ------------------
  326|      0|    if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
                  if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (326:9): [True: 0, False: 0]
  ------------------
  327|      0|      while (width-- > len) *p++ = ' ';
  ------------------
  |  Branch (327:14): [True: 0, False: 0]
  ------------------
  328|      0|    }
  329|      0|    if (prefix) *p++ = prefix;
  ------------------
  |  Branch (329:9): [True: 0, False: 0]
  ------------------
  330|      0|    *p++ = '0';
  331|      0|    *p++ = hexdig[17]; /* x or X */
  332|      0|    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
                  if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
                  if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (332:9): [True: 0, False: 0]
  ------------------
  333|      0|      while (width-- > len) *p++ = '0';
  ------------------
  |  Branch (333:14): [True: 0, False: 0]
  ------------------
  334|      0|    }
  335|      0|    *p++ = '0' + (t.u32.hi >> 20); /* Usually '1', sometimes '0' or '2'. */
  336|      0|    if ((prec | (sf & STRFMT_F_ALT))) {
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (336:9): [True: 0, False: 0]
  ------------------
  337|       |      /* Emit fractional part. */
  338|      0|      char *q = p + 1 + prec;
  339|      0|      *p = '.';
  340|      0|      if (prec < 13) t.u64 >>= (52 - prec*4);
  ------------------
  |  Branch (340:11): [True: 0, False: 0]
  ------------------
  341|      0|      else while (prec > 13) p[prec--] = '0';
  ------------------
  |  Branch (341:19): [True: 0, False: 0]
  ------------------
  342|      0|      while (prec) { p[prec--] = hexdig[t.u64 & 15]; t.u64 >>= 4; }
  ------------------
  |  Branch (342:14): [True: 0, False: 0]
  ------------------
  343|      0|      p = q;
  344|      0|    }
  345|      0|    *p++ = hexdig[16]; /* p or P */
  346|      0|    *p++ = eprefix; /* + or - */
  347|      0|    p = lj_strfmt_wint(p, e);
  348|     22|  } else {
  349|       |    /* %e or %f or %g - begin by converting n to "nd" format. */
  350|     22|    uint32_t nd[64];
  351|     22|    uint32_t ndhi = 0, ndlo, i;
  352|     22|    int32_t e = (t.u32.hi >> 20) & 0x7ff, ndebias = 0;
  353|     22|    char prefix = 0, *q;
  354|     22|    if (t.u32.hi & 0x80000000) prefix = '-';
  ------------------
  |  Branch (354:9): [True: 0, False: 22]
  ------------------
  355|     22|    else if ((sf & STRFMT_F_PLUS)) prefix = '+';
  ------------------
  |  |   38|     22|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (355:14): [True: 0, False: 22]
  ------------------
  356|     22|    else if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|     22|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (356:14): [True: 0, False: 22]
  ------------------
  357|     22|    prec += ((int32_t)prec >> 31) & 7; /* Default precision is 6. */
  358|     22|    if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_G)) {
  ------------------
  |  |   51|     22|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                  if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_G)) {
  ------------------
  |  |   51|     22|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (358:9): [True: 22, False: 0]
  ------------------
  359|       |      /* %g - decrement precision if non-zero (to make it like %e). */
  360|     22|      prec--;
  361|     22|      prec ^= (uint32_t)((int32_t)prec >> 31);
  362|     22|    }
  363|     22|    if ((sf & STRFMT_T_FP_E) && prec < 14 && n != 0) {
  ------------------
  |  |   31|     22|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
  |  Branch (363:9): [True: 22, False: 0]
  |  Branch (363:33): [True: 22, False: 0]
  |  Branch (363:46): [True: 16, False: 6]
  ------------------
  364|       |      /* Precision is sufficiently low that rescaling will probably work. */
  365|     16|      if ((ndebias = rescale_e[e >> 6])) {
  ------------------
  |  Branch (365:11): [True: 0, False: 16]
  ------------------
  366|      0|	t.n = n * rescale_n[e >> 6];
  367|      0|	if (LJ_UNLIKELY(!e)) t.n *= 1e10, ndebias -= 10;
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  368|      0|	t.u64 -= 2; /* Convert 2ulp below (later we convert 2ulp above). */
  369|      0|	nd[0] = 0x100000 | (t.u32.hi & 0xfffff);
  370|      0|	e = ((t.u32.hi >> 20) & 0x7ff) - 1075 - (ND_MUL2K_MAX_SHIFT < 29);
  ------------------
  |  |  116|      0|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  371|      0|	goto load_t_lo; rescale_failed:
  372|      0|	t.n = n;
  373|      0|	e = (t.u32.hi >> 20) & 0x7ff;
  374|      0|	ndebias = ndhi = 0;
  375|      0|      }
  376|     16|    }
  377|     22|    nd[0] = t.u32.hi & 0xfffff;
  378|     22|    if (e == 0) e++; else nd[0] |= 0x100000;
  ------------------
  |  Branch (378:9): [True: 6, False: 16]
  ------------------
  379|     22|    e -= 1043;
  380|     22|    if (t.u32.lo) {
  ------------------
  |  Branch (380:9): [True: 0, False: 22]
  ------------------
  381|      0|      e -= 32 + (ND_MUL2K_MAX_SHIFT < 29); load_t_lo:
  ------------------
  |  |  116|      0|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  382|      0|#if ND_MUL2K_MAX_SHIFT >= 29
  383|      0|      nd[0] = (nd[0] << 3) | (t.u32.lo >> 29);
  384|      0|      ndhi = nd_mul2k(nd, ndhi, 29, t.u32.lo & 0x1fffffff, sf);
  385|       |#elif ND_MUL2K_MAX_SHIFT >= 11
  386|       |      ndhi = nd_mul2k(nd, ndhi, 11, t.u32.lo >> 21, sf);
  387|       |      ndhi = nd_mul2k(nd, ndhi, 11, (t.u32.lo >> 10) & 0x7ff, sf);
  388|       |      ndhi = nd_mul2k(nd, ndhi, 11, (t.u32.lo <<  1) & 0x7ff, sf);
  389|       |#else
  390|       |#error "ND_MUL2K_MAX_SHIFT too small"
  391|       |#endif
  392|      0|    }
  393|     22|    if (e >= 0) {
  ------------------
  |  Branch (393:9): [True: 0, False: 22]
  ------------------
  394|      0|      ndhi = nd_mul2k(nd, ndhi, (uint32_t)e, 0, sf);
  395|      0|      ndlo = 0;
  396|     22|    } else {
  397|     22|      ndlo = nd_div2k(nd, ndhi, (uint32_t)-e, sf);
  398|     22|      if (ndhi && !nd[ndhi]) ndhi--;
  ------------------
  |  Branch (398:11): [True: 0, False: 22]
  |  Branch (398:19): [True: 0, False: 0]
  ------------------
  399|     22|    }
  400|       |    /* abs(n) == nd * 10^ndebias (for slightly loose interpretation of ==) */
  401|     22|    if ((sf & STRFMT_T_FP_E)) {
  ------------------
  |  |   31|     22|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
  |  Branch (401:9): [True: 22, False: 0]
  ------------------
  402|       |      /* %e or %g - assume %e and start by calculating nd's exponent (nde). */
  403|     22|      char eprefix = '+';
  404|     22|      int32_t nde = -1;
  405|     22|      MSize hilen;
  406|     22|      if (ndlo && !nd[ndhi]) {
  ------------------
  |  Branch (406:11): [True: 0, False: 22]
  |  Branch (406:19): [True: 0, False: 0]
  ------------------
  407|      0|	ndhi = 64; do {} while (!nd[--ndhi]);
  ------------------
  |  Branch (407:26): [True: 0, False: 0]
  ------------------
  408|      0|	nde -= 64 * 9;
  409|      0|      }
  410|     22|      hilen = ndigits_dec(nd[ndhi]);
  411|     22|      nde += ndhi * 9 + hilen;
  412|     22|      if (ndebias) {
  ------------------
  |  Branch (412:11): [True: 0, False: 22]
  ------------------
  413|       |	/*
  414|       |	** Rescaling was performed, but this introduced some error, and might
  415|       |	** have pushed us across a rounding boundary. We check whether this
  416|       |	** error affected the result by introducing even more error (2ulp in
  417|       |	** either direction), and seeing whether a rounding boundary was
  418|       |	** crossed. Having already converted the -2ulp case, we save off its
  419|       |	** most significant digits, convert the +2ulp case, and compare them.
  420|       |	*/
  421|      0|	int32_t eidx = e + 70 + (ND_MUL2K_MAX_SHIFT < 29)
  ------------------
  |  |  116|      0|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  422|      0|			 + (t.u32.lo >= 0xfffffffe && !(~t.u32.hi << 12));
  ------------------
  |  Branch (422:8): [True: 0, False: 0]
  |  Branch (422:34): [True: 0, False: 0]
  ------------------
  423|      0|	const int8_t *m_e = four_ulp_m_e + eidx * 2;
  424|      0|	lj_assertG_(G(sbufL(sb)), 0 <= eidx && eidx < 128, "bad eidx %d", eidx);
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  425|      0|	nd[33] = nd[ndhi];
  426|      0|	nd[32] = nd[(ndhi - 1) & 0x3f];
  427|      0|	nd[31] = nd[(ndhi - 2) & 0x3f];
  428|      0|	nd_add_m10e(nd, ndhi, (uint8_t)*m_e, m_e[1]);
  429|      0|	if (LJ_UNLIKELY(!nd_similar(nd, ndhi, nd + 33, hilen, prec + 1))) {
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  430|      0|	  goto rescale_failed;
  431|      0|	}
  432|      0|      }
  433|     22|      if ((int32_t)(prec - nde) < (0x3f & -(int32_t)ndlo) * 9) {
  ------------------
  |  Branch (433:11): [True: 0, False: 22]
  ------------------
  434|       |	/* Precision is sufficiently low as to maybe require rounding. */
  435|      0|	ndhi = nd_add_m10e(nd, ndhi, 5, nde - prec - 1);
  436|      0|	nde += (hilen != ndigits_dec(nd[ndhi]));
  437|      0|      }
  438|     22|      nde += ndebias;
  439|     22|      if ((sf & STRFMT_T_FP_F)) {
  ------------------
  |  |   32|     22|#define STRFMT_T_FP_F	0x0020	/* STRFMT_NUM */
  ------------------
  |  Branch (439:11): [True: 22, False: 0]
  ------------------
  440|       |	/* %g */
  441|     22|	if ((int32_t)prec >= nde && nde >= -4) {
  ------------------
  |  Branch (441:6): [True: 22, False: 0]
  |  Branch (441:30): [True: 22, False: 0]
  ------------------
  442|     22|	  if (nde < 0) ndhi = 0;
  ------------------
  |  Branch (442:8): [True: 0, False: 22]
  ------------------
  443|     22|	  prec -= nde;
  444|     22|	  goto g_format_like_f;
  445|     22|	} else if (!(sf & STRFMT_F_ALT) && prec && width > 5) {
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (445:13): [True: 0, False: 0]
  |  Branch (445:37): [True: 0, False: 0]
  |  Branch (445:45): [True: 0, False: 0]
  ------------------
  446|       |	  /* Decrease precision in order to strip trailing zeroes. */
  447|      0|	  char tail[9];
  448|      0|	  uint32_t maxprec = hilen - 1 + ((ndhi - ndlo) & 0x3f) * 9;
  449|      0|	  if (prec >= maxprec) prec = maxprec;
  ------------------
  |  Branch (449:8): [True: 0, False: 0]
  ------------------
  450|      0|	  else ndlo = (ndhi - (((int32_t)(prec - hilen) + 9) / 9)) & 0x3f;
  451|      0|	  i = prec - hilen - (((ndhi - ndlo) & 0x3f) * 9) + 10;
  452|      0|	  lj_strfmt_wuint9(tail, nd[ndlo]);
  453|      0|	  while (prec && tail[--i] == '0') {
  ------------------
  |  Branch (453:11): [True: 0, False: 0]
  |  Branch (453:19): [True: 0, False: 0]
  ------------------
  454|      0|	    prec--;
  455|      0|	    if (!i) {
  ------------------
  |  Branch (455:10): [True: 0, False: 0]
  ------------------
  456|      0|	      if (ndlo == ndhi) { prec = 0; break; }
  ------------------
  |  Branch (456:12): [True: 0, False: 0]
  ------------------
  457|      0|	      lj_strfmt_wuint9(tail, nd[++ndlo]);
  458|      0|	      i = 9;
  459|      0|	    }
  460|      0|	  }
  461|      0|	}
  462|     22|      }
  463|      0|      if (nde < 0) {
  ------------------
  |  Branch (463:11): [True: 0, False: 0]
  ------------------
  464|       |	/* Make nde non-negative. */
  465|      0|	eprefix = '-';
  466|      0|	nde = -nde;
  467|      0|      }
  468|      0|      len = 3 + prec + (prefix != 0) + ndigits_dec((uint32_t)nde) + (nde < 10)
  469|      0|	      + ((prec | (sf & STRFMT_F_ALT)) != 0);
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  470|      0|      if (!p) p = lj_buf_more(sb, (width > len ? width : len) + 5);
  ------------------
  |  Branch (470:11): [True: 0, False: 0]
  |  Branch (470:36): [True: 0, False: 0]
  ------------------
  471|      0|      if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (471:11): [True: 0, False: 0]
  ------------------
  472|      0|	while (width-- > len) *p++ = ' ';
  ------------------
  |  Branch (472:9): [True: 0, False: 0]
  ------------------
  473|      0|      }
  474|      0|      if (prefix) *p++ = prefix;
  ------------------
  |  Branch (474:11): [True: 0, False: 0]
  ------------------
  475|      0|      if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (475:11): [True: 0, False: 0]
  ------------------
  476|      0|	while (width-- > len) *p++ = '0';
  ------------------
  |  Branch (476:9): [True: 0, False: 0]
  ------------------
  477|      0|      }
  478|      0|      q = lj_strfmt_wint(p + 1, nd[ndhi]);
  479|      0|      p[0] = p[1]; /* Put leading digit in the correct place. */
  480|      0|      if ((prec | (sf & STRFMT_F_ALT))) {
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (480:11): [True: 0, False: 0]
  ------------------
  481|       |	/* Emit fractional part. */
  482|      0|	p[1] = '.'; p += 2;
  483|      0|	prec -= (MSize)(q - p); p = q; /* Account for digits already emitted. */
  484|       |	/* Then emit chunks of 9 digits (this may emit 8 digits too many). */
  485|      0|	for (i = ndhi; (int32_t)prec > 0 && i != ndlo; prec -= 9) {
  ------------------
  |  Branch (485:17): [True: 0, False: 0]
  |  Branch (485:38): [True: 0, False: 0]
  ------------------
  486|      0|	  i = (i - 1) & 0x3f;
  487|      0|	  p = lj_strfmt_wuint9(p, nd[i]);
  488|      0|	}
  489|      0|	if ((sf & STRFMT_T_FP_F) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   32|      0|#define STRFMT_T_FP_F	0x0020	/* STRFMT_NUM */
  ------------------
              	if ((sf & STRFMT_T_FP_F) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (489:6): [True: 0, False: 0]
  |  Branch (489:30): [True: 0, False: 0]
  ------------------
  490|       |	  /* %g (and not %#g) - strip trailing zeroes. */
  491|      0|	  p += (int32_t)prec & ((int32_t)prec >> 31);
  492|      0|	  while (p[-1] == '0') p--;
  ------------------
  |  Branch (492:11): [True: 0, False: 0]
  ------------------
  493|      0|	  if (p[-1] == '.') p--;
  ------------------
  |  Branch (493:8): [True: 0, False: 0]
  ------------------
  494|      0|	} else {
  495|       |	  /* %e (or %#g) - emit trailing zeroes. */
  496|      0|	  while ((int32_t)prec > 0) { *p++ = '0'; prec--; }
  ------------------
  |  Branch (496:11): [True: 0, False: 0]
  ------------------
  497|      0|	  p += (int32_t)prec;
  498|      0|	}
  499|      0|      } else {
  500|      0|	p++;
  501|      0|      }
  502|      0|      *p++ = (sf & STRFMT_F_UPPER) ? 'E' : 'e';
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (502:14): [True: 0, False: 0]
  ------------------
  503|      0|      *p++ = eprefix; /* + or - */
  504|      0|      if (nde < 10) *p++ = '0'; /* Always at least two digits of exponent. */
  ------------------
  |  Branch (504:11): [True: 0, False: 0]
  ------------------
  505|      0|      p = lj_strfmt_wint(p, nde);
  506|      0|    } else {
  507|       |      /* %f (or, shortly, %g in %f style) */
  508|      0|      if (prec < (MSize)(0x3f & -(int32_t)ndlo) * 9) {
  ------------------
  |  Branch (508:11): [True: 0, False: 0]
  ------------------
  509|       |	/* Precision is sufficiently low as to maybe require rounding. */
  510|      0|	ndhi = nd_add_m10e(nd, ndhi, 5, 0 - prec - 1);
  511|      0|      }
  512|     22|      g_format_like_f:
  513|     22|      if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT) && prec && width) {
  ------------------
  |  |   31|     22|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
                    if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT) && prec && width) {
  ------------------
  |  |   41|     22|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (513:11): [True: 22, False: 0]
  |  Branch (513:35): [True: 22, False: 0]
  |  Branch (513:59): [True: 22, False: 0]
  |  Branch (513:67): [True: 0, False: 22]
  ------------------
  514|       |	/* Decrease precision in order to strip trailing zeroes. */
  515|      0|	if (ndlo) {
  ------------------
  |  Branch (515:6): [True: 0, False: 0]
  ------------------
  516|       |	  /* nd has a fractional part; we need to look at its digits. */
  517|      0|	  char tail[9];
  518|      0|	  uint32_t maxprec = (64 - ndlo) * 9;
  519|      0|	  if (prec >= maxprec) prec = maxprec;
  ------------------
  |  Branch (519:8): [True: 0, False: 0]
  ------------------
  520|      0|	  else ndlo = 64 - (prec + 8) / 9;
  521|      0|	  i = prec - ((63 - ndlo) * 9);
  522|      0|	  lj_strfmt_wuint9(tail, nd[ndlo]);
  523|      0|	  while (prec && tail[--i] == '0') {
  ------------------
  |  Branch (523:11): [True: 0, False: 0]
  |  Branch (523:19): [True: 0, False: 0]
  ------------------
  524|      0|	    prec--;
  525|      0|	    if (!i) {
  ------------------
  |  Branch (525:10): [True: 0, False: 0]
  ------------------
  526|      0|	      if (ndlo == 63) { prec = 0; break; }
  ------------------
  |  Branch (526:12): [True: 0, False: 0]
  ------------------
  527|      0|	      lj_strfmt_wuint9(tail, nd[++ndlo]);
  528|      0|	      i = 9;
  529|      0|	    }
  530|      0|	  }
  531|      0|	} else {
  532|       |	  /* nd has no fractional part, so precision goes straight to zero. */
  533|      0|	  prec = 0;
  534|      0|	}
  535|      0|      }
  536|     22|      len = ndhi * 9 + ndigits_dec(nd[ndhi]) + prec + (prefix != 0)
  537|     22|		     + ((prec | (sf & STRFMT_F_ALT)) != 0);
  ------------------
  |  |   41|     22|#define STRFMT_F_ALT	0x1000
  ------------------
  538|     22|      if (!p) p = lj_buf_more(sb, (width > len ? width : len) + 8);
  ------------------
  |  Branch (538:11): [True: 16, False: 6]
  |  Branch (538:36): [True: 0, False: 16]
  ------------------
  539|     22|      if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   37|     22|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   39|     22|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (539:11): [True: 22, False: 0]
  ------------------
  540|     22|	while (width-- > len) *p++ = ' ';
  ------------------
  |  Branch (540:9): [True: 0, False: 22]
  ------------------
  541|     22|      }
  542|     22|      if (prefix) *p++ = prefix;
  ------------------
  |  Branch (542:11): [True: 0, False: 22]
  ------------------
  543|     22|      if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   37|     22|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|     22|#define STRFMT_F_ZERO	0x0400
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|     22|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (543:11): [True: 0, False: 22]
  ------------------
  544|      0|	while (width-- > len) *p++ = '0';
  ------------------
  |  Branch (544:9): [True: 0, False: 0]
  ------------------
  545|      0|      }
  546|       |      /* Emit integer part. */
  547|     22|      p = lj_strfmt_wint(p, nd[ndhi]);
  548|     22|      i = ndhi;
  549|     22|      while (i) p = lj_strfmt_wuint9(p, nd[--i]);
  ------------------
  |  Branch (549:14): [True: 0, False: 22]
  ------------------
  550|     22|      if ((prec | (sf & STRFMT_F_ALT))) {
  ------------------
  |  |   41|     22|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (550:11): [True: 22, False: 0]
  ------------------
  551|       |	/* Emit fractional part. */
  552|     22|	*p++ = '.';
  553|       |	/* Emit chunks of 9 digits (this may emit 8 digits too many). */
  554|     22|	while ((int32_t)prec > 0 && i != ndlo) {
  ------------------
  |  Branch (554:9): [True: 22, False: 0]
  |  Branch (554:30): [True: 0, False: 22]
  ------------------
  555|      0|	  i = (i - 1) & 0x3f;
  556|      0|	  p = lj_strfmt_wuint9(p, nd[i]);
  557|      0|	  prec -= 9;
  558|      0|	}
  559|     22|	if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   31|     22|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
              	if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   41|     22|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (559:6): [True: 22, False: 0]
  |  Branch (559:30): [True: 22, False: 0]
  ------------------
  560|       |	  /* %g (and not %#g) - strip trailing zeroes. */
  561|     22|	  p += (int32_t)prec & ((int32_t)prec >> 31);
  562|     22|	  while (p[-1] == '0') p--;
  ------------------
  |  Branch (562:11): [True: 0, False: 22]
  ------------------
  563|     22|	  if (p[-1] == '.') p--;
  ------------------
  |  Branch (563:8): [True: 22, False: 0]
  ------------------
  564|     22|	} else {
  565|       |	  /* %f (or %#g) - emit trailing zeroes. */
  566|      0|	  while ((int32_t)prec > 0) { *p++ = '0'; prec--; }
  ------------------
  |  Branch (566:11): [True: 0, False: 0]
  ------------------
  567|      0|	  p += (int32_t)prec;
  568|      0|	}
  569|     22|      }
  570|     22|    }
  571|     22|  }
  572|     22|  if ((sf & STRFMT_F_LEFT)) while (width-- > len) *p++ = ' ';
  ------------------
  |  |   37|     22|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (572:7): [True: 0, False: 22]
  |  Branch (572:36): [True: 0, False: 0]
  ------------------
  573|     22|  return p;
  574|     22|}
lj_strfmt_num.c:ndigits_dec:
   64|     44|{
   65|     44|  MSize t = ((lj_fls(x | 1) * 77) >> 8) + 1; /* 2^8/77 is roughly log2(10) */
  ------------------
  |  |  149|     44|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
   66|     44|  return t + (x > ndigits_dec_threshold[t]);
   67|     44|}
lj_strfmt_num.c:nd_div2k:
  158|     22|{
  159|     22|  uint32_t ndlo = 0, stop1 = ~0, stop2 = ~0;
  160|       |  /* Performance hacks. */
  161|     22|  if (!ndhi) {
  ------------------
  |  Branch (161:7): [True: 22, False: 0]
  ------------------
  162|     22|    if (!nd[0]) {
  ------------------
  |  Branch (162:9): [True: 6, False: 16]
  ------------------
  163|      6|      return 0;
  164|     16|    } else {
  165|     16|      uint32_t s = lj_ffs(nd[0]);
  ------------------
  |  |  148|     16|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
  166|     16|      if (s >= k) { nd[0] >>= k; return 0; }
  ------------------
  |  Branch (166:11): [True: 16, False: 0]
  ------------------
  167|      0|      nd[0] >>= s; k -= s;
  168|      0|    }
  169|     22|  }
  170|      0|  if (k > 18) {
  ------------------
  |  Branch (170:7): [True: 0, False: 0]
  ------------------
  171|      0|    if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|      0|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                  if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|      0|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (171:9): [True: 0, False: 0]
  ------------------
  172|      0|      stop1 = 63 - (int32_t)STRFMT_PREC(sf) / 9;
  ------------------
  |  |   50|      0|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  173|      0|    } else {
  174|      0|      int32_t floorlog2 = ndhi * 29 + lj_fls(nd[ndhi]) - k;
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  175|      0|      int32_t floorlog10 = (int32_t)(floorlog2 * 0.30102999566398114);
  176|      0|      stop1 = 62 + (floorlog10 - (int32_t)STRFMT_PREC(sf)) / 9;
  ------------------
  |  |   50|      0|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  177|      0|      stop2 = 61 + ndhi - (int32_t)STRFMT_PREC(sf) / 8;
  ------------------
  |  |   50|      0|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  178|      0|    }
  179|      0|  }
  180|       |  /* Real logic. */
  181|      0|  while (k >= 9) {
  ------------------
  |  Branch (181:10): [True: 0, False: 0]
  ------------------
  182|      0|    uint32_t i = ndhi, carry = 0;
  183|      0|    for (;;) {
  184|      0|      uint32_t val = nd[i];
  185|      0|      nd[i] = (val >> 9) + carry;
  186|      0|      carry = (val & 0x1ff) * 1953125;
  187|      0|      if (i == ndlo) break;
  ------------------
  |  Branch (187:11): [True: 0, False: 0]
  ------------------
  188|      0|      i = (i - 1) & 0x3f;
  189|      0|    }
  190|      0|    if (ndlo != stop1 && ndlo != stop2) {
  ------------------
  |  Branch (190:9): [True: 0, False: 0]
  |  Branch (190:26): [True: 0, False: 0]
  ------------------
  191|      0|      if (carry) { ndlo = (ndlo - 1) & 0x3f; nd[ndlo] = carry; }
  ------------------
  |  Branch (191:11): [True: 0, False: 0]
  ------------------
  192|      0|      if (!nd[ndhi]) { ndhi = (ndhi - 1) & 0x3f; stop2--; }
  ------------------
  |  Branch (192:11): [True: 0, False: 0]
  ------------------
  193|      0|    } else if (!nd[ndhi]) {
  ------------------
  |  Branch (193:16): [True: 0, False: 0]
  ------------------
  194|      0|      if (ndhi != ndlo) { ndhi = (ndhi - 1) & 0x3f; stop2--; }
  ------------------
  |  Branch (194:11): [True: 0, False: 0]
  ------------------
  195|      0|      else return ndlo;
  196|      0|    }
  197|      0|    k -= 9;
  198|      0|  }
  199|      0|  if (k) {
  ------------------
  |  Branch (199:7): [True: 0, False: 0]
  ------------------
  200|      0|    uint32_t mask = (1U << k) - 1, mul = 1000000000 >> k, i = ndhi, carry = 0;
  201|      0|    for (;;) {
  202|      0|      uint32_t val = nd[i];
  203|      0|      nd[i] = (val >> k) + carry;
  204|      0|      carry = (val & mask) * mul;
  205|      0|      if (i == ndlo) break;
  ------------------
  |  Branch (205:11): [True: 0, False: 0]
  ------------------
  206|      0|      i = (i - 1) & 0x3f;
  207|      0|    }
  208|      0|    if (carry) { ndlo = (ndlo - 1) & 0x3f; nd[ndlo] = carry; }
  ------------------
  |  Branch (208:9): [True: 0, False: 0]
  ------------------
  209|      0|  }
  210|      0|  return ndlo;
  211|      0|}

lj_strscan_scan:
  377|      9|{
  378|      9|  int32_t neg = 0;
  379|      9|  const uint8_t *pe = p + len;
  380|       |
  381|       |  /* Remove leading space, parse sign and non-numbers. */
  382|      9|  if (LJ_UNLIKELY(!lj_char_isdigit(*p))) {
  ------------------
  |  |  146|      9|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 7, False: 2]
  |  |  ------------------
  ------------------
  383|      7|    while (lj_char_isspace(*p)) p++;
  384|      7|    if (*p == '+' || *p == '-') neg = (*p++ == '-');
  ------------------
  |  Branch (384:9): [True: 1, False: 6]
  |  Branch (384:22): [True: 1, False: 5]
  ------------------
  385|      7|    if (LJ_UNLIKELY(*p >= 'A')) {  /* Parse "inf", "infinity" or "nan". */
  ------------------
  |  |  146|      7|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 3, False: 4]
  |  |  ------------------
  ------------------
  386|      3|      TValue tmp;
  387|      3|      setnanV(&tmp);
  ------------------
  |  |  943|      3|#define setnanV(o)		((o)->u64 = U64x(fff80000,00000000))
  |  |  ------------------
  |  |  |  |   94|      3|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  388|      3|      if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|      6|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 1, False: 2]
  |  |  ------------------
  ------------------
                    if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|      4|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 1]
  |  |  ------------------
  ------------------
                    if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  389|      0|	if (neg) setminfV(&tmp); else setpinfV(&tmp);
  ------------------
  |  |  945|      0|#define setminfV(o)		((o)->u64 = U64x(fff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
              	if (neg) setminfV(&tmp); else setpinfV(&tmp);
  ------------------
  |  |  944|      0|#define setpinfV(o)		((o)->u64 = U64x(7ff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (389:6): [True: 0, False: 0]
  ------------------
  390|      0|	p += 3;
  391|      0|	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  392|      0|	    casecmp(p[3],'t') && casecmp(p[4],'y')) p += 5;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	    casecmp(p[3],'t') && casecmp(p[4],'y')) p += 5;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  393|      3|      } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|      6|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 1, False: 2]
  |  |  ------------------
  ------------------
                    } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|      4|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 1]
  |  |  ------------------
  ------------------
                    } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  394|      0|	p += 3;
  395|      0|      }
  396|      3|      while (lj_char_isspace(*p)) p++;
  397|      3|      if (*p || p < pe) return STRSCAN_ERROR;
  ------------------
  |  Branch (397:11): [True: 3, False: 0]
  |  Branch (397:17): [True: 0, False: 0]
  ------------------
  398|      0|      o->u64 = tmp.u64;
  399|      0|      return STRSCAN_NUM;
  400|      3|    }
  401|      7|  }
  402|       |
  403|       |  /* Parse regular number. */
  404|      6|  {
  405|      6|    StrScanFmt fmt = STRSCAN_INT;
  406|      6|    int cmask = LJ_CHAR_DIGIT;
  ------------------
  |  |   14|      6|#define LJ_CHAR_DIGIT	0x08
  ------------------
  407|      6|    int base = (opt & STRSCAN_OPT_C) && *p == '0' ? 0 : 10;
  ------------------
  |  |   16|      6|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (407:16): [True: 0, False: 6]
  |  Branch (407:41): [True: 0, False: 0]
  ------------------
  408|      6|    const uint8_t *sp, *dp = NULL;
  409|      6|    uint32_t dig = 0, hasdig = 0, x = 0;
  410|      6|    int32_t ex = 0;
  411|       |
  412|       |    /* Determine base and skip leading zeros. */
  413|      6|    if (LJ_UNLIKELY(*p <= '0')) {
  ------------------
  |  |  146|      6|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 5, False: 1]
  |  |  ------------------
  ------------------
  414|      5|      if (*p == '0') {
  ------------------
  |  Branch (414:11): [True: 1, False: 4]
  ------------------
  415|      1|	if (casecmp(p[1], 'x'))
  ------------------
  |  |   73|      1|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 1]
  |  |  ------------------
  ------------------
  416|      0|	  base = 16, cmask = LJ_CHAR_XDIGIT, p += 2;
  ------------------
  |  |   15|      0|#define LJ_CHAR_XDIGIT	0x10
  ------------------
  417|      1|	else if (casecmp(p[1], 'b'))
  ------------------
  |  |   73|      1|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 1]
  |  |  ------------------
  ------------------
  418|      0|	  base = 2, cmask = LJ_CHAR_DIGIT, p += 2;
  ------------------
  |  |   14|      0|#define LJ_CHAR_DIGIT	0x08
  ------------------
  419|      1|      }
  420|      7|      for ( ; ; p++) {
  421|      7|	if (*p == '0') {
  ------------------
  |  Branch (421:6): [True: 1, False: 6]
  ------------------
  422|      1|	  hasdig = 1;
  423|      6|	} else if (*p == '.') {
  ------------------
  |  Branch (423:13): [True: 1, False: 5]
  ------------------
  424|      1|	  if (dp) return STRSCAN_ERROR;
  ------------------
  |  Branch (424:8): [True: 0, False: 1]
  ------------------
  425|      1|	  dp = p;
  426|      5|	} else {
  427|      5|	  break;
  428|      5|	}
  429|      7|      }
  430|      5|    }
  431|       |
  432|       |    /* Preliminary digit and decimal point scan. */
  433|      7|    for (sp = p; ; p++) {
  434|      7|      if (LJ_LIKELY(lj_char_isa(*p, cmask))) {
  ------------------
  |  |  145|      7|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1, False: 6]
  |  |  ------------------
  ------------------
  435|      1|	x = x * 10 + (*p & 15);  /* For fast path below. */
  436|      1|	dig++;
  437|      6|      } else if (*p == '.') {
  ------------------
  |  Branch (437:18): [True: 0, False: 6]
  ------------------
  438|      0|	if (dp) return STRSCAN_ERROR;
  ------------------
  |  Branch (438:6): [True: 0, False: 0]
  ------------------
  439|      0|	dp = p;
  440|      6|      } else {
  441|      6|	break;
  442|      6|      }
  443|      7|    }
  444|      6|    if (!(hasdig | dig)) return STRSCAN_ERROR;
  ------------------
  |  Branch (444:9): [True: 4, False: 2]
  ------------------
  445|       |
  446|       |    /* Handle decimal point. */
  447|      2|    if (dp) {
  ------------------
  |  Branch (447:9): [True: 0, False: 2]
  ------------------
  448|      0|      if (base == 2) return STRSCAN_ERROR;
  ------------------
  |  Branch (448:11): [True: 0, False: 0]
  ------------------
  449|      0|      fmt = STRSCAN_NUM;
  450|      0|      if (dig) {
  ------------------
  |  Branch (450:11): [True: 0, False: 0]
  ------------------
  451|      0|	ex = (int32_t)(dp-(p-1)); dp = p-1;
  452|      0|	while (ex < 0 && *dp-- == '0') ex++, dig--;  /* Skip trailing zeros. */
  ------------------
  |  Branch (452:9): [True: 0, False: 0]
  |  Branch (452:19): [True: 0, False: 0]
  ------------------
  453|      0|	if (ex <= -STRSCAN_MAXEXP) return STRSCAN_ERROR;
  ------------------
  |  |   66|      0|#define STRSCAN_MAXEXP	(1 << 20)
  ------------------
  |  Branch (453:6): [True: 0, False: 0]
  ------------------
  454|      0|	if (base == 16) ex *= 4;
  ------------------
  |  Branch (454:6): [True: 0, False: 0]
  ------------------
  455|      0|      }
  456|      0|    }
  457|       |
  458|       |    /* Parse exponent. */
  459|      2|    if (base >= 10 && casecmp(*p, (uint32_t)(base == 16 ? 'p' : 'e'))) {
  ------------------
  |  |   73|      4|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 2]
  |  |  |  Branch (73:40): [True: 0, False: 2]
  |  |  ------------------
  ------------------
  |  Branch (459:9): [True: 2, False: 0]
  ------------------
  460|      0|      uint32_t xx;
  461|      0|      int negx = 0;
  462|      0|      fmt = STRSCAN_NUM; p++;
  463|      0|      if (*p == '+' || *p == '-') negx = (*p++ == '-');
  ------------------
  |  Branch (463:11): [True: 0, False: 0]
  |  Branch (463:24): [True: 0, False: 0]
  ------------------
  464|      0|      if (!lj_char_isdigit(*p)) return STRSCAN_ERROR;
  ------------------
  |  |   28|      0|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|      0|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (464:11): [True: 0, False: 0]
  ------------------
  465|      0|      xx = (*p++ & 15);
  466|      0|      while (lj_char_isdigit(*p)) {
  467|      0|	xx = xx * 10 + (*p & 15);
  468|      0|	if (xx >= STRSCAN_MAXEXP) return STRSCAN_ERROR;
  ------------------
  |  |   66|      0|#define STRSCAN_MAXEXP	(1 << 20)
  ------------------
  |  Branch (468:6): [True: 0, False: 0]
  ------------------
  469|      0|	p++;
  470|      0|      }
  471|      0|      ex += negx ? (int32_t)(~xx+1u) : (int32_t)xx;
  ------------------
  |  Branch (471:13): [True: 0, False: 0]
  ------------------
  472|      0|    }
  473|       |
  474|       |    /* Parse suffix. */
  475|      2|    if (*p) {
  ------------------
  |  Branch (475:9): [True: 0, False: 2]
  ------------------
  476|       |      /* I (IMAG), U (U32), LL (I64), ULL/LLU (U64), L (long), UL/LU (ulong). */
  477|       |      /* NYI: f (float). Not needed until cp_number() handles non-integers. */
  478|      0|      if (casecmp(*p, 'i')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  479|      0|	if (!(opt & STRSCAN_OPT_IMAG)) return STRSCAN_ERROR;
  ------------------
  |  |   14|      0|#define STRSCAN_OPT_IMAG	0x04
  ------------------
  |  Branch (479:6): [True: 0, False: 0]
  ------------------
  480|      0|	p++; fmt = STRSCAN_IMAG;
  481|      0|      } else if (fmt == STRSCAN_INT) {
  ------------------
  |  Branch (481:18): [True: 0, False: 0]
  ------------------
  482|      0|	if (casecmp(*p, 'u')) p++, fmt = STRSCAN_U32;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  483|      0|	if (casecmp(*p, 'l')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  484|      0|	  p++;
  485|      0|	  if (casecmp(*p, 'l')) p++, fmt += STRSCAN_I64 - STRSCAN_INT;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  486|      0|	  else if (!(opt & STRSCAN_OPT_C)) return STRSCAN_ERROR;
  ------------------
  |  |   16|      0|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (486:13): [True: 0, False: 0]
  ------------------
  487|      0|	  else if (sizeof(long) == 8) fmt += STRSCAN_I64 - STRSCAN_INT;
  ------------------
  |  Branch (487:13): [Folded - Ignored]
  ------------------
  488|      0|	}
  489|      0|	if (casecmp(*p, 'u') && (fmt == STRSCAN_INT || fmt == STRSCAN_I64))
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  |  Branch (489:49): [True: 0, False: 0]
  ------------------
  490|      0|	  p++, fmt += STRSCAN_U32 - STRSCAN_INT;
  491|      0|	if ((fmt == STRSCAN_U32 && !(opt & STRSCAN_OPT_C)) ||
  ------------------
  |  |   16|      0|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (491:7): [True: 0, False: 0]
  |  Branch (491:29): [True: 0, False: 0]
  ------------------
  492|      0|	    (fmt >= STRSCAN_I64 && !(opt & STRSCAN_OPT_LL)))
  ------------------
  |  |   15|      0|#define STRSCAN_OPT_LL		0x08
  ------------------
  |  Branch (492:7): [True: 0, False: 0]
  |  Branch (492:29): [True: 0, False: 0]
  ------------------
  493|      0|	  return STRSCAN_ERROR;
  494|      0|      }
  495|      0|      while (lj_char_isspace(*p)) p++;
  496|      0|      if (*p) return STRSCAN_ERROR;
  ------------------
  |  Branch (496:11): [True: 0, False: 0]
  ------------------
  497|      0|    }
  498|      2|    if (p < pe) return STRSCAN_ERROR;
  ------------------
  |  Branch (498:9): [True: 0, False: 2]
  ------------------
  499|       |
  500|       |    /* Fast path for decimal 32 bit integers. */
  501|      2|    if (fmt == STRSCAN_INT && base == 10 &&
  ------------------
  |  Branch (501:9): [True: 2, False: 0]
  |  Branch (501:31): [True: 2, False: 0]
  ------------------
  502|      2|	(dig < 10 || (dig == 10 && *sp <= '2' && x < 0x80000000u+neg))) {
  ------------------
  |  Branch (502:3): [True: 2, False: 0]
  |  Branch (502:16): [True: 0, False: 0]
  |  Branch (502:29): [True: 0, False: 0]
  |  Branch (502:43): [True: 0, False: 0]
  ------------------
  503|      2|      if ((opt & STRSCAN_OPT_TONUM)) {
  ------------------
  |  |   13|      2|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (503:11): [True: 2, False: 0]
  ------------------
  504|      2|	o->n = neg ? -(double)x : (double)x;
  ------------------
  |  Branch (504:9): [True: 0, False: 2]
  ------------------
  505|      2|	return STRSCAN_NUM;
  506|      2|      } else if (x == 0 && neg) {
  ------------------
  |  Branch (506:18): [True: 0, False: 0]
  |  Branch (506:28): [True: 0, False: 0]
  ------------------
  507|      0|	o->n = -0.0;
  508|      0|	return STRSCAN_NUM;
  509|      0|      } else {
  510|      0|	o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (510:9): [True: 0, False: 0]
  ------------------
  511|      0|	return STRSCAN_INT;
  512|      0|      }
  513|      2|    }
  514|       |
  515|       |    /* Dispatch to base-specific parser. */
  516|      0|    if (base == 0 && !(fmt == STRSCAN_NUM || fmt == STRSCAN_IMAG))
  ------------------
  |  Branch (516:9): [True: 0, False: 0]
  |  Branch (516:24): [True: 0, False: 0]
  |  Branch (516:46): [True: 0, False: 0]
  ------------------
  517|      0|      return strscan_oct(sp, o, fmt, neg, dig);
  518|      0|    if (base == 16)
  ------------------
  |  Branch (518:9): [True: 0, False: 0]
  ------------------
  519|      0|      fmt = strscan_hex(sp, o, fmt, opt, ex, neg, dig);
  520|      0|    else if (base == 2)
  ------------------
  |  Branch (520:14): [True: 0, False: 0]
  ------------------
  521|      0|      fmt = strscan_bin(sp, o, fmt, opt, ex, neg, dig);
  522|      0|    else
  523|      0|      fmt = strscan_dec(sp, o, fmt, opt, ex, neg, dig);
  524|       |
  525|       |    /* Try to convert number to integer, if requested. */
  526|      0|    if (fmt == STRSCAN_NUM && (opt & STRSCAN_OPT_TOINT) && !tvismzero(o)) {
  ------------------
  |  |   12|      0|#define STRSCAN_OPT_TOINT	0x01  /* Convert to int32_t, if possible. */
  ------------------
                  if (fmt == STRSCAN_NUM && (opt & STRSCAN_OPT_TOINT) && !tvismzero(o)) {
  ------------------
  |  |  816|      0|#define tvismzero(o)	((o)->u64 == U64x(80000000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (526:9): [True: 0, False: 0]
  |  Branch (526:31): [True: 0, False: 0]
  |  Branch (526:60): [True: 0, False: 0]
  ------------------
  527|      0|      double n = o->n;
  528|      0|      int32_t i = lj_num2int(n);
  ------------------
  |  |  997|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  529|      0|      if (n == (lua_Number)i) { o->i = i; return STRSCAN_INT; }
  ------------------
  |  Branch (529:11): [True: 0, False: 0]
  ------------------
  530|      0|    }
  531|      0|    return fmt;
  532|      0|  }
  533|      0|}
lj_strscan_num:
  536|      9|{
  537|      9|  StrScanFmt fmt = lj_strscan_scan((const uint8_t *)strdata(str), str->len, o,
  ------------------
  |  |  316|      9|#define strdata(s)	((const char *)((s)+1))
  ------------------
  538|      9|				   STRSCAN_OPT_TONUM);
  ------------------
  |  |   13|      9|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  539|      9|  lj_assertX(fmt == STRSCAN_ERROR || fmt == STRSCAN_NUM, "bad scan format");
  ------------------
  |  |  366|      9|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     11|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 7, False: 2]
  |  |  |  |  |  Branch (355:5): [True: 2, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      9|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  540|      0|  return (fmt != STRSCAN_ERROR);
  541|      9|}

lj_tab_new:
  140|  4.19k|{
  141|  4.19k|  GCtab *t = newtab(L, asize, hbits);
  142|  4.19k|  clearapart(t);
  143|  4.19k|  if (t->hmask > 0) clearhpart(t);
  ------------------
  |  Branch (143:7): [True: 3.60k, False: 593]
  ------------------
  144|  4.19k|  return t;
  145|  4.19k|}
lj_tab_new_ah:
  149|  1.79k|{
  150|  1.79k|  return lj_tab_new(L, (uint32_t)(a > 0 ? a+1 : 0), hsize2hbits(h));
  ------------------
  |  |   53|  1.79k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|  1.20k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 1.20k, False: 593]
  |  |  |  Branch (53:32): [True: 0, False: 1.20k]
  |  |  ------------------
  ------------------
  |  Branch (150:35): [True: 17, False: 1.77k]
  ------------------
  151|  1.79k|}
lj_tab_free:
  216|  4.19k|{
  217|  4.19k|  if (t->hmask > 0)
  ------------------
  |  Branch (217:7): [True: 3.61k, False: 580]
  ------------------
  218|  3.61k|    lj_mem_freevec(g, noderef(t->node), t->hmask+1, Node);
  ------------------
  |  |  130|  3.61k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  219|  4.19k|  if (t->asize > 0 && LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|     22|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (219:7): [True: 22, False: 4.17k]
  |  Branch (219:23): [Folded - Ignored]
  |  Branch (219:47): [True: 14, False: 8]
  ------------------
  220|     14|    lj_mem_freevec(g, tvref(t->array), t->asize, TValue);
  ------------------
  |  |  130|     14|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  221|  4.19k|  if (LJ_MAX_COLOSIZE != 0 && t->colo)
  ------------------
  |  |   62|  4.19k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (221:7): [Folded - Ignored]
  |  Branch (221:31): [True: 8, False: 4.18k]
  ------------------
  222|      8|    lj_mem_free(g, t, sizetabcolo((uint32_t)t->colo & 0x7f));
  ------------------
  |  |  513|      8|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
  223|  4.18k|  else
  224|  4.18k|    lj_mem_freet(g, t);
  ------------------
  |  |  134|  4.18k|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  225|  4.19k|}
lj_tab_resize:
  231|     18|{
  232|     18|  Node *oldnode = noderef(t->node);
  ------------------
  |  |  515|     18|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|     18|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  233|     18|  uint32_t oldasize = t->asize;
  234|     18|  uint32_t oldhmask = t->hmask;
  235|     18|  if (asize > oldasize) {  /* Array part grows? */
  ------------------
  |  Branch (235:7): [True: 5, False: 13]
  ------------------
  236|      5|    TValue *array;
  237|      5|    uint32_t i;
  238|      5|    if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|      5|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|      5|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (238:9): [True: 0, False: 5]
  ------------------
  239|      0|      lj_err_msg(L, LJ_ERR_TABOV);
  240|      5|    if (LJ_MAX_COLOSIZE != 0 && t->colo > 0) {
  ------------------
  |  |   62|      5|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (240:9): [Folded - Ignored]
  |  Branch (240:33): [True: 0, False: 5]
  ------------------
  241|       |      /* A colocated array must be separated and copied. */
  242|      0|      TValue *oarray = tvref(t->array);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  243|      0|      array = lj_mem_newvec(L, asize, TValue);
  ------------------
  |  |  125|      0|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|      0|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  244|      0|      t->colo = (int8_t)(t->colo | 0x80);  /* Mark as separated (colo < 0). */
  245|      0|      for (i = 0; i < oldasize; i++)
  ------------------
  |  Branch (245:19): [True: 0, False: 0]
  ------------------
  246|      0|	copyTV(L, &array[i], &oarray[i]);
  247|      5|    } else {
  248|      5|      array = (TValue *)lj_mem_realloc(L, tvref(t->array),
  ------------------
  |  |  217|      5|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      5|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  249|      5|			  oldasize*sizeof(TValue), asize*sizeof(TValue));
  250|      5|    }
  251|      5|    setmref(t->array, array);
  ------------------
  |  |   39|      5|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  252|      5|    t->asize = asize;
  253|     20|    for (i = oldasize; i < asize; i++)  /* Clear newly allocated slots. */
  ------------------
  |  Branch (253:24): [True: 15, False: 5]
  ------------------
  254|     15|      setnilV(&array[i]);
  ------------------
  |  |  869|     20|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  255|      5|  }
  256|       |  /* Create new (empty) hash part. */
  257|     18|  if (hbits) {
  ------------------
  |  Branch (257:7): [True: 13, False: 5]
  ------------------
  258|     13|    newhpart(L, t, hbits);
  259|     13|    clearhpart(t);
  260|     13|  } else {
  261|      5|    global_State *g = G(L);
  ------------------
  |  |  702|      5|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      5|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  262|      5|    setmref(t->node, &g->nilnode);
  ------------------
  |  |   39|      5|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  263|      5|#if LJ_GC64
  264|      5|    setmref(t->freetop, &g->nilnode);
  ------------------
  |  |   39|      5|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  265|      5|#endif
  266|      5|    t->hmask = 0;
  267|      5|  }
  268|     18|  if (asize < oldasize) {  /* Array part shrinks? */
  ------------------
  |  Branch (268:7): [True: 0, False: 18]
  ------------------
  269|      0|    TValue *array = tvref(t->array);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  270|      0|    uint32_t i;
  271|      0|    t->asize = asize;  /* Note: This 'shrinks' even colocated arrays. */
  272|      0|    for (i = asize; i < oldasize; i++)  /* Reinsert old array values. */
  ------------------
  |  Branch (272:21): [True: 0, False: 0]
  ------------------
  273|      0|      if (!tvisnil(&array[i]))
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (273:11): [True: 0, False: 0]
  ------------------
  274|      0|	copyTV(L, lj_tab_setinth(L, t, (int32_t)i), &array[i]);
  275|       |    /* Physically shrink only separated arrays. */
  276|      0|    if (LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|      0|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (276:9): [Folded - Ignored]
  |  Branch (276:33): [True: 0, False: 0]
  ------------------
  277|      0|      setmref(t->array, lj_mem_realloc(L, array,
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  278|      0|	      oldasize*sizeof(TValue), asize*sizeof(TValue)));
  279|      0|  }
  280|     18|  if (oldhmask > 0) {  /* Reinsert pairs from old hash part. */
  ------------------
  |  Branch (280:7): [True: 0, False: 18]
  ------------------
  281|      0|    global_State *g;
  282|      0|    uint32_t i;
  283|      0|    for (i = 0; i <= oldhmask; i++) {
  ------------------
  |  Branch (283:17): [True: 0, False: 0]
  ------------------
  284|      0|      Node *n = &oldnode[i];
  285|      0|      if (!tvisnil(&n->val))
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (285:11): [True: 0, False: 0]
  ------------------
  286|      0|	copyTV(L, lj_tab_set(L, t, &n->key), &n->val);
  287|      0|    }
  288|      0|    g = G(L);
  ------------------
  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|      0|    lj_mem_freevec(g, oldnode, oldhmask+1, Node);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  290|      0|  }
  291|     18|}
lj_tab_getinth:
  385|      8|{
  386|      8|  TValue k;
  387|      8|  Node *n;
  388|      8|  k.n = (lua_Number)key;
  389|      8|  n = hashnum(t, &k);
  ------------------
  |  |   45|      8|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|      8|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  390|      8|  do {
  391|      8|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  801|     16|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      8|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      8|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      8|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 0, False: 8]
  |  |  ------------------
  ------------------
  |  Branch (391:29): [True: 0, False: 0]
  ------------------
  392|      0|      return &n->val;
  393|      8|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|      8|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      8|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (393:12): [True: 0, False: 8]
  ------------------
  394|      8|  return NULL;
  395|      8|}
lj_tab_getstr:
  398|  2.43k|{
  399|  2.43k|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|  2.43k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  400|  2.43k|  do {
  401|  2.43k|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  792|  4.86k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|  2.43k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  2.43k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 0, False: 2.43k]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  856|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (401:29): [True: 0, False: 0]
  ------------------
  402|      0|      return &n->val;
  403|  2.43k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  2.43k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  2.43k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (403:12): [True: 0, False: 2.43k]
  ------------------
  404|  2.43k|  return NULL;
  405|  2.43k|}
lj_tab_get:
  408|  2.43k|{
  409|  2.43k|  if (tvisstr(key)) {
  ------------------
  |  |  792|  2.43k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|  2.43k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  2.43k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 2.43k, False: 4]
  |  |  ------------------
  ------------------
  410|  2.43k|    cTValue *tv = lj_tab_getstr(t, strV(key));
  ------------------
  |  |  856|  2.43k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  2.43k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.43k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.43k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.43k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.43k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  411|  2.43k|    if (tv)
  ------------------
  |  Branch (411:9): [True: 0, False: 2.43k]
  ------------------
  412|      0|      return tv;
  413|  2.43k|  } else if (tvisint(key)) {
  ------------------
  |  |  800|      4|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      8|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  414|      0|    cTValue *tv = lj_tab_getint(t, intV(key));
  ------------------
  |  |   85|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   82|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (82:35): [Folded - Ignored]
  |  |  |  |  |  Branch (82:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (83:47): [Folded - Ignored]
  |  |  |  |  |  Branch (83:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (85:71): [Folded - Ignored]
  |  |  |  Branch (85:71): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  415|      0|    if (tv)
  ------------------
  |  Branch (415:9): [True: 0, False: 0]
  ------------------
  416|      0|      return tv;
  417|      4|  } else if (tvisnum(key)) {
  ------------------
  |  |  801|      4|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      4|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      4|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 4, False: 0]
  |  |  ------------------
  ------------------
  418|      4|    lua_Number nk = numV(key);
  ------------------
  |  |  863|      4|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      4|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      4|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      4|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      4|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  419|      4|    int32_t k = lj_num2int(nk);
  ------------------
  |  |  997|      4|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  420|      4|    if (nk == (lua_Number)k) {
  ------------------
  |  Branch (420:9): [True: 4, False: 0]
  ------------------
  421|      4|      cTValue *tv = lj_tab_getint(t, k);
  ------------------
  |  |   85|      4|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   82|      4|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 4]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  422|      4|      if (tv)
  ------------------
  |  Branch (422:11): [True: 0, False: 4]
  ------------------
  423|      0|	return tv;
  424|      4|    } else {
  425|      0|      goto genlookup;  /* Else use the generic lookup. */
  426|      0|    }
  427|      4|  } else if (!tvisnil(key)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (427:14): [True: 0, False: 0]
  ------------------
  428|      0|    Node *n;
  429|      0|  genlookup:
  430|      0|    n = hashkey(t, key);
  431|      0|    do {
  432|      0|      if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (432:11): [True: 0, False: 0]
  ------------------
  433|      0|	return &n->val;
  434|      0|    } while ((n = nextnode(n)));
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (434:14): [True: 0, False: 0]
  ------------------
  435|      0|  }
  436|  2.43k|  return niltv(L);
  ------------------
  |  |  664|  2.43k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  2.43k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.43k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.43k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.43k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.43k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  437|  2.43k|}
lj_tab_newkey:
  443|  2.44k|{
  444|  2.44k|  Node *n = hashkey(t, key);
  445|  2.44k|  if (!tvisnil(&n->val) || t->hmask == 0) {
  ------------------
  |  |  779|  4.88k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (445:7): [True: 0, False: 2.44k]
  |  Branch (445:28): [True: 18, False: 2.42k]
  ------------------
  446|     18|    Node *nodebase = noderef(t->node);
  ------------------
  |  |  515|     18|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|     18|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  447|     18|    Node *collide, *freenode = getfreetop(t, nodebase);
  ------------------
  |  |  518|     18|#define getfreetop(t, n)	(noderef((t)->freetop))
  |  |  ------------------
  |  |  |  |  515|     18|#define noderef(r)	(mref((r), Node))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     18|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  448|     18|    lj_assertL(freenode >= nodebase && freenode <= nodebase+t->hmask+1,
  ------------------
  |  |  365|     18|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     36|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 18, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 18, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     18|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  449|      0|	       "bad freenode");
  450|     18|    do {
  451|     18|      if (freenode == nodebase) {  /* No free node found? */
  ------------------
  |  Branch (451:11): [True: 18, False: 0]
  ------------------
  452|     18|	rehashtab(L, t, key);  /* Rehash table. */
  453|     18|	return lj_tab_set(L, t, key);  /* Retry key insertion. */
  454|     18|      }
  455|     18|    } while (!tvisnil(&(--freenode)->key));
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (455:14): [True: 0, False: 0]
  ------------------
  456|      0|    setfreetop(t, nodebase, freenode);
  ------------------
  |  |  519|      0|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  457|      0|    lj_assertL(freenode != &G(L)->nilnode, "store to fallback hash");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  458|      0|    collide = hashkey(t, &n->key);
  459|      0|    if (collide != n) {  /* Colliding node not the main node? */
  ------------------
  |  Branch (459:9): [True: 0, False: 0]
  ------------------
  460|      0|      while (noderef(collide->next) != n)  /* Find predecessor. */
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (460:14): [True: 0, False: 0]
  ------------------
  461|      0|	collide = nextnode(collide);
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  462|      0|      setmref(collide->next, freenode);  /* Relink chain. */
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  463|       |      /* Copy colliding node into free node and free main node. */
  464|      0|      freenode->val = n->val;
  465|      0|      freenode->key = n->key;
  466|      0|      freenode->next = n->next;
  467|      0|      setmref(n->next, NULL);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  468|      0|      setnilV(&n->val);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  469|       |      /* Rechain pseudo-resurrected string keys with colliding hashes. */
  470|      0|      while (nextnode(freenode)) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (516:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  471|      0|	Node *nn = nextnode(freenode);
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  472|      0|	if (!tvisnil(&nn->val) && hashkey(t, &nn->key) == n) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (472:6): [True: 0, False: 0]
  |  Branch (472:28): [True: 0, False: 0]
  ------------------
  473|      0|	  freenode->next = nn->next;
  474|      0|	  nn->next = n->next;
  475|      0|	  setmref(n->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  476|       |	  /*
  477|       |	  ** Rechaining a resurrected string key creates a new dilemma:
  478|       |	  ** Another string key may have originally been resurrected via
  479|       |	  ** _any_ of the previous nodes as a chain anchor. Including
  480|       |	  ** a node that had to be moved, which makes them unreachable.
  481|       |	  ** It's not feasible to check for all previous nodes, so rechain
  482|       |	  ** any string key that's currently in a non-main positions.
  483|       |	  */
  484|      0|	  while ((nn = nextnode(freenode))) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (484:11): [True: 0, False: 0]
  ------------------
  485|      0|	    if (!tvisnil(&nn->val)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (485:10): [True: 0, False: 0]
  ------------------
  486|      0|	      Node *mn = hashkey(t, &nn->key);
  487|      0|	      if (mn != freenode && mn != nn) {
  ------------------
  |  Branch (487:12): [True: 0, False: 0]
  |  Branch (487:30): [True: 0, False: 0]
  ------------------
  488|      0|		freenode->next = nn->next;
  489|      0|		nn->next = mn->next;
  490|      0|		setmref(mn->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  491|      0|	      } else {
  492|      0|		freenode = nn;
  493|      0|	      }
  494|      0|	    } else {
  495|      0|	      freenode = nn;
  496|      0|	    }
  497|      0|	  }
  498|      0|	  break;
  499|      0|	} else {
  500|      0|	  freenode = nn;
  501|      0|	}
  502|      0|      }
  503|      0|    } else {  /* Otherwise use free node. */
  504|      0|      setmrefr(freenode->next, n->next);  /* Insert into chain. */
  ------------------
  |  |   41|      0|#define setmrefr(r, v)	((r).ptr64 = (v).ptr64)
  ------------------
  505|      0|      setmref(n->next, freenode);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  506|      0|      n = freenode;
  507|      0|    }
  508|      0|  }
  509|  2.42k|  n->key.u64 = key->u64;
  510|  2.42k|  if (LJ_UNLIKELY(tvismzero(&n->key)))
  ------------------
  |  |  146|  2.42k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 2.42k]
  |  |  ------------------
  ------------------
  511|      0|    n->key.u64 = 0;
  512|  2.42k|  lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|  2.42k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  2.42k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 2.42k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  513|  2.42k|  lj_assertL(tvisnil(&n->val), "new hash slot is not empty");
  ------------------
  |  |  365|  2.42k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.42k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.42k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.42k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  514|      0|  return &n->val;
  515|  2.44k|}
lj_tab_setinth:
  518|  1.21k|{
  519|  1.21k|  TValue k;
  520|  1.21k|  Node *n;
  521|  1.21k|  k.n = (lua_Number)key;
  522|  1.21k|  n = hashnum(t, &k);
  ------------------
  |  |   45|  1.21k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  1.21k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  523|  1.21k|  do {
  524|  1.21k|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  801|  2.43k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|  1.21k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.21k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.21k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 0, False: 1.21k]
  |  |  ------------------
  ------------------
  |  Branch (524:29): [True: 0, False: 0]
  ------------------
  525|      0|      return &n->val;
  526|  1.21k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  1.21k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  1.21k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (526:12): [True: 0, False: 1.21k]
  ------------------
  527|  1.21k|  return lj_tab_newkey(L, t, &k);
  528|  1.21k|}
lj_tab_setstr:
  531|      7|{
  532|      7|  TValue k;
  533|      7|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|      7|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  534|      7|  do {
  535|      7|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  792|     14|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      7|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      7|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 0, False: 7]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  856|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (535:29): [True: 0, False: 0]
  ------------------
  536|      0|      return &n->val;
  537|      7|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|      7|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      7|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (537:12): [True: 0, False: 7]
  ------------------
  538|      7|  setstrV(L, &k, key);
  539|      7|  return lj_tab_newkey(L, t, &k);
  540|      7|}
lj_tab_set:
  543|     22|{
  544|     22|  Node *n;
  545|     22|  t->nomm = 0;  /* Invalidate negative metamethod cache. */
  546|     22|  if (tvisstr(key)) {
  ------------------
  |  |  792|     22|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     22|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     22|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 7, False: 15]
  |  |  ------------------
  ------------------
  547|      7|    return lj_tab_setstr(L, t, strV(key));
  ------------------
  |  |  856|      7|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      7|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      7|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      7|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 7, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      7|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  548|     15|  } else if (tvisint(key)) {
  ------------------
  |  |  800|     15|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|     30|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  549|      0|    return lj_tab_setint(L, t, intV(key));
  ------------------
  |  |   87|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   82|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (82:35): [Folded - Ignored]
  |  |  |  |  |  Branch (82:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (83:47): [Folded - Ignored]
  |  |  |  |  |  Branch (83:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (87:74): [Folded - Ignored]
  |  |  |  Branch (87:74): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  550|     15|  } else if (tvisnum(key)) {
  ------------------
  |  |  801|     15|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|     15|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|     15|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     15|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 15, False: 0]
  |  |  ------------------
  ------------------
  551|     15|    lua_Number nk = numV(key);
  ------------------
  |  |  863|     15|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|     15|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     15|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     15|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 15, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     15|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  552|     15|    int32_t k = lj_num2int(nk);
  ------------------
  |  |  997|     15|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  553|     15|    if (nk == (lua_Number)k)
  ------------------
  |  Branch (553:9): [True: 15, False: 0]
  ------------------
  554|     15|      return lj_tab_setint(L, t, k);
  ------------------
  |  |   87|     15|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   82|     15|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 5, False: 10]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   83|      5|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      5|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      5|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  555|      0|    if (tvisnan(key))
  ------------------
  |  |  809|      0|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  556|      0|      lj_err_msg(L, LJ_ERR_NANIDX);
  557|       |    /* Else use the generic lookup. */
  558|      0|  } else if (tvisnil(key)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|    lj_err_msg(L, LJ_ERR_NILIDX);
  560|      0|  }
  561|      0|  n = hashkey(t, key);
  562|      0|  do {
  563|      0|    if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (563:9): [True: 0, False: 0]
  ------------------
  564|      0|      return &n->val;
  565|      0|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (565:12): [True: 0, False: 0]
  ------------------
  566|      0|  return lj_tab_newkey(L, t, key);
  567|      0|}
lj_tab_keyindex:
  580|      3|{
  581|      3|  TValue tmp;
  582|      3|  if (tvisint(key)) {
  ------------------
  |  |  800|      3|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      6|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  583|      0|    int32_t k = intV(key);
  ------------------
  |  |  864|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  584|      0|    if ((uint32_t)k < t->asize)
  ------------------
  |  Branch (584:9): [True: 0, False: 0]
  ------------------
  585|      0|      return (uint32_t)k + 1;
  586|      0|    setnumV(&tmp, (lua_Number)k);
  ------------------
  |  |  942|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  587|      0|    key = &tmp;
  588|      3|  } else if (tvisnum(key)) {
  ------------------
  |  |  801|      3|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      3|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      3|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 0, False: 3]
  |  |  ------------------
  ------------------
  589|      0|    lua_Number nk = numV(key);
  ------------------
  |  |  863|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  590|      0|    int32_t k = lj_num2int(nk);
  ------------------
  |  |  997|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  591|      0|    if ((uint32_t)k < t->asize && nk == (lua_Number)k)
  ------------------
  |  Branch (591:9): [True: 0, False: 0]
  |  Branch (591:35): [True: 0, False: 0]
  ------------------
  592|      0|      return (uint32_t)k + 1;
  593|      0|  }
  594|      3|  if (!tvisnil(key)) {
  ------------------
  |  |  779|      3|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (594:7): [True: 0, False: 3]
  ------------------
  595|      0|    Node *n = hashkey(t, key);
  596|      0|    do {
  597|      0|      if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (597:11): [True: 0, False: 0]
  ------------------
  598|      0|	return t->asize + (uint32_t)((n+1) - noderef(t->node));
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  599|      0|    } while ((n = nextnode(n)));
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (599:14): [True: 0, False: 0]
  ------------------
  600|      0|    if (key->u32.hi == LJ_KEYINDEX)  /* Despecialized ITERN while running. */
  ------------------
  |  |  288|      0|#define LJ_KEYINDEX		0xfffe7fffu
  ------------------
  |  Branch (600:9): [True: 0, False: 0]
  ------------------
  601|      0|      return key->u32.lo;
  602|      0|    return ~0u;  /* Invalid key to next. */
  603|      0|  }
  604|      3|  return 0;  /* A nil key starts the traversal. */
  605|      3|}
lj_tab_next:
  609|      3|{
  610|      3|  uint32_t idx = lj_tab_keyindex(t, key);  /* Find successor index of key. */
  611|       |  /* First traverse the array part. */
  612|      3|  for (; idx < t->asize; idx++) {
  ------------------
  |  Branch (612:10): [True: 0, False: 3]
  ------------------
  613|      0|    cTValue *a = arrayslot(t, idx);
  ------------------
  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  614|      0|    if (LJ_LIKELY(!tvisnil(a))) {
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  615|      0|      setintV(o, idx);
  616|      0|      o[1] = *a;
  617|      0|      return 1;
  618|      0|    }
  619|      0|  }
  620|      3|  idx -= t->asize;
  621|       |  /* Then traverse the hash part. */
  622|      6|  for (; idx <= t->hmask; idx++) {
  ------------------
  |  Branch (622:10): [True: 3, False: 3]
  ------------------
  623|      3|    Node *n = &noderef(t->node)[idx];
  ------------------
  |  |  515|      3|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      3|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  624|      3|    if (!tvisnil(&n->val)) {
  ------------------
  |  |  779|      3|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (624:9): [True: 0, False: 3]
  ------------------
  625|      0|      o[0] = n->key;
  626|      0|      o[1] = n->val;
  627|      0|      return 1;
  628|      0|    }
  629|      3|  }
  630|      3|  return (int32_t)idx < 0 ? -1 : 0;  /* Invalid key or end of traversal. */
  ------------------
  |  Branch (630:10): [True: 0, False: 3]
  ------------------
  631|      3|}
lj_tab_len:
  662|      1|{
  663|      1|  size_t hi = (size_t)t->asize;
  664|      1|  if (hi) hi--;
  ------------------
  |  Branch (664:7): [True: 0, False: 1]
  ------------------
  665|       |  /* In a growing array the last array element is very likely nil. */
  666|      1|  if (hi > 0 && LJ_LIKELY(tvisnil(arrayslot(t, hi)))) {
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (666:7): [True: 0, False: 1]
  ------------------
  667|       |    /* Binary search to find a non-nil to nil transition in the array. */
  668|      0|    size_t lo = 0;
  669|      0|    while (hi - lo > 1) {
  ------------------
  |  Branch (669:12): [True: 0, False: 0]
  ------------------
  670|      0|      size_t mid = (lo+hi) >> 1;
  671|      0|      if (tvisnil(arrayslot(t, mid))) hi = mid; else lo = mid;
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  672|      0|    }
  673|      0|    return (MSize)lo;
  674|      0|  }
  675|       |  /* Without a hash part, there's an implicit nil after the last element. */
  676|      1|  return t->hmask ? tab_len_slow(t, hi) : (MSize)hi;
  ------------------
  |  Branch (676:10): [True: 0, False: 1]
  ------------------
  677|      1|}
lj_tab.c:newtab:
   82|  4.19k|{
   83|  4.19k|  GCtab *t;
   84|       |  /* First try to colocate the array part. */
   85|  4.19k|  if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|  4.19k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
                if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|     17|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (85:7): [Folded - Ignored]
  |  Branch (85:31): [True: 17, False: 4.17k]
  |  Branch (85:44): [True: 8, False: 9]
  ------------------
   86|      8|    Node *nilnode;
   87|      8|    lj_assertL((sizeof(GCtab) & 7) == 0, "bad GCtab size");
  ------------------
  |  |  365|      8|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      8|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      8|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   88|      8|    t = (GCtab *)lj_mem_newgco(L, sizetabcolo(asize));
  ------------------
  |  |  513|      8|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
   89|      8|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|      8|#define LJ_TTAB			(~11u)
  ------------------
   90|      8|    t->nomm = (uint8_t)~0;
   91|      8|    t->colo = (int8_t)asize;
   92|      8|    setmref(t->array, (TValue *)((char *)t + sizeof(GCtab)));
  ------------------
  |  |   39|      8|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   93|      8|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|      8|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   94|      8|    t->asize = asize;
   95|      8|    t->hmask = 0;
   96|      8|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  702|      8|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      8|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   97|      8|    setmref(t->node, nilnode);
  ------------------
  |  |   39|      8|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   98|      8|#if LJ_GC64
   99|      8|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|      8|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  100|      8|#endif
  101|  4.18k|  } else {  /* Otherwise separately allocate the array part. */
  102|  4.18k|    Node *nilnode;
  103|  4.18k|    t = lj_mem_newobj(L, GCtab);
  ------------------
  |  |  132|  4.18k|#define lj_mem_newobj(L, t)	((t *)lj_mem_newgco(L, sizeof(t)))
  ------------------
  104|  4.18k|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|  4.18k|#define LJ_TTAB			(~11u)
  ------------------
  105|  4.18k|    t->nomm = (uint8_t)~0;
  106|  4.18k|    t->colo = 0;
  107|  4.18k|    setmref(t->array, NULL);
  ------------------
  |  |   39|  4.18k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|  4.18k|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|  4.18k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  109|  4.18k|    t->asize = 0;  /* In case the array allocation fails. */
  110|  4.18k|    t->hmask = 0;
  111|  4.18k|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  702|  4.18k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  4.18k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  112|  4.18k|    setmref(t->node, nilnode);
  ------------------
  |  |   39|  4.18k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  113|  4.18k|#if LJ_GC64
  114|  4.18k|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|  4.18k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  115|  4.18k|#endif
  116|  4.18k|    if (asize > 0) {
  ------------------
  |  Branch (116:9): [True: 9, False: 4.17k]
  ------------------
  117|      9|      if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|      9|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|      9|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (117:11): [True: 0, False: 9]
  ------------------
  118|      0|	lj_err_msg(L, LJ_ERR_TABOV);
  119|      9|      setmref(t->array, lj_mem_newvec(L, asize, TValue));
  ------------------
  |  |   39|      9|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  120|      9|      t->asize = asize;
  121|      9|    }
  122|  4.18k|  }
  123|  4.19k|  if (hbits)
  ------------------
  |  Branch (123:7): [True: 3.60k, False: 593]
  ------------------
  124|  3.60k|    newhpart(L, t, hbits);
  125|  4.19k|  return t;
  126|  4.19k|}
lj_tab.c:clearapart:
   73|  4.19k|{
   74|  4.19k|  uint32_t i, asize = t->asize;
   75|  4.19k|  TValue *array = tvref(t->array);
  ------------------
  |  |  217|  4.19k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  4.19k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   76|  5.50k|  for (i = 0; i < asize; i++)
  ------------------
  |  Branch (76:15): [True: 1.31k, False: 4.19k]
  ------------------
   77|  1.31k|    setnilV(&array[i]);
  ------------------
  |  |  869|  1.31k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   78|  4.19k|}
lj_tab.c:clearhpart:
   59|  3.61k|{
   60|  3.61k|  uint32_t i, hmask = t->hmask;
   61|  3.61k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|  3.61k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  3.61k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   62|  3.61k|  lj_assertX(t->hmask != 0, "empty hash part");
  ------------------
  |  |  366|  3.61k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.61k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.61k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.61k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|  90.0k|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (63:15): [True: 86.4k, False: 3.61k]
  ------------------
   64|  86.4k|    Node *n = &node[i];
   65|  86.4k|    setmref(n->next, NULL);
  ------------------
  |  |   39|  86.4k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   66|  86.4k|    setnilV(&n->key);
  ------------------
  |  |  869|  86.4k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   67|  86.4k|    setnilV(&n->val);
  ------------------
  |  |  869|  86.4k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   68|  86.4k|  }
   69|  3.61k|}
lj_tab.c:newhpart:
   38|  3.61k|{
   39|  3.61k|  uint32_t hsize;
   40|  3.61k|  Node *node;
   41|  3.61k|  lj_assertL(hbits != 0, "zero hash size");
  ------------------
  |  |  365|  3.61k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.61k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.61k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.61k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   42|  3.61k|  if (hbits > LJ_MAX_HBITS)
  ------------------
  |  |   59|  3.61k|#define LJ_MAX_HBITS	26		/* Max. hash bits. */
  ------------------
  |  Branch (42:7): [True: 0, False: 3.61k]
  ------------------
   43|      0|    lj_err_msg(L, LJ_ERR_TABOV);
   44|  3.61k|  hsize = 1u << hbits;
   45|  3.61k|  node = lj_mem_newvec(L, hsize, Node);
  ------------------
  |  |  125|  3.61k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  3.61k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   46|  3.61k|  setmref(t->node, node);
  ------------------
  |  |   39|  3.61k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   47|  3.61k|  setfreetop(t, node, &node[hsize]);
  ------------------
  |  |  519|  3.61k|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|  3.61k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   48|  3.61k|  t->hmask = hsize-1;
   49|  3.61k|}
lj_tab.c:rehashtab:
  357|     18|{
  358|     18|  uint32_t bins[LJ_MAX_ABITS];
  359|     18|  uint32_t total, asize, na, i;
  360|    522|  for (i = 0; i < LJ_MAX_ABITS; i++) bins[i] = 0;
  ------------------
  |  |   60|    522|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  ------------------
  |  Branch (360:15): [True: 504, False: 18]
  ------------------
  361|     18|  asize = countarray(t, bins);
  362|     18|  total = 1 + asize;
  363|     18|  total += counthash(t, bins, &asize);
  364|     18|  asize += countint(ek, bins);
  365|     18|  na = bestasize(bins, &asize);
  366|     18|  total -= na;
  367|     18|  lj_tab_resize(L, t, asize, hsize2hbits(total));
  ------------------
  |  |   53|     18|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 13, False: 5]
  |  |  |  Branch (53:32): [True: 13, False: 0]
  |  |  ------------------
  ------------------
  368|     18|}
lj_tab.c:countarray:
  308|     18|{
  309|     18|  uint32_t na, b, i;
  310|     18|  if (t->asize == 0) return 0;
  ------------------
  |  Branch (310:7): [True: 18, False: 0]
  ------------------
  311|      0|  for (na = i = b = 0; b < LJ_MAX_ABITS; b++) {
  ------------------
  |  |   60|      0|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  ------------------
  |  Branch (311:24): [True: 0, False: 0]
  ------------------
  312|      0|    uint32_t n, top = 2u << b;
  313|      0|    TValue *array;
  314|      0|    if (top >= t->asize) {
  ------------------
  |  Branch (314:9): [True: 0, False: 0]
  ------------------
  315|      0|      top = t->asize-1;
  316|      0|      if (i > top)
  ------------------
  |  Branch (316:11): [True: 0, False: 0]
  ------------------
  317|      0|	break;
  318|      0|    }
  319|      0|    array = tvref(t->array);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  320|      0|    for (n = 0; i <= top; i++)
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|      if (!tvisnil(&array[i]))
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (321:11): [True: 0, False: 0]
  ------------------
  322|      0|	n++;
  323|      0|    bins[b] += n;
  324|      0|    na += n;
  325|      0|  }
  326|      0|  return na;
  327|     18|}
lj_tab.c:counthash:
  330|     18|{
  331|     18|  uint32_t total, na, i, hmask = t->hmask;
  332|     18|  Node *node = noderef(t->node);
  ------------------
  |  |  515|     18|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|     18|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  333|     36|  for (total = na = 0, i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (333:31): [True: 18, False: 18]
  ------------------
  334|     18|    Node *n = &node[i];
  335|     18|    if (!tvisnil(&n->val)) {
  ------------------
  |  |  779|     18|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (335:9): [True: 0, False: 18]
  ------------------
  336|      0|      na += countint(&n->key, bins);
  337|      0|      total++;
  338|      0|    }
  339|     18|  }
  340|     18|  *narray += na;
  341|     18|  return total;
  342|     18|}
lj_tab.c:countint:
  294|     18|{
  295|     18|  lj_assertX(!tvisint(key), "bad integer key");
  ------------------
  |  |  366|     18|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     18|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     18|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  296|     18|  if (tvisnum(key)) {
  ------------------
  |  |  801|     18|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|     18|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|     18|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     18|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 11, False: 7]
  |  |  ------------------
  ------------------
  297|     11|    lua_Number nk = numV(key);
  ------------------
  |  |  863|     11|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|     11|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     11|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     11|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 11, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     11|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  298|     11|    int32_t k = lj_num2int(nk);
  ------------------
  |  |  997|     11|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  299|     11|    if ((uint32_t)k < LJ_MAX_ASIZE && nk == (lua_Number)k) {
  ------------------
  |  |   61|     22|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|     11|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (299:9): [True: 11, False: 0]
  |  Branch (299:39): [True: 11, False: 0]
  ------------------
  300|     11|      bins[(k > 2 ? lj_fls((uint32_t)(k-1)) : 0)]++;
  ------------------
  |  |  149|      6|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (300:13): [True: 6, False: 5]
  ------------------
  301|     11|      return 1;
  302|     11|    }
  303|     11|  }
  304|      7|  return 0;
  305|     18|}
lj_tab.c:bestasize:
  345|     18|{
  346|     18|  uint32_t b, sum, na = 0, sz = 0, nn = *narray;
  347|     29|  for (b = 0, sum = 0; 2*nn > (1u<<b) && sum != nn; b++)
  ------------------
  |  Branch (347:24): [True: 11, False: 18]
  |  Branch (347:42): [True: 11, False: 0]
  ------------------
  348|     11|    if (bins[b] > 0 && 2*(sum += bins[b]) > (1u<<b)) {
  ------------------
  |  Branch (348:9): [True: 5, False: 6]
  |  Branch (348:24): [True: 5, False: 0]
  ------------------
  349|      5|      sz = (2u<<b)+1;
  350|      5|      na = sum;
  351|      5|    }
  352|     18|  *narray = sz;
  353|     18|  return na;
  354|     18|}
lj_tab.c:hashkey:
   21|  2.44k|{
   22|  2.44k|  lj_assertX(!tvisint(key), "attempt to hash integer");
  ------------------
  |  |  366|  2.44k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.44k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.44k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   23|  2.44k|  if (tvisstr(key))
  ------------------
  |  |  792|  2.44k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|  2.44k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  2.44k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 1.22k, False: 1.21k]
  |  |  ------------------
  ------------------
   24|  1.22k|    return hashstr(t, strV(key));
  ------------------
  |  |   42|  2.44k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  |  |  ------------------
  |  |  |  Branch (42:37): [True: 1.22k, False: 0]
  |  |  ------------------
  ------------------
   25|  1.21k|  else if (tvisnum(key))
  ------------------
  |  |  801|  1.21k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|  1.21k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.21k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.21k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 1.21k, False: 0]
  |  |  ------------------
  ------------------
   26|  1.21k|    return hashnum(t, key);
  ------------------
  |  |   45|  1.21k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  1.21k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   27|      0|  else if (tvisbool(key))
  ------------------
  |  |  786|      0|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  784|      0|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (784:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  785|      0|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|      0|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (785:21): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   28|      0|    return hashmask(t, boolV(key));
  ------------------
  |  |  834|      0|#define boolV(o)	check_exp(tvisbool(o), (LJ_TFALSE - itype(o)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   29|      0|  else
   30|      0|    return hashgcref(t, key->gcr);
  ------------------
  |  |   48|      0|  hashlohi((t), (uint32_t)gcrefu(r), (uint32_t)(gcrefu(r) >> 32))
  |  |  ------------------
  |  |  |  |   44|      0|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   31|       |  /* Only hash 32 bits of lightuserdata on a 64 bit CPU. Good enough? */
   32|  2.44k|}

lj_tab.c:hashmask:
   36|  6.10k|{
   37|  6.10k|  Node *n = noderef(t->node);
  ------------------
  |  |  515|  6.10k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  6.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   38|  6.10k|  return &n[hash & t->hmask];
   39|  6.10k|}
lj_tab.c:hashrot:
   19|  2.44k|{
   20|  2.44k|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|  2.44k|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|  2.44k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|  2.44k|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|  2.44k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|  2.44k|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|  2.44k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|  2.44k|  return hi;
   32|  2.44k|}

lj_trace_initstate:
  314|  1.20k|{
  315|  1.20k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  1.20k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  1.20k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  1.20k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  316|  1.20k|  TValue *tv;
  317|       |
  318|       |  /* Initialize aligned SIMD constants. */
  319|  1.20k|  tv = LJ_KSIMD(J, LJ_KSIMD_ABS);
  ------------------
  |  |  403|  1.20k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  320|  1.20k|  tv[0].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  1.20k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  321|  1.20k|  tv[1].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  1.20k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  322|  1.20k|  tv = LJ_KSIMD(J, LJ_KSIMD_NEG);
  ------------------
  |  |  403|  1.20k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  323|  1.20k|  tv[0].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  1.20k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  324|  1.20k|  tv[1].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  1.20k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  325|       |
  326|       |  /* Initialize 32/64 bit constants. */
  327|  1.20k|#if LJ_TARGET_X86ORX64
  328|  1.20k|  J->k64[LJ_K64_TOBIT].u64 = U64x(43380000,00000000);
  ------------------
  |  |   94|  1.20k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  329|       |#if LJ_32
  330|       |  J->k64[LJ_K64_M2P64_31].u64 = U64x(c1e00000,00000000);
  331|       |#endif
  332|  1.20k|  J->k64[LJ_K64_2P64].u64 = U64x(43f00000,00000000);
  ------------------
  |  |   94|  1.20k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  333|  1.20k|  J->k32[LJ_K32_M2P64_31] = LJ_64 ? 0xdf800000 : 0xcf000000;
  ------------------
  |  |  640|  1.20k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  334|  1.20k|#endif
  335|  1.20k|#if LJ_TARGET_X86ORX64 || LJ_TARGET_MIPS64
  336|  1.20k|  J->k64[LJ_K64_M2P64].u64 = U64x(c3f00000,00000000);
  ------------------
  |  |   94|  1.20k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  337|  1.20k|#endif
  338|       |#if LJ_TARGET_PPC
  339|       |  J->k32[LJ_K32_2P52_2P31] = 0x59800004;
  340|       |  J->k32[LJ_K32_2P52] = 0x59800000;
  341|       |#endif
  342|       |#if LJ_TARGET_PPC || LJ_TARGET_MIPS
  343|       |  J->k32[LJ_K32_2P31] = 0x4f000000;
  344|       |#endif
  345|       |#if LJ_TARGET_MIPS
  346|       |  J->k64[LJ_K64_2P31].u64 = U64x(41e00000,00000000);
  347|       |#if LJ_64
  348|       |  J->k64[LJ_K64_2P63].u64 = U64x(43e00000,00000000);
  349|       |  J->k32[LJ_K32_2P63] = 0x5f000000;
  350|       |  J->k32[LJ_K32_M2P64] = 0xdf800000;
  351|       |#endif
  352|       |#endif
  353|  1.20k|}
lj_trace_freestate:
  357|  1.20k|{
  358|  1.20k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  1.20k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  1.20k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  1.20k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  359|  1.20k|#ifdef LUA_USE_ASSERT
  360|  1.20k|  {  /* This assumes all traces have already been freed. */
  361|  1.20k|    ptrdiff_t i;
  362|  1.20k|    for (i = 1; i < (ptrdiff_t)J->sizetrace; i++)
  ------------------
  |  Branch (362:17): [True: 0, False: 1.20k]
  ------------------
  363|  1.20k|      lj_assertG(i == (ptrdiff_t)J->cur.traceno || traceref(J, i) == NULL,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  364|  1.20k|		 "trace still allocated");
  365|  1.20k|  }
  366|  1.20k|#endif
  367|  1.20k|  lj_mcode_free(J);
  368|  1.20k|  lj_mem_freevec(g, J->snapmapbuf, J->sizesnapmap, SnapEntry);
  ------------------
  |  |  130|  1.20k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  369|  1.20k|  lj_mem_freevec(g, J->snapbuf, J->sizesnap, SnapShot);
  ------------------
  |  |  130|  1.20k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  370|  1.20k|  lj_mem_freevec(g, J->irbuf + J->irbotlim, J->irtoplim - J->irbotlim, IRIns);
  ------------------
  |  |  130|  1.20k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  371|  1.20k|  lj_mem_freevec(g, J->trace, J->sizetrace, GCRef);
  ------------------
  |  |  130|  1.20k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  372|  1.20k|}

lj_udata_new:
   15|      3|{
   16|      3|  GCudata *ud = lj_mem_newt(L, sizeof(GCudata) + sz, GCudata);
  ------------------
  |  |  133|      3|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|      3|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   17|      3|  global_State *g = G(L);
  ------------------
  |  |  702|      3|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      3|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   18|      3|  newwhite(g, ud);  /* Not finalized. */
  ------------------
  |  |   40|      3|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  772|      3|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      3|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      3|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      3|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      3|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   19|      3|  ud->gct = ~LJ_TUDATA;
  ------------------
  |  |  272|      3|#define LJ_TUDATA		(~12u)
  ------------------
   20|      3|  ud->udtype = UDTYPE_USERDATA;
   21|      3|  ud->len = sz;
   22|       |  /* NOBARRIER: The GCudata is new (marked white). */
   23|      3|  setgcrefnull(ud->metatable);
  ------------------
  |  |   76|      3|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   24|      3|  setgcref(ud->env, obj2gco(env));
  ------------------
  |  |   72|      3|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   25|       |  /* Chain to userdata list (after main thread). */
   26|      3|  setgcrefr(ud->nextgc, mainthread(g)->nextgc);
  ------------------
  |  |   77|      3|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   27|      3|  setgcref(mainthread(g)->nextgc, obj2gco(ud));
  ------------------
  |  |   72|      3|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   28|      3|  return ud;
   29|      3|}
lj_udata_free:
   32|      3|{
   33|      3|  lj_mem_free(g, ud, sizeudata(ud));
  ------------------
  |  |  343|      3|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  ------------------
   34|      3|}
lj_lightud_intern:
   38|      8|{
   39|      8|  global_State *g = G(L);
  ------------------
  |  |  702|      8|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      8|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   40|      8|  uint64_t u = (uint64_t)p;
   41|      8|  uint32_t up = lightudup(u);
  ------------------
  |  |  841|      8|  ((uint32_t)(((p) >> LJ_LIGHTUD_BITS_LO) << (LJ_LIGHTUD_BITS_LO-32)))
  |  |  ------------------
  |  |  |  |  297|      8|#define LJ_LIGHTUD_BITS_LO	(47 - LJ_LIGHTUD_BITS_SEG)
  |  |  |  |  ------------------
  |  |  |  |  |  |  296|      8|#define LJ_LIGHTUD_BITS_SEG	8
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((uint32_t)(((p) >> LJ_LIGHTUD_BITS_LO) << (LJ_LIGHTUD_BITS_LO-32)))
  |  |  ------------------
  |  |  |  |  297|      8|#define LJ_LIGHTUD_BITS_LO	(47 - LJ_LIGHTUD_BITS_SEG)
  |  |  |  |  ------------------
  |  |  |  |  |  |  296|      8|#define LJ_LIGHTUD_BITS_SEG	8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   42|      8|  uint32_t *segmap = mref(g->gc.lightudseg, uint32_t);
  ------------------
  |  |   36|      8|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
   43|      8|  MSize segnum = g->gc.lightudnum;
   44|      8|  if (segmap) {
  ------------------
  |  Branch (44:7): [True: 0, False: 8]
  ------------------
   45|      0|    MSize seg;
   46|      0|    for (seg = 0; seg <= segnum; seg++)
  ------------------
  |  Branch (46:19): [True: 0, False: 0]
  ------------------
   47|      0|      if (segmap[seg] == up)  /* Fast path. */
  ------------------
  |  Branch (47:11): [True: 0, False: 0]
  ------------------
   48|      0|	return (void *)(((uint64_t)seg << LJ_LIGHTUD_BITS_LO) | lightudlo(u));
  ------------------
  |  |  297|      0|#define LJ_LIGHTUD_BITS_LO	(47 - LJ_LIGHTUD_BITS_SEG)
  |  |  ------------------
  |  |  |  |  296|      0|#define LJ_LIGHTUD_BITS_SEG	8
  |  |  ------------------
  ------------------
              	return (void *)(((uint64_t)seg << LJ_LIGHTUD_BITS_LO) | lightudlo(u));
  ------------------
  |  |  839|      0|  ((u) & (((uint64_t)1 << LJ_LIGHTUD_BITS_LO) - 1))
  |  |  ------------------
  |  |  |  |  297|      0|#define LJ_LIGHTUD_BITS_LO	(47 - LJ_LIGHTUD_BITS_SEG)
  |  |  |  |  ------------------
  |  |  |  |  |  |  296|      0|#define LJ_LIGHTUD_BITS_SEG	8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   49|      0|    segnum++;
   50|       |    /* Leave last segment unused to avoid clash with ITERN key. */
   51|      0|    if (segnum >= (1 << LJ_LIGHTUD_BITS_SEG)-1) lj_err_msg(L, LJ_ERR_BADLU);
  ------------------
  |  |  296|      0|#define LJ_LIGHTUD_BITS_SEG	8
  ------------------
  |  Branch (51:9): [True: 0, False: 0]
  ------------------
   52|      0|  }
   53|      8|  if (!((segnum-1) & segnum) && segnum != 1) {
  ------------------
  |  Branch (53:7): [True: 8, False: 0]
  |  Branch (53:33): [True: 8, False: 0]
  ------------------
   54|      8|    lj_mem_reallocvec(L, segmap, segnum, segnum ? 2*segnum : 2u, uint32_t);
  ------------------
  |  |  127|     16|  ((p) = (t *)lj_mem_realloc(L, p, (on)*sizeof(t), (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  Branch (127:62): [True: 0, False: 8]
  |  |  ------------------
  ------------------
   55|      8|    setmref(g->gc.lightudseg, segmap);
  ------------------
  |  |   39|      8|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   56|      8|  }
   57|      8|  g->gc.lightudnum = segnum;
   58|      8|  segmap[segnum] = up;
   59|      8|  return (void *)(((uint64_t)segnum << LJ_LIGHTUD_BITS_LO) | lightudlo(u));
  ------------------
  |  |  297|      8|#define LJ_LIGHTUD_BITS_LO	(47 - LJ_LIGHTUD_BITS_SEG)
  |  |  ------------------
  |  |  |  |  296|      8|#define LJ_LIGHTUD_BITS_SEG	8
  |  |  ------------------
  ------------------
                return (void *)(((uint64_t)segnum << LJ_LIGHTUD_BITS_LO) | lightudlo(u));
  ------------------
  |  |  839|      8|  ((u) & (((uint64_t)1 << LJ_LIGHTUD_BITS_LO) - 1))
  |  |  ------------------
  |  |  |  |  297|      8|#define LJ_LIGHTUD_BITS_LO	(47 - LJ_LIGHTUD_BITS_SEG)
  |  |  |  |  ------------------
  |  |  |  |  |  |  296|      8|#define LJ_LIGHTUD_BITS_SEG	8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|      8|}

LLVMFuzzerTestOneInput:
 1307|  1.20k|{
 1308|  1.20k|	lua_State *L = luaL_newstate();
 1309|  1.20k|	if (L == NULL)
  ------------------
  |  Branch (1309:6): [True: 0, False: 1.20k]
  ------------------
 1310|      0|		return 0;
 1311|       |
 1312|  1.20k|	FuzzedDataProvider fdp(data, size);
 1313|  1.20k|	int start_slots = 2;
 1314|  3.60k|	for (int i = 1; i <= start_slots; i++)
  ------------------
  |  Branch (1314:18): [True: 2.40k, False: 1.20k]
  ------------------
 1315|  2.40k|		if (fdp.remaining_bytes() != 0)
  ------------------
  |  Branch (1315:7): [True: 2.27k, False: 124]
  ------------------
 1316|  2.27k|			lua_pushrandom(L, &fdp);
 1317|       |
 1318|  1.20k|	if (lua_gettop(L) != 0 &&
  ------------------
  |  Branch (1318:6): [True: 1.20k, False: 0]
  ------------------
 1319|  1.20k|	    fdp.remaining_bytes() != 0) {
  ------------------
  |  Branch (1319:6): [True: 970, False: 230]
  ------------------
 1320|    970|		__lua_gc(L, &fdp);
 1321|    970|		__lua_sethook(L, &fdp);
 1322|    970|		uint8_t idx = fdp.ConsumeIntegralInRange<uint8_t>(0, (int)ARRAY_SIZE(func) - 1);
  ------------------
  |  |   33|    970|#define ARRAY_SIZE(arr)     (sizeof(arr) / sizeof((arr)[0]))
  ------------------
 1323|    970|		func[idx](L, &fdp);
 1324|    970|	}
 1325|       |
 1326|  1.20k|	lua_settop(L, 0);
 1327|  1.20k|	lua_close(L);
 1328|       |
 1329|  1.20k|	return 0;
 1330|  1.20k|}
torture_test.cc:_ZL14lua_pushrandomP9lua_StateP18FuzzedDataProvider:
 1189|  2.27k|{
 1190|  2.27k|	uint8_t idx = fdp->ConsumeIntegralInRange(0, (int)ARRAY_SIZE(push_func) - 1);
  ------------------
  |  |   33|  2.27k|#define ARRAY_SIZE(arr)     (sizeof(arr) / sizeof((arr)[0]))
  ------------------
 1191|  2.27k|	push_func[idx](L, fdp);
 1192|  2.27k|}
torture_test.cc:_ZL14__lua_newtableP9lua_StateP18FuzzedDataProvider:
  573|    573|{
  574|    573|	int top = lua_gettop(L);
  575|    573|	lua_newtable(L);
  ------------------
  |  |  258|    573|#define lua_newtable(L)		lua_createtable(L, 0, 0)
  ------------------
  576|    573|	assert(lua_gettop(L) == top + 1);
  577|    573|}
torture_test.cc:_ZL15__lua_newthreadP9lua_StateP18FuzzedDataProvider:
  583|    677|{
  584|    677|	int top = lua_gettop(L);
  585|    677|	lua_newthread(L);
  586|    677|	assert(lua_gettop(L) == top + 1);
  587|    677|}
torture_test.cc:_ZL17__lua_pushbooleanP9lua_StateP18FuzzedDataProvider:
   58|     77|{
   59|     77|	uint8_t n = fdp->ConsumeIntegral<uint8_t>();
   60|     77|	int top = lua_gettop(L);
   61|     77|	lua_pushboolean(L, n);
   62|     77|	assert(lua_gettop(L) == top + 1);
   63|     77|}
torture_test.cc:_ZL17__lua_pushintegerP9lua_StateP18FuzzedDataProvider:
  238|    110|{
  239|    110|	int top = lua_gettop(L);
  240|    110|	uint8_t n = fdp->ConsumeIntegral<uint8_t>();
  241|    110|	lua_pushinteger(L, n);
  242|    110|	assert(lua_gettop(L) == top + 1);
  243|    110|}
torture_test.cc:_ZL17__lua_pushlstringP9lua_StateP18FuzzedDataProvider:
  249|    203|{
  250|    203|	int top = lua_gettop(L);
  251|    203|	auto str = fdp->ConsumeRandomLengthString(max_str_len);
  252|    203|	lua_pushlstring(L, str.c_str(), str.size());
  253|    203|	assert(lua_gettop(L) == top + 1);
  254|    203|}
torture_test.cc:_ZL13__lua_pushnilP9lua_StateP18FuzzedDataProvider:
  260|    263|{
  261|    263|	int top = lua_gettop(L);
  262|    263|	lua_pushnil(L);
  263|    263|	assert(lua_gettop(L) == top + 1);
  264|    263|}
torture_test.cc:_ZL16__lua_pushnumberP9lua_StateP18FuzzedDataProvider:
  270|    122|{
  271|    122|	int top = lua_gettop(L);
  272|    122|	uint8_t n = fdp->ConsumeIntegral<uint8_t>();
  273|    122|	lua_pushnumber(L, n);
  274|    122|	assert(lua_gettop(L) == top + 1);
  275|    122|}
torture_test.cc:_ZL16__lua_pushstringP9lua_StateP18FuzzedDataProvider:
   47|    296|{
   48|    296|	auto str = fdp->ConsumeRandomLengthString(max_str_len);
   49|    296|	int top = lua_gettop(L);
   50|    296|	lua_pushstring(L, str.c_str());
   51|    296|	assert(lua_gettop(L) == top + 1);
   52|    296|}
torture_test.cc:_ZL8__lua_gcP9lua_StateP18FuzzedDataProvider:
  622|  1.11k|{
  623|  1.11k|	int top = lua_gettop(L);
  624|  1.11k|	uint8_t idx = fdp->ConsumeIntegralInRange<uint8_t>(0, ARRAY_SIZE(gc_mode) - 1);
  ------------------
  |  |   33|  1.11k|#define ARRAY_SIZE(arr)     (sizeof(arr) / sizeof((arr)[0]))
  ------------------
  625|  1.11k|	lua_gc(L, gc_mode[idx], 0);
  626|  1.11k|	assert(lua_gettop(L) == top);
  627|  1.11k|}
torture_test.cc:_ZL13__lua_sethookP9lua_StateP18FuzzedDataProvider:
  648|    970|{
  649|    970|	int top = lua_gettop(L);
  650|    970|	uint8_t idx = fdp->ConsumeIntegralInRange<uint8_t>(0, ARRAY_SIZE(hook_mode) - 1);
  ------------------
  |  |   33|    970|#define ARRAY_SIZE(arr)     (sizeof(arr) / sizeof((arr)[0]))
  ------------------
  651|    970|	lua_sethook(L, Hook, hook_mode[idx], 1);
  652|    970|	assert(lua_gettop(L) == top);
  653|    970|}
torture_test.cc:_ZL4HookP9lua_StateP9lua_Debug:
  639|      3|{
  640|      3|	(void)L;
  641|      3|	(void)ar;
  642|      3|}
torture_test.cc:_ZL16__lua_checkstackP9lua_StateP18FuzzedDataProvider:
  102|    310|{
  103|    310|	uint8_t n = fdp->ConsumeIntegral<uint8_t>();
  104|    310|	int rc = lua_checkstack(L, n);
  105|    310|	assert(rc != 0);
  106|    310|}
torture_test.cc:_ZL12__lua_concatP9lua_StateP18FuzzedDataProvider:
  112|     26|{
  113|     26|	int top = lua_gettop(L);
  114|     26|	uint8_t n = fdp->ConsumeIntegralInRange<uint8_t>(0, top);
  115|     56|	for (int i = 1; i <= n; i++) {
  ------------------
  |  Branch (115:18): [True: 32, False: 24]
  ------------------
  116|     32|		int t = lua_type(L, -i);
  117|     32|		if (t != LUA_TNUMBER &&
  ------------------
  |  |   78|     64|#define LUA_TNUMBER		3
  ------------------
  |  Branch (117:7): [True: 14, False: 18]
  ------------------
  118|     32|		    t != LUA_TSTRING)
  ------------------
  |  |   79|     14|#define LUA_TSTRING		4
  ------------------
  |  Branch (118:7): [True: 2, False: 12]
  ------------------
  119|      2|			return;
  120|     32|	}
  121|     24|	lua_concat(L, n);
  122|     24|	assert(lua_gettop(L) == top - n + 1);
  123|     24|}
torture_test.cc:_ZL17__lua_createtableP9lua_StateP18FuzzedDataProvider:
 1198|     20|{
 1199|     20|	int nrows = fdp->ConsumeIntegral<uint8_t>();
 1200|       |	/* XXX: Lua associative arrays. */
 1201|     20|	lua_createtable(L, nrows, 0);
 1202|  1.31k|	for (int i = 0; i < nrows; i++) {
  ------------------
  |  Branch (1202:18): [True: 1.29k, False: 20]
  ------------------
 1203|  1.29k|		lua_pushnumber(L, i);
 1204|  1.29k|		lua_rawseti(L, -2, i + 1);
 1205|  1.29k|	}
 1206|     20|	assert(lua_gettop(L) != 0);
 1207|     20|}
torture_test.cc:_ZL15__lua_getglobalP9lua_StateP18FuzzedDataProvider:
  410|     13|{
  411|     13|	auto name = fdp->ConsumeRandomLengthString(max_str_len);
  412|     13|	int top = lua_gettop(L);
  413|     13|	lua_getglobal(L, name.c_str());
  ------------------
  |  |  279|     13|#define lua_getglobal(L,s)	lua_getfield(L, LUA_GLOBALSINDEX, (s))
  |  |  ------------------
  |  |  |  |   38|     13|#define LUA_GLOBALSINDEX	(-10002)
  |  |  ------------------
  ------------------
  414|     13|	assert(lua_gettop(L) == top + 1);
  415|     13|}
torture_test.cc:_ZL13__lua_gethookP9lua_StateP18FuzzedDataProvider:
  659|      3|{
  660|      3|	int top = lua_gettop(L);
  661|      3|	lua_gethook(L);
  662|      3|	assert(lua_gettop(L) == top);
  663|      3|}
torture_test.cc:_ZL18__lua_gethookcountP9lua_StateP18FuzzedDataProvider:
  669|      3|{
  670|      3|	int top = lua_gettop(L);
  671|      3|	int hook_count = lua_gethookcount(L);
  672|      3|	assert(hook_count >= 0);
  673|      0|	assert(lua_gettop(L) == top);
  674|      3|}
torture_test.cc:_ZL17__lua_gethookmaskP9lua_StateP18FuzzedDataProvider:
  680|      4|{
  681|      4|	int top = lua_gettop(L);
  682|      4|	int hook_mask = lua_gethookmask(L);
  683|      4|	assert(hook_mask >= 0);
  684|      0|	assert(lua_gettop(L) == top);
  685|      4|}
torture_test.cc:_ZL13__lua_getinfoP9lua_StateP18FuzzedDataProvider:
  514|      5|{
  515|      5|	int top = lua_gettop(L);
  516|      5|	lua_Debug ar;
  517|      5|	lua_pushcfunction(L, cfunction);
  ------------------
  |  |  262|      5|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  518|      5|	const char *what = ">nSltufL";
  519|      5|	lua_getinfo(L, what, &ar);
  520|      5|	assert(lua_gettop(L) >= top - 1 &&
  521|      5|	       lua_gettop(L) <= top + 2);
  522|      5|}
torture_test.cc:_ZL9cfunctionP9lua_State:
   38|      8|cfunction(lua_State *L) {
   39|      8|	lua_gettop(L);
   40|      8|	return 0;
   41|      8|}
torture_test.cc:_ZL18__lua_getmetatableP9lua_StateP18FuzzedDataProvider:
  562|      6|{
  563|      6|	int top = lua_gettop(L);
  564|      6|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  565|      6|	lua_getmetatable(L, index);
  566|      6|	assert(lua_gettop(L) - top <= 1);
  567|      6|}
torture_test.cc:_ZL14__lua_getstackP9lua_StateP18FuzzedDataProvider:
  528|      4|{
  529|      4|	int top = lua_gettop(L);
  530|      4|	int level = fdp->ConsumeIntegral<int8_t>();
  531|      4|	lua_Debug ar;
  532|      4|	lua_getstack(L, level, &ar);
  533|      4|	assert(lua_gettop(L) == top);
  534|      4|}
torture_test.cc:_ZL14__lua_gettableP9lua_StateP18FuzzedDataProvider:
  948|      5|{
  949|      5|	int top = lua_gettop(L);
  950|      5|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  951|      5|	if (!lua_istable(L, index))
  ------------------
  |  |  267|      5|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|      5|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (951:6): [True: 3, False: 2]
  ------------------
  952|      3|		return;
  953|      2|	uint8_t key = fdp->ConsumeIntegral<uint8_t>();
  954|      2|	lua_pushnumber(L, key);
  955|      2|	lua_gettable(L, index);
  956|       |	/* XXX: Wrong number of elements. */
  957|       |	/* assert(lua_gettop(L) == top); */
  958|      2|}
torture_test.cc:_ZL12__lua_gettopP9lua_StateP18FuzzedDataProvider:
  129|      5|{
  130|      5|	int rc = lua_gettop(L);
  131|      5|	assert(rc >= 0);
  132|      5|}
torture_test.cc:_ZL16__lua_getupvalueP9lua_StateP18FuzzedDataProvider:
  433|      5|{
  434|      5|	int top = lua_gettop(L);
  435|      5|	int funcindex = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  436|      5|	int n = fdp->ConsumeIntegral<uint8_t>();
  437|      5|	lua_getupvalue(L, funcindex, n);
  438|      5|	assert(lua_gettop(L) == top || lua_gettop(L) == top + 1);
  439|      5|}
torture_test.cc:_ZL12__lua_insertP9lua_StateP18FuzzedDataProvider:
  138|      8|{
  139|      8|	int top = lua_gettop(L);
  140|      8|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  141|      8|	lua_insert(L, index);
  142|      8|	assert(lua_gettop(L) == top - 1 + 1);
  143|      8|}
torture_test.cc:_ZL15__lua_isbooleanP9lua_StateP18FuzzedDataProvider:
  149|      2|{
  150|      2|	int top = lua_gettop(L);
  151|      2|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  152|      2|	int rc = lua_isboolean(L, index);
  ------------------
  |  |  270|      2|#define lua_isboolean(L,n)	(lua_type(L, (n)) == LUA_TBOOLEAN)
  |  |  ------------------
  |  |  |  |   76|      2|#define LUA_TBOOLEAN		1
  |  |  ------------------
  ------------------
  153|      2|	assert(rc == 0 || rc == 1);
  154|      2|}
torture_test.cc:_ZL17__lua_iscfunctionP9lua_StateP18FuzzedDataProvider:
  160|      4|{
  161|      4|	int top = lua_gettop(L);
  162|      4|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  163|      4|	int rc = lua_iscfunction(L, index);
  164|      4|	assert(rc == 0 || rc == 1);
  165|      4|}
torture_test.cc:_ZL16__lua_isfunctionP9lua_StateP18FuzzedDataProvider:
  171|      4|{
  172|      4|	int top = lua_gettop(L);
  173|      4|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  174|      4|	int rc = lua_isfunction(L, index);
  ------------------
  |  |  266|      4|#define lua_isfunction(L,n)	(lua_type(L, (n)) == LUA_TFUNCTION)
  |  |  ------------------
  |  |  |  |   81|      4|#define LUA_TFUNCTION		6
  |  |  ------------------
  ------------------
  175|      4|	assert(rc == 0 || rc == 1);
  176|      4|}
torture_test.cc:_ZL21__lua_islightuserdataP9lua_StateP18FuzzedDataProvider:
  456|      2|{
  457|      2|	int top = lua_gettop(L);
  458|      2|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  459|      2|	int rc = lua_islightuserdata(L, index);
  ------------------
  |  |  268|      2|#define lua_islightuserdata(L,n)	(lua_type(L, (n)) == LUA_TLIGHTUSERDATA)
  |  |  ------------------
  |  |  |  |   77|      2|#define LUA_TLIGHTUSERDATA	2
  |  |  ------------------
  ------------------
  460|      2|	assert(rc == 0 || rc == 1);
  461|      2|}
torture_test.cc:_ZL11__lua_isnilP9lua_StateP18FuzzedDataProvider:
  182|      4|{
  183|      4|	int top = lua_gettop(L);
  184|      4|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  185|      4|	int rc = lua_isnil(L, index);
  ------------------
  |  |  269|      4|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|      4|#define LUA_TNIL		0
  |  |  ------------------
  ------------------
  186|      4|	assert(rc == 0 || rc == 1);
  187|      4|}
torture_test.cc:_ZL12__lua_isnoneP9lua_StateP18FuzzedDataProvider:
  193|      4|{
  194|      4|	int top = lua_gettop(L);
  195|      4|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  196|      4|	int rc = lua_isnone(L, index);
  ------------------
  |  |  272|      4|#define lua_isnone(L,n)		(lua_type(L, (n)) == LUA_TNONE)
  |  |  ------------------
  |  |  |  |   73|      4|#define LUA_TNONE		(-1)
  |  |  ------------------
  ------------------
  197|      4|	assert(rc == 0 || rc == 1);
  198|      0|	assert(lua_gettop(L) == top);
  199|      4|}
torture_test.cc:_ZL17__lua_isnoneornilP9lua_StateP18FuzzedDataProvider:
  205|      4|{
  206|      4|	int top = lua_gettop(L);
  207|      4|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  208|      4|	lua_isnoneornil(L, index);
  ------------------
  |  |  273|      4|#define lua_isnoneornil(L, n)	(lua_type(L, (n)) <= 0)
  ------------------
  209|      4|	assert(lua_gettop(L) == top);
  210|      4|}
torture_test.cc:_ZL14__lua_isnumberP9lua_StateP18FuzzedDataProvider:
   80|      7|{
   81|      7|	int top = lua_gettop(L);
   82|      7|	uint8_t n = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
   83|      7|	lua_isnumber(L, n);
   84|      7|	assert(lua_gettop(L) == top);
   85|      7|}
torture_test.cc:_ZL14__lua_isstringP9lua_StateP18FuzzedDataProvider:
  216|      8|{
  217|      8|	int top = lua_gettop(L);
  218|      8|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  219|      8|	int rc = lua_isstring(L, index);
  220|      8|	assert(rc == 0 || rc == 1);
  221|      8|}
torture_test.cc:_ZL13__lua_istableP9lua_StateP18FuzzedDataProvider:
  227|      6|{
  228|      6|	int top = lua_gettop(L);
  229|      6|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  230|      6|	int rc = lua_istable(L, index);
  ------------------
  |  |  267|      6|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|      6|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  231|      6|	assert(rc == 0 || rc == 1);
  232|      6|}
torture_test.cc:_ZL14__lua_isthreadP9lua_StateP18FuzzedDataProvider:
  478|      5|{
  479|      5|	int top = lua_gettop(L);
  480|      5|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  481|      5|	int rc = lua_isthread(L, index);
  ------------------
  |  |  271|      5|#define lua_isthread(L,n)	(lua_type(L, (n)) == LUA_TTHREAD)
  |  |  ------------------
  |  |  |  |   83|      5|#define LUA_TTHREAD		8
  |  |  ------------------
  ------------------
  482|      5|	assert(rc == 0 || rc == 1);
  483|      5|}
torture_test.cc:_ZL16__lua_isuserdataP9lua_StateP18FuzzedDataProvider:
  467|      4|{
  468|      4|	int top = lua_gettop(L);
  469|      4|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  470|      4|	int rc = lua_isuserdata(L, index);
  471|      4|	assert(rc == 0 || rc == 1);
  472|      4|}
torture_test.cc:_ZL10__lua_nextP9lua_StateP18FuzzedDataProvider:
  500|      9|{
  501|      9|	int top = lua_gettop(L);
  502|      9|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  503|      9|	if (!lua_istable(L, index))
  ------------------
  |  |  267|      9|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|      9|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (503:6): [True: 6, False: 3]
  ------------------
  504|      6|		return;
  505|      3|	lua_pushnil(L);  /* first key */
  506|      3|	lua_next(L, index);
  507|      3|	assert(lua_gettop(L) - top - 1 <= 2);
  508|      3|}
torture_test.cc:_ZL9__lua_popP9lua_StateP18FuzzedDataProvider:
   69|     66|{
   70|     66|	int top = lua_gettop(L);
   71|     66|	uint8_t n = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
   72|     66|	lua_pop(L, n);
  ------------------
  |  |  256|     66|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   73|     66|	assert(lua_gettop(L) == top - n);
   74|     66|}
torture_test.cc:_ZL18__lua_pushcclosureP9lua_StateP18FuzzedDataProvider:
  540|      9|{
  541|       |	/* Maximum n is 255 in lua_pushcclosure(3). */
  542|      9|	int n = fdp->ConsumeIntegralInRange<uint8_t>(1, 10);
  543|     33|	for (int i = 1; i < n; i++)
  ------------------
  |  Branch (543:18): [True: 24, False: 9]
  ------------------
  544|     24|		lua_pushnumber(L, i);
  545|      9|	lua_pushcclosure(L, cfunction, n);
  546|      9|}
torture_test.cc:_ZL19__lua_pushcfunctionP9lua_StateP18FuzzedDataProvider:
  552|      4|{
  553|      4|	int top = lua_gettop(L);
  554|      4|	lua_pushcfunction(L, cfunction);
  ------------------
  |  |  262|      4|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  555|      4|	assert(lua_gettop(L) == top + 1);
  556|      4|}
torture_test.cc:_ZL16__lua_pushthreadP9lua_StateP18FuzzedDataProvider:
  489|      4|{
  490|      4|	int top = lua_gettop(L);
  491|      4|	int rc = lua_pushthread(L);
  492|      4|	assert(rc == 1);
  493|      0|	assert(lua_gettop(L) == top + 1);
  494|      4|}
torture_test.cc:_ZL15__lua_pushvalueP9lua_StateP18FuzzedDataProvider:
  281|      5|{
  282|      5|	int top = lua_gettop(L);
  283|      5|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  284|      5|	lua_pushvalue(L, index);
  285|      5|	assert(lua_gettop(L) == top + 1);
  286|      5|}
torture_test.cc:_ZL12__lua_rawgetP9lua_StateP18FuzzedDataProvider:
  691|      5|{
  692|      5|	int top = lua_gettop(L);
  693|      5|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  694|      5|	if (!lua_istable(L, index))
  ------------------
  |  |  267|      5|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|      5|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (694:6): [True: 3, False: 2]
  ------------------
  695|      3|		return;
  696|      2|	uint8_t key = fdp->ConsumeIntegral<uint8_t>();
  697|      2|	lua_pushnumber(L, key);
  698|      2|	lua_rawget(L, index);
  699|       |	/* XXX: Wrong number of elements. */
  700|       |	/* assert(lua_gettop(L) == top); */
  701|      2|}
torture_test.cc:_ZL13__lua_rawgetiP9lua_StateP18FuzzedDataProvider:
  743|      8|{
  744|      8|	int top = lua_gettop(L);
  745|      8|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  746|      8|	if (!lua_istable(L, index))
  ------------------
  |  |  267|      8|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|      8|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (746:6): [True: 4, False: 4]
  ------------------
  747|      4|		return;
  748|      4|	int i = fdp->ConsumeIntegral<uint8_t>();
  749|      4|	lua_rawgeti(L, index, i);
  750|      4|	assert(lua_gettop(L) == top + 1);
  751|      4|}
torture_test.cc:_ZL12__lua_rawsetP9lua_StateP18FuzzedDataProvider:
  707|     10|{
  708|     10|	int top = lua_gettop(L);
  709|     10|	if (top == 0)
  ------------------
  |  Branch (709:6): [True: 0, False: 10]
  ------------------
  710|      0|		return;
  711|     10|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  712|     10|	if (!lua_istable(L, index))
  ------------------
  |  |  267|     10|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|     10|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (712:6): [True: 6, False: 4]
  ------------------
  713|      6|		return;
  714|      4|	uint8_t key = fdp->ConsumeIntegral<uint8_t>();
  715|      4|	uint8_t value = fdp->ConsumeIntegral<uint8_t>();
  716|      4|	lua_pushnumber(L, value);
  717|      4|	lua_pushnumber(L, key);
  718|      4|	lua_rawset(L, index);
  719|       |	/* XXX: Wrong number of elements. */
  720|       |	/* assert(lua_gettop(L) == top - 2); */
  721|      4|}
torture_test.cc:_ZL13__lua_rawsetiP9lua_StateP18FuzzedDataProvider:
  727|     12|{
  728|     12|	int top = lua_gettop(L);
  729|     12|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  730|     12|	if (!lua_istable(L, index))
  ------------------
  |  |  267|     12|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|     12|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (730:6): [True: 5, False: 7]
  ------------------
  731|      5|		return;
  732|      7|	int n = fdp->ConsumeIntegral<uint8_t>();
  733|      7|	__lua_pushnumber(L, fdp);
  734|      7|	lua_rawseti(L, index, n);
  735|       |	/* XXX: Wrong number of elements. */
  736|       |	/* assert(lua_gettop(L) == top - 1); */
  737|      7|}
torture_test.cc:_ZL12__lua_removeP9lua_StateP18FuzzedDataProvider:
  292|      7|{
  293|      7|	int top = lua_gettop(L);
  294|      7|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  295|      7|	lua_remove(L, index);
  296|      7|	assert(lua_gettop(L) == top - 1);
  297|      7|}
torture_test.cc:_ZL13__lua_replaceP9lua_StateP18FuzzedDataProvider:
  303|      6|{
  304|      6|	int top = lua_gettop(L);
  305|      6|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  306|      6|	lua_replace(L, index);
  307|      6|	assert(lua_gettop(L) == top - 1);
  308|      6|}
torture_test.cc:_ZL15__lua_setglobalP9lua_StateP18FuzzedDataProvider:
  314|      4|{
  315|      4|	int top = lua_gettop(L);
  316|      4|	auto str = fdp->ConsumeRandomLengthString(max_str_len);
  317|      4|	lua_setglobal(L, str.c_str());
  ------------------
  |  |  278|      4|#define lua_setglobal(L,s)	lua_setfield(L, LUA_GLOBALSINDEX, (s))
  |  |  ------------------
  |  |  |  |   38|      4|#define LUA_GLOBALSINDEX	(-10002)
  |  |  ------------------
  ------------------
  318|      4|	assert(lua_gettop(L) == top - 1);
  319|      4|}
torture_test.cc:_ZL12__lua_settopP9lua_StateP18FuzzedDataProvider:
  325|      3|{
  326|      3|	int top = lua_gettop(L);
  327|      3|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  328|      3|	lua_settop(L, index);
  329|      3|	assert(lua_gettop(L) == index);
  330|      3|}
torture_test.cc:_ZL16__lua_setupvalueP9lua_StateP18FuzzedDataProvider:
  421|      5|{
  422|      5|	int top = lua_gettop(L);
  423|      5|	int funcindex = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  424|      5|	int n = fdp->ConsumeIntegral<uint8_t>();
  425|      5|	lua_setupvalue(L, funcindex, n);
  426|      5|	assert(lua_gettop(L) == top);
  427|      5|}
torture_test.cc:_ZL12__lua_statusP9lua_StateP18FuzzedDataProvider:
  336|      2|{
  337|      2|	int rc = lua_status(L);
  338|      2|	assert(rc == 0 || rc == LUA_YIELD);
  339|      2|}
torture_test.cc:_ZL15__lua_tobooleanP9lua_StateP18FuzzedDataProvider:
  345|      4|{
  346|      4|	int top = lua_gettop(L);
  347|      4|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  348|      4|	int rc = lua_toboolean(L, index);
  349|      4|	assert(rc == 0 || rc == 1);
  350|      4|}
torture_test.cc:_ZL15__lua_tointegerP9lua_StateP18FuzzedDataProvider:
  356|      6|{
  357|      6|	int top = lua_gettop(L);
  358|      6|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  359|      6|	lua_tointeger(L, index);
  360|      6|	assert(lua_gettop(L) == top);
  361|      6|}
torture_test.cc:_ZL15__lua_tolstringP9lua_StateP18FuzzedDataProvider:
  367|      7|{
  368|      7|	int top = lua_gettop(L);
  369|      7|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  370|      7|	lua_tolstring(L, index, NULL);
  371|      7|	assert(lua_gettop(L) == top);
  372|      7|}
torture_test.cc:_ZL14__lua_tonumberP9lua_StateP18FuzzedDataProvider:
   91|     10|{
   92|     10|	int top = lua_gettop(L);
   93|     10|	uint8_t n = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
   94|     10|	lua_tonumber(L, n);
   95|     10|	assert(lua_gettop(L) == top);
   96|     10|}
torture_test.cc:_ZL14__lua_tostringP9lua_StateP18FuzzedDataProvider:
  378|      4|{
  379|      4|	int top = lua_gettop(L);
  380|      4|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  381|      4|	lua_tostring(L, index);
  ------------------
  |  |  281|      4|#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
  ------------------
  382|      4|	assert(lua_gettop(L) == top);
  383|      4|}
torture_test.cc:_ZL16__lua_touserdataP9lua_StateP18FuzzedDataProvider:
  445|      9|{
  446|      9|	int top = lua_gettop(L);
  447|      9|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  448|      9|	lua_touserdata(L, index);
  449|      9|	assert(lua_gettop(L) == top);
  450|      9|}
torture_test.cc:_ZL10__lua_typeP9lua_StateP18FuzzedDataProvider:
  389|     10|{
  390|     10|	int top = lua_gettop(L);
  391|     10|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  392|     10|	int type = lua_type(L, index);
  393|     10|	assert(type == LUA_TBOOLEAN       ||
  394|     10|	       type == LUA_TFUNCTION      ||
  395|     10|	       type == LUA_TLIGHTUSERDATA ||
  396|     10|	       type == LUA_TNIL           ||
  397|     10|	       type == LUA_TNONE          ||
  398|     10|	       type == LUA_TNUMBER        ||
  399|     10|	       type == LUA_TSTRING        ||
  400|     10|	       type == LUA_TTABLE         ||
  401|     10|	       type == LUA_TTHREAD        ||
  402|     10|	       type == LUA_TUSERDATA);
  403|      0|	assert(lua_gettop(L) == top);
  404|     10|}
torture_test.cc:_ZL14__lua_typenameP9lua_StateP18FuzzedDataProvider:
  593|      7|{
  594|      7|	int top = lua_gettop(L);
  595|      7|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  596|      7|	const char* name = lua_typename(L, index);
  597|      7|	assert(name);
  598|      0|	assert(lua_gettop(L) == top);
  599|      7|}
torture_test.cc:_ZL15__lua_upvalueidP9lua_StateP18FuzzedDataProvider:
 1075|      5|{
 1076|      5|	int top = lua_gettop(L);
 1077|      5|	if (fdp->remaining_bytes() == 0)
  ------------------
  |  Branch (1077:6): [True: 1, False: 4]
  ------------------
 1078|      1|		return;
 1079|      4|	int funcindex = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1080|      4|	if (lua_type(L, funcindex) != LUA_TFUNCTION)
  ------------------
  |  |   81|      4|#define LUA_TFUNCTION		6
  ------------------
  |  Branch (1080:6): [True: 4, False: 0]
  ------------------
 1081|      4|		return;
 1082|      0|	int n = fdp->ConsumeIntegral<uint8_t>();
 1083|      0|	void *p = lua_upvalueid(L, funcindex, n);
 1084|      0|	assert(p);
 1085|      0|	assert(lua_gettop(L) == top);
 1086|      0|}
torture_test.cc:_ZL14__lua_tothreadP9lua_StateP18FuzzedDataProvider:
 1064|      3|{
 1065|      3|	int top = lua_gettop(L);
 1066|      3|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1067|      3|	lua_tothread(L, index);
 1068|      3|	assert(lua_gettop(L) == top);
 1069|      3|}
torture_test.cc:_ZL17__lua_tocfunctionP9lua_StateP18FuzzedDataProvider:
 1022|      6|{
 1023|      6|	int top = lua_gettop(L);
 1024|      6|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1025|      6|	lua_tocfunction(L, index);
 1026|      6|	assert(lua_gettop(L) == top);
 1027|      6|}
torture_test.cc:_ZL17__lua_newuserdataP9lua_StateP18FuzzedDataProvider:
 1055|      3|{
 1056|      3|	uint8_t size = fdp->ConsumeIntegral<uint8_t>();
 1057|      3|	lua_newuserdata(L, size);
 1058|      3|}
torture_test.cc:_ZL14__lua_setfieldP9lua_StateP18FuzzedDataProvider:
 1008|     11|{
 1009|     11|	int top = lua_gettop(L);
 1010|     11|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1011|     11|	if (lua_type(L, index) != LUA_TTABLE)
  ------------------
  |  |   80|     11|#define LUA_TTABLE		5
  ------------------
  |  Branch (1011:6): [True: 4, False: 7]
  ------------------
 1012|      4|		return;
 1013|      7|	auto k = fdp->ConsumeRemainingBytesAsString();
 1014|      7|	lua_setfield(L, index, k.c_str());
 1015|      7|	assert(lua_gettop(L) == top - 1);
 1016|      7|}
torture_test.cc:_ZL14__lua_getfieldP9lua_StateP18FuzzedDataProvider:
 1041|      6|{
 1042|      6|	int top = lua_gettop(L);
 1043|      6|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1044|      6|	if (lua_type(L, index) != LUA_TTABLE)
  ------------------
  |  |   80|      6|#define LUA_TTABLE		5
  ------------------
  |  Branch (1044:6): [True: 1, False: 5]
  ------------------
 1045|      1|		return;
 1046|      5|	auto k = fdp->ConsumeRemainingBytesAsString();
 1047|      5|	lua_getfield(L, index, k.c_str());
 1048|      5|	assert(lua_gettop(L) == top + 1);
 1049|      5|}
torture_test.cc:_ZL14__lua_registerP9lua_StateP18FuzzedDataProvider:
  998|      5|{
  999|      5|	int top = lua_gettop(L);
 1000|      5|	lua_register(L, "cfunction", cfunction);
  ------------------
  |  |  260|      5|#define lua_register(L,n,f) (lua_pushcfunction(L, (f)), lua_setglobal(L, (n)))
  |  |  ------------------
  |  |  |  |  262|      5|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  |  |  ------------------
  |  |               #define lua_register(L,n,f) (lua_pushcfunction(L, (f)), lua_setglobal(L, (n)))
  |  |  ------------------
  |  |  |  |  278|      5|#define lua_setglobal(L,s)	lua_setfield(L, LUA_GLOBALSINDEX, (s))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|      5|#define LUA_GLOBALSINDEX	(-10002)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1001|      5|	assert(lua_gettop(L) == top);
 1002|      5|}
torture_test.cc:_ZL14__lua_settableP9lua_StateP18FuzzedDataProvider:
 1033|      4|{
 1034|       |	/* XXX */
 1035|      4|}
torture_test.cc:_ZL14__lua_rawequalP9lua_StateP18FuzzedDataProvider:
 1092|      7|{
 1093|      7|	int top = lua_gettop(L);
 1094|      7|	if (top < 2)
  ------------------
  |  Branch (1094:6): [True: 0, False: 7]
  ------------------
 1095|      0|		return;
 1096|      7|	uint8_t index1 = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1097|      7|	uint8_t index2 = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
 1098|      7|	lua_rawequal(L, index1, index2);
 1099|      7|	assert(lua_gettop(L) == top);
 1100|      7|}
torture_test.cc:_ZL16__luaL_tracebackP9lua_StateP18FuzzedDataProvider:
 1106|      7|{
 1107|      7|	int top = lua_gettop(L);
 1108|      7|	auto buf = fdp->ConsumeRandomLengthString(max_str_len);
 1109|      7|	luaL_traceback(L, L, buf.c_str(), 1);
 1110|      7|	assert(lua_gettop(L) == top + 1);
 1111|      7|}
torture_test.cc:_ZL16__luaL_tolstringP9lua_StateP18FuzzedDataProvider:
 1117|      5|{
 1118|      5|	int top = lua_gettop(L);
 1119|      5|	auto idx = fdp->ConsumeIntegralInRange(1, top);
 1120|      5|#if LUA_VERSION_NUM < 503
 1121|      5|	lua_tolstring(L, idx, NULL);
 1122|       |#else
 1123|       |	luaL_tolstring(L, idx, NULL);
 1124|       |#endif /* LUA_VERSION_NUM */
 1125|       |	/* XXX: Wrong number of elements. */
 1126|       |	/* assert(lua_gettop(L) == top + 1); */
 1127|      5|}
torture_test.cc:_ZL12__lua_cpcallP9lua_StateP18FuzzedDataProvider:
  936|      8|{
  937|      8|	int top = lua_gettop(L);
  938|      8|	int rc = lua_cpcall(L, cfunction, NULL);
  939|      8|	assert(rc == 0);
  940|      0|	assert(lua_gettop(L) - top <= 1);
  941|      8|}
torture_test.cc:_ZL13__lua_getfenvP9lua_StateP18FuzzedDataProvider:
  836|      6|{
  837|      6|	int top = lua_gettop(L);
  838|      6|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  839|      6|	lua_getfenv(L, index);
  840|      6|	assert(lua_gettop(L) == top + 1);
  841|      6|}
torture_test.cc:_ZL14__lua_lessthanP9lua_StateP18FuzzedDataProvider:
  758|      8|{
  759|      8|	int top = lua_gettop(L);
  760|      8|	uint8_t index1 = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  761|      8|	uint8_t index2 = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  762|      8|	if ((lua_type(L, index1) != LUA_TNUMBER  ||
  ------------------
  |  |   78|     16|#define LUA_TNUMBER		3
  ------------------
  |  Branch (762:7): [True: 6, False: 2]
  ------------------
  763|      8|	     lua_type(L, index1) != LUA_TBOOLEAN ||
  ------------------
  |  |   76|     10|#define LUA_TBOOLEAN		1
  ------------------
  |  Branch (763:7): [True: 2, False: 0]
  ------------------
  764|      8|	     lua_type(L, index1) != LUA_TSTRING) &&
  ------------------
  |  |   79|      0|#define LUA_TSTRING		4
  ------------------
  |  Branch (764:7): [True: 0, False: 0]
  ------------------
  765|      8|	    (lua_type(L, index2) != LUA_TNUMBER  ||
  ------------------
  |  |   78|     16|#define LUA_TNUMBER		3
  ------------------
  |  Branch (765:7): [True: 6, False: 2]
  ------------------
  766|      8|	     lua_type(L, index2) != LUA_TBOOLEAN ||
  ------------------
  |  |   76|     10|#define LUA_TBOOLEAN		1
  ------------------
  |  Branch (766:7): [True: 2, False: 0]
  ------------------
  767|      8|	     lua_type(L, index2) != LUA_TSTRING))
  ------------------
  |  |   79|      0|#define LUA_TSTRING		4
  ------------------
  |  Branch (767:7): [True: 0, False: 0]
  ------------------
  768|      8|		return;
  769|      0|	int rc = lua_lessthan(L, index1, index2);
  770|      0|	assert(rc == 0 || rc == 1);
  771|      0|}
torture_test.cc:_ZL12__lua_objlenP9lua_StateP18FuzzedDataProvider:
  779|      7|{
  780|      7|	int top = lua_gettop(L);
  781|      7|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  782|      7|#if LUA_VERSION_NUM == 501
  783|      7|	lua_objlen(L, index);
  784|       |#else
  785|       |	lua_rawlen(L, index);
  786|       |#endif /* LUA_VERSION_NUM */
  787|      7|	assert(lua_gettop(L) == top);
  788|      7|}
torture_test.cc:_ZL13__lua_setfenvP9lua_StateP18FuzzedDataProvider:
  849|      6|{
  850|      6|	int top = lua_gettop(L);
  851|      6|	uint8_t index = fdp->ConsumeIntegralInRange<uint8_t>(1, top);
  852|      6|	if (!lua_istable(L, -1))
  ------------------
  |  |  267|      6|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|      6|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (852:6): [True: 2, False: 4]
  ------------------
  853|      2|		return;
  854|      4|	lua_setfenv(L, index);
  855|      4|	assert(lua_gettop(L) == top - 1);
  856|      4|}

